package ff0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fd.common.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=FF0E ****
// This user can only enter this application by, first, going
// through FF0B and selecting a worksheet.
// 
// This application displays demand, forecast and inventory
// information and allows users to alter some figures to come
// up with a forecasted quantity to buy for a specific product.
// 
// The user may scroll forward or back to view each of the
// worksheet pages or scroll left and right to see various
// forecast months.
// 
// The user may temporarily save the forecast to work on later
// that day by pressing PF13, save it as a "MASTER" forecast by
// pressing PF14, PF15 to application FF0G, print the displayed
// forecast by pressing PF16 or exit to any allowed application
// via FAST PATH.
// 
// This application uses FFWREC.FFQMBYMO to store actual buy
// month.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/14/89  SPOPA   New application.
// FF#17    06/04/90  SPOPA   Remove batch submit of job FF6501
//                             when worksheet saved as master.
// FIX      06/14/90  SPOPA   Correct HIST SEAS IDX calculate.
// FF#31    06/15/90  SPOPA   Recalculate TOTAL FUT instead of
//                             FCST FUT % when FF_CURR_DMD_FCST
//                             changes in months past buy month
// FF#0     06/21/90  SPOPA   Indicate data in use by another
//                            if row not found when obtaining
//                            the next worksheet number to use.
// FF#50    06/22/90  SPOPA   Change the parameters passed to
//                            FF1801 when PRINT is requested.
// FF#33    06/28/90  SPOPA   Do not calculate prop forecast if
//                            FCST MO not the same as current.
// FF#60    07/02/90  LDELUH  For buy work sheets display curr
//                            prop, dmd, & sales for the mstr
//                            qtys.
// FF#59    07/03/90  LDELUH  Replace main with actual buy mo.
//                            qtys.
//                    SFORD   Backed out prior month's qtys,
//                            mstr sls fcst, from the curr/cont
//                            fcst mo. (FF0ES11,FF0E116,FF0E117
//  FIX     07/31/90  LDELUH  Do same as in FF#60 for pfcst w/s
//  FIX     08/01/90  SFORD   Use FF0EW01.FFQMBYMO instead of
//                             FFWREC.FFQMBYMO(FF0E122,FF0E222)
//  FIX     08/02/90  SFORD   Invintory adjust fix (FF0ES30)
//  FF#156  08/03/90  SFORD   Re-calc of Safety stock when
//                             CURR PROP or DMD FCST changes.
//                             (FF0ES11,S60,S61,S62,464,564)
//  FF#111  08/03/90  SFORD   Protect Cancelled QTYs, Beg Inv,
//                             Prod Due.FF0E121,FF0E221,FF0E621
//  FF#130  08/15/90  SFORD   Increase Cancelled QTYs when
//                             Pre-alloc. qtys are decreased
//   FIX    08/17/90  SFORD   Fixed "WORK" WRKSHT save "bug"
//                             which was increasing inventory
//                             on the re-display of data by
//                             creating FF0ES99 - init ws field
//  FF#153  08/23/90  LDELUH  Make current & master qtys equal
//                             for prop, demand, & sales depen-
//                             ding on the month.
//  FF#164  08/24/90  SFORD   Fix the PF19 - Calc. processing
//                             of sub & grand totals
//  FF#132  08/30/90  CROSS   add wrksht type to map headings
//  FF#178  08/31/90  SFORD   Fix safety stock bug created by
//                            a class change.
//  FF#128  09/26/90  SFORD   Re-calc fill rate for actual mos
//                            & show Dom Prod FCST to include
//                            Buy month.
//  FF#102  10/24/90  SFORD   Use non-rounded values for the
//                            computational fields only.
//  FF#187  11/12/90  LDELUH  Add sty grp max price to SWHDR01.
//                    SFORD   load & process fcst fut % from &
//                            to D.B., due to table changes.
//  FF#135  12/03/90  MDANGE  Change logic for Hist. futures,
//                            Hist. prop and Hist. seasonal
//                            indicators.  Combined year option
//                            is now a user created index kept
//                            on VRCMTH01.
//  FF#201  12/21/90  SFORD   Enhance to handle multi-years of
//                            seasons.
//  FF#196                    Re-calc prop % when fut% changes
//                            are made after the buy month.
//   FIX    1/21/90   MDANGE  When creating work worksheets,
//                            make sure the change date will be
//                            unique for this style/color.
//  FF#189  02/20/91  LDELUH  Change call to get NIL prdctn
//                            fcst for months le buy.
//   FIX    03/05/91  MDANGE  Add logic to submit batch job
//                            FF297D , to recalculate demand &
//                            fill rate for cat & demand for
//                            line.  Job will be submitted when
//                            user has changed a field that
//                            affects demand and saved the WS
//                            as a master.
//  FF#216  03/06/91  LDELUH  Add recalc of inventory turns
//                            when fut dmd, curr prop, curr
//                            dmd, fill rt, or sfty stk qty
//                            is changed.
//   FIX    03/27/91  MDANGE  Move logic to submit FF297D on
//                            any exit from FF0E except an exit
//                            to FF0B.  This should stop users
//                            from getting -911 return codes
//                            when processing through Workshts
//                            for a category.
//  FF#229  06/07/91  LDELUH  Allow availability specialists
//                            inquiry access only.
//  FF#bug  07/29/91  MDANGE  Change call to get NIL production
//                            forecast to be a sum of all ctrys
//                            no matter what month being proc.
//  FF#257  10/30/91  LDELUH  Allow buy of closed out style.
//  FF#285  03/05/92  LDELUH  Add alternate cat indicator.
//  FF1111  03/19/92  LDELUH  Allow varying length seasons.
//  FF#313  07/20/92  LDELUH  Add zz family check before save
//                            worksheet.
//  FF290   07/22/92  JJUCH   Add extra page for product
//                            activity notes.
//  FF333   08/13/92  mdange  Show domestic production forecast
//                            in actual months.
//  FF344   08/25/92  JJUCH   Correct the fcst fut% sub calcul-
//                             ation.
//  FF1111  08/26/92  MDANGE  Check to make sure the buy is
//                            included in the 12 months of data
//                            normally saved on master worksht.
//                            Add additional seasons to master
//                            worksheet until buy month found.
//  FF386   03/17/93  JJUCH   Change subtotal & accumulative
//                            total fill rate calculation.
//                            Fixed incorrect DMD, FT DMD, PROP
//                            INV TURN subtot and accum total.
//  FF      09/01/93  mdange  Add logic to submit either test
//                            or prod jcl.
//  FH140   01/25/94  JJUCH   Change to use the authorized futr
//                            when calculating hist. fill rate,
//                            futr% and season index.
//  PCF-231 09/15/94  MWALKE  Add logic to check if on the
//                            component's program
//  FF      04/19/96  DPACK   Fix inventory position recalc
//                            when carryover %'s changed.
//  FF      06/28/96  LDAVI4  Add new fields to screen.  Using
//                            new IOMOD and record to retrieve
//                            short range worksheet.  This is
//                            needed to retrieve and store new
//                            fields for buy worksheet.
//  FF496   10/01/96  LDAVI4  Modified population of Reserved
//                            inventory on page 6.  Display no
//                            quantity in previous months.
//                            Roll previous months into the
//                            current month.
// FF564    11/14/96  DPACK   Remove submit of job FF2971.
// yr2000   12/04/96  cwhit1  fix leading 0's for yr 2000.
// FF822    02/16/98  bbolem  Added pf7 functionality to
//                            FF0E.
// *********************
Program FF0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0EW00 FF0EW00; // record
  FF0EW01 FF0EW01; // record
  FF0EW02 FF0EW02; // record
  FF0EW03 FF0EW03; // record
  FF0EW04 FF0EW04; // record
  FF0EW05 FF0EW05; // record
  FF0EW06 FF0EW06; // record
  FF0EW07 FF0EW07; // record
  FF0EW08 FF0EW08; // record
  FF0EW09 FF0EW09; // record
  FF0EW10 FF0EW10; // record
  FF0EW11 FF0EW11; // record
  FF0EW12 FF0EW12; // record
  FF0EW13 FF0EW13; // record
  FF0EW14 FF0EW14; // record
  FF0EW15 FF0EW15; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FF9REC FF9REC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFPREC FFPREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH1REC FH1REC; // record
  FH3REC FH3REC; // record
  FH5REC FH5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  VCMPPG01 VCMPPG01; // record
  VSWITM02 VSWITM02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWSTBL; // table
  use FF0ET; // table
  use FF0ET02; // table
  use FF0ET5O {deleteAfterUse = yes}; // table
  use FF0ET51 {deleteAfterUse = yes}; // table
  use FF0EM.FF0EM001,  // forms
      FF0EM.FF0EM002, 
      FF0EM.FF0EM003, 
      FF0EM.FF0EM004, 
      FF0EM.FF0EM005, 
      FF0EM.FF0EM006, 
      FF0EM.FF0EM007, 
      FF0EM.FF0EM008, 
      FF0EM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0EW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temp storage queue*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0EW00.XXXTSLEN = 598; /* TSQ page length for map M008*/
    FF0EW00.XXXTSPAG = 1; /* Current M008 comment page nbr*/

    FF0EW00.FF0EWBEG = 1; /* Beginning column*/
    FF0EW00.FF0EWLRS = 8; /* Left/right scroll amount*/
    FF0EW00.FF0EWPAG = 1; /* Page number*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/
    FF0EW00.FF0EWSWR = "Y"; /* Request for data switch*/

    FF0EW00.FF0EW-1ST-TIME-FL = "Y"; /* 1st time through appl*/

     /* ------------------------------------------------------------*/
     /* Flow to determine what application transferred control.*/
     /* ------------------------------------------------------------*/

    goto FF0E000; /* Check the FROM application*/


    FF0E000: FF0E000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0E001; /* Converse the main process*/


    FF0E001: FF0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0E001; /* Converse the main process*/


  end // end main
end // end FF0E

// deter if prod on comp prog
Function FF0E-1110()

  set VCMPPG01 empty; /* Clear row storage area*/

  VCMPPG01.XGPCD = "02"; /* gpc code*/
  VCMPPG01.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  VCMPPG01.SY2CLRID = FFWREC.SY2CLRID; /* Color id*/
  VCMPPG01.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  VCMPPG01.FY1FCTYC = "****"; /* factory code*/

   /* Calculate range dates by: subtracting 6 months for the current*/
   /* buy month for the low date, and adding 7 months to the current*/
   /* buy month for the high date.*/

   /* lo-buymo (pc-po-id-mo-rng) = buy mo - 6 months*/
  FF0EW00.FF0EW-PC-PO-ID-CCYYMM = FF0EW01.FFQMBYMO;
  FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-PM - 6;
  if (FF0EW00.FF0EW-PC-PO-ID-PM < 1)
    FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-PM + 12;
    FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY - 1;
  end
  FF0EW00.FF0EW-PC-PO-ID-DM = FF0EW00.FF0EW-PC-PO-ID-PM;
  if (FF0EW00.FF0EW-PC-PO-ID-DM == 01)
    FF0EW00.FF0EW-PC-PO-ID-PM = 11;
    FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY - 1;
  else
    if (FF0EW00.FF0EW-PC-PO-ID-DM == 02)
      FF0EW00.FF0EW-PC-PO-ID-PM = 12;
      FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY - 1;
    else
      FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-DM - 2;
    end
  end
  VCMPPG01.PC-PO-ID-MO-RNG = FF0EW00.FF0EW-PC-PO-ID-MO-RNG;

   /* hi-buymo (zz-sdt) = buy mo + 7 months*/
  FF0EW00.FF0EW-PC-PO-ID-CCYYMM = FF0EW01.FFQMBYMO;
  FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-PM + 7;
  if (FF0EW00.FF0EW-PC-PO-ID-PM > 12)
    FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-PM - 12;
    FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY + 1;
  end
  FF0EW00.FF0EW-PC-PO-ID-DM = FF0EW00.FF0EW-PC-PO-ID-PM;
  if (FF0EW00.FF0EW-PC-PO-ID-DM == 01)
    FF0EW00.FF0EW-PC-PO-ID-PM = 11;
    FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY - 1;
  else
    if (FF0EW00.FF0EW-PC-PO-ID-DM == 02)
      FF0EW00.FF0EW-PC-PO-ID-PM = 12;
      FF0EW00.FF0EW-PC-PO-ID-CCYY = FF0EW00.FF0EW-PC-PO-ID-CCYY - 1;
    else
      FF0EW00.FF0EW-PC-PO-ID-PM = FF0EW00.FF0EW-PC-PO-ID-DM - 2;
    end
  end
  VCMPPG01.ZZZSDT = FF0EW00.FF0EW-PC-PO-ID-MO-RNG;

  TA1PGMNM = "FF0E-11";

  XSFFS-VCMPPG01-S2(); /* declare cursor for dfbuy.vcmppg01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    XSFFS-VCMPPG01-N2(); /* fetch first record*/

    if (SQLCA.VAGen_SQLCODE == 0) /* found atleast one record*/
      FFWREC.XXXMSGNO = 498; /* prod on comp prog*/
    end
  end

  XSFFS-VCMPPG01-C2(); /* close dfbuy.vcmppg01 cursor*/


end // end FF0E-1110

// Check the FROM application
Function FF0E000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FF0B" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FF0E") /* or same application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end FF0E000

// Main process to display a map
Function FF0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, if specified, display the fifth map.*/
   /* 6) Otherwise, if specified, display the sixth map.*/
   /* 7) Otherwise, if specified, display the seventh map.*/
   /* 8) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWPAG == 1 /* Page 1 was requested*/
   || FF0EW00.FF0EWSWR == "Y") /* or data was requested*/
    FF0E100(); /* Display map 1*/
  else

    if (FF0EW00.FF0EWPAG == 2) /* Page 2 was requested*/
      FF0E200(); /* Display map 2*/
    else

      if (FF0EW00.FF0EWPAG == 3) /* Page 3 was requested*/
        FF0E300(); /* Display map 3*/
      else

        if (FF0EW00.FF0EWPAG == 4) /* Page 4 was requested*/
          FF0E400(); /* Display map 4*/
        else

          if (FF0EW00.FF0EWPAG == 5) /* Page 5 was requested*/
            FF0E500(); /* Display map 5*/
          else

            if (FF0EW00.FF0EWPAG == 6) /* Page 6 was requested*/
              FF0E600(); /* Display map 6*/
            else

              if (FF0EW00.FF0EWPAG == 7) /* Page 7 was requested*/
                FF0E700(); /* Display map 7*/
              else

                if (FF0EW00.FF0EWPAG == 8) /* Page 8 was requested*/
                  FF0E800(); /* Display map 8*/
                else


                /* --------------------------------------------------------*/
                 /* Write the error to the Error Diagnosis Reporting.*/

                /* --------------------------------------------------------*/

                  FFWREC.XXXMODID = "001"; /* Module identification*/
                  FFWREC.XXXMSGNO = 1; /* System error occurred*/

                  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
                  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
                  TA1REC.TA1LOC = "INVALID PAGE NUMBER REQUESTED";
                  TA1REC.TA1MAPNO = FF0EW00.FF0EWPAG; /* Page number*/
                  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
                  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

                  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/


                /* --------------------------------------------------------*/
                 /* Exit to display the application system menu.*/

                /* --------------------------------------------------------*/

                  COMMAREA.CATOAP = "FF0A"; /* TO application*/

                  XSFFS01(); /* Exit to another application*/


                /* --------------------------------------------------------*/
                 /* Abnormally terminate the transaction if exit failed.*/

                /* --------------------------------------------------------*/

                  TA1REC.TA1FUNC = "ABND"; /* Termination function*/
                  TA1REC.TA1LOC = "EXIT TO APPLICATION MENU FAILED";

                  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

                end
              end
            end
          end
        end
      end
    end
  end


end // end FF0E001

// Display CURRENT DEMAND FUTURES
Function FF0E100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E110(); /* Obtain the data to display*/

  FF0E120(); /* Format and display the map*/

  FF0E130(); /* Check attention identifier*/

  FF0E140(); /* Reset fields to normal intensity*/

  FF0E150(); /* Verify the entered data*/

  FF0E160(); /* Process valid input request*/


end // end FF0E100

// Obtain the data to display
Function FF0E110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage and total areas.*/
   /* ------------------------------------------------------------*/

  set FF0EW01 empty; /* M001 display storage*/
  set FF0EW02 empty; /* M002 display storage*/
  set FF0EW03 empty; /* M003 display storage*/
  set FF0EW04 empty; /* M004 display storage*/
  set FF0EW05 empty; /* M005 display storage*/
  set FF0EW06 empty; /* M006 display storage*/
  set FF0EW07 empty; /* M007 display storage*/
  set FF0EW15 empty; /* M008 display storage*/
  set FF0EW08 empty; /* Season subtotals*/
  set FF0EW09 empty; /* accum totals*/
  set FF0EW10 empty; /* Changes translation results*/

  FF0EW01.CACHGFL = "N"; /* Modifiable data switch*/
  FF0EW01.FFWMODSW = "N"; /* Modified data switch*/
  FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

   /* ------------------------------------------------------------*/
   /* Clear up temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0ES74(); /* Purge tsq*/

   /* ------------------------------------------------------------*/
   /* Select the row from the product style/color table.*/
   /* ------------------------------------------------------------*/

  FF0E111(); /* Select product style/color*/

   /* ------------------------------------------------------------*/
   /* Select the row from the product cross-reference table.*/
   /* ------------------------------------------------------------*/

  FF0E112(); /* Select product cross-reference*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Clear row storage area*/

  FFQREC.XWSCD = FFWREC.XWSCD; /* Worksheet type code*/
  FFQREC.ZZZCHGDT = FFWREC.ZZZCHGDT; /* Change date*/
  FFQREC.ZZZCHGTM = FFWREC.ZZZCHGTM; /* Change time*/

  FF0E113(); /* Open worksheet header cursor*/

  FF0EW00.FF0EWCOL = 1; /* Current column*/
  FF0EW00.FF0EWIXW = 1; /* Worksheet number index*/

  FF0EW00.FF0EWSWH = "N"; /* Header cursor EOF switch*/
  FF0EW00.FF0EWSW1 = "Y"; /* First time through switch*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0EW00.FF0EWSWH == "N") /* Until end of cursor*/

    FF0E114(); /* Fetch next worksheet header*/

    if (FF0EW00.FF0EWSW1 == "N") /* Not first time through*/
      FF0E115(); /* Calculate season totals*/
    end

    if (FF0EW00.FF0EWSWH == "N") /* Not end of cursor*/

      if (FF0EW00.FF0EWSW1 == "Y") /* First time through*/
        FF0E116(); /* Save header information*/
      end

      FF0E117(); /* Obtain worksheet items*/

      if (FF0EW00.FF0EWSW1 == "Y") /* First time through*/
        FF0E118(); /* Obtain worksheet comments*/
      end

      FF0EW00.FF0EWSW1 = "N"; /* First time through switch*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0E119(); /* Close worksheet header cursor*/

   /* ------------------------------------------------------------*/
   /* If style not on FFSTY and CURRNT wrksht type requested*/
   /* move a default closeout date into dom proj closeout date.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSFS == "N" /* If style not on FFSTY*/
   && FFWREC.XWSCD == "01")   /* and CURRNT wrksht type*/
    FF0EW06.SY2PDCMO = FF0EW01.FFAENDMO[2]; /* Dflt clsout mo*/
  end

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWMAX = FF0EW00.FF0EWCOL - 8; /* Maximum beginning column*/
   /* FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL - 7*/

  if (FF0EW00.FF0EWMAX < 1) /* Maximum LT minimum*/
    FF0EW00.FF0EWMAX = 1; /* Default to minimum*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSW1 == "Y") /* No worksheet found*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    FF0EW00.FF0EWPAG = 1; /* Page number*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWR = "N"; /* Request for data switch*/
  FF0EW01.CACHGFL = "Y"; /* Modifiable data switch*/

   /* ------------------------------------------------------------*/
   /* If this is the first time displaying page one*/
   /* check if this product is on the components program*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EW-1ST-TIME-FL == "Y")

    FF0E-1110();
    FF0EW00.FF0EW-1ST-TIME-FL = "N";
  end

   /* ------------------------------------------------------------*/
   /* If data request came from another page, return to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWPAG > 1) /* Subsequent page was displayed*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E110

// Select product style/color
Function FF0E111()
   /* ------------------------------------------------------------*/
   /* Select the product style/color table row.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Clear row storage area*/

  FF3REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF3REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF3REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      FF0EW00.SYBSTGNB = FF3REC.SYBSTGNB; /* Style group number*/
      FF0EW00.XPLCD = FF3REC.XPLCD; /* Product line code*/
      FF0EW00.XLCCD = FF3REC.XLCCD; /* Life cycle code*/
      FF0EW06.SY2FDSMO = FF3REC.SY2FDSMO; /* First sales month*/
      if (SQLCA.VAGen_SQLCODE == 0 /**/
       && FF3REC.YSMXDV == "10")   /* Division code*/
        FF0EW00.FF0EWSFS = "Y"; /* Style found*/
        FF0EW06.SY2PDCMO = FF3REC.SY2PDCMO; /* Closeout month*/
      else
        FF0EW00.FF0EWSFS = "N"; /* Style not found*/
        FF0EW06.SY2PDCMO = 0; /**/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT STYLE/COLOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0E111

// Select product cross-reference
Function FF0E112()
   /* ------------------------------------------------------------*/
   /* Select the product cross-reference table row.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FF0EW00.FF2NSEAS = FF2REC.FF2NSEAS; /* ===> # of seasons per year*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT CROSS-REFERENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0E112

// Open worksheet header cursor
Function FF0E113()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  FFQREC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FFQREC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FFQREC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FFQREC.FFABEGMO = -1; /* Forecast begin month*/
  FFQREC.SY2SSCIN = "*"; /* Safety stock class*/
  FFQREC.FFQMBYMO = -1; /* Main buy month*/
  FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* Actl buy month*/

  try
    call "IO3810" ("S2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0E113

// Fetch next worksheet header
Function FF0E114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0EW00.FF0EWSWH = "Y"; /* Header cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0E114

// Calculate season totals
Function FF0E115()
   /* ------------------------------------------------------------*/
   /* Calculate the M001 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FF0EMMON[FF0EWCOL] = "  SUB"; /* Subtotal literal*/

  FFXREC.FFXNUMB = FF0EW08.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRPFUDM = FF0EW09.FFRPFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRAFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRAFUDM = FF0EW09.FFRAFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRIFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRIFUDM = FF0EW09.FFRIFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCFUDM = FF0EW09.FFRCFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFUT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWFUT = FF0EW09.FF0EWFUT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRPNFDM = FF0EW09.FFRPNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRANFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRANFDM = FF0EW09.FFRANFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRINFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRINFDM = FF0EW09.FFRINFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCNFDM = FF0EW09.FFRCNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWNFT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWNFT = FF0EW09.FF0EWNFT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW08.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRPPRDM = FF0EW09.FFRPPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRAPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRAPRDM = FF0EW09.FFRAPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRIPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRIPRDM = FF0EW09.FFRIPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCPRDM = FF0EW09.FFRCPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWPRT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWPRT = FF0EW09.FF0EWPRT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRPNPDM = FF0EW09.FFRPNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRANPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRANPDM = FF0EW09.FFRANPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRINPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRINPDM = FF0EW09.FFRINPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCNPDM = FF0EW09.FFRCNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWNPT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWNPT = FF0EW09.FF0EWNPT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTDP = FF0EW09.FF0EWTDP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDA[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTDA = FF0EW09.FF0EWTDA + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDI[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTDI = FF0EW09.FF0EWTDI + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTDC = FF0EW09.FF0EWTDC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTDT = FF0EW09.FF0EWTDT + FFXREC.FFXROUND; /* accum total*/

  if (FF0EW03.FF0EWTDT[FF0EWCOL] != 0) /* Total demand NE zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[FF0EWCOL] * 100; /* Cancellation %*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[FF0EWCOL] = FF0EW00.FF0EWPCT;
  end

  FFXREC.FFXNUMB = FF0EW08.FF0EWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTAF = FF0EW09.FF0EWTAF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWTAP = FF0EW09.FF0EWTAP + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDFU[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDFU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDFU = FF0EW09.FF0EWDFU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDNF = FF0EW09.FF0EWDNF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDTF = FF0EW09.FF0EWDTF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDPR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDPR[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDPR = FF0EW09.FF0EWDPR + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDNP = FF0EW09.FF0EWDNP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWDTP = FF0EW09.FF0EWDTP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPCF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FFRCPRFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCPRFC = FF0EW09.FFRCPRFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF6PRPFC; /* Prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPRF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF6PRPFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6PRPFC = FF0EW09.FF6PRPFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWOBK; /* Open bulk orders*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMOBK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWOBK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWOBK = FF0EW09.FF0EWOBK + FFXREC.FFXROUND; /* accum total*/

  if (FF0EW08.FFRCDMFC > 0 /* Subtotal GT zero*/
   && FF0EW08.FF0EWFRF > 0) /* Subtotal GT zero*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW08.FF0EWFRF * 100 / FF0EW08.FFRCDMFC, -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDFF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Fcst fut %*/
  end
  FF0EW09.FF0EWFRF = FF0EW09.FF0EWFRF + FF0EW08.FF0EWFRF; /* accum tot*/

  if (FF0EW00.FF2FUIND == "U") /* user created index selected*/
    FF0EW04.FF0EWUHF[FF0EWCOL] = 0; /* Hist fut %*/
  else
    if (FF0EW08.FF0EWHFU > 0 /* Subtotal GT zero*/
     && FF0EW08.FF0EWHCF > 0) /* Subtotal GT zero*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW08.FF0EWHFU * 100 / FF0EW08.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Hist fut %*/
    end
    FF0EW09.FF0EWHCF = FF0EW09.FF0EWHCF + FF0EW08.FF0EWHCF; /* accum total*/
    FF0EW09.FF0EWHFU = FF0EW09.FF0EWHFU + FF0EW08.FF0EWHFU; /* accum total*/
  end

  if (FF0EW08.FFRCPRFC != 0) /* Subtotal NE zero*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW08.FF0EWNMO; /* Season begin*/
    while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/
      if (FF0EW04.FFRCPRFC[FF0EWIXC] >= 0) /* Curr prop fcst GE zero*/
        FF0EW00.FF0EWPCT = FF0EW04.FFRCPRFC[FF0EWIXC] * 100;
        FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW08.FFRCPRFC, -mathLib.decimals(FF0EW00.FF0EWPCT));
        FF0EW04.FF0EWDFI[FF0EWIXC] = FF0EW00.FF0EWPCT; /* Fcst idx*/
      end
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0EW00.FF2PRIND == "U") /* user created*/
    FF0EW04.FF0EWUHI[FF0EWCOL] = 100;
  else
    if (FF0EW08.FF0EWHPR != 0) /* Subtotal NE zero*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW08.FF0EWNMO;
                                   /* Season begin*/
      FF0EW04.FF0EWHPR[FF0EWCOL] = FF0EW08.FF0EWHPR; /* Subtotal*/
      while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/
        if (FF0EW04.FF0EWHPR[FF0EWIXC] >= 0) /* Hist prop qty GE zero*/
          FF0EW00.FF0EWPCT = FF0EW04.FF0EWHPR[FF0EWIXC] * 100;
          FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW08.FF0EWHPR, -mathLib.decimals(FF0EW00.FF0EWPCT));
          FF0EW04.FF0EWDHI[FF0EWIXC] = FF0EW00.FF0EWPCT; /* Hist idx*/
        end
        FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/
      end
    end
  end
  FF0EW09.FF0EWHPR = FF0EW09.FF0EWHPR + FF0EW08.FF0EWHPR; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M005 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW08.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRCDMFC = FF0EW09.FFRCDMFC + FF0EW08.FFRCDMFC; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMDM[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EWMDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWMDM = FF0EW09.FF0EWMDM + FFXREC.FFXROUND; /* accum total*/

  if (FF0EW05.FFRCDMFC[FF0EWCOL] != 0) /* Subtotal NE zero*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW08.FF0EWNMO; /* Season begin*/
    while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/
      FF0EW00.FF0EWPCT = FF0EW05.FFRCDMFC[FF0EWIXC] * 100; /* Curr dmd fcst*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW05.FF0EWFSI[FF0EWIXC] = FF0EW00.FF0EWPCT; /* Fcst seas idx*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0EW00.FF2DMIND == "U") /* user created*/
    FF0EW05.FF0EWUSI[FF0EWCOL] = 100;
  else
    if (FF0EW08.FF0EWHDM > 0) /* Subtotal GT zero*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW08.FF0EWNMO;
                                   /* Season begin*/
      FF0EW05.FF0EWHDM[FF0EWCOL] = FF0EW08.FF0EWHDM; /* Subtotal*/
      while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/
        FF0EW00.FF0EWPCT = FF0EW05.FF0EWHDM[FF0EWIXC] * 100;
                                   /* Hist dmd qty*/
        FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FF0EWHDM[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
        FF0EW05.FF0EWHSI[FF0EWIXC] = FF0EW00.FF0EWPCT; /* Hist seas idx*/
        FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/
      end
    end
  end
  FF0EW09.FF0EWHDM = FF0EW09.FF0EWHDM + FF0EW08.FF0EWHDM; /* accum total*/

  if (FF0EW08.FF7RVFCT != 0) /* Subtotal NE zero*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW08.FF0EWNMO; /* Season begin*/
    FF0EW05.FF7RVFCT[FF0EWCOL] = FF0EW08.FF7RVFCT; /* Subtotal*/
    while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/
      FF0EW00.FF0EWPCT = FF0EW05.FF7RVFCT[FF0EWIXC] * 100; /* Rvse dmd fcst*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FF7RVFCT[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW05.FF0EWRSI[FF0EWIXC] = FF0EW00.FF0EWPCT; /* Revd seas idx*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/
    end
  end
  FF0EW09.FF7RVFCT = FF0EW09.FF7RVFCT + FF0EW08.FF7RVFCT; /* accum total*/

   /* Fcst fill rate*/

  if (FF0EW08.FFRCDMFC != 0) /* Curr dmd non-zero*/
    FF0EW08.FF0EWFFR = mathLib.round(FF0EW08.FH5MSHQT * 100 / FF0EW08.FFRCDMFC, -mathLib.decimals(FF0EW08.FF0EWFFR));
  else
    if (FF0EW08.FH5MSHQT == 0) /* curr sls & dmd both zero*/
      FF0EW08.FF0EWFFR = 100;
    else
      FF0EW08.FF0EWFFR = 0;
    end
  end
  FF0EW05.FF0EWFFR[FF0EWCOL] = FF0EW08.FF0EWFFR; /* Fcst fill rt*/

   /* Hist fill rate*/

  if (FF0EW08.FF0EWHOR != 0) /* Order qty non-zero*/
    FF0EW08.FF0EWHFR = mathLib.round(FF0EW08.FF0EWHIN * 100 / FF0EW08.FF0EWHOR, -mathLib.decimals(FF0EW08.FF0EWHFR));
  else
    if (FF0EW08.FF0EWHOR == 0) /* invoiced & ordered qtys both zero*/
      FF0EW08.FF0EWHFR = 100;
    else
      FF0EW08.FF0EWHFR = 0;
    end
  end
  FF0EW05.FF0EWHFR[FF0EWCOL] = FF0EW08.FF0EWHFR; /* Hist fill rt*/


  FFXREC.FFXNUMB = FF0EW08.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FH5MSHQT = FF0EW09.FH5MSHQT + FF0EW08.FH5MSHQT; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMSL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF6SLFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6SLFCT = FF0EW09.FF6SLFCT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW08.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINB[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6BEINV[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6BEINV = FF0EW09.FF6BEINV + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDUE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRPRDDU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRPRDDU = FF0EW09.FFRPRDDU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMQBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRSUBBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRSUBBY = FF0EW09.FFRSUBBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMTBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRTENBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRTENBY = FF0EW09.FFRTENBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWSUP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWSUP = FF0EW09.FF0EWSUP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FG4BALSH = FF0EW09.FG4BALSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWINE = FF0EW09.FF0EWINE + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWRIN; /* Reserved inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMRIN[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWRIN[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWRIN = FF0EW09.FF0EWRIN + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6SFSTK = FF0EW09.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6SUGBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6SUGBY = FF0EW09.FF6SUGBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMFCT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6PRFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF6PRFCT = FF0EW09.FF6PRFCT + FFXREC.FFXROUND; /* accum total*/

   /* FF0EW00.FF0EWASL = FF0EW08.FF6SLFCT * 12 * 2;/* Inv turns*/
   /* FF0EW00.FF0EWAIN = FF0EW08.FF6BEINV + FF0EW08.FF0EWINE;*/
   /* FF0EW00.FF0EWAIN = FF0EW00.FF0EWAIN * FF0EW08.FF0EWNMO;*/
   /* IF FF0EW00.FF0EWAIN NE 0;        /* Inventory NE zero*/
   /* FF0EW06.FF0EWTUR(FF0EWCOL) = FF0EW00.FF0EWASL / FF0EW00.FF0EWAIN (R;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) > 99.99; /* /Inv turn > 99.99*/
   /* MOVE 99.99 TO FF0EW06.FF0EWTUR(FF0EWCOL);*/
   /* ELSE;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) < 0;*/
   /* MOVE 0 TO FF0EW06.FF0EWTUR(FF0EWCOL);*/
   /* END;*/
   /* END;*/
   /* END;*/

  FFXREC.FFXNUMB = FF0EW08.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDIR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRDIRSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FFRDIRSH = FF0EW09.FFRDIRSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0EW08.FF0EWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMNIL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWNIL[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW09.FF0EWNIL = FF0EW09.FF0EWNIL + FFXREC.FFXROUND; /* accum total*/


   /* ------------------------------------------------------------*/
   /* Accumulate the number of months for accum total averaging.*/
   /* ------------------------------------------------------------*/

  FF0EW09.FF0EWNMO = FF0EW09.FF0EWNMO + FF0EW08.FF0EWNMO;
                                   /* Number of months*/

   /* ------------------------------------------------------------*/
   /* Increment the current column and clear the subtotal fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
  FF0EW00.FF0EWNMO = FF0EW08.FF0EWNMO; /* Number of months*/
  set FF0EW08 empty; /* Season subtotals*/

  if (FF0EW00.FF0EWIXW == 2) /* sub for 1st Header processed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate the M001 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FF0EMMON[FF0EWCOL] = "ACCUM"; /* accum total literal*/

  FFXREC.FFXNUMB = FF0EW09.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRAFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRIFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFUT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRANFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRINFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWNFT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW09.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRAPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRIPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWPRT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRANPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRINPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWNPT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDA[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDI[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0EW03.FF0EWTDT[FF0EWCOL] != 0) /* Total demand NE zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[FF0EWCOL] * 100; /* Cancellation %*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[FF0EWCOL] = FF0EW00.FF0EWPCT;
  end

  FFXREC.FFXNUMB = FF0EW09.FF0EWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDFU[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDFU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDPR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDPR[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPCF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FFRCPRFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF6PRPFC; /* Prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPRF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF6PRPFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWOBK; /* Prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMOBK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWOBK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0EW09.FFRCDMFC > 0 /* accum total GT zero*/
   && FF0EW09.FF0EWFRF > 0) /* accum total GT zero*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW09.FF0EWFRF * 100 / FF0EW09.FFRCDMFC, -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDFF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Fcst fut %*/
  end

  if (FF0EW09.FF0EWHFU != 0 /* accum total GT zero*/
   && FF0EW09.FF0EWHCF != 0) /* accum total GT zero*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW09.FF0EWHFU * 100 / FF0EW09.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Hist fut %*/
  end

  if (FF0EW09.FFRCPRFC != 0) /* accum total NE zero*/
    FF0EW04.FF0EWDFI[FF0EWCOL] = 100; /* Fcst prop idx*/
  end

  if (FF0EW09.FF0EWHPR != 0) /* accum total NE zero*/
    FF0EW04.FF0EWDHI[FF0EWCOL] = 100; /* Hist prop idx*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M005 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW09.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMDM[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EWMDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0EW09.FFRCDMFC != 0) /* accum total NE zero*/
    FF0EW05.FF0EWFSI[FF0EWCOL] = 100; /* Fcst seas idx*/
  end

  if (FF0EW09.FF0EWHDM != 0) /* accum total NE zero*/
    FF0EW05.FF0EWHSI[FF0EWCOL] = 100; /* Hist seas idx*/
  end

  if (FF0EW09.FF7RVFCT != 0) /* accum total NE zero*/
    FF0EW05.FF0EWRSI[FF0EWCOL] = 100; /* Revd seas idx*/
  end

   /* Fcst fill rate*/

  if (FF0EW09.FFRCDMFC != 0) /* Curr dmd non-zero*/
    FF0EW09.FF0EWFFR = mathLib.round(FF0EW09.FH5MSHQT * 100 / FF0EW09.FFRCDMFC, -mathLib.decimals(FF0EW09.FF0EWFFR));
  else
    if (FF0EW09.FH5MSHQT == 0) /* curr sls & dmd both zero*/
      FF0EW09.FF0EWFFR = 100;
    else
      FF0EW09.FF0EWFFR = 0;
    end
  end
  FF0EW05.FF0EWFFR[FF0EWCOL] = FF0EW09.FF0EWFFR; /* Fcst fill rt*/

   /* Hist fill rate*/

  if (FF0EW09.FF0EWHOR != 0) /* Order qty non-zero*/
    FF0EW09.FF0EWHFR = mathLib.round(FF0EW09.FF0EWHIN * 100 / FF0EW09.FF0EWHOR, -mathLib.decimals(FF0EW09.FF0EWHFR));
  else
    if (FF0EW09.FF0EWHOR == 0) /* invoiced & ordered qtys both zero*/
      FF0EW09.FF0EWHFR = 100;
    else
      FF0EW09.FF0EWHFR = 0;
    end
  end
  FF0EW05.FF0EWHFR[FF0EWCOL] = FF0EW09.FF0EWHFR; /* Hist fill rt*/


  FFXREC.FFXNUMB = FF0EW09.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMSL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF6SLFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW09.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINB[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6BEINV[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDUE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRPRDDU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMQBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRSUBBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMTBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRTENBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWSUP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWRIN; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMRIN[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWRIN[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6SUGBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMFCT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6PRFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* FF0EW00.FF0EWASL = FF0EW09.FF6SLFCT * 12 * 2;/* Inv turns*/
   /* FF0EW00.FF0EWAIN = FF0EW09.FF6BEINV + FF0EW09.FF0EWINE;*/
   /* FF0EW00.FF0EWAIN = FF0EW00.FF0EWAIN * FF0EW09.FF0EWNMO;*/
   /* IF FF0EW00.FF0EWAIN NE 0;        /* Inventory NE zero*/
   /* FF0EW06.FF0EWTUR(FF0EWCOL) = FF0EW00.FF0EWASL / FF0EW00.FF0EWAIN (R;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) > 99.99; /* Inv turns > 99.99*/
   /* MOVE 99.99 TO FF0EW06.FF0EWTUR(FF0EWCOL);    /* use default value*/
   /* ELSE;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) < 0;*/
   /* MOVE 0 TO FF0EW06.FF0EWTUR(FF0EWCOL);*/
   /* END;*/
   /* END;*/
   /* END;*/

  FFXREC.FFXNUMB = FF0EW09.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDIR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRDIRSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW09.FF0EWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMNIL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWNIL[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

end // end FF0E115

// Save header information
Function FF0E116()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month to date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  TA9REC.TA9ENDDT = XX0XW01.XX0XWDAT; /* Ending date*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS TO DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  if (TA9REC.TA9DTDIF == 0) /* No working days to date*/
    FF0EW00.FF0EWDTD = 1; /* Default to 1 working day*/
  else
    FF0EW00.FF0EWDTD = TA9REC.TA9DTDIF; /* Working days to date*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  FF0EW00.FF0EWDAT = XX0XW01.XX0XWCYM; /* Current CCYYMM*/
  FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 1; /* Increment month*/
  if (FF0EW00.FF0EWDMM > 12) /* Month GT maximum*/
    FF0EW00.FF0EWDMM = 1; /* Reset to minimum*/
    FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY + 1; /* Increment year*/
  end
  TA9REC.TA9ENDDT = FF0EW00.FF0EWDAT * 100; /* Ending date*/
  TA9REC.TA9ENDDD = 01; /* Ending day*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS IN MONTH";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  FF0EW00.FF0EWDIM = TA9REC.TA9DTDIF; /* Working days in month*/

   /* ------------------------------------------------------------*/
   /* Save the information from the worksheet header row.*/
   /* ------------------------------------------------------------*/

  FF0EW00.XPRCD = FFQREC.XPRCD; /* Type code*/
  FF0EW00.XLCCD = FFQREC.XLCCD; /* Life cycle code*/
  FF0EW00.PG7MAXPR = FFQREC.PG7MAXPR; /* Sty grp max price*/

  FF0EW01.FFQMBYMO = FFQREC.FFQMBYMO; /* Main buy mo*/

  FF0EW01.FFQCURMO = FFQREC.FFQCURMO; /* Current mo*/
  FF0EW01.FFQDMDDT = FFQREC.FFQDMDDT; /* Dmd asof dt*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FFQLCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FFQLCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FFQOCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FFQOCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW01.FFQLCOFP = FFQREC.FFQLCOFP; /* Lst caov futpct*/
  FF0EW01.FFQLCOPP = FFQREC.FFQLCOPP; /* Lst caov propct*/
  FF0EW01.FFQOCOFP = FFQREC.FFQOCOFP; /* Oth caov futpct*/
  FF0EW01.FFQOCOPP = FFQREC.FFQOCOPP; /* Oth caov propct*/
  FF0EW01.FF2PRIND = FFQREC.FF2PRIND; /* Prop yr ind*/
  FF0EW04.FF2FUIND = FFQREC.FF2FUIND; /* Futr yr ind*/
  FF0EW05.FF2DMIND = FFQREC.FF2DMIND; /* Dmd yr ind*/
  FF0EW06.SY2SSCIN = FFQREC.SY2SSCIN; /* Sfty stk cls ind*/

  if (FFQREC.FFQFCMFL == "Y" /* Forecaster comments exist*/
   || FFQREC.FFQSCMFL == "Y") /* or scheduler comments exist*/

    FF0EW06.FF0EWCMF = "Y"; /* Comments flag*/
  else
    FF0EW06.FF0EWCMF = "N"; /* Comments flag*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF2PRIND = FF0EW01.FF2PRIND; /* Prop yr ind*/
  FF0EW00.FF2FUIND = FF0EW04.FF2FUIND; /* Futr yr ind*/
  FF0EW00.FF2DMIND = FF0EW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Save change date, time, & count.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSCD = FFQREC.ZZZCHGDT;
  FF0EW00.FF0EWSCT = FFQREC.ZZZCHGTM;
  FF0EW00.FF0EWSCC = FFQREC.ZZZCHGCT;

   /* ------------------------------------------------------------*/
   /* Calculate the Prior Month for FF_CONTP_MO*/
    /* and save it in a field called --> FF0EWPMO*/
   /* ------------------------------------------------------------*/

  FF0EW01.FF0EWCMO = FFQREC.FFQCURMO; /* Current mo*/

  if (FF0EW01.FF0EWCMM == 1) /* Current mo*/
    FF0EW01.FF0EWPCY = FF0EW01.FF0EWCCY - 1;
    FF0EW01.FF0EWPMM = 12;
  else
    FF0EW01.FF0EWPCY = FF0EW01.FF0EWCCY; /* curr to prior*/
    FF0EW01.FF0EWPMM = FF0EW01.FF0EWCMM - 1; /* decrement month*/
  end


end // end FF0E116

// Obtain worksheet items
Function FF0E117()
   /* ------------------------------------------------------------*/
   /* If more than four  worksheets found, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWIXW > 12) /* More than four worksheets*/

    FFWREC.XXXMODID = "117"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "MORE THAN FOUR WORKSHEETS WERE FOUND";
    TAEREC.TAEDESC2 = FF0EW01.TAEDESC2; /* Worksheet numbers*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the worksheet number and beginning and ending months*/
   /* for error reporting purposes.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWIXW <= 9) /* Only room for 9 nbrs in error record*/
    FF0EW01.FF0EWNBR[FF0EWIXW] = FFQREC.FFEWSNBR; /* Worksheet number err*/
  end
  FF0EW01.FF0EWSNO[FF0EWIXW] = FFQREC.FFEWSNBR; /* Worksheet number*/
  FF0EW01.FFABEGMO[FF0EWIXW] = FFQREC.FFABEGMO; /* Beginning month*/
  FF0EW01.FFAENDMO[FF0EWIXW] = FFQREC.FFAENDMO; /* Ending month*/

  FF0EW00.FF0EWIXW = FF0EW00.FF0EWIXW + 1; /* Worksheet number index*/

   /* ------------------------------------------------------------*/
   /* Select the items for the worksheet and open the cursor.*/
   /* ------------------------------------------------------------*/

  FF0ES01(); /* Open worksheet item cursor*/

  FF0EW00.FF0EWSWI = "N"; /* Item cursor EOF switch*/

   /* ------------------------------------------------------------*/
   /* Fetch the selected items until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0EW00.FF0EWSWI == "N") /* Until end of cursor*/

    FF0ES02(); /* Fetch next worksheet item*/

    if (FF0EW00.FF0EWSWI == "N") /* Not end of cursor*/

      FF0ES03(); /* Sum domestic forecast month*/

      FF0EW04.FF6PRPFC[FF0EWCOL] = FF9REC.FF6PRPFC; /* Mstr prop fcst*/
      FF0EW05.FF6SLFCT[FF0EWCOL] = FF9REC.FF6SLFCT; /* Mstr sls fcst*/

      /* ------------------------------------------------------------*/
       /* Check to see if the calculated/saved prev fcst mo equal*/
       /* to the fetched row's fcst mo. If it is then save the QTYs*/
       /* in order to back them out in FF0ES11.*/
      /* ------------------------------------------------------------*/

      if (FF0EW01.FF0EWPMO == VSWITM02.FF4FCTMO) /* prev fcst mo eq fcst mo*/
        FF0EW00.FF0EWSF = FF9REC.FF6SLFCT; /* save Mstr sls fcst*/
      end


      FF0EW06.FF6PRFCT[FF0EWCOL] = FF9REC.FF6PRFCT; /* Dom prod fcst*/

      FF0ES04(); /* Sum NIL production forecast qty*/
      FF0EW06.FF0EWNIL[FF0EWCOL] = FF9REC.FF6PRFCT; /* NIL prod fcst*/


      FF0ES05(); /* Sum invoice/order quantities*/

      if (FFWREC.XWSCD != "03") /* /Not a buy worksheet*/
        if (VSWITM02.FF4FCTMO > FF0EW01.FFQCURMO) /* fcst mo > curr mo*/
          FF0ES75(); /* Sum  open bulk and rsrv inv*/
        else
          FF0ES76(); /* Sum open bulk and rsrv inv*/
        end
      end

      if (FF0EW00.FF0EWCOL > 1) /* Not first column*/

        FF0ES06(); /* Sum one year ago history*/

        FF0ES07(); /* Sum two years ago history*/

        FF0ES08(); /* Select category by month*/

      end

      if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/

        FF0ES09(); /* Sum product shipment history*/

        FF0EW00.FH5MSHQT = FH5REC.FH5MSHQT - FH5REC.FH5RTSQT;
        FF0EW05.FH5MSHQT[FF0EWCOL] = FF0EW00.FH5MSHQT; /* Shipped*/

      else

        FF0ES10(); /* Sum next three months forecast*/

        FF0EW00.FF0EWASL = FF9REC.FF6SLFCT; /* Sales forecast*/

      end

      FF0ES11(); /* Save item information*/

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the worksheet item cursor.*/
   /* ------------------------------------------------------------*/

  FF0ES12(); /* Close worksheet item cursor*/

   /* ------------------------------------------------------------*/
   /* If not the first time through, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSW1 == "N") /* Not first time through*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Determine where to display the carryover quantities.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "117"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0EW00.FF0EWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

  if (FF0EW01.FFABEGMO[1] == FF0EW01.FFQCURMO) /* Beg mo EQ curr*/

    FFXREC.FFXNUMB = FF0EW01.FFQOCOFU + FF0EW01.FFQLCOFU; /* Caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FFQOCOPR + FF0EW01.FFQLCOPR; /* Caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FF0EWFCO[sysVar.arrayIndex] + FF0EW01.FF0EWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  else

    FFXREC.FFXNUMB = FF0EW01.FFQLCOFU; /* Lst caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FFQLCOPR; /* Lst caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FF0EWFCO[sysVar.arrayIndex] + FF0EW01.FF0EWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

    FFXREC.FFXNUMB = FF0EW01.FFQOCOFU; /* Oth caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FFQOCOPR; /* Oth caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW01.FF0EWFCO[sysVar.arrayIndex] + FF0EW01.FF0EWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* Save the position of the 1st subtotal*/

  FF0EW00.FF0EW-1ST-SUB = FF0EW00.FF0EWCOL;

end // end FF0E117

// Obtain worksheet comments
Function FF0E118()
   /* ------------------------------------------------------------*/
   /* Select the comments for the worksheet and open the cursor.*/
   /* ------------------------------------------------------------*/

  FF0ES13(); /* Open worksheet comment cursor*/

  FF0EW00.FF0EWIXL = 1; /* Line index*/
  FF0EW00.FF0EWIXT = 1; /* Product activity comment index*/

  FF0EW00.FF0EWSWC = "N"; /* Comment cursor EOF switch*/

   /* ------------------------------------------------------------*/
   /* Fetch the selected comments until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0EW00.FF0EWSWC == "N") /* Until end of cursor*/
    FF0ES14(); /* Fetch next worksheet comment*/
  end

   /* ------------------------------------------------------------*/
   /* Close the worksheet comments cursor.*/
   /* ------------------------------------------------------------*/

  FF0ES15(); /* Close worksheet comment cursor*/

  if (FF0EW00.FF0EWIXT > 1) /* last page was partially formatted*/
    FF0ES66(); /* add tsq page*/
  end

  FF0EW00.FF0EW-LST-PAG = FF0EW00.TA5TSQIX; /* Save last page in DB2*/

end // end FF0E118

// Close worksheet header cursor
Function FF0E119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "119"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0E119

// Format and converse the map
Function FF0E120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0E122(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM001.CAITEM; /* Application data*/


end // end FF0E120

// Format the display data
Function FF0E121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM001 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM001.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM001.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM001.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM001.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM001.XWSABRV = FFWREC.XWSABRV; /* worksheet type Abbr*/

  FF0EM001.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM001.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM001.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM001.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM001.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM001.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

  FF0EM001.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL != "Y") /* No modifiable data exists*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the percentage fields in the CARRYOVER % lines.*/
   /* ------------------------------------------------------------*/

  FF0EM001.FF0EMOFP = FF0EW01.FFQOCOFP; /* Oth caov futpct*/
  FF0EM001.FF0EMLFP = FF0EW01.FFQLCOFP; /* Lst caov futpct*/
  FF0EM001.FF0EMOPP = FF0EW01.FFQOCOPP; /* Oth caov propct*/
  FF0EM001.FF0EMLPP = FF0EW01.FFQLCOPP; /* Lst caov propct*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* and user can chg data*/
      set FF0EM001.FF0EMOFP normal; /* Oth caov futpct*/
      set FF0EM001.FF0EMLFP normal; /* Lst caov futpct*/
      set FF0EM001.FF0EMOPP normal; /* Oth caov propct*/
      set FF0EM001.FF0EMLPP normal; /* Lst caov propct*/
    else
      set FF0EM001.FF0EMOFP skip; /* Oth caov futpct*/
      set FF0EM001.FF0EMLFP skip; /* Lst caov futpct*/
      set FF0EM001.FF0EMOPP skip; /* Oth caov propct*/
      set FF0EM001.FF0EMLPP skip; /* Lst caov propct*/
    end
  else
    set FF0EM001.FF0EMOFP skip; /* Oth caov futpct*/
    set FF0EM001.FF0EMLFP skip; /* Lst caov futpct*/
    set FF0EM001.FF0EMOPP skip; /* Oth caov propct*/
    set FF0EM001.FF0EMLPP skip; /* Lst caov propct*/
  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM001.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM001.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM001.FF0EMFCO[FF0EWIXC] = FF0EW01.FF0EMFCO[FF0EWCOL];
    FF0EM001.FF0EMPCO[FF0EWIXC] = FF0EW01.FF0EMPCO[FF0EWCOL];
    FF0EM001.FF0EMFUP[FF0EWIXC] = FF0EW01.FF0EMFUP[FF0EWCOL];
    FF0EM001.FF0EMFUA[FF0EWIXC] = FF0EW01.FF0EMFUA[FF0EWCOL];
    FF0EM001.FF0EMFUI[FF0EWIXC] = FF0EW01.FF0EMFUI[FF0EWCOL];
    FF0EM001.FF0EMFUC[FF0EWIXC] = FF0EW01.FF0EMFUC[FF0EWCOL];
    FF0EM001.FF0EMFUT[FF0EWIXC] = FF0EW01.FF0EMFUT[FF0EWCOL];
    FF0EM001.FF0EMNFP[FF0EWIXC] = FF0EW01.FF0EMNFP[FF0EWCOL];
    FF0EM001.FF0EMNFA[FF0EWIXC] = FF0EW01.FF0EMNFA[FF0EWCOL];
    FF0EM001.FF0EMNFI[FF0EWIXC] = FF0EW01.FF0EMNFI[FF0EWCOL];
    FF0EM001.FF0EMNFC[FF0EWIXC] = FF0EW01.FF0EMNFC[FF0EWCOL];
    FF0EM001.FF0EMNFT[FF0EWIXC] = FF0EW01.FF0EMNFT[FF0EWCOL];

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/
      if (COMMAREA.CACHGFL == "Y") /* & user can chg data*/
        set FF0EM001.FF0EMFUP[FF0EWIXC] normal; /* Pral futr dmd*/
        set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
        set FF0EM001.FF0EMNFP[FF0EWIXC] normal; /* Pral natl fdmd*/
        set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/
      else
        set FF0EM001.FF0EMFUP[FF0EWIXC] skip; /* Pral futr dmd*/
        set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
        set FF0EM001.FF0EMNFP[FF0EWIXC] skip; /* Pral natl fdmd*/
        set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/
      end
    else
      set FF0EM001.FF0EMFUP[FF0EWIXC] skip; /* Pral futr dmd*/
      set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
      set FF0EM001.FF0EMNFP[FF0EWIXC] skip; /* Pral natl fdmd*/
      set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/
    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E121

// Check change authorization
Function FF0E122()
   /* ------------------------------------------------------------*/
   /* If a current or work worksheet, autoskip fields in columns*/
   /* prior to current, after closeout, subtotal and accum total.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL == "Y") /* Modifiable data exists*/

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/

      FF0EW00.FF0EWIXC = 1; /* Column index*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

      while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
       && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

        if (FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO /* Month LT curr*/
         || FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO /* or GT buy*/
         || FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"         /* or subtotal*/
         || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")        /* or accum total*/

          set FF0EM001.FF0EMFUP[FF0EWIXC] skip; /* Pral futr dmd*/
          set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
          set FF0EM001.FF0EMNFP[FF0EWIXC] skip; /* Pral natl fdmd*/
          set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/

        end

        if (FF0EW00.XLCCD == "20" /* Closeout life cycle*/
         && FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW06.SY2PDCMO)

          set FF0EM001.FF0EMFUP[FF0EWIXC] skip; /* Pral futr dmd*/
          set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
          set FF0EM001.FF0EMNFP[FF0EWIXC] skip; /* Pral natl fdmd*/
          set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/

        end

        FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
        FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

      end

    end

  else

    /* ------------------------------------------------------------*/
     /* If no modifiable data, autoskip the page and scroll amount.*/
    /* ------------------------------------------------------------*/

    set FF0EM001.FF0EWPAG skip, bold; /* Page number*/
    set FF0EM001.FF0EWLRS skip; /* Left/right scroll amount*/

  end


end // end FF0E122

// Submit FF297d to upd cat level
Function FF0E123()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  /* SET TA3REC EMPTY;*/
  /* MOVE 'ASSIGN ' TO TA3REC.TA3OPTN;*/
  /* CALL TA0230 TA3REC (NOMAPS,NONCSP,REPLY;*/

  /* IF EZERT8 EQ '00000000'          /* Call successful*/
  /* AND TA3REC.TA3RTNCD EQ 0;      /* Good return code*/
  /* IF TA3REC.TA3RGNID EQ '03';    /* if on production system*/
  /* PERFORM FF0E124;             /* format production jcl*/
  /* ELSE;*/
  /* PERFORM FF0E125;             /* format development jcl*/
  /* END;*/
  /* ELSE;*/
  /* ;*/
  /* MOVE '123' TO FFWREC.XXXMODID; /* module identification*/
  /* MOVE 87 TO FFWREC.XXXMSGNO;    /* Error encountered with print request*/
  /* EZEFLO;*/
  /* END;*/

end // end FF0E123

// Check attention identifier
Function FF0E130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* submit ff297d*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 have been pressed & user is only allowed*/
   /* inquiry send error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "N") /* and inquiry only allowed*/
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(403); /* Key not valid for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If exiting to another application, except FF0B, submit*/
   /* FF297D to recalc demand at cat and line level.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* & user can chg data*/
      FF0E123(); /* submit ff297d*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E130

// Reset highlighted fields
Function FF0E140()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM001.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM001.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  if (FF0EW01.CACHGFL == "Y") /* Modifiable data exists*/

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/

      if (COMMAREA.CACHGFL == "Y") /* And user can chg data*/
        set FF0EM001.FF0EMOFP normal; /* Oth caov futpct*/
        set FF0EM001.FF0EMLFP normal; /* Lst caov futpct*/
        set FF0EM001.FF0EMOPP normal; /* Oth caov propct*/
        set FF0EM001.FF0EMLPP normal; /* Lst caov propct*/
      else
        set FF0EM001.FF0EMOFP skip; /* Oth caov futpct*/
        set FF0EM001.FF0EMLFP skip; /* Lst caov futpct*/
        set FF0EM001.FF0EMOPP skip; /* Oth caov propct*/
        set FF0EM001.FF0EMLPP skip; /* Lst caov propct*/
      end

      FF0EW00.FF0EWIXC = 1; /* Column index*/

      while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
       && FF0EM001.FF0EMMON[FF0EWIXC] > " ") /* or end of data*/

        if (COMMAREA.CACHGFL == "Y") /* And user can chg data*/
          set FF0EM001.FF0EMFUP[FF0EWIXC] normal; /* Pral futr dmd*/
          set FF0EM001.FF0EMFUC[FF0EWIXC] normal; /* Cncl futr dmd*/
          set FF0EM001.FF0EMNFP[FF0EWIXC] normal; /* Pral natl fdmd*/
          set FF0EM001.FF0EMNFC[FF0EWIXC] normal; /* Cncl natl fdmd*/
        else
          set FF0EM001.FF0EMFUP[FF0EWIXC] skip; /* Pral futr dmd*/
          set FF0EM001.FF0EMFUC[FF0EWIXC] skip; /* Cncl futr dmd*/
          set FF0EM001.FF0EMNFP[FF0EWIXC] skip; /* Pral natl fdmd*/
          set FF0EM001.FF0EMNFC[FF0EWIXC] skip; /* Cncl natl fdmd*/
        end

        FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

      end

    end

  end

  set FF0EM001.CATOAP initialAttributes; /* TO application*/
  set FF0EM001.CAITEM initialAttributes; /* Application data*/


end // end FF0E140

// Verify the entered data
Function FF0E150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FF0EM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end   tcs*/
    FF0E151(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E152(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E153(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E154(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E155(); /* Verify M001 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E150

// Verify page request
Function FF0E151()

   /* begin tcs*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0EM001.FF0EWPAG < 2)      /* and no previous pages*/
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* end tcs*/
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no more pages.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES16(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FF0EM001.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM001.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FF0EM001.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E151

// Verify scroll request
Function FF0E152()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "152"; /* Module identification*/

    if (converseVar.eventKey is pf10) /* Scroll left request*/

      converseLib.validationFailed(23); /* Unable to scroll left*/
    else
      converseLib.validationFailed(24); /* Unable to scroll right*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES16(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FF0EM001.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FF0EM001.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E152

// Verify save worksheet request
Function FF0E153()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES16(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FF0EM001.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FF0EM001.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E153

// Verify print request
Function FF0E154()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES16(); /* Check M001 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF0EM001.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF0EM001.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E154

// Verify M001 changed fields
Function FF0E155()
   /* ------------------------------------------------------------*/
   /* Verify any changed CNCL NATL FDMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMNFC[FF0EWIXC] != FF0EW01.FF0EMNFC[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM001.FF0EMNFC[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCNFDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FF0EM001.FF0EMNFC[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL NATL FDMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMNFP[FF0EWIXC] != FF0EW01.FF0EMNFP[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM001.FF0EMNFP[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRPNFDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FF0EM001.FF0EMNFP[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed CNCL FUTR DMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMFUC[FF0EWIXC] != FF0EW01.FF0EMFUC[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM001.FF0EMFUC[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCFUDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FF0EM001.FF0EMFUC[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL FUTR DMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMFUP[FF0EWIXC] != FF0EW01.FF0EMFUP[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM001.FF0EMFUP[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRPFUDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "155"; /* Module identification*/
        set FF0EM001.FF0EMFUP[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed LST CAOV PROPCT field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMLPP != FF0EW01.FFQLCOPP) /* Field changed*/

    if (FF0EM001.FF0EMLPP >= 0 /* Percent GE 0*/
     && FF0EM001.FF0EMLPP <= 100) /* and LE 100*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "155"; /* Module identification*/
      set FF0EM001.FF0EMLPP cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed OTH CAOV PROPCT field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMOPP != FF0EW01.FFQOCOPP) /* Field changed*/

    if (FF0EM001.FF0EMOPP >= 0 /* Percent GE 0*/
     && FF0EM001.FF0EMOPP <= 100) /* and LE 100*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "155"; /* Module identification*/
      set FF0EM001.FF0EMOPP cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed LST CAOV FUTPCT field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMLFP != FF0EW01.FFQLCOFP) /* Field changed*/

    if (FF0EM001.FF0EMLFP >= 0 /* Percent GE 0*/
     && FF0EM001.FF0EMLFP <= 100) /* and LE 100*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "155"; /* Module identification*/
      set FF0EM001.FF0EMLFP cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed OTH CAOV FUTPCT field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMOFP != FF0EW01.FFQOCOFP) /* Field changed*/

    if (FF0EM001.FF0EMOFP >= 0 /* Percent GE 0*/
     && FF0EM001.FF0EMOFP <= 100) /* and LE 100*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "155"; /* Module identification*/
      set FF0EM001.FF0EMOFP cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FF0EM001.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FF0EM001.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E155

// Process valid input request
Function FF0E160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM001.FF0EWPAG; /* Page number*/
    else
      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end tcs*/
  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM001.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM001.FF0EWPAG; /* Page number*/
    else
      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM001.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM001.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E164(); /* Process M001 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E160

// Format/insert work worksheet
Function FF0E161()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/
  if (XX0XW01.XX0XWTIM == FF0EW00.FF0EWTIM)
                                   /* tim = tim from last saved wsheet*/
    if (XX0XW01.XX0XWMIN == 59) /* add a minute to make time unique*/
      if (XX0XW01.XX0XWHR == 23)
        XX0XW01.XX0XWHR = 00;
        XX0XW01.XX0XWMIN = 01;
      else
        XX0XW01.XX0XWHR = XX0XW01.XX0XWHR + 1;
        XX0XW01.XX0XWMIN = 01;
      end
    else
      XX0XW01.XX0XWMIN = XX0XW01.XX0XWMIN + 1;
    end
  end
  FF0EW00.FF0EWTIM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* Format/insert work worksheet header, items and comments.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header row*/
  set VSWITM02 empty; /* Worksheet item row*/
  set FFPREC empty; /* Worksheet comment row*/

  FFQREC.XWSCD = "09"; /* Worksheet type code*/

  FF0EW00.FF0EWCOL = 1; /* Current column number*/
  FF0EW00.FF0EWIXW = 1; /* Worksheet number index*/

  while (FF0EW00.FF0EWIXW <= 12 /* Until end of array*/
   && FF0EW01.FF0EWSNO[FF0EWIXW] > 0) /* or end of worksheets*/

    FF0ES17(); /* Obtain next worksheet number*/

    FF0ES18(); /* Insert worksheet header row*/

    while (FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB") /* Until end of season*/

      FF0ES19(); /* Insert worksheet item row*/

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

    end

    if (FF0EW00.FF0EWIXW == 1) /* First season worksheet*/

      FF0EW00.FF0EWIXL = 1; /* Line index*/

      while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

        if (FF0EW07.FFPCOMNT[FF0EWIXL] > " ") /* Comment exists*/
          FF0ES20(); /* Insert worksheet comment row*/
        end

        FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

      end

      FF0ES81(); /* Insert product activity comments*/

      /* ===> bump col index by 1 to bypass sub column*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

    else

      /* ===> bump col index by 2 to bypass sub & accum column*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 2; /* Current column number*/

    end
    FF0EW00.FF0EWIXW = FF0EW00.FF0EWIXW + 1; /* Worksheet number index*/

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* Update the control information and request data to display.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = "N"; /* Modified data exit switch*/
  FF0EW01.FFWMODSW = "N"; /* Modified data switch*/

  FFWREC.XWSCD = FFQREC.XWSCD; /* Worksheet type code*/
  if (FFQREC.XWSCD in XWSTBL.XWSCD)
    FFWREC.XWSABRV = XWSTBL.XWSABRV[sysVar.arrayIndex];
  end

  FFWREC.ZZZCHGDT = FFQREC.ZZZCHGDT; /* Change date*/
  FFWREC.ZZZCHGTM = FFQREC.ZZZCHGTM; /* Change time*/

  FF0EW00.FF0EWSWR = "Y"; /* Request for data switch*/

  FF0ES99(); /* Init FF0EW00 fields*/

   /* ------------------------------------------------------------*/
   /* Indicate the worksheet was saved as a work worksheet.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "161"; /* Module identification*/
  FFWREC.XXXMSGNO = 206; /* Work worksheet saved*/

end // end FF0E161

// Format/insert master worksheet
Function FF0E162()
   /* ------------------------------------------------------------*/
   /* Initialize parameter areas and obtain current date/time.*/
   /* ------------------------------------------------------------*/

  set FF0EW11 empty; /* ===> Subroutine FF2920 parameters*/
  set FF0EW12 empty; /* ===> Subroutine FF2700 parameters*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Call the subroutine to calculate suggested buy quantities.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSFS == "Y") /* Style found on FFSTY*/
    FF0EW11.FF0EWUSW = "Y"; /* Sugg qtb update switch*/

    FF0EW11.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    FF0EW11.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

    FF0ES21(); /* Calculate monthly variances*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/
  end

   /* ------------------------------------------------------------*/
   /* Select and open cursor for master worksheet to be deleted.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header row*/
  set VSWITM02 empty; /* Worksheet item row*/
  set FFPREC empty; /* Worksheet comment row*/

  FFQREC.XWSCD = "02"; /* Worksheet type code*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/

  FF0E113(); /* Open worksheet header cursor*/

   /* ------------------------------------------------------------*/
   /* Delete the header, items and comments until end of cursor.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWH = "N"; /* Header cursor EOF switch*/

  while (FF0EW00.FF0EWSWH == "N") /* Until end of cursor*/

    FF0E114(); /* Fetch next worksheet header*/

    if (FF0EW00.FF0EWSWH == "N") /* Not end of cursor*/

      FF0ES24(); /* Delete worksheet header*/

      FF0ES25(); /* Delete worksheet items*/

      if (FFQREC.FFQFCMFL == "Y" /* Forecaster comments exist*/
       || FFQREC.FFQSCMFL == "Y") /* or scheduler comments exist*/

        FF0ES26(); /* Delete worksheet comments*/

      end

      FF0ES83(); /* Delete product activity comments*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected master worksheets.*/
   /* ------------------------------------------------------------*/

  FF0E119(); /* Close worksheet header cursor*/

   /* ------------------------------------------------------------*/
   /* Format/insert master worksheet header, items and comments.*/
     /* Note: only create master records for 1 year of seasons.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header row*/
  set VSWITM02 empty; /* Worksheet item row*/
  set FFPREC empty; /* Worksheet comment row*/

  FFQREC.XWSCD = "02"; /* Worksheet type code*/

  FF0EW00.FF0EWCOL = 1; /* Current column number*/
  FF0EW00.FF0EWIXW = 1; /* Worksheet number index*/
  FF0EW00.FF0EWWIC = 0; /* Worksheet item count*/
  FF0EW00.FF0EWBSW = "N"; /* buy month inserted flag*/

  while (FF0EW00.FF0EWWIC < 13 /* ===> While LE one year*/
   || FF0EW00.FF0EWBSW == "N") /* while buy month not inserted*/

    FF0ES17(); /* Obtain next worksheet number*/

    FF0ES18(); /* Insert worksheet header row*/

    while (FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB") /* Until end of season*/

      FF0ES19(); /* Insert worksheet item row*/

      if (FF0EW01.FF4FCTMO[FF0EWCOL] == FF0EW01.FFQMBYMO) /* equal buy mon*/
        FF0EW00.FF0EWBSW = "Y"; /* buy month inserted*/
      end

      FF0EW00.FF0EWWIC = FF0EW00.FF0EWWIC + 1; /* Wrksht item count*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

    end

    if (FF0EW00.FF0EWIXW == 1) /* If processing first wkrsht hdr*/

      FF0EW00.FF0EWIXL = 1; /* Line index*/

      while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

        if (FF0EW07.FFPCOMNT[FF0EWIXL] > " ") /* Comment exists*/
          FF0ES20(); /* Insert worksheet comment row*/
        end

        FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

      end

      FF0ES81(); /* Insert product activity comments*/

      /* ===> bump col index by 1 to bypass sub column*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

    else

      /* ===> bump col index by 2 to bypass sub & accum column*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 2; /* Current column number*/

    end

    FF0EW00.FF0EWIXW = FF0EW00.FF0EWIXW + 1; /* Worksheet nbr index*/

  end

   /* ------------------------------------------------------------*/
   /* Select and open cursor for current worksheet to be deleted.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not a current worksheet*/
   || FF0EW01.FFWMODSW == "Y") /* or data was modified*/

    set FFQREC empty; /* Worksheet header row*/
    set VSWITM02 empty; /* Worksheet item row*/
    set FFPREC empty; /* Worksheet comment row*/

    FFQREC.XWSCD = "01"; /* Worksheet type code*/
    FFQREC.ZZZCHGDT = -1; /* Change date*/
    FFQREC.ZZZCHGTM = -1; /* Change time*/

    FF0E113(); /* Open worksheet header cursor*/

    /* ------------------------------------------------------------*/
     /* Delete the header, items and comments until end of cursor.*/
    /* ------------------------------------------------------------*/

    FF0EW00.FF0EWSWH = "N"; /* Header cursor EOF switch*/

    while (FF0EW00.FF0EWSWH == "N") /* Until end of cursor*/

      FF0E114(); /* Fetch next worksheet header*/

      if (FF0EW00.FF0EWSWH == "N") /* Not end of cursor*/

        FF0ES24(); /* Delete worksheet header*/

        FF0ES25(); /* Delete worksheet items*/

        if (FFQREC.FFQFCMFL == "Y" /* Forecaster comments exist*/
         || FFQREC.FFQSCMFL == "Y") /* or scheduler comments exist*/

          FF0ES26(); /* Delete worksheet comments*/

        end

        FF0ES83(); /* Delete product activity comments*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Close the cursor for the selected current worksheets.*/
    /* ------------------------------------------------------------*/

    FF0E119(); /* Close worksheet header cursor*/

    /* ------------------------------------------------------------*/
     /* Format/insert current worksheet header, items and comments.*/
    /* ------------------------------------------------------------*/

    set FFQREC empty; /* Worksheet header row*/
    set VSWITM02 empty; /* Worksheet item row*/
    set FFPREC empty; /* Worksheet comment row*/

    FFQREC.XWSCD = "01"; /* Worksheet type code*/

    FF0EW00.FF0EWCOL = 1; /* Current column number*/
    FF0EW00.FF0EWIXW = 1; /* Worksheet number index*/

    while (FF0EW00.FF0EWIXW <= 12 /* Until end of array*/
     && FF0EW01.FF0EWSNO[FF0EWIXW] > 0) /* or end of worksheets*/

      FF0ES17(); /* Obtain next worksheet number*/

      FF0ES18(); /* Insert worksheet header row*/

      while (FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB") /* Until end of season*/

        FF0ES19(); /* Insert worksheet item row*/

        FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

      end

      if (FF0EW00.FF0EWIXW == 1) /* First season worksheet*/

        FF0EW00.FF0EWIXL = 1; /* Line index*/

        while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

          if (FF0EW07.FFPCOMNT[FF0EWIXL] > " ") /* Comment exists*/
            FF0ES20(); /* Insert worksheet comment row*/
          end

          FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

        end

        FF0ES81(); /* Insert product activity comments*/

        /* ===> bump col index by 1 to bypass sub column*/
        FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column number*/

      else

        /* ===> bump col index by 2 to bypass sub & accum column*/
        FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 2; /* Current column number*/

      end

      FF0EW12.FFEWSNBR[FF0EWIXW] = FF1REC.FF1WSNBR; /* Wrksht nbr*/

      FF0EW00.FF0EWIXW = FF0EW00.FF0EWIXW + 1; /* Worksheet number index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Call the subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSFS == "Y") /* Style found on FFSTY*/
    FF0EW12.XXXUSRID = COMMAREA.CAUSERID; /* User identification*/

    move FF0EW11.FF4FCTMO to FF0EW12.FF4FCTMO[1] for all;
    move FF0EW11.FF6SUGBY to FF0EW12.FF6SUGBY[1] for all;

    FF0EW12.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    FF0EW12.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

    FF0ES27(); /* Update month master tables*/
  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

   /* ------------------------------------------------------------*/
   /* Update the control information and request data to display.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not a current worksheet*/
   || FF0EW01.FFWMODSW == "Y") /* or data was modified*/

    FFWREC.FFWMODSW = "N"; /* Modified data exit switch*/

    FFWREC.XWSCD = FFQREC.XWSCD; /* Worksheet type code*/
    if (FFQREC.XWSCD in XWSTBL.XWSCD)
      FFWREC.XWSABRV = XWSTBL.XWSABRV[sysVar.arrayIndex];
    end

    FFWREC.ZZZCHGDT = FFQREC.ZZZCHGDT; /* Change date*/
    FFWREC.ZZZCHGTM = FFQREC.ZZZCHGTM; /* Change time*/

  end

  FF0EW00.FF0EWSWR = "Y"; /* Request for data switch*/

   /* ------------------------------------------------------------*/
   /* Indicate the worksheet was saved as a master worksheet.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "162"; /* Module identification*/
  FFWREC.XXXMSGNO = 207; /* Master worksheet saved*/


end // end FF0E162

// Submit print worksheet request
Function FF0E163()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0E165(); /* format production jcl*/
    else
      FF0E166(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "163"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0E163

// Process M001 changed fields
Function FF0E164()
   /* ------------------------------------------------------------*/
   /* If OTH CAOV FUTPCT changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMOFP != FF0EW01.FFQOCOFP) /* Oth caov futpct*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
    FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Current month*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 2; /* Two months prior*/

    if (FF0EW00.FF0EWDMM < 1) /* Month LT 1*/
      FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 12; /* Adjust month*/
      FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY - 1; /* Adjust year*/
    end

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "FT"; /* Order type group code*/
    FH1REC.XDSCD = "*"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0EW00.FH1PAQTY = FH1REC.FH1PAQTY; /* Pral qty*/
    FF0EW00.FH1ALQTY = FH1REC.FH1ALQTY; /* Aloc qty*/

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "FT"; /* Order type group code*/
    FH1REC.XDSCD = "1"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0ES29(); /* Process OTH CAOV FUTPCT change*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Get current month*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* To recalc inv pos from current*/
    end /* month forward*/

    FF0ES30(); /* Adjust subsequent inventories*/

  end

   /* ------------------------------------------------------------*/
   /* If LST CAOV FUTPCT changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMLFP != FF0EW01.FFQLCOFP) /* Lst caov futpct*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
    FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Current month*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 1; /* One month prior*/

    if (FF0EW00.FF0EWDMM < 1) /* Month LT 1*/
      FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 12; /* Adjust month*/
      FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY - 1; /* Adjust year*/
    end

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "FT"; /* Order type group code*/
    FH1REC.XDSCD = "*"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0EW00.FH1PAQTY = FH1REC.FH1PAQTY; /* Pral qty*/
    FF0EW00.FH1ALQTY = FH1REC.FH1ALQTY; /* Aloc qty*/

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "FT"; /* Order type group code*/
    FH1REC.XDSCD = "1"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0ES31(); /* Process LST CAOV FUTPCT change*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Get current month*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* To recalc inv pos from current*/
    end /* month forward*/

    FF0ES30(); /* Adjust subsequent inventories*/

  end

   /* ------------------------------------------------------------*/
   /* If OTH CAOV PROPCT changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMOPP != FF0EW01.FFQOCOPP) /* Oth caov propct*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
    FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Current month*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 2; /* Two months prior*/

    if (FF0EW00.FF0EWDMM < 1) /* Month LT 1*/
      FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 12; /* Adjust month*/
      FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY - 1; /* Adjust year*/
    end

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "PR"; /* Order type group code*/
    FH1REC.XDSCD = "*"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0EW00.FH1PAQTY = FH1REC.FH1PAQTY; /* Pral qty*/
    FF0EW00.FH1ALQTY = FH1REC.FH1ALQTY; /* Aloc qty*/

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "PR"; /* Order type group code*/
    FH1REC.XDSCD = "1"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0ES32(); /* Process OTH CAOV PROPCT change*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Get current month*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* To recalc inv pos from current*/
    end /* month forward*/

    FF0ES30(); /* Adjust subsequent inventories*/

  end

   /* ------------------------------------------------------------*/
   /* If LST CAOV PROPCT changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM001.FF0EMLPP != FF0EW01.FFQLCOPP) /* Lst caov propct*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
    FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Current month*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 1; /* One month prior*/

    if (FF0EW00.FF0EWDMM < 1) /* Month LT 1*/
      FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 12; /* Adjust month*/
      FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY - 1; /* Adjust year*/
    end

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "PR"; /* Order type group code*/
    FH1REC.XDSCD = "*"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0EW00.FH1PAQTY = FH1REC.FH1PAQTY; /* Pral qty*/
    FF0EW00.FH1ALQTY = FH1REC.FH1ALQTY; /* Aloc qty*/

    set FH1REC empty; /* Clear row storage area*/

    FH1REC.YSMXOT = "PR"; /* Order type group code*/
    FH1REC.XDSCD = "1"; /* Direct ship code*/

    FF0ES28(); /* Summarize VOQSTY01 quantities*/

    FF0ES33(); /* Process LST CAOV PROPCT change*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Get current month*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* To recalc inv pos from current*/
    end /* month forward*/

    FF0ES30(); /* Adjust subsequent inventories*/

  end

   /* ------------------------------------------------------------*/
   /* If PRAL FUTR DMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM001.FF0EMFUP[FF0EWIXC] != FF0EW01.FF0EMFUP[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months fcst*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES34(); /* Process PRAL FUTR DMD change*/
   /* FF0ES56;                    /* Calculate inventory turns*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum column*/
          FF0ES34(); /* ===> Process PRAL FUTR DMD change*/
   /* FF0ES56;                  /* Calculate inventory turns*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* index for fcst months*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES34(); /* Process PRAL FUTR DMD change*/

   /* FF0ES56;                      /* Calculate inventory turns*/

      FF0ES35(); /* Calculations based on demand*/

      FF0ES30(); /* Adjust subsequent inventories*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If CNCL FUTR DMD was changed, calculate associated fields.*/
     /* Note: These fields are now protected, code is left here*/
           /* in case users want to activate this option at a*/
           /* later date. Index is forced to by pass logic*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 9; /* Column index (by-pass logic)*/

   /* MOVE 1 TO FF0EW00.FF0EWIXC      ; Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM001.FF0EMFUC[FF0EWIXC] != FF0EW01.FF0EMFUC[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES36(); /* Process CNCL FUTR DMD change*/
      end

      if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWCOL) /* accum total*/
        FF0ES36(); /* Process CNCL FUTR DMD change*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES36(); /* Process CNCL FUTR DMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If PRAL NATL FDMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM001.FF0EMNFP[FF0EWIXC] != FF0EW01.FF0EMNFP[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months fcst*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES37(); /* Process PRAL NATL FDMD change*/
   /* FF0ES56;                    /* Calculate inventory turns*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum column*/
          FF0ES37(); /* ===> Process PRAL NATL FDMD change*/
          FF0ES56(); /* Calculate inventory turns*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* index for fcst months*/
      end


      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES37(); /* Process PRAL NATL FDMD change*/

   /* FF0ES56;                      /* Calculate inventory turns*/

      FF0ES35(); /* Calculations based on demand*/

      FF0ES30(); /* Adjust subsequent inventories*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If CNCL NATL FDMD was changed, calculate associated fields.*/
     /* Note: These fields are now protected, code is left here*/
           /* in case users want to activate this option at a*/
           /* later date. Index is forced to by pass logic*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 9; /* Column index*/

   /* MOVE 1 TO FF0EW00.FF0EWIXC      ; Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM001.FF0EMNFC[FF0EWIXC] != FF0EW01.FF0EMNFC[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES38(); /* Process CNCL NATL FDMD change*/
      end

      if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWCOL) /* accum total*/
        FF0ES38(); /* Process CNCL NATL FDMD change*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES38(); /* Process CNCL NATL FDMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If END INVENTORY or SFTY STOCK changed, calculate SUGG BUY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y" /* Sugg qtb calculate switch*/
   && FF0EW00.FF0EWSFS == "Y") /* and style on FFSTY*/

    set FF0EW11 empty; /* Subroutine FF2920 parameters*/

    FF0EW11.FF0EWUSW = "N"; /* Sugg qtb update switch*/

    FF0ES21(); /* Calculate monthly variance*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/

    FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

  end


end // end FF0E164

// Submit prod jcl FF1801
Function FF0E165()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0ET.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      set FF0EW13 empty; /* Parameters work area*/

      FF0EW13.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FF0EW13.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

      FF0EW13.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FF0EW13.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

      FF0EW13.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FF0EW13.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

      FF0EW13.SY1STNBR = FFWREC.SY1STNBR; /* Sty nbr*/
      FF0EW13.SY2CLRID = FFWREC.SY2CLRID; /* Colr cd id*/
      FF0EW13.XDMCD = FFWREC.XDMCD; /* Dim cd*/

      FF0EW13.SY1SSTNM = FFWREC.SY1SSTNM; /* Short sty nm*/
      FF0EW13.SY2CLRAB = FFWREC.SY2CLRAB; /* Sty colr abrv*/

      FF0EW13.XWSCD = FFWREC.XWSCD; /* Wrksht typ cd*/

      FF0EW13.FF0EWCDT = FFWREC.ZZZCHGDT; /* Change date*/
      FF0EW13.FF0EWCTM = FFWREC.ZZZCHGTM; /* Change time*/

      FF0EW13.FF0EWABY = FFWREC.FFQMBYMO; /* Actl buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF0EW13.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0ET.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0ET.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0ET.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0E165

// Submit test jcl FF1901
Function FF0E166()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0ET5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      set FF0EW13 empty; /* Parameters work area*/

      FF0EW13.XPLCD = FFWREC.XPLCD; /* Product line code*/
      FF0EW13.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

      FF0EW13.YPGCD = FFWREC.YPGCD; /* Product type group code*/
      FF0EW13.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

      FF0EW13.XPCCD = FFWREC.XPCCD; /* Product category code*/
      FF0EW13.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

      FF0EW13.SY1STNBR = FFWREC.SY1STNBR; /* Sty nbr*/
      FF0EW13.SY2CLRID = FFWREC.SY2CLRID; /* Colr cd id*/
      FF0EW13.XDMCD = FFWREC.XDMCD; /* Dim cd*/

      FF0EW13.SY1SSTNM = FFWREC.SY1SSTNM; /* Short sty nm*/
      FF0EW13.SY2CLRAB = FFWREC.SY2CLRAB; /* Sty colr abrv*/

      FF0EW13.XWSCD = FFWREC.XWSCD; /* Wrksht typ cd*/

      FF0EW13.FF0EWCDT = FFWREC.ZZZCHGDT; /* Change date*/
      FF0EW13.FF0EWCTM = FFWREC.ZZZCHGTM; /* Change time*/

      FF0EW13.FF0EWABY = FFWREC.FFQMBYMO; /* Actl buy month*/

      TA6REC.TARJCL[TA6INDEX] = FF0EW13.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0ET5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0ET5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0ET5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0E166

// Display CURRENT DEMAND PROP
Function FF0E200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E220(); /* Format and display the map*/

  FF0E230(); /* Check attention identifier*/

  FF0E240(); /* Reset fields to normal intensity*/

  FF0E250(); /* Verify the entered data*/

  FF0E260(); /* Process valid input request*/


end // end FF0E200

// Format and converse the map
Function FF0E220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0E222(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM002 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM002.CAITEM; /* Application data*/


end // end FF0E220

// Format the display data
Function FF0E221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM002 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM002.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM002.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM002.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM002.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM002.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM002.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM002.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM002.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM002.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM002.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM002.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM002.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

  FF0EM002.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM002.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM002.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM002.FF0EMPRP[FF0EWIXC] = FF0EW02.FF0EMPRP[FF0EWCOL];
    FF0EM002.FF0EMPRA[FF0EWIXC] = FF0EW02.FF0EMPRA[FF0EWCOL];
    FF0EM002.FF0EMPRI[FF0EWIXC] = FF0EW02.FF0EMPRI[FF0EWCOL];
    FF0EM002.FF0EMPRC[FF0EWIXC] = FF0EW02.FF0EMPRC[FF0EWCOL];
    FF0EM002.FF0EMPRT[FF0EWIXC] = FF0EW02.FF0EMPRT[FF0EWCOL];
    FF0EM002.FF0EMNPP[FF0EWIXC] = FF0EW02.FF0EMNPP[FF0EWCOL];
    FF0EM002.FF0EMNPA[FF0EWIXC] = FF0EW02.FF0EMNPA[FF0EWCOL];
    FF0EM002.FF0EMNPI[FF0EWIXC] = FF0EW02.FF0EMNPI[FF0EWCOL];
    FF0EM002.FF0EMNPC[FF0EWIXC] = FF0EW02.FF0EMNPC[FF0EWCOL];
    FF0EM002.FF0EMNPT[FF0EWIXC] = FF0EW02.FF0EMNPT[FF0EWCOL];

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/
      if (COMMAREA.CACHGFL == "Y") /* and user allowed to chg data*/
        set FF0EM002.FF0EMPRP[FF0EWIXC] normal; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] normal; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/
      else
        set FF0EM002.FF0EMPRP[FF0EWIXC] skip; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] skip; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/
      end
    else
      set FF0EM002.FF0EMPRP[FF0EWIXC] skip; /* Pral prop dmd*/
      set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
      set FF0EM002.FF0EMNPP[FF0EWIXC] skip; /* Pral natl pdmd*/
      set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/
    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E221

// Check change authorization
Function FF0E222()
   /* ------------------------------------------------------------*/
   /* If a current or work worksheet, autoskip fields in columns*/
   /* prior to current, after closeout, subtotal and accum total.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

      if (FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO /* Month LT curr*/
       || FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO /* or GT buy*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"         /* or subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")        /* or accum total*/

        set FF0EM002.FF0EMPRP[FF0EWIXC] skip; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] skip; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/

      end

      if (FF0EW00.XLCCD == "20" /* Closeout life cycle*/
       && FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW06.SY2PDCMO)

        set FF0EM002.FF0EMPRP[FF0EWIXC] skip; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] skip; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end


end // end FF0E222

// Check attention identifier
Function FF0E230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* submit FF297D*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't update data send error*/
   /* message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(403); /* Key invalid for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If exiting application execute subroutine to recalc demand*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* and user can chg data*/
      FF0E123(); /* submit FF297D - recalc demand upper*/
                                   /* levs*/
    end
  end
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E230

// Reset highlighted fields
Function FF0E240()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM002.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM002.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EM002.FF0EMMON[FF0EWIXC] > " ") /* or end of data*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FF0EM002.FF0EMPRP[FF0EWIXC] normal; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] normal; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] normal; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] normal; /* Cncl natl pdmd*/
      else
        set FF0EM002.FF0EMPRP[FF0EWIXC] skip; /* Pral prop dmd*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] skip; /* Cncl prop dmd*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] skip; /* Pral natl pdmd*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] skip; /* Cncl natl pdmd*/
      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end

  set FF0EM002.CATOAP initialAttributes; /* TO application*/
  set FF0EM002.CAITEM initialAttributes; /* Application data*/


end // end FF0E240

// Verify the entered data
Function FF0E250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FF0EM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E251(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E252(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E253(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E254(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E255(); /* Verify M002 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E250

// Verify page request
Function FF0E251()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES39(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FF0EM002.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM002.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FF0EM002.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E251

// Verify scroll request
Function FF0E252()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES39(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FF0EM002.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FF0EM002.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E252

// Verify save worksheet request
Function FF0E253()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES39(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FF0EM002.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FF0EM002.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E253

// Verify print request
Function FF0E254()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES39(); /* Check M002 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FF0EM002.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FF0EM002.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E254

// Verify M002 changed fields
Function FF0E255()
   /* ------------------------------------------------------------*/
   /* Verify any changed CNCL NATL PDMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMNPC[FF0EWIXC] != FF0EW02.FF0EMNPC[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM002.FF0EMNPC[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCNPDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FF0EM002.FF0EMNPC[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL NATL PDMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMNPP[FF0EWIXC] != FF0EW02.FF0EMNPP[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM002.FF0EMNPP[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRPNPDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FF0EM002.FF0EMNPP[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed CNCL PROP DMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMPRC[FF0EWIXC] != FF0EW02.FF0EMPRC[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM002.FF0EMPRC[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCPRDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FF0EM002.FF0EMPRC[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRAL PROP DMD field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMPRP[FF0EWIXC] != FF0EW02.FF0EMPRP[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM002.FF0EMPRP[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRPPRDM[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "255"; /* Module identification*/
        set FF0EM002.FF0EMPRP[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "255"; /* Module identification*/
    set FF0EM002.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "255"; /* Module identification*/
    set FF0EM002.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E255

// Process valid input request
Function FF0E260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM002.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM002.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM002.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM002.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM002.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E264(); /* Process M002 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E260

// Process M002 changed fields
Function FF0E264()
   /* ------------------------------------------------------------*/
   /* If PRAL PROP DMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM002.FF0EMPRP[FF0EWIXC] != FF0EW02.FF0EMPRP[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES40(); /* ===> Process PRAL PROP DMD change*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FF0ES40(); /* ===> Process PRAL PROP DMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES40(); /* ===> Process PRAL PROP DMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If CNCL PROP DMD was changed, calculate associated fields.*/
     /* Note: These fields are now protected, code is left here*/
           /* in case users want to activate this option at a*/
           /* later date. Index is forced to by-pass logic*/
   /* ------------------------------------------------------------*/


  FF0EW00.FF0EWIXC = 9; /* Column index (to by-pass logic)*/

   /* MOVE 1 TO FF0EW00.FF0EWIXC      ; Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM002.FF0EMPRC[FF0EWIXC] != FF0EW02.FF0EMPRC[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES41(); /* Process CNCL PROP DMD change*/
      end

      if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWCOL) /* accum total*/
        FF0ES41(); /* Process CNCL PROP DMD change*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES41(); /* Process CNCL PROP DMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If PRAL NATL PDMD was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM002.FF0EMNPP[FF0EWIXC] != FF0EW02.FF0EMNPP[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES42(); /* Process PRAL NATL PDMD change*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FF0ES42(); /* Process PRAL NATL PDMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES42(); /* Process PRAL NATL PDMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


   /* ------------------------------------------------------------*/
   /* If CNCL NATL PDMD was changed, calculate associated fields.*/
     /* Note: These fields are now protected, code is left here*/
           /* in case users want to activate this option at a*/
           /* later date. Index is forced to by-pass logic*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 9; /* Column index (to by-pass logic)*/

   /* MOVE 1 TO FF0EW00.FF0EWIXC      ; Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM002.FF0EMNPC[FF0EWIXC] != FF0EW02.FF0EMNPC[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES43(); /* Process CNCL NATL PDMD change*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FF0ES43(); /* Process CNCL NATL PDMD change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES43(); /* Process CNCL NATL PDMD change*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

end // end FF0E264

// Display CURRENT DEMAND TOTAL
Function FF0E300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E320(); /* Format and display the map*/

  FF0E330(); /* Check attention identifier*/

  FF0E340(); /* Reset fields to normal intensity*/

  FF0E350(); /* Verify the entered data*/

  FF0E360(); /* Process valid input request*/


end // end FF0E300

// Format and converse the map
Function FF0E320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM003 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM003.CAITEM; /* Application data*/


end // end FF0E320

// Format the display data
Function FF0E321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM003 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM003.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM003.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM003.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM003.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM003.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM003.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM003.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM003.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM003.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM003.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM003.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM003.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM003.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

  FF0EM003.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM003.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM003.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM003.FF0EMTDP[FF0EWIXC] = FF0EW03.FF0EMTDP[FF0EWCOL];
    FF0EM003.FF0EMTDA[FF0EWIXC] = FF0EW03.FF0EMTDA[FF0EWCOL];
    FF0EM003.FF0EMTDI[FF0EWIXC] = FF0EW03.FF0EMTDI[FF0EWCOL];
    FF0EM003.FF0EMTDC[FF0EWIXC] = FF0EW03.FF0EMTDC[FF0EWCOL];
    FF0EM003.FF0EMTDT[FF0EWIXC] = FF0EW03.FF0EMTDT[FF0EWCOL];
    FF0EM003.FF0EWCAP[FF0EWIXC] = FF0EW03.FF0EWCAP[FF0EWCOL];
    FF0EM003.FF0EMTAF[FF0EWIXC] = FF0EW03.FF0EMTAF[FF0EWCOL];
    FF0EM003.FF0EMTAP[FF0EWIXC] = FF0EW03.FF0EMTAP[FF0EWCOL];

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E321

// Check attention identifier
Function FF0E330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* submit FF297D*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM003.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't update data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If exiting program execute subroutine to roll up demand*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* submit FF297D*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E330

// Reset highlighted fields
Function FF0E340()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM003.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM003.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  set FF0EM003.CATOAP initialAttributes; /* TO application*/
  set FF0EM003.CAITEM initialAttributes; /* Application data*/


end // end FF0E340

// Verify the entered data
Function FF0E350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FF0EM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E351(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E352(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E353(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E354(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E355(); /* Verify M003 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E350

// Verify page request
Function FF0E351()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FF0EM003.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM003.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FF0EM003.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E351

// Verify scroll request
Function FF0E352()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FF0EM003.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FF0EM003.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E352

// Verify save worksheet request
Function FF0E353()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FF0EM003.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FF0EM003.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E353

// Verify print request
Function FF0E354()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FF0EM003.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FF0EM003.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E354

// Verify M003 changed fields
Function FF0E355()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "355"; /* Module identification*/
    set FF0EM003.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "355"; /* Module identification*/
    set FF0EM003.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E355

// Process valid input request
Function FF0E360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM003.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM003.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM003.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

    return; /* Return to previous process*/

  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM003.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM003.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0E360

// Display DEMAND FORECAST
Function FF0E400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E420(); /* Format and display the map*/

  FF0E430(); /* Check attention identifier*/

  FF0E440(); /* Reset fields to normal intensity*/

  FF0E450(); /* Verify the entered data*/

  FF0E460(); /* Process valid input request*/


end // end FF0E400

// Format and converse the map
Function FF0E420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E421(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0E422(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM004 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM004.CAITEM; /* Application data*/


end // end FF0E420

// Format the display data
Function FF0E421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM004 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM004.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM004.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM004.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM004.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM004.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM004.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM004.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM004.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM004.XWSABRV = FFWREC.XWSABRV; /* worksheet type abbrev*/

  FF0EM004.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM004.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM004.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM004.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM004.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM004.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

  FF0EM004.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the future year indicator in the HIST FUT % line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FF0EM004.FF0EMFAI = "A"; /* Futr alt cat indicator*/
    FF0EM004.FF0EMPAI = "A"; /* Prop alt cat indicator*/
  end

  FF0EM004.FF2FUIND = FF0EW04.FF2FUIND; /* Futr yr ind*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM004.FF2FUIND normal; /* Futr yr ind*/
    else
      set FF0EM004.FF2FUIND skip; /* Futr yr ind*/
    end
  else
    set FF0EM004.FF2FUIND skip; /* Futr yr ind*/
  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM004.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM004.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM004.FF0EMDFU[FF0EWIXC] = FF0EW04.FF0EMDFU[FF0EWCOL];
    FF0EM004.FF0EMDNF[FF0EWIXC] = FF0EW04.FF0EMDNF[FF0EWCOL];
    FF0EM004.FF0EMDTF[FF0EWIXC] = FF0EW04.FF0EMDTF[FF0EWCOL];
    FF0EM004.FF0EMDPR[FF0EWIXC] = FF0EW04.FF0EMDPR[FF0EWCOL];
    FF0EM004.FF0EMDNP[FF0EWIXC] = FF0EW04.FF0EMDNP[FF0EWCOL];
    FF0EM004.FF0EMDTP[FF0EWIXC] = FF0EW04.FF0EMDTP[FF0EWCOL];
    FF0EM004.FF0EMDCP[FF0EWIXC] = FF0EW04.FF0EMDCP[FF0EWCOL];
    FF0EM004.FF0EMPCF[FF0EWIXC] = FF0EW04.FF0EMPCF[FF0EWCOL];
    FF0EM004.FF0EMPRF[FF0EWIXC] = FF0EW04.FF0EMPRF[FF0EWCOL];
    FF0EM004.FF0EWDFF[FF0EWIXC] = FF0EW04.FF0EWDFF[FF0EWCOL];
    FF0EM004.FF0EMOBK[FF0EWIXC] = FF0EW04.FF0EMOBK[FF0EWCOL];
    if (FF0EW00.FF2FUIND == "U") /* move user created if selected*/
      FF0EM004.FF0EWDHF[FF0EWIXC] = FF0EW04.FF0EWUHF[FF0EWCOL];
    else
      FF0EM004.FF0EWDHF[FF0EWIXC] = FF0EW04.FF0EWDHF[FF0EWCOL];
    end
    FF0EM004.FF0EWDFI[FF0EWIXC] = FF0EW04.FF0EWDFI[FF0EWCOL];
    if (FF0EW00.FF2PRIND == "U") /* move user created if selected*/
      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")
        FF0EM004.FF0EWDHI[FF0EWIXC] = 100;
      else
        FF0EM004.FF0EWDHI[FF0EWIXC] = FF0EW04.FF0EWUHI[FF0EWCOL];
      end
    else
      FF0EM004.FF0EWDHI[FF0EWIXC] = FF0EW04.FF0EWDHI[FF0EWCOL];
    end

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/
      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FF0EM004.FF0EMPCF[FF0EWIXC] normal; /* Cur prop fcst*/
        set FF0EM004.FF0EWDFF[FF0EWIXC] normal; /* Fcst fut %*/
      else
        set FF0EM004.FF0EMPCF[FF0EWIXC] skip; /* Cur prop fcst*/
        set FF0EM004.FF0EWDFF[FF0EWIXC] skip; /* Fcst fut %*/
      end
    else
      set FF0EM004.FF0EMPCF[FF0EWIXC] skip; /* Cur prop fcst*/
      set FF0EM004.FF0EWDFF[FF0EWIXC] skip; /* Fcst fut %*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E421

// Check change authorization
Function FF0E422()
   /* ------------------------------------------------------------*/
   /* If a current or work worksheet, autoskip fields in columns*/
   /* prior to current, after closeout, subtotal and accum total.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

      if (FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO /* Month LT curr*/
       || FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO /* Month GT buy*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"         /* or subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")        /* or accum total*/

        set FF0EM004.FF0EMPCF[FF0EWIXC] skip; /* Cur prop fcst*/

      end

      if (FF0EW01.FF4FCTMO[FF0EWCOL] <= FF0EW01.FFQMBYMO /* Month Le buy*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"          /* or subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")         /* or accum total*/

        set FF0EM004.FF0EWDFF[FF0EWIXC] skip; /* fcst fut %*/

      end

      if (FF0EW00.XLCCD == "20" /* Closeout life cycle*/
       && FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW06.SY2PDCMO)

        set FF0EM004.FF0EMPCF[FF0EWIXC] skip; /* Cur prop fcst*/

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end


end // end FF0E422

// Check attention identifier
Function FF0E430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* submit FF297D*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM004.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't change data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If exiting application do subroutine to roll up demand*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* submit FF297D*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E430

// Reset highlighted fields
Function FF0E440()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM004.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM004.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM004.FF2FUIND normal; /* Futr yr ind*/
    else
      set FF0EM004.FF2FUIND skip; /* Futr yr ind*/
    end

    FF0EW00.FF0EWIXC = 1; /* Column index*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EM004.FF0EMMON[FF0EWIXC] > " ") /* or end of data*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FF0EM004.FF0EMPCF[FF0EWIXC] normal; /* Cur prop fcst*/
        set FF0EM004.FF0EWDFF[FF0EWIXC] normal; /* Fcst fut %*/
      else
        set FF0EM004.FF0EMPCF[FF0EWIXC] skip; /* Cur prop fcst*/
        set FF0EM004.FF0EWDFF[FF0EWIXC] skip; /* Fcst fut %*/
      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end

  set FF0EM004.CATOAP initialAttributes; /* TO application*/
  set FF0EM004.CAITEM initialAttributes; /* Application data*/


end // end FF0E440

// Verify the entered data
Function FF0E450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "450"; /* Module identification*/
    set FF0EM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end   tcs*/
    FF0E451(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E452(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E453(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E454(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E455(); /* Verify M004 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E450

// Verify page request
Function FF0E451()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES44(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FF0EM004.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM004.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FF0EM004.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E451

// Verify scroll request
Function FF0E452()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES44(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FF0EM004.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FF0EM004.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E452

// Verify save worksheet request
Function FF0E453()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES44(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FF0EM004.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FF0EM004.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E453

// Verify print request
Function FF0E454()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES44(); /* Check M004 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FF0EM004.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FF0EM004.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E454

// Verify M004 changed fields
Function FF0E455()
   /* ------------------------------------------------------------*/
   /* Verify a changed FUTR YR IND field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF2FUIND != FF0EW04.FF2FUIND) /* Field changed*/

    if (FF0EM004.FF2FUIND == "1" /* One year futures*/
     || FF0EM004.FF2FUIND == "2" /* or two years futures*/
     || FF0EM004.FF2FUIND == "U") /* or user created*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "455"; /* Module identification*/
      set FF0EM004.FF2FUIND cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed CURR PROP FCST field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM004.FF0EMPCF[FF0EWIXC] != FF0EW04.FF0EMPCF[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM004.FF0EMPCF[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCPRFC[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "455"; /* Module identification*/
        set FF0EM004.FF0EMPCF[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "455"; /* Module identification*/
    set FF0EM004.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "455"; /* Module identification*/
    set FF0EM004.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E455

// Process valid input request
Function FF0E460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM004.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM004.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM004.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end   tcs*/

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM004.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM004.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E464(); /* Process M004 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E460

// Process M004 changed fields
Function FF0E464()
   /* ------------------------------------------------------------*/
   /* If FUTR YR IND was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF2FUIND != FF0EW04.FF2FUIND) /* Futr yr ind*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

    FF0ES45(); /* Process FUTR YR IND change*/

  end

   /* ------------------------------------------------------------*/
   /* If   CURR PROP FCST was changed, ( curr mo to the buy mo)*/
     /* or FCST FUT %     was changed, ( past the buy mo      )*/
        /* calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    /* ------------------------------------------------------------*/
     /* If   CURR PROP FCST was changed,*/
          /* - DMD FCST will change*/
    /* ------------------------------------------------------------*/

    if (FF0EM004.FF0EMPCF[FF0EWIXC] != FF0EW04.FF0EMPCF[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months forecast*/

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/
      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES46(); /* Process CURR PROP FCST change*/
      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
          FF0ES46(); /* Process CURR PROP FCST change*/
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/
      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES46(); /* Process CURR PROP FCST change*/

      FF0ES35(); /* Calculations based on demand*/

      FF0ES30(); /* Adjust subsequent inventories*/

   /* FF0ES56;                      /* Calculate inventory turns*/

   /* IF '  SUB' IN FF0EW01.FF0EMMON(FF0EWCOL); /* Season subtotal*/
   /* FF0ES56;                    /* Calculate inventory turns*/
   /* END;*/
   /* ;*/
   /* WHILE FF0EW01.FF0EMMON(EZETST) > ' ';/* ===> more fcst months*/
   /* IF FF0EW01.FF0EMMON(EZETST) = 'ACCUM';/* ===> accum total*/
   /* FF0ES56;                  /* Calculate inventory turns*/
   /* END;*/
   /* EZETST = EZETST + 1;        /* Current column*/
   /* END;*/

      FF0ES47(); /* Calculate FCST PROP IDX*/

    else

      /* ------------------------------------------------------------*/
         /* if FCST FUT %     was changed,*/
            /* - Tot Futures will change*/
      /* ------------------------------------------------------------*/

      if (FF0EM004.FF0EWDFF[FF0EWIXC] != FF0EW04.FF0EWDFF[FF0EWCOL]
       && FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO /* ===> buy mo*/
       && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB"         /* and not subtotal*/
       && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM")        /* and not accum total*/

        FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

        FF0ES64(); /* Process FCST FUT %     change*/

        FF0ES47(); /* Calculate FCST PROP IDX*/

      end /* ===> FCST FUT % was changed check*/

    end /* ===> Prop changed check*/

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


   /* ------------------------------------------------------------*/
   /* If CURR PROP FCST was changed, ie) DMD FCST Changes*/
    /* - check Sugg qtb switch.*/
      /* - calculate new safety stock.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* First buy mo*/

      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

      FF0ES60(); /* ======> adjust safety stock*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If END INVENTORY or SFTY STOCK changed, calculate SUGG BUY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    set FF0EW11 empty; /* Subroutine FF2920 parameters*/

    FF0EW11.FF0EWUSW = "N"; /* Sugg qtb update switch*/

    FF0ES21(); /* Calculate monthly variance*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/

    FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

  end


end // end FF0E464

// Display SALES FORECAST
Function FF0E500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E520(); /* Format and display the map*/

  FF0E530(); /* Check attention identifier*/

  FF0E540(); /* Reset fields to normal intensity*/

  FF0E550(); /* Verify the entered data*/

  FF0E560(); /* Process valid input request*/


end // end FF0E500

// Format and converse the map
Function FF0E520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E521(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0E522(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM005.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM005 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM005.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM005.CAITEM; /* Application data*/


end // end FF0E520

// Format the display data
Function FF0E521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM005 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM005.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM005.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM005.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM005.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM005.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM005.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM005.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM005.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM005.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM005.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM005.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM005.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM005.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM005.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM005.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

  FF0EM005.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the demand year indicator in the HIST SEAS IDX line.*/
   /* ------------------------------------------------------------*/

  if (FF2REC.FF2ALCAT != "  ")
    FF0EM005.FF0EMDAI = "A"; /* Demand alt cat indicator*/
  end

  FF0EM005.FF2DMIND = FF0EW05.FF2DMIND; /* Dmd yr ind*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM005.FF2DMIND normal; /* Dmd yr ind*/
    else
      set FF0EM005.FF2DMIND skip; /* Dmd yr ind*/
    end
  else
    set FF0EM005.FF2DMIND skip; /* Dmd yr ind*/

  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM005.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM005.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM005.FF0EMFCD[FF0EWIXC] = FF0EW05.FF0EMFCD[FF0EWCOL];
    FF0EM005.FF0EMMDM[FF0EWIXC] = FF0EW05.FF0EMMDM[FF0EWCOL];
    FF0EM005.FF7FRZFL[FF0EWIXC] = FF0EW05.FF7FRZFL[FF0EWCOL];
    FF0EM005.FF0EWFSI[FF0EWIXC] = FF0EW05.FF0EWFSI[FF0EWCOL];
    if (FF0EW00.FF2DMIND == "U") /* user created index selected*/
      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")
        FF0EM005.FF0EWHSI[FF0EWIXC] = 100;
      else
        FF0EM005.FF0EWHSI[FF0EWIXC] = FF0EW05.FF0EWUSI[FF0EWCOL];
      end
    else
      FF0EM005.FF0EWHSI[FF0EWIXC] = FF0EW05.FF0EWHSI[FF0EWCOL];
    end
    FF0EM005.FF0EWRSI[FF0EWIXC] = FF0EW05.FF0EWRSI[FF0EWCOL];
    FF0EM005.FF0EWFFR[FF0EWIXC] = FF0EW05.FF0EWFFR[FF0EWCOL];
    FF0EM005.FF0EWHFR[FF0EWIXC] = FF0EW05.FF0EWHFR[FF0EWCOL];
    FF0EM005.FF0EMCSF[FF0EWIXC] = FF0EW05.FF0EMCSF[FF0EWCOL];
    FF0EM005.FF0EMMSL[FF0EWIXC] = FF0EW05.FF0EMMSL[FF0EWCOL];

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* or accum total*/

      set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
      set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/

    else

      if (FFWREC.XWSCD == "01" /* Current worksheet*/
       || FFWREC.XWSCD == "09") /* or work worksheet*/
        if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
          set FF0EM005.FF0EMFCD[FF0EWIXC] normal; /* Cur dmd fcst*/
          set FF0EM005.FF0EWFFR[FF0EWIXC] normal; /* Fcst fill rt*/

          if (FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW01.FFQCURMO)
                                   /* Fcst GE curr*/
            set FF0EM005.FF7FRZFL[FF0EWIXC] normal; /* Freeze flag*/
          end
        else
          set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
          set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/

          if (FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW01.FFQCURMO)
                                   /* Fcst GE curr*/
            set FF0EM005.FF7FRZFL[FF0EWIXC] skip; /* Freeze flag*/
          end
        end
      else

        set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
        set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/

        if (FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW01.FFQCURMO) /* Fcst GE curr*/
          set FF0EM005.FF7FRZFL[FF0EWIXC] skip; /* Freeze flag*/
        end

      end

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E521

// Check change authorization
Function FF0E522()
   /* ------------------------------------------------------------*/
   /* If a current or work worksheet, autoskip fields in columns*/
   /* prior to current, after closeout, subtotal and accum total.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

      if (FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO /* Month LT curr*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB"         /* or subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM")        /* or accum total*/

        set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
        set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/

      end

      if (FF0EW00.XLCCD == "20" /* Closeout life cycle*/
       && FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW06.SY2PDCMO)

        set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
        set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/
        set FF0EM005.FF7FRZFL[FF0EWIXC] skip; /* Freeze flag*/

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end


end // end FF0E522

// Check attention identifier
Function FF0E530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FF0E123(); /* submit FF297D*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM005.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, 15, or 19 and user can't change data send*/
   /* error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15 /* or PF15*/
   || converseVar.eventKey is pf19) /* or PF19*/
    if (COMMAREA.CACHGFL == "N") /* If user cant' chg data*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* submit FF297D*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM005"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E530

// Reset highlighted fields
Function FF0E540()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM005.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM005.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM005.FF2DMIND normal; /* Dmd yr ind*/
    else
      set FF0EM005.FF2DMIND skip; /* Dmd yr ind*/
    end

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EM005.FF0EMMON[FF0EWIXC] > " ") /* or end of data*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM" /* or accum total*/
       || FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO)

         /* NEXT SENTENCE*/

      else
        if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
          set FF0EM005.FF0EMFCD[FF0EWIXC] normal; /* Cur dmd fcst*/
          set FF0EM005.FF7FRZFL[FF0EWIXC] normal; /* Freeze flag*/
          set FF0EM005.FF0EWFFR[FF0EWIXC] normal; /* Fcst fill rt*/
        else
          set FF0EM005.FF0EMFCD[FF0EWIXC] skip; /* Cur dmd fcst*/
          set FF0EM005.FF7FRZFL[FF0EWIXC] skip; /* Freeze flag*/
          set FF0EM005.FF0EWFFR[FF0EWIXC] skip; /* Fcst fill rt*/
        end
      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

    end

  end

  set FF0EM005.CATOAP initialAttributes; /* TO application*/
  set FF0EM005.CAITEM initialAttributes; /* Application data*/


end // end FF0E540

// Verify the entered data
Function FF0E550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF0EM005.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E551(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E552(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E553(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E554(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E555(); /* Verify M005 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to calculate was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* Calculate request*/
    FF0E556(); /* Verify calculate request*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E550

// Verify page request
Function FF0E551()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES48(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM005.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E551

// Verify scroll request
Function FF0E552()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES48(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E552

// Verify save worksheet request
Function FF0E553()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES48(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz familly to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E553

// Verify print request
Function FF0E554()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES48(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E554

// Verify M005 changed fields
Function FF0E555()
   /* ------------------------------------------------------------*/
   /* Verify any changed FCST FILL RT field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF0EWFFR[FF0EWIXC] != FF0EW05.FF0EWFFR[FF0EWEND])

      if (FF0EM005.FF0EWFFR[FF0EWIXC] >= 0 /* Rate GE 0*/
       && FF0EM005.FF0EWFFR[FF0EWIXC] <= 100) /* and LE 100*/

         /* NEXT SENTENCE*/

      else

        FFWREC.XXXMODID = "555"; /* Module identification*/
        set FF0EM005.FF0EWFFR[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed DMD YR IND field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF2DMIND != FF0EW05.FF2DMIND) /* Field changed*/

    if (FF0EM005.FF2DMIND == "1" /* One year futures*/
     || FF0EM005.FF2DMIND == "2" /* or two years futures*/
     || FF0EM005.FF2DMIND == "U") /* or user created*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "555"; /* Module identification*/
      set FF0EM005.FF2DMIND cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed FRZ FL field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF7FRZFL[FF0EWIXC] != FF0EW05.FF7FRZFL[FF0EWEND])

      if (FF0EM005.FF7FRZFL[FF0EWIXC] == "Y" /* Yes*/
       || FF0EM005.FF7FRZFL[FF0EWIXC] == "N") /* or no*/

         /* NEXT SENTENCE*/

      else

        FFWREC.XXXMODID = "555"; /* Module identification*/
        set FF0EM005.FF7FRZFL[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed CURR DMD FCST field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF0EMFCD[FF0EWIXC] != FF0EW05.FF0EMFCD[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM005.FF0EMFCD[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRCDMFC[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "555"; /* Module identification*/
        set FF0EM005.FF0EMFCD[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "555"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "555"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E555

// Verify calculate request
Function FF0E556()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES48(); /* Check M005 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "556"; /* Module identification*/
    set FF0EM005.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "556"; /* Module identification*/
    set FF0EM005.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E556

// Process valid input request
Function FF0E560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM005.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM005.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM005.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end   tcs*/

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM005.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM005.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E564(); /* Process M005 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If calculate was requested, process calculate request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* Calculate requested*/
    FF0E565(); /* Process calculate request*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E560

// Process M005 changed fields
Function FF0E564()
   /* ------------------------------------------------------------*/
   /* If DMD YR IND was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM005.FF2DMIND != FF0EW05.FF2DMIND) /* Futr yr ind*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

    FF0ES49(); /* Process DMD YR IND change*/

  end

   /* ------------------------------------------------------------*/
   /* If CURR DMD FCST was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM005.FF0EMFCD[FF0EWIXC] != FF0EW05.FF0EMFCD[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months fcst*/

      FF0ES50(); /* Process CURR DMD FCST change*/

      FF0EW00.FF0EWPOS = FF0EW00.FF0EWCOL; /* Save the current col no*/
      while (FF0EW01.FF0EMMON[FF0EWPOS] > " ") /* more forecast month*/

        if ("  SUB" in FF0EW01.FF0EMMON from FF0EWPOS) /* Season subtotal*/

          FF0ES50(); /* Process CURR DMD FCST change*/

        end

        if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWPOS) /* accum total*/

          FF0ES50(); /* Process CURR DMD FCST change*/

        end

        FF0EW00.FF0EWPOS = sysVar.arrayIndex + 1; /* move to the next column*/

      end

      FF0ES35(); /* Calculations based on demand*/

      FF0ES30(); /* Adjust subsequent inventories*/

   /* FF0ES56;                      /* Calculate inventory turns*/

      FF0EW00.FF0EWPOS = FF0EW00.FF0EWCOL; /* Save the current col no*/
   /* WHILE FF0EW01.FF0EMMON(FF0EWPOS) > ' '; /* more forecast month*/
   /* ;*/
   /* IF '  SUB' IN FF0EW01.FF0EMMON(FF0EWPOS); /* Season subtotal*/
   /* ;*/
   /* FF0ES56;                    /* Calculate inventory turns*/
   /* ;*/
   /* END;*/
   /* ;*/
   /* IF 'ACCUM' IN FF0EW01.FF0EMMON(FF0EWPOS); /* accum total*/
   /* ;*/
   /* FF0ES56;                    /* Calculate inventory turns*/
   /* ;*/
   /* END;*/
   /* ;*/
   /* FF0EW00.FF0EWPOS = EZETST + 1;  /* move to the next column*/
   /* ;*/
   /* END;*/

      FF0ES47(); /* Calculate FCST PROP IDX*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If FRZ FL was changed, save the change in display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM005.FF7FRZFL[FF0EWIXC] != FF0EW05.FF7FRZFL[FF0EWCOL])

      FF0EW05.FF7FRZFL[FF0EWCOL] = FF0EM005.FF7FRZFL[FF0EWIXC];

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If FCST FILL RT was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM005.FF0EWFFR[FF0EWIXC] != FF0EW05.FF0EWFFR[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months fcst*/

      FF0ES51(); /* Process FCST FILL RT change*/

      FF0ES30(); /* Adjust subsequent inventories*/

   /* FF0ES56;                      /* Calculate inventory turns*/

      FF0EW00.FF0EWPOS = FF0EW00.FF0EWCOL; /* Save the current col no*/
   /* WHILE FF0EW01.FF0EMMON(FF0EWPOS) > ' '; /* more forecast month*/
   /* ;*/
   /* IF '  SUB' IN FF0EW01.FF0EMMON(FF0EWPOS); /* Season subtotal*/
   /* ;*/
   /* FF0ES56;                    /* Calculate inventory turns*/
   /* ;*/
   /* END;*/
   /* ;*/
   /* IF 'ACCUM' IN FF0EW01.FF0EMMON(FF0EWPOS); /* accum total*/
   /* ;*/
   /* FF0ES56;                    /* Calculate inventory turns*/
   /* ;*/
   /* END;*/
   /* ;*/
   /* FF0EW00.FF0EWPOS = EZETST + 1;  /* move to the next column*/
   /* ;*/
   /* END;*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


   /* ------------------------------------------------------------*/
   /* If CURR DMD  FCST was changed, check Sugg qtb switch     .*/
    /* - calculate new safety stock.*/
   /* ------------------------------------------------------------*/


  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* First buy mo*/

      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

      FF0ES60(); /* ======> adjust safety stock*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If END INVENTORY or SFTY STOCK changed, calculate SUGG BUY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    set FF0EW11 empty; /* Subroutine FF2920 parameters*/

    FF0EW11.FF0EWUSW = "N"; /* Sugg qtb update switch*/

    FF0ES21(); /* Calculate monthly variance*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/

    FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

  end


end // end FF0E564

// Process calculate request
Function FF0E565()
   /* ------------------------------------------------------------*/
   /* Initialize the CURR DMD FCST array with current quantities.*/
   /* ------------------------------------------------------------*/

  move FF0EW05.FFRCDMFC to FF0EW10.FFRCDMFC[1] for all; /* Curr dmd fcst*/

   /* ------------------------------------------------------------*/
   /* Recalculate CURR DMD FCST by season using REVD SEAS IDX.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWCOL = 2; /* First season begin*/

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Subtotal column*/

      FF0EW00.FF0EWNMO = 0;
      FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
       && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
       && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
        FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
        FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      end

    end

    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW00.FF0EWNMO; /* Season begin*/

    /* ------------------------------------------------------------*/
     /* Accumulate total frozen demand and frozen/unfrozen indices.*/
    /* ------------------------------------------------------------*/

    FF0EW00.FF0EWTFD = 0; /* Total frozen demand*/
    FF0EW00.FF0EWTFI = 0; /* Total frozen indices*/
    FF0EW00.FF0EWTUD = 0; /* Total unfrozen demand*/
    FF0EW00.FF0EWTUI = 0; /* Total unfrozen indices*/

    while (FF0EW00.FF0EWIXC < FF0EW00.FF0EWCOL) /* Until end of season*/

      if (FF0EW05.FF7FRZFL[FF0EWIXC] == "N") /* Month not frozen*/

        FF0EW00.FF0EWTUD = FF0EW00.FF0EWTUD + FF0EW05.FFRCDMFC[FF0EWIXC];
        FF0EW00.FF0EWTUI = FF0EW00.FF0EWTUI + FF0EW05.FF0EWRSI[FF0EWIXC];
      else
        FF0EW00.FF0EWTFD = FF0EW00.FF0EWTFD + FF0EW05.FFRCDMFC[FF0EWIXC];
        FF0EW00.FF0EWTFI = FF0EW00.FF0EWTFI + FF0EW05.FF0EWRSI[FF0EWIXC];

      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/

    end

    /* ------------------------------------------------------------*/
     /* Calc new total demand to be spread across unfrozen months.*/
    /* ------------------------------------------------------------*/

    if (FF0EW00.FF0EWTFI == 0) /* No frozen indices*/

      /* ========= Next Sentence ===========>*/

    else

      FF0EW00.FF0EWTUD = FF0EW00.FF0EWTFD / FF0EW00.FF0EWTFI;
       /* total frozen demand / total frozen percentage*/
    end

    /* ------------------------------------------------------------*/
     /* Calculate CURR DMD FCST for each month that is not frozen.*/
    /* ------------------------------------------------------------*/

    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW00.FF0EWNMO; /* Season begin*/

    while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/

      if (FF0EW05.FF7FRZFL[FF0EWIXC] == "N") /* Month not frozen*/

        if (FF0EW00.FF0EWTUI == 0) /* No unfrozen indices*/

          FFXREC.FFXNUMB = 0; /* Curr dmd fcst*/
        else
          if (FF0EW05.FF0EWRSI[FF0EWIXC] == 100)
            FFXREC.FFXNUMB = FF0EW00.FF0EWTUD;
          else
            FF0EW00.FF0EWPCT = FF0EW05.FF0EWRSI[FF0EWIXC] * 100;
            FFXREC.FFXNUMB = FF0EW00.FF0EWPCT * FF0EW00.FF0EWTUD / 100;
          end

        end

        XSFFS10(); /* Translate to thousands*/

        FF0EW10.FFRCDMFC[FF0EWIXC] = FFXREC.FFXROUND;

        /* determine new percentage based on new total demand*/
      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Next season begin*/

  end

   /* ------------------------------------------------------------*/
   /* If CURR DMD FCST was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current month*/
    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/
  end

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL; /* Column index*/

    if (FF0EW10.FFRCDMFC[FF0EWIXC] != FF0EW05.FFRCDMFC[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES50(); /* Process CURR DMD FCST change*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
        FF0ES50(); /* Process CURR DMD FCST change*/
      end

      if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWCOL) /* Accum total*/
        FF0ES50(); /* Process CURR DMD FCST change*/
      end

      FF0ES35(); /* Calculations based on demand*/

      FF0ES30(); /* Adjust subsequent inventories*/

      FF0ES47(); /* Calculate FCST PROP IDX*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end


   /* ------------------------------------------------------------*/
   /* If CURR DMD  FCST was changed, check Sugg qtb switch     .*/
    /* - calculate new safety stock.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* First buy mo*/

      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

      FF0ES60(); /* ======> adjust safety stock*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If END INVENTORY or SFTY STOCK changed, calculate SUGG BUY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y") /* Sugg qtb calculate switch*/

    set FF0EW11 empty; /* Subroutine FF2920 parameters*/

    FF0EW11.FF0EWUSW = "N"; /* Sugg qtb update switch*/

    FF0ES21(); /* Calculate monthly variance*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/

    FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate CURR DMD FCST was calculated using REV SEAS IDX.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "565"; /* Module identification*/
  FFWREC.XXXMSGNO = 222; /* Curr dmd fcst calculated*/


end // end FF0E565

// Display INVENTORY POSITION
Function FF0E600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E620(); /* Format and display the map*/

  FF0E630(); /* Check attention identifier*/

  FF0E640(); /* Reset fields to normal intensity*/

  FF0E650(); /* Verify the entered data*/

  FF0E660(); /* Process valid input request*/


end // end FF0E600

// Format and converse the map
Function FF0E620()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E621(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0E622(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM006.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM006.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM006 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM006.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM006.CAITEM; /* Application data*/


end // end FF0E620

// Format the display data
Function FF0E621()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM006 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM006.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/
  FF0EM006.FF0EWLRS = FF0EW00.FF0EWLRS; /* Left/right scroll amount*/

  FF0EM006.SY2FDSMO = FF0EW06.SY2FDSMO; /* First sales month*/
  FF0EM006.SY2PDCMO = FF0EW06.SY2PDCMO; /* Closeout month*/

  FF0EM006.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM006.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM006.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM006.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM006.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM006.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM006.FF0EWCMF = FF0EW06.FF0EWCMF; /* Comments flag*/

  FF0EM006.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the safety stock indicator in the SFTY STOCK line.*/
   /* ------------------------------------------------------------*/

  FF0EM006.SY2SSCIN = FF0EW06.SY2SSCIN; /* Sfty stk ind*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM006.SY2SSCIN normal; /* Sfty stk ind*/
    else
      set FF0EM006.SY2SSCIN skip; /* Sfty stk ind*/
    end
  else
    set FF0EM006.SY2SSCIN skip; /* Sfty stk ind*/

  end

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Beginning column*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWCOL <= FF0EW00.FF0EWEND /* Until end of columns*/
   && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

    set FF0EM006.FF0EMMON[FF0EWIXC] skip; /* Forecast month*/

    FF0EM006.FF0EMMON[FF0EWIXC] = FF0EW01.FF0EMMON[FF0EWCOL];
    FF0EM006.FF0EMCSF[FF0EWIXC] = FF0EW05.FF0EMCSF[FF0EWCOL];
    FF0EM006.FF0EMMSL[FF0EWIXC] = FF0EW05.FF0EMMSL[FF0EWCOL];
    FF0EM006.FF0EMINB[FF0EWIXC] = FF0EW06.FF0EMINB[FF0EWCOL];
    FF0EM006.FF0EMDUE[FF0EWIXC] = FF0EW06.FF0EMDUE[FF0EWCOL];
    FF0EM006.FF0EMQBY[FF0EWIXC] = FF0EW06.FF0EMQBY[FF0EWCOL];
    FF0EM006.FF0EMTBY[FF0EWIXC] = FF0EW06.FF0EMTBY[FF0EWCOL];
    FF0EM006.FF0EMBAL[FF0EWIXC] = FF0EW06.FF0EMBAL[FF0EWCOL];
    FF0EM006.FF0EMSTK[FF0EWIXC] = FF0EW06.FF0EMSTK[FF0EWCOL];
    FF0EM006.FF0EMSBY[FF0EWIXC] = FF0EW06.FF0EMSBY[FF0EWCOL];
    FF0EM006.FF0EMFCT[FF0EWIXC] = FF0EW06.FF0EMFCT[FF0EWCOL];
    /* MOVE FF0EW06.FF0EWTUR(FF0EWCOL) TO FF0EM006.FF0EWTUR(FF0EWIXC);*/
    FF0EM006.FF0EMDIR[FF0EWIXC] = FF0EW06.FF0EMDIR[FF0EWCOL];
    FF0EM006.FF0EMNIL[FF0EWIXC] = FF0EW06.FF0EMNIL[FF0EWCOL];
    FF0EM006.FF0EMRIN[FF0EWIXC] = FF0EW06.FF0EMRIN[FF0EWCOL];

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* or accum total*/

      set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
      set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/

    else

      FF0EM006.FF0EMSUP[FF0EWIXC] = FF0EW06.FF0EMSUP[FF0EWCOL];
      FF0EM006.FF0EMINE[FF0EWIXC] = FF0EW06.FF0EMINE[FF0EWCOL];

      if (FF0EW01.FF4FCTMO[FF0EWCOL] >= FF0EW01.FFQCURMO) /* Fcst mo GE curr*/

        if (FFWREC.XWSCD == "01" /* Current worksheet*/
         || FFWREC.XWSCD == "09") /* or work worksheet*/

          set FF0EM006.FF0EMINB[FF0EWIXC] skip; /* Beg inv*/
          set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
          if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
            set FF0EM006.FF0EMTBY[FF0EWIXC] normal; /* Tntv qtb*/
            set FF0EM006.FF0EMSTK[FF0EWIXC] normal; /* Sfty stk*/
          else
            set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/
            set FF0EM006.FF0EMSTK[FF0EWIXC] skip; /* Sfty stk*/
          end
        else
          set FF0EM006.FF0EMINB[FF0EWIXC] skip; /* Beg inv*/
          set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
          set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/
          set FF0EM006.FF0EMSTK[FF0EWIXC] skip; /* Sfty stk*/

        end

      end

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end


end // end FF0E621

// Check change authorization
Function FF0E622()
   /* ------------------------------------------------------------*/
   /* If a current or work worksheet, autoskip fields in columns*/
   /* prior to current, after closeout, subtotal and accum total.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* or end of data*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* or accum total*/

        set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
        set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/

      else

        if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQCURMO) /* Fcst GT curr*/

          set FF0EM006.FF0EMINB[FF0EWIXC] skip; /* Beg inv*/

        end

        if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW06.SY2PDCMO) /* Fcst GT close*/

          set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
          set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/
          set FF0EM006.FF0EMSTK[FF0EWIXC] skip; /* Sfty stk*/

        end

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end


end // end FF0E622

// Check attention identifier
Function FF0E630()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* submit FF297D*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM006.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't chg data send error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* submit FF297D*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM006"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E630

// Reset highlighted fields
Function FF0E640()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM006.FF0EWPAG initialAttributes; /* Page number*/
  set FF0EM006.FF0EWLRS initialAttributes; /* Left/right scroll amount*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      set FF0EM006.SY2SSCIN normal; /* Safety stock class indicator*/
    else
      set FF0EM006.SY2SSCIN skip; /* Safety stock class indicator*/
    end
    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8 /* Until end of columns*/
     && FF0EM006.FF0EMMON[FF0EWIXC] > " ") /* or end of data*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM" /* or accum total*/
       || FF0EW01.FF4FCTMO[FF0EWCOL] < FF0EW01.FFQCURMO)

         /* NEXT SENTENCE*/

      else

        if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
          set FF0EM006.FF0EMINB[FF0EWIXC] normal; /* Beg inv*/
          set FF0EM006.FF0EMDUE[FF0EWIXC] normal; /* Prod due*/
          set FF0EM006.FF0EMTBY[FF0EWIXC] normal; /* Tntv qtb*/
          set FF0EM006.FF0EMSTK[FF0EWIXC] normal; /* Sfty stk*/
        else
          set FF0EM006.FF0EMINB[FF0EWIXC] skip; /* Beg inv*/
          set FF0EM006.FF0EMDUE[FF0EWIXC] skip; /* Prod due*/
          set FF0EM006.FF0EMTBY[FF0EWIXC] skip; /* Tntv qtb*/
          set FF0EM006.FF0EMSTK[FF0EWIXC] skip; /* Sfty stk*/
        end

      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

    end

  end

  set FF0EM006.CATOAP initialAttributes; /* TO application*/
  set FF0EM006.CAITEM initialAttributes; /* Application data*/


end // end FF0E640

// Verify the entered data
Function FF0E650()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "650"; /* Module identification*/
    set FF0EM006.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E651(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0E652(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E653(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E654(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E655(); /* Verify M006 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E650

// Verify page request
Function FF0E651()
   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES52(); /* Check M006 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FF0EM006.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM006.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FF0EM006.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E651

// Verify scroll request
Function FF0E652()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0EW00.FF0EWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FF0EW00.FF0EWBEG == FF0EW00.FF0EWMAX) /* and at maximum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(24); /* Unable to scroll right*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES52(); /* Check M006 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the scroll amount is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWLRS < 1) /* Scroll amount LT minimum*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FF0EM006.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(197); /* Amount missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FF0EM006.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E652

// Verify save worksheet request
Function FF0E653()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES52(); /* Check M006 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FF0EM006.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FF0EM006.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E653

// Verify print request
Function FF0E654()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES52(); /* Check M006 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FF0EM006.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FF0EM006.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E654

// Verify M006 changed fields
Function FF0E655()
   /* ------------------------------------------------------------*/
   /* Verify any changed SFTY STK field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMSTK[FF0EWIXC] != FF0EW06.FF0EMSTK[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM006.FF0EMSTK[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        if (FF0EM006.SY2SSCIN == FF0EW06.SY2SSCIN) /* Sfty stk cls*/

          FF0EW10.FF6SFSTK[FF0EWIXC] = FFXREC.FFXNUMB;

        else

          FFWREC.XXXMODID = "655"; /* Module identification*/
          set FF0EM006.FF0EMSTK[FF0EWIXC] cursor, bold; /* Highlight*/
          converseLib.validationFailed(215); /* Cannot change cls and qty*/

        end

      else

        FFWREC.XXXMODID = "655"; /* Module identification*/
        set FF0EM006.FF0EMSTK[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify a changed SFTY STK CLS field.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.SY2SSCIN != FF0EW06.SY2SSCIN) /* Sfty stk cls*/

    if (FF0EM006.SY2SSCIN == "A" /* Class A*/
     || FF0EM006.SY2SSCIN == "B" /* or class B*/
     || FF0EM006.SY2SSCIN == "C" /* or class C*/
     || FF0EM006.SY2SSCIN == "D") /* or class D*/

       /* NEXT SENTENCE*/

    else

      FFWREC.XXXMODID = "655"; /* Module identification*/
      set FF0EM006.SY2SSCIN cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Data missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed TNTV QTB field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMTBY[FF0EWIXC] != FF0EW06.FF0EMTBY[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM006.FF0EMTBY[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0") /* Normal return*/

        FF0EW10.FFRTENBY[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "655"; /* Module identification*/
        set FF0EM006.FF0EMTBY[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed PRDCTN DUE field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMDUE[FF0EWIXC] != FF0EW06.FF0EMDUE[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM006.FF0EMDUE[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FFRPRDDU[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "655"; /* Module identification*/
        set FF0EM006.FF0EMDUE[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any changed BEG INV field.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMINB[FF0EWIXC] != FF0EW06.FF0EMINB[FF0EWEND])

      FFXREC.FFXCHAR = FF0EM006.FF0EMINB[FF0EWIXC];

      XSFFS11(); /* Verify and translate*/

      if (FFXREC.FFXRTNCD == "0" /* Normal return*/
       && FFXREC.FFXNUMB >= 0)   /* and number GE zero*/

        FF0EW10.FF6BEINV[FF0EWIXC] = FFXREC.FFXNUMB;

      else

        FFWREC.XXXMODID = "655"; /* Module identification*/
        set FF0EM006.FF0EMINB[FF0EWIXC] cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Data missing or invalid*/

      end

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWLRS != FF0EW00.FF0EWLRS) /* Left/right scroll changed*/

    FFWREC.XXXMODID = "655"; /* Module identification*/
    set FF0EM006.FF0EWLRS cursor, bold; /* Highlight*/
    converseLib.validationFailed(221); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "655"; /* Module identification*/
    set FF0EM006.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E655

// Process valid input request
Function FF0E660()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM006.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM006.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM006.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0EW00.FF0EWLRS = FF0EM006.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG - FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG < 1) /* Beginning LT minimum*/

      FF0EW00.FF0EWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0EW00.FF0EWLRS = FF0EM006.FF0EWLRS; /* Scroll amount*/

    FF0EW00.FF0EWBEG = FF0EW00.FF0EWBEG + FF0EW00.FF0EWLRS;

    if (FF0EW00.FF0EWBEG > FF0EW00.FF0EWMAX) /* Beginning GT maximum*/

      FF0EW00.FF0EWBEG = FF0EW00.FF0EWMAX; /* Default to maximum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 199; /* Last column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E664(); /* Process M006 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E660

// Process M006 changed fields
Function FF0E664()
   /* ------------------------------------------------------------*/
   /* If SFTY STK CLS was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  if (FF0EM006.SY2SSCIN != FF0EW06.SY2SSCIN) /* Sfty stk cls*/

    FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
    FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

    FF0ES53(); /* Process SFTY STK CLS change*/

  else

    /* ------------------------------------------------------------*/
     /* If SFTY STK was changed, calculate associated fields.*/
    /* ------------------------------------------------------------*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/
    FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

    while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

      if (FF0EM006.FF0EMSTK[FF0EWIXC] != FF0EW06.FF0EMSTK[FF0EWCOL]
       && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
       && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

        FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
        FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

        VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

        FF0ES10(); /* Sum next three months forecast*/

        if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

          FF0ES54(); /* Process SFTY STK change*/

   /* FF0ES56;                 /* Calculate inventory turns*/

        end

        while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* accum total*/
          if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/

            FF0ES54(); /* Process SFTY STK change*/

   /* FF0ES56;               /* Calculate inventory turns*/

          end
          sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/

        end

        sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

        FF0ES54(); /* Process SFTY STK change*/

   /* FF0ES56;                   /* Calculate inventory turns*/

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If BEG INV was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM006.FF0EMINB[FF0EWIXC] != FF0EW06.FF0EMINB[FF0EWCOL]
     && FF0EW01.FF4FCTMO[FF0EWCOL] == FF0EW01.FFQCURMO) /* and curr mo*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months forecast*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

        FF0ES55(); /* Process BEG INV change*/

   /* FF0ES56;                   /* Calculate inventory turns*/

      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* accum total*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/

          FF0ES55(); /* Process BEG INV change*/

   /* FF0ES56;                 /* Calculate inventory turns*/

        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/

      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES55(); /* Process BEG INV change*/

   /* FF0ES56;                     /* Calculate inventory turns*/

      FF0ES30(); /* Adjust subsequent inventories*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If PRDCTN DUE was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM006.FF0EMDUE[FF0EWIXC] != FF0EW06.FF0EMDUE[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months forecast*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

        FF0ES57(); /* Process PRDCTN DUE change*/

   /* FF0ES56;                   /* Calculate inventory turns*/

      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* accum total*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/

          FF0ES57(); /* Process PRDCTN DUE change*/

   /* FF0ES56;                 /* Calculate inventory turns*/

        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/

      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES57(); /* Process PRDCTN DUE change*/

   /* FF0ES56;                     /* Calculate inventory turns*/

      FF0ES30(); /* Adjust subsequent inventories*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If TNTV QTB was changed, calculate associated fields.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/
  FF0EW00.FF0EWCOL = FF0EW00.FF0EWBEG; /* Current column*/

  while (FF0EW00.FF0EWIXC <= 8) /* Until end of columns*/

    if (FF0EM006.FF0EMTBY[FF0EWIXC] != FF0EW06.FF0EMTBY[FF0EWCOL]
     && FF0EW01.FF0EMMON[FF0EWCOL] != "  SUB" /* and not subtotal*/
     && FF0EW01.FF0EMMON[FF0EWCOL] != "ACCUM") /* and not accum total*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW01.FF0EWQTB = "Y"; /* Sugg qtb calculate switch*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES10(); /* Sum next three months forecast*/

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

        FF0ES58(); /* Process TNTV QTB change*/

   /* FF0ES56;                   /* Calculate inventory turns*/

      end

      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* accum total*/
        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/

          FF0ES58(); /* Process TNTV QTB change*/

   /* FF0ES56;                 /* Calculate inventory turns*/

        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Current column*/

      end

      sysVar.arrayIndex = FF0EW00.FF0EWCOL; /* Current column*/

      FF0ES58(); /* Process TNTV QTB change*/

   /* FF0ES56;                     /* Calculate inventory turns*/

      FF0ES30(); /* Adjust subsequent inventories*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

  end

   /* ------------------------------------------------------------*/
   /* If END INVENTORY or SFTY STOCK changed, calculate SUGG BUY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EWQTB == "Y" /* Sugg qtb calculate switch*/
   && FF0EW00.FF0EWSFS == "Y") /* and style not closed out*/

    set FF0EW11 empty; /* Subroutine FF2920 parameters*/

    FF0EW11.FF0EWUSW = "N"; /* Sugg qtb update switch*/

    FF0ES21(); /* Calculate monthly variance*/

    FF0ES22(); /* Calculate the suggested buy*/

    FF0ES23(); /* Process SUGG BUY change*/

    FF0EW01.FF0EWQTB = "N"; /* Sugg qtb calculate switch*/

  end


end // end FF0E664

// Display FORECAST COMMENTS
Function FF0E700()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E720(); /* Format and display the map*/

  FF0E730(); /* Check attention identifier*/

  FF0E740(); /* Reset fields to normal intensity*/

  FF0E750(); /* Verify the entered data*/

  FF0E760(); /* Process valid input request*/


end // end FF0E700

// Format and converse the map
Function FF0E720()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E721(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM007.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM007.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM007.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM007.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM007 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM007.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM007.CAITEM; /* Application data*/


end // end FF0E720

// Format the display data
Function FF0E721()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM007 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM007.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/

  FF0EM007.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM007.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM007.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM007.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM007.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM007.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM007.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM007.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM007.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM007.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM007.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM007.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM007.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each line from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXL = 1; /* Line index*/

  while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

    FF0EM007.FFPCOMNT[FF0EWIXL] = FF0EW07.FFPCOMNT[FF0EWIXL];

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FF0EM007.FFPCOMNT[FF0EWIXL] normal; /* Comment text*/
      else
        set FF0EM007.FFPCOMNT[FF0EWIXL] skip; /* Comment text*/
      end
    else
      set FF0EM007.FFPCOMNT[FF0EWIXL] skip; /* Comment text*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

  end


end // end FF0E721

// Check attention identifier
Function FF0E730()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* Submit FF297d*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM007.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "730"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't change data sent error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "730"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* Submit FF297d*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM007"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "730"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E730

// Reset highlighted fields
Function FF0E740()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM007.FF0EWPAG initialAttributes; /* Page number*/

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/

    FF0EW00.FF0EWIXL = 1; /* Line index*/

    while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        set FF0EM007.FFPCOMNT[FF0EWIXL] normal; /* Comment text*/
      else
        set FF0EM007.FFPCOMNT[FF0EWIXL] skip; /* Comment text*/
      end

      FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

    end

  end

  set FF0EM007.CATOAP initialAttributes; /* TO application*/
  set FF0EM007.CAITEM initialAttributes; /* Application data*/


end // end FF0E740

// Verify the entered data
Function FF0E750()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "750"; /* Module identification*/
    set FF0EM007.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E751(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E753(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E754(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E755(); /* Verify M007 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E750

// Verify page request
Function FF0E751()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0ES59(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM007.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "751"; /* Module identification*/
    set FF0EM007.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E751

// Verify save worksheet request
Function FF0E753()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "753"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "753"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES59(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "753"; /* Module identification*/
    set FF0EM007.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E753

// Verify print request
Function FF0E754()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "754"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES59(); /* Check M007 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "754"; /* Module identification*/
    set FF0EM007.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E754

// Verify M007 changed fields
Function FF0E755()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM007.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "755"; /* Module identification*/
    set FF0EM007.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E755

// Process valid input request
Function FF0E760()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM007.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM007.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0EW00.FF0EWPAD = +1; /* Page direction*/

    if (FF0EM007.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM007.FF0EWPAG; /* Page number*/

    else

      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0E161(); /* Format/insert work worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0E162(); /* Format/insert master worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E764(); /* Process M007 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/

end // end FF0E760

// Process M007 changed fields
Function FF0E764()
   /* ------------------------------------------------------------*/
   /* Save any changed comment lines in the map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXL = 1; /* Line index*/

  while (FF0EW00.FF0EWIXL <= 11) /* Until end of lines*/

    if (FF0EM007.FFPCOMNT[FF0EWIXL] != FF0EW07.FFPCOMNT[FF0EWIXL])

      FF0EW07.FFPCOMNT[FF0EWIXL] = FF0EM007.FFPCOMNT[FF0EWIXL];

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

  end

   /* ------------------------------------------------------------*/
   /* Update comments flag to indicate whether comments exist.*/
   /* ------------------------------------------------------------*/

  if (FF0EW07.FF0EWCMT == " ") /* No comments exist*/

    FF0EW06.FF0EWCMF = "N"; /* Comments flag*/
  else
    FF0EW06.FF0EWCMF = "Y"; /* Comments flag*/

  end


end // end FF0E764

// Display PROD ACTIVITY COMMENTS
Function FF0E800()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0E820(); /* Format and display the map*/

  FF0E830(); /* Check attention identifier*/

  FF0E840(); /* Reset fields to normal intensity*/

  FF0E850(); /* Verify the entered data*/

  FF0E860(); /* Process valid input request*/


end // end FF0E800

// Format and Converse the map
Function FF0E820()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0EW00.FF0EWSWF == "Y") /* Map must be formatted*/
      FF0E821(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0EM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0EM008.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0EM008.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0EM008.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0EM008.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0EM008 alarm; /* Indicate sound alarm*/

  end

  converse FF0EM008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0EM008.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0EM008.CAITEM; /* Application data*/


end // end FF0E820

// Format the display data
Function FF0E821()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0EM008 initial; /* M001 input/output area*/

  FF0EW00.FF0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0EM008.FF0EWPAG = FF0EW00.FF0EWPAG; /* Page number*/

  FF0EM008.FF0EMPAG = FF0EW00.XXXTSPAG; /* Comment page nbr*/

  if (FF0EW00.TA5TSQIX < FF0EW00.XXXTSPAG) /* tot page no < curr page no*/
    FF0EM008.FF0EMTPG = FF0EW00.XXXTSPAG; /* Use crrnt page as top*/
  else
    FF0EM008.FF0EMTPG = FF0EW00.TA5TSQIX; /* Tot page nbr for cmnt*/
  end

  FF0EM008.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0EM008.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0EM008.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0EM008.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0EM008.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0EM008.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0EM008.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0EM008.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EM008.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EM008.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FF0EM008.SY1SSTNM = FFWREC.SY1SSTNM; /* Short style name*/
  FF0EM008.SY2CLRAB = FFWREC.SY2CLRAB; /* Color abbreviation*/

  FF0EM008.FFQDMDDT = FF0EW01.FFQDMDDT; /* Demand as of date*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each line from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EMPAG <= FF0EW00.TA5TSQIX) /* Map page no <= tot pge no*/
    FF0ES67(); /* Read TSQ page*/
  end

  FF0EW00.FF0EWIXL = 1; /* Comment index*/

  while (FF0EW00.FF0EWIXL <= 13)

    FF0EM008.FF0EMDTE[FF0EWIXL] = FF0EW15.FF0EWDTE[FF0EWIXL];
    FF0EM008.FF0EMNTE[FF0EWIXL] = FF0EW15.FF0EWNTE[FF0EWIXL];
    FF0EM008.FF0EMUSR[FF0EWIXL] = FF0EW15.FF0EWUSR[FF0EWIXL];

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        if (FF0EW00.XXXTSPAG < FF0EW00.FF0EW-LST-PAG) /* Page from DB2*/
          set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Proctect the text*/
        else
          if (FF0EW00.XXXTSPAG == FF0EW00.FF0EW-LST-PAG /* Last page in DB2*/
           && FF0EW00.FF0EWIXL <= FF0EW00.FF0EW-LST-ROW) /* Last row in DB2*/
            set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Proctect the text*/
                                                    /* from VSWCMT01*/
          else
            set FF0EM008.FF0EMNTE[FF0EWIXL] normal; /* Comment text*/
          end
        end
      else
        set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Comment text*/
      end
    else
      set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Comment text*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1;

  end

end // end FF0E821

// Check attention identifier
Function FF0E830()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        FF0E123(); /* Submit FF297d*/
      end
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      XSFFS01(); /* Exit to another application*/

      set FF0EM008.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "830"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF13, 14, or 15 and user can't change data sent error*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* If PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14*/
   || converseVar.eventKey is pf15) /* or PF15*/
    if (COMMAREA.CACHGFL == "N") /* If user can't chg data*/
      FFWREC.XXXMODID = "830"; /* Module identification*/
      converseLib.validationFailed(403); /* Invalid key for user*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
      FF0E123(); /* Submit FF297d*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0B"; /* Return to application*/
      COMMAREA.CAITEM = "FF0EM008"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      FFWREC.FFQMBYMO = 0; /* Clear actl from main*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf7)  /* and PF7 was not pressed*/
    /* end   tcs*/

    FFWREC.XXXMODID = "830"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0E830

// Reset Hightlighted fields
Function FF0E840()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0EM008.FF0EWPAG initialAttributes; /* Page number*/

  FF0EW00.FF0EWIXL = 1; /* Line index*/

  while (FF0EW00.FF0EWIXL <= 13) /* Until end of lines*/

    if (FFWREC.XWSCD == "01" /* Current worksheet*/
     || FFWREC.XWSCD == "09") /* or work worksheet*/

      if (COMMAREA.CACHGFL == "Y") /* If user can chg data*/
        if (FF0EW00.XXXTSPAG < FF0EW00.FF0EW-LST-PAG) /* Page from DB2*/
          set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Proctect the text*/
        else
          if (FF0EW00.XXXTSPAG == FF0EW00.FF0EW-LST-PAG /* Last page in DB2*/
           && FF0EW00.FF0EWIXL <= FF0EW00.FF0EW-LST-ROW) /* Last row in DB2*/
            set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Proctect the text*/
                                                    /* from VSWCMT01*/
          else
            set FF0EM008.FF0EMNTE[FF0EWIXL] normal; /* Comment text*/
          end
        end
      else
        set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Comment text*/
      end
    else
      set FF0EM008.FF0EMNTE[FF0EWIXL] skip; /* Comment text*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

  end

  set FF0EM008.CATOAP initialAttributes; /* TO application*/
  set FF0EM008.CAITEM initialAttributes; /* Application data*/


end // end FF0E840

// Verify the entered data
Function FF0E850()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "850"; /* Module identification*/
    set FF0EM008.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8 /* Page request*/
   || converseVar.eventKey is pf7)
    /* end tcs*/
    FF0E851(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll backward*/
   || converseVar.eventKey is pf11) /* or scroll foreward*/
    FF0E852(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to save was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   || converseVar.eventKey is pf14) /* or save as master worksheet*/

    FF0E853(); /* Verify save worksheet request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0E854(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0E855(); /* Verify m008 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0E850

// Verify page request
Function FF0E851()
   /* begin tcs*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll back request*/
   && FF0EM001.FF0EWPAG > 7)      /* and last page*/
    FFWREC.XXXMODID = "851"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

   /* end tcs*/
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0ES68(); /* Check M008 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EWPAG < 1 /* Less than minimum*/
   || FF0EM008.FF0EWPAG > 8) /* or greater than maximum*/

    FFWREC.XXXMODID = "851"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0E851

// Verify scrolling request
Function FF0E852()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0ES68(); /* Check M008 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scrolling back*/
   && FF0EW00.XXXTSPAG == 1)       /* Less than minimum*/

    FFWREC.XXXMODID = "852"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(006); /* Invalid page number*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "852"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(247); /* Modifications not allowed*/

  end

end // end FF0E852

// Verify save worksheet request
Function FF0E853()
   /* ------------------------------------------------------------*/
   /* If not a current or work worksheet, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XWSCD != "01" /* Not current worksheet*/
   && FFWREC.XWSCD != "09") /* and not work worksheet*/

    FFWREC.XXXMODID = "853"; /* Module identification*/
    converseLib.validationFailed(204); /* Cannot save worksheet*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If work worksheet and no change made, indicate cannot save.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* Save as work worksheet*/
   && FFWREC.XWSCD == "09"         /* and work worksheet*/
   && FF0EW01.FFWMODSW == "N")     /* and no changes made*/

    FFWREC.XXXMODID = "853"; /* Module identification*/
    converseLib.validationFailed(205); /* No changes have been made*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES68(); /* Check M008 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "853"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

   /* ------------------------------------------------------------*/
   /* Check zz family to see if displayed worksheet changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && FFWREC.XWSCD == "01")
    FF0ES70(); /* Check zz family*/
  end


end // end FF0E853

// Verify print request
Function FF0E854()
   /* ------------------------------------------------------------*/
   /* If worksheet was modified, indicate must be saved to print.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFWMODSW == "Y") /* Modified data exit switch*/

    FFWREC.XXXMODID = "854"; /* Module identification*/
    converseLib.validationFailed(212); /* Worksheet must be saved*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether any of the data fields were changed.*/
   /* ------------------------------------------------------------*/

  FF0ES68(); /* Check M008 fields for changes*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "854"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E854

// Verify M008 changed fields
Function FF0E855()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM008.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "855"; /* Module identification*/
    set FF0EM008.FF0EWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0E855

// Process valid input request
Function FF0E860()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWSWF = "Y"; /* Format the map switch*/

   /* begin tcs*/
  if (converseVar.eventKey is pf8  /* Page requested*/
   || converseVar.eventKey is pf7  
   || converseVar.eventKey is pf10 /* Scroll backward*/
   || converseVar.eventKey is pf11) /* Scroll forward*/
    set FF0EW15 empty; /* Clear M008 display storage*/
  end
   /* end   tcs*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (converseVar.eventKey is pf7) /* Page requested*/
    /* end   tcs*/

    FF0EW00.XXXTSPAG = 1; /* Reset current comment page*/

    FF0EW00.FF0EWPAD = -1; /* Page direction*/

    if (FF0EM008.FF0EWPAG != FF0EW00.FF0EWPAG) /* Page specified*/

      FF0EW00.FF0EWPAG = FF0EM008.FF0EWPAG; /* Page number*/
    else
      FF0EW00.FF0EWPAG = FF0EW00.FF0EWPAG + FF0EW00.FF0EWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If PF10 or PF11, Bring up the requested page and save the*/
   /* current page if any comment changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll backward*/

    FF0EW00.XXXTSPAG = FF0EW00.XXXTSPAG - 1; /* Decrease page nbr*/

  end

  if (converseVar.eventKey is pf11) /* Scroll forward*/

    FF0EW00.XXXTSPAG = FF0EW00.XXXTSPAG + 1; /* Increase page nbr*/

  end

   /* ------------------------------------------------------------*/
   /* If save as work worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Save as work worksheet*/

    FF0EW00.FF0EWPGN = FF0EW00.XXXTSPAG; /* Save current page no*/
    FF0E161(); /* Format/insert work worksheet*/
    FF0EW00.XXXTSPAG = FF0EW00.FF0EWPGN; /* Restore current page no*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If save as master worksheet, format and insert worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Save as master worksheet*/

    FF0EW00.FF0EWPGN = FF0EW00.XXXTSPAG; /* Save current page no*/
    FF0E162(); /* Format/insert master worksheet*/
    FF0EW00.XXXTSPAG = FF0EW00.FF0EWPGN; /* Restore current page no*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0E163(); /* Submit print request*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, process any changed field.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    FF0E864(); /* Process m008 changed fields*/

  end

   /* ------------------------------------------------------------*/
   /* Update modified data exit switch from modified data switch.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = FF0EW01.FFWMODSW; /* Modified data exit switch*/


end // end FF0E860

// Process M008 changed fields
Function FF0E864()
   /* ------------------------------------------------------------*/
   /* Save any changed comment lines in the map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXL = 1; /* Line index*/
  FF0EW00.FF0EW-CMT-CHNG = "N"; /* Reset comment changed switch*/

  while (FF0EW00.FF0EWIXL <= 13) /* Until end of lines*/

    if (FF0EM008.FF0EMNTE[FF0EWIXL] != FF0EW15.FF0EWNTE[FF0EWIXL])

      FF0EW00.FF0EW-CMT-MM = XX0XW01.XX0XWMM; /* Month*/
      FF0EW00.FF0EW-CMT-DD = XX0XW01.XX0XWDD; /* Day*/
      FF0EW00.FF0EW-CMT-YY = XX0XW01.XX0XWYY; /* Year*/
      FF0EW00.FF0EW-CMT-DASH1 = "-";
      FF0EW00.FF0EW-CMT-DASH2 = "-";

    /* -------------------------------------------------------------*/
     /* Check the previous row to see if the date or userid is*/
     /* different. If any difference default the date and userid.*/
    /* -------------------------------------------------------------*/

      FF0EW00.FF0EWIXT = FF0EW00.FF0EWIXL - 1;
      if (FF0EW00.FF0EWIXT > 0) /* not the 1st row*/
        if (FF0EW00.FF0EW-CMT-DATE != FF0EW00.FF0EW-LST-PRCSS-DT /* Diff date*/
         || COMMAREA.CAUSERID != FF0EW00.FF0EW-LST-PRCSS-USR)    /* Diff user*/
          FF0EW15.FF0EWDTE[FF0EWIXL] = FF0EW00.FF0EW-CMT-DATE; /* date*/
          FF0EW00.FF0EW-LST-PRCSS-DT = FF0EW00.FF0EW-CMT-DATE;
          FF0EW15.FF0EWUSR[FF0EWIXL] = COMMAREA.CAUSERID; /* usrid*/
          FF0EW00.FF0EW-LST-PRCSS-USR = COMMAREA.CAUSERID;
        end
      else
        FF0EW15.FF0EWDTE[FF0EWIXL] = FF0EW00.FF0EW-CMT-DATE; /* date*/
        FF0EW00.FF0EW-LST-PRCSS-DT = FF0EW00.FF0EW-CMT-DATE;
        FF0EW15.FF0EWUSR[FF0EWIXL] = COMMAREA.CAUSERID; /* usrid*/
        FF0EW00.FF0EW-LST-PRCSS-USR = COMMAREA.CAUSERID;
      end

      FF0EW15.FF0EWNTE[FF0EWIXL] = FF0EM008.FF0EMNTE[FF0EWIXL]; /* comnt*/

      FF0EW01.FFWMODSW = "Y"; /* Modified data switch*/
      FF0EW00.FF0EW-CMT-CHNG = "Y"; /* Comment changed switch*/

    end
    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

  end

  if (FF0EW00.FF0EW-CMT-CHNG == "Y") /* Data has been changed*/

    if (FF0EW00.XXXTSPAG <= FF0EW00.TA5TSQIX) /* Existing page*/
      FF0ES69(); /* Update TSQ page*/
    else
      FF0ES66(); /* Insert TSQ page*/
    end
    FF0EW00.FF0EW-CMT-CHNG = "N"; /* Reset comment changed switch*/

  end
end // end FF0E864

// Open worksheet item cursor
Function FF0ES01()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VSWITM02 empty; /* Clear row storage area*/

  VSWITM02.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
  FFFREC.FFFENDMO = +999999999; /* Ending month*/

  try
    call "VSWITM02" (FFFREC, SQLCA, VSWITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Sel tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET ITEM CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSWITM02.VSWITM02KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES01

// Fetch next worksheet item
Function FF0ES02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSWITM02" ("N1", SQLCA, VSWITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0EW00.FF0EWSWI = "Y"; /* Item cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET ITEM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSWITM02.VSWITM02KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES02

// Sum domestic forecast month
Function FF0ES03()
   /* ------------------------------------------------------------*/
   /* Select the row from the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.YSMXDV = "10"; /* Division group code*/
  FF9REC.XCTCD = "USA"; /* Foreign country code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FF9REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC FORECAST MONTH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES03

// Sum NIL production forecast
Function FF0ES04()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.YSMXDV = "20"; /* Division group code*/
  FF9REC.XCTCD = "*"; /* Foreign country code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL FORECAST MONTH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES04

// Sum invoice/order quantities
Function FF0ES05()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES05"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* before 199206 use actual futr*/

    FF0EW00.FF0EWHIN = FH3REC.FH2SHP; /* Invoiced qty*/

    FF0EW00.FF0EWHOR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Ordered qty*/
    FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH1ALQTY;
    FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH3CNCL;
  else

    FF0EW00.FF0EWHIN = FH3REC.FH2SHP; /* Invoiced qty*/
    FF0EW00.FF0EWHOR = FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-CNCL-QTY; /* Ordered qty*/

  end

  if (FF0EW00.FF0EWCOL > 1)
    FF0EW08.FF0EWHIN = FF0EW08.FF0EWHIN + FF0EW00.FF0EWHIN; /* Sub tot*/
    FF0EW09.FF0EWHIN = FF0EW09.FF0EWHIN + FF0EW00.FF0EWHIN; /* Accum tot*/
    FF0EW08.FF0EWHOR = FF0EW08.FF0EWHOR + FF0EW00.FF0EWHOR; /* Sub tot*/
    FF0EW09.FF0EWHOR = FF0EW09.FF0EWHOR + FF0EW00.FF0EWHOR; /* Accum tot*/
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES05"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWHIN = FF0EW00.FF0EWHIN + FH3REC.FH2SHP; /* Invoiced qty*/

  FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH2SHP; /* Ordered qty*/
  FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH1PAQTY;
  FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH1ALQTY;
  FF0EW00.FF0EWHOR = FF0EW00.FF0EWHOR + FH3REC.FH3CNCL;

  if (FF0EW00.FF0EWCOL > 1)
    FF0EW08.FF0EWHIN = FF0EW08.FF0EWHIN + FH3REC.FH2SHP; /* Sub tot*/
    FF0EW09.FF0EWHIN = FF0EW09.FF0EWHIN + FH3REC.FH2SHP; /* Accum tot*/
    FF0EW08.FF0EWHOR = FF0EW08.FF0EWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
    FF0EW09.FF0EWHOR = FF0EW09.FF0EWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY     + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
  end

end // end FF0ES05

// Sum one year ago history
Function FF0ES06()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/
  set FFDREC empty; /* select user created indexes in case selected*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FFDREC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FFDREC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FFDREC.FF4FCTMO = VSWITM02.FF4FCTMO; /* col month*/
  FFDREC.FFABEGMO = FF0EW01.FFABEGMO[1]; /* begin month*/
  FFDREC.FFAENDMO = FFDREC.FFABEGMO + 99; /* worksheet end month*/

  FF0ES65(); /* select vrcmth01*/
  FF0EW04.FF0EWUHF[FF0EWCOL] = FFDREC.FFDFDPCT; /* user created fut %*/
  FF0EW04.FF0EWUHI[FF0EWCOL] = FFDREC.FFDPDPCT;
                                   /* user created prop %*/
  FF0EW05.FF0EWUSI[FF0EWCOL] = FFDREC.FFDDMPCT; /* user created demand %*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES06"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FF0EW00.FF0EWHFU = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist futr qty*/
    FF0EW00.FF0EWHFU = FF0EW00.FF0EWHFU + FH3REC.FH1ALQTY;
    FF0EW00.FF0EWHFU = FF0EW00.FF0EWHFU + FH3REC.FH3CNCL;
  else
    FF0EW00.FF0EWHFU = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY; /* Hist futr qty*/
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES06"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWHPR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist prop qty*/
  FF0EW00.FF0EWHPR = FF0EW00.FF0EWHPR + FH3REC.FH1ALQTY;
  FF0EW00.FF0EWHPR = FF0EW00.FF0EWHPR + FH3REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand and combined quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWHDM = FF0EW00.FF0EWHFU + FF0EW00.FF0EWHPR;
                                   /* Hist demand qty*/

  FF0EW00.FF0EWHCF = FF0EW00.FF0EWHDM; /* Hist combined qty*/


end // end FF0ES06

// Sum two years ago history
Function FF0ES07()
   /* ------------------------------------------------------------*/
   /* Sum two years ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES07"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate futures for the product.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF2FUIND == "2") /* Two years futures indicated*/

    if (FFFREC.FFFBEGMO < 199206) /* before 199206 use actual future*/
      FF0EW00.FF0EWHFU = FH3REC.FH2SHP; /* Hist futr qty*/
      FF0EW00.FF0EWHCF = FH3REC.FH2SHP; /* Hist combined qty*/

      FF0EW00.FF0EWHFU = FF0EW00.FF0EWHFU + FH3REC.FH1PAQTY;
      FF0EW00.FF0EWHFU = FF0EW00.FF0EWHFU + FH3REC.FH1ALQTY;
      FF0EW00.FF0EWHFU = FF0EW00.FF0EWHFU + FH3REC.FH3CNCL;

      FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH1PAQTY;
      FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH1ALQTY;
      FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH3CNCL;
    else

      FF0EW00.FF0EWHFU = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY; /* Hist futr qty*/

      FF0EW00.FF0EWHCF = FF0EW00.FF0EWHFU; /* Hist combined qty*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF2DMIND == "2") /* Two years demand indicated*/

    if (FFFREC.FFFBEGMO < 199206) /* before 199206 use actual future*/

      FF0EW00.FF0EWHDM = FH3REC.FH2SHP; /* Hist futr qty*/

      FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH1PAQTY;
      FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH1ALQTY;
      FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH3CNCL;
    else
      FF0EW00.FF0EWHDM = FH3REC.FH-FRZ-PRAL-QTY +                         FH3REC.FH-FRZ-ALOC-QTY +                         FH3REC.FH-FRZ-SHP-QTY +                         FH3REC.FH-FRZ-CNCL-QTY; /* Hist futr qty*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Sum two years ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 200; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES05"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate historical combined based on futures indicator.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF2FUIND == "2") /* Two years futures indicated*/

    FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH2SHP;
    FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH1PAQTY;
    FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH1ALQTY;
    FF0EW00.FF0EWHCF = FF0EW00.FF0EWHCF + FH3REC.FH3CNCL;

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF2PRIND == "2") /* Two years prop indicated*/

    FF0EW00.FF0EWHPR = FH3REC.FH2SHP; /* Hist prop qty*/

    FF0EW00.FF0EWHPR = FF0EW00.FF0EWHPR + FH3REC.FH1PAQTY;
    FF0EW00.FF0EWHPR = FF0EW00.FF0EWHPR + FH3REC.FH1ALQTY;
    FF0EW00.FF0EWHPR = FF0EW00.FF0EWHPR + FH3REC.FH3CNCL;

  end

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity for the product.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF2DMIND == "2") /* Two years demand indicated*/

    FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH2SHP;
    FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH1PAQTY;
    FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH1ALQTY;
    FF0EW00.FF0EWHDM = FF0EW00.FF0EWHDM + FH3REC.FH3CNCL;

  end


end // end FF0ES07

// Select category by month
Function FF0ES08()
   /* ------------------------------------------------------------*/
   /* Select the row from the category by month master table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CATEGORY BY MONTH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES08

// Sum product shipment history
Function FF0ES09()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by style/color table.*/
   /* ------------------------------------------------------------*/

  set FH5REC empty; /* Clear row storage area*/

  FH5REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FH5REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FH5REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FH5REC.XLCCD = "10"; /* Life cycle code*/
  FH5REC.XQACD = "01"; /* Quality code*/
  FH5REC.XCTCD = "USA"; /* Foreign country code*/
  FH5REC.XPRCD = "*"; /* Product type code*/
  FH5REC.XDVCD = "10"; /* Division group code*/
  FH5REC.XWHCD = "*"; /* Warehouse code*/
  FH5REC.YSMXOT = "*"; /* Order type group code*/
  FH5REC.FH1PNAC = "*"; /* National account flag*/
  FH5REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0ES09"; /* Calling process*/

  XSFFS54(); /* Summarize VSYSHP01 quantities*/


end // end FF0ES09

// Sum next three months forecast
Function FF0ES10()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.YSMXDV = "10"; /* Division group code*/
  FF9REC.XCTCD = "USA"; /* Foreign country code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0EW00.FF0EWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 1; /* Beginning month*/
  if (FF0EW00.FF0EWDMM > 12) /* Month GT maximum*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 12; /* Decrement month*/
    FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0EW00.FF0EWDAT; /* Beginning month*/

  FF0EW00.FF0EWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 3; /* Ending month*/
  if (FF0EW00.FF0EWDMM > 12) /* Month GT maximum*/
    FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 12; /* Decrement month*/
    FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0EW00.FF0EWDAT; /* Ending month*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES10

// ==> Save item information <==
Function FF0ES11()
   /* ------------------------------------------------------------*/
   /* If no room for subtotal/accum total, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWCOL > 61) /* No room for totals*/

    FFWREC.XXXMODID = "S11"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "SHORT RANGE WORKSHEETS EXCEEDS 3 YEARS";
    TAEREC.TAEDESC2 = FF0EW01.TAEDESC2; /* Worksheet numbers*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "SAVE ITEM INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the M001 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FFZINDMO = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0EW01.FF4FCTMO[FF0EWCOL] = FF0EW00.FFZINDMO; /* Forecast month*/
  FF0EW01.FF0EMMON[FF0EWCOL] = FF0EW00.FF0EWMON; /* Forecast YYMM*/

  FFXREC.FFXNUMB = VSWITM02.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRPFUDM = FF0EW08.FFRPFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRAFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRAFUDM = FF0EW08.FFRAFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRIFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRIFUDM = FF0EW08.FFRIFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCFUDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRCFUDM = FF0EW08.FFRCFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW01.FFRPFUDM[FF0EWCOL]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRAFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRIFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRCFUDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFUT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWFUT = FF0EW08.FF0EWFUT + FFXREC.FFXROUND; /* Subtotal*/
    if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO) /* If lt contp mo*/
      FF0EW08.FF0EWFRF = FF0EW08.FF0EWFRF + FFXREC.FFXROUND; /**/
       /* save cancelled qtys for thoes month prior to contp month*/
      FF0EW00.FF0EW-CNCL = FF0EW00.FF0EW-CNCL + FF0EW01.FFRCFUDM[FF0EWCOL];
    end
  end

  FFXREC.FFXNUMB = VSWITM02.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRPNFDM = FF0EW08.FFRPNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRANFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRANFDM = FF0EW08.FFRANFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRINFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRINFDM = FF0EW08.FFRINFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCNFDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRCNFDM = FF0EW08.FFRCNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW01.FFRPNFDM[FF0EWCOL]; /* Natl acct fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRANFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRINFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRCNFDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWNFT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWNFT = FF0EW08.FF0EWNFT + FFXREC.FFXROUND; /* Subtotal*/
    if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO) /* If lt contp mo*/
      FF0EW08.FF0EWFRF = FF0EW08.FF0EWFRF + FFXREC.FFXROUND; /**/
       /* save cancelled qtys for thoes month prior to contp month*/
      FF0EW00.FF0EW-CNCL = FF0EW00.FF0EW-CNCL + FF0EW01.FFRCNFDM[FF0EWCOL];
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the M002 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = VSWITM02.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRPPRDM = FF0EW08.FFRPPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRAPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRAPRDM = FF0EW08.FFRAPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRIPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRIPRDM = FF0EW08.FFRIPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCPRDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRCPRDM = FF0EW08.FFRCPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW02.FFRPPRDM[FF0EWCOL]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRAPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRIPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRCPRDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWPRT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWPRT = FF0EW08.FF0EWPRT + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRPNPDM = FF0EW08.FFRPNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRANPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRANPDM = FF0EW08.FFRANPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRINPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRINPDM = FF0EW08.FFRINPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCNPDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRCNPDM = FF0EW08.FFRCNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW02.FFRPNPDM[FF0EWCOL]; /* Natl acct prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRANPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRINPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRCNPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWNPT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWNPT = FF0EW08.FF0EWNPT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M003 information from the previous maps.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FFRPFUDM[FF0EWCOL]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPNPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTDP = FF0EW08.FF0EWTDP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW01.FFRAFUDM[FF0EWCOL]; /* Total allocated*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRANFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRAPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRANPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDA[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDA[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTDA = FF0EW08.FF0EWTDA + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW01.FFRIFUDM[FF0EWCOL]; /* Total invoiced*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRINFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRIPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRINPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDI[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDI[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTDI = FF0EW08.FF0EWTDI + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW01.FFRCFUDM[FF0EWCOL]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRCNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRCPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRCNPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTDC = FF0EW08.FF0EWTDC + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDP[FF0EWCOL]; /* Total demand*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW03.FF0EWTDA[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW03.FF0EWTDI[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW03.FF0EWTDC[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTDT = FF0EW08.FF0EWTDT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0EW03.FF0EWTDT[FF0EWCOL] != 0) /* Total demand NE zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[FF0EWCOL] * 100; /* Cancellation %*/
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[FF0EWCOL], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[FF0EWCOL] = FF0EW00.FF0EWPCT;
  end

  FFXREC.FFXNUMB = FF0EW01.FFRPFUDM[FF0EWCOL]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRAFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRIFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRANFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRINFDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTAF = FF0EW08.FF0EWTAF + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW02.FFRPPRDM[FF0EWCOL]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRAPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRIPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRANPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRINPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWTAP = FF0EW08.FF0EWTAP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M004 information from the previous maps.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Fut dmd*/
  else
    FFXREC.FFXNUMB = FF0EW01.FFRPFUDM[FF0EWCOL]; /* Fut dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRAFUDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRIFUDM[FF0EWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDFU[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDFU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDFU = FF0EW08.FF0EWDFU + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Natl fut*/
  else
    FFXREC.FFXNUMB = FF0EW01.FFRPNFDM[FF0EWCOL]; /* Natl fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRANFDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRINFDM[FF0EWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDNF = FF0EW08.FF0EWDNF + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = VSWITM02.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  VSWITM02.FFRCDMFC = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = VSWITM02.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
   /* OVE FFXREC.FFXROUND TO VSWITM02.FFRCPRFC;/* Rounded number*/

  if (VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = VSWITM02.FFRCDMFC - VSWITM02.FFRCPRFC; /* Total fut*/
  else
    FFXREC.FFXNUMB = FF0EW04.FF0EWDFU[FF0EWCOL]; /* Total fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDNF[FF0EWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDTF = FF0EW08.FF0EWDTF + FFXREC.FFXROUND; /* Subtotal*/
    if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* if ge contp month*/
      FF0EW08.FF0EWFRF = FF0EW08.FF0EWFRF + FFXREC.FFXROUND;
    end
  end

  FFXREC.FFXNUMB = FF0EW02.FFRPPRDM[FF0EWCOL]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRAPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRIPRDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDPR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDPR[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDPR = FF0EW08.FF0EWDPR + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW02.FFRPNPDM[FF0EWCOL]; /* Natl prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRANPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRINPDM[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDNP = FF0EW08.FF0EWDNP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW04.FF0EWDPR[FF0EWCOL]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDNP[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWDTP = FF0EW08.FF0EWDTP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "03") /* BUY WORKSHEET*/
    FFXREC.FFXNUMB = VSWITM02.FDMD_OPN_BULK_QTY;
  else
    FFXREC.FFXNUMB = FF0EW00.FF0EWOBK; /* Open bulk*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMOBK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWOBK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWOBK = FF0EW08.FF0EWOBK + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "01" /* Current worksheet*/
   || FFWREC.XWSCD == "09") /* or work worksheet*/
    if (VSWITM02.FF4FCTMO == FF0EW01.FFQCURMO /* Fcst mo EQ contp*/
     && VSWITM02.FF4FCTMO == XX0XW01.XX0XWCYM) /* and EQ current*/
      FFXREC.FFXNUMB = FF0EW04.FF0EWDPR[FF0EWCOL] * FF0EW00.FF0EWDIM;
      FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FF0EW00.FF0EWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDNP[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW04.FF0EMDCP[FF0EWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW04.FF0EWDCP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    end
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRCPRFC; /* Curr prop fcst*/
  else
    FFXREC.FFXNUMB = FF0EW04.FF0EWDTP[FF0EWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPCF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FFRCPRFC[FF0EWCOL] = FFXREC.FFXNUMB; /* number*/
  if (FF0EW00.FF0EWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0EW08.FFRCPRFC = FF0EW08.FFRCPRFC + FFXREC.FFXNUMB; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "03" /* "buy" work sheet*/
   || FFWREC.XWSCD == "04") /* "pfcst" work sheet*/
    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[FF0EWCOL]; /* Mstr prop fcst*/
  else
    if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO) /* Fcst mo LT current*/
      FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[FF0EWCOL];
    else
      FFXREC.FFXNUMB = FF0EW04.FF6PRPFC[FF0EWCOL];
    end
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPRF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF6PRPFC[FF0EWCOL] = FFXREC.FFXNUMB; /* number*/
  if (FF0EW00.FF0EWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0EW08.FF6PRPFC = FF0EW08.FF6PRPFC + FFXREC.FFXNUMB; /* Subtotal*/
  end

   /* ===> Fcst fut %*/
       /* ----------*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW04.FF0EWDFF[FF0EWCOL] = mathLib.round(VSWITM02.FF7FURAT / 1, -mathLib.decimals(FF0EW04.FF0EWDFF[FF0EWCOL])); /* Fcst fut %*/
  end

  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    if (FF0EW00.FF0EWHFU > 0 /* Hist futr GT zero*/
     && FF0EW00.FF0EWHCF > 0) /* and hist comb GT zero*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWHFU * 100 / FF0EW00.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Hist fut %*/
    end
    FF0EW08.FF0EWHCF = FF0EW08.FF0EWHCF + FF0EW00.FF0EWHCF; /* Subtotal*/
    FF0EW08.FF0EWHFU = FF0EW08.FF0EWHFU + FF0EW00.FF0EWHFU; /* Subtotal*/
  end

  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW04.FF0EWHPR[FF0EWCOL] = FF0EW00.FF0EWHPR; /* Hist prop qty*/
    FF0EW08.FF0EWHPR = FF0EW08.FF0EWHPR + FF0EW00.FF0EWHPR; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M005 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ===> Curr dmd fcst*/
       /* -------------*/
  FFXREC.FFXNUMB = VSWITM02.FFRCDMFC; /* Curr dmd fcst*/
  FF0EW05.FFRCDMFC[FF0EWCOL] = VSWITM02.FFRCDMFC;

  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRCDMFC = FF0EW08.FFRCDMFC + FF0EW05.FFRCDMFC[FF0EWCOL];
  end

  if (VSWITM02.FF4FCTMO >= FFQREC.FFQCURMO) /* Fcst mo GE current*/
    if (FF7REC.FF7FRZFL == " ") /* No freeze flag*/
      FF0EW05.FF7FRZFL[FF0EWCOL] = "N"; /* Default to NO*/
    else
      FF0EW05.FF7FRZFL[FF0EWCOL] = FF7REC.FF7FRZFL; /* Freeze flag*/
    end
  end

  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW05.FF0EWHDM[FF0EWCOL] = FF0EW00.FF0EWHDM; /* Hist demand qty*/
    FF0EW08.FF0EWHDM = FF0EW08.FF0EWHDM + FF0EW00.FF0EWHDM; /* Subtotal*/
  end

   /* ===> Fcst Fill rate*/
       /* --------------*/
  if (VSWITM02.FF7FLLRT != 0) /* Fcst fill rt exists*/
    FF0EW05.FF0EWFFR[FF0EWCOL] = VSWITM02.FF7FLLRT; /* Fcst fill rt*/
  else
    if (FF0EW00.FF0EWHOR != 0) /* Ordered NE zero*/
      FF0EW00.FF0EWPCT = FF0EW00.FF0EWHIN * 100; /* Fcst fill rt*/
      FF0EW05.FF0EWFFR[FF0EWCOL] = mathLib.round(FF0EW00.FF0EWPCT / FF0EW00.FF0EWHOR, -mathLib.decimals(FF0EW05.FF0EWFFR[FF0EWCOL]));
    end
  end
   /* ---> sub-total curr mo forward*/
  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FF0EW08.FF0EWFFR = FF0EW08.FF0EWFFR + FF0EW05.FF0EWFFR[FF0EWCOL];
  end
   /* ---> prior to curr will be added to totals on re-calc*/
  if (VSWITM02.FF4FCTMO == FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FF0ES63(); /* ====> Re-calc fill rate for months*/
                                   /* prior to curr*/
  end


  if (FF0EW00.FF0EWHOR != 0) /* Ordered NE zero*/
    FF0EW00.FF0EWPCT = FF0EW00.FF0EWHIN * 100; /* Hist fill rt*/
    FF0EW05.FF0EWHFR[FF0EWCOL] = mathLib.round(FF0EW00.FF0EWPCT / FF0EW00.FF0EWHOR, -mathLib.decimals(FF0EW05.FF0EWHFR[FF0EWCOL]));
  end
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWHFR = FF0EW08.FF0EWHFR + FF0EW05.FF0EWHFR[FF0EWCOL];
  end

   /* ===> Curr sls fcst*/
       /* -------------*/
  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    if (VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO /* Fcst mo GT buy*/
     && FFWREC.XWSCD == "01")                /* "curr" work sheet*/
      FFXREC.FFXNUMB = FF0EW05.FF6SLFCT[FF0EWCOL]; /* Mstr sls fcst*/
    else
      FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Curr sls fcst*/
      FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EW05.FF0EWFFR[FF0EWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    end
    FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXNUMB;
  else
    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[FF0EWCOL];
    FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXNUMB;
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FH5MSHQT = FF0EW08.FH5MSHQT + FF0EW05.FH5MSHQT[FF0EWCOL];
  end

   /* ===> Mstr sls fcst*/
       /* -------------*/
  if (FFWREC.XWSCD == "03" /* "buy" work sheet*/
   || FFWREC.XWSCD == "04") /* "pfcst" work sheet*/
    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[FF0EWCOL];
    FF0EW05.FF6SLFCT[FF0EWCOL] = FF0EW05.FH5MSHQT[FF0EWCOL];
  else
    if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO) /* Fcst mo LT current*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[FF0EWCOL];
      FF0EW05.FF6SLFCT[FF0EWCOL] = FF0EW05.FH5MSHQT[FF0EWCOL];
    else
      if (VSWITM02.FF4FCTMO == FF0EW01.FFQCURMO) /* Fcst mo eq current*/
        /* => Backout the QTYs save in FF0E117 (prior mo mstr sls fcst)*/
        FF0EW05.FF6SLFCT[FF0EWCOL] = FF0EW05.FF6SLFCT[FF0EWCOL] -         FF0EW00.FF0EWSF;
      end
      FFXREC.FFXNUMB = FF0EW05.FF6SLFCT[FF0EWCOL]; /* Mstr sls fcst*/
    end
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMSL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF6SLFCT = FF0EW08.FF6SLFCT + FF0EW05.FF6SLFCT[FF0EWCOL];
  end

   /* ===> Mstr dmd fcst*/
       /* -------------*/
  if (FFWREC.XWSCD == "03" /* "buy" work sheet*/
   || FFWREC.XWSCD == "04") /* "pfcst" work sheet*/
    FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Mstr dmd fcst*/
  else
    if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO /* Fcst mo LT current*/
     || VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO) /* Fcst mo GT buy*/
      FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL];
    else
      if (FF0EW05.FF0EWFFR[FF0EWCOL] != 0) /* Fcst fill rt NE zero*/
        FF0EW00.FF0EWPCT = FF0EW05.FF6SLFCT[FF0EWCOL] * 100;
        FFXREC.FFXNUMB = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FF0EWFFR[FF0EWCOL], -mathLib.decimals(FFXREC.FFXNUMB));
      else
        FFXREC.FFXNUMB = 0; /* Mstr dmd fcst*/
      end
    end
  end

  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMMDM[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EWMDM[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWMDM = FF0EW08.FF0EWMDM + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    if (FF7REC.FF7RVFCT == 0)
      FFXREC.FFXNUMB = FF0EW05.FF0EWMDM[FF0EWCOL];
    else
      FFXREC.FFXNUMB = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
    end
    XSFFS10(); /* Translate to thousands*/
    FF0EW05.FF7RVFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FF7RVFCT = FF0EW08.FF7RVFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M006 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    if (VSWITM02.FF4FCTMO == FF0EW01.FFQCURMO)
      FFXREC.FFXNUMB = VSWITM02.FF6BEINV; /* Beg inv*/
    else
      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWIXP]; /* Beg inv*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINB[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF6BEINV[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FF6BEINV = FF0EW08.FF6BEINV + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    if (VSWITM02.FF4FCTMO == FF0EW01.FFQCURMO) /* Fcst mo EQ current*/
      FFXREC.FFXNUMB = VSWITM02.FFRPRDDU + FF0EW08.FFRPRDDU; /* Prod due*/
      FF0EW08.FFRPRDDU = 0; /* Clear prior months subtotal*/
    else
      FFXREC.FFXNUMB = VSWITM02.FFRPRDDU; /* Prod due*/
    end
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMDUE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FFRPRDDU[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FFRPRDDU = FF0EW08.FFRPRDDU + FFXREC.FFXROUND; /* Subtotal*/
  else
    FF0EW08.FFRPRDDU = FF0EW08.FFRPRDDU + VSWITM02.FFRPRDDU; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRSUBBY; /* Sbmt qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMQBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FFRSUBBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FFRSUBBY = FF0EW08.FFRSUBBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRTENBY; /* Tntv qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMTBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FFRTENBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FFRTENBY = FF0EW08.FFRTENBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0EW06.FF6BEINV[FF0EWCOL]; /* Supply*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FFRPRDDU[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FFRSUBBY[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FFRTENBY[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMSUP[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWSUP[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FF0EWSUP = FF0EW08.FF0EWSUP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FG4BALSH; /* Bal to shp*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FG4BALSH = FF0EW08.FG4BALSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[FF0EWCOL]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FF0EWINE = FF0EW08.FF0EWINE + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FF6SFSTK; /* Sfty stk*/
    FF0EW06.FFRSSFCT[FF0EWCOL] = VSWITM02.FFRSSFCT; /* sfty stk factor*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0EW08.FF6SFSTK = FF0EW08.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0EW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FF6SUGBY; /* Sugg qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMSBY[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF6SUGBY[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    if (VSWITM02.FF4FCTMO > FF0EW01.FFQMBYMO) /* Fcst mo GT buy*/
      FF0EW08.FF6SUGBY = FF0EW08.FF6SUGBY + FFXREC.FFXROUND; /* Subtotal*/
      FF0EW00.FF6SUGBY = FF0EW06.FF6SUGBY[FF0EWCOL];
    else
      FF0EW00.FF6SUGBY = 0;
    end
  end

  FFXREC.FFXNUMB = FF0EW06.FF6PRFCT[FF0EWCOL]; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMFCT[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6PRFCT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF6PRFCT = FF0EW08.FF6PRFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "03") /* BUY WORKSHEET*/
    FFXREC.FFXNUMB = VSWITM02.FDMD_RSRV_INV_QTY;
  else
    FFXREC.FFXNUMB = FF0EW00.FF0EWRIN; /* Rsrv inventory*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMRIN[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWRIN[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWRIN = FF0EW08.FF0EWRIN + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* FF0EW00.FF0EWASL = FF0EW00.FF0EWASL * 12;/* Inv turns*/
   /* FF0EW00.FF0EWAIN = FF0EW06.FF0EWINE(FF0EWCOL) * 3;*/
   /* IF FF0EWAIN NE 0;                /* Inventory NE zero*/
   /* FF0EW06.FF0EWTUR(FF0EWCOL) = FF0EW00.FF0EWASL / FF0EW00.FF0EWAIN (R;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) GT 99.99; /* Inv turn > 99.99*/
   /* MOVE 99.99 TO FF0EW06.FF0EWTUR(FF0EWCOL); /* Use default value*/
   /* ELSE;*/
   /* IF FF0EW06.FF0EWTUR(FF0EWCOL) LT 0;*/
   /* MOVE 0 TO FF0EW06.FF0EWTUR(FF0EWCOL);*/
   /* END;*/
   /* END;*/
   /* END;*/

  FFXREC.FFXNUMB = VSWITM02.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDIR[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRDIRSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FFRDIRSH = FF0EW08.FFRDIRSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0EW06.FF0EWNIL[FF0EWCOL]; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMNIL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWNIL[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWNIL = FF0EW08.FF0EWNIL + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save prior month index.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXP = FF0EW00.FF0EWCOL;

   /* ------------------------------------------------------------*/
   /* Calculate the number of months for subtotal averaging.*/
   /* ------------------------------------------------------------*/

  if (FF0EW00.FF0EWCOL > 1) /* Not first column*/
    FF0EW08.FF0EWNMO = FF0EW08.FF0EWNMO + 1; /* Number of months*/
  end

end // end FF0ES11

// Close worksheet item cursor
Function FF0ES12()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VSWITM02" ("C1", SQLCA, VSWITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET ITEM CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES12

// Open worksheet comment cursor
Function FF0ES13()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFPREC empty; /* Clear row storage area*/

  FFPREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/
  FFPREC.FFPCTIND = "*"; /* Comment type indicator*/

  try
    call "IO3800" ("S1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FF0EW00.FF0EWIXL = 1; /* Line index*/
    FF0EW00.FF0EWSWC = "N"; /* Comments cursor EOF switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET COMMENT CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES13

// Fetch next worksheet comment
Function FF0ES14()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3800" ("N1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FFPREC.FFPCTIND == "F") /* Forecaster comment*/

        /* ------------------------------------------------------------*/
         /* If more than ten forcaster comments, indicate system error.*/
        /* ------------------------------------------------------------*/

        if (FF0EW00.FF0EWIXL > 10) /* More than ten comments*/

          FFWREC.XXXMODID = "S14"; /* Module identification*/
          converseLib.validationFailed(1); /* System error occurred*/

          TAEREC.TAEDESC1 = "MORE THAN TEN FORECASTER COMMENTS";
          TAEREC.TAEDESC2 = FF0EW01.FF0EWSNO[1]; /* Worksheet number*/

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "FETCH NEXT WORKSHEET COMMENT";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
          TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

          exit stack; /* Exit to display map*/

        end

        FF0EW07.FFPCOMNT[FF0EWIXL] = FFPREC.FFPCOMNT; /* Comment*/

        FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1; /* Line index*/

      else

        if (FFPREC.FFPCTIND == "S") /* Forecaster comment*/
          FF0EW07.FFPCOMNT[11] = FFPREC.FFPCOMNT; /* Schdlr comment*/
        else
          FF0ES80(); /* Product activity comment*/
        end

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0EW00.FF0EWSWC = "Y"; /* Comment cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET COMMENT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES14

// Close worksheet comment cursor
Function FF0ES15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3800" ("C1", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S15"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET COMMENT CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES15

// Check M001 fields for changes
Function FF0ES16()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMNFC[FF0EWIXC] != FF0EW01.FF0EMNFC[FF0EWEND]
     && FF0EM001.FF0EMMON[FF0EWIXC] > " ")

      FFWREC.XXXMODID = "S16"; /* Module identification*/
      set FF0EM001.FF0EMNFC[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMNFP[FF0EWIXC] != FF0EW01.FF0EMNFP[FF0EWEND]
     && FF0EM001.FF0EMMON[FF0EWIXC] > " ")

      FFWREC.XXXMODID = "S16"; /* Module identification*/
      set FF0EM001.FF0EMNFP[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMFUC[FF0EWIXC] != FF0EW01.FF0EMFUC[FF0EWEND]
     && FF0EM001.FF0EMMON[FF0EWIXC] > " ")

      FFWREC.XXXMODID = "S16"; /* Module identification*/
      set FF0EM001.FF0EMFUC[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM001.FF0EMFUP[FF0EWIXC] != FF0EW01.FF0EMFUP[FF0EWEND]
     && FF0EM001.FF0EMMON[FF0EWIXC] > " ")

      FFWREC.XXXMODID = "S16"; /* Module identification*/
      set FF0EM001.FF0EMFUP[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  if (FF0EM001.FF0EMOPP != FF0EW01.FFQOCOPP) /* Other prop percent changed*/

    FFWREC.XXXMODID = "S16"; /* Module identification*/
    set FF0EM001.FF0EMOPP cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  if (FF0EM001.FF0EMLPP != FF0EW01.FFQLCOPP) /* Last prop percent changed*/

    FFWREC.XXXMODID = "S16"; /* Module identification*/
    set FF0EM001.FF0EMLPP cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  if (FF0EM001.FF0EMOFP != FF0EW01.FFQOCOFP) /* Other future percent changed*/

    FFWREC.XXXMODID = "S16"; /* Module identification*/
    set FF0EM001.FF0EMOFP cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  if (FF0EM001.FF0EMLFP != FF0EW01.FFQLCOFP) /* Last future percent changed*/

    FFWREC.XXXMODID = "S16"; /* Module identification*/
    set FF0EM001.FF0EMLFP cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end


end // end FF0ES16

// Obtain next worksheet number
Function FF0ES17()
   /* ------------------------------------------------------------*/
   /* Select the row from Footwear Forecasting Control Table.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row was not found, indicate data was in use by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      FFWREC.XXXMODID = "S17"; /* Module identification*/
      converseLib.validationFailed(47); /* Data in use by another*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    converseLib.validationFailed(47); /* Data in use by another*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(1); /* System error occurred*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN NEXT WORKSHEET NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES17

// Insert worksheet header row
Function FF0ES18()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet header table row.*/
   /* ------------------------------------------------------------*/

  FFQREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  FFQREC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FFQREC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FFQREC.SYBSTGNB = FF0EW00.SYBSTGNB; /* Style group number*/
  FFQREC.PG7MAXPR = FF0EW00.PG7MAXPR; /* Style group max price*/
  FFQREC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FFQREC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FFQREC.XPRCD = FF0EW00.XPRCD; /* Product type code*/
  FFQREC.XLCCD = FF0EW00.XLCCD; /* Life cycle code*/
  FFQREC.XPLCD = FF0EW00.XPLCD; /* Product line code*/
  FFQREC.FFABEGMO = FF0EW01.FFABEGMO[FF0EWIXW]; /* Fcst bmo*/
  FFQREC.SY2SSCIN = FF0EW06.SY2SSCIN; /* Safety stock class*/
  FFQREC.FFQMBYMO = FF0EW01.FFQMBYMO; /* Main buy mo*/
  FFQREC.FFQABYMO = 0; /* Actl buy mo*/
  FFQREC.FFAENDMO = FF0EW01.FFAENDMO[FF0EWIXW]; /* Fcst xmo*/
  FFQREC.FFQCURMO = FF0EW01.FFQCURMO; /* Curr mo*/
  FFQREC.FFQDMDDT = FF0EW01.FFQDMDDT; /* Dmd asof dt*/
  FFQREC.FFQLCOFU = FF0EW01.FFQLCOFU; /* Lst caov futr*/
  FFQREC.FFQLCOPR = FF0EW01.FFQLCOPR; /* Lst caov prop*/
  FFQREC.FFQLCOFP = FF0EW01.FFQLCOFP; /* Lst caov futpct*/
  FFQREC.FFQLCOPP = FF0EW01.FFQLCOPP; /* Lst caov propct*/
  FFQREC.FFQOCOFU = FF0EW01.FFQOCOFU; /* Oth caov futr*/
  FFQREC.FFQOCOPR = FF0EW01.FFQOCOPR; /* Oth caov prop*/
  FFQREC.FFQOCOFP = FF0EW01.FFQOCOFP; /* Oth caov futpct*/
  FFQREC.FFQOCOPP = FF0EW01.FFQOCOPP; /* Oth caov propct*/
  FFQREC.FF2FUIND = FF0EW04.FF2FUIND; /* Futr yr ind*/
  FFQREC.FF2DMIND = FF0EW05.FF2DMIND; /* Dmd yr ind*/
  FFQREC.FF2PRIND = FF0EW01.FF2PRIND; /* Prop yr ind*/
  if (FF0EW00.FF0EWIXW == 1) /* First season worksheet*/
    if (FF0EW07.FFPCOMNT[1] > " " /* Forecaster comment 1*/
     || FF0EW07.FFPCOMNT[2] > " " /* or forecaster comment 2*/
     || FF0EW07.FFPCOMNT[3] > " " /* or forecaster comment 3*/
     || FF0EW07.FFPCOMNT[4] > " " /* or forecaster comment 4*/
     || FF0EW07.FFPCOMNT[5] > " " /* or forecaster comment 5*/
     || FF0EW07.FFPCOMNT[6] > " " /* or forecaster comment 6*/
     || FF0EW07.FFPCOMNT[7] > " " /* or forecaster comment 7*/
     || FF0EW07.FFPCOMNT[8] > " " /* or forecaster comment 8*/
     || FF0EW07.FFPCOMNT[9] > " " /* or forecaster comment 9*/
     || FF0EW07.FFPCOMNT[10] > " ") /* or forecaster comment 10*/
      FFQREC.FFQFCMFL = "Y"; /* Fcstr comnt fl*/
    else
      FFQREC.FFQFCMFL = "N"; /* Fcstr comnt fl*/
    end
    if (FF0EW07.FFPCOMNT[11] > " ") /* Scheduler comments*/
      FFQREC.FFQSCMFL = "Y"; /* Schedr comnt fl*/
    else
      FFQREC.FFQSCMFL = "N"; /* Schedr comnt fl*/
    end
  else
    FFQREC.FFQFCMFL = "N"; /* Fcstr comnt fl*/
    FFQREC.FFQSCMFL = "N"; /* Schedr comnt fl*/
  end
  FFQREC.XXXUSRID = COMMAREA.CAUSERID; /* User identification*/
  FFQREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFQREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  FFQREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFQREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3810" ("A ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET HEADER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES18

// Insert worksheet item row
Function FF0ES19()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet item table row.*/
   /* ------------------------------------------------------------*/

  VSWITM02.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/
  VSWITM02.FFRPFUDM = FF0EW01.FFRPFUDM[FF0EWCOL]; /* Pral futr dmd*/
  VSWITM02.FFRAFUDM = FF0EW01.FFRAFUDM[FF0EWCOL]; /* Aloc futr dmd*/
  VSWITM02.FFRIFUDM = FF0EW01.FFRIFUDM[FF0EWCOL]; /* Ivc futr dmd*/
  VSWITM02.FFRCFUDM = FF0EW01.FFRCFUDM[FF0EWCOL]; /* Cncl futr dmd*/
  VSWITM02.FFRPNFDM = FF0EW01.FFRPNFDM[FF0EWCOL]; /* Pral natl fdmd*/
  VSWITM02.FFRANFDM = FF0EW01.FFRANFDM[FF0EWCOL]; /* Aloc natl fdmd*/
  VSWITM02.FFRINFDM = FF0EW01.FFRINFDM[FF0EWCOL]; /* Ivc natl fdmd*/
  VSWITM02.FFRCNFDM = FF0EW01.FFRCNFDM[FF0EWCOL]; /* Cncl natl fdmd*/
  VSWITM02.FFRPPRDM = FF0EW02.FFRPPRDM[FF0EWCOL]; /* Pral prop dmd*/
  VSWITM02.FFRAPRDM = FF0EW02.FFRAPRDM[FF0EWCOL]; /* Aloc prop dmd*/
  VSWITM02.FFRIPRDM = FF0EW02.FFRIPRDM[FF0EWCOL]; /* Ivc prop dmd*/
  VSWITM02.FFRCPRDM = FF0EW02.FFRCPRDM[FF0EWCOL]; /* Cncl prop dmd*/
  VSWITM02.FFRPNPDM = FF0EW02.FFRPNPDM[FF0EWCOL]; /* Pral natl pdmd*/
  VSWITM02.FFRANPDM = FF0EW02.FFRANPDM[FF0EWCOL]; /* Aloc natl pdmd*/
  VSWITM02.FFRINPDM = FF0EW02.FFRINPDM[FF0EWCOL]; /* Ivc natl pdmd*/
  VSWITM02.FFRCNPDM = FF0EW02.FFRCNPDM[FF0EWCOL]; /* Cncl natl pdmd*/
  VSWITM02.FFRCPRFC = FF0EW04.FFRCPRFC[FF0EWCOL]; /* Curr prop fcst*/
  VSWITM02.FF7FURAT = FF0EW04.FF0EWDFF[FF0EWCOL]; /* Fcst fut %*/
  VSWITM02.FFRCDMFC = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Curr dmd fcst*/
  VSWITM02.FF7FLLRT = FF0EW05.FF0EWFFR[FF0EWCOL]; /* Fill rate pct*/
  VSWITM02.FF6BEINV = FF0EW06.FF6BEINV[FF0EWCOL]; /* Beg inv*/
  VSWITM02.FF6SUGBY = FF0EW06.FF6SUGBY[FF0EWCOL]; /* Sugg qtb*/
  VSWITM02.FFRPRDDU = FF0EW06.FFRPRDDU[FF0EWCOL]; /* Prdctn due*/
  VSWITM02.FFRSUBBY = FF0EW06.FFRSUBBY[FF0EWCOL]; /* Sbmt qtb*/
  VSWITM02.FFRTENBY = FF0EW06.FFRTENBY[FF0EWCOL]; /* Tntv qtb*/
  VSWITM02.FFRDIRSH = FF0EW06.FFRDIRSH[FF0EWCOL]; /* Dirshp qty*/
  VSWITM02.FF6SFSTK = FF0EW06.FF6SFSTK[FF0EWCOL]; /* Sfty stk*/
  VSWITM02.FFRSSFCT = FF0EW06.FFRSSFCT[FF0EWCOL]; /* Sfty stk nmo*/
  VSWITM02.FG4BALSH = FF0EW06.FG4BALSH[FF0EWCOL]; /* Bal to shp*/
  VSWITM02.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  VSWITM02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VSWITM02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VSWITM02" ("A ", SQLCA, VSWITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert tbl row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSWITM02.VSWITM02KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES19

// Insert worksheet comment row
Function FF0ES20()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet comment table row.*/
   /* ------------------------------------------------------------*/

  FFPREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Wrksht nbr*/
  if (FF0EW00.FF0EWIXL < 11) /* Forecaster comment*/
    FFPREC.FFPCTIND = "F"; /* Comnt typ ind*/
    FFPREC.FFPCMSEQ = FFPREC.FFPCMSEQ + 1; /* Comnt seq*/
  else
    FFPREC.FFPCTIND = "S"; /* Comnt typ ind*/
    FFPREC.FFPCMSEQ = 1; /* Comnt seq*/
  end
  FFPREC.FFPCOMNT = FF0EW07.FFPCOMNT[FF0EWIXL]; /* Comnt txt*/
  FFPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3800" ("A ", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET COMMENT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES20

// Calculate monthly variances
Function FF0ES21()
   /* ------------------------------------------------------------*/
   /* Calculate the variances beginning with the current month.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current fcst mo*/

    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

    FF0EW00.FF0EWIXC = 1; /* Column index*/

    FF0EW00.FF6SUGBY = 0; /* Prev mo variance*/

    while (FF0EW01.FF0EMMON[FF0EWCOL] > "  ") /* more fcst months*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

        /* ============= Next Sentence ============>*/

      else

        FF0EW00.FF6SFSTK = FF0EW06.FF6SFSTK[FF0EWCOL];
        FF0EW00.FF6SFSTK = FF0EW00.FF6SFSTK + FF0EW00.FF6SUGBY;
        FF0EW00.FF6SFSTK = FF0EW00.FF6SFSTK - FF0EW06.FF0EWINE[FF0EWCOL];

        /* ------------------------------------------------------------*/
         /* Load into subroutine parameters if beyond main buy month.*/
        /* ------------------------------------------------------------*/

        if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO)
                                   /* Fcst mo GT buy*/

          FF0EW00.FF6SUGBY = FF0EW00.FF6SUGBY + FF0EW06.FF6SUGBY[FF0EWCOL];

          if (FF0EW00.FF6SFSTK > 0) /* Positive variance*/

            FF0EW10.FF6SUGBY[FF0EWCOL] = FF0EW00.FF6SFSTK;
            FF0EW00.FF6SUGBY = FF0EW00.FF6SUGBY - FF0EW00.FF6SFSTK;

          else

            FF0EW10.FF6SUGBY[FF0EWCOL] = 0; /* Monthly variance*/

          end

          FF0EW11.FF4FCTMO[FF0EWIXC] = FF0EW01.FF4FCTMO[FF0EWCOL];
          FF0EW11.FF6SUGBY[FF0EWIXC] = FF0EW10.FF6SUGBY[FF0EWCOL];
          FF0EW11.FF6SLFCT[FF0EWIXC] = FF0EW05.FH5MSHQT[FF0EWCOL];

          FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

        else

          FF0EW10.FF6SUGBY[FF0EWCOL] = FF0EW00.FF6SFSTK;

        end

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

    end

  end /* ===> Current fcst mo*/


end // end FF0ES21

// Calculate the suggested buy
Function FF0ES22()
   /* ------------------------------------------------------------*/
   /* Call the subroutine to calculate suggested buy quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW11.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF0EW11.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF0EW11.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FF0EW11.SY2SSCIN = FF0EW06.SY2SSCIN;

  try
    call "FF2920" (FF0EW11, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && FF0EW11.FF0EWRCD == "0")       /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && FF0EW11.FF0EWRCD == "2"        /* and unexpected DB2 error*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "CALCULATE THE SUGGESTED BUY";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2920 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* System error occurred*/

  exit stack; /* Exit to display map*/


end // end FF0ES22

// Process SUGG BUY change
Function FF0ES23()
   /* ------------------------------------------------------------*/
   /* Replace the variances with the calculated suggested buy.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 1; /* Column index*/

  if (FF0EW11.FF4FCTMO[FF0EWIXC] in FF0EW01.FF4FCTMO) /* ===> First buy mo*/

    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* ===> Current column*/

    while (FF0EW01.FF0EMMON[FF0EWCOL] > "     ") /* ===> more fcst months*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* ===> Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Season accum total*/

        /* ======== Next Sentence ==============>*/

      else

        FF0EW10.FF6SUGBY[FF0EWCOL] = FF0EW11.FF6SUGBY[FF0EWIXC];

        FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Column index*/

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* ===> Current column*/

    end /* ===> more fcst months*/

  end /* ===> First buy mo*/

   /* ------------------------------------------------------------*/
   /* Adjust inventory quantities to reflect the suggested buy.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current fcst mo*/

    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

    FF0EW00.FF6SUGBY = 0; /* Prev mo adj*/

    while (FF0EW01.FF0EMMON[FF0EWCOL] > "     ") /* ===> more fcst months*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
       || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

        /* ======== Next Sentence ==============>*/

      else

        if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO)
                                   /* Fcst mo GT buy*/

          if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* ===> Season subtotal*/


            /* ------------------------------------------------------------*/
             /* Adjust BEG INV by the previous month's adjustment.*/

            /* ------------------------------------------------------------*/

            FFXREC.FFXNUMB = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
            FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
            XSFFS10(); /* Translate to thousands*/
            FF0EW06.FF0EMINB[sysVar.arrayIndex] = FFXREC.FFXCHAR;
            FF0EW06.FF6BEINV[sysVar.arrayIndex] = FFXREC.FFXROUND;


            /* ------------------------------------------------------------*/
             /* Adjust SUPPLY by the previous month's adjustment.*/

            /* ------------------------------------------------------------*/

            FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
            FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
            XSFFS10(); /* Translate to thousands*/
            FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR;
            FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND;


            /* ------------------------------------------------------------*/
             /* Adjust END INVENTORY by the previous month's adjustment.*/

            /* ------------------------------------------------------------*/

            FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inv*/
            FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
            XSFFS10(); /* Translate to thousands*/
            FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR;
            FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND;


            /* ------------------------------------------------------------*/
             /* Adjust SUGG BUY by the difference in the amounts.*/

            /* ------------------------------------------------------------*/

            FFXREC.FFXNUMB = FF0EW06.FF6SUGBY[sysVar.arrayIndex]; /* Sugg buy*/
            FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6SUGBY[FF0EWCOL];
            FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6SUGBY[FF0EWCOL];
            XSFFS10(); /* Translate to thousands*/
            FF0EW06.FF0EMSBY[sysVar.arrayIndex] = FFXREC.FFXCHAR;
            FF0EW06.FF6SUGBY[sysVar.arrayIndex] = FFXREC.FFXROUND;

          end /* ===> Season subtotal*/

          while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > "     ")
                                   /* ===> more fcst months*/

            if ("ACCUM" in FF0EW01.FF0EMMON from sysVar.arrayIndex) /* accum total*/

   /* ------------------------------------------------------------*/
               /* Adjust BEG INV by the previous month's adjustment.*/
   /* ------------------------------------------------------------*/

              FFXREC.FFXNUMB = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
              FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY;
                                   /* Prev mo*/
              XSFFS10(); /* Translate to thousands*/
              FF0EW06.FF0EMINB[sysVar.arrayIndex] = FFXREC.FFXCHAR;
              FF0EW06.FF6BEINV[sysVar.arrayIndex] = FFXREC.FFXROUND;

   /* ------------------------------------------------------------*/
               /* Adjust SUPPLY by the previous month's adjustment.*/
   /* ------------------------------------------------------------*/

              FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
              FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY;
                                   /* Prev mo*/
              XSFFS10(); /* Translate to thousands*/
              FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR;
              FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND;

   /* ------------------------------------------------------------*/
               /* Adjust END INVENTORY by the previous month's adjustment.*/
   /* ------------------------------------------------------------*/

              FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inv*/
              FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY;
                                   /* Prev mo*/
              XSFFS10(); /* Translate to thousands*/
              FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR;
              FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND;

   /* ------------------------------------------------------------*/
               /* Adjust SUGG BUY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

              FFXREC.FFXNUMB = FF0EW06.FF6SUGBY[sysVar.arrayIndex]; /* Sugg buy*/
              FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6SUGBY[FF0EWCOL];
              FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6SUGBY[FF0EWCOL];
              XSFFS10(); /* Translate to thousands*/
              FF0EW06.FF0EMSBY[sysVar.arrayIndex] = FFXREC.FFXCHAR;
              FF0EW06.FF6SUGBY[sysVar.arrayIndex] = FFXREC.FFXROUND;

            end /* ===> accum total*/

            sysVar.arrayIndex = sysVar.arrayIndex + 1;

          end /* ===> more fcst months*/

          /* ------------------------------------------------------------*/
           /* Adjust BEG INV by the previous month's adjustment.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF6BEINV[FF0EWCOL]; /* Beg inv*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMINB[FF0EWCOL] = FFXREC.FFXCHAR;
          FF0EW06.FF6BEINV[FF0EWCOL] = FFXREC.FFXROUND;

          /* ------------------------------------------------------------*/
           /* Adjust SUPPLY by the previous month's adjustment.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[FF0EWCOL]; /* Supply*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMSUP[FF0EWCOL] = FFXREC.FFXCHAR;
          FF0EW06.FF0EWSUP[FF0EWCOL] = FFXREC.FFXROUND;

          /* ------------------------------------------------------------*/
           /* Adjust END INVENTORY by the previous month's adjustment.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWCOL]; /* End inv*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6SUGBY; /* Prev mo*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR;
          FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND;

          /* ------------------------------------------------------------*/
           /* Calculate adjustment to apply to next month's inventory.*/
          /* ------------------------------------------------------------*/

          FF0EW00.FF6SUGBY = FF0EW00.FF6SUGBY - FF0EW06.FF6SUGBY[FF0EWCOL];
          FF0EW00.FF6SUGBY = FF0EW00.FF6SUGBY + FF0EW10.FF6SUGBY[FF0EWCOL];

        end /* ===> Fcst mo GT buy*/

        /* ------------------------------------------------------------*/
         /* Adjust SUGG BUY by the difference in the amounts.*/
        /* ------------------------------------------------------------*/

        FFXREC.FFXNUMB = FF0EW10.FF6SUGBY[FF0EWCOL]; /* Sugg buy*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSBY[FF0EWCOL] = FFXREC.FFXCHAR;
        FF0EW06.FF6SUGBY[FF0EWCOL] = FFXREC.FFXROUND;

      end

      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

    end

  end


end // end FF0ES23

// Delete worksheet header row
Function FF0ES24()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet header table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("D ", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET HEADER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES24

// Delete worksheet item rows
Function FF0ES25()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet item table rows.*/
   /* ------------------------------------------------------------*/

  VSWITM02.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  try
    call "VSWITM02" ("DS", SQLCA, VSWITM02) {isNoRefresh = yes, isExternal = yes};
  end /* Del tbl rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET ITEM ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWITM02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSWITM02.VSWITM02KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES25

// Delete worksheet comment rows
Function FF0ES26()
   /* ------------------------------------------------------------*/
   /* Delete the worksheet comment table rows.*/
   /* ------------------------------------------------------------*/

  FFPREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet number*/

  try
    call "IO3800" ("DS", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE WORKSHEET COMMENT ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES26

// Update the month master tables
Function FF0ES27()
   /* ------------------------------------------------------------*/
   /* Call the subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/

  try
    call "FF2700" (FF0EW12, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "UPDATE THE MONTH MASTER TABLES";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2700 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* System error occurred*/

  exit stack; /* Exit to display map*/


end // end FF0ES27

// Summarize VOQSTY01 quantities
Function FF0ES28()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the order history by style/color table.*/
   /* ------------------------------------------------------------*/

  FH1REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FH1REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FH1REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FFFREC.FFFBEGMO = FF0EW00.FF0EWDAT; /* Beginning month*/
  FFFREC.FFFENDMO = FF0EW00.FF0EWDAT; /* Ending month*/

  try
    call "IO4100" (FFFREC, SQLCA, FH1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no rows selected*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S28"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE VOQSTY01 QUANTITIES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOQSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH1REC.FH1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES28

// Process OTH CAOV FUTPCT change
Function FF0ES29()
   /* ------------------------------------------------------------*/
   /* Use entered percentage to calculate OTH CAOV FUTR quantity.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW00.FH1PAQTY - FH1REC.FH1PAQTY; /* Pral qty*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EM001.FF0EMOFP / 100, -mathLib.decimals(FFXREC.FFXNUMB));
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FH1REC.FH1PAQTY; /* Dirshp pral*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FH1ALQTY; /* Aloc qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW10.FFQOCOFU = FFXREC.FFXROUND; /* Oth caov futr*/

   /* ------------------------------------------------------------*/
   /* Locate the column to be adjusted in map display storage.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    if (FF0EW01.FFABEGMO[1] == FF0EW01.FFQCURMO) /* Beg mo EQ curr*/

      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to LST month*/
    else
      sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Point to OTH month*/

    end

  end

  FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

   /* ------------------------------------------------------------*/
   /* Adjust FUTURES CARRYOVER by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FF0EWFCO[sysVar.arrayIndex]; /* Futures carryover*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR SLS FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EMMSL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW05.FF6SLFCT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust the current month BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the subtotal BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON) /* Season subtotal*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the accum total BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* Fcst month exist*/

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* Fcst month exist*/

      /* ------------------------------------------------------------*/
       /* Adjust BAL TO SHP by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOFU;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOFU;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust END INVENTORY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOFU;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

   /* ------------------------------------------------------------*/
   /* Save changed quantity and percent in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FFQOCOFU = FF0EW10.FFQOCOFU; /* Oth caov futr*/
  FF0EW01.FFQOCOFP = FF0EM001.FF0EMOFP; /* Oth caov futpct*/


end // end FF0ES29

// Adjust subsequent inventories
Function FF0ES30()
   /* ------------------------------------------------------------*/
   /* Calculate the difference between END INVENTORY and BEG INV.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXS = FF0EW00.FF0EWCOL + 1; /* Subsequent month index*/

  if (FF0EW01.FF0EMMON[FF0EWIXS] == "  SUB") /* Season subtotal*/
    FF0EW00.FF0EWIXS = FF0EW00.FF0EWIXS + 1; /* Subsequent month index*/
  end

  if (FF0EW01.FF0EMMON[FF0EWIXS] == "ACCUM") /* Season subtotal*/
    FF0EW00.FF0EWIXS = FF0EW00.FF0EWIXS + 1; /* Subsequent month index*/
  end

  FF0EW00.FF6BEINV = FF0EW06.FF0EWINE[FF0EWCOL]; /* End inventory*/
  FF0EW00.FF6BEINV = FF0EW00.FF6BEINV - FF0EW06.FF6BEINV[FF0EWIXS];

  if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO) /* Fcst mo GT buy mo*/
    FF0EW00.FF6BEINV = FF0EW00.FF6BEINV + FF0EW06.FF6SUGBY[FF0EWCOL];
  end

  while (FF0EW01.FF0EMMON[FF0EWIXS] > "  ") /* Until fcst months processed*/

    if (FF0EW01.FF0EMMON[FF0EWIXS] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWIXS] == "ACCUM") /* accum     total*/

       /* NEXT SENTENCE*/

    else

      if ("  SUB" in FF0EW01.FF0EMMON from FF0EWIXS) /* Season subtotal*/

        /* ------------------------------------------------------------*/
         /* Adjust BEG INV by the difference in the amounts.*/
        /* ------------------------------------------------------------*/

        FFXREC.FFXNUMB = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMINB[sysVar.arrayIndex] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
        FF0EW06.FF6BEINV[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

        /* ------------------------------------------------------------*/
         /* Adjust SUPPLY by the difference in the amounts.*/
        /* ------------------------------------------------------------*/

        FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
        FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

        /* ------------------------------------------------------------*/
         /* Adjust END INVENTORY by the difference in the amounts.*/
        /* ------------------------------------------------------------*/

        FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
        FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      end


      while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > "  ") /* Until fcst months processed*/

        if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/

          /* ------------------------------------------------------------*/
           /* Adjust BEG INV by the difference in the amounts.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMINB[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands nbr*/
          FF0EW06.FF6BEINV[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded nbr*/

          /* ------------------------------------------------------------*/
           /* Adjust SUPPLY by the difference in the amounts.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands nbr*/
          FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded nbr*/

          /* ------------------------------------------------------------*/
           /* Adjust END INVENTORY by the difference in the amounts.*/
          /* ------------------------------------------------------------*/

          FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
          XSFFS10(); /* Translate to thousands*/
          FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands nbr*/
          FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded nbr*/

        end /* ===> if accum column*/

        sysVar.arrayIndex = sysVar.arrayIndex + 1;

      end /* ===> while fcst months to process*/

      /* ------------------------------------------------------------*/
       /* Adjust BEG INV by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF6BEINV[FF0EWIXS]; /* Beg inv*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINB[FF0EWIXS] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF6BEINV[FF0EWIXS] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust SUPPLY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[FF0EWIXS]; /* Supply*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMSUP[FF0EWIXS] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF0EWSUP[FF0EWIXS] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust END INVENTORY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWIXS]; /* End inventory*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FF6BEINV; /* Adjustment*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[FF0EWIXS] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF0EWINE[FF0EWIXS] = FFXREC.FFXROUND; /* Rounded number*/

    end

    FF0EW00.FF0EWIXS = FF0EW00.FF0EWIXS + 1; /* Subsequent month index*/

  end


end // end FF0ES30

// Process LST CAOV FUTPCT change
Function FF0ES31()
   /* ------------------------------------------------------------*/
   /* Use entered percentage to calculate LST CAOV FUTR quantity.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW00.FH1PAQTY - FH1REC.FH1PAQTY; /* Pral qty*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EM001.FF0EMLFP / 100, -mathLib.decimals(FFXREC.FFXNUMB));
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FH1REC.FH1PAQTY; /* Dirshp pral*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FH1ALQTY; /* Aloc qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW10.FFQLCOFU = FFXREC.FFXROUND; /* Lst caov futr*/

   /* ------------------------------------------------------------*/
   /* Locate the column to be adjusted in map display storage.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to LST month*/
  end

  FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

   /* ------------------------------------------------------------*/
   /* Adjust FUTURES CARRYOVER by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FF0EWFCO[sysVar.arrayIndex]; /* Futures carryover*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR SLS FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EMMSL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW05.FF6SLFCT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust the current month BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the subtotal BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON) /* Season subtotal*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOFU;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the accum total BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* more fcst months*/

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/

      /* ------------------------------------------------------------*/
       /* Adjust BAL TO SHP by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOFU;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOFU;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust END INVENTORY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOFU;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

   /* ------------------------------------------------------------*/
   /* Save changed quantity and percent in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FFQLCOFU = FF0EW10.FFQLCOFU; /* Lst caov futr*/
  FF0EW01.FFQLCOFP = FF0EM001.FF0EMLFP; /* Lst caov futpct*/


end // end FF0ES31

// Process OTH CAOV PROPCT change
Function FF0ES32()
   /* ------------------------------------------------------------*/
   /* Use entered percentage to calculate OTH CAOV PROP quantity.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW00.FH1PAQTY - FH1REC.FH1PAQTY; /* Pral qty*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EM001.FF0EMOPP / 100, -mathLib.decimals(FFXREC.FFXNUMB));
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FH1REC.FH1PAQTY; /* Dirshp pral*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FH1ALQTY; /* Aloc qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW10.FFQOCOPR = FFXREC.FFXROUND; /* Oth caov prop*/

   /* ------------------------------------------------------------*/
   /* Locate the column to be adjusted in map display storage.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    if (FF0EW01.FFABEGMO[1] == FF0EW01.FFQCURMO) /* Beg mo EQ curr*/

      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to LST month*/
    else
      sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Point to OTH month*/

    end

  end

  FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

   /* ------------------------------------------------------------*/
   /* Adjust PROP CARRYOVER by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FF0EWPCO[sysVar.arrayIndex]; /* Prop carryover*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR SLS FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EMMSL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW05.FF6SLFCT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust the current month BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the subtotal BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON) /* Season subtotal*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the accum total BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* move fcst months*/

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/

      /* ------------------------------------------------------------*/
       /* Adjust BAL TO SHP by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQOCOPR;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQOCOPR;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust END INVENTORY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQOCOPR;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

   /* ------------------------------------------------------------*/
   /* Save changed quantity and percent in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FFQOCOPR = FF0EW10.FFQOCOPR; /* Oth caov prop*/
  FF0EW01.FFQOCOPP = FF0EM001.FF0EMOPP; /* Oth caov propct*/


end // end FF0ES32

// Process LST CAOV PROPCT change
Function FF0ES33()
   /* ------------------------------------------------------------*/
   /* Use entered percentage to calculate LST CAOV PROP quantity.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW00.FH1PAQTY - FH1REC.FH1PAQTY; /* Pral qty*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EM001.FF0EMLPP / 100, -mathLib.decimals(FFXREC.FFXNUMB));
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FH1REC.FH1PAQTY; /* Dirshp pral*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW00.FH1ALQTY; /* Aloc qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0EW10.FFQLCOPR = FFXREC.FFXROUND; /* Lst caov prop*/

   /* ------------------------------------------------------------*/
   /* Locate the column to be adjusted in map display storage.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/
    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to LST month*/
  end

  FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/

   /* ------------------------------------------------------------*/
   /* Adjust PROP CARRYOVER by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FF0EWPCO[sysVar.arrayIndex]; /* Prop carryover*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR SLS FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FF0EMMSL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  FF0EW05.FF6SLFCT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust the current month BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the subtotal BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON) /* Season subtotal*/

    /* ------------------------------------------------------------*/
     /* Adjust BAL TO SHP by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* ------------------------------------------------------------*/
     /* Adjust END INVENTORY by the difference in the amounts.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOPR;
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust the accum total BAL TO SHP and END INVENTORY.*/
   /* ------------------------------------------------------------*/

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* more fcst mo*/

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/

      /* ------------------------------------------------------------*/
       /* Adjust BAL TO SHP by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex]; /* Bal to shp*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFQLCOPR;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFQLCOPR;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* ------------------------------------------------------------*/
       /* Adjust END INVENTORY by the difference in the amounts.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFQLCOPR;
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

   /* ------------------------------------------------------------*/
   /* Save changed quantity and percent in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW01.FFQLCOPR = FF0EW10.FFQLCOPR; /* Lst caov prop*/
  FF0EW01.FFQLCOPP = FF0EM001.FF0EMLPP; /* Lst caov propct*/


end // end FF0ES33

// Process PRAL FUTR DMD change
Function FF0ES34()
   /* ------------------------------------------------------------*/
   /* Adjust FUTURES TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set dmd chg switch*/
  if (FF0EW01.FFRPFUDM[FF0EWCOL] > FF0EW10.FFRPFUDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW01.FF0EWFUT[sysVar.arrayIndex]; /* Futures tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMFUT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWFUT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPFUDM[FF0EWCOL] > FF0EW10.FFRPFUDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPFUDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPFUDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPFUDM[FF0EWCOL] > FF0EW10.FFRPFUDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTAF[sysVar.arrayIndex]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust FUT DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDFU[sysVar.arrayIndex]; /* Fut dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDFU[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDFU[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Total fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/

     /* Only the 1st futr dmd subtotal need to include the cancelled qty*/

    if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
    else
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
    end

    FF0EW00.FF0EWPCT = FF0EW00.FF0EWPCT * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Fcst fut %*/
  else
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL FUTR DMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPFUDM[FF0EWCOL] > FF0EW10.FFRPFUDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW01.FFRCFUDM[sysVar.arrayIndex]; /* cancel futr dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPFUDM[FF0EWCOL]; /* before*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPFUDM[FF0EWIXC]; /* after*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMFUC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FFRCFUDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end



   /* ------------------------------------------------------------*/
   /* Adjust PRAL FUTR DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FFRPFUDM[sysVar.arrayIndex]; /* Pral futr dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPFUDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES34

// Calculations based on demand
Function FF0ES35()
   /* ------------------------------------------------------------*/
   /* Calculate FCST SEAS IDX for each month in the season.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FF0EW00.FF0EWEND = sysVar.arrayIndex; /* Ending column*/

    FF0EW00.FF0EWNMO = 0;
    FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
    FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
     && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
     && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
      FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FF0EW00.FF0EWNMO; /* Season begin month*/

  end

  while (sysVar.arrayIndex <= FF0EW00.FF0EWEND) /* Until end of season*/

    if (FF0EW05.FFRCDMFC[FF0EWEND] > 0) /* Season demand GT zero*/

      FF0EW00.FF0EWPCT = FF0EW05.FFRCDMFC[sysVar.arrayIndex] * 100; /* Curr dmd fcst*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[FF0EWEND], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW05.FF0EWFSI[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Fcst seas idx*/

    else

      FF0EW05.FF0EWFSI[sysVar.arrayIndex] = 0; /* Fcst seas idx*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Next season month*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate CURR SLS FCST using the adjusted CURR DMD FCST.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FH5MSHQT[FF0EWCOL];
    FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;

    if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                              FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex])); /* fill rt*/
    else
      if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
      else
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
      end
    end
  end

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FH5MSHQT[FF0EWCOL];
      FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;
      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                              FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex])); /* fill rt*/
      else
        if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
        else
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
        end
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EW05.FF0EWFFR[FF0EWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FF0EW05.FF0EMCSF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FH5MSHQT[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                              FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex])); /* fill rt*/
    else
      if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
      else
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
      end
    end
  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FH5MSHQT[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                              FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex])); /* fill rt*/
      else
        if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
        else
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
        end
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP and END INVENTORY using CURR SLS FCST.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXNUMB;

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXNUMB;

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXNUMB;

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[FF0EWCOL]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW03.FF0EWTDI[FF0EWCOL];
  if (FF0EW01.FF4FCTMO[FF0EWCOL] == FF0EW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR;
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* More fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end FF0ES35

// Process CNCL FUTR DMD change
Function FF0ES36()
   /* ------------------------------------------------------------*/
   /* Adjust FUTURES TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set dmd changed switch to yes*/
  FFXREC.FFXNUMB = FF0EW01.FF0EWFUT[sysVar.arrayIndex]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWFUT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL CANCELLED by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL FUTR DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FFRCFUDM[sysVar.arrayIndex]; /* Cncl futr dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCFUDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCFUDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMFUC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCFUDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES36

// Process PRAL NATL FDMD change
Function FF0ES37()
   /* ------------------------------------------------------------*/
   /* Adjust NATL FUT TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set the dmd changed switch to yes*/
  if (FF0EW01.FFRPNFDM[FF0EWCOL] > FF0EW10.FFRPNFDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW01.FF0EWNFT[sysVar.arrayIndex]; /* Natl fut tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMNFT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FF0EWNFT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPNFDM[FF0EWCOL] > FF0EW10.FFRPNFDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPNFDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPNFDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPNFDM[FF0EWCOL] > FF0EW10.FFRPNFDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTAF[sysVar.arrayIndex]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust NATL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDNF[sysVar.arrayIndex]; /* Natl fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL FUT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Total fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/

     /* Only the 1st futr dmd subtot need to include the cancelled qty*/

    if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
    else
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
    end

    FF0EW00.FF0EWPCT = FF0EW00.FF0EWPCT * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Fcst fut %*/
  else
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL FDMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFRPNFDM[FF0EWCOL] > FF0EW10.FFRPNFDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW01.FFRCNFDM[sysVar.arrayIndex]; /* Cncl futr dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFRPNFDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPNFDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW01.FF0EMNFC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW01.FFRCNFDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL NATL FDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FFRPNFDM[sysVar.arrayIndex]; /* Pral futr dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRPNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRPNFDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/



end // end FF0ES37

// Process CNCL NATL FDMD change
Function FF0ES38()
   /* ------------------------------------------------------------*/
   /* Adjust NATL FUT TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set the dmd changed switch to yes*/
  FFXREC.FFXNUMB = FF0EW01.FF0EWNFT[sysVar.arrayIndex]; /* Natl fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FF0EWNFT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL CANCELLED by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL FDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW01.FFRCNFDM[sysVar.arrayIndex]; /* Cncl futr fdmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW01.FFRCNFDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNFDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW01.FF0EMNFC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW01.FFRCNFDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES38

// Check M002 fields for changes
Function FF0ES39()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMNPC[FF0EWIXC] != FF0EW02.FF0EMNPC[FF0EWEND])

      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF0EM002.FF0EMNPC[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMNPP[FF0EWIXC] != FF0EW02.FF0EMNPP[FF0EWEND])

      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF0EM002.FF0EMNPP[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMPRC[FF0EWIXC] != FF0EW02.FF0EMPRC[FF0EWEND])

      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF0EM002.FF0EMPRC[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM002.FF0EMPRP[FF0EWIXC] != FF0EW02.FF0EMPRP[FF0EWEND])

      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF0EM002.FF0EMPRP[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end


end // end FF0ES39

// Process PRAL PROP DMD change
Function FF0ES40()
   /* ------------------------------------------------------------*/
   /* Adjust PROP TOT by the difference in the amounts.*/
    /* ie: Net bookings*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPPRDM[FF0EWCOL] > FF0EW10.FFRPPRDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW02.FF0EWPRT[sysVar.arrayIndex]; /* Prop tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW02.FF0EMPRT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW02.FF0EWPRT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPPRDM[FF0EWCOL] > FF0EW10.FFRPPRDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPPRDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPPRDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPPRDM[FF0EWCOL] > FF0EW10.FFRPPRDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTAP[sysVar.arrayIndex]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust PROP DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDPR[sysVar.arrayIndex]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDPR[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDPR[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDTP[sysVar.arrayIndex]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Determine CALC PROP FCST for the current month only.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF4FCTMO[sysVar.arrayIndex] == FF0EW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FF0EW04.FF0EWDPR[FF0EWCOL] * FF0EW00.FF0EWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FF0EW00.FF0EWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDNP[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMDCP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FF0EWDCP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust CNCL PROP DMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPPRDM[FF0EWCOL] > FF0EW10.FFRPPRDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW02.FFRCPRDM[sysVar.arrayIndex]; /* Cncl prop dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPPRDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPPRDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW02.FF0EMPRC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW02.FFRCPRDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL PROP DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FFRPPRDM[sysVar.arrayIndex]; /* Pral prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPPRDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES40

// Process CNCL PROP DMD change
Function FF0ES41()
   /* ------------------------------------------------------------*/
   /* Adjust PROP TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FF0EWPRT[sysVar.arrayIndex]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWPRT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL CANCELLED by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL PROP DMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FFRCPRDM[sysVar.arrayIndex]; /* Cncl prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCPRDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMPRC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCPRDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES41

// Process PRAL NATL PDMD change
Function FF0ES42()
   /* ------------------------------------------------------------*/
   /* Adjust NATL PROP TOT by the difference in the amounts.*/
    /* ie: Net bookings*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPNPDM[FF0EWCOL] > FF0EW10.FFRPNPDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW02.FF0EWNPT[sysVar.arrayIndex]; /* Natl prop tot*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW02.FF0EMNPT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW02.FF0EWNPT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL Cancelled by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPNPDM[FF0EWCOL] > FF0EW10.FFRPNPDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total pre-alloc*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPNPDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPNPDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PRE-ALLOC by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDP[sysVar.arrayIndex]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
     /* Note: If there was a decrease in pre-allocate then*/
           /* net bookings will remain the same.*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPNPDM[FF0EWCOL] > FF0EW10.FFRPNPDM[FF0EWIXC])
    /* ======== Next Sentence ========>*/
  else
    FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust TOT ACTIVE PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTAP[sysVar.arrayIndex]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTAP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTAP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust NATL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDNP[sysVar.arrayIndex]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDNP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDNP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


   /* ------------------------------------------------------------*/
   /* Adjust TOTAL PROP by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW04.FF0EWDTP[sysVar.arrayIndex]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMDTP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Determine CALC PROP FCST for the current month only.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF4FCTMO[sysVar.arrayIndex] == FF0EW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FF0EW04.FF0EWDPR[FF0EWCOL] * FF0EW00.FF0EWDIM;
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FF0EW00.FF0EWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDNP[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMDCP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FF0EWDCP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL PDMD by the difference in the amounts.*/
      /* ie.) add diff to cancel qtys if Pre-allocate decreased*/
   /* ------------------------------------------------------------*/

  if (FF0EW02.FFRPNPDM[FF0EWCOL] > FF0EW10.FFRPNPDM[FF0EWIXC])
    FFXREC.FFXNUMB = FF0EW02.FFRCNPDM[sysVar.arrayIndex]; /* Pral prop dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW02.FFRPNPDM[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW10.FFRPNPDM[FF0EWIXC];
    XSFFS10(); /* Translate to thousands*/
    FF0EW02.FF0EMNPC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW02.FFRCNPDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


   /* ------------------------------------------------------------*/
   /* Adjust PRAL NATL PDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FFRPNPDM[sysVar.arrayIndex]; /* Pral prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRPNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRPNPDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES42

// Process CNCL NATL PDMD change
Function FF0ES43()
   /* ------------------------------------------------------------*/
   /* Adjust NATL PROP TOT by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FF0EWNPT[sysVar.arrayIndex]; /* Natl prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FF0EWNPT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOTAL CANCELLED by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDC[sysVar.arrayIndex]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TOT NET BKGS by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW03.FF0EWTDT[sysVar.arrayIndex]; /* Tot net bkgs*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW03.FF0EMTDT[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW03.FF0EWTDT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate CANCELLATION % if TOT NET BKGS greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] > 0) /* Tot net bkgs GT zero*/
    FF0EW00.FF0EWPCT = FF0EW03.FF0EWTDC[sysVar.arrayIndex] * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Cancellation %*/
  else
    FF0EW03.FF0EWCAP[sysVar.arrayIndex] = 0; /* Cancellation %*/
  end

   /* ------------------------------------------------------------*/
   /* Adjust CNCL NATL PDMD by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW02.FFRCNPDM[sysVar.arrayIndex]; /* Cncl natl pdmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW02.FFRCNPDM[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCNPDM[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW02.FF0EMNPC[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW02.FFRCNPDM[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES43

// Check M004 fields for changes
Function FF0ES44()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0EM004.FF2FUIND != FF0EW04.FF2FUIND) /* Futr yr ind*/

    FFWREC.XXXMODID = "S44"; /* Module identification*/
    set FF0EM004.FF2FUIND cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM004.FF0EMPCF[FF0EWIXC] != FF0EW04.FF0EMPCF[FF0EWEND])

      FFWREC.XXXMODID = "S44"; /* Module identification*/
      set FF0EM004.FF0EMPCF[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end


end // end FF0ES44

// Process FUTR YR IND change
Function FF0ES45()
   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF2PRIND = FF0EW01.FF2PRIND; /* Prop yr ind*/
  FF0EW00.FF2FUIND = FF0EM004.FF2FUIND; /* Futr yr ind*/
  FF0EW00.FF2DMIND = FF0EW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FF0EW08.FF0EWHCF = 0; /* Historical combined subtotal*/
  FF0EW08.FF0EWHFU = 0; /* Historical futures subtotal*/
  FF0EW09.FF0EWHCF = 0; /* Historical combined accum total*/
  FF0EW09.FF0EWHFU = 0; /* Historical futures accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate HIST FUT % for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWCOL = 2; /* First season begin*/

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* ===> Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Accum subtotal*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB") /* ===> Season subtotal*/
        if (FF0EW08.FF0EWHCF > 0) /* Subtotal GT zero*/
          FF0EW00.FF0EWPCT = FF0EW08.FF0EWHFU * 100;
          FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW08.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
          FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT;
                                   /* Hist fut %*/
        else
          FF0EW04.FF0EWDHF[FF0EWCOL] = 0; /* Hist fut %*/
        end
        FF0EW09.FF0EWHCF = FF0EW09.FF0EWHCF + FF0EW08.FF0EWHCF; /* accum total*/
        FF0EW09.FF0EWHFU = FF0EW09.FF0EWHFU + FF0EW08.FF0EWHFU; /* accum total*/
        FF0EW08.FF0EWHCF = 0; /* Historical combined subtotal*/
        FF0EW08.FF0EWHFU = 0; /* Historical futures subtotal*/
      end

      /* ------------------------------------------------------------*/
       /* for the Accum total*/
       /* Calculate HIST FUT % if accum total is greater than zero.*/
      /* ------------------------------------------------------------*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Accum subtotal*/
        if (FF0EW09.FF0EWHCF > 0) /* accum total GT zero*/
          FF0EW00.FF0EWPCT = FF0EW09.FF0EWHFU * 100;
          FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW09.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
          FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT;
                                   /* Hist fut %*/
        else
          FF0EW04.FF0EWDHF[FF0EWCOL] = 0; /* Hist fut %*/
        end
      end

    else /* ===> load and sub total data*/

      /* ------------------------------------------------------------*/
       /* Calculate HIST FUT % for each month*/
      /* ------------------------------------------------------------*/

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES06(); /* Sum one year ago history*/

      FF0ES07(); /* Sum two years ago history*/

      if (FF0EW00.FF0EWHCF > 0) /* Combined GT zero*/

        FF0EW00.FF0EWPCT = FF0EW00.FF0EWHFU * 100;
        FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW00.FF0EWHCF, -mathLib.decimals(FF0EW00.FF0EWPCT));
        FF0EW04.FF0EWDHF[FF0EWCOL] = FF0EW00.FF0EWPCT; /* Hist fut %*/

      else

        FF0EW04.FF0EWDHF[FF0EWCOL] = 0; /* Hist fut %*/

      end

      FF0EW08.FF0EWHCF = FF0EW08.FF0EWHCF + FF0EW00.FF0EWHCF; /* Subtotal*/
      FF0EW08.FF0EWHFU = FF0EW08.FF0EWHFU + FF0EW00.FF0EWHFU; /* Subtotal*/

    end /* ===> Season subtotal*/

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Next month of season*/

  end

   /* ------------------------------------------------------------*/
   /* Save the changed FUTR YR IND in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW04.FF2FUIND = FF0EM004.FF2FUIND; /* Futr yr ind*/


end // end FF0ES45

// Process CURR PROP FCST change
Function FF0ES46()
   /* ------------------------------------------------------------*/
   /* Adjust CURR PROP FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set dmd changed switch to yes*/
  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex]; /* Sub or Accum qty*/
    if (FF0EW04.FFRCPRFC[FF0EWCOL] > 0) /* Curr prop fcst GT zero*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FFRCPRFC[FF0EWCOL]; /* - old*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRFC[FF0EWIXC]; /* + new*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXNUMB; /* Number*/
  else
    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[FF0EWCOL]; /* old value*/
    XSFFS10(); /* Translate to thousands*/
    FFXREC.FFXNUMB = FF0EW10.FFRCPRFC[FF0EWIXC] - FFXREC.FFXROUND; /* diff*/
    FF0EW04.FFRCPRFC[FF0EWCOL] = FF0EW04.FFRCPRFC[FF0EWCOL] + FFXREC.FFXNUMB; /* + diff*/
                                                               /* new value*/
    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[FF0EWCOL]; /* new value*/
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMPCF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FFRCPRFC[FF0EWCOL] = FFXREC.FFXNUMB; /* number*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate CURR DMD FCST as TOTAL FUT plus CURR PROP FCST.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FFRCDMFC[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDTF[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCPRFC[FF0EWIXC];
  else
    FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FFRCPRFC[sysVar.arrayIndex];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate FCST FUT % if CURR DMD FCST greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/

    /* Only the 1st futr dmd subtot need to include the cancelled qty*/

    if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
    else
      FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
    end

    FF0EW00.FF0EWPCT = FF0EW00.FF0EWPCT * 100;
    FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Fcst fut %*/
  else
    FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
  end


end // end FF0ES46

// Calculate FCST PROP IDX
Function FF0ES47()
   /* ------------------------------------------------------------*/
   /* Calculate FCST PROP IDX for each month in the season.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FF0EW00.FF0EWEND = sysVar.arrayIndex; /* Ending column*/

    FF0EW00.FF0EWNMO = 0;
    FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
    FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
     && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
     && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
      FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FF0EW00.FF0EWNMO; /* Season begin month*/

  end

  while (sysVar.arrayIndex <= FF0EW00.FF0EWEND) /* Until end of season*/

    if (FF0EW04.FFRCPRFC[FF0EWEND] > 0 /* Season prop GT zero*/
     && FF0EW04.FFRCPRFC[sysVar.arrayIndex] > 0) /* and fcst GT zero*/

      FF0EW00.FF0EWPCT = FF0EW04.FFRCPRFC[sysVar.arrayIndex] * 100; /* Curr prop fcst*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW04.FFRCPRFC[FF0EWEND], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW04.FF0EWDFI[sysVar.arrayIndex] = FF0EW00.FF0EWPCT; /* Fcst prop idx*/

    else

      FF0EW04.FF0EWDFI[sysVar.arrayIndex] = 0; /* Fcst prop idx*/

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* Next season month*/

  end


end // end FF0ES47

// Check M005 fields for changes
Function FF0ES48()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF0EWFFR[FF0EWIXC] != FF0EW05.FF0EWFFR[FF0EWEND])

      FFWREC.XXXMODID = "S48"; /* Module identification*/
      set FF0EM005.FF0EWFFR[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  if (FF0EM005.FF2DMIND != FF0EW05.FF2DMIND) /* Dmd yr ind*/

    FFWREC.XXXMODID = "S48"; /* Module identification*/
    set FF0EM005.FF2DMIND cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF7FRZFL[FF0EWIXC] != FF0EW05.FF7FRZFL[FF0EWEND])

      FFWREC.XXXMODID = "S48"; /* Module identification*/
      set FF0EM005.FF7FRZFL[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM005.FF0EMFCD[FF0EWIXC] != FF0EW05.FF0EMFCD[FF0EWEND])

      FFWREC.XXXMODID = "S48"; /* Module identification*/
      set FF0EM005.FF0EMFCD[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end


end // end FF0ES48

// Process DMD YR IND change
Function FF0ES49()
   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF2PRIND = FF0EW01.FF2PRIND; /* Prop yr ind*/
  FF0EW00.FF2FUIND = FF0EW04.FF2FUIND; /* Futr yr ind*/
  FF0EW00.FF2DMIND = FF0EM005.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FF0EW08.FF0EWHDM = 0; /* Historical demand subtotal*/
  FF0EW09.FF0EWHDM = 0; /* Historical demand accum total*/

   /* ------------------------------------------------------------*/
   /* Accumulate historical demand for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWCOL = 2; /* Current column*/

  while (FF0EW01.FF0EMMON[FF0EWCOL] > "  ") /* ===> More fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* ===> Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Season accum total*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB") /* ===> Season subtotal*/
        FF0EW05.FF0EWHDM[FF0EWCOL] = FF0EW08.FF0EWHDM; /* Hist demand*/
        FF0EW09.FF0EWHDM = FF0EW09.FF0EWHDM + FF0EW08.FF0EWHDM;
                                   /* accum total*/
        FF0EW08.FF0EWHDM = 0; /* Historical demand subtotal*/
      end /* ===> Season subtotal*/

    else

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES06(); /* Sum one year ago history*/

      FF0ES07(); /* Sum two years ago history*/

      FF0EW05.FF0EWHDM[FF0EWCOL] = FF0EW00.FF0EWHDM; /* Hist demand*/

      FF0EW08.FF0EWHDM = FF0EW08.FF0EWHDM + FF0EW00.FF0EWHDM; /* Subtotal*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate HIST SEAS IDX for each month and subtotal.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWCOL = 2; /* First season begin*/

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
      FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Subtotal column*/

      FF0EW00.FF0EWNMO = 0;
      FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
       && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
       && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
        FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
        FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      end

    end

    FF0EW08.FF0EWHDM = FF0EW05.FF0EWHDM[FF0EWCOL]; /* Hist dmd*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWCOL - FF0EW00.FF0EWNMO; /* Season begin*/

    while (FF0EW00.FF0EWIXC <= FF0EW00.FF0EWCOL) /* Until end of season*/

      if (FF0EW08.FF0EWHDM > 0) /* Subtotal demand GT zero*/

        FF0EW00.FF0EWPCT = FF0EW05.FF0EWHDM[FF0EWIXC] * 100;
        FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW08.FF0EWHDM, -mathLib.decimals(FF0EW00.FF0EWPCT));
        FF0EW05.FF0EWHSI[FF0EWIXC] = FF0EW00.FF0EWPCT;

      else

        FF0EW05.FF0EWHSI[FF0EWIXC] = 0; /* Hist seas idx*/

      end

      FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC + 1; /* Next month of season*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Next season begin*/

    /* ------------------------------------------------------------*/
     /* Set HIST SEAS IDX for accum total depending on demand.*/
    /* ------------------------------------------------------------*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Season accum total*/
      if (FF0EW09.FF0EWHDM > 0) /* accum total GT zero*/
        FF0EW05.FF0EWHSI[FF0EWCOL] = 100; /* Hist seas idx*/
      else
        FF0EW05.FF0EWHSI[FF0EWCOL] = 0; /* Hist seas idx*/
      end
      FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Next season begin*/
    end /* ===> Season accum total*/

  end /* ===> more fcst months*/

   /* ------------------------------------------------------------*/
   /* Save the changed DMD YR IND in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW05.FF2DMIND = FF0EM005.FF2DMIND; /* Dmd yr ind*/


end // end FF0ES49

// Process CURR DMD FCST change
Function FF0ES50()
   /* ------------------------------------------------------------*/
   /* Adjust CURR DMD FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set dmd changed switch to yes*/
  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] > 0
     || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
      FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FFRCDMFC;
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FFRCDMFC[FF0EWCOL];
    else
      FF0EW00.FF0EWWRK = sysVar.arrayIndex - FF0EW00.FF0EWCOL;
      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] == 0 /* Subtot in current season*/
       && FF0EW00.FF0EWWRK <= 6)                  
        FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FFRCDMFC;
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FFRCDMFC[FF0EWCOL];
      else
        FFXREC.FFXNUMB = 0;
      end
    end
  else
    FF0EW00.FFRCDMFC = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Prev dmd fcst*/
    FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Curr dmd fcst*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FFRCDMFC[FF0EWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRCDMFC[FF0EWIXC];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW05.FF0EMFCD[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FFRCDMFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate TOTAL FUT or FCST FUT % depending on FCST MO.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO  /* Fcst mo GT buy mo*/
   && FF0EW01.FF0EMMON[sysVar.arrayIndex] != "  SUB" /* and not season subtotal*/
   && FF0EW01.FF0EMMON[sysVar.arrayIndex] != "ACCUM") /* and not accum total*/
    FF0EW00.FF0EWDTF = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Prev total fut*/
    FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex]; /* Total fut*/
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EW04.FF0EWDFF[sysVar.arrayIndex] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  else
    if (FF0EW01.FF4FCTMO[FF0EWCOL] > FF0EW01.FFQMBYMO) /* Fcst mo GT buy mo*/
      if (FF0EW04.FF0EWDTF[sysVar.arrayIndex] > 0
       || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
        FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Total fut*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FF0EWDTF;
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDTF[FF0EWCOL];
        XSFFS10(); /* Translate to thousands*/
        FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
        FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
      else
        FF0EW00.FF0EWWRK = sysVar.arrayIndex - FF0EW00.FF0EWCOL;
        if (FF0EW04.FF0EWDTF[sysVar.arrayIndex] == 0 /* Subtot in current season*/
         && FF0EW00.FF0EWWRK <= 6)                  
          FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex]; /* Total fut*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FF0EWDTF;
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDTF[FF0EWCOL];
          XSFFS10(); /* Translate to thousands*/
          FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands numb*/
          FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded numb*/
        else
          FFXREC.FFXNUMB = 0;
          XSFFS10(); /* Translate to thousands*/
          FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands numb*/
          FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded numb*/
        end
      end
    end
    if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] > 0) /* Curr dmd fcst GT zero*/

      /* Only the 1st futr dmd subtot need to include the cancelled qty*/

      if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
        FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
      else
        FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
      end

      FF0EW00.FF0EWPCT = FF0EW00.FF0EWPCT * 100; /* Fcst fut %*/
      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT;
    else
      FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0; /* Fcst fut %*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Adjust CURR PROP FCST by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
    if (FF0EW04.FFRCPRFC[sysVar.arrayIndex] > 0
     || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/
      FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex]; /* Curr prop fcst*/
      if (FF0EW00.FFRCPRFC > 0) /* Prev prop fcst GT zero*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FFRCPRFC;
      end
      if (FF0EW04.FFRCPRFC[FF0EWCOL] > 0) /* Curr prop fcst GT zero*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FFRCPRFC[FF0EWCOL];
      end
    else
      FF0EW00.FF0EWWRK = sysVar.arrayIndex - FF0EW00.FF0EWCOL;
      if (FF0EW04.FFRCPRFC[sysVar.arrayIndex] == 0 /* Subtot in current season*/
       && FF0EW00.FF0EWWRK <= 6)                  
        FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex]; /* Curr prop fcst*/
        if (FF0EW00.FFRCPRFC > 0) /* Prev prop fcst GT zero*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW00.FFRCPRFC;
        end
        if (FF0EW04.FFRCPRFC[FF0EWCOL] > 0) /* Curr prop fcst GT zero*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FFRCPRFC[FF0EWCOL];
        end
      else
        FFXREC.FFXNUMB = 0;
      end
    end
  else
    FF0EW00.FFRCPRFC = FF0EW04.FFRCPRFC[sysVar.arrayIndex]; /* Prev prop fcst*/
    FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[sysVar.arrayIndex] - FF0EW04.FF0EWDTF[sysVar.arrayIndex];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW04.FF0EMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

end // end FF0ES50

// Process FCST FILL RT change
Function FF0ES51()
   /* ------------------------------------------------------------*/
   /* Accumulate the total of FCST FILL RT for the season.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWDMD = "Y"; /* set dmd changed switch to yes*/
  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FF0EW00.FF0EWEND = sysVar.arrayIndex; /* End of season*/

    FF0EW00.FF0EWNMO = 0;
    FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
    FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
     && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
     && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
      FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
    end

    sysVar.arrayIndex = sysVar.arrayIndex - FF0EW00.FF0EWNMO; /* Season begin*/

  end

  FF0EW05.FF0EWFFR[FF0EWCOL] = FF0EM005.FF0EWFFR[FF0EWIXC];

   /* ------------------------------------------------------------*/
   /* Calculate CURR SLS FCST using the changed FCST FILL RT.*/
   /* ------------------------------------------------------------*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FH5MSHQT[FF0EWCOL];
    FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW05.FH5MSHQT[FF0EWCOL];
      FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0EW05.FF0EWFFR[FF0EWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FF0EW05.FF0EMCSF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW05.FH5MSHQT[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FH5MSHQT[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW05.FH5MSHQT[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW05.FF0EMCSF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW05.FH5MSHQT[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* ------------------------------------------------------------*/
   /* Adjust the season subtotal and accum total FCST FILL RT.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWPOS = FF0EW00.FF0EWCOL;

  while (FF0EW01.FF0EMMON[FF0EWPOS] > " ") /* more forecast month*/

    if ("  SUB" in FF0EW01.FF0EMMON from FF0EWPOS) /* Season subtotal*/

      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                                  FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
      else
        if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
        else
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
        end
      end
    end

    if ("ACCUM" in FF0EW01.FF0EMMON from FF0EWPOS) /* Season accum total*/

      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] != 0)
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FF0EW05.FH5MSHQT[sysVar.arrayIndex] * 100 /                                  FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
      else
        if (FF0EW05.FH5MSHQT[sysVar.arrayIndex] == 0)
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 100;
        else
          FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
        end
      end
    end

    FF0EW00.FF0EWPOS = sysVar.arrayIndex + 1;

  end
   /* ------------------------------------------------------------*/
   /* Adjust BAL TO SHP and END INVENTORY using CURR SLS FCST.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXNUMB;

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXNUMB;

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXNUMB;

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[FF0EWCOL]; /* Curr sls fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW03.FF0EWTDI[FF0EWCOL];
  if (FF0EW01.FF4FCTMO[FF0EWCOL] == FF0EW01.FFQCURMO) /* Fcst mo EQ curr*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU;
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR;
  end
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMBAL[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FG4BALSH[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> ACCUM TOTAL*/
      FFXREC.FFXNUMB = FF0EW06.FG4BALSH[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW06.FG4BALSH[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FG4BALSH[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end FF0ES51

// Check M006 fields for changes
Function FF0ES52()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMSTK[FF0EWIXC] != FF0EW06.FF0EMSTK[FF0EWEND])

      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF0EM006.FF0EMSTK[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  if (FF0EM006.SY2SSCIN != FF0EW06.SY2SSCIN) /* Safety stock class*/

    FFWREC.XXXMODID = "S52"; /* Module identification*/
    set FF0EM006.SY2SSCIN cursor, bold; /* Highlight*/
    converseLib.validationFailed(219); /* Modifications not allowed*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMTBY[FF0EWIXC] != FF0EW06.FF0EMTBY[FF0EWEND])

      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF0EM006.FF0EMTBY[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMDUE[FF0EWIXC] != FF0EW06.FF0EMDUE[FF0EWEND])

      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF0EM006.FF0EMDUE[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end

  FF0EW00.FF0EWIXC = 8; /* Column index*/
  FF0EW00.FF0EWEND = FF0EW00.FF0EWBEG + 7; /* Ending column*/

  while (FF0EW00.FF0EWIXC > 0) /* Until end of columns*/

    if (FF0EM006.FF0EMINB[FF0EWIXC] != FF0EW06.FF0EMINB[FF0EWEND])

      FFWREC.XXXMODID = "S52"; /* Module identification*/
      set FF0EM006.FF0EMINB[FF0EWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWEND = FF0EW00.FF0EWEND - 1; /* Ending column*/
    FF0EW00.FF0EWIXC = FF0EW00.FF0EWIXC - 1; /* Column index*/

  end


end // end FF0ES52

// Process SFTY STK CLS change
Function FF0ES53()
   /* ------------------------------------------------------------*/
   /* Obtain SFTY STK NMO for each month in the forecast.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current month*/
    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/
  end

  while (FF0EW01.FF0EMMON[FF0EWCOL] > "  ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

      /* ========== Next Sentence ==========>*/

    else

      VSWITM02.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Fcst mo*/

      FF0ES08(); /* Select category by month*/

      if (FF0EM006.SY2SSCIN == "A") /* Class A*/
        FF0EW06.FFRSSFCT[FF0EWCOL] = FF7REC.FF7SSCLA; /* Sfty stk nmo*/
      else
        if (FF0EM006.SY2SSCIN == "B") /* Class B*/
          FF0EW06.FFRSSFCT[FF0EWCOL] = FF7REC.FF7SSCLB;
        else
          if (FF0EM006.SY2SSCIN == "C") /* Class C*/
            FF0EW06.FFRSSFCT[FF0EWCOL] = FF7REC.FF7SSCLC;
          else
            FF0EW06.FFRSSFCT[FF0EWCOL] = FF7REC.FF7SSCLD;
          end
        end
      end

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate SFTY STK for each month in the forecast.*/
   /* based on the safety stock factor for given fcst mo.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current month*/
    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/
  end

  while (FF0EW01.FF0EMMON[FF0EWCOL] > "  ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

      /* ========== Next Sentence ==========>*/

    else

      /* ------------------------------------------------------------*/
      /* ===> set-up & process adjustments for the given fcst mo*/
      /* ------------------------------------------------------------*/

      FF0EW00.FF6SFSTK = 0; /* Sfty stk*/
      FF0EW00.FFRSSFCT = FF0EW06.FFRSSFCT[FF0EWCOL]; /* Sfty stk nmo*/
      FF0EW00.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Curr fcst mo*/
      FF0EW00.FF0EWIXT = FF0EW00.FF0EWCOL; /* ===> temp index*/

      FF0ES61(); /* ===> process the adjust. for the given fcst mo*/

      /* ------------------------------------------------------------*/
      /* ===> use the calculated safety stock and save in W.S.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW00.FF6SFSTK; /* load the calc. sfty stk*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FF0EW08.FF6SFSTK = 0; /* Sfty stk subtotal*/
  FF0EW09.FF6SFSTK = 0; /* Sfty stk accum total*/

   /* ------------------------------------------------------------*/
   /* Translate/accumulate SFTY STK for each month and totals.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current month*/
    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/
  end

  while (FF0EW01.FF0EMMON[FF0EWCOL] > "  ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB") /* Season subtotal*/
        FFXREC.FFXNUMB = FF0EW08.FF6SFSTK; /* Subtotal*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
        FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
        FF0EW09.FF6SFSTK = FF0EW09.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/
        FF0EW08.FF6SFSTK = 0; /* Sfty stk subtotal*/
      end

      if (FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/
        FFXREC.FFXNUMB = FF0EW09.FF6SFSTK; /* accum total*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
        FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/
      end

    else

      FFXREC.FFXNUMB = FF0EW06.FF6SFSTK[FF0EWCOL]; /* Sfty stk*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

      FF0EW08.FF6SFSTK = FF0EW08.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end


   /* ------------------------------------------------------------*/
   /* Save the changed SFTY STK CLS in map display storage.*/
   /* ------------------------------------------------------------*/

  FF0EW06.SY2SSCIN = FF0EM006.SY2SSCIN; /* Sfty stk cls*/

end // end FF0ES53

// Process SFTY STK change
Function FF0ES54()
   /* ------------------------------------------------------------*/
   /* Use the entered SFTY STK to calculate SFTY STK NMO.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/

    /* ======== Next Sentence ==============>*/

  else

    FF0EW00.FFRSSFCT = 0; /* Sfty stk nmo*/
    FF0EW00.FF6SFSTK = FF0EW10.FF6SFSTK[FF0EWIXC]; /* Sfty stk*/
    FF0EW00.FF0EWDAT = FF0EW01.FF4FCTMO[sysVar.arrayIndex]; /* Fcst mo*/

    while (FF0EW00.FF6SFSTK > 0) /* Until stk satisfied*/

      FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM + 1; /* Fcst mo*/

      if (FF0EW00.FF0EWDMM > 12) /* Month GT maximum*/
        FF0EW00.FF0EWDMM = FF0EW00.FF0EWDMM - 12;
        FF0EW00.FF0EWDYY = FF0EW00.FF0EWDYY + 1;
      end

      VSWITM02.FF4FCTMO = FF0EW00.FF0EWDAT; /* Fcst mo*/

      FF0ES03(); /* Sum domestic forecast month*/

      if (FF0EW00.FF6SFSTK > FF9REC.FF6SLFCT /* Sfty stk GT sls fcst*/
       && SQLCA.VAGen_SQLCODE == 0)          /* and sls fcst found*/

        FF0EW00.FFRSSFCT = FF0EW00.FFRSSFCT + 1; /* Sfty stk nmo*/

      else

        if (FF9REC.FF6SLFCT > 0) /* Sls fcst GT zero*/

          FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF6SFSTK / FF9REC.FF6SLFCT, -mathLib.decimals(FF0EW00.FF0EWPCT));
          FF0EW00.FFRSSFCT = FF0EW00.FFRSSFCT + FF0EW00.FF0EWPCT;
        else
          FF9REC.FF6SLFCT = FF0EW00.FF6SFSTK; /* Sfty stk*/

        end

      end

      FF0EW00.FF6SFSTK = FF0EW00.FF6SFSTK - FF9REC.FF6SLFCT;

    end

    FF0EW06.FFRSSFCT[sysVar.arrayIndex] = FF0EW00.FFRSSFCT; /* Sfty stk nmo*/

  end

   /* ------------------------------------------------------------*/
   /* Adjust SFTY STK by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF6SFSTK[sysVar.arrayIndex]; /* Sfty stk*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6SFSTK[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6SFSTK[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSTK[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6SFSTK[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES54

// Process BEG INV change
Function FF0ES55()
   /* ------------------------------------------------------------*/
   /* Adjust SUPPLY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6BEINV[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6BEINV[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust END INVENTORY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6BEINV[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6BEINV[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust BEG INV by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FF6BEINV[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FF6BEINV[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINB[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF6BEINV[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES55

// Calculate inventory turns
Function FF0ES56()
   /* ------------------------------------------------------------*/
   /* Calculate INV TURNS using the adjusted END INVENTORY.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB" /* Season subtotal*/
   || FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* or accum total*/

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "  SUB")
      FF0EW00.FF0EWNMO = 0;
      FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      while (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB" /* Not sub*/
       && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM" /* & not accum*/
       && FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
        FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
        FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      end
    end

    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM")
      FF0EW00.FF0EWNMO = 0;
      FF0EW00.FF0EWIXP = sysVar.arrayIndex; /* Prior index*/
      FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      while (FF0EW00.FF0EWIXP > 1) /* & not prior to first sesn*/
        if (FF0EW01.FF0EMMON[FF0EWIXP] != "  SUB"
         && FF0EW01.FF0EMMON[FF0EWIXP] != "ACCUM")
          FF0EW00.FF0EWNMO = FF0EW00.FF0EWNMO + 1; /* Add to mos in sesn ctr*/
        end
        FF0EW00.FF0EWIXP = FF0EW00.FF0EWIXP - 1; /* Decrement prior index*/
      end
    end

    FF0EW00.FF0EWASL = FF0EW05.FF6SLFCT[sysVar.arrayIndex] * 12 * 2;
    FF0EW00.FF0EWAIN = FF0EW06.FF6BEINV[sysVar.arrayIndex]; /* Beg inv*/
    FF0EW00.FF0EWAIN = FF0EW00.FF0EWAIN + FF0EW06.FF0EWINE[sysVar.arrayIndex];
    FF0EW00.FF0EWAIN = FF0EW00.FF0EWAIN * FF0EW00.FF0EWNMO;

  else

    FF0EW00.FF0EWASL = FF9REC.FF6SLFCT * 12;
    FF0EW00.FF0EWAIN = FF0EW06.FF0EWINE[sysVar.arrayIndex] * 3;

  end

  if (FF0EW00.FF0EWAIN > 0) /* Inventory GT zero*/

    FF0EW06.FF0EWTUR[sysVar.arrayIndex] = mathLib.round(FF0EW00.FF0EWASL / FF0EW00.FF0EWAIN, -mathLib.decimals(FF0EW06.FF0EWTUR[sysVar.arrayIndex]));
    if (FF0EW06.FF0EWTUR[sysVar.arrayIndex] > 99.99)
      FF0EW06.FF0EWTUR[sysVar.arrayIndex] = 99.99; /* use default value*/
    else
      if (FF0EW06.FF0EWTUR[sysVar.arrayIndex] < 0)
        FF0EW06.FF0EWTUR[sysVar.arrayIndex] = 0;
      end
    end
  else
    FF0EW06.FF0EWTUR[sysVar.arrayIndex] = 0; /* Inv turns*/

  end


end // end FF0ES56

// Process PRDCTN DUE change
Function FF0ES57()
   /* ------------------------------------------------------------*/
   /* Adjust SUPPLY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRPRDDU[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPRDDU[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust END INVENTORY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRPRDDU[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPRDDU[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust PRDCTN DUE by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FFRPRDDU[sysVar.arrayIndex]; /* Prdctn due*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRPRDDU[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRPRDDU[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMDUE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRPRDDU[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES57

// Process TNTV QTB change
Function FF0ES58()
   /* ------------------------------------------------------------*/
   /* Adjust SUPPLY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWSUP[sysVar.arrayIndex]; /* Supply*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRTENBY[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRTENBY[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMSUP[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWSUP[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust END INVENTORY by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FF0EWINE[sysVar.arrayIndex]; /* End inventory*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRTENBY[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRTENBY[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMINE[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FF0EWINE[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Adjust TNTV QTB by the difference in the amounts.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0EW06.FFRTENBY[sysVar.arrayIndex]; /* Tntv qtb*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW06.FFRTENBY[FF0EWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW10.FFRTENBY[FF0EWIXC];
  XSFFS10(); /* Translate to thousands*/
  FF0EW06.FF0EMTBY[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW06.FFRTENBY[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/


end // end FF0ES58

// Check M007 fields for changes
Function FF0ES59()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXL = 11; /* Line index*/

  while (FF0EW00.FF0EWIXL > 0) /* Until end of lines*/

    if (FF0EM007.FFPCOMNT[FF0EWIXL] != FF0EW07.FFPCOMNT[FF0EWIXL])

      FFWREC.XXXMODID = "S59"; /* Module identification*/
      set FF0EM007.FFPCOMNT[FF0EWIXL] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL - 1; /* Line index*/

  end


end // end FF0ES59

// Calc. SFTY STK adjust  all  mo
Function FF0ES60()
   /* ------------------------------------------------------------*/
   /* Calculate SFTY STK for each month in the forecast.*/
   /* based on the safety stock factor for given fcst mo.*/
   /* ------------------------------------------------------------*/

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* Season accum total*/

      /* ====== Next Sentence ==============>*/

    else

      /* ------------------------------------------------------------*/
      /* ===> set-up & process adjustments for the given fcst mo*/
      /* ------------------------------------------------------------*/

      FF0EW00.FF6SFSTK = 0; /* Sfty stk*/
      FF0EW00.FFRSSFCT = FF0EW06.FFRSSFCT[FF0EWCOL]; /* Sfty stk nmo*/
      FF0EW00.FF4FCTMO = FF0EW01.FF4FCTMO[FF0EWCOL]; /* Curr fcst mo*/
      FF0EW00.FF0EWIXT = FF0EW00.FF0EWCOL; /* ===> temp index*/

      FF0ES61(); /* ===> process the adjust. for the given fcst mo*/

      /* ------------------------------------------------------------*/
      /* ===> use the calculated safety stock and save in W.S.*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FF0EW00.FF6SFSTK; /* load the calc. sfty stk*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the subtotal and accum total accumulators.*/
   /* ------------------------------------------------------------*/

  FF0EW08.FF6SFSTK = 0; /* Sfty stk subtotal*/
  FF0EW09.FF6SFSTK = 0; /* Sfty stk accum total*/

   /* ------------------------------------------------------------*/
   /* Translate/accumulate SFTY STK for each month and totals.*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Current month*/
    FF0EW00.FF0EWCOL = sysVar.arrayIndex; /* Current column*/
  end

  while (FF0EW01.FF0EMMON[FF0EWCOL] > " ") /* ===> more fcst months*/

    if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB" /* ===> Season subtotal*/
     || FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Season accum total*/

                       /* Season subtotal*/
                       /* ---------------*/
      if (FF0EW01.FF0EMMON[FF0EWCOL] == "  SUB") /* Season subtotal*/
        FFXREC.FFXNUMB = FF0EW08.FF6SFSTK; /* Subtotal*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
        FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

        FF0EW09.FF6SFSTK = FF0EW09.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/

        FF0EW08.FF6SFSTK = 0; /* Sfty stk subtotal*/
      end /* ===> Season subtotal*/

                       /* Season accum total*/
                       /* ------------------*/
      if (FF0EW01.FF0EMMON[FF0EWCOL] == "ACCUM") /* ===> Season accum total*/
        FFXREC.FFXNUMB = FF0EW09.FF6SFSTK; /* accum total*/
        XSFFS10(); /* Translate to thousands*/
        FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
        FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

      end /* ===> Season accum total*/

    else

                       /* Season month sfty stk*/
                       /* ---------------------*/
      FFXREC.FFXNUMB = FF0EW06.FF6SFSTK[FF0EWCOL]; /* Sfty stk*/
      XSFFS10(); /* Translate to thousands*/
      FF0EW06.FF0EMSTK[FF0EWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0EW06.FF6SFSTK[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

      FF0EW08.FF6SFSTK = FF0EW08.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/

    end

    FF0EW00.FF0EWCOL = FF0EW00.FF0EWCOL + 1; /* Current column*/

  end

end // end FF0ES60

// adjust SFTY STK        each mo
Function FF0ES61()
   /* ------------------------------------------------------------*/
   /* Adjust the safety stock for the given fcst mo*/
      /* in relation to the safety stock factor*/
   /* ------------------------------------------------------------*/


  while (FF0EW00.FFRSSFCT > 0 /* Until safety stock factor processed*/
   && FF0EW01.FF0EMMON[FF0EWIXT] > "  ") /* More fcst months*/

    /* ===> incr. temp index to get next curr sls fcst*/
    FF0EW00.FF0EWIXT = FF0EW00.FF0EWIXT + 1;

    if (FF0EW01.FF0EMMON[FF0EWIXT] == "  SUB") /* Season subtotal*/
      /* ===> incr. temp index to get next curr sls fcst*/
      FF0EW00.FF0EWIXT = FF0EW00.FF0EWIXT + 1;
    end

    if (FF0EW01.FF0EMMON[FF0EWIXT] == "ACCUM") /* Season accum total*/
      /* ===> incr. temp index to get next curr sls fcst*/
      FF0EW00.FF0EWIXT = FF0EW00.FF0EWIXT + 1; /* ==> set to next mo*/
    end

    if (FF0EW01.FF0EMMON[FF0EWIXT] == "     ") /* No more fcst months*/
      FF0EW00.FF6SLFCT = 0; /* ===> curr sls fcst*/
    end

    FF0EW00.FF6SLFCT = FF0EW05.FH5MSHQT[FF0EWIXT]; /* curr sls fcst*/

    if (FF0EW00.FFRSSFCT >= 1) /* Factor of one month or more*/
      FF0EW00.FFRSSFCT = FF0EW00.FFRSSFCT - 1; /* Sfty stk nmo*/
    else
      FF0EW00.FF6SLFCT = mathLib.round(FF0EW00.FF6SLFCT * FF0EW00.FFRSSFCT, -mathLib.decimals(FF0EW00.FF6SLFCT));
      FF0EW00.FFRSSFCT = FF0EW00.FFRSSFCT - FF0EW00.FFRSSFCT;
    end

    FF0EW00.FF6SFSTK = FF0EW00.FF6SFSTK + FF0EW00.FF6SLFCT;

  end /* ===> process of the sfty stk factor*/


end // end FF0ES61

// Calc fill rate prior to curr
Function FF0ES63()
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd*/
     /* - first determine which if any carry over QTYs to use*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = 0; /* ===> init W.S. Accumulator*/

  if (FF0EW01.FFQCURMO in FF0EW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "S63"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0EW00.FF0EWDAT = FF0EW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0EW00.FF0EWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd)*/
   /* ------------------------------------------------------------*/

  if (FF0EW01.FFABEGMO == FF0EW01.FFQCURMO) /* Beg mo EQ curr*/

    if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
    end
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0EW08.FF0EWFFR = FF0EW08.FF0EWFFR + FF0EW05.FF0EWFFR[sysVar.arrayIndex];
    end

  else /* ==================> not Beg mo EQ*/
                                   /* curr*/

    if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
    end
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0EW08.FF0EWFFR = FF0EW08.FF0EWFFR + FF0EW05.FF0EWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior 2nd month*/

    if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
    else
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW01.FFQOCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
    end
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0EW08.FF0EWFFR = FF0EW08.FF0EWFFR + FF0EW05.FF0EWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/

    while (sysVar.arrayIndex > 0) /* ===>until all prior to curr months processed*/

      if (FF0EW03.FF0EWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = 0;
      else
        FFXREC.FFXNUMB = FF0EW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
        /* ====> no carry over QTYs to apply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
        FF0EW05.FF0EWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0EW03.FF0EWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0EW05.FF0EWFFR[sysVar.arrayIndex]));
      end
      if (sysVar.arrayIndex > 1) /* Not first column*/
        FF0EW08.FF0EWFFR = FF0EW08.FF0EWFFR + FF0EW05.FF0EWFFR[sysVar.arrayIndex];
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    end


  end


   /* **                                                        ***/
   /* ********************** End of FF0ES63 ***********************/
end // end FF0ES63

// Process FCST FUT %   change
Function FF0ES64()
   /* ------------------------------------------------------------*/
   /* Calc fields the related to FCST FUT % change*/
    /* ie.)  Tot futures    = curr dmd * Fcst fut %*/
          /* Curr prop fcst = Curr dmd - Tot futures*/

   /* ------------------------------------------------------------*/


  FF0EW04.FF0EWDFF[FF0EWCOL] = FF0EM004.FF0EWDFF[FF0EWIXC];


   /* ------------------------------------------------------------*/
   /* Calculate Total futures using the changed fcst fut %.*/
   /* ------------------------------------------------------------*/

   /* ===> subtract out the old QTYS*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FF0EWDTF[FF0EWCOL];
    FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* accum total*/
      FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FF0EWDTF[FF0EWCOL];
      FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* ===> calc the new QTYS*/
    /* ie.)  Tot futures    = curr dmd * Fcst fut %*/

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL] * FF0EW04.FF0EWDFF[FF0EWCOL];
  FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / 100, -mathLib.decimals(FFXREC.FFXNUMB));

  XSFFS10(); /* Translate to thousands*/

  FF0EW04.FF0EMDTF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FF0EWDTF[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ===> add in the new QTYS*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDTF[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    /* now calc the sub   total as ---> futures / curr dmd fcst*/
    if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] == 0)
      FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0;
    else

      /* Only the 1st futr dmd subtot need to include the cancelled qty*/

      if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
        FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
      else
        FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
      end

      FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT * 100 / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
      FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT;
    end

  end

  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FF0EWDTF[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW04.FF0EMDTF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW04.FF0EWDTF[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

      /* now calc the accum total as ---> futures / curr dmd fcst*/
      if (FF0EW05.FFRCDMFC[sysVar.arrayIndex] == 0)
        FF0EW04.FF0EWDFF[sysVar.arrayIndex] = 0;
      else

        /* Only the 1st futr dmd subtot need to include the cancelled qty*/

        if (sysVar.arrayIndex == FF0EW00.FF0EW-1ST-SUB)
          FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex] + FF0EW00.FF0EW-CNCL;
        else
          FF0EW00.FF0EWPCT = FF0EW04.FF0EWDTF[sysVar.arrayIndex];
        end

        FF0EW00.FF0EWPCT = mathLib.round(FF0EW00.FF0EWPCT * 100 / FF0EW05.FFRCDMFC[sysVar.arrayIndex], -mathLib.decimals(FF0EW00.FF0EWPCT));
        FF0EW04.FF0EWDFF[sysVar.arrayIndex] = FF0EW00.FF0EWPCT;
      end
    end /* ===> accum total*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

   /* ------------------------------------------------------------*/
   /* Calculate CURR PROP FCST using the changed Futures.*/
   /* ------------------------------------------------------------*/

   /* ===> subtract out the old QTYS*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/

    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FFRCPRFC[FF0EWCOL];
    FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXNUMB;

  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FFRCPRFC[FF0EWCOL];
      FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXNUMB;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

   /* ===> calc the new QTYS*/
          /* Curr prop fcst = Curr dmd - Tot futures*/

  FFXREC.FFXNUMB = FF0EW05.FFRCDMFC[FF0EWCOL]; /* Curr dmd fcst*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0EW04.FF0EWDTF[FF0EWCOL];

  XSFFS10(); /* Translate to thousands*/

  FF0EW04.FF0EMPCF[FF0EWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0EW04.FFRCPRFC[FF0EWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ===> add in the new QTYS*/

  if ("  SUB" in FF0EW01.FF0EMMON from FF0EWCOL) /* Season subtotal*/
    FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FFRCPRFC[FF0EWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0EW04.FF0EMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
  end


  while (FF0EW01.FF0EMMON[sysVar.arrayIndex] > " ") /* ===> more fcst months*/
    if (FF0EW01.FF0EMMON[sysVar.arrayIndex] == "ACCUM") /* ===> accum total*/
      FFXREC.FFXNUMB = FF0EW04.FFRCPRFC[sysVar.arrayIndex];
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0EW04.FFRCPRFC[FF0EWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0EW04.FF0EMPCF[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
      FF0EW04.FFRCPRFC[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end /* ===> more fcst months*/

end // end FF0ES64

// select VRCMTH01
Function FF0ES65()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFBEGMO = FFDREC.FFABEGMO;
  FFFREC.FFFENDMO = FFDREC.FFAENDMO;

  FFFFUNCD = "S";

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* select dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S65"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT     DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0ES65

// Add TSQ page for map M008
Function FF0ES66()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0EW15.XXXTSLEN = FF0EW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0EW15, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF0EW15 empty; /* M008 display storage*/

    FF0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S66"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M008"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES66

// Read TSQ page
Function FF0ES67()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FF0EW15.XXXTSLEN = FF0EW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FF0EW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0EW15, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S67"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M008"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES67

// Check M008 fields for change
Function FF0ES68()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data field that was changed.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWIXL = 13; /* Line index*/

  while (FF0EW00.FF0EWIXL > 0) /* Until end of lines*/

    if (FF0EM008.FF0EMNTE[FF0EWIXL] != FF0EW15.FF0EWNTE[FF0EWIXL])

      FFWREC.XXXMODID = "S68"; /* Module identification*/
      set FF0EM008.FF0EMNTE[FF0EWIXL] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL - 1; /* Line index*/

  end


end // end FF0ES68

// Update TSQ page for map M008
Function FF0ES69()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FF0EW15, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF0EW15 empty; /* Clear M008 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S69"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M008"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES69

// Check swhdr change count
Function FF0ES70()
   /* ------------------------------------------------------------*/
   /* Select and open cursor for worksheet to be checked.*/
   /* ------------------------------------------------------------*/

  FF0ES71(); /* Open worksheet header cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch & check header change count.*/
   /* ------------------------------------------------------------*/


  FF0ES72(); /* Fetch next worksheet header*/

  if (FFQREC.ZZZCHGDT != FF0EW00.FF0EWSCD
   || FFQREC.ZZZCHGTM != FF0EW00.FF0EWSCT
   || FFQREC.ZZZCHGCT != FF0EW00.FF0EWSCC)
    FFWREC.XXXMODID = "S70"; /* Module identification*/
    converseLib.validationFailed(458); /* Data updtd by another*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected master worksheets.*/
   /* ------------------------------------------------------------*/

  FF0ES73(); /* Close worksheet header cursor*/


end // end FF0ES70

// Open SWHDR cursor
Function FF0ES71()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  FFQREC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FFQREC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FFQREC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FFQREC.FFABEGMO = -1; /* Forecast begin month*/
  FFQREC.XWSCD = "01";
  FFQREC.SY2SSCIN = "*"; /* Safety stock class*/
  FFQREC.FFQMBYMO = -1; /* Main buy month*/
  FFQREC.FFQABYMO = -1; /* Actl buy month*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/

  try
    call "IO3810" ("S2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S71"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES71

// Fetch next SWHDR "S2"
Function FF0ES72()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("N2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT WORKSHEET HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES72

// Close SWHDR "S2" cursor
Function FF0ES73()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3810" ("C2", SQLCA, FFQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S73"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE WORKSHEET HEADER CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES73

// Purge TSQ pages
Function FF0ES74()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0EW15, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S74"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M008"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0ES74

// Sum invoice/order quantities
Function FF0ES75()
   /* ------------------------------------------------------------*/
   /* Sum open bulk orders.*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

  FH1REC.YSMXOT = "BN"; /* Order type group code*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FF0EW00.FF0EWDAT = VSWITM02.FF4FCTMO; /* Beginning month*/

  TA1REC.TA1PGMNM = "FF0ES75"; /* Calling process*/

  FF0ES28(); /* Summarize VOQSTY01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/

   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities.*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

  FH1REC.YSMXOT = "BZ"; /* Order type group code*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FF0EW00.FF0EWDAT = VSWITM02.FF4FCTMO; /* Beginning month*/

  TA1REC.TA1PGMNM = "FF0ES75"; /* Calling process*/

  FF0ES28(); /* Summarize VOQSTY01 quantities*/


   /* ------------------------------------------------------------*/
   /* Calculate the reserved inventory ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWRIN = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
  FF0EW00.FF0EWRIN = FF0EW00.FF0EWRIN + FF0EW00.FF0EWOBK; /* Open bulk qty*/


end // end FF0ES75

// Sum invoice/order quantities
Function FF0ES76()
   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities only for the current month.*/
   /* Roll all previous months and current months quantities into*/
   /* the current month.  Previous months on the screen will have*/
   /* no quantity in that month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO)
    FF0EW00.FF0EWRIN = 0;
  else
    set FH1REC empty; /* Clear row storage area*/
    FH1REC.YSMXOT = "BN"; /* Order type group code*/
    FH3REC.XDSCD = "*"; /* Direct ship code*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    TA1REC.TA1PGMNM = "FF0ES76"; /* Calling process*/
    FF0ES77(); /* Summarize VOQSTY01 quantities*/
    FF0EW00.FF0EWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
    set FH1REC empty; /* Clear row storage area*/
    FH1REC.YSMXOT = "BZ"; /* Order type group code*/
    FH3REC.XDSCD = "*"; /* Direct ship code*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    TA1REC.TA1PGMNM = "FF0ES76"; /* Calling process*/
    FF0ES77(); /* Summarize VOQSTY01 quantities*/
  end


   /* ------------------------------------------------------------*/
   /* Calculate the reserved inventory ordered quantities.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO < FF0EW01.FFQCURMO)
    FF0EW00.FF0EWRIN = 0;
  else
    FF0EW00.FF0EWRIN = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
    FF0EW00.FF0EWRIN = FF0EW00.FF0EWRIN + FF0EW00.FF0EWOBK; /* Open bulk qty*/
  end

   /* ------------------------------------------------------------*/
   /* Sum open bulk orders like in FF0ES75*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

  FH1REC.YSMXOT = "BN"; /* Order type group code*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FF0EW00.FF0EWDAT = VSWITM02.FF4FCTMO; /* Beginning month*/

  TA1REC.TA1PGMNM = "FF0ES76"; /* Calling process*/

  FF0ES28(); /* Summarize VOQSTY01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0EW00.FF0EWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/

end // end FF0ES76

// Summarize VOQSTY01 quantities
Function FF0ES77()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the order history by style/color table.*/
   /* ------------------------------------------------------------*/

  FH1REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FH1REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FH1REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

   /* MOVE FF0EW00.FF0EWDAT TO FFFREC.FFFBEGMO; /* Beginning month*/
   /* MOVE FF0EW00.FF0EWDAT TO FFFREC.FFFENDMO; /* Ending month*/

  try
    call "IO4100" (FFFREC, SQLCA, FH1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no rows selected*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S77"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE VOQSTY01 QUANTITIES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOQSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH1REC.FH1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES77

// Load product activity comments
Function FF0ES80()
  if (FF0EW00.FF0EWIXT > 13) /* Page is full*/
    FF0ES66(); /* Add tsq page*/
    FF0EW00.FF0EWIXT = 1; /* Reset comment index*/
  end

  FF0EW00.FF0EW-PROD-CMT = FFPREC.FFPCOMNT;

  if (FF0EW00.FF0EW-CMT-ID == "* DATE & ID * ") /* beginning of each cmnt*/

    FF0EW15.FF0EWDTE[FF0EWIXT] = FF0EW00.FF0EW-CMT-DATE; /* date*/
    FF0EW15.FF0EWUSR[FF0EWIXT] = FF0EW00.FF0EW-CMT-USRID; /* usrid*/

    /* The 1st line of the comment is the date and usrid*/
    /* so, no need to increase the line index*/

  else

    FF0EW15.FF0EWNTE[FF0EWIXT] = FF0EW00.FF0EW-PROD-CMT; /* cmnts*/

    if (FF0EW00.FF0EW-PROD-CMT != " ") /* Comment exists*/
      FF0EW00.FF0EW-LST-ROW = FF0EW00.FF0EWIXT;
                                                  /* Save the last row indx*/
    end

    FF0EW00.FF0EWIXT = FF0EW00.FF0EWIXT + 1;

  end
end // end FF0ES80

// Insert wksht prod actvty comnt
Function FF0ES81()

  set FFPREC empty; /* Clear worksht comment record*/

  FFPREC.FFEWSNBR = FF1REC.FF1WSNBR; /* Worksht nbr*/
  FFPREC.FFPCTIND = "P"; /* Comment type*/

  FFPREC.FFPCMSEQ = 1; /* Sequence number*/
  FF0EW00.XXXTSPAG = 1; /* page number*/

  while (FF0EW00.XXXTSPAG <= FF0EW00.TA5TSQIX) /* Until the last page*/

    FF0ES67(); /* Read TSQ page*/

    FF0EW00.FF0EWIXL = 1; /* Comment index*/

    while (FF0EW00.FF0EWIXL <= 13)

      if (FF0EW15.FF0EWDTE[FF0EWIXL] != " ") /* date & userid*/
        FF0EW00.FF0EW-CMT-ID = "* DATE & ID * "; /* Comment ID*/
        FF0EW00.FF0EW-CMT-DATE = FF0EW15.FF0EWDTE[FF0EWIXL];
        FF0EW00.FF0EW-CMT-USRID = FF0EW15.FF0EWUSR[FF0EWIXL];
        FFPREC.FFPCOMNT = FF0EW00.FF0EW-PROD-CMT;
        FF0ES82(); /* Add product activity comment row*/
        FFPREC.FFPCMSEQ = FFPREC.FFPCMSEQ + 1; /* Sequence nbr*/
      end

      FF0EW00.FF0EW-PROD-CMT = FF0EW15.FF0EWNTE[FF0EWIXL];
      FFPREC.FFPCOMNT = FF0EW00.FF0EW-PROD-CMT;
      FF0ES82(); /* Add product activity comment row*/
      FFPREC.FFPCMSEQ = FFPREC.FFPCMSEQ + 1; /* Sequence nbr*/
      FF0EW00.FF0EWIXL = FF0EW00.FF0EWIXL + 1;

    end

    FF0EW00.XXXTSPAG = FF0EW00.XXXTSPAG + 1; /* Increment TSQ page nbr*/

  end

end // end FF0ES81

// Add product activity comments
Function FF0ES82()
   /* ------------------------------------------------------------*/
   /* Format and insert the worksheet comment table row.*/
   /* ------------------------------------------------------------*/

  FFPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FFPREC.ZZZCHGCT = 0; /* Change count*/

  try
    call "IO3800" ("A ", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S82"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT WORKSHEET COMMENT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES82

// Delete prod activity comments
Function FF0ES83()
  set FFPREC empty;

  FFPREC.FFEWSNBR = FFQREC.FFEWSNBR; /* Worksheet nbr*/
  FFPREC.FFPCTIND = "P"; /* Comment type*/
  FFPREC.FFPCMSEQ = 1; /* Sequence nbr*/

  try
    call "IO3800" ("S ", SQLCA, FFPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0ES26(); /* Delete the comment wrksht*/
      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S83"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ WORKSHEET COMMENT ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWCMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFPREC.FFPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0ES83

// Init FF0EW00 fields
Function FF0ES99()
   /* ------------------------------------------------------------*/
   /* Init FF0EW00 fields.*/
   /* ------------------------------------------------------------*/


  FF0EW00.FF6BEINV = 0;
  FF0EW00.FF6SUGBY = 0;
  FF0EW00.FF6SFSTK = 0;
  FF0EW00.FF6SLFCT = 0;
  FF0EW00.FF4FCTMO = 0;
  FF0EW00.FF0EWSF = 0;
  FF0EW00.FFRSSFCT = 0;

end // end FF0ES99

//*** RECORD=FF0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 1/21/91 MDANGE add FF0EWTIM to hold hhmm of last work ws add
// 3/05/91 MDANGE add FF0EWDMD flag to indicate demand data chg
// ***********************
Record FF0EW00 type basicRecord
  10 FF0EWAIN FF0EWAIN ; 
  10 FF0EWASL FF0EWASL ; 
  10 FF0EWBEG FF0EWBEG ; 
  10 FF0EWCOL FF0EWCOL ; 
  10 FF0EWPOS FF0EWPOS ; 
  10 FF0EWWRK FF0EWWRK ; 
  10 FF0EWEND FF0EWEND ; 
  10 FF0EWNMO FF0EWNMO ; 
  10 FF0EWMAX FF0EWMAX ; 
  10 FF0EWDAT FF0EWDAT ; 
    15 FF0EWDYY FF0EWDYY ; 
    15 FF0EWDMM FF0EWDMM ; 
  10 FF0EWDIM FF0EWDIM ; 
  10 FF0EWDTD FF0EWDTD ; 
  10 FF0EWTIM FF0EWTIM ; 
  10 FF0EWHCF FF0EWHCF ; 
  10 FF0EWHIN FF0EWHIN ; 
  10 FF0EWHOR FF0EWHOR ; 
  10 FF0EWHDM FF0EWHDM ; 
  10 FF0EWHFU FF0EWHFU ; 
  10 FF0EWHPR FF0EWHPR ; 
  10 FF0EWWIC FF0EWWIC ; 
  10 FF0EWIXC FF0EWIXC ; 
  10 FF0EWIXL FF0EWIXL ; 
  10 FF0EWIXS FF0EWIXS ; 
  10 FF0EWIXP FF0EWIXP ; 
  10 FF0EWIXT FF0EWIXT ; 
  10 FF0EWIXW FF0EWIXW ; 
  10 FF0EWLRS FF0EWLRS ; 
  10 FF0EWPAD FF0EWPAD ; 
  10 FF0EWPAG FF0EWPAG ; 
  10 FF0EWPCT FF0EWPCT ; 
  10 FF0EWSWC FF0EWSWC ; 
  10 FF0EWSWF FF0EWSWF ; 
  10 FF0EWSWH FF0EWSWH ; 
  10 FF0EWSWI FF0EWSWI ; 
  10 FF0EWSWR FF0EWSWR ; 
  10 FF0EWSW1 FF0EWSW1 ; 
  10 FF0EWDMD FF0EWDMD ; 
  10 FF0EWBSW FF0EWBSW ; 
  10 FF0EWTFD FF0EWTFD ; 
  10 FF0EWTFI FF0EWTFI ; 
  10 FF0EWTUD FF0EWTUD ; 
  10 FF0EWTUI FF0EWTUI ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF6BEINV FF6BEINV ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF4FCTMO FF4FCTMO ; 
  10 FF0EWSF FF0EWSF ; 
  10 FFRSSFCT FFRSSFCT ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF0EWDTF FF0EWDTF ; 
  10 FFZINDMO FFZINDMO ; 
    15 * char(2) ; 
    15 FF0EWMON FF0EWMON ; 
  10 FH1PAQTY FH1PAQTY ; 
  10 FH1ALQTY FH1ALQTY ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 PG7MAXPR PG7MAXPR ; 
  10 XPLCD XPLCD ; 
  10 XLCCD XLCCD ; 
  10 XPRCD XPRCD ; 
  10 FF0EWSFS FF0EWSFS ; 
  10 FF0EWSCD FF0EWSCD ; 
  10 FF0EWSCT FF0EWSCT ; 
  10 FF0EWSCC FF0EWSCC ; 
  10 FF0EW-CMT-CHNG FF0EW-CMT-CHNG ; 
  10 FF0EW-PROD-CMT FF0EW-PROD-CMT ; 
    15 FF0EW-CMT-ID FF0EW-CMT-ID ; 
    15 FF0EW-CMT-DATE FF0EW-CMT-DATE ; 
      20 FF0EW-CMT-MM FF0EW-CMT-MM ; 
      20 FF0EW-CMT-DASH1 FF0EW-CMT-DASH1 ; 
      20 FF0EW-CMT-DD FF0EW-CMT-DD ; 
      20 FF0EW-CMT-DASH2 FF0EW-CMT-DASH2 ; 
      20 FF0EW-CMT-YY FF0EW-CMT-YY ; 
    15 FF0EW-CMT-USRID FF0EW-CMT-USRID ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FF0EWPGN FF0EWPGN ; 
  10 FF0EW-LST-ROW FF0EW-LST-ROW ; 
  10 FF0EW-LST-PAG FF0EW-LST-PAG ; 
  10 FF0EW-LST-PRCSS-DT FF0EW-LST-PRCSS-DT ; 
  10 FF0EW-LST-PRCSS-USR FF0EW-LST-PRCSS-USR ; 
  10 FF0EW-CNCL FF0EW-CNCL ; 
  10 FF0EW-1ST-SUB FF0EW-1ST-SUB ; 
  10 FF0EW-1ST-TIME-FL FF0EW-1ST-TIME-FL ; 
  10 FF0EW-PC-PO-ID-MO-RNG FF0EW-PC-PO-ID-MO-RNG ; 
    15 FF0EW-FILLER FF0EW-FILLER ; 
    15 FF0EW-PC-PO-ID-CCYYMM FF0EW-PC-PO-ID-CCYYMM ; 
      20 FF0EW-PC-PO-ID-CCYY FF0EW-PC-PO-ID-CCYY ; 
      20 FF0EW-PC-PO-ID-PM FF0EW-PC-PO-ID-PM ; 
    15 FF0EW-PC-PO-ID-DM FF0EW-PC-PO-ID-DM ; 
  10 FF0EWOBK FF0EWOBK ; 
  10 FF0EWRIN FF0EWRIN ; 
end // end FF0EW00

//*** RECORD=FF0EW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0EW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FFWMODSW FFWMODSW ; 
  10 FF0EWQTB FF0EWQTB ; 
  10 FF0EWCMO FF0EWCMO ; 
    15 * num(3) ; 
    15 FF0EWCCY FF0EWCCY ; 
    15 FF0EWCMM FF0EWCMM ; 
  10 * char(1) ; 
  10 FF0EWPMO FF0EWPMO ; 
    15 * num(3) ; 
    15 FF0EWPCY FF0EWPCY ; 
    15 FF0EWPMM FF0EWPMM ; 
  10 * char(1) ; 
  10 * char(1) ; 
  10 TAEDESC2 TAEDESC2 ; 
    15 * char(7) [9] ; 
      20 FF0EWNBR FF0EWNBR ; 
      20 * char(1) ; 
    15 * char(5) ; 
  10 FF0EWSNO FF0EWSNO [12] ; 
  10 FFABEGMO FFABEGMO [12] ; 
  10 FFAENDMO FFAENDMO [12] ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FFQCURMO FFQCURMO ; 
  10 FF2PRIND FF2PRIND ; 
  10 FFQDMDDT FFQDMDDT ; 
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FFQLCOFP FFQLCOFP ; 
  10 FFQLCOPP FFQLCOPP ; 
  10 FFQOCOFP FFQOCOFP ; 
  10 FFQOCOPP FFQOCOPP ; 
  10 FF4FCTMO FF4FCTMO [61] ; 
  10 FF0EMMON FF0EMMON [61] ; 
  10 FF0EWFCO FF0EWFCO [61] ; 
  10 FF0EMFCO FF0EMFCO [61] ; 
  10 FF0EWPCO FF0EWPCO [61] ; 
  10 FF0EMPCO FF0EMPCO [61] ; 
  10 FFRPFUDM FFRPFUDM [61] ; 
  10 FF0EMFUP FF0EMFUP [61] ; 
  10 FFRAFUDM FFRAFUDM [61] ; 
  10 FF0EMFUA FF0EMFUA [61] ; 
  10 FFRIFUDM FFRIFUDM [61] ; 
  10 FF0EMFUI FF0EMFUI [61] ; 
  10 FFRCFUDM FFRCFUDM [61] ; 
  10 FF0EMFUC FF0EMFUC [61] ; 
  10 FF0EWFUT FF0EWFUT [61] ; 
  10 FF0EMFUT FF0EMFUT [61] ; 
  10 FFRPNFDM FFRPNFDM [61] ; 
  10 FF0EMNFP FF0EMNFP [61] ; 
  10 FFRANFDM FFRANFDM [61] ; 
  10 FF0EMNFA FF0EMNFA [61] ; 
  10 FFRINFDM FFRINFDM [61] ; 
  10 FF0EMNFI FF0EMNFI [61] ; 
  10 FFRCNFDM FFRCNFDM [61] ; 
  10 FF0EMNFC FF0EMNFC [61] ; 
  10 FF0EWNFT FF0EWNFT [61] ; 
  10 FF0EMNFT FF0EMNFT [61] ; 
end // end FF0EW01

//*** RECORD=FF0EW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FF0EW02 type basicRecord
  10 FFRPPRDM FFRPPRDM [61] ; 
  10 FF0EMPRP FF0EMPRP [61] ; 
  10 FFRAPRDM FFRAPRDM [61] ; 
  10 FF0EMPRA FF0EMPRA [61] ; 
  10 FFRIPRDM FFRIPRDM [61] ; 
  10 FF0EMPRI FF0EMPRI [61] ; 
  10 FFRCPRDM FFRCPRDM [61] ; 
  10 FF0EMPRC FF0EMPRC [61] ; 
  10 FF0EWPRT FF0EWPRT [61] ; 
  10 FF0EMPRT FF0EMPRT [61] ; 
  10 FFRPNPDM FFRPNPDM [61] ; 
  10 FF0EMNPP FF0EMNPP [61] ; 
  10 FFRANPDM FFRANPDM [61] ; 
  10 FF0EMNPA FF0EMNPA [61] ; 
  10 FFRINPDM FFRINPDM [61] ; 
  10 FF0EMNPI FF0EMNPI [61] ; 
  10 FFRCNPDM FFRCNPDM [61] ; 
  10 FF0EMNPC FF0EMNPC [61] ; 
  10 FF0EWNPT FF0EWNPT [61] ; 
  10 FF0EMNPT FF0EMNPT [61] ; 
end // end FF0EW02

//*** RECORD=FF0EW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FF0EW03 type basicRecord
  10 FF0EWTDP FF0EWTDP [61] ; 
  10 FF0EMTDP FF0EMTDP [61] ; 
  10 FF0EWTDA FF0EWTDA [61] ; 
  10 FF0EMTDA FF0EMTDA [61] ; 
  10 FF0EWTDI FF0EWTDI [61] ; 
  10 FF0EMTDI FF0EMTDI [61] ; 
  10 FF0EWTDC FF0EWTDC [61] ; 
  10 FF0EMTDC FF0EMTDC [61] ; 
  10 FF0EWTDT FF0EWTDT [61] ; 
  10 FF0EMTDT FF0EMTDT [61] ; 
  10 FF0EWCAP FF0EWCAP [61] ; 
  10 FF0EWTAF FF0EWTAF [61] ; 
  10 FF0EMTAF FF0EMTAF [61] ; 
  10 FF0EWTAP FF0EWTAP [61] ; 
  10 FF0EMTAP FF0EMTAP [61] ; 
end // end FF0EW03

//*** RECORD=FF0EW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record FF0EW04 type basicRecord
  10 FF2FUIND FF2FUIND ; 
  10 FF0EWDFU FF0EWDFU [61] ; 
  10 FF0EMDFU FF0EMDFU [61] ; 
  10 FF0EWDNF FF0EWDNF [61] ; 
  10 FF0EMDNF FF0EMDNF [61] ; 
  10 FF0EWDTF FF0EWDTF [61] ; 
  10 FF0EMDTF FF0EMDTF [61] ; 
  10 FF0EWDPR FF0EWDPR [61] ; 
  10 FF0EMDPR FF0EMDPR [61] ; 
  10 FF0EWDNP FF0EWDNP [61] ; 
  10 FF0EMDNP FF0EMDNP [61] ; 
  10 FF0EWDTP FF0EWDTP [61] ; 
  10 FF0EMDTP FF0EMDTP [61] ; 
  10 FF0EWDCP FF0EWDCP [61] ; 
  10 FF0EMDCP FF0EMDCP [61] ; 
  10 FFRCPRFC FFRCPRFC [61] ; 
  10 FF0EMPCF FF0EMPCF [61] ; 
  10 FF6PRPFC FF6PRPFC [61] ; 
  10 FF0EMPRF FF0EMPRF [61] ; 
  10 FF0EWDFF FF0EWDFF [61] ; 
  10 FF0EWDHF FF0EWDHF [61] ; 
  10 FF0EWUHF FF0EWUHF [61] ; 
  10 FF0EWDFI FF0EWDFI [61] ; 
  10 FF0EWDHI FF0EWDHI [61] ; 
  10 FF0EWUHI FF0EWUHI [61] ; 
  10 FF0EWHPR FF0EWHPR [61] ; 
  10 FF0EWOBK FF0EWOBK [61] ; 
  10 FF0EMOBK FF0EMOBK [61] ; 
end // end FF0EW04

//*** RECORD=FF0EW05 ****
// ------------------------
// Map 005 display storage.
// ------------------------
// ***********************
Record FF0EW05 type basicRecord
  10 FF2DMIND FF2DMIND ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FF0EMFCD FF0EMFCD [61] ; 
  10 FF0EWMDM FF0EWMDM [61] ; 
  10 FF0EMMDM FF0EMMDM [61] ; 
  10 FF7FRZFL FF7FRZFL [61] ; 
  10 FF7RVFCT FF7RVFCT [61] ; 
  10 FF0EWHDM FF0EWHDM [61] ; 
  10 FF0EWFSI FF0EWFSI [61] ; 
  10 FF0EWHSI FF0EWHSI [61] ; 
  10 FF0EWUSI FF0EWUSI [61] ; 
  10 FF0EWRSI FF0EWRSI [61] ; 
  10 FF0EWFFR FF0EWFFR [61] ; 
  10 FF0EWHFR FF0EWHFR [61] ; 
  10 FH5MSHQT FH5MSHQT [61] ; 
  10 FF0EMCSF FF0EMCSF [61] ; 
  10 FF6SLFCT FF6SLFCT [61] ; 
  10 FF0EMMSL FF0EMMSL [61] ; 
end // end FF0EW05

//*** RECORD=FF0EW06 ****
// ------------------------
// Map 006 display storage.
// ------------------------
// ***********************
Record FF0EW06 type basicRecord
  10 SY2FDSMO SY2FDSMO ; 
  10 SY2PDCMO SY2PDCMO ; 
  10 FF0EWCMF FF0EWCMF ; 
  10 SY2SSCIN SY2SSCIN ; 
  10 FF6BEINV FF6BEINV [61] ; 
  10 FF0EMINB FF0EMINB [61] ; 
  10 FFRPRDDU FFRPRDDU [61] ; 
  10 FF0EMDUE FF0EMDUE [61] ; 
  10 FFRSUBBY FFRSUBBY [61] ; 
  10 FF0EMQBY FF0EMQBY [61] ; 
  10 FFRTENBY FFRTENBY [61] ; 
  10 FF0EMTBY FF0EMTBY [61] ; 
  10 FF0EWSUP FF0EWSUP [61] ; 
  10 FF0EMSUP FF0EMSUP [61] ; 
  10 FG4BALSH FG4BALSH [61] ; 
  10 FF0EMBAL FF0EMBAL [61] ; 
  10 FF0EWINE FF0EWINE [61] ; 
  10 FF0EMINE FF0EMINE [61] ; 
  10 FF6SFSTK FF6SFSTK [61] ; 
  10 FF0EMSTK FF0EMSTK [61] ; 
  10 FFRSSFCT FFRSSFCT [61] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
  10 FF0EMSBY FF0EMSBY [61] ; 
  10 FF6PRFCT FF6PRFCT [61] ; 
  10 FF0EMFCT FF0EMFCT [61] ; 
  10 FF0EWTUR FF0EWTUR [61] ; 
  10 FFRDIRSH FFRDIRSH [61] ; 
  10 FF0EMDIR FF0EMDIR [61] ; 
  10 FF0EWNIL FF0EWNIL [61] ; 
  10 FF0EMNIL FF0EMNIL [61] ; 
  10 FF0EWRIN FF0EWRIN [61] ; 
  10 FF0EMRIN FF0EMRIN [61] ; 
end // end FF0EW06

//*** RECORD=FF0EW07 ****
// ------------------------
// Map 007 display storage.
// ------------------------
// ***********************
Record FF0EW07 type basicRecord
  10 FF0EWCMT FF0EWCMT ; 
    15 FFPCOMNT FFPCOMNT [11] ; 
end // end FF0EW07

//*** RECORD=FF0EW08 ****
// -----------------
// Season subtotals.
// -----------------
// ***********************
Record FF0EW08 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0EWFUT FF0EWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0EWNFT FF0EWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0EWPRT FF0EWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0EWNPT FF0EWNPT ; 
  10 FF0EWTDP FF0EWTDP ; 
  10 FF0EWTDA FF0EWTDA ; 
  10 FF0EWTDI FF0EWTDI ; 
  10 FF0EWTDC FF0EWTDC ; 
  10 FF0EWTDT FF0EWTDT ; 
  10 FF0EWTAF FF0EWTAF ; 
  10 FF0EWTAP FF0EWTAP ; 
  10 FF0EWDFU FF0EWDFU ; 
  10 FF0EWDNF FF0EWDNF ; 
  10 FF0EWDTF FF0EWDTF ; 
  10 FF0EWDPR FF0EWDPR ; 
  10 FF0EWDNP FF0EWDNP ; 
  10 FF0EWDTP FF0EWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0EWHCF FF0EWHCF ; 
  10 FF0EWHDM FF0EWHDM ; 
  10 FF0EWHFU FF0EWHFU ; 
  10 FF0EWHPR FF0EWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0EWMDM FF0EWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0EWFFR FF0EWFFR ; 
  10 FF0EWHFR FF0EWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0EWSUP FF0EWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0EWINE FF0EWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0EWNIL FF0EWNIL ; 
  10 FF0EWFRF FF0EWFRF ; 
  10 FF0EWNMO FF0EWNMO ; 
  10 FF0EWHIN FF0EWHIN ; 
  10 FF0EWHOR FF0EWHOR ; 
  10 FF0EWOBK FF0EWOBK ; 
  10 FF0EWRIN FF0EWRIN ; 
end // end FF0EW08

//*** RECORD=FF0EW09 ****
// ---------------------
// Product accum totals.
// ---------------------
// ***********************
Record FF0EW09 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0EWFUT FF0EWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0EWNFT FF0EWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0EWPRT FF0EWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0EWNPT FF0EWNPT ; 
  10 FF0EWTDP FF0EWTDP ; 
  10 FF0EWTDA FF0EWTDA ; 
  10 FF0EWTDI FF0EWTDI ; 
  10 FF0EWTDC FF0EWTDC ; 
  10 FF0EWTDT FF0EWTDT ; 
  10 FF0EWTAF FF0EWTAF ; 
  10 FF0EWTAP FF0EWTAP ; 
  10 FF0EWDFU FF0EWDFU ; 
  10 FF0EWDNF FF0EWDNF ; 
  10 FF0EWDTF FF0EWDTF ; 
  10 FF0EWDPR FF0EWDPR ; 
  10 FF0EWDNP FF0EWDNP ; 
  10 FF0EWDTP FF0EWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0EWHCF FF0EWHCF ; 
  10 FF0EWHDM FF0EWHDM ; 
  10 FF0EWHFU FF0EWHFU ; 
  10 FF0EWHPR FF0EWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0EWMDM FF0EWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0EWFFR FF0EWFFR ; 
  10 FF0EWHFR FF0EWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0EWSUP FF0EWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0EWINE FF0EWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0EWNIL FF0EWNIL ; 
  10 FF0EWFRF FF0EWFRF ; 
  10 FF0EWNMO FF0EWNMO ; 
  10 FF0EWHIN FF0EWHIN ; 
  10 FF0EWHOR FF0EWHOR ; 
  10 FF0EWOBK FF0EWOBK ; 
  10 FF0EWRIN FF0EWRIN ; 
end // end FF0EW09

//*** RECORD=FF0EW10 ****
// ----------------------------------------------------
// Translation results of map fields that were changed.
// ----------------------------------------------------
// ***********************
Record FF0EW10 type basicRecord
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FFRPFUDM FFRPFUDM [8] ; 
  10 FFRCFUDM FFRCFUDM [8] ; 
  10 FFRPNFDM FFRPNFDM [8] ; 
  10 FFRCNFDM FFRCNFDM [8] ; 
  10 FFRPPRDM FFRPPRDM [8] ; 
  10 FFRCPRDM FFRCPRDM [8] ; 
  10 FFRPNPDM FFRPNPDM [8] ; 
  10 FFRCNPDM FFRCNPDM [8] ; 
  10 FFRCPRFC FFRCPRFC [8] ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FF6BEINV FF6BEINV [8] ; 
  10 FFRPRDDU FFRPRDDU [8] ; 
  10 FFRTENBY FFRTENBY [8] ; 
  10 FF6SFSTK FF6SFSTK [8] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
end // end FF0EW10

//*** RECORD=FF0EW11 ****
// ------------------------------------------------------
// Parameters passed to FF2920 - Calculate Suggested Buy.
// ------------------------------------------------------
// ***********************
Record FF0EW11 type basicRecord
  10 FF0EWRCD FF0EWRCD ; 
  10 FF0EWUSW FF0EWUSW ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY2SSCIN SY2SSCIN ; 
  10 FF0EWGRP FF0EWGRP [36] ; 
    15 FF4FCTMO FF4FCTMO ; 
    15 FF6SUGBY FF6SUGBY ; 
    15 FF6SLFCT FF6SLFCT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
end // end FF0EW11

//*** RECORD=FF0EW12 ****
// ---------------------------------------------------------
// Parameters passed to FF2700 - Update Month Master Tables.
// ---------------------------------------------------------
// ***********************
Record FF0EW12 type basicRecord
  10 FFEWSNBR FFEWSNBR [12] ; 
  10 XXXUSRID XXXUSRID ; 
  10 FF0EWBUY FF0EWBUY [36] ; 
    15 FF4FCTMO FF4FCTMO ; 
    15 FF6SUGBY FF6SUGBY ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
end // end FF0EW12

//*** RECORD=FF0EW13 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1801 - Print Short Range Forecast Worksheet.
// ------------------------------------------------------------
// ***********************
Record FF0EW13 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPLABRV XPLABRV ; 
    10 YPGCD YPGCD ; 
    10 YPGABRV YPGABRV ; 
    10 XPCCD XPCCD ; 
    10 XPCABRV XPCABRV ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XWSCD XWSCD ; 
    10 FF0EWCDT FF0EWCDT ; 
    10 FF0EWCTM FF0EWCTM ; 
    10 FF0EWABY FF0EWABY ; 
end // end FF0EW13

//*** RECORD=FF0EW14 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1801 - Print Short Range Forecast Worksheet.
// ------------------------------------------------------------
// ***********************
Record FF0EW14 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 * char(74) ; 
end // end FF0EW14

//*** RECORD=FF0EW15 ****
// ------------------------
// Map 007 display storage.
// ------------------------
// ***********************
Record FF0EW15 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 * char(598) ; 
    15 FF0EWDTE FF0EWDTE [13] ; 
    15 FF0EWNTE FF0EWNTE [13] ; 
    15 FF0EWUSR FF0EWUSR [13] ; 
end // end FF0EW15

// FF_BAL_TO_SHP
DataItem FF0EMBAL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// fh-mo-shp-qty
DataItem FF0EMCSF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0EMDCP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0EMDFU char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_DIRSHP_QTY
DataItem FF0EMDIR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL FUT
DataItem FF0EMDNF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0EMDNP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0EMDPR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FF0EMDTF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0EMDTP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_DUE
DataItem FF0EMDUE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_DMD_FCST
DataItem FF0EMFCD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0EMFCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_FCST
DataItem FF0EMFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_FUTR_DMD
DataItem FF0EMFUA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_FUTR_DMD
DataItem FF0EMFUC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_FUTR_DMD
DataItem FF0EMFUI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_FUTR_DMD
DataItem FF0EMFUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0EMFUT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_BEG_INV
DataItem FF0EMINB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0EMINE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0EMMDM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0EMMON char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SLS_FCST
DataItem FF0EMMSL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_FDMD
DataItem FF0EMNFA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_FDMD
DataItem FF0EMNFC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_FDMD
DataItem FF0EMNFI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_FDMD
DataItem FF0EMNFP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0EMNFT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0EMNIL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_PDMD
DataItem FF0EMNPA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_PDMD
DataItem FF0EMNPC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_PDMD
DataItem FF0EMNPI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_PDMD
DataItem FF0EMNPP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0EMNPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0EMOBK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_PROP_FCST
DataItem FF0EMPCF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0EMPCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_PROP_DMD
DataItem FF0EMPRA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_PROP_DMD
DataItem FF0EMPRC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PROP_FCST
DataItem FF0EMPRF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_PROP_DMD
DataItem FF0EMPRI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_PROP_DMD
DataItem FF0EMPRP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0EMPRT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_QTB
DataItem FF0EMQBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0EMRIN char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FF0EMSBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SFTY_STK
DataItem FF0EMSTK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SUPPLY
DataItem FF0EMSUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0EMTAF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0EMTAP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_TNTV_QTB
DataItem FF0EMTBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0EMTDA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0EMTDC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0EMTDI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0EMTDP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0EMTDT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Position of the 1st subtotal
DataItem FF0EW-1ST-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time through appl
DataItem FF0EW-1ST-TIME-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment changed switch
DataItem FF0EW-CMT-CHNG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash
DataItem FF0EW-CMT-DASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash
DataItem FF0EW-CMT-DASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment entered date
DataItem FF0EW-CMT-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment day
DataItem FF0EW-CMT-DD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment id
DataItem FF0EW-CMT-ID char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment month
DataItem FF0EW-CMT-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment userid
DataItem FF0EW-CMT-USRID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment year
DataItem FF0EW-CMT-YY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cancelled qty work area
DataItem FF0EW-CNCL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng filler
DataItem FF0EW-FILLER num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last prod cmnt pag in VSWCMT01
DataItem FF0EW-LST-PAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last processed date
DataItem FF0EW-LST-PRCSS-DT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last processed userid
DataItem FF0EW-LST-PRCSS-USR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last prod cmnt row in VSWCMt01
DataItem FF0EW-LST-ROW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng ccyy
DataItem FF0EW-PC-PO-ID-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng - main buy mo
DataItem FF0EW-PC-PO-ID-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng dm
DataItem FF0EW-PC-PO-ID-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng ccyypmdm
DataItem FF0EW-PC-PO-ID-MO-RNG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pc-po-id-mo-rng pm
DataItem FF0EW-PC-PO-ID-PM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product comment
DataItem FF0EW-PROD-CMT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual buy ccyymm
DataItem FF0EWABY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average inventory work area
DataItem FF0EWAIN bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average sales work area
DataItem FF0EWASL bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning column number
DataItem FF0EWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Buy month inserted, master WS
DataItem FF0EWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sugg qtb by fcst mo
DataItem FF0EWBUY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CANCELLATION %
DataItem FF0EWCAP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO "CCYY" re-formated
DataItem FF0EWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date
DataItem FF0EWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COMMENTS
DataItem FF0EWCMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO  "MM"  re-formated
DataItem FF0EWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO        re-formated
DataItem FF0EWCMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comments group level
DataItem FF0EWCMT char(330)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current column number
DataItem FF0EWCOL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change time
DataItem FF0EWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FF0EWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0EWDCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FUT %
DataItem FF0EWDFF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST PROP IDX
DataItem FF0EWDFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0EWDFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST FUT %
DataItem FF0EWDHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX
DataItem FF0EWDHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days in month
DataItem FF0EWDIM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Demand data changed switch
DataItem FF0EWDMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work month
DataItem FF0EWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL FUT
DataItem FF0EWDNF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0EWDNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0EWDPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days to date
DataItem FF0EWDTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comment entered date
DataItem FF0EWDTE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FF0EWDTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0EWDTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date work year
DataItem FF0EWDYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem FF0EWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0EWFCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FF0EWFFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Fut rto tot fut qty
DataItem FF0EWFRF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCST SEAS IDX
DataItem FF0EWFSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0EWFUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sugg qtb by fcst mo
DataItem FF0EWGRP char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Historical combined by futures
DataItem FF0EWHCF bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical demand quantity
DataItem FF0EWHDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FILL RT
DataItem FF0EWHFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical futures quantity
DataItem FF0EWHFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical invoiced quantity
DataItem FF0EWHIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical ordered quantity
DataItem FF0EWHOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical prop quantity
DataItem FF0EWHPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST SEAS IDX
DataItem FF0EWHSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0EWINE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem FF0EWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map lines
DataItem FF0EWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for prior months
DataItem FF0EWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for subsequent months
DataItem FF0EWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp use
DataItem FF0EWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for worksheet number
DataItem FF0EWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Left/right scroll amount
DataItem FF0EWLRS num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum beginning column
DataItem FF0EWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0EWMDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0EWMON char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// wrksht nbr for error msg
DataItem FF0EWNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0EWNFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0EWNIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months for averaging
DataItem FF0EWNMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0EWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Comments
DataItem FF0EWNTE char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0EWOBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page direction
DataItem FF0EWPAD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem FF0EWPAG num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0EWPCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Percent calculation work area
DataItem FF0EWPCT bin(18,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO "CCYY"
DataItem FF0EWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work area for page number
DataItem FF0EWPGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// prior month FF_CONTP_MO  "MM"
DataItem FF0EWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO
DataItem FF0EWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current column no. saved area
DataItem FF0EWPOS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0EWPRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sugg qtb calculate switch
DataItem FF0EWQTB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subroutine return code
DataItem FF0EWRCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0EWRIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REVD SEAS IDX
DataItem FF0EWRSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Saved change count
DataItem FF0EWSCC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved change date
DataItem FF0EWSCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved change time
DataItem FF0EWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save FF_SLS_FCST (Prior mo)
DataItem FF0EWSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ffsty style found switch
DataItem FF0EWSFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season worksheet number
DataItem FF0EWSNO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUPPLY
DataItem FF0EWSUP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FF0EWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comments cursor EOF switch
DataItem FF0EWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0EWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Headers cursor EOF switch
DataItem FF0EWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Items cursor EOF switch
DataItem FF0EWSWI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0EWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0EWTAF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0EWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0EWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0EWTDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0EWTDI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0EWTDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0EWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total frozen demand
DataItem FF0EWTFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total frozen indices
DataItem FF0EWTFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HHMM from work worksheet
DataItem FF0EWTIM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen demand
DataItem FF0EWTUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen indices
DataItem FF0EWTUI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INV TURNS
DataItem FF0EWTUR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FUT % - user created
DataItem FF0EWUHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX - user created
DataItem FF0EWUHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST SEAS IDX- user created
DataItem FF0EWUSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Comment user id
DataItem FF0EWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sugg qtb update switch
DataItem FF0EWUSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Worksheet item count
DataItem FF0EWWIC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work area
DataItem FF0EWWRK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

