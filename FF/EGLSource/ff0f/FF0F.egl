package ff0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fd.common.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=FF0F ****
// This user can only enter this application by, first, going
// through FF0L and selecting a worksheet.
// 
// This application displays demand, forecast and inventory
// information summarized at the line, category, or style group
// level.
// 
// The user may scroll forward or back to view each of the
// worksheet pages or scroll left and right to see various
// forecast months.
// 
// The user may print the displayed forecast by pressing PF16
// or exit to any allowed application via FAST PATH.
// 
// This application uses FFWREC.FFQMBYMO to store actual buy
// month.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/07/89  SPOPA   New application.
// FIX      06/04/90  SPOPA   Use YPGCD from FFWREC instead of
//                            '*' when selecting from VSYSHP01.
// FIX      06/14/90  SPOPA   Correct HIST SEAS IDX calculate.
// FF#33    06/28/90  SPOPA   Do not calculate prop forecast if
//                            FCST MO not the same as current.
// FF#60    07/02/90  LDELUH  When display buy worksheets move
//                            current prop, dmd, & sales into
//                            master qtys.
// FF#59    07/10/90  LDELUH  Replace main with actual buy mo.
//                    SFORD   Also subtract out carryover qtys
//                            stored in FF-SLS-FCST  in
//                            prior to curr month from current
//                            month for use in FF0F???
// FF#116   07/30/90  SFORD   Fixed beginning inventory to
//                            to match ending inventory of the
//                            prior month.
// FF#113   08/10/90  SFORD   For actual months, show Actual
//                            Total DMD instead of Total Active
//                            DMD, ie. Curr/MSTR DMD = Tot Net
//                                                     Bookings
//                            For calc. carryovers, fixed code
//                            to use the Summed Data from the
//                            Work Sheet header row where the
//                            Item's FCST MO = Header's CURR MO
//                            Also, set flag for CICS interupt
//                            when job completed
// FF#153   08/24/90  LDELUH  Make curr & master qtys equal
//                            for prop, demand, & sales depen-
//                            ding on the month.
// FF#132   08/30/90  CROSS   add worksheet typ abbrev to maps
// FF#178   08/10/90  SFORD   For actual months, show History
//                            DEMAND data from FHCAT or FHLIN
// FF#128   09/26/90  SFORD   Re-calc fill rate for actual mos
//                            & Show Dom Prod FCST to include
//                            buy month.
// ff#1037  09/27/90  RHETRI  send current date to io mod in
//                            fhsrec
// Fix      10/15/90  JJUCH   Qualify category when accessing
//                            DFHIST.VSYSHP01 with 'SG' func.
// FF#112   10/24/90  SFORD   Use non-rounded values for the
//                            computational fields.
// FF#fix   11/02/90  SFORD   Reset the wildcard values before
//                            the fetch of the next wrkst sum
//                            record in FF0F110.
// FF#fix   11/29/90  SFORD   Move curr prop fcst to Mstr prop
//                            fcst.
// FF#201   12/21/90  SFORD   Enhance to handle multi-year sesn
// FF#189   02/20/91  LDELUH  Chg calls for NIL prdctn fcst qty
// FF#283   02/17/92  LDELUH  Chg calc of fut rto for lt contp
//                            to include cancels.
// FF#285   03/05/92  LDELUH  Add alternate cat indicator.
// FF1111   04/15/92  LDELUH  Allow varying length seasons.
// FF333    08/12/92  mdange  Show domestic production forecast
//                            in actual months.
// FF386    04/06/93  JJUCH   Change calc of subtot and accum
//                            tot for fcst and hist fill rates.
// FF       09/01/93  mdange  Add logic to submit either test
//                            or prod jcl.
// FIX      10/04/93  JJUCH   fixed the carryove position bug
//                            with varying season.
// FH140    01/27/94  JJUCH   Change to use authorize future
//                            when calc. hist fut%, hist seas
//                            idx and hist fill rate.
// FF       07/01/96  LDAVI4  Added Open bulk and reserved inv
//                            to screens.  Added record
//                            VSWITM02 to retrieve short range
//                            item table.  Retrieveing open
//                            bulk and rsrv inv from VSWITM02
//                            for buy worksheets.
// FF496   10/07/96  LDAVI4   Add logic to roll previous months
//                            into the current month for
//                            reserved inventory on page 6.
//         11/04/96  cwhite   add 0 fill to date for yr 2000
// ff1049  08/07/97  ldavi4   modified FF0F117 change call
//                            ff0fs76 and ff0fs78 to ff0fs79
//                            and ff0fs80 when style grp
//                            exists.
// ff1190  12/23/97  bbolem   Included code to generate type
//                   TCS      level report onscreen.
// *********************
Program FF0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0FW00 FF0FW00; // record
  FF0FW01 FF0FW01; // record
  FF0FW02 FF0FW02; // record
  FF0FW03 FF0FW03; // record
  FF0FW04 FF0FW04; // record
  FF0FW05 FF0FW05; // record
  FF0FW06 FF0FW06; // record
  FF0FW07 FF0FW07; // record
  FF0FW08 FF0FW08; // record
  FF0FW09 FF0FW09; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH1REC FH1REC; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FH5REC FH5REC; // record
  FH6REC FH6REC; // record
  FHAREC FHAREC; // record
  FHBREC FHBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  VSWITM02 VSWITM02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FF0FT {deleteAfterUse = yes}; // table
  use FF0FT5O {deleteAfterUse = yes}; // table
  use FF0FM.FF0FM001,  // forms
      FF0FM.FF0FM002, 
      FF0FM.FF0FM003, 
      FF0FM.FF0FM004, 
      FF0FM.FF0FM005, 
      FF0FM.FF0FM006, 
      FF0FM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0FW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0FW00.FF0FWBEG = 1; /* Beginning column*/
    FF0FW00.FF0FWSEA = 1; /* Current season displayed*/
    FF0FW00.FF0FWPAG = 1; /* Page number*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/
    FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
    move "N" to FF0FW00.FF0FWSWO[1] for all; /* Data Obtained switch each year*/
    FF0FW00.FF0FWSWS = "N"; /* First season switch*/

     /* ------------------------------------------------------------*/
     /* Save season end months sent from FF0L.*/
     /* ------------------------------------------------------------*/

    FF0FW00.FF0FWEMO[1] = FFWREC.FFWENDM1;
    FF0FW00.FF0FWEMO[2] = FFWREC.FFWENDM2;
    FF0FW00.FF0FWEMO[3] = FFWREC.FFWENDM3;
    FF0FW00.FF0FWEMO[4] = FFWREC.FFWENDM4;
    FF0FW00.FF0FWEDM = FFWREC.FFAENDMO; /* Max data month*/
    FFWREC.FFAENDMO = 0;

     /* ------------------------------------------------------------*/
     /* Flow to determine what application transferred control.*/
     /* ------------------------------------------------------------*/

    goto FF0F000; /* Check the FROM application*/


    FF0F000: FF0F000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0F001; /* Converse the main process*/


    FF0F001: FF0F001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0F001; /* Converse the main process*/


  end // end main
end // end FF0F

// Format carryover w/subtotals
Function FF0F-1141()

  FF0FW00.FF0FW-CAOV-IX = FF0FW00.FF0FWSIX - 1;
  FF0FW00.FF0FW-CURR = FF0FW01.FFQCURMO; /* current month*/
  if (FF0FW00.FF0FWSIX > 1)
    FF0FW00.FF0FW-MON-GAP = FF0FW00.FF0FW-CURR -                            FF0FW00.FF0FWEMO[FF0FW-CAOV-IX] - 1;
  else
    FF0FW00.FF0FW-MON-GAP = FF0FW00.FF0FW-CURR -                            FF0FW01.FFABEGMO;
  end

  if (FF0FW00.FF0FW-MON-GAP >= 2) /* No of month in the season*/

    FF0F-11412(); /* Last caov info*/
    FF0F-11413(); /* Other caov info*/

  else

    if (FF0FW00.FF0FW-MON-GAP == 1) /* No of month in the season*/
      FF0F-11412(); /* Last caov info*/
      if (FF0FW00.FF0FWSIX == 1) /* 1st season*/

      else
        if (FF0FW00.FF0FWSIX == 2)
          sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub and accum tot spaces*/
        end
        FF0F-11413(); /* Other caov info*/
      end
    else
      if (FF0FW00.FF0FWSIX == 1) /* 1st season*/

      else
        if (FF0FW00.FF0FWSIX == 2)
          sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub and accum tot spaces*/
        end
        FF0FW00.FF0FW-CAOV-IX = FF0FW00.FF0FWSIX - 1; /* previous season*/
        if (FF0FW00.FF0FWMIS[FF0FW-CAOV-IX] >= 2) /* month in season*/
          FF0F-11412(); /* Last caov info*/
          FF0F-11413(); /* Other caov info*/
        else
          FF0F-11412(); /* Last caov info*/
          if (FF0FW00.FF0FW-CAOV-IX == 1) /* 1st season*/

          else
            if (FF0FW00.FF0FW-CAOV-IX == 2)
              sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Excluded subtotal space*/
            else
              sysVar.arrayIndex = sysVar.arrayIndex - 2; /* Excluded sub & accum tot spaces*/
            end
            FF0F-11413(); /* Other caov info*/
          end
        end
      end
    end

  end

end // end FF0F-1141

// Last caov info
Function FF0F-11412()
  FFXREC.FFXNUMB = FF0FW01.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW01.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW01.FF0FWFCO[sysVar.arrayIndex] + FF0FW01.FF0FWPCO[sysVar.arrayIndex];
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

end // end FF0F-11412

// Other caov info
Function FF0F-11413()

  FFXREC.FFXNUMB = FF0FW01.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW01.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW01.FF0FWFCO[sysVar.arrayIndex] + FF0FW01.FF0FWPCO[sysVar.arrayIndex];
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

end // end FF0F-11413

// Check the FROM application
Function FF0F000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FF0L" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FF0F") /* or same application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end FF0F000

// Main process to display a map
Function FF0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the fourth map.*/
   /* 5) Otherwise, if specified, display the fifth map.*/
   /* 6) Otherwise, if specified, display the sixth map.*/
   /* 7) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWPAG == 1 /* Page 1 was requested*/
   || FF0FW00.FF0FWSWR == "Y") /* or data was requested*/
    FF0F100(); /* Display map 1*/
  else

    if (FF0FW00.FF0FWPAG == 2) /* Page 2 was requested*/
      FF0F200(); /* Display map 2*/
    else

      if (FF0FW00.FF0FWPAG == 3) /* Page 3 was requested*/
        FF0F300(); /* Display map 3*/
      else

        if (FF0FW00.FF0FWPAG == 4) /* Page 4 was requested*/
          FF0F400(); /* Display map 4*/
        else

          if (FF0FW00.FF0FWPAG == 5) /* Page 5 was requested*/
            FF0F500(); /* Display map 5*/
          else

            if (FF0FW00.FF0FWPAG == 6) /* Page 6 was requested*/
              FF0F600(); /* Display map 6*/
            else

              /* --------------------------------------------------------*/
               /* Write the error to the Error Diagnosis Reporting.*/
              /* --------------------------------------------------------*/

              FFWREC.XXXMODID = "001"; /* Module identification*/
              FFWREC.XXXMSGNO = 1; /* System error occurred*/

              TA1REC.TA1FUNC = "RETN"; /* Termination function*/
              TA1REC.TA1TYPE = "APPL"; /* Type of error*/
              TA1REC.TA1LOC = "INVALID PAGE NUMBER REQUESTED";
              TA1REC.TA1MAPNO = FF0FW00.FF0FWPAG; /* Page number*/
              TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
              TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

              /* --------------------------------------------------------*/
               /* Exit to display the application system menu.*/
              /* --------------------------------------------------------*/

              COMMAREA.CATOAP = "FF0A"; /* TO application*/

              XSFFS01(); /* Exit to another application*/

              /* --------------------------------------------------------*/
               /* Abnormally terminate the transaction if exit failed.*/
              /* --------------------------------------------------------*/

              TA1REC.TA1FUNC = "ABND"; /* Termination function*/
              TA1REC.TA1LOC = "EXIT TO APPLICATION MENU FAILED";

              call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

            end
          end
        end
      end
    end
  end


end // end FF0F001

// Display CURRENT DEMAND FUTURES
Function FF0F100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F110(); /* Obtain the data to display*/

  FF0F120(); /* Format and display the map*/

  FF0F130(); /* Check attention identifier*/

  FF0F140(); /* Reset fields to normal intensity*/

  FF0F150(); /* Verify the entered data*/

  FF0F160(); /* Process valid input request*/


end // end FF0F100

// Obtain the data to display
Function FF0F110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate number of months in each season.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSIX = 1; /* Season index*/
  FF0FW00.FF0FWMSC = 0; /* Months in season counter*/
  FF0FW00.FF2NSEAS = 0; /* Nbr of seasons*/

  if (FFWREC.FFWENDM1 != 0)
    FF0FW00.FF0FWDAT = FFWREC.FFABEGMO;
    FF0FS22(); /* Count months in sesn*/
    FF0FW00.FF2NSEAS = FF0FW00.FF2NSEAS + 1;
  end

  if (FFWREC.FFWENDM2 != 0)
    FF0FS22(); /* Count months in sesn*/
    FF0FW00.FF2NSEAS = FF0FW00.FF2NSEAS + 1;
  end

  if (FFWREC.FFWENDM3 != 0)
    FF0FS22(); /* Count months in sesn*/
    FF0FW00.FF2NSEAS = FF0FW00.FF2NSEAS + 1;
  end

  if (FFWREC.FFWENDM4 != 0)
    FF0FS22(); /* Count months in sesn*/
    FF0FW00.FF2NSEAS = FF0FW00.FF2NSEAS + 1;
  end

   /* ------------------------------------------------------------*/
   /* Process 2nd & 3rd year if requested.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWS == "Y") /* 1st yr season formatted switch*/

    FF0F119(); /* Process 2nd & 3rd year of seasons*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage and total areas.*/
   /* ------------------------------------------------------------*/

  set FF0FW01 empty; /* M001 display storage*/
  set FF0FW02 empty; /* M002 display storage*/
  set FF0FW03 empty; /* M003 display storage*/
  set FF0FW04 empty; /* M004 display storage*/
  set FF0FW05 empty; /* M005 display storage*/
  set FF0FW06 empty; /* M006 display storage*/
  set FF0FW07 empty; /* Season subtotals*/
  set FF0FW08 empty; /* accum totals*/
  set FF0FW09 empty; /* Print selection parameters*/

  FF0FW01.CACHGFL = "N"; /* Data was obtained switch*/

   /* ------------------------------------------------------------*/
   /* Select the row from the product cross-reference table.*/
   /* ------------------------------------------------------------*/

  FF0F111(); /* Select product cross-reference*/


   /* ------------------------------------------------------------*/
   /* Get/save header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained.*/
   /* ------------------------------------------------------------*/

  FF0FS70(); /* ===> Get hdr sum ws "curr mo"*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FF0F112(); /* Open summary worksheet cursor*/

  FF0FW00.FF0FWCOL = 1; /* Current column*/
  FF0FW00.FF0FWFMO = 1; /* Number months formatted*/
  FF0FW00.FF0FWSIX = 1; /* Season index*/
  FF0FW00.FF0FWSCT = 1; /* Season counter*/
  FF0FW00.FF0FWMSC = 0; /* Months in sesn counter*/

  FF0FW00.FF0FWSWC = "N"; /* Summary cursor EOF switch*/
  FF0FW00.FF0FWSWS = "N"; /* First season switch*/
  FF0FW00.FF0FWSW1 = "Y"; /* First time through switch*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0FW00.FF0FWSWC == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
      /* The next two statements are used for the re-calc of*/
      /* fill rate within the subroutine ff2930*/
    /* ------------------------------------------------------------*/

    FFQREC.FFQMBYMO = -1; /* Main buy mo*/
    FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* Actl buy mo*/

    FF0F113(); /* Fetch next summary worksheet*/

    if (FF0FW00.FF0FWFMO > 12) /* Twelve months were formatted*/
      FF0FW00.FF0FWSWC = "Y"; /* End of cursor switch*/
    end

    if (FF0FW00.FF0FWSW1 == "N") /* Not first time through*/

      if (FF0FW00.FF0FWSWC == "Y" /* End of cursor*/
       || FF0FW00.FF0FWMSC == FF0FW00.FF0FWMIS[FF0FWSIX]) /* or sesn end*/

        if (FF0FW00.FF0FWSWS == "N") /* First season switch*/

          FF0FW00.FF0FWSWS = "Y"; /* First season switch*/

        end

        FF0F115(); /* Calculate season totals*/

        if (FF0FW00.FF0FWSWC == "N") /* If not end of cursor*/
          FF0FW00.FF0FWSIX = FF0FW00.FF0FWSIX + 1; /* Incrmt sesn ix*/
          FF0FW00.FF0FWMSC = 0; /* Clear mos in sesn counter*/
        end

      end

    end /* ===> Not first time through*/

    if (FF0FW00.FF0FWSWC == "N") /* Not end of cursor*/

      if (FF0FW00.FF0FWSW1 == "Y") /* First time through*/

        /* ======== Next Sentence ===============>*/

      else

        FF0FW00.FF0FWFMO = FF0FW00.FF0FWFMO + 1; /* Number months formatted*/
        FF0FW00.FF0FWMSC = FF0FW00.FF0FWMSC + 1; /* Months in sesn counter*/

      end /* ===> First time through*/

      FF0F117(); /* ====> Save item information*/

      if (FF0FW01.FFQCURMO == VSWITM02.FF4FCTMO)
        FF0F114(); /* Format carryover quantities*/
      end

      FF0FW00.FF0FWSW1 = "N"; /* First time through switch*/

    end /* ===> Not end of cursor*/

  end /* ===> Until end of cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0F118(); /* Close summary worksheet cursor*/

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWMAX = FF0FW00.FF0FWCOL - 8; /* Maximum beginning column*/

  if (FF0FW00.FF0FWMAX < 1) /* Maximum LT minimum*/
    FF0FW00.FF0FWMAX = 1; /* Default to minimum*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSW1 == "Y") /* No worksheet found*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWR = "N"; /* Request for data switch*/
  FF0FW01.CACHGFL = "Y"; /* Data was obtained switch*/
end // end FF0F110

// Select product cross-reference
Function FF0F111()
   /* ------------------------------------------------------------*/
   /* Select the product cross-reference table row.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  /* begin tcs*/
  /* MOVE FFWREC.XPLCD TO FF2REC.XPLCD;       /* Product line code*/
  /* MOVE FFWREC.YPGCD TO FF2REC.YPGCD;       /* Product type group code*/
  /* end tcs*/
  /* begin tcs*/
  if (FFWREC.XPLCD == " ") /* no line*/
    FF2REC.XPLCD = "*"; /* any line*/
  else
    FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  end
  if (FFWREC.XPCCD == " ") /* no category*/
    FF2REC.XPCCD = "*"; /* any category*/
  else
    FF2REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  end
  /* end tcs*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PRODUCT CROSS-REFERENCE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0F111

// Open summary worksheet cursor
Function FF0F112()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFQREC empty; /* Worksheet header*/
  set VSWITM02 empty; /* Worksheet item*/

  FFQREC.XWSCD = FFWREC.XWSCD; /* Worksheet type code*/
  /* begin tcs*/
  /* MOVE FFWREC.XPLCD TO FFQREC.XPLCD;       /* Product line code*/
  /* end tcs*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  /* begin tcs*/
  if (FFWREC.XPLCD == " ") /* no line*/
    FFWREC.XPLCD = "*"; /* any line*/
    FFQREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
    FFQREC.XPCCD = "*"; /* any product category*/
    FFQREC.SYBSTGNB = "*"; /* Any style group*/
  else
    FFQREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  end
  /* end tcs*/
  if (FFWREC.XPCCD == " ") /* No product category*/

    FFQREC.XPCCD = "*"; /* Any product category*/
    FFQREC.SYBSTGNB = "*"; /* Any style group*/


  else

    FFQREC.XPCCD = FFWREC.XPCCD; /* Product category code*/

    if (FFWREC.SYBSTGNB == " ") /* Style group number*/

      FFQREC.SYBSTGNB = "*"; /* Any style group*/
    else
      FFQREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine beginning date  & ending date for year's of season*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWS == "N") /* Format First 1st yr season switch*/

    /* ------------------------------------------------------------*/
        /* Use the parameter beginning date from Pass record*/
        /* and calc ending date for the first year's seasons*/
    /* ------------------------------------------------------------*/

    FF0FW00.FF0FWDAT = FFWREC.FFABEGMO; /* Begin mo*/

    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 1; /* Decrement month*/

    if (FF0FW00.FF0FWDMM < 1) /* Month LT minimum*/

      FF0FW00.FF0FWDMM = 12; /* Reset month*/
      FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY - 1; /* Decrement year*/

    end

    VSWITM02.FF4FCTMO = FF0FW00.FF0FWDAT; /* Fcst mo*/

    if (FFWREC.XWSCD == "03") /* buy Worksheet type code*/
      FFQREC.FFAENDMO = 99999999; /* wild card Fcst xmo*/
    else
      FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
      FFQREC.FFAENDMO = FF0FW00.FF0FWDAT; /* Fcst mo*/
      FF0FW00.FFAENDMO = FF0FW00.FF0FWDAT; /* Fcst xmo*/
    end

  else


    /* ------------------------------------------------------------*/
        /* Use the ending date + 1 for the beginning date and*/
        /* calc the ending date for the 2nd & 3rd year's season.*/
    /* ------------------------------------------------------------*/

    FF0FW00.FF0FWDAT = FF0FW00.FFAENDMO; /* restore last Fcst xmo*/

    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1; /* Increment month*/
    if (FF0FW00.FF0FWDMM > 12) /* Month > 12*/

      FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement months*/
      FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* increment year*/

    end
    VSWITM02.FF4FCTMO = FF0FW00.FF0FWDAT; /* Fcst mo*/

    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 11; /* Increment month*/
    if (FF0FW00.FF0FWDMM > 12) /* Month > 12*/

      FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement months*/
      FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* increment year*/

    end
    FFQREC.FFAENDMO = FF0FW00.FF0FWDAT; /* Fcst ending month*/
    FF0FW00.FFAENDMO = FF0FW00.FF0FWDAT; /* Fcst xmo*/

  end

  FFQREC.FFQMBYMO = -1; /* Main buy mo*/
  FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* Actl buy mo*/
  FFQREC.ZZZCHGDT = FFWREC.ZZZCHGDT; /* Change date*/
  FFQREC.ZZZCHGTM = FFWREC.ZZZCHGTM; /* Change time*/


   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    try
      call "FF2930" ("S5", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("S4", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0F112

// Fetch next summary worksheet
Function FF0F113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    try
      call "FF2930" ("N5", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("N4", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FF0FW00.FF0FWSWC = "Y"; /* Header cursor EOF switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUMMARY WORKSHEET";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFQREC.FFQKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0F113

// Format carryover quantities
Function FF0F114()
   /* ------------------------------------------------------------*/
   /* Determine where to display the carryover quantities.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.FFQCURMO in FF0FW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "114"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0FW00.FF0FWDAT = FF0FW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0FW00.FF0FWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FORMAT CARRYOVER QUANTITIES";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

  if (FF0FW01.FFABEGMO == FF0FW01.FFQCURMO) /* Beg mo EQ curr*/

    FFXREC.FFXNUMB = FF0FW01.FFQOCOFU + FF0FW01.FFQLCOFU; /* Caov futr*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW01.FF0FMFCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW01.FF0FWFCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0FW01.FFQOCOPR + FF0FW01.FFQLCOPR; /* Caov prop*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW01.FF0FMPCO[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW01.FF0FWPCO[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

    FFXREC.FFXNUMB = FF0FW01.FF0FWFCO[sysVar.arrayIndex] + FF0FW01.FF0FWPCO[sysVar.arrayIndex];
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMBAL[sysVar.arrayIndex] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FG4BALSH[sysVar.arrayIndex] = FFXREC.FFXROUND; /* Rounded number*/

  else

    FF0F-1141();

  end

end // end FF0F114

// Calculate season totals
Function FF0F115()
   /* ------------------------------------------------------------*/
   /* Calculate the M001 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FF0FW01.FF0FMMON[FF0FWCOL] = "  SUB"; /* Subtotal literal*/
  FF0FW01.FF0FMSCT[FF0FWCOL] = FF0FW00.FF0FWSCT; /* Sesn count*/

  FFXREC.FFXNUMB = FF0FW07.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRPFUDM = FF0FW08.FFRPFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRAFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRAFUDM = FF0FW08.FFRAFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRIFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRIFUDM = FF0FW08.FFRIFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCFUDM = FF0FW08.FFRCFUDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWFUT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWFUT = FF0FW08.FF0FWFUT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRPNFDM = FF0FW08.FFRPNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRANFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRANFDM = FF0FW08.FFRANFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRINFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRINFDM = FF0FW08.FFRINFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCNFDM = FF0FW08.FFRCNFDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWNFT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWNFT = FF0FW08.FF0FWNFT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW07.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRPPRDM = FF0FW08.FFRPPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRAPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRAPRDM = FF0FW08.FFRAPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRIPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRIPRDM = FF0FW08.FFRIPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCPRDM = FF0FW08.FFRCPRDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWPRT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWPRT = FF0FW08.FF0FWPRT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRPNPDM = FF0FW08.FFRPNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRANPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRANPDM = FF0FW08.FFRANPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRINPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRINPDM = FF0FW08.FFRINPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCNPDM = FF0FW08.FFRCNPDM + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWNPT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWNPT = FF0FW08.FF0FWNPT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTDP = FF0FW08.FF0FWTDP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDA[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTDA = FF0FW08.FF0FWTDA + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDI[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTDI = FF0FW08.FF0FWTDI + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTDC = FF0FW08.FF0FWTDC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTDT = FF0FW08.FF0FWTDT + FFXREC.FFXROUND; /* accum total*/

  if (FF0FW03.FF0FWTDT[FF0FWCOL] != 0) /* Total demand NE zero*/
    FF0FW00.FF0FWPCT = FF0FW03.FF0FWTDC[FF0FWCOL] * 100; /* Cancellation %*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW03.FF0FWTDT[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW03.FF0FWCAP[FF0FWCOL] = FF0FW00.FF0FWPCT;
  end

  FFXREC.FFXNUMB = FF0FW07.FF0FWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTAF = FF0FW08.FF0FWTAF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWTAP = FF0FW08.FF0FWTAP + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDFU[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDFU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDFU = FF0FW08.FF0FWDFU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDNF = FF0FW08.FF0FWDNF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDTF = FF0FW08.FF0FWDTF + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDPR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDPR[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDPR = FF0FW08.FF0FWDPR + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDNP = FF0FW08.FF0FWDNP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWDTP = FF0FW08.FF0FWDTP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPCF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FFRCPRFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCPRFC = FF0FW08.FFRCPRFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWOBK; /* Open bulks*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMOBK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWOBK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWOBK = FF0FW08.FF0FWOBK + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPRF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF6PRPFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF6PRPFC = FF0FW08.FF6PRPFC + FFXREC.FFXROUND; /* accum total*/

  if (FF0FW07.FFRCDMFC != 0) /* Subtotal NE zero*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW07.FF0FWFRF * 100 / FF0FW07.FFRCDMFC, -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW04.FF0FWDFF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Fcst fut %*/
  end
  FF0FW08.FF0FWFRF = FF0FW08.FF0FWFRF + FF0FW07.FF0FWFRF; /* accum total*/

  if (FF0FW07.FF0FWHDM != 0) /* Subtotal GT zero*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW07.FF0FWHFU * 100 / FF0FW07.FF0FWHDM, -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW04.FF0FWDHF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Hist fut %*/
  end
  FF0FW08.FF0FWHFU = FF0FW08.FF0FWHFU + FF0FW07.FF0FWHFU; /* accum total*/

  if (FF0FW07.FFRCPRFC != 0) /* Subtotal NE zero*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWCOL - FF0FW07.FF0FWNMO; /* Season begin*/
    while (FF0FW00.FF0FWIXC <= FF0FW00.FF0FWCOL) /* Until end of season*/
      if (FF0FW04.FFRCPRFC[FF0FWIXC] >= 0) /* Curr prop fcst GE zero*/
        FF0FW00.FF0FWPCT = FF0FW04.FFRCPRFC[FF0FWIXC] * 100;
        FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW07.FFRCPRFC, -mathLib.decimals(FF0FW00.FF0FWPCT));
        FF0FW04.FF0FWDFI[FF0FWIXC] = FF0FW00.FF0FWPCT; /* Fcst idx*/
      end
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0FW07.FF0FWHPR != 0) /* Subtotal NE zero*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWCOL - FF0FW07.FF0FWNMO; /* Season begin*/
    FF0FW04.FF0FWHPR[FF0FWCOL] = FF0FW07.FF0FWHPR; /* Subtotal*/
    while (FF0FW00.FF0FWIXC <= FF0FW00.FF0FWCOL) /* Until end of season*/
      if (FF0FW04.FF0FWHPR[FF0FWIXC] >= 0) /* Hist prop qty GE zero*/
        FF0FW00.FF0FWPCT = FF0FW04.FF0FWHPR[FF0FWIXC] * 100;
        FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW07.FF0FWHPR, -mathLib.decimals(FF0FW00.FF0FWPCT));
        FF0FW04.FF0FWDHI[FF0FWIXC] = FF0FW00.FF0FWPCT; /* Hist idx*/
      end
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Next month of season*/
    end
  end
  FF0FW08.FF0FWHPR = FF0FW08.FF0FWHPR + FF0FW07.FF0FWHPR; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M005 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW07.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMFCD[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FFRCDMFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRCDMFC = FF0FW08.FFRCDMFC + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMDM[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF0FWMDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWMDM = FF0FW08.FF0FWMDM + FFXREC.FFXROUND; /* accum total*/

  if (FF0FW05.FFRCDMFC[FF0FWCOL] != 0) /* Subtotal NE zero*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWCOL - FF0FW07.FF0FWNMO; /* Season begin*/
    while (FF0FW00.FF0FWIXC <= FF0FW00.FF0FWCOL) /* Until end of season*/
      FF0FW00.FF0FWPCT = FF0FW05.FFRCDMFC[FF0FWIXC] * 100; /* Curr dmd fcst*/
      FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW05.FFRCDMFC[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
      FF0FW05.FF0FWFSI[FF0FWIXC] = FF0FW00.FF0FWPCT; /* Fcst seas idx*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Next month of season*/
    end
  end

  if (FF0FW07.FF0FWHDM > 0) /* Subtotal GT zero*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWCOL - FF0FW07.FF0FWNMO; /* Season begin*/
    FF0FW05.FF0FWHDM[FF0FWCOL] = FF0FW07.FF0FWHDM; /* Subtotal*/
    while (FF0FW00.FF0FWIXC <= FF0FW00.FF0FWCOL) /* Until end of season*/
      FF0FW00.FF0FWPCT = FF0FW05.FF0FWHDM[FF0FWIXC] * 100; /* Hist dmd qty*/
      FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW05.FF0FWHDM[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
      FF0FW05.FF0FWHSI[FF0FWIXC] = FF0FW00.FF0FWPCT; /* Hist seas idx*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Next month of season*/
    end
  end
  FF0FW08.FF0FWHDM = FF0FW08.FF0FWHDM + FF0FW07.FF0FWHDM; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMRVF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF7RVFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF7RVFCT = FF0FW08.FF7RVFCT + FFXREC.FFXROUND; /* accum total*/

  if (FF0FW07.FF7RVFCT != 0) /* Subtotal NE zero*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWCOL - FF0FW07.FF0FWNMO; /* Season begin*/
    while (FF0FW00.FF0FWIXC <= FF0FW00.FF0FWCOL) /* Until end of season*/
      FF0FW00.FF0FWPCT = FF0FW05.FF7RVFCT[FF0FWIXC] * 100; /* Rvse dmd fcst*/
      FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW05.FF7RVFCT[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
      FF0FW05.FF0FWRSI[FF0FWIXC] = FF0FW00.FF0FWPCT; /* Revd seas idx*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Next month of season*/
    end
  end

   /* Fcst fill rate*/

  if (FF0FW07.FFRCDMFC != 0) /* curr dmd*/
    FF0FW07.FF0FWFFR = mathLib.round(FF0FW07.FH5MSHQT * 100 / FF0FW07.FFRCDMFC, -mathLib.decimals(FF0FW07.FF0FWFFR));
  else
    if (FF0FW07.FH5MSHQT == 0) /* both curr sls and dmd are 0*/
      FF0FW07.FF0FWFFR = 100;
    else
      FF0FW07.FF0FWFFR = 0;
    end
  end
  FF0FW05.FF0FWFFR[FF0FWCOL] = FF0FW07.FF0FWFFR;
  FF0FW05.FF0FMFFR[FF0FWCOL] = mathLib.round(FF0FW05.FF0FWFFR[FF0FWCOL] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[FF0FWCOL]));

   /* Hist fill rate*/

  if (FF0FW07.FF0FWHOR != 0) /* Order qty*/
    FF0FW07.FF0FWHFR = mathLib.round(FF0FW07.FF0FWHIN * 100 / FF0FW07.FF0FWHOR, -mathLib.decimals(FF0FW07.FF0FWHFR));
  else
    if (FF0FW07.FF0FWHIN == 0) /* both invoiced and ordered qtys are 0*/
      FF0FW07.FF0FWHFR = 100;
    else
      FF0FW07.FF0FWHFR = 0;
    end
  end
  FF0FW05.FF0FWHFR[FF0FWCOL] = FF0FW07.FF0FWHFR;

  FFXREC.FFXNUMB = FF0FW07.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMCSF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FH5MSHQT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FH5MSHQT = FF0FW08.FH5MSHQT + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMSL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF6SLFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF6SLFCT = FF0FW08.FF6SLFCT + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 subtotals for the season.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW07.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMINB[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6BEINV[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0FW08.FF6BEINV = FF0FW08.FF6BEINV + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMDUE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRPRDDU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRPRDDU = FF0FW08.FFRPRDDU + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMQBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRSUBBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRSUBBY = FF0FW08.FFRSUBBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMTBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRTENBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRTENBY = FF0FW08.FFRTENBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWSUP[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0FW08.FF0FWSUP = FF0FW08.FF0FWSUP + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMBAL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FG4BALSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FG4BALSH = FF0FW08.FG4BALSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMINE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWINE[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0FW08.FF0FWINE = FF0FW08.FF0FWINE + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWRIN; /* Reserved inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMRIN[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWRIN[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0FW08.FF0FWRIN = FF0FW08.FF0FWRIN + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSTK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6SFSTK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF6SFSTK = FF0FW08.FF6SFSTK + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6SUGBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF6SUGBY = FF0FW08.FF6SUGBY + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMFCT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6PRFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF6PRFCT = FF0FW08.FF6PRFCT + FFXREC.FFXROUND; /* accum total*/

   /* FF0FW00.FF0FWASL = FF0FW07.FF6SLFCT * 12 * 2;/* Inv turns*/
   /* FF0FW00.FF0FWAIN = FF0FW07.FF6BEINV + FF0FW07.FF0FWINE;*/
   /* FF0FW00.FF0FWAIN = FF0FW00.FF0FWAIN * FF0FW07.FF0FWNMO;*/
   /* IF FF0FW00.FF0FWAIN NE 0;        /* Inventory NE zero*/
   /* FF0FW06.FF0FWTUR(FF0FWCOL) = FF0FW00.FF0FWASL / FF0FW00.FF0FWAIN (R;*/
   /* END;*/

  FFXREC.FFXNUMB = FF0FW07.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMDIR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRDIRSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FFRDIRSH = FF0FW08.FFRDIRSH + FFXREC.FFXROUND; /* accum total*/

  FFXREC.FFXNUMB = FF0FW07.FF0FWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMNIL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWNIL[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW08.FF0FWNIL = FF0FW08.FF0FWNIL + FFXREC.FFXROUND; /* accum total*/

   /* ------------------------------------------------------------*/
   /* Accumulate the number of months for accum total averaging.*/
   /* ------------------------------------------------------------*/

  FF0FW08.FF0FWNMO = FF0FW08.FF0FWNMO + FF0FW07.FF0FWNMO;
                                   /* Number of months*/

   /* ------------------------------------------------------------*/
   /* Increment the current column and clear the subtotal fields.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
  set FF0FW07 empty; /* Season subtotals*/

   /* ------------------------------------------------------------*/
   /* First season does not have an accum column so skip logic.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSCT == 1) /* First season*/
    FF0FW00.FF0FWSCT = FF0FW00.FF0FWSCT + 1; /* Season counter*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M001 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FF0FW01.FF0FMMON[FF0FWCOL] = "ACCUM"; /* accum total literal*/
  FF0FW01.FF0FMSCT[FF0FWCOL] = FF0FW00.FF0FWSCT; /* Sesn count*/

  FFXREC.FFXNUMB = FF0FW08.FFRPFUDM; /* Pral futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRAFUDM; /* Aloc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRAFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRIFUDM; /* Ivc futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRIFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRCFUDM; /* Cncl futr dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWFUT; /* Futures tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWFUT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRPNFDM; /* Pral natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRANFDM; /* Aloc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRANFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRINFDM; /* Ivc natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRINFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRCNFDM; /* Cncl natl fdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWNFT; /* Natl acct fut tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWNFT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M002 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW08.FFRPPRDM; /* Pral prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRAPRDM; /* Aloc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRAPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRIPRDM; /* Ivc prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRIPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRCPRDM; /* Cncl prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWPRT; /* Prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWPRT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRPNPDM; /* Pral natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRANPDM; /* Aloc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRANPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRINPDM; /* Ivc natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRINPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRCNPDM; /* Cncl natl pdmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWNPT; /* Natl acct prop tot*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWNPT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M003 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTDP; /* Total pre-alloc*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTDA; /* Total allocated*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDA[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTDI; /* Total invoiced*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDI[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTDC; /* Total cancelled*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTDT; /* Total demand*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0FW03.FF0FWTDT[FF0FWCOL] != 0) /* Total demand NE zero*/
    FF0FW00.FF0FWPCT = FF0FW03.FF0FWTDC[FF0FWCOL] * 100; /* Cancellation %*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW03.FF0FWTDT[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW03.FF0FWCAP[FF0FWCOL] = FF0FW00.FF0FWPCT;
  end

  FFXREC.FFXNUMB = FF0FW08.FF0FWTAF; /* Tot active fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWTAP; /* Tot active prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M004 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDFU; /* Fut dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDFU[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDFU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDNF; /* Natl fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDTF; /* Total fut*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDPR; /* Prop dmd*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDPR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDPR[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDNP; /* Natl prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWDTP; /* Total prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRCPRFC; /* Curr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPCF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FFRCPRFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWOBK; /* Open bulk*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMOBK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWOBK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF6PRPFC; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPRF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF6PRPFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0FW08.FFRCDMFC != 0) /* accum total NE zero*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW08.FF0FWFRF * 100 / FF0FW08.FFRCDMFC, -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW04.FF0FWDFF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Fcst fut %*/
  end

  if (FF0FW08.FF0FWHFU > 0 /* accum total GT zero*/
   && FF0FW08.FF0FWHDM > 0) /* accum total GT zero*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW08.FF0FWHFU * 100 / FF0FW08.FF0FWHDM, -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW04.FF0FWDHF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Hist fut %*/
  end

  if (FF0FW08.FFRCPRFC != 0) /* accum total NE zero*/
    FF0FW04.FF0FWDFI[FF0FWCOL] = 100; /* Fcst prop idx*/
  end

  if (FF0FW08.FF0FWHPR != 0) /* accum total NE zero*/
    FF0FW04.FF0FWDHI[FF0FWCOL] = 100; /* Hist prop idx*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M005 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW08.FFRCDMFC; /* Curr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMFCD[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FFRCDMFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWMDM; /* Mstr dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMDM[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF0FWMDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0FW08.FFRCDMFC != 0) /* accum total NE zero*/
    FF0FW05.FF0FWFSI[FF0FWCOL] = 100; /* Fcst seas idx*/
  end

  if (FF0FW08.FF0FWHDM != 0) /* accum total NE zero*/
    FF0FW05.FF0FWHSI[FF0FWCOL] = 100; /* Hist seas idx*/
  end

  FFXREC.FFXNUMB = FF0FW08.FF7RVFCT; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMRVF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF7RVFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  if (FF0FW05.FF7RVFCT[FF0FWCOL] != 0) /* accum total NE zero*/
    FF0FW05.FF0FWRSI[FF0FWCOL] = 100; /* Revd seas idx*/
  end


   /* Fcst fill rate*/

  if (FF0FW08.FFRCDMFC != 0) /* curr dmd*/
    FF0FW08.FF0FWFFR = mathLib.round(FF0FW08.FH5MSHQT * 100 / FF0FW08.FFRCDMFC, -mathLib.decimals(FF0FW08.FF0FWFFR));
  else
    if (FF0FW08.FH5MSHQT == 0) /* both curr sls and dmd are 0*/
      FF0FW08.FF0FWFFR = 100;
    else
      FF0FW08.FF0FWFFR = 0;
    end
  end
  FF0FW05.FF0FWFFR[FF0FWCOL] = FF0FW08.FF0FWFFR;
  FF0FW05.FF0FMFFR[FF0FWCOL] = mathLib.round(FF0FW05.FF0FWFFR[FF0FWCOL] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[FF0FWCOL]));

   /* Hist fill rate*/

  if (FF0FW08.FF0FWHOR != 0) /* Order qty*/
    FF0FW08.FF0FWHFR = mathLib.round(FF0FW08.FF0FWHIN * 100 / FF0FW08.FF0FWHOR, -mathLib.decimals(FF0FW08.FF0FWHFR));
  else
    if (FF0FW08.FF0FWHIN == 0) /* both invoiced and ordered qtys are 0*/
      FF0FW08.FF0FWHFR = 100;
    else
      FF0FW08.FF0FWHFR = 0;
    end
  end
  FF0FW05.FF0FWHFR[FF0FWCOL] = FF0FW08.FF0FWHFR;

  FFXREC.FFXNUMB = FF0FW08.FH5MSHQT; /* Curr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMCSF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FH5MSHQT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF6SLFCT; /* Mstr sls fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMSL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF6SLFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* ------------------------------------------------------------*/
   /* Calculate the M006 accum totals for the product.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW08.FF6BEINV; /* Beg inv*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMINB[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6BEINV[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0FW08.FFRPRDDU; /* Prdctn due*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMDUE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRPRDDU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRSUBBY; /* Sbmt qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMQBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRSUBBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FFRTENBY; /* Tntv qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMTBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRTENBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWSUP; /* Supply*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWSUP[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0FW08.FG4BALSH; /* Bal to shp*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMBAL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FG4BALSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWINE; /* End inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMINE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWINE[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWRIN; /* Reserved inventory*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMRIN[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWRIN[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/

  FFXREC.FFXNUMB = FF0FW08.FF6SFSTK; /* Sfty stk*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSTK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6SFSTK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF6SUGBY; /* Sugg qtb*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMSBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6SUGBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF6PRFCT; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMFCT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6PRFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

   /* FF0FW00.FF0FWASL = FF0FW08.FF6SLFCT * 12 * 2;/* Inv turns*/
   /* FF0FW00.FF0FWAIN = FF0FW08.FF6BEINV + FF0FW08.FF0FWINE;*/
   /* FF0FW00.FF0FWAIN = FF0FW00.FF0FWAIN * FF0FW08.FF0FWNMO;*/
   /* IF FF0FW00.FF0FWAIN NE 0;        /* Inventory NE zero*/
   /* FF0FW06.FF0FWTUR(FF0FWCOL) = FF0FW00.FF0FWASL / FF0FW00.FF0FWAIN (R;*/
   /* END;*/

  FFXREC.FFXNUMB = FF0FW08.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMDIR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRDIRSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FFXREC.FFXNUMB = FF0FW08.FF0FWNIL; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMNIL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWNIL[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
  FF0FW00.FF0FWSCT = FF0FW00.FF0FWSCT + 1; /* Season counter*/


end // end FF0F115

// Save header information
Function FF0F116()
   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date/time*/

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month to date.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  TA9REC.TA9ENDDT = XX0XW01.XX0XWDAT; /* Ending date*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS TO DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  if (TA9REC.TA9DTDIF == 0) /* No working days to date*/
    FF0FW00.FF0FWDTD = 1; /* Default to 1 working day*/
  else
    FF0FW00.FF0FWDTD = TA9REC.TA9DTDIF; /* Working days to date*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the number of working days in the month.*/
   /* ------------------------------------------------------------*/

  set TA9REC empty; /* Subroutine parameters*/

  TA9REC.TA9BEGDT = XX0XW01.XX0XWDAT; /* Beginning date*/
  TA9REC.TA9BEGDD = 01; /* Beginning day*/

  FF0FW00.FF0FWDAT = XX0XW01.XX0XWCYM; /* Current CCYYMM*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1; /* Increment month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = 1; /* Reset to minimum*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  TA9REC.TA9ENDDT = FF0FW00.FF0FWDAT * 100; /* Ending date*/
  TA9REC.TA9ENDDD = 01; /* Ending day*/

  try
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Working days subroutine*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA9REC.TA9RTNFL != 0)          /* or bad return code*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    FFWREC.XXXMODID = "116"; /* Module identification*/
    converseLib.validationFailed(1); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALCULATE WORKING DAYS IN MONTH";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

  FF0FW00.FF0FWDIM = TA9REC.TA9DTDIF; /* Working days in month*/

   /* ------------------------------------------------------------*/
   /* Save the information from the worksheet header row.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFABEGMO > 0) /* Begin mo passed*/
    FF0FW01.FFABEGMO = FFWREC.FFABEGMO; /* Begin mo*/
  else
    FF0FW01.FFABEGMO = FFQREC.FFABEGMO; /* Begin mo*/
  end

  FF0FW01.FFQMBYMO = FFQREC.FFQMBYMO; /* Main buy mo*/

  FF0FW01.FFQCURMO = FFQREC.FFQCURMO; /* Current mo*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOFU; /* Lst caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FFQLCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQLCOPR; /* Lst caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FFQLCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOFU; /* Oth caov futr*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FFQOCOFU = FFXREC.FFXROUND; /* Rounded number*/
  FFXREC.FFXNUMB = FFQREC.FFQOCOPR; /* Oth caov prop*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FFQOCOPR = FFXREC.FFXROUND; /* Rounded number*/
  FF0FW01.FFQLCOFP = FFQREC.FFQLCOFP; /* Lst caov futpct*/
  FF0FW01.FFQLCOPP = FFQREC.FFQLCOPP; /* Lst caov propct*/
  FF0FW01.FFQOCOFP = FFQREC.FFQOCOFP; /* Oth caov futpct*/
  FF0FW01.FFQOCOPP = FFQREC.FFQOCOPP; /* Oth caov propct*/
  FF0FW01.FF2PRIND = FFQREC.FF2PRIND; /* Prop yr ind*/
  FF0FW04.FF2FUIND = FFQREC.FF2FUIND; /* Futr yr ind*/
  FF0FW05.FF2DMIND = FFQREC.FF2DMIND; /* Dmd yr ind*/
  FF0FW06.SY2SSCIN = FFQREC.SY2SSCIN; /* Sfty stk cls ind*/

   /* ------------------------------------------------------------*/
   /* Establish the year indicators used to calculate history.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF2PRIND = FF0FW01.FF2PRIND; /* Prop yr ind*/
  FF0FW00.FF2FUIND = FF0FW04.FF2FUIND; /* Futr yr ind*/
  FF0FW00.FF2DMIND = FF0FW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Format selection information in the parameters statement.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0FW09.XPLCD = "  "; /* all lines parm*/
    FF0FW09.FF0FWSEL = "G";
    FF0FW09.FF0FWTYP = "N";
  else
    FF0FW09.XPLCD = FFWREC.XPLCD; /* Product line code*/
  end

  if (FFWREC.YPGCD == "*") /* all types*/
    FF0FW09.YPGCD = "  "; /* all types parm*/
  else
    FF0FW09.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  end
   /* end tcs*/

  FF0FW09.XPCCD = FFWREC.XPCCD; /* Product category code*/

  FF0FW09.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FW09.SYBSTGNM = FFWREC.SYBSTGNM; /* Short name*/

  FF0FW09.XWSCD = FFWREC.XWSCD; /* Wrksht typ cd*/

  FF0FW09.FF0FWCDT = FFWREC.ZZZCHGDT; /* Change date*/
  FF0FW09.FF0FWCTM = FFWREC.ZZZCHGTM; /* Change time*/

  FF0FW09.FF0FWBYM = FFWREC.FFQMBYMO; /* Actl buy mo*/
  FF0FW09.FF0FWBGM = FFWREC.FFABEGMO; /* Fcst beg mo*/


   /* ------------------------------------------------------------*/
   /* Calculate the Prior Month for FF_CONTP_MO*/
    /* and save it in a field called --> FF0FWPMO*/
   /* ------------------------------------------------------------*/

  FF0FW01.FF0FWCMO = FFQREC.FFQCURMO; /* Current mo*/

  if (FF0FW01.FF0FWCMM == 1) /* Current mo*/
    FF0FW01.FF0FWPCY = FF0FW01.FF0FWCCY - 1;
    FF0FW01.FF0FWPMM = 12;
  else
    FF0FW01.FF0FWPCY = FF0FW01.FF0FWCCY; /* curr to prior*/
    FF0FW01.FF0FWPMM = FF0FW01.FF0FWCMM - 1; /* decrement month*/
  end


end // end FF0F116

// Process worksheet items
Function FF0F117()
   /* ------------------------------------------------------------*/
   /* Obtain related info for month and save in display storage.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD == " ") /* No product category*/
    /* begin tcs*/
    if (FFWREC.XPLCD == "*") /* all lines*/

      FFWREC.XPLCD = "11"; /* category equipment*/

      FF0FS01();
      FF0FW00.FF0FPRPFC = FF7REC.FF6PRPFC; /* equip mstr prop fcst*/
      FF0FW00.FF0FSLFCT = FF7REC.FF6SLFCT; /* equip sls prop fcst*/
      FF0FW00.FF0FPRFCT = FF7REC.FF6PRFCT; /* equip Dom prod fcst*/
      FFWREC.XPLCD = "*";
    end
    /* end tcs*/

    FF0FS01(); /* Sum domestic line forecast*/
    /* begin tcs*/
    if (FFWREC.XPLCD == "*") /* all lines*/
      FF7REC.FF6PRPFC = FF7REC.FF6PRPFC - FF0FW00.FF0FPRPFC;
                                   /* Mstr prop fcst*/
      FF7REC.FF6SLFCT = FF7REC.FF6SLFCT - FF0FW00.FF0FSLFCT;
                                   /* Mstr sls  fcst*/
      FF7REC.FF6PRFCT = FF7REC.FF6PRFCT - FF0FW00.FF0FPRFCT;
                                   /* Dom prod fcst*/
    end
    /* end tcs*/
    FF0FW04.FF6PRPFC[FF0FWCOL] = FF7REC.FF6PRPFC; /* Mstr prop fcst*/

    FF0FS18(); /* ===> Back out Mstr Sls Fcst*/
    FF0FW05.FF6SLFCT[FF0FWCOL] = FF7REC.FF6SLFCT; /* Mstr sls fcst*/

    if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
      FF0FW05.FF7RVFCT[FF0FWCOL] = FF7REC.FF7RVFCT; /* Rvse dmd fcst*/
    end

    if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/

        FFWREC.XPLCD = "11"; /* category equipment*/

        FF0FS30();
        FF0FW00.FF0FPRFCT = FF7REC.FF6PRFCT; /* equip Dom prod fcst*/
        FFWREC.XPLCD = "*";
      end
      /* end tcs*/
      FF0FS30();
                                   /* get actual planned receipts line*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/
        FF7REC.FF6PRFCT = FF7REC.FF6PRFCT - FF0FW00.FF0FPRFCT;
                                   /* Dom prod fcst*/
      end
      /* end tcs*/
      FF0FW06.FF6PRFCT[FF0FWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
    else
      FF0FW06.FF6PRFCT[FF0FWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
    end

    if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/

        FFWREC.XPLCD = "11"; /* category equipment*/

        FF0FS31();
        FF0FW00.FF0FPRFCT = FF7REC.FF6PRFCT; /* equip NIL prod fcst*/
        FFWREC.XPLCD = "*";
      end
      /* end tcs*/
      FF0FS31();
                                   /* get actual planned receipts line*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/
        FF7REC.FF6PRFCT = FF7REC.FF6PRFCT - FF0FW00.FF0FPRFCT;
                                   /* NIL prod fcst*/
      end
      /* end tcs*/
      FF0FW06.FF0FWNIL[FF0FWCOL] = FF7REC.FF6PRFCT; /* NIL prod fcst*/
    else
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/

        FFWREC.XPLCD = "11"; /* category equipment*/

        FF0FS02();
        FF0FW00.FF0FPRFCT = FF7REC.FF6PRFCT; /* equip NIL prod fcst*/
        FFWREC.XPLCD = "*";
      end
      /* end tcs*/
      FF0FS02(); /* Sum NIL line prdctn fcst*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/
        FF7REC.FF6PRFCT = FF7REC.FF6PRFCT - FF0FW00.FF0FPRFCT;
                                   /* NIL prod fcst*/
      end
      /* end tcs*/
      FF0FW06.FF0FWNIL[FF0FWCOL] = FF7REC.FF6PRFCT; /* NIL prod fcst*/
    end

    if (FFWREC.XWSCD != "03") /* Not a Buy worksheet type*/
      if (VSWITM02.FF4FCTMO > FF0FW01.FFQCURMO) /* fcst mo > curr mo*/
        FF0FS75(); /* Sum  open bulk and rsrv inv*/
      else
        FF0FS77(); /* Sum open bulk and rsrv inv*/
      end
    end

    FF0FS03(); /* Sum invoice/order quantities*/

    if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
      FF0FS04(); /* Sum one year ago history*/
    end

    if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/

        FFWREC.XPLCD = "11"; /* category equipment*/

        FF0FS05();
        FF0FW00.FF0FSLFCT = FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
        FFWREC.XPLCD = "*";
      end
      /* end tcs*/
      FF0FS05(); /* Sum line shipment history*/
      /* begin tcs*/
      if (FFWREC.XPLCD == "*") /* all lines*/
        FF0FW00.FH5MSHQT = FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
        FF0FW00.FH5MSHQT = FF0FW00.FH5MSHQT - FF0FW00.FF0FSLFCT;
                                   /* shipped*/
        FF0FW05.FH5MSHQT[FF0FWCOL] = FF0FW00.FH5MSHQT; /* Shipped*/
      else
        FF0FW00.FH5MSHQT = FHAREC.FH5MSHQT - FHAREC.FH5RTSQT;
        FF0FW05.FH5MSHQT[FF0FWCOL] = FF0FW00.FH5MSHQT; /* Shipped*/
      end
      /* end tcs*/
    else
      FF0FS06(); /* Sum next three months forecast*/
      FF0FW00.FF0FWASL = FF6REC.FF6SLFCT; /* Sales forecast*/
    end

  else /* ====> There is a product category >=*/
                                   /* ' '*/

    if (FFWREC.SYBSTGNB == " ") /* ===> No style group*/

      FF0FS07(); /* Sum domestic category forecast*/
      FF0FW04.FF6PRPFC[FF0FWCOL] = FF7REC.FF6PRPFC; /* Mstr prop fcst*/

      FF0FS18(); /* ===> Back out Mstr Sls Fcst*/
      FF0FW05.FF6SLFCT[FF0FWCOL] = FF7REC.FF6SLFCT; /* Mstr sls fcst*/

      if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
        FF0FW05.FF7RVFCT[FF0FWCOL] = FF7REC.FF7RVFCT;
                                   /* Rvse dmd fcst*/
      end

      if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        set FHBREC empty;
        FHBREC.XPCCD = FFWREC.XPCCD; /* category code*/
        FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
        FF0FS38(); /* Select VWHCAT01*/
        FF0FW06.FF6PRFCT[FF0FWCOL] = FHBREC.FH7MOPRQ; /* Dom prod fcst*/
      else
        FF0FW06.FF6PRFCT[FF0FWCOL] = FF7REC.FF6PRFCT; /* Dom prod fcst*/
      end

      if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        set FHBREC empty;
        FHBREC.XPCCD = FFWREC.XPCCD; /* category code*/
        FHBREC.YSMXDV = "20"; /* div group code*/
        FF0FS38(); /* Select VWHCAT01*/
        FF0FW06.FF0FWNIL[FF0FWCOL] = FHBREC.FH7MOPRQ; /* NIL productn*/
      else
        FF0FS08(); /* Sum NIL cat prdctn fcst*/
        FF0FW06.FF0FWNIL[FF0FWCOL] = FF7REC.FF6PRFCT; /* NIL productn*/
      end

      if (FFWREC.XWSCD != "03") /* Not a Buy worksheet type*/
        if (VSWITM02.FF4FCTMO > FF0FW01.FFQCURMO) /* fcst mo > curr mo*/
          FF0FS76(); /* Sum  open bulk and rsrv inv*/
        else
          FF0FS78(); /* Sum open bulk and rsrv inv*/
        end
      end

      FF0FS09(); /* Sum invoice/order quantities*/

      if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
        FF0FS10(); /* Sum one year ago history*/
      end

      if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FF0FS11(); /* Sum category shipment history*/
        FF0FW00.FH5MSHQT = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
        FF0FW05.FH5MSHQT[FF0FWCOL] = FF0FW00.FH5MSHQT; /* Shipped*/
      else
        FF0FS12(); /* Sum next three months forecast*/
        FF0FW00.FF0FWASL = FF7REC.FF6SLFCT; /* Sales forecast*/
      end

    else /* ===> There is style group >= ' '*/

      if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
        FF0FS07(); /* Sum domestic category forecast*/
        FF0FW05.FF7RVFCT[FF0FWCOL] = FF7REC.FF7RVFCT;
                                   /* Rvse dmd fcst*/
      end

      FF0FS13(); /* Sum domestic group forecast*/
      FF0FW04.FF6PRPFC[FF0FWCOL] = FF8REC.FF6PRPFC; /* Mstr prop fcst*/

      FF0FS19(); /* ===> Back out Mstr Sls Fcst*/
      FF0FW05.FF6SLFCT[FF0FWCOL] = FF8REC.FF6SLFCT; /* Mstr sls fcst*/

      FF0FW06.FF6PRFCT[FF0FWCOL] = FF8REC.FF6PRFCT; /* Dom prod fcst*/

      FF0FS14(); /* Sum NIL group fcst*/
      FF0FW06.FF0FWNIL[FF0FWCOL] = FF8REC.FF6PRFCT; /* NIL production*/

      if (FFWREC.XWSCD != "03") /* Not a Buy worksheet type*/
        if (VSWITM02.FF4FCTMO > FF0FW01.FFQCURMO) /* fcst mo > curr mo*/
          FF0FS79(); /* Sum  open bulk and rsrv inv*/
        else
          FF0FS80(); /* Sum open bulk and rsrv inv*/
        end
      end

      FF0FS09(); /* Sum invoice/order quantities*/

      if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
        FF0FS10(); /* Sum one year ago history*/
      end

      if (VSWITM02.FF4FCTMO < FFQREC.FFQCURMO) /* Fcst mo LT current*/
        FF0FS15(); /* Sum group shipment history*/
        FF0FW00.FH5MSHQT = FH5REC.FH5MSHQT - FH5REC.FH5RTSQT;
        FF0FW05.FH5MSHQT[FF0FWCOL] = FF0FW00.FH5MSHQT; /* Shipped*/
      else
        FF0FS16(); /* Sum next three months forecast*/
        FF0FW00.FF0FWASL = FF8REC.FF6SLFCT; /* Sales forecast*/
      end

    end /* ===> Style group  check*/

  end /* ====> Product category check*/

  FF0FS17(); /* Save item information*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/


end // end FF0F117

// Close summary worksheet cursor
Function FF0F118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    try
      call "FF2930" ("C5", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2930" ("C4", SQLCA, FFQREC, VSWITM02) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0F118

// Process 2nd & 3rd year's sesns
Function FF0F119()

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FF0FW01.CACHGFL = "N"; /* Data was obtained switch*/
  FF0FW00.FF0FWFMO = 0; /* ===>  number of months formatted*/

  FF0F112(); /* Open summary worksheet cursor*/

  FF0FW00.FF0FWSWC = "N"; /* Summary cursor EOF switch*/
  FF0FW00.FF0FWSIX = 1; /* Season index*/
  FF0FW00.FF0FWMSC = 0; /* Mos in sesn counter*/

  FF0F113(); /* Fetch next summary worksheet*/
   /* -------======> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FF0FW00.FF0FWSWC == "N" /* Until end of cursor*/
   && FF0FW00.FF0FWFMO <= 12) /* ===> months formatted*/

    if (FF0FW00.FF0FWMSC == FF0FW00.FF0FWMIS[FF0FWSIX]) /* If sesn end*/

      FF0F115(); /* Calculate season totals*/
      FF0FW00.FF0FWSIX = FF0FW00.FF0FWSIX + 1; /* Incrmt sesn index*/
      FF0FW00.FF0FWMSC = 0; /* Mos in sesn counter*/

    end

    FF0FW00.FF0FWFMO = FF0FW00.FF0FWFMO + 1; /* ===> months formatted*/
    FF0FW00.FF0FWMSC = FF0FW00.FF0FWMSC + 1; /* Mos in sesn counter*/

    FF0F117(); /* ====> Save item information*/

    /* ------------------------------------------------------------*/
      /* The next two statements re-set fields used in the re-calc*/
      /* of fill rate within the subroutine ff2930*/
    /* ------------------------------------------------------------*/

    FFQREC.FFQMBYMO = -1; /* Main buy mo*/
    FFQREC.FFQABYMO = FFWREC.FFQMBYMO; /* Actl buy mo*/

    FF0F113(); /* Fetch next summary worksheet*/
    /* -------======> Driving Read*/

  end /* ===> Until end of cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0F118(); /* Close summary worksheet cursor*/

  FF0F115(); /* Calculate season totals*/

   /* ------------------------------------------------------------*/
   /* Determine the maximum beginning column for scrolling.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWMAX = FF0FW00.FF0FWCOL - 8; /* Maximum beginning column*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWR = "N"; /* Request for data switch*/
  FF0FW01.CACHGFL = "Y"; /* Data was obtained switch*/

  exit stack; /* ===> to process the current map*/


end // end FF0F119

// Format and converse the map
Function FF0F120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  FF0F122(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM001.CAITEM; /* Application data*/


end // end FF0F120

// Format the display data
Function FF0F121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM001 initial; /* M001 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM001.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM001.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM001.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM001.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM001.FFABEGMO = FF0FW01.FFABEGMO; /* Begin mo*/
  FF0FM001.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy mo*/

   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.CACHGFL != "Y") /* No modifiable data exists*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the percentage fields in the CARRYOVER % lines.*/
   /* ------------------------------------------------------------*/

  FF0FM001.FFQOCOFP = FF0FW01.FFQOCOFP; /* Oth caov futpct*/
  FF0FM001.FFQLCOFP = FF0FW01.FFQLCOFP; /* Lst caov futpct*/
  FF0FM001.FFQOCOPP = FF0FW01.FFQOCOPP; /* Oth caov propct*/
  FF0FM001.FFQLCOPP = FF0FW01.FFQLCOPP; /* Lst caov propct*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0;
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Column index*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM001.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM001.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM001.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM001.FF0FMFCO[FF0FWIXC] = FF0FW01.FF0FMFCO[FF0FWCOL];
    FF0FM001.FF0FMPCO[FF0FWIXC] = FF0FW01.FF0FMPCO[FF0FWCOL];
    FF0FM001.FF0FMFUP[FF0FWIXC] = FF0FW01.FF0FMFUP[FF0FWCOL];
    FF0FM001.FF0FMFUA[FF0FWIXC] = FF0FW01.FF0FMFUA[FF0FWCOL];
    FF0FM001.FF0FMFUI[FF0FWIXC] = FF0FW01.FF0FMFUI[FF0FWCOL];
    FF0FM001.FF0FMFUC[FF0FWIXC] = FF0FW01.FF0FMFUC[FF0FWCOL];
    FF0FM001.FF0FMFUT[FF0FWIXC] = FF0FW01.FF0FMFUT[FF0FWCOL];
    FF0FM001.FF0FMNFP[FF0FWIXC] = FF0FW01.FF0FMNFP[FF0FWCOL];
    FF0FM001.FF0FMNFA[FF0FWIXC] = FF0FW01.FF0FMNFA[FF0FWCOL];
    FF0FM001.FF0FMNFI[FF0FWIXC] = FF0FW01.FF0FMNFI[FF0FWCOL];
    FF0FM001.FF0FMNFC[FF0FWIXC] = FF0FW01.FF0FMNFC[FF0FWCOL];
    FF0FM001.FF0FMNFT[FF0FWIXC] = FF0FW01.FF0FMNFT[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* first season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM001.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM001.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1;

  end


end // end FF0F121

// Check change authorization
Function FF0F122()
   /* ------------------------------------------------------------*/
   /* If no data was obtained, autoskip page and scroll amount.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.CACHGFL != "Y") /* No data was obtained*/

    set FF0FM001.FF0FWPAG skip, bold; /* Page number*/
    /* SET FF0FM001.FF0FWLRS AUTOSKIP  ; Left/right scroll amount*/

  end


end // end FF0F122

// summarize vfhlin01 quantities
Function FF0F125()
  FFFREC.FFFFUNCD = "S2"; /* Function code*/

  try
    call "FF5510" (FFFREC, SQLCA, FH4REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

  FFWREC.XXXMODID = "X51"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "FF0F125 SUM VFHLIN01 QUANTITIES";
    TAEREC.TAEDESC1 = "SUBROUTINE FF5510 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* System error occurred*/

  exit stack; /* Exit to display map*/
end // end FF0F125

// Check attention identifier
Function FF0F130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F130

// Reset highlighted fields
Function FF0F140()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM001.FF0FWPAG initialAttributes; /* Page number*/
   /* SET FF0FM001.FF0FWLRS DEFINED   ; Left/right scroll amount*/

  set FF0FM001.CATOAP initialAttributes; /* TO application*/
  set FF0FM001.CAITEM initialAttributes; /* Application data*/


end // end FF0F140

// Verify the entered data
Function FF0F150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FF0FM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F151(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F152(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether valid a request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F153(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F154(); /* Verify M001 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F150

// Verify page request
Function FF0F151()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no more pages.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM001.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '151' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM001.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM001.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    set FF0FM001.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F151

// Verify scroll request
Function FF0F152()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "152"; /* Module identification*/

    if (converseVar.eventKey is pf10) /* Scroll left request*/

      converseLib.validationFailed(23); /* Unable to scroll left*/
    else
      converseLib.validationFailed(24); /* Unable to scroll right*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "152"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    set FF0FM001.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F152

// Verify print request
Function FF0F153()
   /* ------------------------------------------------------------*/
   /* If no modifiable data exists, indicate no data to process.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.CACHGFL != "Y") /* No modifiable data exists*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(208); /* No data to process*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM001.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '153' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM001.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "153"; /* Module identification*/
    set FF0FM001.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F153

// Verify M001 changed fields
Function FF0F154()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM001.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '154' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM001.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM001.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF0FM001.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F154

// Process valid input request
Function FF0F160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0FW00.FF0FWPAD = +1; /* Page direction*/

    if (FF0FM001.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      FF0FW00.FF0FWPAG = FF0FM001.FF0FWPAG; /* Page number*/
    else
      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "160"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0F160

// Submit print worksheet request
Function FF0F161()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0F162(); /* format production jcl*/
    else
      FF0F163(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "161"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0F161

// Submit prod jcl FF1901
Function FF0F162()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0FT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      FF0FW09.FF2NSEAS = FF0FW00.FF2NSEAS;
      FF0FW09.FF0FWMIS[1] = FF0FW00.FF0FWMIS[1];
      FF0FW09.FF0FWMIS[2] = FF0FW00.FF0FWMIS[2];
      FF0FW09.FF0FWMIS[3] = FF0FW00.FF0FWMIS[3];
      FF0FW09.FF0FWMIS[4] = FF0FW00.FF0FWMIS[4];
      TA6REC.TARJCL[TA6INDEX] = FF0FW09.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0FT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0FT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0FT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Background Job Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0F162

// Submit test jcl FF1901
Function FF0F163()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0FT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format selection information in the parameters statement.*/
      /* ------------------------------------------------------------*/

      FF0FW09.FF2NSEAS = FF0FW00.FF2NSEAS;
      FF0FW09.FF0FWMIS[1] = FF0FW00.FF0FWMIS[1];
      FF0FW09.FF0FWMIS[2] = FF0FW00.FF0FWMIS[2];
      FF0FW09.FF0FWMIS[3] = FF0FW00.FF0FWMIS[3];
      FF0FW09.FF0FWMIS[4] = FF0FW00.FF0FWMIS[4];
      TA6REC.TARJCL[TA6INDEX] = FF0FW09.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0FT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0FT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0FT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Background Job Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* User cancelled request*/
  else
    converseLib.validationFailed(1); /* System error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end FF0F163

// Display CURRENT DEMAND PROP
Function FF0F200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F220(); /* Format and display the map*/

  FF0F230(); /* Check attention identifier*/

  FF0F240(); /* Reset fields to normal intensity*/

  FF0F250(); /* Verify the entered data*/

  FF0F260(); /* Process valid input request*/


end // end FF0F200

// Format and converse the map
Function FF0F220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM002 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM002.CAITEM; /* Application data*/


end // end FF0F220

// Format the display data
Function FF0F221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM002 initial; /* M001 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM002.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM002.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM002.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM002.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM002.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM002.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM002.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM002.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM002.FFABEGMO = FF0FW01.FFABEGMO; /* Begin month*/
  FF0FM002.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0; /* Right scroll amount*/
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Until end of map columns*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM002.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM002.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM002.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM002.FF0FMPRP[FF0FWIXC] = FF0FW02.FF0FMPRP[FF0FWCOL];
    FF0FM002.FF0FMPRA[FF0FWIXC] = FF0FW02.FF0FMPRA[FF0FWCOL];
    FF0FM002.FF0FMPRI[FF0FWIXC] = FF0FW02.FF0FMPRI[FF0FWCOL];
    FF0FM002.FF0FMPRC[FF0FWIXC] = FF0FW02.FF0FMPRC[FF0FWCOL];
    FF0FM002.FF0FMPRT[FF0FWIXC] = FF0FW02.FF0FMPRT[FF0FWCOL];
    FF0FM002.FF0FMNPP[FF0FWIXC] = FF0FW02.FF0FMNPP[FF0FWCOL];
    FF0FM002.FF0FMNPA[FF0FWIXC] = FF0FW02.FF0FMNPA[FF0FWCOL];
    FF0FM002.FF0FMNPI[FF0FWIXC] = FF0FW02.FF0FMNPI[FF0FWCOL];
    FF0FM002.FF0FMNPC[FF0FWIXC] = FF0FW02.FF0FMNPC[FF0FWCOL];
    FF0FM002.FF0FMNPT[FF0FWIXC] = FF0FW02.FF0FMNPT[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* frist season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM002.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM002.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1; /* Right scroll amount*/

  end


end // end FF0F221

// Check attention identifier
Function FF0F230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F230

// Reset highlighted fields
Function FF0F240()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM002.FF0FWPAG initialAttributes; /* Page number*/

  set FF0FM002.CATOAP initialAttributes; /* TO application*/
  set FF0FM002.CAITEM initialAttributes; /* Application data*/


end // end FF0F240

// Verify the entered data
Function FF0F250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FF0FM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F251(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F252(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F253(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F254(); /* Verify M002 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F250

// Verify page request
Function FF0F251()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM002.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '251' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM002.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM002.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    set FF0FM002.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F251

// Verify scroll request
Function FF0F252()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "252"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "252"; /* Module identification*/
    set FF0FM002.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F252

// Verify print request
Function FF0F253()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM002.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '253' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM002.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "253"; /* Module identification*/
    set FF0FM002.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F253

// Verify M002 changed fields
Function FF0F254()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM002.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '254' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM002.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM002.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "254"; /* Module identification*/
    set FF0FM002.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F254

// Process valid input request
Function FF0F260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0FM002.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      if (FF0FM002.FF0FWPAG < FF0FW00.FF0FWPAG) /* Page backward*/

        FF0FW00.FF0FWPAD = -1; /* Page direction*/
      else
        FF0FW00.FF0FWPAD = +1; /* Page direction*/

      end

      FF0FW00.FF0FWPAG = FF0FM002.FF0FWPAG; /* Page number*/

    else

      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "260"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end

end // end FF0F260

// Display CURRENT DEMAND TOTAL
Function FF0F300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F320(); /* Format and display the map*/

  FF0F330(); /* Check attention identifier*/

  FF0F340(); /* Reset fields to normal intensity*/

  FF0F350(); /* Verify the entered data*/

  FF0F360(); /* Process valid input request*/


end // end FF0F300

// Format and converse the map
Function FF0F320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM003 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM003.CAITEM; /* Application data*/


end // end FF0F320

// Format the display data
Function FF0F321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM003 initial; /* M001 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM003.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM003.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM003.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM003.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM003.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM003.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM003.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM003.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM003.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM003.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM003.FFABEGMO = FF0FW01.FFABEGMO; /* Begin month*/
  FF0FM003.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0; /* Right scroll amount*/
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Until end of map columns*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM003.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM003.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM003.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM003.FF0FMTDP[FF0FWIXC] = FF0FW03.FF0FMTDP[FF0FWCOL];
    FF0FM003.FF0FMTDA[FF0FWIXC] = FF0FW03.FF0FMTDA[FF0FWCOL];
    FF0FM003.FF0FMTDI[FF0FWIXC] = FF0FW03.FF0FMTDI[FF0FWCOL];
    FF0FM003.FF0FMTDC[FF0FWIXC] = FF0FW03.FF0FMTDC[FF0FWCOL];
    FF0FM003.FF0FMTDT[FF0FWIXC] = FF0FW03.FF0FMTDT[FF0FWCOL];
    FF0FM003.FF0FWCAP[FF0FWIXC] = FF0FW03.FF0FWCAP[FF0FWCOL];
    FF0FM003.FF0FMTAF[FF0FWIXC] = FF0FW03.FF0FMTAF[FF0FWCOL];
    FF0FM003.FF0FMTAP[FF0FWIXC] = FF0FW03.FF0FMTAP[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* first season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM003.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM003.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1; /* Right scroll amount*/

  end


end // end FF0F321

// Check attention identifier
Function FF0F330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM003.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F330

// Reset highlighted fields
Function FF0F340()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM003.FF0FWPAG initialAttributes; /* Page number*/

  set FF0FM003.CATOAP initialAttributes; /* TO application*/
  set FF0FM003.CAITEM initialAttributes; /* Application data*/


end // end FF0F340

// Verify the entered data
Function FF0F350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "350"; /* Module identification*/
    set FF0FM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F351(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F352(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F353(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F354(); /* Verify M003 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F350

// Verify page request
Function FF0F351()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM003.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '351' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM003.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/
    /* ;*/
   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM003.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "351"; /* Module identification*/
    set FF0FM003.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F351

// Verify scroll request
Function FF0F352()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "352"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "352"; /* Module identification*/
    set FF0FM003.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end

end // end FF0F352

// Verify print request
Function FF0F353()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM003.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '353' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM003.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "353"; /* Module identification*/
    set FF0FM003.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F353

// Verify M003 changed fields
Function FF0F354()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM003.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '354' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM003.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM003.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "354"; /* Module identification*/
    set FF0FM003.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F354

// Process valid input request
Function FF0F360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0FM003.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      if (FF0FM003.FF0FWPAG < FF0FW00.FF0FWPAG) /* Page backward*/

        FF0FW00.FF0FWPAD = -1; /* Page direction*/
      else
        FF0FW00.FF0FWPAD = +1; /* Page direction*/

      end

      FF0FW00.FF0FWPAG = FF0FM003.FF0FWPAG; /* Page number*/

    else

      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "360"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0F360

// Display DEMAND FORECAST
Function FF0F400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F420(); /* Format and display the map*/

  FF0F430(); /* Check attention identifier*/

  FF0F440(); /* Reset fields to normal intensity*/

  FF0F450(); /* Verify the entered data*/

  FF0F460(); /* Process valid input request*/


end // end FF0F400

// Format and converse the map
Function FF0F420()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F421(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM004 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM004.CAITEM; /* Application data*/


end // end FF0F420

// Format the display data
Function FF0F421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM004 initial; /* M004 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM004.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM004.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM004.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM004.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM004.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM004.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM004.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM004.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM004.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM004.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM004.FFABEGMO = FF0FW01.FFABEGMO; /* Begin month*/
  FF0FM004.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the future year indicator in the HIST FUT % line.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD != "  "
   || FFWREC.SYBSTGNB != "     ")
    if (FF2REC.FF2ALCAT != "  ")
      FF0FM004.FF0FMFAI = "A"; /* Futr alt cat indicator*/
      FF0FM004.FF0FMPAI = "A"; /* Prop alt cat indicator*/
    end
  end

  FF0FM004.FF2FUIND = FF0FW04.FF2FUIND; /* Futr yr ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0; /* Right scroll amount*/
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Until end of map columns*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM004.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM004.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM004.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM004.FF0FMDFU[FF0FWIXC] = FF0FW04.FF0FMDFU[FF0FWCOL];
    FF0FM004.FF0FMDNF[FF0FWIXC] = FF0FW04.FF0FMDNF[FF0FWCOL];
    FF0FM004.FF0FMDTF[FF0FWIXC] = FF0FW04.FF0FMDTF[FF0FWCOL];
    FF0FM004.FF0FMDPR[FF0FWIXC] = FF0FW04.FF0FMDPR[FF0FWCOL];
    FF0FM004.FF0FMDNP[FF0FWIXC] = FF0FW04.FF0FMDNP[FF0FWCOL];
    FF0FM004.FF0FMDTP[FF0FWIXC] = FF0FW04.FF0FMDTP[FF0FWCOL];
    FF0FM004.FF0FMDCP[FF0FWIXC] = FF0FW04.FF0FMDCP[FF0FWCOL];
    FF0FM004.FF0FMPCF[FF0FWIXC] = FF0FW04.FF0FMPCF[FF0FWCOL];
    FF0FM004.FF0FMPRF[FF0FWIXC] = FF0FW04.FF0FMPRF[FF0FWCOL];
    FF0FM004.FF0FWDFF[FF0FWIXC] = FF0FW04.FF0FWDFF[FF0FWCOL];
    FF0FM004.FF0FWDHF[FF0FWIXC] = FF0FW04.FF0FWDHF[FF0FWCOL];
    FF0FM004.FF0FWDFI[FF0FWIXC] = FF0FW04.FF0FWDFI[FF0FWCOL];
    FF0FM004.FF0FWDHI[FF0FWIXC] = FF0FW04.FF0FWDHI[FF0FWCOL];
    FF0FM004.FF0FMOBK[FF0FWIXC] = FF0FW04.FF0FMOBK[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* first season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM004.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM004.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1; /* Right scroll amount*/

  end


end // end FF0F421

// Check attention identifier
Function FF0F430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM004.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F430

// Reset highlighted fields
Function FF0F440()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM004.FF0FWPAG initialAttributes; /* Page number*/

  set FF0FM004.CATOAP initialAttributes; /* TO application*/
  set FF0FM004.CAITEM initialAttributes; /* Application data*/


end // end FF0F440

// Verify the entered data
Function FF0F450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "450"; /* Module identification*/
    set FF0FM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F451(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F452(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F453(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F454(); /* Verify M004 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F450

// Verify page request
Function FF0F451()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM004.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '451' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM004.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM004.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "451"; /* Module identification*/
    set FF0FM004.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F451

// Verify scroll request
Function FF0F452()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "452"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "452"; /* Module identification*/
    set FF0FM004.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F452

// Verify print request
Function FF0F453()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM004.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '453' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM004.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "453"; /* Module identification*/
    set FF0FM004.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F453

// Verify M004 changed fields
Function FF0F454()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM004.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '454' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM004.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM004.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "454"; /* Module identification*/
    set FF0FM004.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F454

// Process valid input request
Function FF0F460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0FM004.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      if (FF0FM004.FF0FWPAG < FF0FW00.FF0FWPAG) /* Page backward*/

        FF0FW00.FF0FWPAD = -1; /* Page direction*/
      else
        FF0FW00.FF0FWPAD = +1; /* Page direction*/

      end

      FF0FW00.FF0FWPAG = FF0FM004.FF0FWPAG; /* Page number*/

    else

      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "460"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end


  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0F460

// Display SALES FORECAST
Function FF0F500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F520(); /* Format and display the map*/

  FF0F530(); /* Check attention identifier*/

  FF0F540(); /* Reset fields to normal intensity*/

  FF0F550(); /* Verify the entered data*/

  FF0F560(); /* Process valid input request*/


end // end FF0F500

// Format and converse the map
Function FF0F520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F521(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM005.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM005.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM005.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM005 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM005.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM005.CAITEM; /* Application data*/


end // end FF0F520

// Format the display data
Function FF0F521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM005 initial; /* M005 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM005.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM005.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM005.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM005.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM005.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM005.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM005.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM005.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM005.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM005.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM005.FFABEGMO = FF0FW01.FFABEGMO; /* Begin month*/
  FF0FM005.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the demand year indicator in the HIST SEAS IDX line.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD != "  "
   || FFWREC.SYBSTGNB != "     ")
    if (FF2REC.FF2ALCAT != "  ")
      FF0FM005.FF0FMDAI = "A"; /* Demand alt cat indicator*/
    end
  end

  FF0FM005.FF2DMIND = FF0FW05.FF2DMIND; /* Dmd yr ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0; /* Right scroll amount*/
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Until end of map columns*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM005.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM005.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM005.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM005.FF0FMFCD[FF0FWIXC] = FF0FW05.FF0FMFCD[FF0FWCOL];
    FF0FM005.FF0FMMDM[FF0FWIXC] = FF0FW05.FF0FMMDM[FF0FWCOL];
    FF0FM005.FF0FWFSI[FF0FWIXC] = FF0FW05.FF0FWFSI[FF0FWCOL];
    FF0FM005.FF0FWHSI[FF0FWIXC] = FF0FW05.FF0FWHSI[FF0FWCOL];
    FF0FM005.FF0FWRSI[FF0FWIXC] = FF0FW05.FF0FWRSI[FF0FWCOL];
    FF0FM005.FF0FMRVF[FF0FWIXC] = FF0FW05.FF0FMRVF[FF0FWCOL];
    FF0FM005.FF0FMFFR[FF0FWIXC] = FF0FW05.FF0FMFFR[FF0FWCOL];
    FF0FM005.FF0FWHFR[FF0FWIXC] = FF0FW05.FF0FWHFR[FF0FWCOL];
    FF0FM005.FF0FMCSF[FF0FWIXC] = FF0FW05.FF0FMCSF[FF0FWCOL];
    FF0FM005.FF0FMMSL[FF0FWIXC] = FF0FW05.FF0FMMSL[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* first season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM005.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM005.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1; /* Right scroll amount*/

  end


end // end FF0F521

// Check attention identifier
Function FF0F530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM005.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM005"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F530

// Reset highlighted fields
Function FF0F540()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM005.FF0FWPAG initialAttributes; /* Page number*/

  set FF0FM005.CATOAP initialAttributes; /* TO application*/
  set FF0FM005.CAITEM initialAttributes; /* Application data*/


end // end FF0F540

// Verify the entered data
Function FF0F550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF0FM005.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F551(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F552(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F553(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F554(); /* Verify M005 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F550

// Verify page request
Function FF0F551()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM005.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '551' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM005.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM005.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "551"; /* Module identification*/
    set FF0FM005.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F551

// Verify scroll request
Function FF0F552()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "552"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "552"; /* Module identification*/
    set FF0FM005.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F552

// Verify print request
Function FF0F553()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM005.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '553' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM005.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "553"; /* Module identification*/
    set FF0FM005.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F553

// Verify M005 changed fields
Function FF0F554()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM005.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '554' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM005.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM005.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "554"; /* Module identification*/
    set FF0FM005.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F554

// Process valid input request
Function FF0F560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    if (FF0FM005.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      if (FF0FM005.FF0FWPAG < FF0FW00.FF0FWPAG) /* Page backward*/

        FF0FW00.FF0FWPAD = -1; /* Page direction*/
      else
        FF0FW00.FF0FWPAD = +1; /* Page direction*/

      end

      FF0FW00.FF0FWPAG = FF0FM005.FF0FWPAG; /* Page number*/

    else

      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "560"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end


  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0F560

// Display INVENTORY POSITION
Function FF0F600()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0F620(); /* Format and display the map*/

  FF0F630(); /* Check attention identifier*/

  FF0F640(); /* Reset fields to normal intensity*/

  FF0F650(); /* Verify the entered data*/

  FF0F660(); /* Process valid input request*/


end // end FF0F600

// Format and converse the map
Function FF0F620()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0FW00.FF0FWSWF == "Y") /* Map must be formatted*/
      FF0F621(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0FM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0FM006.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0FM006.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FF0FM006.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FF0FM006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FF0FM006 alarm; /* Indicate sound alarm*/

  end

  converse FF0FM006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FF0FM006.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0FM006.CAITEM; /* Application data*/


end // end FF0F620

// Format the display data
Function FF0F621()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0FM006 initial; /* M006 input/output area*/

  FF0FW00.FF0FWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map heading fields from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FM006.FF0FWPAG = FF0FW00.FF0FWPAG; /* Page number*/

  FF0FM006.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0FM006.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FF0FM006.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF0FM006.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FF0FM006.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF0FM006.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FF0FM006.XWSABRV = FFWREC.XWSABRV; /* worksheet typ abbrev*/

  FF0FM006.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF0FM006.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FF0FM006.FFABEGMO = FF0FW01.FFABEGMO; /* Begin month*/
  FF0FM006.FFQMBYMO = FF0FW01.FFQMBYMO; /* Main buy month*/

   /* ------------------------------------------------------------*/
   /* Format the safety stock indicator in the SFTY STOCK line.*/
   /* ------------------------------------------------------------*/

  FF0FM006.SY2SSCIN = FF0FW06.SY2SSCIN; /* Sfty stk ind*/

   /* ------------------------------------------------------------*/
   /* Format the fields in each column from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRSA = 0; /* Right scroll amount*/
  FF0FW00.FF0FWIXC = 1; /* Column index*/

  FF0FW00.FF0FWCOL = FF0FW00.FF0FWBEG; /* Beginning column*/
  FF0FW00.FF0FWEND = FF0FW00.FF0FWBEG + 7; /* Ending column*/

  while (FF0FW00.FF0FWIXC <= 8) /* Until end of map columns*/

    if (FF0FW00.FF0FWIXC == 1)
      FF0FM006.FF0FWSEA = FF0FW01.FF0FMSCT[FF0FWCOL];
      FF0FW01.FF0FMBSF[FF0FWCOL] = "Y";
    else
      FF0FW01.FF0FMBSF[FF0FWCOL] = "N";
    end

    set FF0FM006.FF0FMMON[FF0FWIXC] skip; /* Forecast month*/

    FF0FM006.FF0FMMON[FF0FWIXC] = FF0FW01.FF0FMMON[FF0FWCOL];
    FF0FM006.FF0FMCSF[FF0FWIXC] = FF0FW05.FF0FMCSF[FF0FWCOL];
    FF0FM006.FF0FMMSL[FF0FWIXC] = FF0FW05.FF0FMMSL[FF0FWCOL];
    FF0FM006.FF0FMDUE[FF0FWIXC] = FF0FW06.FF0FMDUE[FF0FWCOL];
    FF0FM006.FF0FMQBY[FF0FWIXC] = FF0FW06.FF0FMQBY[FF0FWCOL];
    FF0FM006.FF0FMTBY[FF0FWIXC] = FF0FW06.FF0FMTBY[FF0FWCOL];
    FF0FM006.FF0FMBAL[FF0FWIXC] = FF0FW06.FF0FMBAL[FF0FWCOL];
    FF0FM006.FF0FMSBY[FF0FWIXC] = FF0FW06.FF0FMSBY[FF0FWCOL];
    FF0FM006.FF0FMFCT[FF0FWIXC] = FF0FW06.FF0FMFCT[FF0FWCOL];
    /* MOVE FF0FW06.FF0FWTUR(FF0FWCOL) TO FF0FM006.FF0FWTUR(FF0FWIXC);*/
    FF0FM006.FF0FMDIR[FF0FWIXC] = FF0FW06.FF0FMDIR[FF0FWCOL];
    FF0FM006.FF0FMNIL[FF0FWIXC] = FF0FW06.FF0FMNIL[FF0FWCOL];
    FF0FM006.FF0FMRIN[FF0FWIXC] = FF0FW06.FF0FMRIN[FF0FWCOL];

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /* Season subtotal*/
     || FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* or accum total*/

       /* NEXT SENTENCE*/

    else

      FF0FM006.FF0FMINB[FF0FWIXC] = FF0FW06.FF0FMINB[FF0FWCOL];
      FF0FM006.FF0FMSUP[FF0FWIXC] = FF0FW06.FF0FMSUP[FF0FWCOL];
      FF0FM006.FF0FMINE[FF0FWIXC] = FF0FW06.FF0FMINE[FF0FWCOL];
      FF0FM006.FF0FMSTK[FF0FWIXC] = FF0FW06.FF0FMSTK[FF0FWCOL];

    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "  SUB" /**/
     && FF0FW00.FF0FWIXC <= 8                 /**/
     && FF0FW01.FF0FMSCT[FF0FWCOL] == 1)      /* first season*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM006.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM") /* ===> end of season data*/
      FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      while (FF0FW00.FF0FWIXC <= 8) /* Column index*/
        set FF0FM006.FF0FMMON[FF0FWIXC] skip, invisible; /* Forecast month*/
        FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
      end
    end

    if (FF0FW01.FF0FMMON[FF0FWCOL] != "     "
     && FF0FW01.FF0FMMON[FF0FWCOL] != "  SUB"
     && FF0FW01.FF0FMMON[FF0FWCOL] != "ACCUM")
      FF0FW00.FF0FWLDM = FF0FW01.FF4FCTMO[FF0FWCOL]; /* Last disp mo*/
    end

    FF0FW00.FF0FWCOL = FF0FW00.FF0FWCOL + 1; /* Current column*/
    FF0FW00.FF0FWIXC = FF0FW00.FF0FWIXC + 1; /* Column index*/
    FF0FW00.FF0FWRSA = FF0FW00.FF0FWRSA + 1; /* Right scroll amount*/

  end


end // end FF0F621

// Check attention identifier
Function FF0F630()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0FM006.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "630"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* Return to application*/
      COMMAREA.CAITEM = "FF0FM006"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0L"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "630"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0F630

// Reset highlighted fields
Function FF0F640()
   /* ------------------------------------------------------------*/
   /* Reset the modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0FM006.FF0FWPAG initialAttributes; /* Page number*/

  set FF0FM006.CATOAP initialAttributes; /* TO application*/
  set FF0FM006.CAITEM initialAttributes; /* Application data*/


end // end FF0F640

// Verify the entered data
Function FF0F650()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "650"; /* Module identification*/
    set FF0FM006.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to page was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page request*/
    FF0F651(); /* Verify page request*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FF0F652(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to print was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print request*/
    FF0F653(); /* Verify print request*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, verify any changed fields.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FF0F654(); /* Verify M006 changed fields*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0F650

// Verify page request
Function FF0F651()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM006.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '651' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM006.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Ensure that the page number is within allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.FF0FWPAG < 1 /* Less than minimum*/
   || FF0FM006.FF0FWPAG > 6) /* or greater than maximum*/

    FFWREC.XXXMODID = "651"; /* Module identification*/
    set FF0FM006.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(176); /* Invalid page number*/

  end


end // end FF0F651

// Verify scroll request
Function FF0F652()
   /* ------------------------------------------------------------*/
   /* If no more columns exist, indicate unable to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0FW00.FF0FWBEG == 1)       /* and at minimum column*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    converseLib.validationFailed(23); /* Unable to scroll left*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FF0FW00.FF0FWEDM != 0)
      if (FF0FW00.FF0FWLDM == FF0FW00.FF0FWEDM) /* If no more data*/
        if (FF0FW01.FF0FMMON[FF0FWCOL] == "ACCUM"
         || FF0FW01.FF0FMMON[FF0FWCOL] == "     ")
          FFWREC.XXXMODID = "152"; /* Module identification*/
          converseLib.validationFailed(24); /* Unable to scroll right*/
          return; /* Return to previous process*/
        end
      end
    end

    if (FFWREC.XWSCD == "03") /* If buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 14) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 16) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 18) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 20) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    else /* Not buy worksheet*/

      if (FF0FW00.FF2NSEAS == 1 /* One season per year*/
       && FF0FW00.FF0FWCOL > 42) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 2 /* Two seasons per year*/
       && FF0FW00.FF0FWCOL > 48) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 3 /* Three seasons per year*/
       && FF0FW00.FF0FWCOL > 54) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

      if (FF0FW00.FF2NSEAS == 4 /* Four seasons per year*/
       && FF0FW00.FF0FWCOL > 60) /* and at max column*/
        FFWREC.XXXMODID = "652"; /* Module identification*/
        converseLib.validationFailed(24); /* Unable to scroll right*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "652"; /* Module identification*/
    set FF0FM006.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F652

// Verify print request
Function FF0F653()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM006.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '653' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM006.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "653"; /* Module identification*/
    set FF0FM006.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F653

// Verify M006 changed fields
Function FF0F654()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the scroll amount was changed.*/
   /* ------------------------------------------------------------*/

   /* IF FF0FM006.FF0FWLRS NE FF0FW00.FF0FWLRS; Left/right scroll*/

    /* MOVE '654' TO FFWREC.XXXMODID ; Module identification*/
    /* SET FF0FM006.FF0FWLRS CURSOR,BRIGHT  ; Highlight*/
    /* MOVE 221 TO EZEMNO            ; Modifications not allowed*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Indicate an error if the page number was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0FM006.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page was changed*/

    FFWREC.XXXMODID = "654"; /* Module identification*/
    set FF0FM006.FF0FWPAG cursor, normal; /* Highlight*/
    converseLib.validationFailed(220); /* Modifications not allowed*/

  end


end // end FF0F654

// Process valid input request
Function FF0F660()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If page was requested, indicate the next page to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Page requested*/

    FF0FW00.FF0FWPAD = -1; /* Page direction*/

    if (FF0FM006.FF0FWPAG != FF0FW00.FF0FWPAG) /* Page specified*/

      FF0FW00.FF0FWPAG = FF0FM006.FF0FWPAG; /* Page number*/
    else
      FF0FW00.FF0FWPAG = FF0FW00.FF0FWPAG + FF0FW00.FF0FWPAD;
                                   /* Page number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0FW00.FF0FWDIX = FF0FW00.FF0FWBEG - 1;
    FF0FW00.FF0FWLSA = 1; /* Left scroll amount*/
    while (FF0FW00.FF0FWDIX > 0
     && FF0FW01.FF0FMBSF[FF0FWDIX] != "Y") /* not screen begin col*/
      FF0FW00.FF0FWLSA = FF0FW00.FF0FWLSA + 1;
      FF0FW00.FF0FWDIX = FF0FW00.FF0FWDIX - 1;
    end

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG - FF0FW00.FF0FWLSA;

    if (FF0FW00.FF0FWBEG < 1) /* Beginning LT minimum*/

      FF0FW00.FF0FWBEG = 1; /* Default to minimum*/
      FFWREC.XXXMODID = "660"; /* Module identification*/
      FFWREC.XXXMSGNO = 198; /* First column is shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0FW00.FF0FWBEG = FF0FW00.FF0FWBEG + FF0FW00.FF0FWRSA;

    if (FF0FW00.FF0FWCOL <= 60 /* columns not yet all obtained*/
     && FFWREC.XWSCD != "03") 

      FF0FS20(); /* check for 2nd or 3rd year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If print was requested, submit JCL to print worksheets.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* Print requested*/

    FF0F161(); /* Submit print request*/

    return; /* Return to previous process*/

  end


end // end FF0F660

// Sum domestic line forecast
Function FF0FS01()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the category by month master table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.XPCCD = FFWREC.XPLCD; /* Product line code*/
  FF7REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

   /* BEGIN TCS*/
  if (FFWREC.XPLCD == "*")
    try
      call "FF2940" ("S2", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2940" ("SS", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* END   TCS*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM DOMESTIC LINE FORECAST";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end FF0FS01

// Sum NIL line pfcst qty
Function FF0FS02()
   /* ------------------------------------------------------------*/
   /* Summarize the rows from the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPLCD; /* Product line code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

   /* BEGIN TCS*/
  if (FFWREC.XPLCD == "*")
    try
      call "FF2940" ("S2", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "FF2940" ("SS", SQLCA, FF7REC, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    end
  end
   /* END   TCS*/

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "SUM NIL LINE FORECAST";
    TAEREC.TAEDESC1 = "SUBROUTINE FF2940 CALL WAS NOT SUCCESSFUL";
    TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/

  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/

  exit stack; /* Exit to display map*/


end // end FF0FS02

// Sum invoice/order quantities
Function FF0FS03()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS03"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHIN = FH4REC.FH2SHP; /* Invoiced qty*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual futr*/
    FF0FW00.FF0FWHOR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Ordered qty*/
    FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH1ALQTY;
    FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH3CNCL;
  else
    FF0FW00.FF0FWHOR = FH4REC.FH-FRZ-PRAL-QTY +     FH4REC.FH-FRZ-ALOC-QTY +     FH4REC.FH-FRZ-SHP-QTY +     FH4REC.FH-FRZ-CNCL-QTY;
  end

  if (FF0FW00.FF0FWCOL > 1)
    FF0FW07.FF0FWHIN = FF0FW07.FF0FWHIN + FF0FW00.FF0FWHIN;
    FF0FW08.FF0FWHIN = FF0FW08.FF0FWHIN + FF0FW00.FF0FWHIN;
    FF0FW07.FF0FWHOR = FF0FW07.FF0FWHOR + FF0FW00.FF0FWHOR;
    FF0FW08.FF0FWHOR = FF0FW08.FF0FWHOR + FF0FW00.FF0FWHOR;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS03"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHIN = FF0FW00.FF0FWHIN + FH4REC.FH2SHP; /* Invoiced qty*/

  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH2SHP; /* Ordered qty*/
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH1PAQTY;
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH1ALQTY;
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH4REC.FH3CNCL;

  if (FF0FW00.FF0FWCOL > 1)
    FF0FW07.FF0FWHIN = FF0FW07.FF0FWHIN + FH4REC.FH2SHP;
    FF0FW08.FF0FWHIN = FF0FW08.FF0FWHIN + FH4REC.FH2SHP;
    FF0FW07.FF0FWHOR = FF0FW07.FF0FWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
    FF0FW08.FF0FWHOR = FF0FW08.FF0FWHOR + FH4REC.FH2SHP + FH4REC.FH1PAQTY     + FH4REC.FH1ALQTY + FH4REC.FH3CNCL;
  end

end // end FF0FS03

// Sum one year ago history
Function FF0FS04()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "FT"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS04"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* before 199206 use actual future*/
    FF0FW00.FF0FWHFU = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist futr qty*/
    FF0FW00.FF0FWHFU = FF0FW00.FF0FWHFU + FH4REC.FH1ALQTY;
    FF0FW00.FF0FWHFU = FF0FW00.FF0FWHFU + FH4REC.FH3CNCL;
  else
    FF0FW00.FF0FWHFU = FH4REC.FH-FRZ-PRAL-QTY +     FH4REC.FH-FRZ-ALOC-QTY +     FH4REC.FH-FRZ-SHP-QTY +     FH4REC.FH-FRZ-CNCL-QTY;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "PR"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS04"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHPR = FH4REC.FH2SHP + FH4REC.FH1PAQTY; /* Hist prop qty*/
  FF0FW00.FF0FWHPR = FF0FW00.FF0FWHPR + FH4REC.FH1ALQTY;
  FF0FW00.FF0FWHPR = FF0FW00.FF0FWHPR + FH4REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHDM = FF0FW00.FF0FWHFU + FF0FW00.FF0FWHPR;
                                   /* Hist demand qty*/


end // end FF0FS04

// Sum line shipment history
Function FF0FS05()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by line table.*/
   /* ------------------------------------------------------------*/

  set FHAREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  FHAREC.XDVCD = "10"; /* Division group code*/
  FHAREC.XCTCD = "USA"; /* Foreign country code*/
  FHAREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FHAREC.YSMXOT = "*"; /* Order type group code*/
  FHAREC.XDSCD = "*"; /* Direct ship code*/
  FHAREC.XQACD = "01"; /* Quality code*/
  FHAREC.XLCCD = "10"; /* Life cycle code*/
  FHAREC.XPRCD = FFWREC.YPGCD; /* Product type group code*/

  TA1REC.TA1PGMNM = "FF0FS05"; /* Calling process*/

  XSFFS55(); /* Summarize VLNSHP01 quantities*/


end // end FF0FS05

// Sum next three months line
Function FF0FS06()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by line/type table.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear row storage area*/


  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1; /* Beginning month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0FW00.FF0FWDAT; /* Beginning month*/

  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 3; /* Ending month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0FW00.FF0FWDAT; /* Ending month*/

  FF6REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF6REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*")
    FFFREC.FFFFUNCD = "S3"; /* Function code*/
    try
      call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Sum quantities*/
  else
    FFFREC.FFFFUNCD = "SS"; /* Function code*/
    try
      call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Sum quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS LINE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS06

// Sum domestic category forecast
Function FF0FS07()
   /* ------------------------------------------------------------*/
   /* Select the row from the category by month master table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FF7REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS07

// Sum NIL cat prdctn fcst
Function FF0FS08()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "20"; /* Division group code*/
  FF7REC.XCTCD = "*"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL CATEGORY FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS08

// Sum invoice/order quantities
Function FF0FS09()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS09"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHIN = FH3REC.FH2SHP; /* Invoiced qty*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FF0FW00.FF0FWHOR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Ordered qty*/
    FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH1ALQTY;
    FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH3CNCL;
  else
    FF0FW00.FF0FWHOR = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end

  if (FF0FW00.FF0FWCOL > 1)
    FF0FW07.FF0FWHIN = FF0FW07.FF0FWHIN + FF0FW00.FF0FWHIN;
    FF0FW08.FF0FWHIN = FF0FW08.FF0FWHIN + FF0FW00.FF0FWHIN;
    FF0FW07.FF0FWHOR = FF0FW07.FF0FWHOR + FF0FW00.FF0FWHOR;
    FF0FW08.FF0FWHOR = FF0FW08.FF0FWHOR + FF0FW00.FF0FWHOR;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS09"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical invoiced and ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHIN = FF0FW00.FF0FWHIN + FH3REC.FH2SHP; /* Invoiced qty*/

  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH2SHP; /* Ordered qty*/
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH1PAQTY;
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH1ALQTY;
  FF0FW00.FF0FWHOR = FF0FW00.FF0FWHOR + FH3REC.FH3CNCL;

  if (FF0FW00.FF0FWCOL > 1)
    FF0FW07.FF0FWHIN = FF0FW07.FF0FWHIN + FH3REC.FH2SHP;
    FF0FW08.FF0FWHIN = FF0FW08.FF0FWHIN + FH3REC.FH2SHP;
    FF0FW07.FF0FWHOR = FF0FW07.FF0FWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY                    + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
    FF0FW08.FF0FWHOR = FF0FW08.FF0FWHOR + FH3REC.FH2SHP + FH3REC.FH1PAQTY                    + FH3REC.FH1ALQTY + FH3REC.FH3CNCL;
  end


end // end FF0FS09

// Sum one year ago history
Function FF0FS10()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "FT"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS10"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical futures quantity.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFBEGMO < 199206) /* Before 199206 use actual future*/
    FF0FW00.FF0FWHFU = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist futr qty*/
    FF0FW00.FF0FWHFU = FF0FW00.FF0FWHFU + FH3REC.FH1ALQTY;
    FF0FW00.FF0FWHFU = FF0FW00.FF0FWHFU + FH3REC.FH3CNCL;
  else
    FF0FW00.FF0FWHFU = FH3REC.FH-FRZ-PRAL-QTY +                       FH3REC.FH-FRZ-ALOC-QTY +                       FH3REC.FH-FRZ-SHP-QTY +                       FH3REC.FH-FRZ-CNCL-QTY;
  end

   /* ------------------------------------------------------------*/
   /* Sum one year ago prop quantities in the history table.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO - 100; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  if (FF2REC.FF2ALCAT == " ") /* No alternate category*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  else
    FH3REC.XPCCD = FF2REC.FF2ALCAT; /* Alternate category code*/
  end
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "PR"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS10"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the historical prop quantity.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHPR = FH3REC.FH2SHP + FH3REC.FH1PAQTY; /* Hist prop qty*/
  FF0FW00.FF0FWHPR = FF0FW00.FF0FWHPR + FH3REC.FH1ALQTY;
  FF0FW00.FF0FWHPR = FF0FW00.FF0FWHPR + FH3REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Calculate the historical demand quantity.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWHDM = FF0FW00.FF0FWHFU + FF0FW00.FF0FWHPR;
                                   /* Hist demand qty*/


end // end FF0FS10

// Sum category shipment history
Function FF0FS11()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by category table.*/
   /* ------------------------------------------------------------*/

  set FH6REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  FH6REC.XDVCD = "10"; /* Division group code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH6REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH6REC.XLCCD = "10"; /* Life cycle code*/
  FH6REC.XQACD = "01"; /* Quality code*/
  FH6REC.XCTCD = "USA"; /* Foreign country code*/
  FH6REC.YSMXOT = "*"; /* Order type group code*/
  FH6REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS11"; /* Calling process*/

  XSFFS52(); /* Summarize VCTSHP01 quantities*/


end // end FF0FS11

// Sum next three months category
Function FF0FS12()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by category table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1; /* Beginning month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0FW00.FF0FWDAT; /* Beginning month*/

  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 3; /* Ending month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0FW00.FF0FWDAT; /* Ending month*/

  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS CATEGORY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS12

// Sum domestic group forecast
Function FF0FS13()
   /* ------------------------------------------------------------*/
   /* Select the row from the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "10"; /* Division group code*/
  FF8REC.XCTCD = "USA"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FF8REC.FF4FCTMO = VSWITM02.FF4FCTMO; /* Forecast month*/

  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM DOMESTIC GROUP FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS13

// Sum NIL group pfcst qty
Function FF0FS14()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style group table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "20"; /* Division group code*/
  FF8REC.XCTCD = "*"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NIL GROUP FORECAST";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS14

// Sum group shipment history
Function FF0FS15()
   /* ------------------------------------------------------------*/
   /* Sum quantities in shipment history by style/color table.*/
   /* ------------------------------------------------------------*/

  set FH5REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SG"; /* Function code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/

  FH5REC.SY1STNBR = FFWREC.SYBSTGNB; /* Style group number*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* Product type code*/
  FH5REC.XDVCD = FFWREC.XPCCD; /* Category code*/
  FH5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Current date*/
  FH5REC.XLCCD = "10"; /* Life cycle code*/
  FH5REC.XQACD = "01"; /* Quality code*/
  FH5REC.YSMXOT = "*"; /* Order type group code*/
  FH5REC.FH1PNAC = "*"; /* National account flag*/

  TA1REC.TA1PGMNM = "FF0FS15"; /* Calling process*/

  XSFFS54(); /* Summarize VSYSHP01 quantities*/


end // end FF0FS15

// Sum next three months group
Function FF0FS16()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the month master by style/color table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1; /* Beginning month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFBEGMO = FF0FW00.FF0FWDAT; /* Beginning month*/

  FF0FW00.FF0FWDAT = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 3; /* Ending month*/
  if (FF0FW00.FF0FWDMM > 12) /* Month GT maximum*/
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM - 12; /* Decrement month*/
    FF0FW00.FF0FWDYY = FF0FW00.FF0FWDYY + 1; /* Increment year*/
  end
  FFFREC.FFFENDMO = FF0FW00.FF0FWDAT; /* Ending month*/

  FF8REC.YSMXDV = "10"; /* Division group code*/
  FF8REC.XCTCD = "USA"; /* Foreign country code*/
  FF8REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUM NEXT THREE MONTHS GROUP";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS16

// ===> Save item information <==
Function FF0FS17()
   /* ------------------------------------------------------------*/
   /* If no room for subtotal/accum total, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWCOL > 61) /* No room for totals*/

    FFWREC.XXXMODID = "S17"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "SHORT RANGE WORKSHEETS EXCEEDS 3 YEARS";
    TAEREC.TAEDESC2 = FF0FW09.TARJCL; /* Selection parameters*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "SAVE ITEM INFORMATION";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the M001 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FFZINDMO = VSWITM02.FF4FCTMO; /* Forecast month*/
  FF0FW01.FF4FCTMO[FF0FWCOL] = FF0FW00.FFZINDMO; /* Forecast month*/
  FF0FW01.FF0FMMON[FF0FWCOL] = FF0FW00.FF0FWMON; /* Forecast YYMM*/
  FF0FW01.FF0FMSCT[FF0FWCOL] = FF0FW00.FF0FWSCT; /* Sesn count*/

   /* ---> Non-National ACCTs Future*/
   /* ---> -------------------------*/
   /* ---> pre-allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* ===> product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRPFUDM; /* Pral futr dmd*/
      else /* ===> get cat history data*/
        set FH3REC empty; /* ===> Init call record*/
        FH3REC.FH1PNAC = "N"; /* ===> National account flag*/
        FH3REC.YSMXOT = "FT"; /* ===> Order type group code*/
        FF0FS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
        FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
      end
    else /* ===> get line history data*/
      set FH4REC empty; /* ===> Init call record*/
      FH4REC.FH1PNAC = "N"; /* ===> National account flag*/
      FH4REC.YSMXOT = "FT"; /* ===> Order type group code*/
      FF0FS81(); /* =======> get history QTYs for fut*/
                                   /* non-national (line)*/
      FFXREC.FFXNUMB = FH4REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRPFUDM; /* Pral futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRPFUDM = FF0FW07.FFRPFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRAFUDM; /* Aloc futr dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH1ALQTY; /* alloc Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRAFUDM; /* Aloc futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRAFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRAFUDM = FF0FW07.FFRAFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRIFUDM; /* Ivc futr dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH2SHP; /* shp  Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRIFUDM; /* Ivc futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRIFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRIFUDM = FF0FW07.FFRIFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRCFUDM; /* Cncl futr dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH3CNCL; /* cncl Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRCFUDM; /* Cncl futr dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCFUDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRCFUDM = FF0FW07.FFRCFUDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0FW01.FFRPFUDM[FF0FWCOL]; /* Futures tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRAFUDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRIFUDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRCFUDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMFUT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWFUT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWFUT = FF0FW07.FF0FWFUT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National ACCTs Future*/
   /* ---> ---------------------*/
   /* ---> pre-allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* ===> Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* ===> product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRPNFDM; /* Pral natl fdmd*/
      else /* ===> get line history data*/
        set FH3REC empty; /* ===> Init call record*/
        FH3REC.FH1PNAC = "Y"; /* ===> National account flag*/
        FH3REC.YSMXOT = "FT"; /* ===> Order type group code*/
        FF0FS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
        FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
      end
    else /* ===> get line history data*/
      set FH4REC empty; /* ===> Init call record*/
      FH4REC.FH1PNAC = "Y"; /* ===> National account flag*/
      FH4REC.YSMXOT = "FT"; /* ===> Order type group code*/
      FF0FS81(); /* =======> get history QTYs for fut*/
                                   /* non-national (line)*/
      FFXREC.FFXNUMB = FH4REC.FH1PAQTY; /* ===> Pral Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRPNFDM; /* Pral natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRPNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRPNFDM = FF0FW07.FFRPNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRANFDM; /* Aloc natl fdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH1ALQTY; /* alloc Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRANFDM; /* Aloc natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRANFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRANFDM = FF0FW07.FFRANFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRINFDM; /* Ivc natl fdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH2SHP; /* shp  Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRINFDM; /* Ivc natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRINFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRINFDM = FF0FW07.FFRINFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRCNFDM; /* Cncl natl fdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH3CNCL; /* cncl Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRCNFDM; /* Cncl natl fdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FFRCNFDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRCNFDM = FF0FW07.FFRCNFDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0FW01.FFRPNFDM[FF0FWCOL]; /* Natl acct fut tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRANFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRINFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRCNFDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW01.FF0FMNFT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW01.FF0FWNFT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWNFT = FF0FW07.FF0FWNFT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M002 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/


   /* ---> Non-National Acct Prop.*/
   /* ---> -----------------------*/
   /* ---> pre-allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRPPRDM; /* Pral prop dmd*/
      else /* ===> get cat history data*/
        set FH3REC empty; /* ===> Init call record*/
        FH3REC.FH1PNAC = "N"; /* National account flag*/
        FH3REC.YSMXOT = "PR"; /* Order type group code*/
        FF0FS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
        FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* Pral Qtys "history"*/
      end
    else /* ===> get line history data*/
      set FH4REC empty; /* ===> Init call record*/
      FH4REC.FH1PNAC = "N"; /* National account flag*/
      FH4REC.YSMXOT = "PR"; /* Order type group code*/
      FF0FS81(); /* =======> get history QTYs for fut*/
                                   /* non-national (line)*/
      FFXREC.FFXNUMB = FH4REC.FH1PAQTY; /* Pral Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRPPRDM; /* Pral prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRPPRDM = FF0FW07.FFRPPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRAPRDM; /* Aloc prop dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH1ALQTY; /* alloc Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRAPRDM; /* Aloc prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRAPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRAPRDM = FF0FW07.FFRAPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRIPRDM; /* Ivc prop dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH2SHP; /* shp  Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRIPRDM; /* Ivc prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRIPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRIPRDM = FF0FW07.FFRIPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRCPRDM; /* Cncl prop dmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH3CNCL; /* cncl Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRCPRDM; /* Cncl prop dmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCPRDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRCPRDM = FF0FW07.FFRCPRDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0FW02.FFRPPRDM[FF0FWCOL]; /* Prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRAPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRIPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRCPRDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMPRT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWPRT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWPRT = FF0FW07.FF0FWPRT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> National Acct Prop.*/
   /* ---> -------------------*/
   /* ---> pre-allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRPNPDM; /* Pral natl pdmd*/
      else /* ===> use cat history data*/
        set FH3REC empty; /* ===> Init call record*/
        FH3REC.FH1PNAC = "Y"; /* National account flag*/
        FH3REC.YSMXOT = "PR"; /* Order type group code*/
        FF0FS71(); /* =======> get history QTYs for fut*/
                                   /* non-national (cat )*/
        FFXREC.FFXNUMB = FH3REC.FH1PAQTY; /* Pral Qtys "history"*/
      end
    else /* ===> use line history data*/
      set FH4REC empty; /* ===> Init call record*/
      FH4REC.FH1PNAC = "Y"; /* National account flag*/
      FH4REC.YSMXOT = "PR"; /* Order type group code*/
      FF0FS81(); /* =======> get history QTYs for fut*/
                                   /* non-national (line)*/
      FFXREC.FFXNUMB = FH4REC.FH1PAQTY; /* Pral Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRPNPDM; /* Pral natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRPNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRPNPDM = FF0FW07.FFRPNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> allocated*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRANPDM; /* Aloc natl pdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH1ALQTY; /* alloc Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH1ALQTY; /* alloc Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRANPDM; /* Aloc natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRANPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRANPDM = FF0FW07.FFRANPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> invoiced*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRINPDM; /* Ivc natl pdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH2SHP; /* shp  Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH2SHP; /* shp  Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRINPDM; /* Ivc natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRINPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRINPDM = FF0FW07.FFRINPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> cancelled*/
  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO) /* Fcst mo LT current*/
    if (FFWREC.XPCCD > " ") /* product category*/
      if (FFWREC.SYBSTGNB > " ") /* ===> style group number*/
        FFXREC.FFXNUMB = VSWITM02.FFRCNPDM; /* Cncl natl pdmd*/
      else /* ===> use cat history data*/
        FFXREC.FFXNUMB = FH3REC.FH3CNCL; /* cncl Qtys "history"*/
      end
    else /* ===> use line history data*/
      FFXREC.FFXNUMB = FH4REC.FH3CNCL; /* cncl Qtys "history"*/
    end
  else
    FFXREC.FFXNUMB = VSWITM02.FFRCNPDM; /* Cncl natl pdmd*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FFRCNPDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRCNPDM = FF0FW07.FFRCNPDM + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ---> Net Bookings*/
  FFXREC.FFXNUMB = FF0FW02.FFRPNPDM[FF0FWCOL]; /* Natl acct prop tot*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRANPDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRINPDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRCNPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW02.FF0FMNPT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW02.FF0FWNPT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWNPT = FF0FW07.FF0FWNPT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M003 information from the previous maps.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0FW01.FFRPFUDM[FF0FWCOL]; /* Total pre-alloc*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRPNFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRPPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRPNPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTDP = FF0FW07.FF0FWTDP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW01.FFRAFUDM[FF0FWCOL]; /* Total allocated*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRANFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRAPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRANPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDA[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDA[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTDA = FF0FW07.FF0FWTDA + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW01.FFRIFUDM[FF0FWCOL]; /* Total invoiced*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRINFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRIPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRINPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDI[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDI[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTDI = FF0FW07.FF0FWTDI + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW01.FFRCFUDM[FF0FWCOL]; /* Total cancelled*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRCNFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRCPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRCNPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDC[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTDC = FF0FW07.FF0FWTDC + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW03.FF0FWTDP[FF0FWCOL]; /* Total demand*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW03.FF0FWTDA[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW03.FF0FWTDI[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW03.FF0FWTDC[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTDT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTDT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTDT = FF0FW07.FF0FWTDT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0FW03.FF0FWTDT[FF0FWCOL] != 0) /* Total demand NE zero*/
    FF0FW00.FF0FWPCT = FF0FW03.FF0FWTDC[FF0FWCOL] * 100; /* Cancellation %*/
    FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / FF0FW03.FF0FWTDT[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
    FF0FW03.FF0FWCAP[FF0FWCOL] = FF0FW00.FF0FWPCT;
  end

  FFXREC.FFXNUMB = FF0FW01.FFRPFUDM[FF0FWCOL]; /* Tot active fut*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRAFUDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRIFUDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRPNFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRANFDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRINFDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTAF = FF0FW07.FF0FWTAF + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW02.FFRPPRDM[FF0FWCOL]; /* Tot active prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRAPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRIPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRPNPDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRANPDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRINPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW03.FF0FMTAP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW03.FF0FWTAP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWTAP = FF0FW07.FF0FWTAP + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate the M004 information from the previous maps.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Fut dmd*/
  else
    FFXREC.FFXNUMB = FF0FW01.FFRPFUDM[FF0FWCOL]; /* Fut dmd*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRAFUDM[FF0FWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRIFUDM[FF0FWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDFU[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDFU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDFU = FF0FW07.FF0FWDFU + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = 0; /* Natl fut*/
  else
    FFXREC.FFXNUMB = FF0FW01.FFRPNFDM[FF0FWCOL]; /* Natl fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRANFDM[FF0FWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFRINFDM[FF0FWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDNF = FF0FW07.FF0FWDNF + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW02.FFRPPRDM[FF0FWCOL]; /* Prop dmd*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRAPRDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRIPRDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDPR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDPR[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDPR = FF0FW07.FF0FWDPR + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW02.FFRPNPDM[FF0FWCOL]; /* Natl prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRANPDM[FF0FWCOL];
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW02.FFRINPDM[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDNP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDNP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDNP = FF0FW07.FF0FWDNP + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW04.FF0FWDPR[FF0FWCOL]; /* Total prop*/
  FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW04.FF0FWDNP[FF0FWCOL];
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDTP = FF0FW07.FF0FWDTP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "01") /* Current worksheet*/
    if (FF0FW01.FF4FCTMO[FF0FWCOL] == FF0FW01.FFQCURMO /* Fcst mo EQ contp*/
     && FF0FW01.FF4FCTMO[FF0FWCOL] == XX0XW01.XX0XWCYM) /* and EQ current*/
      FFXREC.FFXNUMB = FF0FW04.FF0FWDPR[FF0FWCOL] * FF0FW00.FF0FWDIM;
      FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB / FF0FW00.FF0FWDTD, -mathLib.decimals(FFXREC.FFXNUMB));
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW04.FF0FWDNP[FF0FWCOL];
      XSFFS10(); /* Translate to thousands*/
      FF0FW04.FF0FMDCP[FF0FWCOL] = FFXREC.FFXCHAR;
                                   /* Thousands number*/
      FF0FW04.FF0FWDCP[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    end
  end

   /* ===> Curr prop fcst*/
       /* --------------*/
  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GT current*/
    FFXREC.FFXNUMB = VSWITM02.FFRCPRFC; /* Curr prop fcst*/
  else
    FFXREC.FFXNUMB = FF0FW04.FF0FWDTP[FF0FWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPCF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FFRCPRFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0FW07.FFRCPRFC = FF0FW07.FFRCPRFC + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===> Open bulk*/
       /* --------------*/
  if (FFWREC.XWSCD == "03") /* Buy worksheet*/
    FFXREC.FFXNUMB = VSWITM02.FDMD_OPN_BULK_QTY;
  else
    FFXREC.FFXNUMB = FF0FW00.FF0FWOBK; /* Open bulks*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMOBK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWOBK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and bulk GT zero*/
    FF0FW07.FF0FWOBK = FF0FW07.FF0FWOBK + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===> Mstr prop fcst*/
       /* --------------*/
  FFXREC.FFXNUMB = FF0FW04.FFRCPRFC[FF0FWCOL]; /* Mstr prop fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMPRF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF6PRPFC[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1 /* Not first column*/
   && FFXREC.FFXROUND > 0) /* and fcst GT zero*/
    FF0FW07.FF6PRPFC = FF0FW07.FF6PRPFC + FFXREC.FFXROUND; /* Subtotal*/
  end


  if (VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT buy*/
    FFXREC.FFXNUMB = VSWITM02.FFRCDMFC - FF0FW04.FFRCPRFC[FF0FWCOL];
  else
    FFXREC.FFXNUMB = FF0FW04.FF0FWDFU[FF0FWCOL]; /* Total fut*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW04.FF0FWDNF[FF0FWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW04.FF0FMDTF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW04.FF0FWDTF[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWDTF = FF0FW07.FF0FWDTF + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ===> Fcst futr pct*/
       /* -------------*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    if (FF0FW01.FF4FCTMO[FF0FWCOL] >= FF0FW01.FFQCURMO) /* Fcst mo GE contp*/
      if (VSWITM02.FFRCDMFC != 0) /* and curr dmd fcst NE zero*/
        FF0FW00.FF0FWPCT = FF0FW04.FF0FWDTF[FF0FWCOL] * 100;
        FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT / VSWITM02.FFRCDMFC, -mathLib.decimals(FF0FW00.FF0FWPCT));
        FF0FW04.FF0FWDFF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Fcst fut %*/
        FF0FW07.FF0FWFRF = FF0FW07.FF0FWFRF + FF0FW04.FF0FWDTF[FF0FWCOL];
      end
    else
      if (FF0FW03.FF0FWTDT[FF0FWCOL] != 0) /* and Tot net books NE zero*/
        FF0FW00.FF0FWPCT = FF0FW01.FF0FWFUT[FF0FWCOL]         + FF0FW01.FF0FWNFT[FF0FWCOL];
        FF0FW00.FF0FWPCT = FF0FW00.FF0FWPCT * 100;
        FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWPCT         / FF0FW03.FF0FWTDT[FF0FWCOL], -mathLib.decimals(FF0FW00.FF0FWPCT));
        FF0FW04.FF0FWDFF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Fcst fut %*/
        FF0FW07.FF0FWFRF = FF0FW07.FF0FWFRF + FF0FW01.FF0FWFUT[FF0FWCOL]         + FF0FW01.FF0FWNFT[FF0FWCOL];
      end
    end
  end

  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    if (FF0FW00.FF0FWHDM > 0) /* Hist demand GT zero*/
      FF0FW00.FF0FWPCT = mathLib.round(FF0FW00.FF0FWHFU * 100 / FF0FW00.FF0FWHDM, -mathLib.decimals(FF0FW00.FF0FWPCT));
      FF0FW04.FF0FWDHF[FF0FWCOL] = FF0FW00.FF0FWPCT; /* Hist fut %*/
    end
    FF0FW07.FF0FWHFU = FF0FW07.FF0FWHFU + FF0FW00.FF0FWHFU; /* Subtotal*/
  end

  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW04.FF0FWHPR[FF0FWCOL] = FF0FW00.FF0FWHPR; /* Hist prop qty*/
    FF0FW07.FF0FWHPR = FF0FW07.FF0FWHPR + FF0FW00.FF0FWHPR; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M005 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

   /* ===> Curr Dmd fcst*/
       /* -------------*/
  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRCDMFC; /* Curr dmd fcst*/
    FF0FW05.FFRCDMFC[FF0FWCOL] = VSWITM02.FFRCDMFC;
  else /* ===> use the Total Net Bookings value*/
                                   /* in ff0fW03*/
    FFXREC.FFXNUMB = FF0FW03.FF0FWTDT[FF0FWCOL]; /* Curr dmd fcst*/
    FF0FW05.FFRCDMFC[FF0FWCOL] = FF0FW03.FF0FWTDT[FF0FWCOL];
  end

  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMFCD[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRCDMFC = FF0FW07.FFRCDMFC + FF0FW05.FFRCDMFC[FF0FWCOL];
  end

  FFXREC.FFXNUMB = FF0FW05.FF7RVFCT[FF0FWCOL]; /* Rvse dmd fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMRVF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF7RVFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF7RVFCT = FF0FW07.FF7RVFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW05.FF0FWHDM[FF0FWCOL] = FF0FW00.FF0FWHDM; /* Hist demand qty*/
    FF0FW07.FF0FWHDM = FF0FW07.FF0FWHDM + FF0FW00.FF0FWHDM; /* Subtotal*/
  end

  if (VSWITM02.FF7FLLRT != 0) /* Fcst fill rt exists*/
    FF0FW05.FF0FWFFR[FF0FWCOL] = VSWITM02.FF7FLLRT; /* Fcst fill rt*/
  else
    if (FF0FW00.FF0FWHOR != 0) /* Ordered NE zero*/
      FF0FW00.FF0FWPCT = FF0FW00.FF0FWHIN * 100; /* Fcst fill rt*/
      FF0FW05.FF0FWFFR[FF0FWCOL] = mathLib.round(FF0FW00.FF0FWPCT / FF0FW00.FF0FWHOR, -mathLib.decimals(FF0FW05.FF0FWFFR[FF0FWCOL]));
    end
  end
  FF0FW05.FF0FMFFR[FF0FWCOL] = mathLib.round(FF0FW05.FF0FWFFR[FF0FWCOL] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[FF0FWCOL]));
   /* ---> prior to curr will be added to totals on re-calc*/
  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FF0FW07.FF0FWFFR = FF0FW07.FF0FWFFR + FF0FW05.FF0FWFFR[FF0FWCOL];
  end

  if (VSWITM02.FF4FCTMO == FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FF0FS63(); /* ====> Re-calc fill rate for months*/
                                   /* prior to curr*/
  end


  if (FF0FW00.FF0FWHOR != 0) /* Ordered NE zero*/
    FF0FW00.FF0FWPCT = FF0FW00.FF0FWHIN * 100; /* Hist fill rt*/
    FF0FW05.FF0FWHFR[FF0FWCOL] = mathLib.round(FF0FW00.FF0FWPCT / FF0FW00.FF0FWHOR, -mathLib.decimals(FF0FW05.FF0FWHFR[FF0FWCOL]));
  end
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWHFR = FF0FW07.FF0FWHFR + FF0FW05.FF0FWHFR[FF0FWCOL];
  end

   /* ===> Curr sls fcst*/
       /* -------------*/
  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0FW05.FFRCDMFC[FF0FWCOL]; /* Curr sls fcst*/
    FFXREC.FFXNUMB = mathLib.round(FFXREC.FFXNUMB * FF0FW05.FF0FWFFR[FF0FWCOL] / 100, -mathLib.decimals(FFXREC.FFXNUMB));
    FF0FW05.FH5MSHQT[FF0FWCOL] = FFXREC.FFXNUMB; /* Rounded number*/
  else
    FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[FF0FWCOL];
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMCSF[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FH5MSHQT = FF0FW07.FH5MSHQT + FF0FW05.FH5MSHQT[FF0FWCOL];
  end

   /* ===> Mstr sls fcst*/
       /* -------------*/
  if (FFWREC.XWSCD == "03") /* "buy" work sheet*/
    FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[FF0FWCOL];
    FF0FW05.FF6SLFCT[FF0FWCOL] = FF0FW05.FH5MSHQT[FF0FWCOL];
  else
    if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO /* Fcst mo LT current*/
     || VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT current*/
      FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[FF0FWCOL];
      FF0FW05.FF6SLFCT[FF0FWCOL] = FF0FW05.FH5MSHQT[FF0FWCOL];
    else
      FFXREC.FFXNUMB = FF0FW05.FF6SLFCT[FF0FWCOL]; /* Mstr sls fcst*/
    end
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMSL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF6SLFCT = FF0FW07.FF6SLFCT + FF0FW05.FF6SLFCT[FF0FWCOL];
  end

   /* ===> Mstr dmd fcst*/
       /* -------------*/
  if (FFWREC.XWSCD == "03") /* "buy" work sheet*/
    FFXREC.FFXNUMB = FF0FW05.FFRCDMFC[FF0FWCOL]; /* Mstr dmd fcst*/
  else
    if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO /* Fcst mo LT current*/
     || VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT buy*/
      FFXREC.FFXNUMB = FF0FW05.FFRCDMFC[FF0FWCOL]; /* Mstr dmd fcst*/
    else
      if (FF0FW05.FF0FWFFR[FF0FWCOL] != 0) /* Fcst fill rt NE zero*/
        FF0FW00.FF0FWPCT = FF0FW05.FF6SLFCT[FF0FWCOL] * 100;
        FFXREC.FFXNUMB = mathLib.round(FF0FW00.FF0FWPCT / FF0FW05.FF0FWFFR[FF0FWCOL], -mathLib.decimals(FFXREC.FFXNUMB));
      else
        FFXREC.FFXNUMB = 0; /* Mstr dmd fcst*/
      end
    end
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW05.FF0FMMDM[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW05.FF0FWMDM[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWMDM = FF0FW07.FF0FWMDM + FFXREC.FFXNUMB; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save the M006 information from the worksheet item row.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    if (VSWITM02.FF4FCTMO == FF0FW01.FFQCURMO)
      FFXREC.FFXNUMB = VSWITM02.FF6BEINV; /* Beg inv*/
    else
      FFXREC.FFXNUMB = FF0FW06.FF0FWINE[FF0FWIXP]; /* Beg inv*/
    end
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW00.FF6SUGBY;
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMINB[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FF6BEINV[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0FW07.FF6BEINV = FF0FW07.FF6BEINV + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    if (VSWITM02.FF4FCTMO == FF0FW01.FFQCURMO) /* Fcst mo EQ current*/
      FFXREC.FFXNUMB = VSWITM02.FFRPRDDU + FF0FW07.FFRPRDDU; /* Prod due*/
      FF0FW07.FFRPRDDU = 0; /* Clear prior months subtotal*/
    else
      FFXREC.FFXNUMB = VSWITM02.FFRPRDDU; /* Prod due*/
    end
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMDUE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FFRPRDDU[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0FW07.FFRPRDDU = FF0FW07.FFRPRDDU + FFXREC.FFXROUND; /* Subtotal*/
  else
    FF0FW07.FFRPRDDU = FF0FW07.FFRPRDDU + VSWITM02.FFRPRDDU; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRSUBBY; /* Sbmt qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMQBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FFRSUBBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0FW07.FFRSUBBY = FF0FW07.FFRSUBBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FFRTENBY; /* Tntv qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMTBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FFRTENBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0FW07.FFRTENBY = FF0FW07.FFRTENBY + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0FW06.FF6BEINV[FF0FWCOL]; /* Supply*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW06.FFRPRDDU[FF0FWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW06.FFRSUBBY[FF0FWCOL];
    FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW06.FFRTENBY[FF0FWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMSUP[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FF0FWSUP[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0FW07.FF0FWSUP = FF0FW07.FF0FWSUP + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FG4BALSH; /* Bal to shp*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMBAL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FG4BALSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0FW07.FG4BALSH = FF0FW07.FG4BALSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = FF0FW06.FF0FWSUP[FF0FWCOL]; /* End inventory*/
    FFXREC.FFXNUMB = FFXREC.FFXNUMB - FF0FW06.FG4BALSH[FF0FWCOL];
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMINE[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FF0FWINE[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
    FF0FW07.FF0FWINE = FF0FW07.FF0FWINE + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (FFWREC.XWSCD == "03") /* Buy worksheet*/
    FFXREC.FFXNUMB = VSWITM02.FDMD_RSRV_INV_QTY; /* table rsrv inv.*/
  else
    FFXREC.FFXNUMB = FF0FW00.FF0FWRIN; /* Calculated reserved inv.*/
  end
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMRIN[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWRIN[FF0FWCOL] = FFXREC.FFXNUMB; /* Actual number*/
  FF0FW07.FF0FWRIN = FF0FW07.FF0FWRIN + FFXREC.FFXROUND; /* Subtotal*/

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FF6SFSTK; /* Sfty stk*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMSTK[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FF6SFSTK[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
    FF0FW07.FF6SFSTK = FF0FW07.FF6SFSTK + FFXREC.FFXROUND; /* Subtotal*/
  end

  if (VSWITM02.FF4FCTMO >= FF0FW01.FFQCURMO) /* Fcst mo GE current*/
    FFXREC.FFXNUMB = VSWITM02.FF6SUGBY; /* Sugg qtb*/
    XSFFS10(); /* Translate to thousands*/
    FF0FW06.FF0FMSBY[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
    FF0FW06.FF6SUGBY[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/

    if (VSWITM02.FF4FCTMO > FF0FW01.FFQMBYMO) /* Fcst mo GT buy*/
      FF0FW07.FF6SUGBY = FF0FW07.FF6SUGBY + FFXREC.FFXROUND; /* Subtotal*/
      FF0FW00.FF6SUGBY = FF0FW06.FF6SUGBY[FF0FWCOL];
    else
      FF0FW00.FF6SUGBY = 0;
    end

  end

  FFXREC.FFXNUMB = FF0FW06.FF6PRFCT[FF0FWCOL]; /* Dom prod fcst*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMFCT[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF6PRFCT[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF6PRFCT = FF0FW07.FF6PRFCT + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* FF0FW00.FF0FWASL = FF0FW00.FF0FWASL * 12;/* Inv turns*/
   /* FF0FW00.FF0FWAIN = FF0FW06.FF0FWINE(FF0FWCOL) * 3;*/
   /* IF FF0FWAIN NE 0;                /* Inventory NE zero*/
   /* FF0FW06.FF0FWTUR(FF0FWCOL) = FF0FW00.FF0FWASL / FF0FW00.FF0FWAIN (R;*/
   /* END;*/

  FFXREC.FFXNUMB = VSWITM02.FFRDIRSH; /* Dirshp qty*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMDIR[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FFRDIRSH[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FFRDIRSH = FF0FW07.FFRDIRSH + FFXREC.FFXROUND; /* Subtotal*/
  end

  FFXREC.FFXNUMB = FF0FW06.FF0FWNIL[FF0FWCOL]; /* NIL production*/
  XSFFS10(); /* Translate to thousands*/
  FF0FW06.FF0FMNIL[FF0FWCOL] = FFXREC.FFXCHAR; /* Thousands number*/
  FF0FW06.FF0FWNIL[FF0FWCOL] = FFXREC.FFXROUND; /* Rounded number*/
  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWNIL = FF0FW07.FF0FWNIL + FFXREC.FFXROUND; /* Subtotal*/
  end

   /* ------------------------------------------------------------*/
   /* Save prior month index.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWIXP = FF0FW00.FF0FWCOL;


   /* ------------------------------------------------------------*/
   /* Calculate the number of months for subtotal averaging.*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF0FWCOL > 1) /* Not first column*/
    FF0FW07.FF0FWNMO = FF0FW07.FF0FWNMO + 1; /* Number of months*/
  end

end // end FF0FS17

// Back out Mstr Sls Fcst
Function FF0FS18()

   /* ------------------------------------------------------------*/
   /* Check to see if the calculated/saved prev fcst mo equal*/
   /* to the fetched row's fcst mo. If it is then save the QTYs*/
   /* in order to back them out of the curr month.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.FF0FWPMO == VSWITM02.FF4FCTMO) /* prior fcst mo eq fcst mo*/
    FF0FW00.FF0FWSF = FF7REC.FF6SLFCT; /* save Mstr sls fcst*/
  end


   /* ------------------------------------------------------------*/
   /* Use the saved master sales forecast from the prior month*/
   /* and Back it out of the Master sales forecast for the*/
   /* Curr month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO == FFQREC.FFQCURMO) /* ===> Fcst mo eq current*/
    FF7REC.FF6SLFCT = FF7REC.FF6SLFCT - FF0FW00.FF0FWSF;
  end

end // end FF0FS18

// Back out Mstr Sls Fcst
Function FF0FS19()

   /* ------------------------------------------------------------*/
   /* Check to see if the calculated/saved prev fcst mo equal*/
   /* to the fetched row's fcst mo. If it is then save the QTYs*/
   /* in order to back them out of the curr month.*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.FF0FWPMO == VSWITM02.FF4FCTMO) /* prior fcst mo eq fcst mo*/
    FF0FW00.FF0FWSF = FF8REC.FF6SLFCT; /* save Mstr sls fcst*/
  end


   /* ------------------------------------------------------------*/
   /* Use the saved master sales forecast from the prior month*/
   /* and Back it out of the Master sales forecast for the*/
   /* Curr month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO == FFQREC.FFQCURMO) /* ===> Fcst mo eq current*/
    FF8REC.FF6SLFCT = FF8REC.FF6SLFCT - FF0FW00.FF0FWSF;
  end

end // end FF0FS19

// Determine/set scroll request
Function FF0FS20()
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, indicate beginning column.*/
   /* and determine whether new data must be selected*/
   /* ------------------------------------------------------------*/

  if (FF0FW00.FF2NSEAS == 1) /* One season per year*/
    if (FF0FW00.FF0FWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0FW00.FF0FWCOL > 14)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0FW00.FF0FWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0FW00.FF0FWCOL > 28)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0FW00.FF2NSEAS == 2) /* Two seasons per year*/
    if (FF0FW00.FF0FWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0FW00.FF0FWCOL > 16)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0FW00.FF0FWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0FW00.FF0FWCOL > 32)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0FW00.FF2NSEAS == 3) /* Three seasons per year*/
    if (FF0FW00.FF0FWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0FW00.FF0FWCOL > 18)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0FW00.FF0FWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0FW00.FF0FWCOL > 36)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end

  if (FF0FW00.FF2NSEAS == 4) /* Four seasons per year*/
    if (FF0FW00.FF0FWSWO[2] == "N" /* Obtain Data for 2nd yr switch*/
     && FF0FW00.FF0FWCOL > 20)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[2] = "Y"; /* Data ? for 2nd yr switch*/
    end

    if (FF0FW00.FF0FWSWO[3] == "N" /* Data ? for 3rd yr switch*/
     && FF0FW00.FF0FWCOL > 40)     /* columns not yet all obtained*/
      FF0FW00.FF0FWSWR = "Y"; /* Request for data switch*/
      FF0FW00.FF0FWSWO[3] = "Y"; /* Obtain Data for 3rd yr switch*/
    end
  end


end // end FF0FS20

// Calculate months in seasons
Function FF0FS22()
   /* ---------------------------------------------------------------------*/
   /* Calculate number of months in each season.*/
   /* ---------------------------------------------------------------------*/

  while (FF0FW00.FF0FWDAT <= FF0FW00.FF0FWEMO[FF0FWSIX])
    FF0FW00.FF0FWMSC = FF0FW00.FF0FWMSC + 1;
    FF0FW00.FF0FWDMM = FF0FW00.FF0FWDMM + 1;
    if (FF0FW00.FF0FWDMM > 12)
      FF0FW00.FF0FWDMM = 01;
      FF0FW00.FF0FWDAT = FF0FW00.FF0FWDAT + 100;
    end
  end

  FF0FW00.FF0FWMIS[FF0FWSIX] = FF0FW00.FF0FWMSC;
  FF0FW00.FF0FWMSC = 0;
  FF0FW00.FF0FWSIX = FF0FW00.FF0FWSIX + 1; /* Season index*/


end // end FF0FS22

// Act planned recpts. Line Dom
Function FF0FS30()
   /* ------------------------------------------------------------*/
   /* Open FFXRF for list of categories.*/
   /* ------------------------------------------------------------*/
  FF0FW00.FF0FWSW2 = "N"; /* end of cursor flag*/
  FF7REC.FF6PRFCT = 0; /* 0 prod fcst field*/
  FF0FS34(); /* Open FFXRF*/

   /* ------------------------------------------------------------*/
   /* Loop until no more categories.*/
   /* ------------------------------------------------------------*/
  while (FF0FW00.FF0FWSW2 == "N") /* Until end of cursor*/

    FF0FS35(); /* Fetch FFXRF*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Cat was found*/
      FF0FS36(); /* Obtain DFHIST.VWHCAT01*/
    end
  end

  FF0FS37(); /* Close FFXRF*/

end // end FF0FS30

// Act planned recpts. Line NIl
Function FF0FS31()
   /* ------------------------------------------------------------*/
   /* Open FFXRF for list of categories.*/
   /* ------------------------------------------------------------*/
  FF0FW00.FF0FWSW2 = "N"; /* end of cursor flag*/
  FF7REC.FF6PRFCT = 0; /* 0 prod fcst field*/
  FF0FS34(); /* Open FFXRF*/

   /* ------------------------------------------------------------*/
   /* Loop until no more categories.*/
   /* ------------------------------------------------------------*/
  while (FF0FW00.FF0FWSW2 == "N") /* Until end of cursor*/

    FF0FS35(); /* Fetch FFXRF*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Cat was found*/
      FF0FS39(); /* Obtain DFHIST.VWHCAT01*/
    end
  end

  FF0FS37(); /* Close FFXRF*/

end // end FF0FS31

// Open VFFXRF01
Function FF0FS34()
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/

   /* always use div=10, since tbl is set up*/
   /* with div=10 for all rows - dom and nil*/
  FF2REC.YSMXDV = "10"; /* Division group*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    FF0FW00.FF0FWSW2 = "N"; /* End of cursor switch*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S34"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS34

// Fetch VFFXRF01
Function FF0FS35()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0FW00.FF0FWSW2 = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS35

// Obtain DFHIST.VWHCAT01 data
Function FF0FS36()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/

  set FHBREC empty;

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.XPCCD = FF2REC.XPCCD; /* category code*/
  FHBREC.FH7INVDT = VSWITM02.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = FFWREC.YSMXDV; /* div group code*/
  FF0FS38(); /* Select VWHCAT01*/

   /* ------------------------------------------------------------*/
   /* If row found, add to line total field*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FHBREC.FH7MOPRQ;
                                   /* add to line tot*/

  end

end // end FF0FS36

// Close VFFXRF01
Function FF0FS37()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S37"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS37

// Select DFHIST.VWHCAT01
Function FF0FS38()
   /* ------------------------------------------------------------*/
   /* Select Actual PO qty from DFHIST.VWHCAT01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.FH7INVDT = VSWITM02.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/

  try
    call "IO5970" ("SS", SQLCA, FHBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, save data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* null value on sum*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S38"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWHACT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FHBREC.FHBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0FS38

// Obtain DFHIST.VWHCAT01 NIL
Function FF0FS39()
   /* ------------------------------------------------------------*/
   /* Obtain actual PO qty from DFHIST.VWHCAT01  NIL*/
   /* ------------------------------------------------------------*/

  set FHBREC empty;

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FHBREC.XQACD = "01"; /* quality code*/
  FHBREC.XPCCD = FF2REC.XPCCD; /* category code*/
  FHBREC.FH7INVDT = VSWITM02.FF4FCTMO; /* date*/
  FHBREC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FHBREC.YSMXDV = "20"; /* div group code*/
  FF0FS38(); /* Select VWHCAT01*/

   /* ------------------------------------------------------------*/
   /* If row found, add to line total field*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FHBREC.FH7MOPRQ;
                                   /* add to line tot*/

  end

end // end FF0FS39

// Calc fill rate prior to curr
Function FF0FS63()
   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd*/
     /* - first determine which if any carry over QTYs to use*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = 0; /* ===> init W.S. Accumulator*/

  if (FF0FW01.FFQCURMO in FF0FW01.FF4FCTMO) /* Find current month*/

    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior month*/

  else

    FFWREC.XXXMODID = "S63"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    TAEREC.TAEDESC1 = "CURRENT MONTH WAS NOT FOUND";
    FF0FW00.FF0FWDAT = FF0FW01.FFQCURMO; /* Date work area*/
    TAEREC.TAEDESC2 = FF0FW00.FF0FWDAT; /* Current month*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN WORKSHEET ITEMS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* Actual Fill rate = ((sales + carry over) * 100)/tot dmd)*/
   /* ------------------------------------------------------------*/

  if (FF0FW01.FFABEGMO == FF0FW01.FFQCURMO) /* Beg mo EQ curr*/

    if (FF0FW03.FF0FWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0FW03.FF0FWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0FW05.FF0FWFFR[sysVar.arrayIndex]));
    end
    FF0FW05.FF0FMFFR[sysVar.arrayIndex] = mathLib.round(FF0FW05.FF0FWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0FW07.FF0FWFFR = FF0FW07.FF0FWFFR + FF0FW05.FF0FWFFR[sysVar.arrayIndex];
    end

  else /* ==================> not Beg mo EQ*/
                                   /* curr*/

    if (FF0FW03.FF0FWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = 0;
    else
      FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply last carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQLCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQLCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0FW03.FF0FWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0FW05.FF0FWFFR[sysVar.arrayIndex]));
    end
    FF0FW05.FF0FMFFR[sysVar.arrayIndex] = mathLib.round(FF0FW05.FF0FWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0FW07.FF0FWFFR = FF0FW07.FF0FWFFR + FF0FW05.FF0FWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* Point to prior 2nd month*/

    if (FF0FW03.FF0FWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = 0;
    else
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
      /* ====> apply other carry over QTYs*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQOCOFU; /* Caov fut*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB + FF0FW01.FFQOCOPR; /* Caov prop*/
      FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
      FF0FW05.FF0FWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0FW03.FF0FWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0FW05.FF0FWFFR[sysVar.arrayIndex]));
    end
    FF0FW05.FF0FMFFR[sysVar.arrayIndex] = mathLib.round(FF0FW05.FF0FWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[sysVar.arrayIndex]));
    if (sysVar.arrayIndex > 1) /* Not first column*/
      FF0FW07.FF0FWFFR = FF0FW07.FF0FWFFR + FF0FW05.FF0FWFFR[sysVar.arrayIndex];
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/

    while (sysVar.arrayIndex > 0) /* ===>until all prior to curr months processed*/

      if (FF0FW03.FF0FWTDT[sysVar.arrayIndex] == 0) /* ===> Tot Demand*/
        FF0FW05.FF0FWFFR[sysVar.arrayIndex] = 0;
      else
        FFXREC.FFXNUMB = FF0FW05.FH5MSHQT[sysVar.arrayIndex]; /* ===> Sales*/
        /* ====> no carry over QTYs to apply*/
        FFXREC.FFXNUMB = FFXREC.FFXNUMB * 100; /* ===> (sale + carry over) * 100*/
        FF0FW05.FF0FWFFR[sysVar.arrayIndex] = mathLib.round(FFXREC.FFXNUMB / FF0FW03.FF0FWTDT[sysVar.arrayIndex], -mathLib.decimals(FF0FW05.FF0FWFFR[sysVar.arrayIndex]));
      end
      FF0FW05.FF0FMFFR[sysVar.arrayIndex] = mathLib.round(FF0FW05.FF0FWFFR[sysVar.arrayIndex] / 1, -mathLib.decimals(FF0FW05.FF0FMFFR[sysVar.arrayIndex]));
      if (sysVar.arrayIndex > 1) /* Not first column*/
        FF0FW07.FF0FWFFR = FF0FW07.FF0FWFFR + FF0FW05.FF0FWFFR[sysVar.arrayIndex];
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1; /* ===> Point to prior 3rd month*/
    end


  end


   /* **                                                        ***/
   /* ********************** End of FF0FS63 ***********************/
end // end FF0FS63

// Get/save W.S. HDR Row "CURR MO
Function FF0FS70()
   /* ------------------------------------------------------------*/
   /* Get header summary worksheet data row for "CURR MO"*/
   /* and save the data obtained in W.S.*/
   /* Note: This process is done here to get the SUMMED values*/
         /* selected from the header/item join for the row with*/
         /* CURR MO/CONT MO = FCST MO.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for search for row.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWSWC = "N"; /* ===> Summary cursor EOF switch*/

  FF0F112(); /* ===> Open summary worksheet cursor*/

  FF0F113(); /* ===> Fetch next summary worksheet*/
   /* ===> Prime Read*/

  while (FF0FW00.FF0FWSWC == "N") /* ===> Until end of cursor*/

    if (FFQREC.FFQCURMO == VSWITM02.FF4FCTMO) /* ===> if current month*/

      FF0F116(); /* ===> Save header information*/

      FF0FW00.FF0FWSWC = "Y"; /* ===> Summary cursor EOF switch*/

    else

      FF0F113(); /* ===> Fetch next summary worksheet*/
      /* ===> Driving Read*/

    end /* ===> Header CURR MO = Item FCST MO*/

  end /* ===> Until end of cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FF0F118(); /* Close summary worksheet cursor*/


end // end FF0FS70

// Sum invoice/order qtys beg-cur
Function FF0FS71()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/


  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO;
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO;

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
   /* ----> loaded in the calling process group --->*/
   /* MOVE 'FT' TO FH3REC.YSMXOT      ; Order type group code*/
   /* MOVE '*' TO FH3REC.FH1PNAC      ; National account flag*/
   /* ----> loaded in the calling process group*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS71"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/



end // end FF0FS71

// Sum invoice/order quantities
Function FF0FS75()
   /* ------------------------------------------------------------*/
   /* Sum open bulk orders*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "BN"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS75"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/


  FF0FW00.FF0FWOBK = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/

   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "BZ"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS75"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate the reseved inventory ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRIN = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
  FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* + Open orders*/

end // end FF0FS75

// Sum invoice/order quantities
Function FF0FS76()
   /* ------------------------------------------------------------*/
   /* Sum open bulk orders.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "BN"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0FS76"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWOBK = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY; /* Ordered qty*/

   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "BZ"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0FS76"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate the reserved inventory ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRIN = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY; /* Ordered qty*/
  FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* Open bulk qty*/

end // end FF0FS76

// Sum invoice/order quantities
Function FF0FS77()
   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities only for the current month.*/
   /* Roll all previous months and current months quantities into*/
   /* the current month.  Previous months on the screen will have*/
   /* no quantity in that month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO)
    FF0FW00.FF0FWRIN = 0;
  else
    set FH4REC empty; /* Clear row storage area*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    FH4REC.XDVCD = "10"; /* Division group code*/
    FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
    FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
    FH4REC.XLCCD = "10"; /* Life cycle code*/
    FH4REC.XQACD = "01"; /* Quality code*/
    FH4REC.XCTCD = "USA"; /* Foreign country code*/
    FH4REC.YSMXOT = "BN"; /* Order type group code*/
    FH4REC.FH1PNAC = "*"; /* National account flag*/
    FH4REC.XDSCD = "*"; /* Direct ship code*/
    TA1REC.TA1PGMNM = "FF0FS77"; /* Calling process*/
    /* begin tcs*/
    if (FFWREC.XPLCD == "*") /* all lines*/
      FF0F125(); /* summarize VFHLIN01 quantities ex line*/
                                   /* '11'*/
    else
      XSFFS51(); /* Summarize VFHLIN01 quantities*/
    end
    /* end tcs*/
    FF0FW00.FF0FWOBK = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
    set FH4REC empty; /* Clear row storage area*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    FH4REC.XDVCD = "10"; /* Division group code*/
    FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
    FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
    FH4REC.XLCCD = "10"; /* Life cycle code*/
    FH4REC.XQACD = "01"; /* Quality code*/
    FH4REC.XCTCD = "USA"; /* Foreign country code*/
    FH4REC.YSMXOT = "BZ"; /* Order type group code*/
    FH4REC.FH1PNAC = "*"; /* National account flag*/
    FH4REC.XDSCD = "*"; /* Direct ship code*/
    TA1REC.TA1PGMNM = "FF0FS77"; /* Calling process*/
    /* begin tcs*/
    if (FFWREC.XPLCD == "*") /* all lines*/
      FF0F125(); /* summarize VFHLIN01 quantities ex line*/
                                   /* '11'*/
    else
      XSFFS51(); /* Summarize VFHLIN01 quantities*/
    end
    /* end tcs*/
    FF0FW00.FF0FWRIN = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
    FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* Open orders*/
  end

   /* ------------------------------------------------------------*/
   /* Sum open bulk orders for page 4*/
   /* ------------------------------------------------------------*/

  set FH4REC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
  FH4REC.YSMXOT = "BN"; /* Order type group code*/
  FH4REC.FH1PNAC = "*"; /* National account flag*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS77"; /* Calling process*/

    /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities ex line*/
                                   /* '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
    /* end tcs*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/


  FF0FW00.FF0FWOBK = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/

end // end FF0FS77

// Sum invoice/order quantities
Function FF0FS78()
   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities only for the current month.*/
   /* Roll all previous months and current months quantities into*/
   /* the current month.  Previous months on the screen will have*/
   /* no quantity in that month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO)
    FF0FW00.FF0FWRIN = 0;
  else
    set FH3REC empty; /* Clear row storage area*/
    FH3REC.XDVCD = "10"; /* Division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    FH3REC.XLCCD = "10"; /* Life cycle code*/
    FH3REC.XQACD = "01"; /* Quality code*/
    FH3REC.XCTCD = "USA"; /* Foreign country code*/
    FH3REC.YSMXOT = "BN"; /* Order type group code*/
    FH3REC.FH1PNAC = "*"; /* National account flag*/
    FH3REC.XDSCD = "*"; /* Direct ship code*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    TA1REC.TA1PGMNM = "FF0FS78"; /* Calling process*/
    XSFFS50(); /* Summarize VFHCAT01 quantities*/
    FF0FW00.FF0FWOBK = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY; /* Ordered qty*/
    set FH3REC empty; /* Clear row storage area*/
    FH3REC.XDVCD = "10"; /* Division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
    FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
    FH3REC.XLCCD = "10"; /* Life cycle code*/
    FH3REC.XQACD = "01"; /* Quality code*/
    FH3REC.XCTCD = "USA"; /* Foreign country code*/
    FH3REC.YSMXOT = "BZ"; /* Order type group code*/
    FH3REC.FH1PNAC = "*"; /* National account flag*/
    FH3REC.XDSCD = "*"; /* Direct ship code*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    TA1REC.TA1PGMNM = "FF0FS78"; /* Calling process*/
    XSFFS50(); /* Summarize VFHCAT01 quantities*/
    FF0FW00.FF0FWRIN = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY; /* Ordered qty*/
    FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* Open bulk qty*/
  end

   /* ------------------------------------------------------------*/
   /* Sum open bulk orders.*/
   /* ------------------------------------------------------------*/

  set FH3REC empty; /* Clear row storage area*/

  FH3REC.XDVCD = "10"; /* Division group code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* Product category code*/
  FH3REC.XLCCD = "10"; /* Life cycle code*/
  FH3REC.XQACD = "01"; /* Quality code*/
  FH3REC.XCTCD = "USA"; /* Foreign country code*/
  FH3REC.YSMXOT = "BN"; /* Order type group code*/
  FH3REC.FH1PNAC = "*"; /* National account flag*/
  FH3REC.XDSCD = "*"; /* Direct ship code*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  TA1REC.TA1PGMNM = "FF0FS78"; /* Calling process*/

  XSFFS50(); /* Summarize VFHCAT01 quantities*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWOBK = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY; /* Ordered qty*/

end // end FF0FS78

// Sum invoice/order qty stygrp
Function FF0FS79()
   /* ------------------------------------------------------------*/
   /* Sum open bulk orders at the style group level*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

   /* USE STY NBR TO PASS THE STY GRP NBR TO SUBROUTINE*/
  FH1REC.SY1STNBR = FFWREC.SYBSTGNB; /* style group*/
   /* USE DIM CD TO PASS THE TYP GROUP CD TO SUBROUTINE*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* Product type group code*/
   /* USE DIV CD TO PASS THE CATG CD TO THE SUBROUTINE*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* Product category code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.YSMXOT = "BN"; /* Order type group code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/

  TA1REC.TA1PGMNM = "FF0FS79"; /* Calling process*/

  XSFFS-FF5570(); /* Summarize styl group qtys*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/

   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities.*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

   /* USE STY NBR TO PASS THE STY GRP NBR TO SUBROUTINE*/
  FH1REC.SY1STNBR = FFWREC.SYBSTGNB; /* style group*/
   /* USE DIM CD TO PASS THE TYP GROUP CD TO SUBROUTINE*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* Product type group code*/
   /* USE DIV CD TO PASS THE CATG CD TO THE SUBROUTINE*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* Product category code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.YSMXOT = "BZ"; /* Order type group code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/

  TA1REC.TA1PGMNM = "FF0FS79"; /* Calling process*/

  XSFFS-FF5570(); /* Summarize style group qtys*/

   /* ------------------------------------------------------------*/
   /* Calculate the reserved inventory ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWRIN = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
  FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* Open bulk qty*/

end // end FF0FS79

// Sum invoice/order sty grp qtys
Function FF0FS80()
   /* ------------------------------------------------------------*/
   /* Sum reserved inventory quantities only for the current month.*/
   /* Roll all previous months and current months quantities into*/
   /* the current month.  Previous months on the screen will have*/
   /* no quantity in that month.*/
   /* ------------------------------------------------------------*/

  if (VSWITM02.FF4FCTMO < FF0FW01.FFQCURMO)
    FF0FW00.FF0FWRIN = 0;
  else
    set FH1REC empty; /* Clear row storage area*/
    FH1REC.SY1STNBR = FFWREC.SYBSTGNB; /* style group*/
    FH1REC.XDMCD = FFWREC.YPGCD; /* Product type group code*/
    FH1REC.XDVCD = FFWREC.XPCCD; /* Product category code*/
    FH1REC.XLCCD = "10"; /* Life cycle code*/
    FH1REC.XQACD = "01"; /* Quality code*/
    FH1REC.YSMXOT = "BN"; /* Order type group code*/
    FH1REC.FH1PNAC = "*"; /* National account flag*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/
    TA1REC.TA1PGMNM = "FF0FS80"; /* Calling process*/
    XSFFS-FF5570(); /* Summarize STYLE GROUP QTYS*/
    FF0FW00.FF0FWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
    set FH1REC empty; /* Clear row storage area*/
    FH1REC.SY1STNBR = FFWREC.SYBSTGNB; /* style group*/
    FH1REC.XDMCD = FFWREC.YPGCD; /* Product type group code*/
    FH1REC.XDVCD = FFWREC.XPCCD; /* Product category code*/
    FH1REC.XLCCD = "10"; /* Life cycle code*/
    FH1REC.XQACD = "01"; /* Quality code*/
    FH1REC.YSMXOT = "BZ"; /* Order type group code*/
    FH1REC.FH1PNAC = "*"; /* National account flag*/
    FFFREC.FFFBEGMO = 0; /* Beginning month*/
    FFFREC.FFFENDMO = VSWITM02.FF4FCTMO; /* Ending month*/
    FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/
    TA1REC.TA1PGMNM = "FF0FS80"; /* Calling process*/
    XSFFS-FF5570(); /* Summarize STYLE GROUP QTYS*/
    FF0FW00.FF0FWRIN = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/
    FF0FW00.FF0FWRIN = FF0FW00.FF0FWRIN + FF0FW00.FF0FWOBK; /* Open bulk qty*/
  end

   /* ------------------------------------------------------------*/
   /* Sum open bulk orders.*/
   /* ------------------------------------------------------------*/

  set FH1REC empty; /* Clear row storage area*/

  FH1REC.SY1STNBR = FFWREC.SYBSTGNB; /* style group*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* Product type group code*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* Product category code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.YSMXOT = "BN"; /* Order type group code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFFREC.FFFBEGMO; /* Ending month*/

  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/

  TA1REC.TA1PGMNM = "FF0FS80"; /* Calling process*/

  XSFFS-FF5570(); /* Summarize STYLE GROUP QTYS*/

   /* ------------------------------------------------------------*/
   /* Calculate open bulk ordered quantities.*/
   /* ------------------------------------------------------------*/

  FF0FW00.FF0FWOBK = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY; /* Ordered qty*/

end // end FF0FS80

// Sum invoice/order qtys beg-cur
Function FF0FS81()
   /* ------------------------------------------------------------*/
   /* Sum one year ago future quantities in the history table.*/
   /* ------------------------------------------------------------*/


  FFFREC.FFFBEGMO = VSWITM02.FF4FCTMO;
  FFFREC.FFFENDMO = VSWITM02.FF4FCTMO;

  FH4REC.XDVCD = "10"; /* Division group code*/
  FH4REC.XPRCD = FFWREC.YPGCD; /* Product type group code*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XCTCD = "USA"; /* Foreign country code*/
   /* ---> loaded from the calling process group --->*/
   /* MOVE 'FT' TO FH4REC.YSMXOT      ; Order type group code*/
   /* MOVE 'N' TO FH4REC.FH1PNAC      ; National account flag*/
   /* ---> loaded from the calling process group*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/

  TA1REC.TA1PGMNM = "FF0FS81"; /* Calling process*/

   /* begin tcs*/
  if (FFWREC.XPLCD == "*") /* all lines*/
    FF0F125(); /* summarize VFHLIN01 quantities*/
                                 /* excluding LINE '11'*/
  else
    XSFFS51(); /* Summarize VFHLIN01 quantities*/
  end
   /* end tcs*/

end // end FF0FS81

//*** RECORD=FF0FW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0FW00 type basicRecord
  10 FF0FWAIN FF0FWAIN ; 
  10 FF0FWASL FF0FWASL ; 
  10 FF0FWBEG FF0FWBEG ; 
  10 FF0FWSEA FF0FWSEA ; 
  10 FF0FWCOL FF0FWCOL ; 
  10 FF0FWEND FF0FWEND ; 
  10 FF0FWMAX FF0FWMAX ; 
  10 FF0FWSIX FF0FWSIX ; 
  10 FF0FW-CAOV-IX FF0FW-CAOV-IX ; 
  10 FF0FW-MON-GAP FF0FW-MON-GAP ; 
  10 FF0FWDIX FF0FWDIX ; 
  10 FF0FWDAT FF0FWDAT ; 
    15 FF0FWDYY FF0FWDYY ; 
    15 FF0FWDMM FF0FWDMM ; 
  10 FF0FWDIM FF0FWDIM ; 
  10 FF0FWDTD FF0FWDTD ; 
  10 FF0FWFMO FF0FWFMO ; 
  10 FF0FWHIN FF0FWHIN ; 
  10 FF0FWHOR FF0FWHOR ; 
  10 FF0FWHDM FF0FWHDM ; 
  10 FF0FWHFU FF0FWHFU ; 
  10 FF0FWHPR FF0FWHPR ; 
  10 FF0FWIXC FF0FWIXC ; 
  10 FF0FWIXL FF0FWIXL ; 
  10 FF0FWIXP FF0FWIXP ; 
  10 FF0FWIXS FF0FWIXS ; 
  10 FF0FWPAD FF0FWPAD ; 
  10 FF0FWPAG FF0FWPAG ; 
  10 FF0FWPCT FF0FWPCT ; 
  10 FF0FWSWF FF0FWSWF ; 
  10 FF0FWSWC FF0FWSWC ; 
  10 FF0FWSW2 FF0FWSW2 ; 
  10 FF0FWSWR FF0FWSWR ; 
  10 FF0FWSWO FF0FWSWO [3] ; 
  10 FF0FWSWS FF0FWSWS ; 
  10 FF0FWSW1 FF0FWSW1 ; 
  10 FF0FWTFD FF0FWTFD ; 
  10 FF0FWTFI FF0FWTFI ; 
  10 FF0FWTUD FF0FWTUD ; 
  10 FF0FWTUI FF0FWTUI ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF2PRIND FF2PRIND ; 
  10 FF2DMIND FF2DMIND ; 
  10 FF6BEINV FF6BEINV ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF0FWSF FF0FWSF ; 
  10 FFRSSFCT FFRSSFCT ; 
  10 FFZINDMO FFZINDMO ; 
    15 * char(2) ; 
    15 FF0FWMON FF0FWMON ; 
  10 FH1PAQTY FH1PAQTY ; 
  10 FH1ALQTY FH1ALQTY ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 XDVCD XDVCD ; 
  10 XLCCD XLCCD ; 
  10 FFAENDMO FFAENDMO ; 
  10 FF0FWEMO FF0FWEMO [4] ; 
  10 FF0FW-CURR FF0FW-CURR ; 
  10 FF0FWMIS FF0FWMIS [4] ; 
  10 FF0FWMSC FF0FWMSC ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF0FWRSA FF0FWRSA ; 
  10 FF0FWLSA FF0FWLSA ; 
  10 FF0FWSCT FF0FWSCT ; 
  10 FF0FWLDM FF0FWLDM ; 
  10 FF0FWEDM FF0FWEDM ; 
  10 FF0FWOBK FF0FWOBK ; 
  10 FF0FWRIN FF0FWRIN ; 
  10 FF0FPRPFC FF0FPRPFC ; 
  10 FF0FSLFCT FF0FSLFCT ; 
  10 FF0FPRFCT FF0FPRFCT ; 
end // end FF0FW00

//*** RECORD=FF0FW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0FW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 * char(1) ; 
  10 FF0FWCMO FF0FWCMO ; 
    15 * num(3) ; 
    15 FF0FWCCY FF0FWCCY ; 
    15 FF0FWCMM FF0FWCMM ; 
  10 * num(3) ; 
  10 FF0FWPMO FF0FWPMO ; 
    15 * num(3) ; 
    15 FF0FWPCY FF0FWPCY ; 
    15 FF0FWPMM FF0FWPMM ; 
  10 * num(3) ; 
  10 FFQCURMO FFQCURMO ; 
  10 FF2PRIND FF2PRIND ; 
  10 FFQLCOFU FFQLCOFU ; 
  10 FFQLCOPR FFQLCOPR ; 
  10 FFQOCOFU FFQOCOFU ; 
  10 FFQOCOPR FFQOCOPR ; 
  10 FFQLCOFP FFQLCOFP ; 
  10 FFQLCOPP FFQLCOPP ; 
  10 FFQOCOFP FFQOCOFP ; 
  10 FFQOCOPP FFQOCOPP ; 
  10 FF4FCTMO FF4FCTMO [61] ; 
  10 FF0FMMON FF0FMMON [61] ; 
  10 FF0FMSCT FF0FMSCT [61] ; 
  10 FF0FMBSF FF0FMBSF [61] ; 
  10 FF0FWFCO FF0FWFCO [61] ; 
  10 FF0FMFCO FF0FMFCO [61] ; 
  10 FF0FWPCO FF0FWPCO [61] ; 
  10 FF0FMPCO FF0FMPCO [61] ; 
  10 FFRPFUDM FFRPFUDM [61] ; 
  10 FF0FMFUP FF0FMFUP [61] ; 
  10 FFRAFUDM FFRAFUDM [61] ; 
  10 FF0FMFUA FF0FMFUA [61] ; 
  10 FFRIFUDM FFRIFUDM [61] ; 
  10 FF0FMFUI FF0FMFUI [61] ; 
  10 FFRCFUDM FFRCFUDM [61] ; 
  10 FF0FMFUC FF0FMFUC [61] ; 
  10 FF0FWFUT FF0FWFUT [61] ; 
  10 FF0FMFUT FF0FMFUT [61] ; 
  10 FFRPNFDM FFRPNFDM [61] ; 
  10 FF0FMNFP FF0FMNFP [61] ; 
  10 FFRANFDM FFRANFDM [61] ; 
  10 FF0FMNFA FF0FMNFA [61] ; 
  10 FFRINFDM FFRINFDM [61] ; 
  10 FF0FMNFI FF0FMNFI [61] ; 
  10 FFRCNFDM FFRCNFDM [61] ; 
  10 FF0FMNFC FF0FMNFC [61] ; 
  10 FF0FWNFT FF0FWNFT [61] ; 
  10 FF0FMNFT FF0FMNFT [61] ; 
end // end FF0FW01

//*** RECORD=FF0FW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FF0FW02 type basicRecord
  10 FFRPPRDM FFRPPRDM [61] ; 
  10 FF0FMPRP FF0FMPRP [61] ; 
  10 FFRAPRDM FFRAPRDM [61] ; 
  10 FF0FMPRA FF0FMPRA [61] ; 
  10 FFRIPRDM FFRIPRDM [61] ; 
  10 FF0FMPRI FF0FMPRI [61] ; 
  10 FFRCPRDM FFRCPRDM [61] ; 
  10 FF0FMPRC FF0FMPRC [61] ; 
  10 FF0FWPRT FF0FWPRT [61] ; 
  10 FF0FMPRT FF0FMPRT [61] ; 
  10 FFRPNPDM FFRPNPDM [61] ; 
  10 FF0FMNPP FF0FMNPP [61] ; 
  10 FFRANPDM FFRANPDM [61] ; 
  10 FF0FMNPA FF0FMNPA [61] ; 
  10 FFRINPDM FFRINPDM [61] ; 
  10 FF0FMNPI FF0FMNPI [61] ; 
  10 FFRCNPDM FFRCNPDM [61] ; 
  10 FF0FMNPC FF0FMNPC [61] ; 
  10 FF0FWNPT FF0FWNPT [61] ; 
  10 FF0FMNPT FF0FMNPT [61] ; 
end // end FF0FW02

//*** RECORD=FF0FW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record FF0FW03 type basicRecord
  10 FF0FWTDP FF0FWTDP [61] ; 
  10 FF0FMTDP FF0FMTDP [61] ; 
  10 FF0FWTDA FF0FWTDA [61] ; 
  10 FF0FMTDA FF0FMTDA [61] ; 
  10 FF0FWTDI FF0FWTDI [61] ; 
  10 FF0FMTDI FF0FMTDI [61] ; 
  10 FF0FWTDC FF0FWTDC [61] ; 
  10 FF0FMTDC FF0FMTDC [61] ; 
  10 FF0FWTDT FF0FWTDT [61] ; 
  10 FF0FMTDT FF0FMTDT [61] ; 
  10 FF0FWCAP FF0FWCAP [61] ; 
  10 FF0FWTAF FF0FWTAF [61] ; 
  10 FF0FMTAF FF0FMTAF [61] ; 
  10 FF0FWTAP FF0FWTAP [61] ; 
  10 FF0FMTAP FF0FMTAP [61] ; 
end // end FF0FW03

//*** RECORD=FF0FW04 ****
// ------------------------
// Map 004 display storage.
// ------------------------
// ***********************
Record FF0FW04 type basicRecord
  10 FF2FUIND FF2FUIND ; 
  10 FF0FWDFU FF0FWDFU [61] ; 
  10 FF0FMDFU FF0FMDFU [61] ; 
  10 FF0FWDNF FF0FWDNF [61] ; 
  10 FF0FMDNF FF0FMDNF [61] ; 
  10 FF0FWDTF FF0FWDTF [61] ; 
  10 FF0FMDTF FF0FMDTF [61] ; 
  10 FF0FWDPR FF0FWDPR [61] ; 
  10 FF0FMDPR FF0FMDPR [61] ; 
  10 FF0FWDNP FF0FWDNP [61] ; 
  10 FF0FMDNP FF0FMDNP [61] ; 
  10 FF0FWDTP FF0FWDTP [61] ; 
  10 FF0FMDTP FF0FMDTP [61] ; 
  10 FF0FWDCP FF0FWDCP [61] ; 
  10 FF0FMDCP FF0FMDCP [61] ; 
  10 FFRCPRFC FFRCPRFC [61] ; 
  10 FF0FMPCF FF0FMPCF [61] ; 
  10 FF6PRPFC FF6PRPFC [61] ; 
  10 FF0FMPRF FF0FMPRF [61] ; 
  10 FF0FWDFF FF0FWDFF [61] ; 
  10 FF0FWDHF FF0FWDHF [61] ; 
  10 FF0FWDFI FF0FWDFI [61] ; 
  10 FF0FWDHI FF0FWDHI [61] ; 
  10 FF0FWHPR FF0FWHPR [61] ; 
  10 FF0FWOBK FF0FWOBK [61] ; 
  10 FF0FMOBK FF0FMOBK [61] ; 
end // end FF0FW04

//*** RECORD=FF0FW05 ****
// ------------------------
// Map 005 display storage.
// ------------------------
// ***********************
Record FF0FW05 type basicRecord
  10 FF2DMIND FF2DMIND ; 
  10 FFRCDMFC FFRCDMFC [61] ; 
  10 FF0FMFCD FF0FMFCD [61] ; 
  10 FF0FWMDM FF0FWMDM [61] ; 
  10 FF0FMMDM FF0FMMDM [61] ; 
  10 FF7RVFCT FF7RVFCT [61] ; 
  10 FF0FMRVF FF0FMRVF [61] ; 
  10 FF0FWHDM FF0FWHDM [61] ; 
  10 FF0FWFSI FF0FWFSI [61] ; 
  10 FF0FWHSI FF0FWHSI [61] ; 
  10 FF0FWRSI FF0FWRSI [61] ; 
  10 FF0FWFFR FF0FWFFR [61] ; 
  10 FF0FMFFR FF0FMFFR [61] ; 
  10 FF0FWHFR FF0FWHFR [61] ; 
  10 FH5MSHQT FH5MSHQT [61] ; 
  10 FF0FMCSF FF0FMCSF [61] ; 
  10 FF6SLFCT FF6SLFCT [61] ; 
  10 FF0FMMSL FF0FMMSL [61] ; 
end // end FF0FW05

//*** RECORD=FF0FW06 ****
// ------------------------
// Map 006 display storage.
// ------------------------
// ***********************
Record FF0FW06 type basicRecord
  10 SY2SSCIN SY2SSCIN ; 
  10 FF6BEINV FF6BEINV [61] ; 
  10 FF0FMINB FF0FMINB [61] ; 
  10 FFRPRDDU FFRPRDDU [61] ; 
  10 FF0FMDUE FF0FMDUE [61] ; 
  10 FFRSUBBY FFRSUBBY [61] ; 
  10 FF0FMQBY FF0FMQBY [61] ; 
  10 FFRTENBY FFRTENBY [61] ; 
  10 FF0FMTBY FF0FMTBY [61] ; 
  10 FF0FWSUP FF0FWSUP [61] ; 
  10 FF0FMSUP FF0FMSUP [61] ; 
  10 FG4BALSH FG4BALSH [61] ; 
  10 FF0FMBAL FF0FMBAL [61] ; 
  10 FF0FWINE FF0FWINE [61] ; 
  10 FF0FMINE FF0FMINE [61] ; 
  10 FF6SFSTK FF6SFSTK [61] ; 
  10 FF0FMSTK FF0FMSTK [61] ; 
  10 FFRSSFCT FFRSSFCT [61] ; 
  10 FF6SUGBY FF6SUGBY [61] ; 
  10 FF0FMSBY FF0FMSBY [61] ; 
  10 FF6PRFCT FF6PRFCT [61] ; 
  10 FF0FMFCT FF0FMFCT [61] ; 
  10 FF0FWTUR FF0FWTUR [61] ; 
  10 FFRDIRSH FFRDIRSH [61] ; 
  10 FF0FMDIR FF0FMDIR [61] ; 
  10 FF0FWNIL FF0FWNIL [61] ; 
  10 FF0FMNIL FF0FMNIL [61] ; 
  10 FF0FWRIN FF0FWRIN [61] ; 
  10 FF0FMRIN FF0FMRIN [61] ; 
end // end FF0FW06

//*** RECORD=FF0FW07 ****
// -----------------
// Season subtotals.
// -----------------
// ***********************
Record FF0FW07 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0FWFUT FF0FWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0FWNFT FF0FWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0FWPRT FF0FWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0FWNPT FF0FWNPT ; 
  10 FF0FWTDP FF0FWTDP ; 
  10 FF0FWTDA FF0FWTDA ; 
  10 FF0FWTDI FF0FWTDI ; 
  10 FF0FWTDC FF0FWTDC ; 
  10 FF0FWTDT FF0FWTDT ; 
  10 FF0FWTAF FF0FWTAF ; 
  10 FF0FWTAP FF0FWTAP ; 
  10 FF0FWDFU FF0FWDFU ; 
  10 FF0FWDNF FF0FWDNF ; 
  10 FF0FWDTF FF0FWDTF ; 
  10 FF0FWDPR FF0FWDPR ; 
  10 FF0FWDNP FF0FWDNP ; 
  10 FF0FWDTP FF0FWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0FWHDM FF0FWHDM ; 
  10 FF0FWHFU FF0FWHFU ; 
  10 FF0FWHPR FF0FWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0FWMDM FF0FWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0FWFFR FF0FWFFR ; 
  10 FF0FWHFR FF0FWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0FWSUP FF0FWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0FWINE FF0FWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0FWNIL FF0FWNIL ; 
  10 FF0FWFRF FF0FWFRF ; 
  10 FF0FWNMO FF0FWNMO ; 
  10 FF0FWHIN FF0FWHIN ; 
  10 FF0FWHOR FF0FWHOR ; 
  10 FF0FWOBK FF0FWOBK ; 
  10 FF0FWRIN FF0FWRIN ; 
end // end FF0FW07

//*** RECORD=FF0FW08 ****
// ---------------------
// Product accum totals.
// ---------------------
// ***********************
Record FF0FW08 type basicRecord
  10 FFRPFUDM FFRPFUDM ; 
  10 FFRAFUDM FFRAFUDM ; 
  10 FFRIFUDM FFRIFUDM ; 
  10 FFRCFUDM FFRCFUDM ; 
  10 FF0FWFUT FF0FWFUT ; 
  10 FFRPNFDM FFRPNFDM ; 
  10 FFRANFDM FFRANFDM ; 
  10 FFRINFDM FFRINFDM ; 
  10 FFRCNFDM FFRCNFDM ; 
  10 FF0FWNFT FF0FWNFT ; 
  10 FFRPPRDM FFRPPRDM ; 
  10 FFRAPRDM FFRAPRDM ; 
  10 FFRIPRDM FFRIPRDM ; 
  10 FFRCPRDM FFRCPRDM ; 
  10 FF0FWPRT FF0FWPRT ; 
  10 FFRPNPDM FFRPNPDM ; 
  10 FFRANPDM FFRANPDM ; 
  10 FFRINPDM FFRINPDM ; 
  10 FFRCNPDM FFRCNPDM ; 
  10 FF0FWNPT FF0FWNPT ; 
  10 FF0FWTDP FF0FWTDP ; 
  10 FF0FWTDA FF0FWTDA ; 
  10 FF0FWTDI FF0FWTDI ; 
  10 FF0FWTDC FF0FWTDC ; 
  10 FF0FWTDT FF0FWTDT ; 
  10 FF0FWTAF FF0FWTAF ; 
  10 FF0FWTAP FF0FWTAP ; 
  10 FF0FWDFU FF0FWDFU ; 
  10 FF0FWDNF FF0FWDNF ; 
  10 FF0FWDTF FF0FWDTF ; 
  10 FF0FWDPR FF0FWDPR ; 
  10 FF0FWDNP FF0FWDNP ; 
  10 FF0FWDTP FF0FWDTP ; 
  10 FFRCPRFC FFRCPRFC ; 
  10 FF6PRPFC FF6PRPFC ; 
  10 FF0FWHDM FF0FWHDM ; 
  10 FF0FWHFU FF0FWHFU ; 
  10 FF0FWHPR FF0FWHPR ; 
  10 FFRCDMFC FFRCDMFC ; 
  10 FF0FWMDM FF0FWMDM ; 
  10 FF7RVFCT FF7RVFCT ; 
  10 FF0FWFFR FF0FWFFR ; 
  10 FF0FWHFR FF0FWHFR ; 
  10 FH5MSHQT FH5MSHQT ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FF6BEINV FF6BEINV ; 
  10 FFRPRDDU FFRPRDDU ; 
  10 FFRSUBBY FFRSUBBY ; 
  10 FFRTENBY FFRTENBY ; 
  10 FF0FWSUP FF0FWSUP ; 
  10 FG4BALSH FG4BALSH ; 
  10 FF0FWINE FF0FWINE ; 
  10 FF6SFSTK FF6SFSTK ; 
  10 FF6SUGBY FF6SUGBY ; 
  10 FF6PRFCT FF6PRFCT ; 
  10 FFRDIRSH FFRDIRSH ; 
  10 FF0FWNIL FF0FWNIL ; 
  10 FF0FWFRF FF0FWFRF ; 
  10 FF0FWNMO FF0FWNMO ; 
  10 FF0FWHIN FF0FWHIN ; 
  10 FF0FWHOR FF0FWHOR ; 
  10 FF0FWOBK FF0FWOBK ; 
  10 FF0FWRIN FF0FWRIN ; 
end // end FF0FW08

//*** RECORD=FF0FW09 ****
// ------------------------------------------------------------
// This record contains the parameters that are passed to job
// FF1901 - Print Short Range Summary/Global Worksheets.
// ------------------------------------------------------------
// ***********************
Record FF0FW09 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SYBSTGNM SYBSTGNM ; 
    10 XWSCD XWSCD ; 
    10 FF0FWCDT FF0FWCDT ; 
    10 FF0FWCTM FF0FWCTM ; 
    10 FF0FWBYM FF0FWBYM ; 
    10 FF0FWBGM FF0FWBGM ; 
    10 FF0FWGNB FF0FWGNB ; 
    10 FF2NSEAS FF2NSEAS ; 
    10 FF0FWMIS FF0FWMIS [4] ; 
    10 FF0FWSEL FF0FWSEL ; 
    10 FF0FWTYP FF0FWTYP ; 
    10 * char(9) ; 
end // end FF0FW09

// FF_BAL_TO_SHP
DataItem FF0FMBAL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Begin screen flag
DataItem FF0FMBSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fh-mo-shp-qty
DataItem FF0FMCSF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0FMDCP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0FMDFU char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_DIRSHP_QTY
DataItem FF0FMDIR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL FUT
DataItem FF0FMDNF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0FMDNP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0FMDPR char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL FUT
DataItem FF0FMDTF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0FMDTP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_DUE
DataItem FF0FMDUE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_DMD_FCST
DataItem FF0FMFCD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0FMFCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRDCTN_FCST
DataItem FF0FMFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FF0FMFFR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_FUTR_DMD
DataItem FF0FMFUA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_FUTR_DMD
DataItem FF0FMFUC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_FUTR_DMD
DataItem FF0FMFUI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_FUTR_DMD
DataItem FF0FMFUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0FMFUT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_BEG_INV
DataItem FF0FMINB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0FMINE char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0FMMDM char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0FMMON char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SLS_FCST
DataItem FF0FMMSL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_FDMD
DataItem FF0FMNFA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_FDMD
DataItem FF0FMNFC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_FDMD
DataItem FF0FMNFI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_FDMD
DataItem FF0FMNFP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0FMNFT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0FMNIL char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_NATL_PDMD
DataItem FF0FMNPA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_NATL_PDMD
DataItem FF0FMNPC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_NATL_PDMD
DataItem FF0FMNPI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_NATL_PDMD
DataItem FF0FMNPP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0FMNPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0FMOBK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CURR_PROP_FCST
DataItem FF0FMPCF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0FMPCO char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_ALOC_PROP_DMD
DataItem FF0FMPRA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_CNCL_PROP_DMD
DataItem FF0FMPRC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PROP_FCST
DataItem FF0FMPRF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_IVC_PROP_DMD
DataItem FF0FMPRI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_PRAL_PROP_DMD
DataItem FF0FMPRP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0FMPRT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_QTB
DataItem FF0FMQBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0FMRIN char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_RVSE_DMD_FCST
DataItem FF0FMRVF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SUGG_QTB
DataItem FF0FMSBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Sesaon counter
DataItem FF0FMSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_SFTY_STK
DataItem FF0FMSTK char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SUPPLY
DataItem FF0FMSUP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0FMTAF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0FMTAP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FF_TNTV_QTB
DataItem FF0FMTBY char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0FMTDA char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0FMTDC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0FMTDI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0FMTDP char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0FMTDT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0FPRFCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0FPRPFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0FSLFCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carryover index
DataItem FF0FW-CAOV-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month
DataItem FF0FW-CURR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// # of mo before cur mo in sesn
DataItem FF0FW-MON-GAP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average inventory work area
DataItem FF0FWAIN bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Average sales work area
DataItem FF0FWASL bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning column number
DataItem FF0FWBEG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_FCST_BMO
DataItem FF0FWBGM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// actual buy month
DataItem FF0FWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// CANCELLATION %
DataItem FF0FWCAP decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_CONTP_MO "CCYY" re-formated
DataItem FF0FWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change date
DataItem FF0FWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO  "MM"  re-formated
DataItem FF0FWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_CONTP_MO        re-formated
DataItem FF0FWCMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current column number
DataItem FF0FWCOL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change time
DataItem FF0FWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FF0FWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC PROP FCST
DataItem FF0FWDCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FUT %
DataItem FF0FWDFF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST PROP IDX
DataItem FF0FWDFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUT DMD
DataItem FF0FWDFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST FUT %
DataItem FF0FWDHF decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// HIST PROP IDX
DataItem FF0FWDHI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days in month
DataItem FF0FWDIM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Decrement index
DataItem FF0FWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work month
DataItem FF0FWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL FUT
DataItem FF0FWDNF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NATL PROP
DataItem FF0FWDNP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROP DMD
DataItem FF0FWDPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working days to date
DataItem FF0FWDTD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL FUT
DataItem FF0FWDTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL PROP
DataItem FF0FWDTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Date work year
DataItem FF0FWDYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End data month
DataItem FF0FWEDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season end ccyymm
DataItem FF0FWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending column number
DataItem FF0FWEND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES CARRYOVER
DataItem FF0FWFCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FCST FILL RT
DataItem FF0FWFFR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months formatted
DataItem FF0FWFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Futr rto futures
DataItem FF0FWFRF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FCST SEAS IDX
DataItem FF0FWFSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FUTURES TOT NET BKGS
DataItem FF0FWFUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_GLBL_NBR
DataItem FF0FWGNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Historical demand quantity
DataItem FF0FWHDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST FILL RT
DataItem FF0FWHFR decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Historical futures quantity
DataItem FF0FWHFU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical invoiced quantity
DataItem FF0FWHIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical ordered quantity
DataItem FF0FWHOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Historical prop quantity
DataItem FF0FWHPR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HIST SEAS IDX
DataItem FF0FWHSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// END INVENTORY
DataItem FF0FWINE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map columns
DataItem FF0FWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map lines
DataItem FF0FWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for prior months
DataItem FF0FWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for subsequent months
DataItem FF0FWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last displayed month
DataItem FF0FWLDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Left scroll amount
DataItem FF0FWLSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Maximum beginning column
DataItem FF0FWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MSTR DMD FCST
DataItem FF0FWMDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Months in season
DataItem FF0FWMIS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Individual month YYMM
DataItem FF0FWMON char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Months in sesn counter
DataItem FF0FWMSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT FUT TOT NET BKGS
DataItem FF0FWNFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIL PRODUCTION
DataItem FF0FWNIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Number of months for averaging
DataItem FF0FWNMO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NATL ACCT PROP TOT NET BKGS
DataItem FF0FWNPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0FWOBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page direction
DataItem FF0FWPAD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number
DataItem FF0FWPAG num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROP CARRYOVER
DataItem FF0FWPCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Percent calculation work area
DataItem FF0FWPCT bin(18,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO "CCYY"
DataItem FF0FWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO  "MM"
DataItem FF0FWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior month FF_CONTP_MO
DataItem FF0FWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROP TOT NET BKGS
DataItem FF0FWPRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0FWRIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Right scroll amount
DataItem FF0FWRSA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REVD SEAS IDX
DataItem FF0FWRSI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Season counter
DataItem FF0FWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current season shown
DataItem FF0FWSEA num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu selection number
DataItem FF0FWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save FF_SLS_FCST (Prior mo)
DataItem FF0FWSF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FF0FWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SUPPLY
DataItem FF0FWSUP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem FF0FWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cross reference EOF switch
DataItem FF0FWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summary cursor EOF switch
DataItem FF0FWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0FWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rqst for data switch each year
DataItem FF0FWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0FWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First season switch
DataItem FF0FWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE FUT
DataItem FF0FWTAF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOT ACTIVE PROP
DataItem FF0FWTAP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND ALLOCATED
DataItem FF0FWTDA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND CANCELLED
DataItem FF0FWTDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND INVOICED
DataItem FF0FWTDI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND PRE-ALLOC
DataItem FF0FWTDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL DEMAND TOT NET BKGS
DataItem FF0FWTDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total frozen demand
DataItem FF0FWTFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total frozen indices
DataItem FF0FWTFI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen demand
DataItem FF0FWTUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total unfrozen indices
DataItem FF0FWTUI decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INV TURNS
DataItem FF0FWTUR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// combine types?
DataItem FF0FWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

