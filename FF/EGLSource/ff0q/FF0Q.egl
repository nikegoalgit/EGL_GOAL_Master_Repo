package ff0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0Q ****
// The user can enter this application via the S.R. Menu (FF0A)
// or Fast Path.
// 
// This application displays existing carryover percents for
// user entered category, type group, and begin date range for
// both futures and prop.  The user is then allowed to change
// any of these carryover percents.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/30/89  RGILLI  New application.
//          07/20/90  SFORD   Changed logic to update .VFFXRF01
//                            with 4 new fields.
//          08/06/90  SFORD   Placed cursor CAT field when
//                            update successfully completed.
// ff175    12/19/96  dsmith  regenerated for year 2000.
// *********************
Program FF0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0QW00 FF0QW00; // record
  FF0QW01 FF0QW01; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0QM.FF0QM001,  // forms
      FF0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0QM001 initial; /* M001 input/output*/
    set FF0QW00 empty; /* Working storage*/
    set FF0QW01 empty; /* M001 display storage*/
    set FF2REC empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0QW00.FF0QWSWR = "N"; /* Request for data switch*/
    FF0QW00.FF0QWSWF = "Y"; /* format screen data switch*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.XPCCD > " ")
      FF0QW00.FF0QWSWR = "Y"; /* set data request flag*/
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0Q.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0Q001; /* Converse the main process*/


    FF0Q001: FF0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0Q001; /* Converse the main process*/


  end // end main
end // end FF0Q

// Inquire/maintain a table row
Function FF0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0Q100(); /* Obtain the data to display*/

  FF0Q200(); /* Format and display the map*/

  FF0Q300(); /* Check attention identifier*/

  FF0Q400(); /* Reset fields to normal intensity*/

  FF0Q500(); /* Verify the entered data*/

  FF0Q600(); /* Process valid input request*/


end // end FF0Q001

// Obtain the data to display
Function FF0Q100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0QW00.FF0QWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* set map storage record empty*/
   /* ------------------------------------------------------------*/

  set FF0QW01 empty; /* init w/s map record*/

   /* ------------------------------------------------------------*/
   /* select dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/

  FF0Q110(); /* select dfcast.vffxrf01 row*/

  if (SQLCA.VAGen_SQLCODE == 100)

    set FF0QM001 initial;

    FF0QM001.XPCCD = FFWREC.XPCCD;
    FF0QM001.XPCABRV = FFWREC.XPCABRV;
    FF0QM001.YPGCD = FFWREC.YPGCD;
    FF0QM001.YPGABRV = FFWREC.YPGABRV;

    FF0QM001.XXXMODID = "100";
    converseLib.validationFailed(187);

  else

    FF0QW01.CACHGFL = "Y"; /* ===> modifiable data*/

    if (FFWREC.FFABEGMO == 0)
      FFWREC.FFABEGMO = FF2REC.FF2SEASN[1];
    end

  end

   /* ------------------------------------------------------------*/
   /* if no system errors, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FF0QW00.FF0QWSWR = "N"; /* Request for data switch*/
  end


end // end FF0Q100

// Select set on dfcast.vffxrf01
Function FF0Q110()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FFWREC.XPCCD;
  FF2REC.YPGCD = FFWREC.YPGCD;
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0Q110

// Format and converse the map
Function FF0Q200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0QW00.FF0QWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0QW00.FF0QWSWF == "Y") /* map must be formatted*/
      FF0Q210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 32) /* Update successful message*/
      set FF0QM001.XPCCD cursor; /* product category code*/
    end
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FF0QM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FF0QM001 alarm; /* Indicate sound alarm*/
  end

  converse FF0QM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FF0QM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0QM001.CAITEM; /* Application data*/


end // end FF0Q200

// Format the display data
Function FF0Q210()
   /* ------------------------------------------------------------*/
   /* init map ff0qm001*/
   /* ------------------------------------------------------------*/

  set FF0QM001 initial; /* M001 input/output area*/

  FF0QW00.FF0QWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format FF0QM001 using data from FFWREC  (Header Data)*/
   /* ------------------------------------------------------------*/

  FF0QM001.XPCCD = FFWREC.XPCCD; /* product category code*/
  FF0QM001.XPCABRV = FFWREC.XPCABRV; /* product category short desc*/

  FF0QM001.YPGCD = FFWREC.YPGCD; /* product type grp code*/
  FF0QM001.YPGABRV = FFWREC.YPGABRV; /* product type grp short desc*/

   /* ------------------------------------------------------------*/
   /* Format FF0QM001 using data from FF2REC  (Percent Values)*/
   /* ------------------------------------------------------------*/

  FF0QM001.FF0QMF1M = FF2REC.FFQLCOFP; /* ===> Futures % 1 month  back*/
  FF0QM001.FF0QMF2M = FF2REC.FFQOCOFP; /* ===> Futures % 2 months back*/
  FF0QM001.FF0QMP1M = FF2REC.FFQLCOPP; /* ===> Prop %  1 month  back*/
  FF0QM001.FF0QMP2M = FF2REC.FFQOCOPP; /* ===> Prop %  2 months back*/

  set FF0QM001.FF0QMF2M cursor; /* ===> Futures 2 months Back Percent*/


  if (FF0QW01.CACHGFL == "Y")
    set FF0QM001.FF0QMF1M initialAttributes; /* Future Percent (1 Month  Back)*/
    set FF0QM001.FF0QMF2M cursor, initialAttributes;
                                   /* Future percent (2 Months Back)*/
    set FF0QM001.FF0QMP1M initialAttributes; /* Prop. percent  (1 Month  back)*/
    set FF0QM001.FF0QMP2M initialAttributes; /* Prop. percent  (2 Months back)*/
  else
    set FF0QM001.XPCCD cursor; /* product category code*/
    set FF0QM001.FF0QMF1M skip; /* Future % (1 Month  Back)*/
    set FF0QM001.FF0QMF2M skip; /* Future % (2 Months Back)*/
    set FF0QM001.FF0QMP1M skip; /* Prop.  % (1 Month  back)*/
    set FF0QM001.FF0QMP2M skip; /* Prop.  % (2 Months back)*/
  end

end // end FF0Q210

// Check attention identifier
Function FF0Q300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0QW00.FF0QWSWR == "Y")
      set FF0QW01 empty; /* set map storage empty*/
    end

    FF0QW00.FF0QWSWF = "Y"; /* set map switch*/
    FF0QW00.FF0QWSWR = "N"; /* data request switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0QM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0QM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0Q300

// Reset highlighted fields
Function FF0Q400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0QM001.XPCCD initialAttributes; /* product category*/
  set FF0QM001.YPGCD initialAttributes; /* product type group*/

  if (FF0QW01.CACHGFL == "Y")
    set FF0QM001.FF0QMF2M initialAttributes; /* Future percent (2 Months Back)*/
    set FF0QM001.FF0QMF1M initialAttributes; /* Future Percent (1 Month  Back)*/
    set FF0QM001.FF0QMP2M initialAttributes; /* Prop. percent  (2 months back)*/
    set FF0QM001.FF0QMP1M initialAttributes; /* Prop. percent  (2 months back)*/
  end

  set FF0QM001.CATOAP initialAttributes;
  set FF0QM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.XPCCD == "?" /* GPC list requested*/
   || FF0QM001.YPGCD == "?") /* or dimension list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(3); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0QM001.XPCCD = FFWREC.XPCCD;
      FF0QM001.XPCABRV = FFWREC.XPCABRV;
    else
      FF0QM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0QM001.XPCABRV = XPCTBL.XPCSDESC[XX0XWPIX]; /* Description*/
    end

    set FF0QM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0QM001.YPGCD = FFWREC.YPGCD;
      FF0QM001.YPGABRV = FFWREC.YPGABRV;
    else
      FF0QM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0QM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/
    end

    set FF0QM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97);

  exit stack; /* Exit to display map*/


end // end FF0Q400

// Verify the entered data
Function FF0Q500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any of the key fields changed, determine if any of the*/
   /* modifiable fields were changed.  if so, display error msg*/
   /* ------------------------------------------------------------*/
  FF0QW00.FF0QWFCT = FFWREC.FFABEGMO;

  if (FF0QM001.XPCCD != FFWREC.XPCCD /* product category changed*/
   || FF0QM001.XPCCD == " "          /* product category changed*/
   || FF0QM001.YPGCD != FFWREC.YPGCD /* product type grp changed*/
   || FF0QM001.YPGCD == " ")         /* product type grp changed*/

    FF0Q510(); /* Check modifiable fields*/

    FF0Q520(); /* validate key entries*/

    if (converseVar.validationMsgNum == 0)
      FF0QW00.FF0QWSWR = "Y"; /* request data*/
    end

  else

    FF0Q530(); /* ===> verify values entered not > 100%*/

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end FF0Q500

// Check modifiable fields
Function FF0Q510()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that data may*/
   /* not be changed when a different table row is requested.*/
   /* ------------------------------------------------------------*/


  if (FF0QM001.FF0QMP1M != FF2REC.FFQLCOPP)
    set FF0QM001.FF0QMP1M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(130); /* Indicate cannot change*/
  end

  if (FF0QM001.FF0QMP2M != FF2REC.FFQOCOPP)
    set FF0QM001.FF0QMP2M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(130); /* Indicate cannot change*/
  end

  if (FF0QM001.FF0QMF1M != FF2REC.FFQLCOFP)
    set FF0QM001.FF0QMF1M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(130); /* Indicate cannot change*/
  end

  if (FF0QM001.FF0QMF2M != FF2REC.FFQOCOFP)
    set FF0QM001.FF0QMF2M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(130); /* Indicate cannot change*/
  end

end // end FF0Q510

// validate key field entries
Function FF0Q520()

   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* validate product type group code*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.YPGCD != " ")

    if (FF0QM001.YPGCD in YPGTBL.YPGCD) /* Code in table*/
      if (YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FF0QM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      else
        FF0QM001.YPGABRV = " "; /* Clear description*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0QM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(9); /* Inactive status*/
      end
    else
      FF0QM001.YPGABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0QM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* invalid value entered*/
    end
  else
    FF0QM001.YPGABRV = " "; /* Clear description*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0QM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* value required*/
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  if (FF0QM001.XPCCD != " ")
    set XPCREC empty; /* Row storage area*/

    XPCREC.XPCCD = FF0QM001.XPCCD; /* Category code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY) /* Code in table*/
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FF0QM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      else
        FF0QM001.XPCABRV = " "; /* Clear description*/
        FFWREC.XXXMODID = "520"; /* Module identification*/
        set FF0QM001.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(9); /* status inactive*/
      end
    else
      FF0QM001.XPCABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0QM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* invalid value entered*/
    end
  else
    FF0QM001.XPCABRV = " "; /* Clear description*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF0QM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* required field enter value*/
  end

end // end FF0Q520

// verify % value fields
Function FF0Q530()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that data may*/
   /* not be changed when a different table row is requested.*/
   /* ------------------------------------------------------------*/


  if (FF0QM001.FF0QMP1M > 100)
    set FF0QM001.FF0QMP1M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate cannot be more than 100.0%*/
  end

  if (FF0QM001.FF0QMP2M > 100)
    set FF0QM001.FF0QMP2M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate cannot be more than 100.0%*/
  end

  if (FF0QM001.FF0QMF1M > 100)
    set FF0QM001.FF0QMF1M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate cannot be more than 100.0%*/
  end

  if (FF0QM001.FF0QMF2M > 100)
    set FF0QM001.FF0QMF2M cursor, bold; /* Highlight*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate cannot be more than 100.0%*/
  end

end // end FF0Q530

// Process valid input request
Function FF0Q600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FF0QW00.FF0QWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.XPCCD = FF0QM001.XPCCD; /* product category code*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  XPCREC.XPCCD = FF0QM001.XPCCD; /* product category code*/
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end
  FFWREC.YPGCD = FF0QM001.YPGCD; /* product type group code*/
  if (FF0QM001.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end

  if (FF0QW00.FF0QWSWR == "Y")
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  FF0QW00.FF0QWCHG = "N"; /* data changed*/

  if (FF0QM001.FF0QMF1M != FF2REC.FFQLCOFP
   || FF0QM001.FF0QMF2M != FF2REC.FFQOCOFP
   || FF0QM001.FF0QMP1M != FF2REC.FFQLCOPP
   || FF0QM001.FF0QMP2M != FF2REC.FFQOCOPP)

    FF0QW00.FF0QWCHG = "Y"; /* database updated*/

    FF0Q620(); /* update DFCAST.VFFXRF01*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  if (FF0QW00.FF0QWCHG == "Y")

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

    FF0QW00.FF0QWSWR = "Y"; /* request for data switch*/

    /* ------------------------------------------------------------*/
     /* Commit all changes to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

  end
end // end FF0Q600

// Update DFCAST.VFFXRF01 row
Function FF0Q620()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

   /* future percentage*/
   /* -----------------*/

  FF2REC.FFQLCOFP = FF0QM001.FF0QMF1M;
  FF0QW01.FFQLCOFP = FF0QM001.FF0QMF1M;

  FF2REC.FFQOCOFP = FF0QM001.FF0QMF2M;
  FF0QW01.FFQOCOFP = FF0QM001.FF0QMF2M;

   /* prop percentage*/
   /* ---------------*/

  FF2REC.FFQLCOPP = FF0QM001.FF0QMP1M;
  FF0QW01.FFQLCOPP = FF0QM001.FF0QMP1M;

  FF2REC.FFQOCOPP = FF0QM001.FF0QMP2M;
  FF0QW01.FFQOCOPP = FF0QM001.FF0QMP2M;


  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0QW00.FF0QWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VFFXRF01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Q620

//*** RECORD=FF0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0QW00 type basicRecord
  10 FF0QWDCF FF0QWDCF ; 
  10 FF0QWCHG FF0QWCHG ; 
  10 FF0QWSWR FF0QWSWR ; 
  10 FF0QWSWF FF0QWSWF ; 
  10 FF0QWIDX FF0QWIDX ; 
  10 FF0QWPIX FF0QWPIX ; 
  10 FF0QWFCT FF0QWFCT ; 
    15 * num(3) ; 
    15 FF0QWFCC FF0QWFCC ; 
    15 FF0QWFYM FF0QWFYM ; 
      20 FF0QWFYY FF0QWFYY ; 
      20 FF0QWFMM FF0QWFMM ; 
  10 FF0QWTDT FF0QWTDT ; 
    15 FF0QWTCC FF0QWTCC ; 
    15 FF0QWTYM FF0QWTYM ; 
      20 FF0QWTYY FF0QWTYY ; 
      20 FF0QWTMM FF0QWTMM ; 
    15 FF0QWTDD FF0QWTDD ; 
end // end FF0QW00

//*** RECORD=FF0QW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0QW01 type basicRecord
  5 FF0QWGRP FF0QWGRP ; 
    10 CACHGFL CACHGFL ; 
    10 FF0QWF1M FF0QWF1M ; 
    10 FF0QWF2M FF0QWF2M ; 
    10 FF0QWP1M FF0QWP1M ; 
    10 FF0QWP2M FF0QWP2M ; 
    10 FFQLCOPP FFQLCOPP ; 
    10 FFQLCOFP FFQLCOFP ; 
    10 FFQOCOPP FFQOCOPP ; 
    10 FFQOCOFP FFQOCOFP ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end FF0QW01

// update data flag
DataItem FF0QWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data change flag
DataItem FF0QWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futures (1 Month  Back %)
DataItem FF0QWF1M num(5,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Futures (2 Months Back %)
DataItem FF0QWF2M num(5,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// begin century
DataItem FF0QWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF FCST date
DataItem FF0QWFCT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// begin month
DataItem FF0QWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FF0QWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year
DataItem FF0QWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0QWGRP char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load index
DataItem FF0QWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Prop    (1 Month  Back %)
DataItem FF0QWP1M num(5,2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Prop    (2 Month  Back %)
DataItem FF0QWP2M num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem FF0QWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FF0QWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FF0QWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin day
DataItem FF0QWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field used by ta0040
DataItem FF0QWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin month
DataItem FF0QWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FF0QWTYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year
DataItem FF0QWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

