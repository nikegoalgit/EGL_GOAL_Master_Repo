package ff01;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fe.common.*;
import ff.common.*;
import fg.common.*;
import fk.common.*;
import fy.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF01 ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application via FAST PATH.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/15/89  LDELUH  New application.
// FF#13    05/29/90  RHETRI  add edit for model # on MAP11
// FF#0     07/23/90  RHETRI  Stop use of '*' on MAP11 for type
//          08/01/90  CROSS   allow div = * or 20 on map003
//          08/06/90  CROSS   add inv pos, sugg buy and
//                            modeled prdctn fcst rpts
//          08/09/90  CROSS   add sugg buy by cat rpt and
//                            allow div = * or 20 on map002
// FF#134   08/16/90  SFORD   SET Job complete message = 'y'
//                            for the parm sent to TA0P
//          08/30/90  cross   allow div = * or 20 on map015
// FF2035   10/03/90  RHETRI  Add report - FF9501 (map 31)
// FF???    12/14/90  MDANGE  Add new inv. position reports by
//                            category and production forecast.
//                            Add report - FF9111 (map 21)
//                            Add report - FF9121 (map 22)
//                            Add report - FF9131 (map 23)
// FF2049    4/24/91  MDANGE  Add new inv. position reports for
//                            cat and prod with modeled fcst.
//                            Add report - FF9141 (map 24)
//                            Add report - FF9151 (map 25)
// FF       08/29/91  JJUCH   Add ff7901 - ship/rcpt/inv rpt
// FF2053   10/14/91  KSANF   Add FF970D - PRE-BLD CAT REPORT
// FF2053   10/18/91  KSANF   Add FF971D - PRE-BLD LINE REPORT
// Fix      10/23/91  JJUCH   Activate the S/R/I bgd/clsout rpt
// fh81     01/21/92  MWALKE  add style/color/dim rpt
// fh81,b   05/22/92  MWALKE  added add'l bgrade/closeout logic
// fh81,d   08/10/92  MWALKE  added multiple rept logic
// FF277    09/15/92  JJUCH   Add prdctn fcst & scheduling bal-
//                            ance report and exception report.
// FF360    02/26/93  kstokk  Change order of M099 selections.
// FF362    07/01/93  KGRAHA  Add Future Offer Date example on
//                            FF01M017.
// FF       09/07/93  mdange  Add logic to submit either prod
//                            or test JCL.
// FIX      10/04/93  JJUCH   Fixed the NIL adjustment report
//                            abend problem.(JCL override stmnt
// FF362    11/23/93  mwalke  restructed pre-build repts--can
//                            create both repts at the same tim
//          09/13/96  cwhit1  added 1st po report
//          11/13/96  cwhit1  added date range to 1st po report
// FF425    12/02/96  dpack   add selection of division for SRI
//                            report
// FF1054   02/27/98  RKUDPI  Add selection of season codes
//                            for INV. Positioning Reports
// FF1634d  09/23/98  sallan  modify production qty by category
//                            to report seasonally.
// FF-fix   03/04/99  rkudpi  fixed problem with sty/clr
//                            report - parms not being moved
//                            in  production JCL.
// *********************
Program FF01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF01W00 FF01W00; // record
  FF01W01 FF01W01; // record
  FF01W02 FF01W02; // record
  FF01W03 FF01W03; // record
  FF01W04 FF01W04; // record
  FF01W05 FF01W05; // record
  FF01W06 FF01W06; // record
  FF01W07 FF01W07; // record
  FF01W08 FF01W08; // record
  FF01W09 FF01W09; // record
  FF01W10 FF01W10; // record
  FF01W11 FF01W11; // record
  FF01W12 FF01W12; // record
  FF01W13 FF01W13; // record
  FF01W14 FF01W14; // record
  FF01W15 FF01W15; // record
  FF01W16 FF01W16; // record
  FF01W17 FF01W17; // record
  FF01W18 FF01W18; // record
  FF01W19 FF01W19; // record
  FF01W20 FF01W20; // record
  FF01W21 FF01W21; // record
  FF01W22 FF01W22; // record
  FF01W23 FF01W23; // record
  FF01W24 FF01W24; // record
  FF01W25 FF01W25; // record
  FF01W26 FF01W26; // record
  FF01W28 FF01W28; // record
  FF01W29 FF01W29; // record
  FF01W30 FF01W30; // record
  FF01W31 FF01W31; // record
  FF01W32 FF01W32; // record
  FF01W33 FF01W33; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG1REC FG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SYBREC SYBREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FF01T02; // table
  use FF01T03; // table
  use FF01T04; // table
  use FF01T05; // table
  use FF01T06; // table
  use FF01T07; // table
  use FF01T08; // table
  use FF01T09; // table
  use FF01T1O; // table
  use FF01T11; // table
  use FF01T12; // table
  use FF01T13; // table
  use FF01T14; // table
  use FF01T15; // table
  use FF01T16; // table
  use FF01T17; // table
  use FF01T18; // table
  use FF01T19; // table
  use FF01T2O {deleteAfterUse = yes}; // table
  use FF01T21 {deleteAfterUse = yes}; // table
  use FF01T22 {deleteAfterUse = yes}; // table
  use FF01T23 {deleteAfterUse = yes}; // table
  use FF01T24 {deleteAfterUse = yes}; // table
  use FF01T25 {deleteAfterUse = yes}; // table
  use FF01T26 {deleteAfterUse = yes}; // table
  use FF01T28 {deleteAfterUse = yes}; // table
  use FF01T29 {deleteAfterUse = yes}; // table
  use FF01T3O {deleteAfterUse = yes}; // table
  use FF01T31; // table
  use FF01T32 {deleteAfterUse = yes}; // table
  use FF01T33 {deleteAfterUse = yes}; // table
  use FF01T5O {deleteAfterUse = yes}; // table
  use FF01T51 {deleteAfterUse = yes}; // table
  use FF01T52 {deleteAfterUse = yes}; // table
  use FF01T53 {deleteAfterUse = yes}; // table
  use FF01T54 {deleteAfterUse = yes}; // table
  use FF01T55 {deleteAfterUse = yes}; // table
  use FF01T56 {deleteAfterUse = yes}; // table
  use FF01T57 {deleteAfterUse = yes}; // table
  use FF01T58 {deleteAfterUse = yes}; // table
  use FF01T59 {deleteAfterUse = yes}; // table
  use FF01T6O {deleteAfterUse = yes}; // table
  use FF01T61 {deleteAfterUse = yes}; // table
  use FF01T62 {deleteAfterUse = yes}; // table
  use FF01T63 {deleteAfterUse = yes}; // table
  use FF01T64 {deleteAfterUse = yes}; // table
  use FF01T65 {deleteAfterUse = yes}; // table
  use FF01T66 {deleteAfterUse = yes}; // table
  use FF01T67 {deleteAfterUse = yes}; // table
  use FF01T68 {deleteAfterUse = yes}; // table
  use FF01T69 {deleteAfterUse = yes}; // table
  use FF01T7O {deleteAfterUse = yes}; // table
  use FF01T71 {deleteAfterUse = yes}; // table
  use FF01T72 {deleteAfterUse = yes}; // table
  use FF01T73 {deleteAfterUse = yes}; // table
  use FF01T74 {deleteAfterUse = yes}; // table
  use FF01T76 {deleteAfterUse = yes}; // table
  use FF01T77 {deleteAfterUse = yes}; // table
  use FF01T78 {deleteAfterUse = yes}; // table
  use FF01T79 {deleteAfterUse = yes}; // table
  use FF01T8O {deleteAfterUse = yes}; // table
  use FF01T81 {deleteAfterUse = yes}; // table
  use FE0DTBL {deleteAfterUse = yes}; // table
  use XPLTBL; // table
  use YPGTBL; // table
  use XPCTBL; // table
  use XFCTBL; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use FF01M.FF01M002,  // forms
      FF01M.FF01M003, 
      FF01M.FF01M004, 
      FF01M.FF01M005, 
      FF01M.FF01M006, 
      FF01M.FF01M007, 
      FF01M.FF01M008, 
      FF01M.FF01M009, 
      FF01M.FF01M010, 
      FF01M.FF01M011, 
      FF01M.FF01M012, 
      FF01M.FF01M013, 
      FF01M.FF01M014, 
      FF01M.FF01M015, 
      FF01M.FF01M016, 
      FF01M.FF01M017, 
      FF01M.FF01M018, 
      FF01M.FF01M019, 
      FF01M.FF01M020, 
      FF01M.FF01M099, 
      FF01M.TA0PM001, 
      FF01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set FF01M002 initial; /* M002 input/output*/
    set FF01M003 initial; /* M003 input/output*/
    set FF01M004 initial; /* M005 input/output*/
    set FF01M005 initial; /* M006 input/output*/
    set FF01M006 initial; /* M006 input/output*/
    set FF01M007 initial; /* M007 input/output*/
    set FF01M008 initial; /* M008 input/output*/
    set FF01M009 initial; /* M009 input/output*/
    set FF01M010 initial; /* M010 input/output*/
    set FF01M011 initial; /* M011 input/output*/
    set FF01M012 initial; /* M012 input/output*/
    set FF01M013 initial; /* M013 input/output*/
    set FF01M014 initial; /* M014 input/output*/
    set FF01M015 initial; /* M015 input/output*/
    set FF01M016 initial; /* M016 input/output*/
    set FF01M017 initial; /* M017 input/output*/
    set FF01M018 initial; /* M018 input/output*/
    set FF01M019 initial; /* M019 input/output*/
    set FF01M099 initial; /* M099 input/output*/
    set FF01W01 empty; /* Working storage*/
    set XX0XW01 empty; /* Date/time parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date edit parameters*/
    set TA6REC empty; /* Print subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* Default type to '01'.*/
     /* ------------------------------------------------------------*/

    FFWREC.YPGCD = "01"; /* Default value*/
    FFWREC.YPGABRV = "******";
    if (FFWREC.YPGCD in YPGTBL.YPGCD)
      FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end

     /* ------------------------------------------------------------*/
     /* Default div grp to '10'*/
     /* ------------------------------------------------------------*/

    FFWREC.YSMXDV = "10"; /* Default value*/
    FFWREC.YSMSMDSC = "DOMSTC";

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the report menu.*/
     /* ------------------------------------------------------------*/

    FF01W01.FF01WIXL = 19; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF01001; /* Converse the main process*/


    FF01001: FF01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF01001; /* Converse the main process*/


  end // end main
end // end FF01

// Main process to display a map
Function FF01001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01WSWX != "Y") /* EXIT not requested*/

    if (FF01W01.FF01MSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/
      FF01010(); /* Specify report distribution*/
    end

    if (FF01W01.FF01MSEL[2] == "S") /* Line 2 was selected*/
      FF01020(); /* Monthly Prdctn By*/
    end

    if (FF01W01.FF01MSEL[3] == "S") /* Line 3 was selected*/
      FF01030(); /* shipment/demand*/
    end

    if (FF01W01.FF01MSEL[4] == "S") /* Line 4 was selected*/
      FF01040(); /* Sales/recpt/inv Report*/
    end

    if (FF01W01.FF01MSEL[5] == "S") /* Line 5 was selected*/
      FF01050(); /* Prdctn fcst Special Features*/
    end

    if (FF01W01.FF01MSEL[6] == "S") /* Line 6 was selected*/
      FF01060(); /* Target/Sugg buy Comparison Rpt*/
    end

    if (FF01W01.FF01MSEL[7] == "S") /* Line 7 was selected*/
      FF01070(); /* Preset Production Plan*/
    end

    if (FF01W01.FF01MSEL[8] == "S") /* Line 8 was selected*/
      FF01080(); /* Order Min report*/
    end

    if (FF01W01.FF01MSEL[9] == "S") /* Line 9 was selected*/
      FF01090(); /* Makeup Adjustments*/
    end

    if (FF01W01.FF01MSEL[10] == "S") /* Line 10 was selected*/
      FF01100(); /* Nil Adjustment*/
    end

    if (FF01W01.FF01MSEL[11] == "S") /* Line 11 was selected*/
      FF01110(); /* Monthly Suggested Buy*/
    end

    if (FF01W01.FF01MSEL[12] == "S") /* Line 12 was selected*/
      FF01120(); /* Modeled Prod Fcst*/
    end

    if (FF01W01.FF01MSEL[13] == "S") /* Line 13 was selected*/
      FF01130(); /* Submitted Prod Fcst*/
    end

    if (FF01W01.FF01MSEL[14] == "S") /* Line 14 was selected*/
      FF01140(); /* Inv position with sugg buy*/
    end

    if (FF01W01.FF01MSEL[15] == "S") /* Line 15 was selected*/
      FF01150(); /* Inv Position with prod fcst*/
    end

    if (FF01W01.FF01MSEL[16] == "S") /* Line 16 was selected*/
      FF01160(); /* Inv position with modeled fcst*/
    end

    if (FF01W01.FF01MSEL[17] == "S") /* Line 17 was selected*/
      FF01170(); /* Prebuild qty*/
    end

    if (FF01W01.FF01MSEL[18] == "S") /* Line 18 was selected*/
      FF01180(); /* Prdctn fcst balance rpt*/
    end

    if (FF01W01.FF01MSEL[19] == "S") /* Line 19 was selected*/
      FF01190(); /* Prdctn fcst exception rpt*/
    end

    if (FF01W01.FF01MSEL[20] == "S") /* Line 19 was selected*/
      FF01200(); /* FIRST PO EXCEPTION REPORT*/
    end

  end

  FF01W01.FF01WSWX = "N"; /* Reset exit requested switch*/

  FF01990(); /* Report Request Menu*/


end // end FF01001

// Specify report distribution
Function FF01010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        FF01W01.FF01MSEL[1] = "*"; /* Indicate function completed*/

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      FF01W01.FF01MSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/


end // end FF01010

// Monthly Prdctn Qty Rpt
Function FF01020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01021(); /* Format and display the map*/

  FF01022(); /* Check attention identifier*/

  FF01023(); /* Reset fields to normal intensity*/

  FF01024(); /* Verify the data that was entered*/

  FF01025(); /* Process valid input request*/


end // end FF01020

// Format and display the map
Function FF01021()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M002.YPGCD = FFWREC.YPGCD;
    FF01M002.YPGABRV = FFWREC.YPGABRV;

    FF01M002.YSMXDV = FFWREC.YSMXDV;
    FF01M002.YSMSMDSC = FFWREC.YSMSMDSC;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M002 alarm; /* Indicate sound alarm*/

  end

  converse FF01M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01021

// Check attention identifier
Function FF01022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[2] = "C"; /* Indicate selection cancelled*/

    set FF01M002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "022"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01022

// Reset highlighted fields
Function FF01023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M002.FF01MCPG initialAttributes; /* Combine type group*/
  set FF01M002.FF01MSEQ[1] initialAttributes; /* sequence by*/
  set FF01M002.FF01MSEQ[2] initialAttributes; /* sequence by*/
  set FF01M002.FF01MSEQ[3] initialAttributes; /* sequence by*/
  set FF01M002.FF01MSEQ[4] initialAttributes; /* sequence by*/
  set FF01M002.XPCCD initialAttributes; /* Category*/
  set FF01M002.XPLCD initialAttributes; /* Line*/
  set FF01M002.YPGCD initialAttributes; /* Type group*/
  set FF01M002.YSMXDV initialAttributes; /* Div group*/
  set FF01M002.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M002.FF01MXMO initialAttributes; /* Range end month*/
   /* bgn tcs*/
  set FF01M002.FF01SES1 initialAttributes; /* season code 1*/
  set FF01M002.FF01SES2 initialAttributes; /* season code 2*/
  set FF01M002.FF01SES3 initialAttributes; /* season code 3*/
   /* / *end tcs*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPCCD == "?" /* Category list requested*/
   || FF01M002.XPLCD == "?" /* Line code list requested*/
   || FF01M002.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "023"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M002.XPCCD = "  "; /* Code*/
      FF01M002.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M002.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M002.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M002.XPLCD = "  "; /* Code*/
      FF01M002.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M002.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M002.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M002.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M002.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M002.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M002.YPGCD = "  "; /* Code*/
      FF01M002.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M002.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "023"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01023

// Verify the entered data
Function FF01024()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPLCD == " " /* Line not entered*/
   && FF01M002.XPCCD == " ") /* Category not entered*/
    if (FF01M002.FF01MSEQ[1] == "S"
    ) /* NEXT SENTENCE*/
    else
      FFWREC.XXXMODID = "024"; /* Module identification*/
      set FF01M002.XPCCD cursor, bold; /* Highlight*/
      set FF01M002.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
    end
  end

  if (FF01M002.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "024"; /* Module identification*/
    set FF01M002.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M002.YSMXDV == " ") /* Div group not entered*/
    FFWREC.XXXMODID = "024"; /* Module identification*/
    set FF01M002.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* bgn tcs*/
  FF01W01.FF01W-SESN-ENTERED = "N";

  if (FF01M002.FF01SES1 != "    "
   || FF01M002.FF01SES2 != "    "
   || FF01M002.FF01SES3 != "    ")
    FF01W01.FF01W-SESN-ENTERED = "Y";
  end
   /* end tcs*/

  if (FF01M002.FF01MXMO == 0) /* range end month not entered*/
    FFWREC.XXXMODID = "024"; /* module identification*/
    set FF01M002.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M002.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "024"; /* Module identification*/
    set FF01M002.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Edit combine type group flag*/

  if (FF01M002.FF01MCPG == "Y" /* combine type groups*/
   || FF01M002.FF01MCPG == "N") /**/
    /* NEXT SENTENCE*/
  else
    FFWREC.XXXMODID = "024"; /* Module identification*/
    set FF01M002.FF01MCPG cursor, bold; /* Highlight*/
    converseLib.validationFailed(427); /* Indicate missing*/
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 5)
    if (FF01M002.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "024"; /* Module identification*/
        set FF01M002.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M002.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "024"; /* Module identification*/
        set FF01M002.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "024"; /* Module identification*/
    set FF01M002.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

  if (FF01M002.FF01MCPG == "Y") /* combine type groups*/
    if (FF01M002.FF01MSEQ[1] == "S"
     || FF01M002.FF01MSEQ[2] == "S")
      FFWREC.XXXMODID = "024"; /* Module identification*/
      set FF01M002.FF01MCPG cursor, bold; /* Highlight*/
      converseLib.validationFailed(324); /* can't print this report*/
    end
  end

   /* RKUDPI 10/16/98 ADDED UNTIL THE OTHER REPORT OPTIONS ARE*/
   /* MODIFIED FOR SEASONALITY*/

  if (FF01W01.FF01W-SESN-ENTERED == "Y")
    if (FF01M002.FF01MSEQ[1] == "S"
     || FF01M002.FF01MSEQ[3] == "S")
      /* OR FF01M002.FF01MSEQ(4) = 'S'*/
      FFWREC.XXXMODID = "024"; /* Module identification*/
      set FF01M002.FF01MSEQ[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(324); /* can't print this report*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPCCD > " "  /* Category entered*/
   || FF01M002.XPLCD > " "  /* or line entered*/
   || FF01M002.YPGCD > " "  /* or type group entered*/
   || FF01M002.YSMXDV > " " /* or div group entered*/
   || FF01M002.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M002.FF01MXMO > 0) /* or range end mo entered*/
    FF01S03(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01024

// Process valid input request
Function FF01025()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* next sentence*/
  else

    FFWREC.XXXMODID = "123"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M002.FF01MSEQ[1] == "S") /* line report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010251(); /* format production jcl*/
    else
      FF010255(); /* format development jcl*/
    end
  end

  if (FF01M002.FF01MSEQ[2] == "S") /* cat report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010252(); /* format production jcl*/
    else
      FF010256(); /* format development jcl*/
    end
  end

  if (FF01M002.FF01MSEQ[3] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010253(); /* format production jcl*/
    else
      FF010257(); /* format development jcl*/
    end
  end

  if (FF01M002.FF01MSEQ[4] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010254(); /* format production jcl*/
    else
      FF010258(); /* format development jcl*/
    end
  end
end // end FF01025

// Submit prod JCL FF7001
Function FF010251()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T15.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W15 empty; /* Parameters work area*/

      FF01W15.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W15.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      FF01W15.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W15.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W15.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T15.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T15.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T15.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0251"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010251

// Submit prod JCL FF7011
Function FF010252()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T02.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W02 empty; /* Parameters work area*/

      FF01W02.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W02.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W02.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      /* bgn tcs*/
      FF01W02.FF01W-SES1 = FF01M002.FF01SES1; /* sesson code 1*/
      FF01W02.FF01W-SES2 = FF01M002.FF01SES2; /* season code 2*/
      FF01W02.FF01W-SES3 = FF01M002.FF01SES3; /* / *season code 3*/
      /* end tcs*/

      FF01W02.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W02.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W02.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T02.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T02.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T02.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010252

// Submit prod JCL FF7611
Function FF010253()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T11.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W11 empty; /* Parameters work area*/

      FF01W11.FF01WCPG = FF01M002.FF01MCPG; /* Combine type group*/
      FF01W11.XPCCD = FF01M002.XPCCD; /* Category*/
      FF01W11.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W11.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W11.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      FF01W11.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W11.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T11.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T11.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T11.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0253"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010253

// Submit prod JCL FF7601
Function FF010254()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T03.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W03 empty; /* Parameters work area*/

      FF01W03.FF01WCPG = FF01M002.FF01MCPG; /* Combine type group*/
      FF01W03.XPCCD = FF01M002.XPCCD; /* Category*/
      FF01W03.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W03.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W03.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      /* bgn tcs*/
      FF01W03.FF01W-SES1 = FF01M002.FF01SES1; /* sesson code 1*/
      FF01W03.FF01W-SES2 = FF01M002.FF01SES2; /* season code 2*/
      FF01W03.FF01W-SES3 = FF01M002.FF01SES3; /* / *season code 3*/
      /* end tcs*/

      FF01W03.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W03.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W03.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T03.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T03.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T03.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0254"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010254

// Submit test JCL FF7001
Function FF010255()
   /* Submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T63.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W15 empty; /* Parameters work area*/

      FF01W15.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W15.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      FF01W15.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W15.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W15.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T63.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T63.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T63.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0255"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010255

// Submit test JCL FF7011
Function FF010256()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T5O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W02 empty; /* Parameters work area*/

      FF01W02.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W02.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W02.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      /* bgn tcs*/
      FF01W02.FF01W-SES1 = FF01M002.FF01SES1; /* season code 1*/
      FF01W02.FF01W-SES2 = FF01M002.FF01SES2; /* season code 2*/
      FF01W02.FF01W-SES3 = FF01M002.FF01SES3; /* season code 3*/
      /* end tcs*/

      FF01W02.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W02.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W02.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T5O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T5O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T5O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0256"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010256

// Submit test JCL FF7611
Function FF010257()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T59.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W11 empty; /* Parameters work area*/

      FF01W11.FF01WCPG = FF01M002.FF01MCPG; /* Combine type group*/
      FF01W11.XPCCD = FF01M002.XPCCD; /* Category*/
      FF01W11.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W11.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W11.YSMXDV = FF01M002.YSMXDV; /* Div group*/

      FF01W11.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W11.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T59.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T59.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T59.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0257"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010257

// Submit test JCL FF7601
Function FF010258()
   /* submit test JCL*/
   /* -----------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T51.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W03 empty; /* Parameters work area*/

      FF01W03.FF01WCPG = FF01M002.FF01MCPG; /* Combine type group*/
      FF01W03.XPCCD = FF01M002.XPCCD; /* Category*/
      FF01W03.XPLCD = FF01M002.XPLCD; /* Line*/
      FF01W03.YPGCD = FF01M002.YPGCD; /* Type group*/
      FF01W03.YSMXDV = FF01M002.YSMXDV; /* Div group*/
      /* bgn ff1634f*/
      FF01W03.FF01W-SES1 = FF01M002.FF01SES1; /* season code 1*/
      FF01W03.FF01W-SES2 = FF01M002.FF01SES2; /* season code 2*/
      FF01W03.FF01W-SES3 = FF01M002.FF01SES3; /* season code 3*/
      /* end ff1634f*/

      FF01W03.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W03.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W03.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T51.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T51.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T51.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0258"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[2] = "*"; /* Indicate function completed*/

    set FF01M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010258

// Shipment/Demand Report
Function FF01030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01031(); /* Format and display the map*/

  FF01032(); /* Check attention identifier*/

  FF01033(); /* Reset fields to normal intensity*/

  FF01034(); /* Verify the data that was entered*/

  FF01035(); /* Process valid input request*/


end // end FF01030

// Format and display the map
Function FF01031()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M003.YPGCD = FFWREC.YPGCD;
    FF01M003.YPGABRV = FFWREC.YPGABRV;

    FF01M003.YSMXDV = FFWREC.YSMXDV;
    FF01M003.YSMSMDSC = FFWREC.YSMSMDSC;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M003.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M003 alarm; /* Indicate sound alarm*/

  end

  converse FF01M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01031

// Check attention identifier
Function FF01032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[3] = "C"; /* Indicate selection cancelled*/

    set FF01M003 initial; /* M003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "032"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01032

// Reset highlighted fields
Function FF01033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M003.XPLCD initialAttributes; /* Line*/
  set FF01M003.YPGCD initialAttributes; /* Type group*/
  set FF01M003.YSMXDV initialAttributes; /* Div group*/
  set FF01M003.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M003.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.XPLCD == "?" /* Line code list requested*/
   || FF01M003.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "033"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M003.XPLCD = "  "; /* Code*/
      FF01M003.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M003.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M003.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M003.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M003.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M003.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M003.YPGCD = "  "; /* Code*/
      FF01M003.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M003.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "033"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01033

// Verify the entered data
Function FF01034()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF01M003.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M003.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF01M003.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M003.YSMXDV == " ") /* Div group not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF01M003.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M003.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF01M003.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M003.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "034"; /* Module identification*/
    set FF01M003.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.XPLCD > " "  /* If line entered*/
   || FF01M003.YPGCD > " "  /* or type group entered*/
   || FF01M003.YSMXDV > " " /* or div group entered*/
   || FF01M003.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M003.FF01MXMO > 0) /* or range end mo entered*/
    FF01S04(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01034

// Process valid input request
Function FF01035()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010351(); /* format production jcl*/
    else
      FF010352(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "035"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01035

// Submit prod JCL FF7701
Function FF010351()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T04.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W04 empty; /* Parameters work area*/

      FF01W04.XPLCD = FF01M003.XPLCD; /* Line*/
      FF01W04.YPGCD = FF01M003.YPGCD; /* Type group*/
      FF01W04.YSMXDV = FF01M003.YSMXDV; /* Div group*/

      FF01W04.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W04.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W04.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T04.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T04.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T04.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[3] = "*"; /* Indicate function completed*/

    set FF01M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010351

// Submit test JCL FF7701
Function FF010352()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T52.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W04 empty; /* Parameters work area*/

      FF01W04.XPLCD = FF01M003.XPLCD; /* Line*/
      FF01W04.YPGCD = FF01M003.YPGCD; /* Type group*/
      FF01W04.YSMXDV = FF01M003.YSMXDV; /* Div group*/

      FF01W04.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W04.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W04.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T52.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T52.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T52.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[3] = "*"; /* Indicate function completed*/

    set FF01M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010352

// Sales/Receipts/Invent Rpt
Function FF01040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the Sales/Receipts*/
   /* /Inventory Report submission screen.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01041(); /* Format and display the map*/

  FF01042(); /* Check attention identifier*/

  FF01043(); /* Reset fields to normal intensity*/

  FF01044(); /* Verify the data that was entered*/

  FF01045(); /* Process valid input request*/


end // end FF01040

// Format and display the map
Function FF01041()
   /* ------------------------------------------------------------*/
   /* Converse the SRI Report Submission Screen.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M004.YPGCD = FFWREC.YPGCD;
    FF01M004.YPGABRV = FFWREC.YPGABRV;
    FF01M004.FF01MCMB = "N";
    FF01M004.FF01MINM = "S";
    FF01M004.FF01MXDV[1] = "S";
    FF01M004.FF01MXDV[2] = "S";
    FF01M004.FF01MXDV[3] = "S";
    FF01M004.FF01MRTS = 1.0;
    FF01M004.FF01MMIS = 1.0;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M004.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M004 alarm; /* Indicate sound alarm*/

  end

  converse FF01M004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01041

// Check attention identifier
Function FF01042()
   /* ------------------------------------------------------------*/
        /* Sales/Receipts/Receipts Report - Check keys module.*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[4] = "C"; /* Indicate selection cancelled*/

    set FF01M004 initial; /* M004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01042

// Reset highlighted fields
Function FF01043()
   /* ------------------------------------------------------------*/
   /* Sales/Receipts/Inventory Report - Edit Module*/
   /* Reset field attributes to normal intensity.*/
   /* Check for list requests.*/
   /* ------------------------------------------------------------*/

  set FF01M004.FF01MTYP initialAttributes; /* type sequence*/
  set FF01M004.FF01MLIN initialAttributes; /* line sequence*/
  set FF01M004.FF01MCTG initialAttributes; /* category sequence*/
  set FF01M004.FF01MSGP initialAttributes; /* styple group sequence*/
  set FF01M004.FF01MSTY initialAttributes; /* style color sequence*/
  set FF01M004.FF01MINM initialAttributes; /* Select Inline/Makeup rept type*/
  set FF01M004.FF01MBGD initialAttributes; /* Select Bgrade report type*/
  set FF01M004.FF01MCLT initialAttributes; /* Select Closeout Report*/
  set FF01M004.FF01MCMB initialAttributes; /* Select combine option*/
  set FF01M004.FF01MBMY initialAttributes; /* Range begin year & mo*/
  set FF01M004.FF01MXDV[1] initialAttributes; /* Division: Domestic*/
  set FF01M004.FF01MXDV[2] initialAttributes; /* Division: International*/
  set FF01M004.FF01MXDV[3] initialAttributes; /* Division: Promo*/
  set FF01M004.FF01MRTS initialAttributes; /* Return to Stock percentage*/
  set FF01M004.FF01MMIS initialAttributes; /* Nil Sisc percentage*/
  set FF01M004.YPGCD initialAttributes; /* Type group*/
  set FF01M004.XPLCD initialAttributes; /* Line*/
  set FF01M004.XPCCD initialAttributes; /* Category*/
  set FF01M004.SYBSTGNB initialAttributes; /* Style Group*/

   /* ------------------------------------------------------------*/
   /* If Style Group list was requested,*/
   /* initialize error message and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.SYBSTGNB == "?") /* Style Group list was requested*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    set FF01M004.SYBSTGNB cursor, bold; /* Hilite*/
    converseLib.validationFailed(10); /* Indicate invalid option*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Check for multiple Wildcard selections - Invalid option.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.YPGCD == "*" /* Wildcard selection*/
   && FF01M004.XPLCD == "*" /* Wildcard selection*/
   && FF01M004.XPCCD == "*" /* Wildcard selection*/
   && FF01M004.SYBSTGNB == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.YPGCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.XPLCD bold; /* hilite*/
    set FF01M004.XPCCD bold; /* hilite*/
    set FF01M004.SYBSTGNB bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end


  if (FF01M004.YPGCD == "*" /* Wildcard selection*/
   && FF01M004.XPLCD == "*" /* Wildcard selection*/
   && FF01M004.XPCCD == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.YPGCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.XPLCD bold; /* hilite*/
    set FF01M004.XPCCD bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end

  if (FF01M004.YPGCD == "*" /* Wildcard selection*/
   && FF01M004.XPLCD == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.YPGCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.XPLCD bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end

  if (FF01M004.XPLCD == "*" /* Wildcard selection*/
   && FF01M004.XPCCD == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.XPLCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.XPCCD bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end


  if (FF01M004.YPGCD == "*" /* Wildcard selection*/
   && FF01M004.XPCCD == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.YPGCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.XPCCD bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end


  if (FF01M004.XPLCD == "*" /* Wildcard selection*/
   && FF01M004.SYBSTGNB == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.XPLCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.SYBSTGNB bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end

  if (FF01M004.XPCCD == "*" /* Wildcard selection*/
   && FF01M004.SYBSTGNB == "*") /* Wildcard selection*/
    FFWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid Value*/
    set FF01M004.XPCCD cursor, bold; /* position cursor, hilite*/
    set FF01M004.SYBSTGNB bold; /* hilite*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPLCD == "?" /* Line code list requested*/
   || FF01M004.YPGCD == "?" /* Type group list requested*/
   || FF01M004.XPCCD == "?") /* Category list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "043"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M004.XPLCD = "  "; /* Code*/
      FF01M004.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M004.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M004.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M004.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Category Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPCCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M004.XPCCD = "  "; /* Code*/
      FF01M004.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M004.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M004.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M004.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M004.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M004.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M004.YPGCD = "  "; /* Code*/
      FF01M004.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M004.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "043"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01043

// Verify the entered data
Function FF01044()
   /* ------------------------------------------------------------*/
   /* Sales/Receipts/Inventory Report*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF01M004.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M004.FF01MBMY == 0) /* Range begin mo & yy not entered*/
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF01M004.FF01MBMY cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M004.FF01MCMB == "N" /* combine report*/
   || FF01M004.FF01MCMB == "Y")
    if (FF01M004.FF01MCMB == "Y")
      FF01M004.YPGCD = "* "; /* force type gpr to '*'*/
    end
  else
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF01M004.FF01MCMB cursor, bold; /* Highlight*/
    converseLib.validationFailed(427); /* Indicate enter 'y' or 'n'*/
  end

   /* ------------------------------------------------------------*/
   /* Check if at least one report type was selected.*/
   /* ------------------------------------------------------------*/
  if (FF01M004.FF01MINM > " " /* inline/makeup report*/
   || FF01M004.FF01MBGD > " " /* bgrade report*/
   || FF01M004.FF01MCLT > " ") /* closeout report*/
   /* at least one report type selected*/
  else
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF01M004.FF01MINM cursor, bold; /* Highlight*/
    set FF01M004.FF01MBGD cursor, bold; /* Highlight*/
    set FF01M004.FF01MCLT cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* required field missing*/
  end
   /* ------------------------------------------------------------*/
   /* Check if at least one division was selected.*/
   /* ------------------------------------------------------------*/
  if (FF01M004.FF01MXDV[1] > " " /* Domestic*/
   || FF01M004.FF01MXDV[2] > " " /* International*/
   || FF01M004.FF01MXDV[3] > " ") /* Promo*/
   /* at least one division selected*/
  else
    FFWREC.XXXMODID = "044"; /* Module identification*/
    set FF01M004.FF01MXDV[1] cursor, bold; /* Highlight*/
    set FF01M004.FF01MXDV[2] bold; /* Highlight*/
    set FF01M004.FF01MXDV[3] bold; /* Highlight*/
    converseLib.validationFailed(8); /* required field missing*/
  end
   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPLCD > " "  /* Line entered*/
   || FF01M004.YPGCD > " "  /* or type group entered*/
   || FF01M004.XPCCD > " "  /* or category entered*/
   || FF01M004.SYBSTGNB > 0 /* or style group entered*/
   || FF01M004.FF01MBMY > 0) /* or range beg mo & yy entered*/
    FF01S05(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF01044

// Submit SLS/RCPTS/INVNT Rpt Job
Function FF01045()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010451(); /* format production jcl*/
    else
      FF010452(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "045"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01045

// Submit prod JCL FF7901
Function FF010451()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T05.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W05 empty; /* Parameters work area*/

      FF01W05.FF01WYPG = FF01M004.YPGCD; /* Product Type Grp*/
      FF01W05.FF01WXPL = FF01M004.XPLCD; /* Line*/
      FF01W05.FF01WXPC = FF01M004.XPCCD; /* Category*/
      FF01W05.FF01WSGP = FF01M004.SYBSTGNB; /* Style Group*/
      FF01W05.FF01WCMB = FF01M004.FF01MCMB; /* COMB FLAG*/
      FF01W05.FF01WRNG = FFZREC.FFZBEGMO; /* Rpt Range Beg CCYYMM*/
      FF01W05.FF01WRTS = mathLib.round(FF01M004.FF01MRTS / 100, -mathLib.decimals(FF01W05.FF01WRTS)); /* RTS Percent*/
      FF01W05.FF01WMIS = mathLib.round(FF01M004.FF01MMIS / 100, -mathLib.decimals(FF01W05.FF01WMIS)); /* Misc Percent*/

      if (FF01M004.FF01MINM == "S")
        if (FF01M004.YPGCD == "01")
          FF01W05.FF01WINL = "01";
        end
        if (FF01M004.YPGCD == "02")
          FF01W05.FF01WMKP = "02";
        end
        if (FF01M004.YPGCD == "*")
          if (FF01M004.FF01MCMB == "Y")
            FF01W05.FF01WCBN = "00";
          else
            FF01W05.FF01WINL = "01";
            FF01W05.FF01WMKP = "02";
          end
        end
      end
      if (FF01M004.FF01MBGD == "S")
        FF01W05.FF01WBGD = "03";
      end
      if (FF01M004.FF01MCLT == "S")
        FF01W05.FF01WCLT = "04";
      end

      if (FF01M004.FF01MTYP == "S")
        FF01W05.FF01WLVL = "TYPE";
      else
        if (FF01M004.FF01MLIN == "S")
          FF01W05.FF01WLVL = "LINE";
        else
          if (FF01M004.FF01MCTG == "S")
            FF01W05.FF01WLVL = "CATG";
          else
            if (FF01M004.FF01MSGP == "S")
              FF01W05.FF01WLVL = "STGP";
            else
              FF01W05.FF01WLVL = "STYL";
            end
          end
        end
      end

      FF01W01.FF01WIXM = 1;
      if (FF01M004.FF01MXDV[1] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "01";
        FF01WIXM = FF01WIXM + 1;
      end
      if (FF01M004.FF01MXDV[2] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "02";
        FF01WIXM = FF01WIXM + 1;
      end
      if (FF01M004.FF01MXDV[3] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "03";
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W05.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Report Distribution Parameters.*/
      /* ------------------------------------------------------------*/

      if (FF01T05.TARTYPE[FF01WIXT] == "R") /* Parameters statement*/
        FF01W05.FF01WFRM = "20";
        FF01W05.FF01WJOB = "7901";
        TA6REC.TARJCL[TA6INDEX] = FF01T05.TARJCL[FF01WIXT];
        TA6REC.TARTYPE[TA6INDEX] = FF01T05.TARTYPE[FF01WIXT]; /* Type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FF01T05.TARJCL[FF01WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FF01T05.TARTYPE[FF01WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T05.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/
    end

  end /* END-WHILE*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If call successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[4] = "*"; /* Indicate function completed*/

    set FF01M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/
end // end FF010451

// Submit test JCL FF7901
Function FF010452()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T53.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W05 empty; /* Parameters work area*/

      FF01W05.FF01WYPG = FF01M004.YPGCD; /* Product Type Grp*/
      FF01W05.FF01WXPL = FF01M004.XPLCD; /* Line*/
      FF01W05.FF01WXPC = FF01M004.XPCCD; /* Category*/
      FF01W05.FF01WSGP = FF01M004.SYBSTGNB; /* Style Group*/
      FF01W05.FF01WCMB = FF01M004.FF01MCMB; /* COMB FLAG*/
      FF01W05.FF01WRNG = FFZREC.FFZBEGMO; /* Rpt Range Beg CCYYMM*/
      FF01W05.FF01WRTS = mathLib.round(FF01M004.FF01MRTS / 100, -mathLib.decimals(FF01W05.FF01WRTS)); /* RTS Percent*/
      FF01W05.FF01WMIS = mathLib.round(FF01M004.FF01MMIS / 100, -mathLib.decimals(FF01W05.FF01WMIS)); /* Misc Percent*/

      if (FF01M004.FF01MINM == "S")
        if (FF01M004.YPGCD == "01")
          FF01W05.FF01WINL = "01";
        end
        if (FF01M004.YPGCD == "02")
          FF01W05.FF01WMKP = "02";
        end
        if (FF01M004.YPGCD == "*")
          if (FF01M004.FF01MCMB == "Y")
            FF01W05.FF01WCBN = "00";
          else
            FF01W05.FF01WINL = "01";
            FF01W05.FF01WMKP = "02";
          end
        end
      end
      if (FF01M004.FF01MBGD == "S")
        FF01W05.FF01WBGD = "03";
      end
      if (FF01M004.FF01MCLT == "S")
        FF01W05.FF01WCLT = "04";
      end

      if (FF01M004.FF01MTYP == "S")
        FF01W05.FF01WLVL = "TYPE";
      else
        if (FF01M004.FF01MLIN == "S")
          FF01W05.FF01WLVL = "LINE";
        else
          if (FF01M004.FF01MCTG == "S")
            FF01W05.FF01WLVL = "CATG";
          else
            if (FF01M004.FF01MSGP == "S")
              FF01W05.FF01WLVL = "STGP";
            else
              FF01W05.FF01WLVL = "STYL";
            end
          end
        end
      end
      FF01W01.FF01WIXM = 1;
      if (FF01M004.FF01MXDV[1] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "01";
        FF01WIXM = FF01WIXM + 1;
      end
      if (FF01M004.FF01MXDV[2] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "02";
        FF01WIXM = FF01WIXM + 1;
      end
      if (FF01M004.FF01MXDV[3] > " ")
        FF01W05.FF01WXDV[FF01WIXM] = "03";
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W05.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Report Distribution Parameters.*/
      /* ------------------------------------------------------------*/

      if (FF01T53.TARTYPE[FF01WIXT] == "R") /* Parameters statement*/
        FF01W05.FF01WFRM = "20";
        FF01W05.FF01WJOB = "7901";
        TA6REC.TARJCL[TA6INDEX] = FF01T53.TARJCL[FF01WIXT];
        TA6REC.TARTYPE[TA6INDEX] = FF01T53.TARTYPE[FF01WIXT]; /* Type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FF01T53.TARJCL[FF01WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FF01T53.TARTYPE[FF01WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T53.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/
    end

  end /* END-WHILE*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If call successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[4] = "*"; /* Indicate function completed*/

    set FF01M004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/
end // end FF010452

// Prdctn Fcst Special Feat Rpt
Function FF01050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01051(); /* Format and display the map*/

  FF01052(); /* Check attention identifier*/

  FF01053(); /* Reset fields to normal intensity*/

  FF01054(); /* Verify the data that was entered*/

  FF01055(); /* Process valid input request*/


end // end FF01050

// Format and display the map
Function FF01051()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF01M005.YPGCD = FFWREC.YPGCD;
    FF01M005.YPGABRV = FFWREC.YPGABRV;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M005.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M005 alarm; /* Indicate sound alarm*/

  end

  converse FF01M005 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01051

// Check attention identifier
Function FF01052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[5] = "C"; /* Indicate selection cancelled*/

    set FF01M005 initial; /* M006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "052"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01052

// Reset highlighted fields
Function FF01053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M005.XFCCD initialAttributes; /* Special feature code*/
  set FF01M005.YPGCD initialAttributes; /* Type group code*/
  set FF01M005.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M005.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.XFCCD == "?" /* Features list requested*/
   || FF01M005.YPGCD == "?") /* or type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "053"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of features codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.XFCCD == "?") /* Features list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  FEATURES"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXFC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M005.XFCCD = "  "; /* Code*/
      FF01M005.XFCABRV = "  "; /* Abbreviation*/
    else
      FF01M005.XFCCD = XFCTBL.XFCCD[XX0XWPIX]; /* Selected code*/
      FF01M005.XFCABRV = XFCTBL.XFCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M005.XFCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M005.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M005.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M005.YPGCD = "  "; /* Code*/
      FF01M005.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M005.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "053"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01053

// Verify the entered data
Function FF01054()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.XFCCD == " ") /* Feature not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF01M005.XFCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M005.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF01M005.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M005.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF01M005.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M005.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "054"; /* Module identification*/
    set FF01M005.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.XFCCD > " "  /* Feature entered*/
   || FF01M005.YPGCD > " "  /* or type group entered*/
   || FF01M005.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M005.FF01MXMO > 0) /* or range end mo entered*/
    FF01S06(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01054

// Process valid input request
Function FF01055()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010551(); /* format production jcl*/
    else
      FF010552(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "055"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01055

// Submit prod JCL FF810D
Function FF010551()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T06.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W06 empty; /* Parameters work area*/

      FF01W06.XFCCD = FF01M005.XFCCD; /* Feature*/
      FF01W06.YPGCD = FF01M005.YPGCD; /* Type group*/
      FF01W06.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W06.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W06.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T06.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T06.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T06.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[5] = "*"; /* Indicate function completed*/

    set FF01M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010551

// Submit test JCL FF810D
Function FF010552()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T54.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W06 empty; /* Parameters work area*/

      FF01W06.XFCCD = FF01M005.XFCCD; /* Feature*/
      FF01W06.YPGCD = FF01M005.YPGCD; /* Type group*/
      FF01W06.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W06.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W06.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T54.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T54.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T54.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[5] = "*"; /* Indicate function completed*/

    set FF01M005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010552

// Target/Sugg Buy Comparison Rpt
Function FF01060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01061(); /* Format and display the map*/

  FF01062(); /* Check attention identifier*/

  FF01063(); /* Reset fields to normal intensity*/

  FF01064(); /* Verify the data that was entered*/

  FF01065(); /* Process valid input request*/


end // end FF01060

// Format and display the map
Function FF01061()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M006.YPGCD = FFWREC.YPGCD;
    FF01M006.YPGABRV = FFWREC.YPGABRV;

    FF01M006.YSMXDV = FFWREC.YSMXDV;
    FF01M006.YSMSMDSC = FFWREC.YSMSMDSC;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M006.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M006 alarm; /* Indicate sound alarm*/

  end

  converse FF01M006 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01061

// Check attention identifier
Function FF01062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[6] = "C"; /* Indicate selection cancelled*/

    set FF01M006 initial; /* M006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "062"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01062

// Reset highlighted fields
Function FF01063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M006.XPLCD initialAttributes; /* Line*/
  set FF01M006.YPGCD initialAttributes; /* Type group*/
  set FF01M006.YSMXDV initialAttributes; /* Div group*/
  set FF01M006.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M006.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.XPLCD == "?" /* Line code list requested*/
   || FF01M006.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "063"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M006.XPLCD = "  "; /* Code*/
      FF01M006.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M006.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M006.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M006.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M006.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M006.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M006.YPGCD = "  "; /* Code*/
      FF01M006.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M006.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "063"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01063

// Verify the entered data
Function FF01064()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF01M006.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M006.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF01M006.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M006.YSMXDV == " ") /* Div group not entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF01M006.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M006.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF01M006.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M006.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "064"; /* Module identification*/
    set FF01M006.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.YPGCD > " "  /* Type group entered*/
   || FF01M006.XPLCD > " "  /* or line entered*/
   || FF01M006.YSMXDV > " " /* or div group entered*/
   || FF01M006.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M006.FF01MXMO > 0) /* or range end mo entered*/
    FF01S07(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01064

// Process valid input request
Function FF01065()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010651(); /* format production jcl*/
    else
      FF010652(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "065"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01065

// Submit prod JCL FF8201
Function FF010651()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T07.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W07 empty; /* Parameters work area*/

      FF01W07.YPGCD = FF01M006.YPGCD; /* Type group*/
      FF01W07.XPLCD = FF01M006.XPLCD; /* Line*/
      FF01W07.YSMXDV = FF01M006.YSMXDV; /* Div group*/

      FF01W07.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W07.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T07.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T07.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T07.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[6] = "*"; /* Indicate function completed*/

    set FF01M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010651

// Submit test JCL FF8201
Function FF010652()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T55.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W07 empty; /* Parameters work area*/

      FF01W07.YPGCD = FF01M006.YPGCD; /* Type group*/
      FF01W07.XPLCD = FF01M006.XPLCD; /* Line*/
      FF01W07.YSMXDV = FF01M006.YSMXDV; /* Div group*/

      FF01W07.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W07.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T55.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T55.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T55.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[6] = "*"; /* Indicate function completed*/

    set FF01M006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010652

// Preset Prdctn Plan Rpt
Function FF01070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01071(); /* Format and display the map*/

  FF01072(); /* Check attention identifier*/

  FF01073(); /* Reset fields to normal intensity*/

  FF01074(); /* Verify the data that was entered*/

  FF01075(); /* Process valid input request*/


end // end FF01070

// Format and display the map
Function FF01071()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M007.YPGCD = FFWREC.YPGCD;
    FF01M007.YPGABRV = FFWREC.YPGABRV;

    FF01M007.YSMXDV = FFWREC.YSMXDV;
    FF01M007.YSMSMDSC = FFWREC.YSMSMDSC;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M007.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M007 alarm; /* Indicate sound alarm*/

  end

  converse FF01M007 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01071

// Check attention identifier
Function FF01072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[7] = "C"; /* Indicate selection cancelled*/

    set FF01M007 initial; /* M008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "072"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01072

// Reset highlighted fields
Function FF01073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M007.XPCCD initialAttributes; /* Category*/
  set FF01M007.XPLCD initialAttributes; /* Line*/
  set FF01M007.YPGCD initialAttributes; /* Type group*/
  set FF01M007.YSMXDV initialAttributes; /* Div group*/
  set FF01M007.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M007.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPCCD == "?" /* Category list requested*/
   || FF01M007.XPLCD == "?" /* Line code list requested*/
   || FF01M007.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "073"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M007.XPCCD = "  "; /* Code*/
      FF01M007.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M007.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M007.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M007.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M007.XPLCD = "  "; /* Code*/
      FF01M007.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M007.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M007.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M007.XPLCD cursor; /* Establish cursor position*/
  end

   /* ???????*/
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M007.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M007.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M007.YPGCD = "  "; /* Code*/
      FF01M007.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M007.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "073"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01073

// Verify the entered data
Function FF01074()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPLCD == " " /* Line not entered*/
   && FF01M007.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF01M007.XPCCD cursor, bold; /* Highlight*/
    set FF01M007.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'please enter one'*/
  end

  if (FF01M007.YPGCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF01M007.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M007.YSMXDV == "  ") /* Div group not entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF01M007.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M007.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF01M007.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M007.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "074"; /* Module identification*/
    set FF01M007.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPCCD > " "  /* Category entered*/
   || FF01M007.XPLCD > " "  /* or line entered*/
   || FF01M007.YPGCD > " "  /* or type group entered*/
   || FF01M007.YSMXDV > " " /* or div group entered*/
   || FF01M007.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M007.FF01MXMO > 0) /* or range end mo entered*/
    FF01S08(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01074

// Process valid input request
Function FF01075()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010751(); /* format production jcl*/
    else
      FF010752(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "075"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01075

// Submit prod JCL FF8301
Function FF010751()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T08.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W08 empty; /* Parameters work area*/

      if (FF01M007.XPCCD != " ") /* Category level*/
        FF01W08.XPCCD = FF01M007.XPCCD; /* Category*/
      else
        FF01W08.XPLCD = FF01M007.XPLCD; /* Line*/
      end

      FF01W08.YPGCD = FF01M007.YPGCD; /* Type group*/
      FF01W08.YSMXDV = FF01M007.YSMXDV; /* Div group*/
      FF01W08.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W08.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W08.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T08.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T08.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T08.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[7] = "*"; /* Indicate function completed*/

    set FF01M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010751

// Submit test JCL FF8301
Function FF010752()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T56.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W08 empty; /* Parameters work area*/

      if (FF01M007.XPCCD != " ") /* Category level*/
        FF01W08.XPCCD = FF01M007.XPCCD; /* Category*/
      else
        FF01W08.XPLCD = FF01M007.XPLCD; /* Line*/
      end

      FF01W08.YPGCD = FF01M007.YPGCD; /* Type group*/
      FF01W08.YSMXDV = FF01M007.YSMXDV; /* Div group*/
      FF01W08.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W08.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W08.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T56.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T56.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T56.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[7] = "*"; /* Indicate function completed*/

    set FF01M007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010752

// Ord Minimum Report
Function FF01080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01081(); /* Format and display the map*/

  FF01082(); /* Check attention identifier*/

  FF01083(); /* Reset fields to normal intensity*/

  FF01084(); /* Verify the data that was entered*/

  FF01085(); /* Process valid input request*/


end // end FF01080

// Format and display the map
Function FF01081()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M008.YPGCD = FFWREC.YPGCD;
    FF01M008.YPGABRV = FFWREC.YPGABRV;

    FF01M008.YSMXDV = FFWREC.YSMXDV;
    FF01M008.YSMSMDSC = FFWREC.YSMSMDSC;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M008.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M008 alarm; /* Indicate sound alarm*/

  end

  converse FF01M008 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01081

// Check attention identifier
Function FF01082()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[08] = "C"; /* Indicate selection cancelled*/

    set FF01M008 initial; /* M008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "082"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01082

// Reset highlighted fields
Function FF01083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M008.FF01MSEQ[1] initialAttributes; /* Sequence by*/
  set FF01M008.FF01MSEQ[2] initialAttributes; /* Sequence by*/
  set FF01M008.XPCCD initialAttributes; /* Category*/
  set FF01M008.XPLCD initialAttributes; /* Line*/
  set FF01M008.YPGCD initialAttributes; /* Type group*/
  set FF01M008.YSMXDV initialAttributes; /* Div group*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPCCD == "?" /* Category list requested*/
   || FF01M008.XPLCD == "?" /* Line code list requested*/
   || FF01M008.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "083"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M008.XPCCD = "  "; /* Code*/
      FF01M008.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M008.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M008.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M008.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M008.XPLCD = "  "; /* Code*/
      FF01M008.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M008.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M008.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M008.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M008.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M008.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M008.YPGCD = "  "; /* Code*/
      FF01M008.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M008.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "083"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01083

// Verify the entered data
Function FF01084()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPLCD == " " /* Line not entered*/
   && FF01M008.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF01M008.XPCCD cursor, bold; /* Highlight*/
    set FF01M008.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'please enter one'*/
  end

  if (FF01M008.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF01M008.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M008.YSMXDV == " ") /* Div group not entered*/
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF01M008.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 3)
    if (FF01M008.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "084"; /* Module identification*/
        set FF01M008.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M008.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "084"; /* Module identification*/
        set FF01M008.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "084"; /* Module identification*/
    set FF01M008.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPCCD > " " /* Category entered*/
   || FF01M008.XPLCD > " " /* or line entered*/
   || FF01M008.YPGCD > " " /* or type group entered*/
   || FF01M008.YSMXDV > " ") /* or div group entered*/
    FF01S10(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01084

// Process valid input request
Function FF01085()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "085"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M008.FF01MSEQ[1] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010851(); /* format production jcl*/
    else
      FF010853(); /* format development jcl*/
    end
  end

  if (FF01M008.FF01MSEQ[2] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010852(); /* format production jcl*/
    else
      FF010854(); /* format development jcl*/
    end
  end

end // end FF01085

// Submit prod JCL FF8401
Function FF010851()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T09.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W09 empty; /* Parameters work area*/

      FF01W09.XPCCD = FF01M008.XPCCD; /* Category*/
      FF01W09.XPLCD = FF01M008.XPLCD; /* Line*/
      FF01W09.YPGCD = FF01M008.YPGCD; /* Type group*/
      FF01W09.YSMXDV = FF01M008.YSMXDV; /* Div group*/

      TA6REC.TARJCL[TA6INDEX] = FF01W09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T09.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T09.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T09.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0851"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[08] = "*"; /* Indicate function completed*/

    set FF01M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010851

// Submit prod JCL FF8501
Function FF010852()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T1O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W10 empty; /* Parameters work area*/

      FF01W10.XPCCD = FF01M008.XPCCD; /* Category*/
      FF01W10.XPLCD = FF01M008.XPLCD; /* Line*/
      FF01W10.YPGCD = FF01M008.YPGCD; /* Type group*/
      FF01W10.YSMXDV = FF01M008.YSMXDV; /* Div group*/

      TA6REC.TARJCL[TA6INDEX] = FF01W10.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T1O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T1O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T1O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0852"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[08] = "*"; /* Indicate function completed*/

    set FF01M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010852

// Submit test JCL FF8401
Function FF010853()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T57.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W09 empty; /* Parameters work area*/

      FF01W09.XPCCD = FF01M008.XPCCD; /* Category*/
      FF01W09.XPLCD = FF01M008.XPLCD; /* Line*/
      FF01W09.YPGCD = FF01M008.YPGCD; /* Type group*/
      FF01W09.YSMXDV = FF01M008.YSMXDV; /* Div group*/

      TA6REC.TARJCL[TA6INDEX] = FF01W09.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T57.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T57.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T57.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0853"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[08] = "*"; /* Indicate function completed*/

    set FF01M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010853

// Submit test JCL FF8501
Function FF010854()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T58.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W10 empty; /* Parameters work area*/

      FF01W10.XPCCD = FF01M008.XPCCD; /* Category*/
      FF01W10.XPLCD = FF01M008.XPLCD; /* Line*/
      FF01W10.YPGCD = FF01M008.YPGCD; /* Type group*/
      FF01W10.YSMXDV = FF01M008.YSMXDV; /* Div group*/

      TA6REC.TARJCL[TA6INDEX] = FF01W10.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T58.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T58.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T58.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "0854"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[08] = "*"; /* Indicate function completed*/

    set FF01M008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010854

// Makeups Adjustment Report
Function FF01090()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01091(); /* Format and display the map*/

  FF01092(); /* Check attention identifier*/

  FF01093(); /* Reset fields to normal intensity*/

  FF01094(); /* Verify the data that was entered*/

  FF01095(); /* Process valid input request*/


end // end FF01090

// Format and display the map
Function FF01091()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M009.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M009.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M009.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M009.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M009.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M009.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M009.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M009 alarm; /* Indicate sound alarm*/

  end

  converse FF01M009 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01091

// Check attention identifier
Function FF01092()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[09] = "C"; /* Indicate selection cancelled*/

    set FF01M009 initial; /* M009 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "092"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01092

// Reset highlighted fields
Function FF01093()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M009.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M009.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  return; /* Return to previous process*/


end // end FF01093

// Verify the entered data
Function FF01094()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M009.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "094"; /* Module identification*/
    set FF01M009.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M009.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "094"; /* Module identification*/
    set FF01M009.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M009.FF01MBMO > 0 /* If range beg mo entered*/
   || FF01M009.FF01MXMO > 0) /* or range end mo entered*/
    FF01S13(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01094

// Process valid input request
Function FF01095()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF010951(); /* format production jcl*/
    else
      FF010952(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "095"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01095

// Submit prod JCL FF8801
Function FF010951()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T13.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W13 empty; /* Parameters work area*/

      FF01W13.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W13.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W13.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T13.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T13.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T13.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "095"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[09] = "*"; /* Indicate function completed*/

    set FF01M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010951

// Submit test JCL FF8801
Function FF010952()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T61.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W13 empty; /* Parameters work area*/

      FF01W13.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W13.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W13.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T61.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T61.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T61.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "095"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[09] = "*"; /* Indicate function completed*/

    set FF01M009 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF010952

// NIL Adjustment Report
Function FF01100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01101(); /* Format and display the map*/

  FF01102(); /* Check attention identifier*/

  FF01103(); /* Reset fields to normal intensity*/

  FF01104(); /* Verify the data that was entered*/

  FF01105(); /* Process valid input request*/


end // end FF01100

// Format and display the map
Function FF01101()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M010.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M010 alarm; /* Indicate sound alarm*/

  end

  converse FF01M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01101

// Check attention identifier
Function FF01102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[10] = "C"; /* Indicate selection cancelled*/

    set FF01M010 initial; /* M010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "102"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01102

// Reset highlighted fields
Function FF01103()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M010.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M010.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  return; /* Return to previous process*/


end // end FF01103

// Verify the entered data
Function FF01104()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M010.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "104"; /* Module identification*/
    set FF01M010.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M010.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "104"; /* Module identification*/
    set FF01M010.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M010.FF01MBMO > 0 /* If range beg mo entered*/
   || FF01M010.FF01MXMO > 0) /* or range end mo entered*/
    FF01S14(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01104

// Process valid input request
Function FF01105()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011051(); /* format production jcl*/
    else
      FF011052(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "105"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01105

// Submit Prod JCL FF8901
Function FF011051()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T14.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W14 empty; /* Parameters work area*/

      FF01W14.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W14.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W14.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T14.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T14.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T14.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[10] = "*"; /* Indicate function completed*/

    set FF01M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011051

// Submit test JCL FF8901
Function FF011052()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T62.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W14 empty; /* Parameters work area*/

      FF01W14.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W14.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W14.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T62.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T62.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T62.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[10] = "*"; /* Indicate function completed*/

    set FF01M010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011052

// suggested buy report
Function FF01110()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01111(); /* Format and display the map*/

  FF01112(); /* Check attention identifier*/

  FF01113(); /* Reset fields to normal intensity*/

  FF01114(); /* Verify the data that was entered*/

  FF01115(); /* Process valid input request*/


end // end FF01110

// Format and display the map
Function FF01111()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M011.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M011.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M011.YPGCD = FFWREC.YPGCD;
    FF01M011.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M011.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M011 alarm; /* Indicate sound alarm*/

  end

  converse FF01M011 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01111

// Check attention identifier
Function FF01112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[11] = "C"; /* Indicate selection cancelled*/

    set FF01M011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "112"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01112

// Reset highlighted fields
Function FF01113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M011.FF01MSEQ[1] initialAttributes; /* sequence by*/
  set FF01M011.FF01MSEQ[2] initialAttributes; /* sequence by*/
  set FF01M011.XPCCD initialAttributes; /* Category*/
  set FF01M011.XPLCD initialAttributes; /* Line*/
  set FF01M011.YPGCD initialAttributes; /* Type group*/
  set FF01M011.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M011.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPCCD == "?" /* Category list requested*/
   || FF01M011.XPLCD == "?" /* Line code list requested*/
   || FF01M011.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "113"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M011.XPCCD = "  "; /* Code*/
      FF01M011.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M011.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M011.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M011.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M011.XPLCD = "  "; /* Code*/
      FF01M011.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M011.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M011.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M011.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M011.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M011.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M011.YPGCD = "  "; /* Code*/
      FF01M011.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M011.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "113"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01113

// Verify the entered data
Function FF01114()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPLCD == " " /* Line not entered*/
   && FF01M011.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF01M011.XPCCD cursor, bold; /* Highlight*/
    set FF01M011.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
  end

  if (FF01M011.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF01M011.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M011.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF01M011.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M011.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF01M011.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end


   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 3)
    if (FF01M011.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "114"; /* Module identification*/
        set FF01M011.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M011.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "114"; /* Module identification*/
        set FF01M011.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "114"; /* Module identification*/
    set FF01M011.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPCCD > " "  /* Category entered*/
   || FF01M011.XPLCD > " "  /* or line entered*/
   || FF01M011.YPGCD > " "  /* or type group entered*/
   || FF01M011.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M011.FF01MXMO > 0) /* or range end mo entered*/
    FF01S17(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01114

// Process valid input request
Function FF01115()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "115"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M011.FF01MSEQ[1] == "S") /* category report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011151(); /* format production jcl*/
    else
      FF011153(); /* format development jcl*/
    end
  end

  if (FF01M011.FF01MSEQ[2] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011152(); /* format production jcl*/
    else
      FF011154(); /* format development jcl*/
    end
  end

end // end FF01115

// Submit Prod JCL FF9401
Function FF011151()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T19.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W19 empty; /* Parameters work area*/

      FF01W19.YSMXDV = "10"; /* Div code*/
      FF01W19.XPLCD = FF01M011.XPLCD; /* Line*/
      FF01W19.YPGCD = FF01M011.YPGCD; /* Type group*/

      FF01W19.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W19.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W19.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T19.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T19.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T19.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[11] = "*"; /* Indicate function completed*/

    set FF01M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011151

// Submit prod JCL FF9201
Function FF011152()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T17.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W17 empty; /* Parameters work area*/

      FF01W17.XPCCD = FF01M011.XPCCD; /* Category*/
      FF01W17.XPLCD = FF01M011.XPLCD; /* Line*/
      FF01W17.YPGCD = FF01M011.YPGCD; /* Type group*/

      FF01W17.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W17.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W17.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T17.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T17.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T17.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[11] = "*"; /* Indicate function completed*/

    set FF01M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011152

// Submit test JCL FF9401
Function FF011153()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T67.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W19 empty; /* Parameters work area*/

      FF01W19.YSMXDV = "10"; /* Div code*/
      FF01W19.XPLCD = FF01M011.XPLCD; /* Line*/
      FF01W19.YPGCD = FF01M011.YPGCD; /* Type group*/

      FF01W19.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W19.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W19.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T67.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T67.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T67.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[11] = "*"; /* Indicate function completed*/

    set FF01M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011153

// Submit test JCL FF9201
Function FF011154()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T65.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W17 empty; /* Parameters work area*/

      FF01W17.XPCCD = FF01M011.XPCCD; /* Category*/
      FF01W17.XPLCD = FF01M011.XPLCD; /* Line*/
      FF01W17.YPGCD = FF01M011.YPGCD; /* Type group*/

      FF01W17.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W17.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W17.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T65.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T65.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T65.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1154"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[11] = "*"; /* Indicate function completed*/

    set FF01M011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011154

// modeled Prdctn Forecast
Function FF01120()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01121(); /* Format and display the map*/

  FF01122(); /* Check attention identifier*/

  FF01123(); /* Reset fields to normal intensity*/

  FF01124(); /* Verify the data that was entered*/

  FF01125(); /* Process valid input request*/


end // end FF01120

// Format and display the map
Function FF01121()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M012.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M012.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M012.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/


  if (FFWREC.XXXMSGNO == 0) /* Message to display*/
    FF01M012.YPGCD = FFWREC.YPGCD; /* default type*/
    FF01M012.YPGABRV = FFWREC.YPGABRV; /* default type name*/
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M012.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M012 alarm; /* Indicate sound alarm*/

  end

  converse FF01M012 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01121

// Check attention identifier
Function FF01122()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[12] = "C"; /* Indicate selection cancelled*/

    set FF01M012 initial; /* m012 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "122"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01122

// Reset highlighted fields
Function FF01123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M012.FF01MCPG initialAttributes; /* combine type groups*/
  set FF01M012.FF01MSEQ[1] initialAttributes; /* sequence by*/
  set FF01M012.FF01MSEQ[2] initialAttributes; /* sequence by*/
  set FF01M012.FF01MBMO initialAttributes; /* begin month*/
  set FF01M012.FF01MXMO initialAttributes; /* end   month*/
  set FF01M012.XPCCD initialAttributes; /* Category*/
  set FF01M012.XPLCD initialAttributes; /* Line*/
  set FF01M012.YPGCD initialAttributes; /* Type group*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPCCD == "?" /* Category list requested*/
   || FF01M012.XPLCD == "?" /* Line code list requested*/
   || FF01M012.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "123"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M012.XPCCD = "  "; /* Code*/
      FF01M012.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M012.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M012.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M012.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M012.XPLCD = "  "; /* Code*/
      FF01M012.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M012.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M012.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M012.XPLCD cursor; /* Establish cursor position*/
  end

   /* ???????*/
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M012.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M012.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M012.YPGCD = "  "; /* Code*/
      FF01M012.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M012.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "123"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01123

// Verify the entered data
Function FF01124()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPLCD == " " /* Line not entered*/
   && FF01M012.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.XPCCD cursor, bold; /* Highlight*/
    set FF01M012.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'please enter one'*/
  end

  if (FF01M012.YPGCD == " ") /* Type not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M012.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M012.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end
   /* Edit combine type group flag*/

  if (FF01M012.FF01MCPG == "Y" /* combine type groups*/
   || FF01M012.FF01MCPG == "N") /**/
    /* NEXT SENTENCE*/
  else
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.FF01MCPG cursor, bold; /* Highlight*/
    converseLib.validationFailed(427); /* Indicate missing*/
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 3)
    if (FF01M012.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "124"; /* Module identification*/
        set FF01M012.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M012.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "124"; /* Module identification*/
        set FF01M012.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "124"; /* Module identification*/
    set FF01M012.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPCCD > " "  /* Category entered*/
   || FF01M012.XPLCD > " "  /* or line entered*/
   || FF01M012.YPGCD > " "  /* or type group entered*/
   || FF01M012.FF01MBMO > 0 /* begin mo entered*/
   || FF01M012.FF01MXMO > 0) /* end month entered*/
    FF01S18(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01124

// Process valid input request
Function FF01125()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "125"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M012.FF01MSEQ[1] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011251(); /* format production jcl*/
    else
      FF011253(); /* format development jcl*/
    end
  end

  if (FF01M012.FF01MSEQ[2] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011252(); /* format production jcl*/
    else
      FF011254(); /* format development jcl*/
    end
  end

end // end FF01125

// Submit prod FF9311 JCL
Function FF011251()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T12.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W12 empty; /* Parameters work area*/

      if (FF01M012.XPCCD != " ") /* Category level*/
        FF01W12.XPCCD = FF01M012.XPCCD; /* Category*/
      else
        FF01W12.XPLCD = FF01M012.XPLCD; /* Line*/
      end

      FF01W12.YPGCD = FF01M012.YPGCD; /* Type group*/
      FF01W12.FF01WCPG = FF01M012.FF01MCPG; /* Combine type groups*/
      FF01W12.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W12.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T12.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T12.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T12.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1251"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[12] = "*"; /* Indicate function completed*/

    set FF01M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011251

// Submit prod FF9301 JCL
Function FF011252()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T18.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W18 empty; /* Parameters work area*/

      if (FF01M012.XPCCD != " ") /* Category level*/
        FF01W18.XPCCD = FF01M012.XPCCD; /* Category*/
      else
        FF01W18.XPLCD = FF01M012.XPLCD; /* Line*/
      end

      FF01W18.YPGCD = FF01M012.YPGCD; /* Type group*/
      FF01W18.FF01WCPG = FF01M012.FF01MCPG; /* Combine type groups*/
      FF01W18.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W18.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W18.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T18.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T18.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T18.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[12] = "*"; /* Indicate function completed*/

    set FF01M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011252

// Submit test FF9311 JCL
Function FF011253()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T6O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W12 empty; /* Parameters work area*/

      if (FF01M012.XPCCD != " ") /* Category level*/
        FF01W12.XPCCD = FF01M012.XPCCD; /* Category*/
      else
        FF01W12.XPLCD = FF01M012.XPLCD; /* Line*/
      end

      FF01W12.YPGCD = FF01M012.YPGCD; /* Type group*/
      FF01W12.FF01WCPG = FF01M012.FF01MCPG; /* Combine type groups*/
      FF01W12.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W12.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W12.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T6O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T6O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T6O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1253"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[12] = "*"; /* Indicate function completed*/

    set FF01M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011253

// Submit test JCL FF9301
Function FF011254()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T66.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W18 empty; /* Parameters work area*/

      if (FF01M012.XPCCD != " ") /* Category level*/
        FF01W18.XPCCD = FF01M012.XPCCD; /* Category*/
      else
        FF01W18.XPLCD = FF01M012.XPLCD; /* Line*/
      end

      FF01W18.YPGCD = FF01M012.YPGCD; /* Type group*/
      FF01W18.FF01WCPG = FF01M012.FF01MCPG; /* Combine type groups*/
      FF01W18.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W18.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W18.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T66.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T66.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T66.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1254"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[12] = "*"; /* Indicate function completed*/

    set FF01M012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011254

// Submitted production fcst rpt
Function FF01130()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01131(); /* Format and display the map*/

  FF01132(); /* Check attention identifier*/

  FF01133(); /* Reset fields to normal intensity*/

  FF01134(); /* Verify the data that was entered*/

  FF01135(); /* Process valid input request*/


end // end FF01130

// Format and display the map
Function FF01131()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M013.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M013.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M013.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M013.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M013.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M013.YPGCD = FFWREC.YPGCD;
    FF01M013.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M013.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M013 alarm; /* Indicate sound alarm*/

  end

  converse FF01M013 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01131

// Check attention identifier
Function FF01132()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[13] = "C"; /* Indicate selection cancelled*/

    set FF01M013 initial; /* m013 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "132"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01132

// Reset highlighted fields
Function FF01133()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M013.XPCCD initialAttributes; /* Category*/
  set FF01M013.XPLCD initialAttributes; /* Line*/
  set FF01M013.YPGCD initialAttributes; /* Type group*/
  set FF01M013.FF01MSMO initialAttributes; /* Submit month*/
  set FF01M013.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M013.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPCCD == "?" /* Category list requested*/
   || FF01M013.XPLCD == "?" /* Line code list requested*/
   || FF01M013.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "133"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M013.XPCCD = "  "; /* Code*/
      FF01M013.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M013.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M013.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M013.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M013.XPLCD = "  "; /* Code*/
      FF01M013.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M013.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M013.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M013.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M013.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M013.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M013.YPGCD = "  "; /* Code*/
      FF01M013.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M013.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "133"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01133

// Verify the entered data
Function FF01134()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPLCD == " " /* Line not entered*/
   && FF01M013.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF01M013.XPCCD cursor, bold; /* Highlight*/
    set FF01M013.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
  end

  if (FF01M013.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF01M013.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M013.FF01MSMO == 0) /* Submit month not entered*/
    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF01M013.FF01MSMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M013.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF01M013.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M013.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "134"; /* Module identification*/
    set FF01M013.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPCCD > " "  /* Category entered*/
   || FF01M013.XPLCD > " "  /* or line entered*/
   || FF01M013.YPGCD > " "  /* or type group entered*/
   || FF01M013.FF01MSMO > 0 /* or submit month entered*/
   || FF01M013.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M013.FF01MXMO > 0) /* or range end mo entered*/
    FF01S50(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01134

// Process valid input request
Function FF01135()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011351(); /* format production jcl*/
    else
      FF011352(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "135"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01135

// Submit prod JCL FF9501
Function FF011351()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T2O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W20 empty; /* Parameters work area*/

      FF01W20.XPCCD = FF01M013.XPCCD; /* Category*/
      FF01W20.XPLCD = FF01M013.XPLCD; /* Line*/
      FF01W20.YPGCD = FF01M013.YPGCD; /* Type group*/

      FF01W20.FF01WSMO = FF01W01.FF01WDTS; /* Submit month*/
      FF01W20.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W20.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W20.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T2O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T2O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T2O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[13] = "*"; /* Indicate function completed*/

    set FF01M013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011351

// Submit test JCL FF9501
Function FF011352()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T68.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W20 empty; /* Parameters work area*/

      FF01W20.XPCCD = FF01M013.XPCCD; /* Category*/
      FF01W20.XPLCD = FF01M013.XPLCD; /* Line*/
      FF01W20.YPGCD = FF01M013.YPGCD; /* Type group*/

      FF01W20.FF01WSMO = FF01W01.FF01WDTS; /* Submit month*/
      FF01W20.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W20.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W20.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T68.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T68.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T68.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[13] = "*"; /* Indicate function completed*/

    set FF01M013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/

end // end FF011352

// inv position with sugg buy
Function FF01140()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01141(); /* Format and display the map*/

  FF01142(); /* Check attention identifier*/

  FF01143(); /* Reset fields to normal intensity*/

  FF01144(); /* Verify the data that was entered*/

  FF01145(); /* Process valid input request*/


end // end FF01140

// Format and display the map
Function FF01141()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M014.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M014.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M014.YPGCD = FFWREC.YPGCD;
    FF01M014.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M014.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M014 alarm; /* Indicate sound alarm*/

  end

  converse FF01M014 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01141

// Check attention identifier
Function FF01142()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[14] = "C"; /* Indicate selection cancelled*/

    set FF01M014 initial; /* M014 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "142"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01142

// Reset highlighted fields
Function FF01143()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M014.FF01MSEQ[1] initialAttributes; /* Sequence by*/
  set FF01M014.FF01MSEQ[2] initialAttributes; /* Sequence by*/
  set FF01M014.FF01MSEQ[3] initialAttributes; /* Sequence by*/
  set FF01M014.XPCCD initialAttributes; /* Category*/
  set FF01M014.XPLCD initialAttributes; /* Line*/
  set FF01M014.YPGCD initialAttributes; /* Type group*/
  set FF01M014.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M014.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPCCD == "?" /* Category list requested*/
   || FF01M014.XPLCD == "?" /* Line code list requested*/
   || FF01M014.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "143"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M014.XPCCD = "  "; /* Code*/
      FF01M014.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M014.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M014.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M014.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M014.XPLCD = "  "; /* Code*/
      FF01M014.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M014.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M014.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M014.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M014.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M014.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M014.YPGCD = "  "; /* Code*/
      FF01M014.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M014.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "143"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01143

// Verify the entered data
Function FF01144()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPLCD == " " /* Line not entered*/
   && FF01M014.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF01M014.XPCCD cursor, bold; /* Highlight*/
    set FF01M014.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
  end

  if (FF01M014.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF01M014.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M014.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF01M014.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M014.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF01M014.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 4)
    if (FF01M014.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "144"; /* Module identification*/
        set FF01M014.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M014.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "144"; /* Module identification*/
        set FF01M014.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "144"; /* Module identification*/
    set FF01M014.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPCCD > " "  /* Category entered*/
   || FF01M014.XPLCD > " "  /* or line entered*/
   || FF01M014.YPGCD > " "  /* or type group entered*/
   || FF01M014.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M014.FF01MXMO > 0) /* or range end mo entered*/
    FF01S12(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01144

// Process valid input request
Function FF01145()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "145"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M014.FF01MSEQ[1] == "S") /* category  report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011451(); /* format production jcl*/
    else
      FF011454(); /* format development jcl*/
    end
  end

  if (FF01M014.FF01MSEQ[2] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011452(); /* format production jcl*/
    else
      FF011455(); /* format development jcl*/
    end
  end

  if (FF01M014.FF01MSEQ[3] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011453(); /* format production jcl*/
    else
      FF011456(); /* format development jcl*/
    end
  end

end // end FF01145

// Submit prod JCL FF9111
Function FF011451()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T22.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W22 empty; /* Parameters work area*/

      FF01W22.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W22.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W22.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W22.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W22.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W22.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T22.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T22.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T22.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1451"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011451

// Submit prod JCL FF9161
Function FF011452()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T3O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W30 empty; /* Parameters work area*/

      FF01W30.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W30.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W30.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W30.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W30.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W30.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T3O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T3O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T3O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1452"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011452

// Submit prod JCL FF9101
Function FF011453()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T16.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W16 empty; /* Parameters work area*/

      FF01W16.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W16.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W16.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W16.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W16.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W16.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T16.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T16.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T16.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1453"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011453

// Submit test JCL FF9111
Function FF011454()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T7O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W22 empty; /* Parameters work area*/

      FF01W22.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W22.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W22.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W22.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W22.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W22.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T7O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T7O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T7O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1454"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011454

// Submittest JCL FF9161
Function FF011455()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T78.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W30 empty; /* Parameters work area*/

      FF01W30.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W30.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W30.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W30.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W30.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W30.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T78.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T78.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T78.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1455"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011455

// Submit test JCL FF9101
Function FF011456()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T64.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W16 empty; /* Parameters work area*/

      FF01W16.XPCCD = FF01M014.XPCCD; /* Category*/
      FF01W16.XPLCD = FF01M014.XPLCD; /* Line*/
      FF01W16.YPGCD = FF01M014.YPGCD; /* Type group*/

      FF01W16.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W16.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W16.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T64.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T64.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T64.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1456"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[14] = "*"; /* Indicate function completed*/

    set FF01M014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011456

// inv position with prod fcst
Function FF01150()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01151(); /* Format and display the map*/

  FF01152(); /* Check attention identifier*/

  FF01153(); /* Reset fields to normal intensity*/

  FF01154(); /* Verify the data that was entered*/

  FF01155(); /* Process valid input request*/


end // end FF01150

// format and display map
Function FF01151()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M015.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M015.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M015.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M015.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M015.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M015.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M015.YPGCD = FFWREC.YPGCD;
    FF01M015.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M015.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M015 alarm; /* Indicate sound alarm*/

  end

  converse FF01M015 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01151

// Check attention identifier
Function FF01152()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[15] = "C"; /* Indicate selection cancelled*/

    set FF01M015 initial; /* M015 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "152"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01152

// Reset highlighted fields
Function FF01153()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M015.FF01MSEQ[1] initialAttributes; /* Sequence by*/
  set FF01M015.FF01MSEQ[2] initialAttributes; /* Sequence by*/
  set FF01M015.FF01MSEQ[3] initialAttributes; /* Sequence by*/
  set FF01M015.XPCCD initialAttributes; /* Category*/
  set FF01M015.XPLCD initialAttributes; /* Line*/
  set FF01M015.YPGCD initialAttributes; /* Type group*/
  set FF01M015.FF01SES1 initialAttributes; /* Season Code 1*/
  set FF01M015.FF01SES2 initialAttributes; /* Season Code 2*/
  set FF01M015.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M015.FF01MXMO initialAttributes; /* Range end month*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPCCD == "?" /* Category list requested*/
   || FF01M015.XPLCD == "?" /* Line code list requested*/
   || FF01M015.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "153"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M015.XPCCD = "  "; /* Code*/
      FF01M015.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M015.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M015.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M015.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M015.XPLCD = "  "; /* Code*/
      FF01M015.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M015.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M015.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M015.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M015.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M015.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M015.YPGCD = "  "; /* Code*/
      FF01M015.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M015.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "153"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FF01153

// Verify the entered data
Function FF01154()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPLCD == " " /* Line not entered*/
   && FF01M015.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF01M015.XPCCD cursor, bold; /* Highlight*/
    set FF01M015.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
  end

  if (FF01M015.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF01M015.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  FF01W01.FF01W-DATE-ENTERED = "N"; /* Date Range Entered ?*/
  FF01W01.FF01W-SESN-ENTERED = "N"; /* Season Code Entered ?*/

  if (FF01M015.FF01SES1 != "  "
   || FF01M015.FF01SES2 != "  ")
    FF01W01.FF01W-SESN-ENTERED = "Y";
  end

  if (FF01M015.FF01MXMO != 0
   || FF01M015.FF01MBMO != 0)
    FF01W01.FF01W-DATE-ENTERED = "Y";
  end

  if (FF01W01.FF01W-DATE-ENTERED == "N"
   && FF01W01.FF01W-SESN-ENTERED == "N")
    FFWREC.XXXMODID = "154";
    converseLib.validationFailed(535);
    set FF01M015.FF01SES1 cursor, bold;
  end

  if (FF01W01.FF01W-DATE-ENTERED == "Y"
   && FF01W01.FF01W-SESN-ENTERED == "Y")
    FFWREC.XXXMODID = "154";
    converseLib.validationFailed(536);
    set FF01M015.FF01SES1 cursor, bold;
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 4)
    if (FF01M015.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "154"; /* Module identification*/
        set FF01M015.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M015.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "154"; /* Module identification*/
        set FF01M015.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "154"; /* Module identification*/
    set FF01M015.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPCCD > " "    /* Category entered*/
   || FF01M015.XPLCD > " "    /* or line entered*/
   || FF01M015.YPGCD > " "    /* or type group entered*/
   || FF01M015.FF01MBMO > 0   /* or range beg mo entered*/
   || FF01M015.FF01MXMO > 0   /* or range end mo entered*/
   || FF01M015.FF01SES1 > " " /* or Season 1 entered*/
   || FF01M015.FF01SES2 > " ") /* or Season 2 entered*/
    FF01S24(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01154

// Process valid input request
Function FF01155()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "155"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M015.FF01MSEQ[1] == "S") /* category  report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011551(); /* format production jcl*/
    else
      FF011554(); /* format development jcl*/
    end
  end

  if (FF01M015.FF01MSEQ[2] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011552(); /* format production jcl*/
    else
      FF011555(); /* format development jcl*/
    end
  end

  if (FF01M015.FF01MSEQ[3] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011553(); /* format production jcl*/
    else
      FF011556(); /* format development jcl*/
    end
  end

end // end FF01155

// Submit prod JCL FF9131
Function FF011551()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T23.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W23 empty; /* Parameters work area*/

      FF01W23.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W23.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W23.YPGCD = FF01M015.YPGCD; /* Type group*/
      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W23.FF01W-SESN1 = FF01M015.FF01SES1; /* Season Code 1*/
        FF01W23.FF01W-SESN2 = FF01M015.FF01SES2; /* Season Code 1*/
      else
        FF01W23.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W23.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W23.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T23.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T23.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T23.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011551

// Submit prod JCL FF9171
Function FF011552()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T31.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W31 empty; /* Parameters work area*/

      FF01W31.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W31.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W31.YPGCD = FF01M015.YPGCD; /* Type group*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W31.FF01W-SESN1 = FF01M015.FF01SES1;
        FF01W31.FF01W-SESN2 = FF01M015.FF01SES2;
      else
        FF01W31.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W31.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W31.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T31.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T31.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T31.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1552"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011552

// Submit prod JCL FF9121
Function FF011553()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T21.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W21 empty; /* Parameters work area*/

      FF01W21.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W21.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W21.YPGCD = FF01M015.YPGCD; /* Type group*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W21.FF01W-SESN1 = FF01M015.FF01SES1;
        FF01W21.FF01W-SESN2 = FF01M015.FF01SES2;
      else
        FF01W21.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W21.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W21.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T21.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T21.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T21.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1553"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011553

// Submit test JCL FF9131
Function FF011554()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T71.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W23 empty; /* Parameters work area*/

      FF01W23.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W23.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W23.YPGCD = FF01M015.YPGCD; /* Type group*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W23.FF01W-SESN1 = FF01M015.FF01SES1;
        if (FF01W23.FF01W-SESN1 != "    ")
          FF01W23.FF01W-SESN2 = FF01M015.FF01SES2;
        else
          FF01W23.FF01W-SESN1 = FF01M015.FF01SES2;
        end
      else
        FF01W23.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W23.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W23.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T71.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T71.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T71.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1554"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011554

// Submit test JCL FF9171
Function FF011555()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T79.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W31 empty; /* Parameters work area*/

      FF01W31.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W31.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W31.YPGCD = FF01M015.YPGCD; /* Type group*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W31.FF01W-SESN1 = FF01M015.FF01SES1;
        FF01W31.FF01W-SESN2 = FF01M015.FF01SES2;
      else
        FF01W31.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W31.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W31.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T79.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T79.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T79.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1555"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011555

// Submit prod JCL FF9121
Function FF011556()
   /* submit test jcl*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T69.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W21 empty; /* Parameters work area*/

      FF01W21.XPCCD = FF01M015.XPCCD; /* Category*/
      FF01W21.XPLCD = FF01M015.XPLCD; /* Line*/
      FF01W21.YPGCD = FF01M015.YPGCD; /* Type group*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W21.FF01W-SESN1 = FF01M015.FF01SES1;
        FF01W21.FF01W-SESN2 = FF01M015.FF01SES2;
      else
        FF01W21.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
        FF01W21.FF01WXMO = FFZREC.FFZENDMO; /* End month*/
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W21.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T69.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T69.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T69.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1556"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[15] = "*"; /* Indicate function completed*/

    set FF01M015 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011556

// inv position with modeled fcst
Function FF01160()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01161(); /* Format and display the map*/

  FF01162(); /* Check attention identifier*/

  FF01163(); /* Reset fields to normal intensity*/

  FF01164(); /* Verify the data that was entered*/

  FF01165(); /* Process valid input request*/


end // end FF01160

// format and display map
Function FF01161()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M016.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M016.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M016.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M016.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M016.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M016.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M016.YPGCD = FFWREC.YPGCD;
    FF01M016.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M016.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M016 alarm; /* Indicate sound alarm*/

  end

  converse FF01M016 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01161

// Check attention identifier
Function FF01162()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[16] = "C"; /* Indicate selection cancelled*/

    set FF01M016 initial; /* M016 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "162"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01162

// Reset highlighted fields
Function FF01163()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M016.FF01MSEQ[1] initialAttributes; /* Sequence by*/
  set FF01M016.FF01MSEQ[2] initialAttributes; /* Sequence by*/
  set FF01M016.FF01MSEQ[3] initialAttributes; /* Sequence by*/
  set FF01M016.XPCCD initialAttributes; /* Category*/
  set FF01M016.XPLCD initialAttributes; /* Line*/
  set FF01M016.YPGCD initialAttributes; /* Type group*/
  set FF01M016.FF01MBMO initialAttributes; /* Range begin month*/
  set FF01M016.FF01MXMO initialAttributes; /* Range end month*/
  set FF01M016.FF01SES1 initialAttributes; /* Season Code 1*/
  set FF01M016.FF01SES2 initialAttributes; /* Season Code 2*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPCCD == "?" /* Category list requested*/
   || FF01M016.XPLCD == "?" /* Line code list requested*/
   || FF01M016.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "163"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPCCD == "?") /* Category list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M016.XPCCD = "  "; /* Code*/
      FF01M016.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M016.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M016.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M016.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M016.XPLCD = "  "; /* Code*/
      FF01M016.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M016.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M016.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M016.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M016.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M016.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M016.YPGCD = "  "; /* Code*/
      FF01M016.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M016.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "163"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FF01163

// Verify the entered data
Function FF01164()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPLCD == " " /* Line not entered*/
   && FF01M016.XPCCD == " ") /* Category not entered*/
    FFWREC.XXXMODID = "164"; /* Module identification*/
    set FF01M016.XPCCD cursor, bold; /* Highlight*/
    set FF01M016.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(178); /* Indicate 'Please enter one'*/
  end

  if (FF01M016.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "164"; /* Module identification*/
    set FF01M016.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end
  FF01W01.FF01W-DATE-ENTERED = "N"; /* Date Range Entered ?*/
  FF01W01.FF01W-SESN-ENTERED = "N"; /* Sesn Range Entered ?*/

  if (FF01M016.FF01SES1 != 0
   || FF01M016.FF01SES2 != 0)
    FF01W01.FF01W-SESN-ENTERED = "Y";
  end

  if (FF01M016.FF01MXMO != 0
   || FF01M016.FF01MBMO != 0)
    FF01W01.FF01W-DATE-ENTERED = "Y";
  end

  if (FF01W01.FF01W-DATE-ENTERED == "N")
    FFWREC.XXXMODID = "154";
    converseLib.validationFailed(8);
    set FF01M016.FF01MBMO cursor, bold;
  end


   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 4)
    if (FF01M016.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      else
        FFWREC.XXXMODID = "164"; /* Module identification*/
        set FF01M016.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(73); /* Only one sequence allowed*/
      end
    else
      if (FF01M016.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "164"; /* Module identification*/
        set FF01M016.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "164"; /* Module identification*/
    set FF01M016.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPCCD > " "    /* Category entered*/
   || FF01M016.XPLCD > " "    /* or line entered*/
   || FF01M016.YPGCD > " "    /* or type group entered*/
   || FF01M016.FF01MBMO > 0   /* or range beg mo entered*/
   || FF01M016.FF01MXMO > 0   /* or range end mo entered*/
   || FF01M016.FF01SES1 > " " /* or Season Code 1*/
   || FF01M016.FF01SES2 > " ") /* or Season Code 2*/
    FF01S27(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01164

// Process valid input request
Function FF01165()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "165"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (FF01M016.FF01MSEQ[1] == "S") /* category  report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011651(); /* format production jcl*/
    else
      FF011654(); /* format development jcl*/
    end
  end

  if (FF01M016.FF01MSEQ[2] == "S") /* style group report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011652(); /* format production jcl*/
    else
      FF011655(); /* format development jcl*/
    end
  end

  if (FF01M016.FF01MSEQ[3] == "S") /* style color report*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011653(); /* format production jcl*/
    else
      FF011656(); /* format development jcl*/
    end
  end

end // end FF01165

// Submit prod JCL FF9151
Function FF011651()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T25.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W25 empty; /* Parameters work area*/

      FF01W25.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W25.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W25.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W25.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W25.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W25.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W25.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W25.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T25.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T25.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T25.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011651

// Submit prod JCL FF9181
Function FF011652()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T32.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W32 empty; /* Parameters work area*/

      FF01W32.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W32.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W32.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W32.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W32.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W32.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W32.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W32.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T32.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T32.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T32.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1652"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011652

// Submit prod JCL FF9141
Function FF011653()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T24.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W24 empty; /* Parameters work area*/

      FF01W24.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W24.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W24.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W24.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W24.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W24.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W24.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W24.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T24.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T24.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T24.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1653"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011653

// Submit test JCL FF9151
Function FF011654()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T73.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W25 empty; /* Parameters work area*/

      FF01W25.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W25.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W25.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W25.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W25.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W25.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W25.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W25.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T73.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T73.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T73.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1654"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011654

// Submit test JCL FF9181
Function FF011655()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T8O.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W32 empty; /* Parameters work area*/

      FF01W32.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W32.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W32.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W32.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W32.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W32.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W32.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W32.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T8O.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T8O.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T8O.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1655"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011655

// Submit test JCL FF9141
Function FF011656()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T72.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W24 empty; /* Parameters work area*/

      FF01W24.XPCCD = FF01M016.XPCCD; /* Category*/
      FF01W24.XPLCD = FF01M016.XPLCD; /* Line*/
      FF01W24.YPGCD = FF01M016.YPGCD; /* Type group*/
      FF01W24.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W24.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      if (FF01W01.FF01W-SESN-ENTERED == "Y")
        FF01W24.FF01W-SESN1 = FF01M016.FF01SES1;
        FF01W24.FF01W-SESN2 = FF01M016.FF01SES2;
      end

      TA6REC.TARJCL[TA6INDEX] = FF01W24.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T72.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T72.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T72.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1656"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[16] = "*"; /* Indicate function completed*/

    set FF01M016 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011656

// Prebuild quantity report
Function FF01170()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the Pre-Build Qty*/
   /* by Category Report submission screen.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01171(); /* Format and display the map*/

  FF01172(); /* Check attention identifier*/

  FF01173(); /* Reset fields to normal intensity*/

  FF01174(); /* Verify the data that was entered*/

  FF01175(); /* Process valid input request*/


end // end FF01170

// Format and display the map
Function FF01171()
   /* ------------------------------------------------------------*/
   /* Converse the Pre-Build Qty by Category Report Screen.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M017.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M017.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M017.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M017.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M017.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M017.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M017.YPGCD = FFWREC.YPGCD;
    FF01M017.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M017.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M017 alarm; /* Indicate sound alarm*/

  end

  converse FF01M017 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01171

// Check attention identifier
Function FF01172()
   /* ------------------------------------------------------------*/
   /* Pre-Build Qty by Category Report - Check PFkeys module.*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[17] = "C"; /* Indicate selection cancelled*/

    set FF01M017 initial; /* M017 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "172"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01172

// Reset highlighted fields
Function FF01173()
   /* ------------------------------------------------------------*/
   /* Pre-Build Qty by Cateogry Report - Edit Module*/
   /* Reset field attributes to normal intensity.*/
   /* Check for list requests.*/
   /* ------------------------------------------------------------*/


  set FF01M017.FF01MSEQ[1] initialAttributes; /* Sequence by*/
  set FF01M017.FF01MSEQ[2] initialAttributes; /* Sequence by*/
  set FF01M017.FF01MBDT initialAttributes; /* Range Begin YYMMDD*/
  set FF01M017.FF01MXDT initialAttributes; /* Range End   YYMMDD*/
  set FF01M017.YPGCD initialAttributes; /* Product Type Group*/
  set FF01M017.XPLCD initialAttributes; /* Line*/
  set FF01M017.XPCCD initialAttributes; /* Category*/

   /* ------------------------------------------------------------*/
   /* If NO PRODUCT LISTS REQUESTED, RETURN TO PREV PROCESS.*/
   /* ------------------------------------------------------------*/
  if (FF01M017.YPGCD == "?"
   || FF01M017.XPLCD == "?"
   || FF01M017.XPCCD == "?")
    if (converseVar.eventKey not enter)
      FFWREC.XXXMODID = "173";
      converseLib.validationFailed(116);
      exit stack;
    end
  else
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M017.XPLCD = "  "; /* Code*/
      FF01M017.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M017.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M017.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M017.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Category Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.XPCCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M017.XPCCD = "  "; /* Code*/
      FF01M017.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M017.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M017.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M017.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M017.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M017.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M017.YPGCD = "  "; /* Code*/
      FF01M017.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M017.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "173"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF01173

// Verify the entered data
Function FF01174()
   /* ------------------------------------------------------------*/
   /* Pre-Build Qty by Category Report*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.FF01MBDT == 0) /* Range begin YYMMDD not entered*/
    FFWREC.XXXMODID = "174"; /* Module identification*/
    set FF01M017.FF01MBDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M017.FF01MXDT == 0) /* Range End YYMMDD not entered*/
    FFWREC.XXXMODID = "174"; /* Module identification*/
    set FF01M017.FF01MXDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* Edit the seqence by*/

  FF01W01.FF01WIDX = 1; /* reset idx*/
  FF01W01.FF01WFLG = "N"; /* reset 's' found flag*/

  while (FF01WIDX < 3)
    if (FF01M017.FF01MSEQ[FF01WIDX] == "S")
      if (FF01W01.FF01WFLG == "N")
        FF01W01.FF01WFLG = "Y";
      end
    else
      if (FF01M017.FF01MSEQ[FF01WIDX] == " ")
         /* NEXT SENTENCE*/
      else
        FFWREC.XXXMODID = "174"; /* Module identification*/
        set FF01M017.FF01MSEQ[FF01WIDX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Only 'S' allowed*/
      end
    end
    FF01W01.FF01WIDX = FF01W01.FF01WIDX + 1;
  end

  if (FF01W01.FF01WFLG == "N"
   && converseVar.validationMsgNum == 0)
    FFWREC.XXXMODID = "174"; /* Module identification*/
    set FF01M017.FF01MSEQ[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.XPLCD > " " /* Line entered*/
   || FF01M017.YPGCD > " " /* or type group entered*/
   || FF01M017.XPCCD > " ") /* or category entered*/
    FF01S33(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF01174

// Submit PREBLD QTY repts
Function FF01175()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment the program*/
   /* should be executed in, development or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    /* NEXT SENTENCE*/
  else

    FFWREC.XXXMODID = "175"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Determine which JCL to submit*/
   /* ------------------------------------------------------------*/
  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    FF011751(); /* format production jcl*/
  else
    FF011753(); /* format development jcl*/
  end


end // end FF01175

// Submit prod JCL
Function FF011751()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T26.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W26 empty; /* Parameters work area*/

      FF01W26.YPGCD = FF01M017.YPGCD; /* Product Type Grp*/
      FF01W26.XPLCD = FF01M017.XPLCD; /* Line*/
      FF01W26.XPCCD = FF01M017.XPCCD; /* catg*/
      FF01W26.FF01WBDT = FF01M017.FF01MBDT; /* Futr Sls Beg Dt*/
      FF01W26.FF01WXDT = FF01M017.FF01MXDT; /* Futr Sls End Dt*/


      TA6REC.TARJCL[TA6INDEX] = FF01W26.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Report Distribution Parameters.*/
      /* ------------------------------------------------------------*/

      if (FF01T26.TARTYPE[FF01WIXT] == "R") /* Parameters statement*/
        FF01W26.FF01WFRM = "79";
        FF01W26.FF01WJOB = "9701";
        TA6REC.TARJCL[TA6INDEX] = FF01T26.TARJCL[FF01WIXT];
        TA6REC.TARTYPE[TA6INDEX] = FF01T26.TARTYPE[FF01WIXT]; /* Type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the condition statesments.*/
        /* ------------------------------------------------------------*/

        if (FF01T26.TARTYPE[FF01WIXT] == "1" /* Parameters statement*/
         || FF01T26.TARTYPE[FF01WIXT] == "2") /* Parameters statement*/

          FF01W00.TARJCL = FF01T26.TARJCL[FF01WIXT];
          FF01W00.TARTYPE = FF01T26.TARTYPE[FF01WIXT];

          if (FF01T26.TARTYPE[FF01WIXT] == "1" /* Parameters statement*/
           && FF01M017.FF01MSEQ[2] == "S")     /* catg rept selected*/
            FF01W00.FF01W-COND-CD = "(0,NE)         ";
          end

          if (FF01T26.TARTYPE[FF01WIXT] == "2" /* Parameters statement*/
           && FF01M017.FF01MSEQ[1] == "S")     /* line rept selected*/
            FF01W00.FF01W-COND-CD = "(0,NE)         ";
          end

          TA6REC.TARJCL[TA6INDEX] = FF01W00.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FF01W00.TARTYPE;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FF01T26.TARJCL[FF01WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FF01T26.TARTYPE[FF01WIXT];
                                   /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T26.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/
    end

  end /* END-WHILE*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If call successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1751"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[17] = "*"; /* Indicate function completed*/

    set FF01M017 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/
end // end FF011751

// Submit test JCL
Function FF011753()
   /* submit test JCL*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T74.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W26 empty; /* Parameters work area*/

      FF01W26.YPGCD = FF01M017.YPGCD; /* Product Type Grp*/
      FF01W26.XPLCD = FF01M017.XPLCD; /* Line*/
      FF01W26.XPCCD = FF01M017.XPCCD; /* catg*/
      FF01W26.FF01WBDT = FF01M017.FF01MBDT; /* Futr Sls Beg Dt*/
      FF01W26.FF01WXDT = FF01M017.FF01MXDT; /* Futr Sls End Dt*/


      TA6REC.TARJCL[TA6INDEX] = FF01W26.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Report Distribution Parameters.*/
      /* ------------------------------------------------------------*/

      if (FF01T74.TARTYPE[FF01WIXT] == "R") /* Parameters statement*/
        FF01W26.FF01WFRM = "79";
        FF01W26.FF01WJOB = "9701";
        TA6REC.TARJCL[TA6INDEX] = FF01T74.TARJCL[FF01WIXT];
        TA6REC.TARTYPE[TA6INDEX] = FF01T74.TARTYPE[FF01WIXT]; /* Type*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the condition statesments.*/
        /* ------------------------------------------------------------*/

        if (FF01T74.TARTYPE[FF01WIXT] == "1" /* Parameters statement*/
         || FF01T74.TARTYPE[FF01WIXT] == "2") /* Parameters statement*/

          FF01W00.TARJCL = FF01T74.TARJCL[FF01WIXT];
          FF01W00.TARTYPE = FF01T74.TARTYPE[FF01WIXT];

          if (FF01T74.TARTYPE[FF01WIXT] == "1" /* Parameters statement*/
           && FF01M017.FF01MSEQ[2] == "S")     /* catg rept selected*/
            FF01W00.FF01W-COND-CD = "(0,NE)         ";
          end

          if (FF01T74.TARTYPE[FF01WIXT] == "2" /* Parameters statement*/
           && FF01M017.FF01MSEQ[1] == "S")     /* line rept selected*/
            FF01W00.FF01W-COND-CD = "(0,NE)         ";
          end

          TA6REC.TARJCL[TA6INDEX] = FF01W00.TARJCL;
          TA6REC.TARTYPE[TA6INDEX] = FF01W00.TARTYPE;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

        else
          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = FF01T74.TARJCL[FF01WIXT]; /* JCL*/
          TA6REC.TARTYPE[TA6INDEX] = FF01T74.TARTYPE[FF01WIXT];
                                   /* Type*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T74.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/
    end

  end /* END-WHILE*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If call successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "1753"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[17] = "*"; /* Indicate function completed*/

    set FF01M017 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/
end // end FF011753

// Prod fcst & schdl balance rpt
Function FF01180()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01181(); /* Format and display the map*/

  FF01182(); /* Check attention identifier*/

  FF01183(); /* Reset fields to normal intensity*/

  FF01184(); /* Verify the data that was entered*/

  FF01185(); /* Process valid input request*/

end // end FF01180

// Format and display the map
Function FF01181()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M018.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M018.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M018.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M018.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M018.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M018.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M018.YPGCD = FFWREC.YPGCD;
    FF01M018.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M018.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M018 alarm; /* Indicate sound alarm*/

  end

  converse FF01M018 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01181

// Check attention identifier
Function FF01182()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[18] = "C"; /* Indicate selection cancelled*/

    set FF01M018 initial; /* m018 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "182"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01182

// Reset highlighted fields
Function FF01183()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M018.XPLCD initialAttributes; /* Line*/
  set FF01M018.YPGCD initialAttributes; /* Type group*/
  set FF01M018.FF01MBMO initialAttributes; /* Beginning date*/
  set FF01M018.FF01MXMO initialAttributes; /* Ending date*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.XPLCD == "?" /* Line code list requested*/
   || FF01M018.YPGCD == "?") /* Type group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "183"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M018.XPLCD = "  "; /* Code*/
      FF01M018.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M018.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M018.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M018.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M018.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M018.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M018.YPGCD = "  "; /* Code*/
      FF01M018.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M018.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "183"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FF01183

// Verify the entered data
Function FF01184()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "184"; /* Module identification*/
    set FF01M018.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M018.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "184"; /* Module identification*/
    set FF01M018.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate 'Please enter one'*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.XPLCD > " "  /* line entered*/
   || FF01M018.YPGCD > " "  /* or type group entered*/
   || FF01M018.FF01MBMO > 0 /* or beginning date*/
   || FF01M018.FF01MXMO > 0) /* or ending date*/
    FF01S29(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end FF01184

// Process valid input request
Function FF01185()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011851(); /* format production jcl*/
    else
      FF011852(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "185"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01185

// Submit prod JCL FF6921
Function FF011851()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T28.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W28 empty; /* Parameters work area*/

      FF01W28.XPLCD = FF01M018.XPLCD; /* Line*/
      FF01W28.YPGCD = FF01M018.YPGCD; /* Type group*/

      FF01W28.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W28.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W28.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T28.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T28.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T28.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "185"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[18] = "*"; /* Indicate function completed*/

    set FF01M018 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011851

// Submit test JCL FF6921
Function FF011852()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T76.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W28 empty; /* Parameters work area*/

      FF01W28.XPLCD = FF01M018.XPLCD; /* Line*/
      FF01W28.YPGCD = FF01M018.YPGCD; /* Type group*/

      FF01W28.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W28.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W28.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T76.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T76.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T76.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "185"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[18] = "*"; /* Indicate function completed*/

    set FF01M018 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011852

// Prod fcst & schd exception rpt
Function FF01190()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01191(); /* Format and display the map*/

  FF01192(); /* Check attention identifier*/

  FF01193(); /* Reset fields to normal intensity*/

  FF01194(); /* Verify the data that was entered*/

  FF01195(); /* Process valid input request*/

end // end FF01190

// Format and display the map
Function FF01191()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M019.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M019.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M019.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M019.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M019.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M019.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* Format any missing parameter data into map if available.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/

    FF01M019.YPGCD = FFWREC.YPGCD;
    FF01M019.YPGABRV = FFWREC.YPGABRV;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M019.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M019 alarm; /* Indicate sound alarm*/

  end

  converse FF01M019 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01191

// Check attention identifier
Function FF01192()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[19] = "C"; /* Indicate selection cancelled*/

    set FF01M019 initial; /* m019 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "192"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01192

// Reset highlighted fields
Function FF01193()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M019.XPLCD initialAttributes; /* Line*/
  set FF01M019.YPGCD initialAttributes; /* Type group*/
  set FF01M019.XPCCD initialAttributes; /* Type group*/
  set FF01M019.FF01MBMO initialAttributes; /* Beginning date*/
  set FF01M019.FF01MXMO initialAttributes; /* Ending date*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPLCD == "?" /* Line code list requested*/
   || FF01M019.YPGCD == "?" /* Type group list requested*/
   || FF01M019.XPCCD == "?") /* Category list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "193"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M019.XPLCD = "  "; /* Code*/
      FF01M019.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M019.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M019.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M019.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF01M019.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF01M019.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF01M019.YPGCD = "  "; /* Code*/
      FF01M019.YPGABRV = "  "; /* Abbreviation*/
    end
    set FF01M019.YPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPCCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M019.XPCCD = "  "; /* Code*/
      FF01M019.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M019.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M019.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M019.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "193"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FF01193

// Verify the entered data
Function FF01194()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPLCD == " " /* Line not entered*/
   && FF01M019.XPCCD == " ") /* category not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M019.XPLCD cursor, bold; /* Highlight*/
    set FF01M019.XPCCD bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate 'Please enter one'*/
  end

  if (FF01M019.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M019.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M019.FF01MXMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M019.FF01MXMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M019.FF01MBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M019.FF01MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPLCD > " "  /* line entered*/
   || FF01M019.YPGCD > " "  /* or type group entered*/
   || FF01M019.XPCCD > " "  /* or category entered*/
   || FF01M019.FF01MBMO > 0 /* or range beg mo entered*/
   || FF01M019.FF01MXMO > 0) /* or range end mo entered*/
    FF01S30(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF01194

// Process valid input request
Function FF01195()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF011951(); /* format production jcl*/
    else
      FF011952(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "195"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01195

// Submit prod JCL FF6931
Function FF011951()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T29.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W29 empty; /* Parameters work area*/

      FF01W29.XPLCD = FF01M019.XPLCD; /* Line*/
      FF01W29.YPGCD = FF01M019.YPGCD; /* Type group*/
      FF01W29.XPCCD = FF01M019.XPCCD; /* Category*/

      FF01W29.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W29.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W29.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T29.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T29.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T29.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[19] = "*"; /* Indicate function completed*/

    set FF01M019 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011951

// Submit test JCL FF6931
Function FF011952()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T77.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W29 empty; /* Parameters work area*/

      FF01W29.XPLCD = FF01M019.XPLCD; /* Line*/
      FF01W29.YPGCD = FF01M019.YPGCD; /* Type group*/
      FF01W29.XPCCD = FF01M019.XPCCD; /* Category*/

      FF01W29.FF01WBMO = FFZREC.FFZBEGMO; /* Begin month*/
      FF01W29.FF01WXMO = FFZREC.FFZENDMO; /* End month*/

      TA6REC.TARJCL[TA6INDEX] = FF01W29.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T77.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T77.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T77.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[19] = "*"; /* Indicate function completed*/

    set FF01M019 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF011952

// FIRST PO EXCEPTION REPORT
Function FF01200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01201(); /* Format and display the map*/

  FF01202(); /* Check attention identifier*/

  FF01203(); /* Reset fields to normal intensity*/

  FF01204(); /* Verify the data that was entered*/

  FF01205(); /* Process valid input request*/

end // end FF01200

// Format and display the map
Function FF01201()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  FF01M020.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M019.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FF01M020.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FF01M020.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FF01M020.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FF01M020.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M020.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M020 alarm; /* Indicate sound alarm*/

  end

  converse FF01M020 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/


end // end FF01201

// Check attention identifier
Function FF01202()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF01W01.FF01MSEL[20] = "C"; /* Indicate selection cancelled*/

    set FF01M020 initial; /* m020 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    FF01W01.FF01WSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "192"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF01202

// Reset highlighted fields
Function FF01203()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF01M020.XPLCD initialAttributes; /* Line*/
  set FF01M020.XPCCD initialAttributes; /* Type group*/
  set FF01M020.PDTYP initialAttributes; /* PRODUCT TYPE*/
  set FF01M020.XSNYEAR initialAttributes; /* year range*/
  set FF01M020.IPM-DATE initialAttributes; /* year range*/
  set FF01M020.XSESESN initialAttributes; /* Season code*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPLCD == "?" /* Line code list requested*/
   || FF01M020.XPCCD == "?" /* Category list requested*/
   || FF01M020.PDTYP == "?") /* TYPE GROUP list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "193"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product Line Codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPLCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "      LINE"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M020.XPLCD = "  "; /* Code*/
      FF01M020.XPLABRV = "  "; /* Abbreviation*/
    else
      FF01M020.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF01M020.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M020.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Product category codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPCCD == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M020.XPCCD = "  "; /* Code*/
      FF01M020.XPCABRV = "  "; /* Abbreviation*/
    else
      FF01M020.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF01M020.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M020.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Type Groups codes.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.PDTYP == "?") /* Product line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF01M020.PDTYP = "  "; /* Code*/
      FF01M020.YPGABRV = "  "; /* Abbreviation*/
    else
      FF01M020.PDTYP = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF01M020.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF01M020.PDTYP cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "193"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FF01203

// Verify the entered data
Function FF01204()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPLCD == " " /* Line not entered*/
   && FF01M020.XPCCD == " ") /* category not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M020.XPLCD cursor, bold; /* Highlight*/
    set FF01M020.XPCCD bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate 'Please enter one'*/
  end

  if (FF01M020.XSESESN == " ") /* SEASON CODE     not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M020.XSESESN cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M020.XSNYEAR == " ") /* YEAR RANGE        not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M020.XSNYEAR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF01M020.IPM-DATE == " ") /* YEAR RANGE        not entered*/
    FFWREC.XXXMODID = "194"; /* Module identification*/
    set FF01M020.IPM-DATE cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If the parameter fields were entered verify them.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPLCD > " "   /* line entered*/
   || FF01M020.XPCCD > " "   /* or category entered*/
   || FF01M020.XSESESN > " " /* or range beg mo entered*/
   || FF01M020.XSNYEAR > 0   /* or range end mo entered*/
   || FF01M020.IPM-DATE > 0) /* or range end mo entered*/
    FF01S39(); /* Verify parameters*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end FF01204

// Process valid input request
Function FF01205()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF012051(); /* format production jcl*/
    else
      FF012052(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "195"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF01205

// Submit prod JCL FF6951
Function FF012051()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T33.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W33 empty; /* Parameters work area*/

      FF01W33.XPLCD = FF01M020.XPLCD; /* Line*/
      FF01W33.XPCCD = FF01M020.XPCCD; /* Category*/
      FF01W33.PDTYP = FF01M020.PDTYP; /* Category*/
      FF01W33.XSESESN = FF01M020.XSESESN; /* SEASON*/
      FF01W33.XSNYEAR = FF01M020.XSNYEAR; /* SEASON*/
      FF01W33.IPM-DATE = FF01M020.IPM-DATE; /* IPM*/


      TA6REC.TARJCL[TA6INDEX] = FF01W33.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T33.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T33.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T33.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[20] = "*"; /* Indicate function completed*/

    set FF01M020 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF012051

// Submit test JCL FF6951
Function FF012052()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  FF01W01.FF01WIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF01T81.TARTYPE[FF01WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF01W33 empty; /* Parameters work area*/

      FF01W33.XPLCD = FF01M020.XPLCD; /* Line*/
      FF01W33.XPCCD = FF01M020.XPCCD; /* Category*/
      FF01W33.PDTYP = FF01M020.PDTYP; /* Product Type*/
      FF01W33.XSESESN = FF01M020.XSESESN; /* SEASON*/
      FF01W33.XSNYEAR = FF01M020.XSNYEAR; /* YEAR*/
      FF01W33.IPM-DATE = FF01M020.IPM-DATE; /* IPM*/


      TA6REC.TARJCL[TA6INDEX] = FF01W33.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF01T81.TARJCL[FF01WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF01T81.TARTYPE[FF01WIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF01T81.TARJCL[FF01WIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FF01W01.FF01WIXT = FF01W01.FF01WIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Msg return switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Job was submitted*/
    FF01W01.FF01MSEL[20] = "*"; /* Indicate function completed*/

    set FF01M020 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(01); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end FF012052

// Report Request Menu
Function FF01990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF01991(); /* Format and display the map*/

  FF01992(); /* Check attention identifier*/

  FF01993(); /* Reset fields to normal intensity*/

  FF01994(); /* Verify the data that was entered*/

  FF01995(); /* Process valid input request*/


end // end FF01990

// Format and display the map
Function FF01991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/

    set FF01M099 initial; /* M099 input/output*/

    FF01W01.FF01WIXM = 1; /* Initialize map index*/

    while (FF01W01.FF01WIXM <= FF01W01.FF01WIXL) /* Until end of array*/

      FF01M099.FF01MSEL[FF01WIXM] = FF01W01.FF01MSEL[FF01WIXM];

      FF01W01.FF01WIXM = FF01W01.FF01WIXM + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF01M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF01M099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF01M099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF01M099.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF01M099 alarm; /* Indicate sound alarm*/

  end

  converse FF01M099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/

  COMMAREA.CATOAP = FF01M099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF01M099.CAITEM; /* Application data*/


end // end FF01991

// Check attention identifier
Function FF01992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set FF01M099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    FF01S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF01M099.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    FF01S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF01M099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    FF01S99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    FF01S99(); /* Exit to display map*/

  end


end // end FF01992

// Reset highlighted fields
Function FF01993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  FF01W01.FF01WIXM = 1; /* Initialize index*/

  while (FF01W01.FF01WIXM <= FF01W01.FF01WIXL) /* Until all lines are reset*/

    set FF01M099.FF01MSEL[FF01WIXM] initialAttributes; /* Reset select field*/

    FF01W01.FF01WIXM = FF01W01.FF01WIXM + 1; /* Increment line index*/

  end

  set FF01M099.CATOAP initialAttributes; /* TO application*/
  set FF01M099.CAITEM initialAttributes; /* Application data*/


end // end FF01993

// Verify the entered data
Function FF01994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "994"; /* Module identification*/
    set FF01M099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  FF01W01.FF01WIXM = FF01W01.FF01WIXL; /* Initialize line index*/

  while (FF01W01.FF01WIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (FF01M099.FF01MSEL[FF01WIXM] != FF01W01.FF01MSEL[FF01WIXM]
     && FF01M099.FF01MSEL[FF01WIXM] != " " /* Line was selected*/
     && FF01M099.FF01MSEL[FF01WIXM] != "S") /* and not with an "S"*/

      FFWREC.XXXMODID = "994"; /* Module identification*/
      set FF01M099.FF01MSEL[FF01WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Only "S" is valid*/

    end

    FF01W01.FF01WIXM = FF01W01.FF01WIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FF01S99(); /* Exit to display map*/
  end


end // end FF01994

// Process valid input request
Function FF01995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move FF01M099.FF01MSEL to FF01W01.FF01MSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01MSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end FF01995

// VALIDATE SEASON CODE
Function FF01S-VAL-SEASON()
  if (FF01W01.FF01W-YR not numeric)
    FFWREC.XXXMODID = "S24";
    converseLib.validationFailed(537);
    return;
  end

  if (FF01W01.FF01W-SESN in FE0DTBL.FE0DSESN)
    FF01W01.FF01W-BEG-MM = FE0DTBL.FE0DBMON[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    FFWREC.XXXMODID = "S24";
    converseLib.validationFailed(537);
  end
end // end FF01S-VAL-SEASON

// Select 'S' dfcast.vffxrf01
Function FF01S01()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPCCD = FF01M019.XPCCD;
  FF2REC.YPGCD = FF01M019.YPGCD;
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      return;
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF01S01

// Verify parameters
Function FF01S03()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPCCD > " ") /* Category was entered*/
    if (FF01M002.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M002.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M002.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S03"; /* Module identification*/
      set FF01M002.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M002.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.XPLCD == "*") /* Wildcard line code*/
    FF01M002.XPLABRV = "ALL";
  else
    if (FF01M002.XPLCD > " ") /* Line was entered*/
      if (FF01M002.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M002.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M002.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF01M002.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M002.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.YPGCD == "*") /* Wildcard type group*/
    FF01M002.YPGABRV = "ALL";
  else
    if (FF01M002.YPGCD > " ") /* Type group was entered*/
      if (FF01M002.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M002.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M002.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        set FF01M002.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M002.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If division group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M002.YSMXDV == "*") /* Wildcard line code*/
    FF01M002.YSMSMDSC = "ALL";
  else
    if (FF01M002.YSMXDV == "**") /* invalid Wildcard line code*/
      FF01M002.YSMSMDSC = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S03"; /* Module identification*/
      set FF01M002.YSMXDV cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    else
      if (FF01M002.YSMXDV > " ") /* Div group was entered*/
        set YSMREC empty;
        YSMREC.YSMSUMCD = FF01M002.YSMXDV;
        TA1REC.TA1PGMNM = "FF01";
        XSFFS20();
        if (sysVar.errorCode == "00000000") /* Call successful*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
            FF01M002.YSMSMDSC = YSMREC.YSMSMDSC;
          else

            /* ------------------------------------------------------------*/
             /* If not found or inactive, indicate invalid.*/

            /* ------------------------------------------------------------*/
            if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
              FF01M002.YSMSMDSC = " "; /* Abbreviation*/
              FFWREC.XXXMODID = "S03"; /* Module identification*/
              set FF01M002.YSMXDV cursor, bold; /* Highlight*/
              converseLib.validationFailed(10); /* Indicate invalid*/
            else
              if (SQLCA.VAGen_SQLCODE == -911)
                FF01M002.YSMSMDSC = " "; /* Abbreviation*/
                FFWREC.XXXMODID = "S03"; /* Module identification*/
                set FF01M002.YSMXDV cursor, bold; /* Highlight*/
                converseLib.validationFailed(47); /* Indicate not available*/
              else
                FF01M002.YSMSMDSC = " "; /* Abbreviation*/
                FFWREC.XXXMODID = "S03"; /* Module identification*/
                set FF01M002.YSMXDV cursor, bold; /* Highlight*/
                converseLib.validationFailed(1); /* Indicate not available*/
              end
            end
          end
        end
      else
        FF01M002.YSMSMDSC = " "; /* Clear abrv*/
      end
    end
  end

   /* bgn tcs*/
   /* ------------------------------------------------------------*/
   /* Verify season code(s) if entered*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01W-SESN-ENTERED == "Y")
    if (FF01M002.FF01SES1 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M002.FF01SES1;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum == 537)
        FFWREC.XXXMODID = "S24";
        set FF01M002.FF01SES1 cursor, bold;
      end
    end
    if (FF01M002.FF01SES2 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M002.FF01SES2;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum == 537)
        FFWREC.XXXMODID = "S24";
        set FF01M002.FF01SES2 cursor, bold;
      end
    end
    if (FF01M002.FF01SES3 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M002.FF01SES3;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum == 537)
        FFWREC.XXXMODID = "S24";
        set FF01M002.FF01SES3 cursor, bold;
      end
    end
  end
   /* end tcs*/
  /* ---------------------------------------------------------------*/
  /* verify month range*/
  /* ---------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M002.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M002.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S03"; /* Module identification*/
    set FF01M002.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S03"; /* Module identification*/
    set FF01M002.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M002.XPCABRV != " " /* Category valid*/
     && FF01M002.XPLABRV != " " /* & line valid*/
     && FF01M002.YPGABRV != " " /* & type grp valid*/
     && FF01M002.YSMSMDSC != " ") /* & div grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M002.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M002.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M002.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M002.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S03"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M002.YPGCD cursor, bold; /* Highlight*/
        if (FF01M002.XPLCD != " ")
          set FF01M002.XPLCD bold; /* Highlight*/
        end
        if (FF01M002.XPCCD != " ")
          set FF01M002.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M002.XPLCD)
          FF01M002.XPLCD = FF2REC.XPLCD;
          if (FF01M002.XPLCD in XPLTBL.XPLCD)
            FF01M002.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S03

// Verify parameters
Function FF01S04()
   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.XPLCD == "*") /* Wildcard line code*/
    FF01M003.XPLABRV = "ALL";
  else
    if (FF01M003.XPLCD > " ") /* Line was entered*/
      if (FF01M003.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M003.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M003.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S04"; /* Module identification*/
        set FF01M003.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M003.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.YPGCD == "*") /* Wildcard type group*/
    FF01M003.YPGABRV = "ALL";
  else
    if (FF01M003.YPGCD > " ") /* Type group was entered*/
      if (FF01M003.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M003.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M003.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S04"; /* Module identification*/
        set FF01M003.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M003.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If division group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M003.YSMXDV > " ") /* Div group was entered*/
    set YSMREC empty;
    YSMREC.YSMSUMCD = FF01M003.YSMXDV;
    TA1REC.TA1PGMNM = "FF01";
    XSFFS20();
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        FF01M003.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF01M003.YSMSMDSC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "S04"; /* Module identification*/
          set FF01M003.YSMXDV cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF01M003.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S04"; /* Module identification*/
            set FF01M003.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF01M003.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S04"; /* Module identification*/
            set FF01M003.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* Indicate not available*/
          end
        end
      end
    end
  else
    FF01M003.YSMSMDSC = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M003.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M003.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S04"; /* Module identification*/
    set FF01M003.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S04"; /* Module identification*/
    set FF01M003.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between line/type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M003.XPLABRV != " " /* line valid*/
     && FF01M003.YPGABRV != " " /* & type grp valid*/
     && FF01M003.YSMSMDSC != " ") /* & div grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.XPLCD = FF01M003.XPLCD;
      FF2REC.XPCCD = "*";
      FF2REC.YPGCD = FF01M003.YPGCD;
      FF2REC.YSMXDV = FF01M003.YSMXDV;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S04"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M003.YSMXDV cursor, bold; /* Highlight*/
        set FF01M003.YPGCD bold; /* Highlight*/
        if (FF01M003.XPLCD != " ")
          set FF01M003.XPLCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M003.XPLCD)
          FF01M003.XPLCD = FF2REC.XPLCD;
          if (FF01M003.XPLCD in XPLTBL.XPLCD)
            FF01M003.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S04

// Verify parameters
Function FF01S05()

   /* ------------------------------------------------------------*/
   /* Validate Return to Stock Percentage.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.FF01MRTS < 0) /* RTS % LT zero*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MRTS cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end


  if (FF01M004.FF01MRTS > 99) /* RTS % GT 99%*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MRTS cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end


   /* ------------------------------------------------------------*/
   /* Validate Nil Misc Percentage.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.FF01MMIS < 0) /* MISC % LT zero*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MMIS cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MMIS > 99) /* MISC % GT 99%*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MMIS cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

   /* ------------------------------------------------------------*/
   /* If Style Group is wildcard, initialize the abbreviation.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.SYBSTGNB == "*") /* Wildcard line code*/
    FF01M004.SYBSTGNM = "ALL";
  else
    FF01M004.SYBSTGNM = " "; /* clear abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If Category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPCCD == "*") /* Wildcard line code*/
    FF01M004.XPCABRV = "ALL";
  else
    if (FF01M004.XPCCD > " ") /* Line was entered*/
      if (FF01M004.XPCCD in XPCTBL.XPCCD           /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M004.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M004.XPCABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S05"; /* Module identification*/
        set FF01M004.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M004.XPCABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.XPLCD == "*") /* Wildcard line code*/
    FF01M004.XPLABRV = "ALL";
  else
    if (FF01M004.XPLCD > " ") /* Line was entered*/
      if (FF01M004.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M004.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M004.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S05"; /* Module identification*/
        set FF01M004.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid Value Msg*/
      end
    else
      FF01M004.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Product Type Group was entered, verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.YPGCD == "*") /* Wildcard type group*/
    FF01M004.YPGABRV = "ALL";
  else
    if (FF01M004.YPGCD > " ") /* Type group was entered*/
      if (FF01M004.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M004.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
        /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M004.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S05"; /* Module identification*/
        set FF01M004.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M004.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Report Request Date.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M004.FF01MBMY; /* Beginning date*/

  FF01S32(); /* Edit Report Request Date*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S05"; /* Module identification*/
    set FF01M004.FF01MBMY cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing msg*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date enteredmsg*/
      else
        converseLib.validationFailed(151); /* Date Out of Range msg*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between Line/Type Group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M004.XPLABRV != " " /* Line valid*/
     && FF01M004.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPLCD = FF01M004.XPLCD;
      FF2REC.XPCCD = "*";
      FF2REC.YPGCD = FF01M004.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S05"; /* Module ID*/
        converseLib.validationFailed(203); /* Inconsistent relationship Msg*/
        set FF01M004.YPGCD cursor, bold; /* Highlight*/
        if (FF01M004.XPLCD != " ")
          set FF01M004.XPLCD bold; /* Highlight*/
        end
      else
        if (FF01M004.XPLCD != "*")
          if (FF2REC.XPLCD != FF01M004.XPLCD)
            FF01M004.XPLCD = FF2REC.XPLCD;
            if (FF01M004.XPLCD in XPLTBL.XPLCD)
              FF01M004.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify relationship between Category/Type Group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M004.XPCABRV != " " /* Category valid*/
     && FF01M004.YPGABRV != " ") /* & Type Grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPCCD = FF01M004.XPCCD;
      FF2REC.XPLCD = "*";
      FF2REC.YPGCD = FF01M004.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S05"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship Msg*/
        set FF01M004.YPGCD cursor, bold; /* Highlight*/
        if (FF01M004.XPCCD != " ")
          set FF01M004.XPCCD bold; /* Highlight*/
        end
      else
        if (FF01M004.XPCCD != "*")
          if (FF2REC.XPCCD != FF01M004.XPCCD)
            FF01M004.XPCCD = FF2REC.XPCCD;
            if (FF01M004.XPCCD in XPCTBL.XPCCD)
              FF01M004.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify relationship between Category/Line.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M004.XPCABRV != " " /* Category valid*/
     && FF01M004.XPLABRV != " ") /* & Line valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPCCD = FF01M004.XPCCD;
      FF2REC.XPLCD = FF01M004.XPLCD;
      FF2REC.YPGCD = FF01M004.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S05"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M004.XPLCD cursor, bold; /* Highlight*/
        set FF01M004.XPCCD bold; /* Highlight*/
      else
        if (FF01M004.XPCCD != "*")
          if (FF2REC.XPCCD != FF01M004.XPCCD)
            FF01M004.XPCCD = FF2REC.XPCCD;
            if (FF01M004.XPCCD in XPCTBL.XPCCD)
              FF01M004.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
            end
          end
        end
        if (FF01M004.XPLCD != "*")
          if (FF2REC.XPLCD != FF01M004.XPLCD)
            FF01M004.XPLCD = FF2REC.XPLCD;
            if (FF01M004.XPLCD in XPLTBL.XPLCD)
              FF01M004.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify Style Group, and relationship between Style Group/*/
   /* Category/Line.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M004.SYBSTGNB != " " /* Style Group entered*/
     && FF01M004.SYBSTGNB != "*") /* Not Equal to wildcard*/

      set FF3REC empty; /* Clear row storage*/

      FF3REC.YSMXDV = "*";
      FF3REC.SYBSTGNB = FF01M004.SYBSTGNB;
      FF3REC.YPGCD = FF01M004.YPGCD;
      FF3REC.XLCCD = "*";
      TA1REC.TA1PGMNM = "FF01S05";

      XSFFS22(); /* Query DFCAST.VFFSTY01*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FF01S70(); /* verify style grp against vsyclr01*/
      else
        if (FF01M004.XPCCD != "*" /* Not equal to wildcard*/
         && FF01M004.XPCCD != " ") /* Category entered*/
          if (FF3REC.XPCCD != FF01M004.XPCCD)
            FFWREC.XXXMODID = "S05"; /* Module identification*/
            converseLib.validationFailed(203); /* Inconsistent relationship*/
            set FF01M004.XPCCD cursor, bold; /* Highlight*/
            set FF01M004.SYBSTGNB bold; /* Highlight*/
          end
        end
        if (FF01M004.XPLCD != "*" /* Not Equal to wildcard*/
         && FF01M004.XPLCD != " ") /* Line entered*/
          if (FF3REC.XPLCD != FF01M004.XPLCD)
            FFWREC.XXXMODID = "S05"; /* Module identification*/
            converseLib.validationFailed(203); /* Inconsistent relationship*/
            set FF01M004.XPLCD cursor, bold; /* Highlight*/
            set FF01M004.SYBSTGNB bold; /* Highlight*/
          end
        end
        FF01M004.SYBSTGNM = FF3REC.SYBSTGNM;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify report selection (s).  Valid selection = 's'.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M004.FF01MCLT > " ") /* closeout selection*/
      if (FF01M004.FF01MCLT != "S")
        FFWREC.XXXMODID = "S05"; /* Module ID*/
        set FF01M004.FF01MCLT cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Invalid value msg*/
      end
    end

    if (FF01M004.FF01MBGD > " ") /* bgrade selection*/
      if (FF01M004.FF01MBGD != "S")
        FFWREC.XXXMODID = "S05"; /* Module ID*/
        set FF01M004.FF01MBGD cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Invalid value msg*/
      end
    end

    if (FF01M004.FF01MINM > " ") /* inline/makeup selection*/
      if (FF01M004.FF01MINM != "S")
        FFWREC.XXXMODID = "S05"; /* Module ID*/
        set FF01M004.FF01MINM cursor, bold; /* Highlight*/
        converseLib.validationFailed(41); /* Invalid value msg*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify only one Report Sequence Level was entered.*/
   /* ------------------------------------------------------------*/

  if (FF01M004.FF01MTYP == "S" /* Type Sequence*/
   && FF01M004.FF01MLIN == "S") /* & Line Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
    set FF01M004.FF01MLIN bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MTYP == "S" /* Type Sequence*/
   && FF01M004.FF01MCTG == "S") /* & Cat Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
    set FF01M004.FF01MCTG bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MTYP == "S" /* Type Sequence*/
   && FF01M004.FF01MSGP == "S") /* & Sty Grp Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
    set FF01M004.FF01MSGP bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MTYP == "S" /* Type Sequence*/
   && FF01M004.FF01MSTY == "S") /* & Sty clr Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
    set FF01M004.FF01MSTY bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MLIN == "S" /* Line Sequence*/
   && FF01M004.FF01MCTG == "S") /* & Cat Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MLIN cursor, bold; /* Highlight*/
    set FF01M004.FF01MCTG bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MLIN == "S" /* Line Sequence*/
   && FF01M004.FF01MSGP == "S") /* & Sty Grp Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MLIN cursor, bold; /* Highlight*/
    set FF01M004.FF01MSGP bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MLIN == "S" /* Line Sequence*/
   && FF01M004.FF01MSTY == "S") /* & Sty clr Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MLIN cursor, bold; /* Highlight*/
    set FF01M004.FF01MSTY bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MCTG == "S" /* Cat Sequence*/
   && FF01M004.FF01MSGP == "S") /* & Sty Grp Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MCTG cursor, bold; /* Highlight*/
    set FF01M004.FF01MSGP bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MCTG == "S" /* Cat Sequence*/
   && FF01M004.FF01MSTY == "S") /* & Sty clr Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MCTG cursor, bold; /* Highlight*/
    set FF01M004.FF01MSTY bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MSGP == "S" /* style group sequence*/
   && FF01M004.FF01MSTY == "S") /* & Sty clr Sequence selected*/
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MSGP cursor, bold; /* Highlight*/
    set FF01M004.FF01MSTY bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid value msg*/
  end

  if (FF01M004.FF01MSTY != "S" /* No report sequence selected*/
   && FF01M004.FF01MSGP != "S" 
   && FF01M004.FF01MCTG != "S" 
   && FF01M004.FF01MLIN != "S" 
   && FF01M004.FF01MTYP != "S")
    FFWREC.XXXMODID = "S05"; /* Module ID*/
    set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
    set FF01M004.FF01MLIN bold; /* Highlight*/
    set FF01M004.FF01MCTG bold; /* Highlight*/
    set FF01M004.FF01MSGP bold; /* Highlight*/
    set FF01M004.FF01MSTY bold; /* Highlight*/
    converseLib.validationFailed(154); /* no selection made msg*/
  end


   /* ---------------------------------------------------------------------*/
   /* This logic validates the relationship between the sequence by field*/
   /* with the selection of a type, line, category, or style group.*/
   /* ---------------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FF01M004.FF01MCTG == "S") /* cat level selected*/
      if (FF01M004.SYBSTGNB == " ") /* no style grp nbr entered*/
        /* valid selection*/
      else
        if (FF01M004.SYBSTGNB == "*") /* all style grp nbrs wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.SYBSTGNB bold; /* Highlight*/
          set FF01M004.FF01MCTG cursor, bold; /* Highlight*/
        end
      end
    end

    if (FF01M004.FF01MLIN == "S") /* line level selected*/
      if (FF01M004.SYBSTGNB == " ") /* no style grp nbr entered*/
        /* valid selection*/
      else
        if (FF01M004.SYBSTGNB == "*") /* all style grp nbrs wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.SYBSTGNB bold; /* Highlight*/
          set FF01M004.FF01MLIN cursor, bold; /* Highlight*/
        end
      end
      if (FF01M004.XPCCD == " ") /* no catg codes entered*/
        /* valid selection*/
      else
        if (FF01M004.XPCCD == "*") /* all catg codes wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.XPCCD bold; /* Highlight*/
          set FF01M004.FF01MLIN cursor, bold; /* Highlight*/
        end
      end
    end

    if (FF01M004.FF01MTYP == "S") /* type group level selected*/
      if (FF01M004.SYBSTGNB == " ") /* no style grp nbr entered*/
        /* valid selection*/
      else
        if (FF01M004.SYBSTGNB == "*") /* all style grp nbrs wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.SYBSTGNB bold; /* Highlight*/
          set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
        end
      end
      if (FF01M004.XPCCD == " ") /* no catg codes entered*/
        /* valid selection*/
      else
        if (FF01M004.XPCCD == "*") /* all catg codes wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.XPCCD bold; /* Highlight*/
          set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
        end
      end
      if (FF01M004.XPLCD == " ") /* no line codes entered*/
        /* valid selection*/
      else
        if (FF01M004.XPLCD == "*") /* all line codes wanted*/
          /* valid selection*/
        else
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          converseLib.validationFailed(203); /* inconsistent relationship*/
          set FF01M004.XPLCD bold; /* Highlight*/
          set FF01M004.FF01MTYP cursor, bold; /* Highlight*/
        end
      end
    end
  end


   /* ---------------------------------------------------------------------*/
   /* This logic applies to the bgrade and closeout reports only.  This*/
   /* section verifies the relationship between report type (bgrade or*/
   /* closeout), sequence by, and begin mo.  A bgrade or closeout report at*/
   /* the style group or style color level can only be requested if all 12*/
   /* months are historical months.  If any one of the report months are in*/
   /* the future then a cat, line, or type report must be requested.*/
   /* If bgrade or closeout report type selected*/
   /* if style group or style color sequence by requested*/
   /* add 12 months to the begin month, yymm*/
   /* get billing cutoff date and adjusted to obtain the last billing*/
   /* cutoff period*/
   /* if report end date > last billing cutoff period*/
   /* highlight fields and display message.*/
   /* ---------------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FF01M004.FF01MCLT == "S" /* closeout rept requested*/
     || FF01M004.FF01MBGD == "S") /* bgrade rept requested*/
      if (FF01M004.FF01MSGP == "S" /* style group requested*/
       || FF01M004.FF01MSTY == "S") /* style color requested*/
        FF01W05.FF01WBMT = FF01M004.FF01MBMY;
        FF01W05.FF01WEMO = FF01M004.FF01MBMY;
        FF01W05.FF01WEMM = 11 + FF01W05.FF01WBMM; /* get rept ending yymm*/
        if (FF01W05.FF01WEMM > 12)
          FF01W05.FF01WEMM = FF01W05.FF01WEMM - 12;
          if (FF01W05.FF01WEYY == 99)
            FF01W05.FF01WEYY = 00;
          else
            FF01W05.FF01WEYY = FF01W05.FF01WBYY + 1;
          end
        end
        FF01W01.RPT-END-YY = FF01W05.FF01WEYY;
        FF01W01.RPT-END-MM = FF01W05.FF01WEMM;
        if (FF01W05.FF01WEYY < 70)
          FF01W01.RPT-END-CC = 20;
        else
          FF01W01.RPT-END-CC = 19;
        end
        FF01S31(); /* obtain ff-ivc-cutoff-dt*/
        FF01W05.FF01WCDT = FF1REC.FF1IVCDT;
        if (FF01W05.FF01WCDD > 25)

        else
          FF01W05.FF01WCMM = FF01W05.FF01WCMM - 1;
          if (FF01W05.FF01WCMM < 1)
            FF01W05.FF01WCMM = 12;
            if (FF01W05.FF01WCYY == 00)
              FF01W05.FF01WCYY = 99;
              FF01W05.FF01WCCC = FF01W05.FF01WCCC - 1;
            else
              FF01W05.FF01WCYY = FF01W05.FF01WCYY - 1;
            end
          end
        end
        if (FF01W01.RPT-END-CCYYMM > FF01W05.FF01WCYM)
          FFWREC.XXXMODID = "S05"; /* Module ID*/
          if (FF01M004.FF01MSGP == "S")
            set FF01M004.FF01MSGP cursor, bold; /* Highlight*/
          else
            set FF01M004.FF01MSTY cursor, bold; /* Highlight*/
          end
          if (FF01M004.FF01MCLT == "S")
            set FF01M004.FF01MCLT bold; /* Highlight*/
          end
          if (FF01M004.FF01MBGD == "S")
            set FF01M004.FF01MBGD bold; /* Highlight*/
          end
          converseLib.validationFailed(451); /* Invalid requested rept*/
        end
      end
    end
  end

end // end FF01S05

// Verify parameters
Function FF01S06()
   /* ------------------------------------------------------------*/
   /* Verify special features code.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.XFCCD > " ") /* Feature was entered*/
    if (FF01M005.XFCCD in XFCTBL.XFCCD           /* Code in table*/
     && XFCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XFCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M005.XFCABRV = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M005.XFCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S06"; /* Module identification*/
      set FF01M005.XFCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M005.XFCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M005.YPGCD == "*") /* Wildcard type group*/
    FF01M005.YPGABRV = "ALL";
  else
    if (FF01M005.YPGCD > " ") /* Type group was entered*/
      if (FF01M005.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M005.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M005.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S06"; /* Module identification*/
        set FF01M005.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M005.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M005.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M005.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S06"; /* Module identification*/
    set FF01M005.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S06"; /* Module identification*/
    set FF01M005.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end


end // end FF01S06

// Verify parameters
Function FF01S07()
   /* ------------------------------------------------------------*/
   /* Verify the line code.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.XPLCD == "*") /* Wildcard line code*/
    FF01M006.XPLABRV = "ALL";
  else
    if (FF01M006.XPLCD > " ") /* Line was entered*/
      if (FF01M006.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M006.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M006.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S07"; /* Module identification*/
        set FF01M006.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M006.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify type group code.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.YPGCD == "*") /* Wildcard type group*/
    FF01M006.YPGABRV = "ALL";
  else
    if (FF01M006.YPGCD > " ") /* Type group was entered*/
      if (FF01M006.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M006.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M006.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S07"; /* Module identification*/
        set FF01M006.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M006.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify division group code.*/
   /* ------------------------------------------------------------*/

  if (FF01M006.YSMXDV > " ") /* Div group was entered*/
    set YSMREC empty;
    YSMREC.YSMSUMCD = FF01M006.YSMXDV;
    TA1REC.TA1PGMNM = "FF01";
    XSFFS20();
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        FF01M006.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF01M006.YSMSMDSC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "S07"; /* Module identification*/
          set FF01M006.YSMXDV cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF01M006.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S07"; /* Module identification*/
            set FF01M006.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF01M006.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S07"; /* Module identification*/
            set FF01M006.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* Indicate not available*/
          end
        end
      end
    end
  else
    FF01M006.YSMSMDSC = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZMONTH = 6; /* Beginning month offset*/
  FFZREC.FFZBYYMM = FF01M006.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M006.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S07"; /* Module identification*/
    set FF01M006.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S07"; /* Module identification*/
    set FF01M006.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M006.XPLABRV != " " /* Line valid*/
     && FF01M006.YPGABRV != " " /* & type grp valid*/
     && FF01M006.YSMSMDSC != " ") /* & div grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.XPLCD = FF01M006.XPLCD;
      FF2REC.XPCCD = "*";
      FF2REC.YPGCD = FF01M006.YPGCD;
      FF2REC.YSMXDV = FF01M006.YSMXDV;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S07"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M006.YSMXDV cursor, bold; /* Highlight*/
        set FF01M006.YPGCD bold; /* Highlight*/
        set FF01M006.XPLCD bold; /* Highlight*/
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S07

// Verify parameters
Function FF01S08()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPCCD > " ") /* Category was entered*/
    if (FF01M007.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M007.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M007.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S08"; /* Module identification*/
      set FF01M007.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M007.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.XPLCD == "*") /* Wildcard line code*/
    FF01M007.XPLABRV = "ALL";
  else
    if (FF01M007.XPLCD > " ") /* Line was entered*/
      if (FF01M007.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M007.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M007.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S08"; /* Module identification*/
        set FF01M007.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M007.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify type group code.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.YPGCD == "*") /* Wildcard type group*/
    FF01M007.YPGABRV = "ALL";
  else
    if (FF01M007.YPGCD > " ") /* Type group was entered*/
      if (FF01M007.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M007.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M007.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S08"; /* Module identification*/
        set FF01M007.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M007.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify division group code.*/
   /* ------------------------------------------------------------*/

  if (FF01M007.YSMXDV > " ") /* Div group was entered*/
    set YSMREC empty;
    YSMREC.YSMSUMCD = FF01M007.YSMXDV;
    TA1REC.TA1PGMNM = "FF01";
    XSFFS20();
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        FF01M007.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF01M007.YSMSMDSC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "S08"; /* Module identification*/
          set FF01M007.YSMXDV cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF01M007.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S08"; /* Module identification*/
            set FF01M007.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF01M007.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S08"; /* Module identification*/
            set FF01M007.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* Indicate not available*/
          end
        end
      end
    end
  else
    FF01M007.YSMSMDSC = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZMONTH = 6; /* Beginning month offset*/
  FFZREC.FFZBYYMM = FF01M007.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M007.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S08"; /* Module identification*/
    set FF01M007.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S08"; /* Module identification*/
    set FF01M007.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M007.XPLABRV != " " /* Line valid*/
     && FF01M007.YPGABRV != " " /* & type grp valid*/
     && FF01M007.YSMSMDSC != " ") /* & div grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.XPLCD = FF01M007.XPLCD;
      FF2REC.XPCCD = "*";
      FF2REC.YPGCD = FF01M007.YPGCD;
      FF2REC.YSMXDV = FF01M007.YSMXDV;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S08"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M007.YSMXDV cursor, bold; /* Highlight*/
        set FF01M007.YPGCD bold; /* Highlight*/
        set FF01M007.XPLCD bold; /* Highlight*/
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S08

// Verify parameters
Function FF01S10()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPCCD > " ") /* Category was entered*/
    if (FF01M008.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M008.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M008.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S10"; /* Module identification*/
      set FF01M008.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M008.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.XPLCD == "*") /* Wildcard line code*/
    FF01M008.XPLABRV = "ALL";
  else
    if (FF01M008.XPLCD > " ") /* Line was entered*/
      if (FF01M008.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M008.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M008.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S10"; /* Module identification*/
        set FF01M008.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M008.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.YPGCD == "*") /* Wildcard type group*/
    FF01M008.YPGABRV = "ALL";
  else
    if (FF01M008.YPGCD > " ") /* Type group was entered*/
      if (FF01M008.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M008.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M008.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S10"; /* Module identification*/
        set FF01M008.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M008.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If division group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M008.YSMXDV > " ") /* Div group was entered*/
    set YSMREC empty;
    YSMREC.YSMSUMCD = FF01M008.YSMXDV;
    TA1REC.TA1PGMNM = "FF01";
    XSFFS20();
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        FF01M008.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          FF01M008.YSMSMDSC = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "S10"; /* Module identification*/
          set FF01M008.YSMXDV cursor, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate invalid*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            FF01M008.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S10"; /* Module identification*/
            set FF01M008.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(47); /* Indicate not available*/
          else
            FF01M008.YSMSMDSC = " "; /* Abbreviation*/
            FFWREC.XXXMODID = "S10"; /* Module identification*/
            set FF01M008.YSMXDV cursor, bold; /* Highlight*/
            converseLib.validationFailed(1); /* Indicate not available*/
          end
        end
      end
    end
  else
    FF01M008.YSMSMDSC = " "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M008.XPCABRV != " " /* Category valid*/
     && FF01M008.XPLABRV != " " /* & line valid*/
     && FF01M008.YPGABRV != " " /* & type grp valid*/
     && FF01M008.YSMSMDSC != " ") /* & div grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M008.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M008.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M008.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M008.YPGCD;
      FF2REC.YSMXDV = FF01M008.YSMXDV;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S10"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M008.YSMXDV cursor, bold; /* Highlight*/
        set FF01M008.YPGCD bold; /* Highlight*/
        if (FF01M008.XPLCD != " ")
          set FF01M008.XPLCD bold; /* Highlight*/
        end
        if (FF01M008.XPCCD != " ")
          set FF01M008.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M008.XPLCD)
          FF01M008.XPLCD = FF2REC.XPLCD;
          if (FF01M008.XPLCD in XPLTBL.XPLCD)
            FF01M008.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S10

// Verify parameters
Function FF01S12()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPCCD > " ") /* Category was entered*/
    if (FF01M014.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M014.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M014.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FF01M014.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M014.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.XPLCD == "*") /* Wildcard line code*/
    FF01M014.XPLABRV = "ALL";
  else
    if (FF01M014.XPLCD > " ") /* Line was entered*/
      if (FF01M014.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M014.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M014.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S12"; /* Module identification*/
        set FF01M014.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M014.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M014.YPGCD == "*") /* Wildcard type group*/
    FF01M014.YPGABRV = "ALL";
  else
    if (FF01M014.YPGCD > " ") /* Type group was entered*/
      if (FF01M014.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M014.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M014.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S12"; /* Module identification*/
        set FF01M014.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M014.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M014.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M014.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S12"; /* Module identification*/
    set FF01M014.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S12"; /* Module identification*/
    set FF01M014.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC == "0" /* Beginning date valid*/
   && FFZREC.FFZENDRC == "0") /* Ending date valid*/
    if (FFZREC.FFZBEGMO < XX0XW01.XX0XWCYM) /* beg date less than curr*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FF01M014.FF01MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(151); /* Date is out of range*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M014.XPCABRV != " " /* Category valid*/
     && FF01M014.XPLABRV != " " /* & line valid*/
     && FF01M014.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M014.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M014.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M014.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M014.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S12"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M014.YPGCD cursor, bold; /* Highlight*/
        if (FF01M014.XPLCD != " ")
          set FF01M014.XPLCD bold; /* Highlight*/
        end
        if (FF01M014.XPCCD != " ")
          set FF01M014.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M014.XPLCD)
          FF01M014.XPLCD = FF2REC.XPLCD;
          if (FF01M014.XPLCD in XPLTBL.XPLCD)
            FF01M014.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S12

// Verify parameters
Function FF01S13()
   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZMONTH = 6; /* Beginning month offset*/
  FFZREC.FFZBYYMM = FF01M009.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M009.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S13"; /* Module identification*/
    set FF01M009.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S13"; /* Module identification*/
    set FF01M009.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end


end // end FF01S13

// Verify parameters
Function FF01S14()
   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZMONTH = 6; /* Beginning month offset*/
  FFZREC.FFZBYYMM = FF01M010.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M010.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S14"; /* Module identification*/
    set FF01M010.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S14"; /* Module identification*/
    set FF01M010.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end


end // end FF01S14

// Verify parameters
Function FF01S17()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPCCD > " ") /* Category was entered*/
    if (FF01M011.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M011.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M011.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S17"; /* Module identification*/
      set FF01M011.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M011.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.XPLCD == "*") /* Wildcard line code*/
    FF01M011.XPLABRV = "ALL";
  else
    if (FF01M011.XPLCD > " ") /* Line was entered*/
      if (FF01M011.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M011.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M011.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S17"; /* Module identification*/
        set FF01M011.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M011.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M011.YPGCD == "*") /* Wildcard type group*/
    FF01M011.YPGABRV = "ALL";
  else
    if (FF01M011.YPGCD > " ") /* Type group was entered*/
      if (FF01M011.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M011.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M011.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S17"; /* Module identification*/
        set FF01M011.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M011.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M011.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M011.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S17"; /* Module identification*/
    set FF01M011.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S17"; /* Module identification*/
    set FF01M011.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M011.XPCABRV != " " /* Category valid*/
     && FF01M011.XPLABRV != " " /* & line valid*/
     && FF01M011.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M011.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M011.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M011.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M011.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S17"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M011.YPGCD cursor, bold; /* Highlight*/
        if (FF01M011.XPLCD != " ")
          set FF01M011.XPLCD bold; /* Highlight*/
        end
        if (FF01M011.XPCCD != " ")
          set FF01M011.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M011.XPLCD)
          FF01M011.XPLCD = FF2REC.XPLCD;
          if (FF01M011.XPLCD in XPLTBL.XPLCD)
            FF01M011.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S17

// Verify parameters
Function FF01S18()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPCCD > " ") /* Category was entered*/
    if (FF01M012.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M012.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M012.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S18"; /* Module identification*/
      set FF01M012.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M012.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.XPLCD == "*") /* Wildcard line code*/
    FF01M012.XPLABRV = "ALL";
  else
    if (FF01M012.XPLCD > " ") /* Line was entered*/
      if (FF01M012.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M012.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M012.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S18"; /* Module identification*/
        set FF01M012.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M012.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify type group.*/
   /* ------------------------------------------------------------*/

  if (FF01M012.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
    FF01M012.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
  else
    if (FF01M012.YPGCD == "*")
      FF01M012.YPGABRV = "ALL"; /* Abbreviation*/
    else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate invalid.*/
    /* ------------------------------------------------------------*/
      FF01M012.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S18"; /* Module identification*/
      set FF01M012.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M012.XPCABRV != " " /* Category valid*/
     && FF01M012.XPLABRV != " " /* & line valid*/
     && FF01M012.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M012.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M012.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M012.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M012.YPGCD;
      FF2REC.YSMXDV = "10";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S18"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M012.YPGCD bold; /* Highlight*/
        if (FF01M012.XPLCD != " ")
          set FF01M012.XPLCD bold; /* Highlight*/
        end
        if (FF01M012.XPCCD != " ")
          set FF01M012.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M012.XPLCD)
          FF01M012.XPLCD = FF2REC.XPLCD;
          if (FF01M012.XPLCD in XPLTBL.XPLCD)
            FF01M012.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M012.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M012.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S18"; /* Module identification*/
    set FF01M012.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S18"; /* Module identification*/
    set FF01M012.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC == "0" /* Beginning date valid*/
   && FFZREC.FFZENDRC == "0") /* Ending date valid*/
    if (FFZREC.FFZBEGMO < XX0XW01.XX0XWCYM) /* beg date less than curr*/
      FFWREC.XXXMODID = "S18"; /* Module identification*/
      set FF01M012.FF01MBMO cursor, bold; /* Highlight*/
      converseLib.validationFailed(151); /* Date is out of range*/
    end
  end

   /* verify that a selected model header exists for range entered*/
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF01S40(); /* open pmhdr cursor*/
    FF01S41(); /* fetch pmhdr cursor*/
    if (SQLCA.VAGen_SQLCODE == 100)
      FFWREC.XXXMODID = "S18"; /* Module identification*/
      converseLib.validationFailed(249); /* Inconsistent relationship*/
      set FF01M012.FF01MBMO cursor, bold; /* Highlight*/
      set FF01M012.FF01MXMO cursor, bold; /* Highlight*/
    end
    FF01S42(); /* close pmhdr cursor*/
  end

end // end FF01S18

// Select & open FF2REC "S1" csr
Function FF01S20()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY RELATIONSHIP      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S20

// Fetch next FF2REC "S1" csr
Function FF01S21()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S21

// Close FF2REC "S1" csr
Function FF01S22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S22

// Verify parameters
Function FF01S24()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPCCD > " ") /* Category was entered*/
    if (FF01M015.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M015.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M015.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S24"; /* Module identification*/
      set FF01M015.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M015.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.XPLCD == "*") /* Wildcard line code*/
    FF01M015.XPLABRV = "ALL";
  else
    if (FF01M015.XPLCD > " ") /* Line was entered*/
      if (FF01M015.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M015.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M015.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S24"; /* Module identification*/
        set FF01M015.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M015.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M015.YPGCD == "*") /* Wildcard type group*/
    FF01M015.YPGABRV = "ALL";
  else
    if (FF01M015.YPGCD > " ") /* Type group was entered*/
      if (FF01M015.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M015.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M015.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S24"; /* Module identification*/
        set FF01M015.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M015.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Season Code(s) if entered.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01W-SESN-ENTERED == "Y")
    if (FF01M015.FF01SES1 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M015.FF01SES1;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        FFWREC.XXXMODID = "S24";
        set FF01M015.FF01SES1 cursor, bold;
      end
    end
    if (FF01M015.FF01SES2 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M015.FF01SES2;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        FFWREC.XXXMODID = "S24";
        set FF01M015.FF01SES2 cursor, bold;
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01W-DATE-ENTERED == "Y")
    set FFZREC empty; /* Subroutine parameters*/
    FFZREC.FFZSRANG = "Y";
    FFZREC.FFZBYYMM = FF01M015.FF01MBMO; /* Beginning date*/
    FFZREC.FFZEYYMM = FF01M015.FF01MXMO; /* Ending date*/

    XSFFS30(); /* Verify the range*/

     /* ------------------------------------------------------------*/
      /* If not zero return code, indicate missing or invalid.*/
     /* ------------------------------------------------------------*/

    if (FFZREC.FFZENDRC != "0") /* Ending date error*/
      FFWREC.XXXMODID = "S24"; /* Module identification*/
      set FF01M015.FF01MXMO cursor, bold; /* Highlight*/
      if (FFZREC.FFZENDRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          converseLib.validationFailed(151); /* Date is out of range*/
        end
      end
    end

    if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
      FFWREC.XXXMODID = "S24"; /* Module identification*/
      set FF01M015.FF01MBMO cursor, bold; /* Highlight*/
      if (FFZREC.FFZBEGRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          converseLib.validationFailed(151); /* Date is out of range*/
        end
      end
    end

    if (FFZREC.FFZBEGRC == "0" /* Beginning date valid*/
     && FFZREC.FFZENDRC == "0") /* Ending date valid*/
      if (FFZREC.FFZBEGMO < XX0XW01.XX0XWCYM) /* beg date less than curr*/
        FFWREC.XXXMODID = "S12"; /* Module identification*/
        set FF01M015.FF01MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M015.XPCABRV != " " /* Category valid*/
     && FF01M015.XPLABRV != " " /* & line valid*/
     && FF01M015.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M015.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M015.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M015.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M015.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S24"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M015.YPGCD cursor, bold; /* Highlight*/
        if (FF01M015.XPLCD != " ")
          set FF01M015.XPLCD bold; /* Highlight*/
        end
        if (FF01M015.XPCCD != " ")
          set FF01M015.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M015.XPLCD)
          FF01M015.XPLCD = FF2REC.XPLCD;
          if (FF01M015.XPLCD in XPLTBL.XPLCD)
            FF01M015.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S24

// Verify the parameters
Function FF01S27()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPCCD > " ") /* Category was entered*/
    if (FF01M016.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M016.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M016.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      set FF01M016.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M016.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.XPLCD == "*") /* Wildcard line code*/
    FF01M016.XPLABRV = "ALL";
  else
    if (FF01M016.XPLCD > " ") /* Line was entered*/
      if (FF01M016.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M016.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M016.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S27"; /* Module identification*/
        set FF01M016.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M016.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M016.YPGCD == "*") /* Wildcard type group*/
    FF01M016.YPGABRV = "ALL";
  else
    if (FF01M016.YPGCD > " ") /* Type group was entered*/
      if (FF01M016.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M016.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M016.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S24"; /* Module identification*/
        set FF01M016.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M016.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Season Code(s) if entered.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01W-SESN-ENTERED == "Y")
    if (FF01M016.FF01SES1 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M016.FF01SES1;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        FFWREC.XXXMODID = "S24";
        set FF01M016.FF01SES1 cursor, bold;
      end
    end
    if (FF01M016.FF01SES2 != "    ")
      FF01W01.FF01W-SESN-YR = FF01M016.FF01SES2;
      FF01S-VAL-SEASON();
      if (converseVar.validationMsgNum != 0)
        FFWREC.XXXMODID = "S24";
        set FF01M016.FF01SES2 cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  if (FF01W01.FF01W-DATE-ENTERED == "Y")
    set FFZREC empty; /* Subroutine parameters*/
    FFZREC.FFZSRANG = "Y";
    FFZREC.FFZBYYMM = FF01M016.FF01MBMO; /* Beginning date*/
    FFZREC.FFZEYYMM = FF01M016.FF01MXMO; /* Ending date*/

    XSFFS30(); /* Verify the range*/

     /* ------------------------------------------------------------*/
      /* If not zero return code, indicate missing or invalid.*/
     /* ------------------------------------------------------------*/

    if (FFZREC.FFZENDRC != "0") /* Ending date error*/
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      set FF01M016.FF01MXMO cursor, bold; /* Highlight*/
      if (FFZREC.FFZENDRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          converseLib.validationFailed(151); /* Date is out of range*/
        end
      end
    end

    if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
      FFWREC.XXXMODID = "S24"; /* Module identification*/
      set FF01M016.FF01MBMO cursor, bold; /* Highlight*/
      if (FFZREC.FFZBEGRC == "1") /* No date entered*/
        converseLib.validationFailed(8); /* Required field missing*/
      else
        if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
          converseLib.validationFailed(17); /* Invalid date entered*/
        else
          converseLib.validationFailed(151); /* Date is out of range*/
        end
      end
    end

    if (FFZREC.FFZBEGRC == "0" /* Beginning date valid*/
     && FFZREC.FFZENDRC == "0") /* Ending date valid*/
      if (FFZREC.FFZBEGMO < XX0XW01.XX0XWCYM) /* beg date less than curr*/
        FFWREC.XXXMODID = "S12"; /* Module identification*/
        set FF01M016.FF01MBMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M016.XPCABRV != " " /* Category valid*/
     && FF01M016.XPLABRV != " " /* & line valid*/
     && FF01M016.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M016.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M016.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M016.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M016.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S27"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M016.YPGCD cursor, bold; /* Highlight*/
        if (FF01M016.XPLCD != " ")
          set FF01M016.XPLCD bold; /* Highlight*/
        end
        if (FF01M016.XPCCD != " ")
          set FF01M016.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M016.XPLCD)
          FF01M016.XPLCD = FF2REC.XPLCD;
          if (FF01M016.XPLCD in XPLTBL.XPLCD)
            FF01M016.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end

   /* verify that a selected model header exists for range entered*/
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    FF01S40(); /* open pmhdr cursor*/
    FF01S41(); /* fetch pmhdr cursor*/
    if (SQLCA.VAGen_SQLCODE == 100)
      FFWREC.XXXMODID = "S27"; /* Module identification*/
      converseLib.validationFailed(249); /* Inconsistent relationship*/
      set FF01M016.FF01MBMO cursor, bold; /* Highlight*/
      set FF01M016.FF01MXMO cursor, bold; /* Highlight*/
    end
    FF01S42(); /* close pmhdr cursor*/
  end
end // end FF01S27

// Verify parameters
Function FF01S29()
   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.YPGCD == "*") /* Wildcard type group*/
    FF01M018.YPGABRV = "ALL";
  else
    if (FF01M018.YPGCD > " ") /* Type group was entered*/
      if (FF01M018.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M018.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M018.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S29"; /* Module identification*/
        set FF01M018.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M018.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M018.XPLCD == "*") /* Wildcard line code*/
    FF01M018.XPLABRV = "ALL";
  else
    if (FF01M018.XPLCD > " ") /* Line was entered*/
      if (FF01M018.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M018.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M018.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S29"; /* Module identification*/
        set FF01M018.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M018.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.The beginning month of the range must*/
   /* be greater than the main buy month.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "N";
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FF01M018.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M018.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S29"; /* Module identification*/
    set FF01M018.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S29"; /* Module identification*/
    set FF01M018.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end


end // end FF01S29

// Verify parameters
Function FF01S30()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPCCD > " ") /* Category was entered*/
    if (FF01M019.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M019.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M019.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S30"; /* Module identification*/
      set FF01M019.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M019.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.YPGCD == "*") /* Wildcard type group*/
    FF01M019.YPGABRV = "ALL";
  else
    if (FF01M019.YPGCD > " ") /* Type group was entered*/
      if (FF01M019.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M019.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M019.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S30"; /* Module identification*/
        set FF01M019.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M019.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPLCD == "*") /* Wildcard line code*/
    FF01M019.XPLABRV = "ALL";
  else
    if (FF01M019.XPLCD > " ") /* Line was entered*/
      if (FF01M019.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M019.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M019.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S30"; /* Module identification*/
        set FF01M019.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M019.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "N";
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FF01M019.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M019.FF01MXMO; /* Ending date*/

  XSFFS35(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S30"; /* Module identification*/
    set FF01M019.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S30"; /* Module identification*/
    set FF01M019.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between line/type group/category*/
   /* ------------------------------------------------------------*/

  if (FF01M019.XPCCD > "  " /* Category was entered*/
   && FF01M019.YPGCD > "  ") /* Type group was entered*/
    FF01S01(); /* Verify relationship*/

    if (FF01M019.XPLCD == "  ")
      FF01M019.XPLCD = FF2REC.XPLCD;
      if (FF2REC.XPLCD in XPLTBL.XPLCD)
        FF01M019.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    end

    if (VAGen_SQLCODE == +100 /* Record not found*/
     || FF2REC.XPLCD != FF01M019.XPLCD) /* line code not match*/

      FFWREC.XXXMODID = "S30"; /* Module identification*/
      set FF01M019.XPLCD cursor, bold; /* Highlight*/
      set FF01M019.YPGCD bold; /* Highlight*/
      set FF01M019.XPCCD bold; /* Highlight*/
      converseLib.validationFailed(203); /* Invalid date entered*/

    end
  end

end // end FF01S30

// get ff-ivc-cutoff-dt, vffctl01
Function FF01S31()
   /* ----------------------------------------------------------------------*/
   /* This subroutine gets the invoice cutoff date from dfcast.vffctl01*/
   /* ----------------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

       /* Next sentence*/

    end
  else

    /* ------------------------------------------------------------*/
    /* indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    FFWREC.XXXMODID = "S31"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
    TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* exit to display map*/

  end


end // end FF01S31

// Edit Rpt Rqst Dte for SRI Rpt
Function FF01S32()
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine will edit the beginning date in YYMM format*/
   /* for the Sales/Receipts/Inventory Report.*/


   /* The beginning date cannot be a date before January 1987,*/
   /* or later than 2 years from the current date.*/

   /* The name of the calling process must be moved to TA1PGMNM*/
   /* in TA1REC, for Error Diagnosis Reporting.*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***  FFZREC.FFZBYYMM, FFZREC.FFZEYYMM:                  ****/
   /* ***      The range to be edited must be in YYMM format. ****/
   /* ***                                                     ****/
   /* ***  TA1REC.TA1PGMNM: The name of the calling process,  ****/
   /* ***                   for Error Diagnosis Reporting.    ****/

   /* If any error is found during editing, it is indicated by*/
   /* the completion code in FFZREC.FFZBEGRC.*/

   /* *** The return code must indicate normal return.        ****/
   /* ***                                                     ****/
   /* ***   FFZREC.FFZBEGRC:                                  ****/
   /* ***      '0' = Normal return                            ****/
   /* ***      '1' = No date in the field                     ****/
   /* ***      '2' = Invalid date entered                     ****/
   /* ***      '3' = Date out of range                        ****/
   /* ***                                                     ****/
   /* ***  FFZREC.FFZBEGMO:                                   ****/
   /* ***      The date will be returned in CCYYMM format.    ****/
   /* ***                                                     ****/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Initialize the return codes and return dates.*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGRC = "0"; /* Beginning date return code*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date is zero.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGMO == 0) /* Beginning date missing*/
    FFZREC.FFZBEGRC = "1"; /* Indicate no beginning date*/
  end

   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/

  TA2REC.TA2GRGYM = FFZREC.FFZBYYMM; /* Beginning yymm to be validatd*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      FFZREC.FFZBEGMO = TA2REC.TA2GRCYM; /* Convert beginning month*/
    else
      FFZREC.FFZBEGRC = "2"; /* Indicate invalid date entered*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF01S32 EDIT THE BEGINNING MONTH";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "X30"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end


   /* -------------------------------------------------------*/
   /* Obtain the current date*/
   /* -------------------------------------------------------*/

  XX0XS01(); /* Obtain the current date*/

   /* ------------------------------------------------------------*/
   /* Obtain the qualified range which will be used to verify*/
   /* the dates passed over.*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZWRNG = XX0XW01.XX0XWCYM; /* move current date to*/
                                          /* range field*/
  FFZREC.FFZWRYY = FFZREC.FFZWRYY + 2; /* Curr Year + 2*/

   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGRC == "2") /* Invalid beginning date*/
    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate error if the date is out of allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGMO < "198701" /* Less than valid starting mo.*/
   || FFZREC.FFZBEGMO > FFZREC.FFZWRNG) /* or Greater than valid rang*/

    FFZREC.FFZBEGRC = "3"; /* Indicate invalid date*/

  end


   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGRC == "3") /* Beginning date out of range*/
    return; /* Return to calling process*/

  end

  return; /* Return to calling process*/
end // end FF01S32

// Verify parameters
Function FF01S33()

   /* ------------------------------------------------------------*/
   /* Edit Variable Fields on the Pre-Build Qty Report*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* If Category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.XPCCD == "*") /* Wildcard line code*/
    FF01M017.XPCABRV = "ALL";
  else
    if (FF01M017.XPCCD > " ") /* Line was entered*/
      if (FF01M017.XPCCD in XPCTBL.XPCCD           /* Code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M017.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M017.XPCABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S33"; /* Module identification*/
        set FF01M017.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M017.XPCABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.XPLCD == "*") /* Wildcard line code*/
    FF01M017.XPLABRV = "ALL";
  else
    if (FF01M017.XPLCD > " ") /* Line was entered*/
      if (FF01M017.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M017.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M017.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S33"; /* Module identification*/
        set FF01M017.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Invalid Value Msg*/
      end
    else
      FF01M017.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Product Type Group was entered, verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M017.YPGCD == "*") /* Wildcard type group*/
    FF01M017.YPGABRV = "ALL";
  else
    if (FF01M017.YPGCD > " ") /* Type group was entered*/
      if (FF01M017.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M017.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M017.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S33"; /* Module identification*/
        set FF01M017.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M017.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Future Offering BEGIN Date.*/
   /* ------------------------------------------------------------*/

  FF01W26.FF01WBDT = FF01M017.FF01MBDT; /* Beginning date*/

  FF01S34(); /* Edit beginning request date*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  if (FF01W26.FF01WBRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S33"; /* Module identification*/
    set FF01M017.FF01MBDT cursor, bold; /* Highlight*/
    if (FF01W26.FF01WBRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing msg*/
    else
      if (FF01W26.FF01WBRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered msg*/
      else
        converseLib.validationFailed(151); /* Date Out of Range msg*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify Future Offering END Date.*/
   /* ------------------------------------------------------------*/

  FF01W26.FF01WXDT = FF01M017.FF01MXDT; /* Ending date*/

  FF01S35(); /* Edit ending request date*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/
  if (FF01W26.FF01WXRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S33"; /* Module identification*/
    set FF01M017.FF01MXDT cursor, bold; /* Highlight*/
    if (FF01W26.FF01WXRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing msg*/
    else
      if (FF01W26.FF01WXRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered msg*/
      else
        converseLib.validationFailed(151); /* Date Out of Range msg*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify that a valid date range was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    set FFZREC empty; /* Subroutine Parameters*/
    FFZREC.FFZBYYMM = FF01W26.FF01WBYM; /* Beginning Month*/
    FFZREC.FFZEYYMM = FF01W26.FF01WXYM; /* Ending Month*/
    FFZREC.FFZSRANG = "Y"; /* Accept any Beg Mo*/
    FFZREC.FFZCHK12 = "Y"; /* 12 Month Range Check*/
    TA1REC.TA1PGMNM = "FF01S33"; /* Calling Process*/

    XSFFS30(); /* Edit the Date Range*/

    if (FFZREC.FFZBEGRC == "0" /* Valid Beg Mo  AND*/
     && FFZREC.FFZENDRC == "0") /* Valid End Mo*/

      /* Next Sentence*/

    else
      FFWREC.XXXMODID = "S33"; /* Module ID*/
      set FF01M017.FF01MBDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(17);
    end
  end
   /* ------------------------------------------------------------*/
   /* Verify relationship between Line/Type Group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M017.XPLABRV != " " /* Line valid*/
     && FF01M017.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPLCD = FF01M017.XPLCD;
      FF2REC.XPCCD = "*";
      FF2REC.YPGCD = FF01M017.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S33"; /* Module ID*/
        converseLib.validationFailed(203); /* Inconsistent relationship Msg*/
        set FF01M017.YPGCD cursor, bold; /* Highlight*/
        if (FF01M017.XPLCD != " ")
          set FF01M017.XPLCD bold; /* Highlight*/
        end
      else
        if (FF01M017.XPLCD != "*")
          if (FF2REC.XPLCD != FF01M017.XPLCD)
            FF01M017.XPLCD = FF2REC.XPLCD;
            if (FF01M017.XPLCD in XPLTBL.XPLCD)
              FF01M017.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify relationship between Category/Type Group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M017.XPCABRV != " " /* Category valid*/
     && FF01M017.YPGABRV != " ") /* & Type Grp valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPCCD = FF01M017.XPCCD;
      FF2REC.XPLCD = "*";
      FF2REC.YPGCD = FF01M017.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S33"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship Msg*/
        set FF01M017.YPGCD cursor, bold; /* Highlight*/
        if (FF01M017.XPCCD != " ")
          set FF01M017.XPCCD bold; /* Highlight*/
        end
      else
        if (FF01M017.XPCCD != "*")
          if (FF2REC.XPCCD != FF01M017.XPCCD)
            FF01M017.XPCCD = FF2REC.XPCCD;
            if (FF01M017.XPCCD in XPCTBL.XPCCD)
              FF01M017.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Verify relationship between Category/Line.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M017.XPCABRV != " " /* Category valid*/
     && FF01M017.XPLABRV != " ") /* & Line valid*/

      set FF2REC empty; /* Clear row storage*/

      FF2REC.YSMXDV = "*";
      FF2REC.XPCCD = FF01M017.XPCCD;
      FF2REC.XPLCD = FF01M017.XPLCD;
      FF2REC.YPGCD = FF01M017.YPGCD;

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S33"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M017.XPLCD cursor, bold; /* Highlight*/
        set FF01M017.XPCCD bold; /* Highlight*/
      else
        if (FF01M017.XPCCD != "*")
          if (FF2REC.XPCCD != FF01M017.XPCCD)
            FF01M017.XPCCD = FF2REC.XPCCD;
            if (FF01M017.XPCCD in XPCTBL.XPCCD)
              FF01M017.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
            end
          end
        end
        if (FF01M017.XPLCD != "*")
          if (FF2REC.XPLCD != FF01M017.XPLCD)
            FF01M017.XPLCD = FF2REC.XPLCD;
            if (FF01M017.XPLCD in XPLTBL.XPLCD)
              FF01M017.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
            end
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end

end // end FF01S33

// Edit Futr Dt Rng on PreBld Rpt
Function FF01S34()
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine will edit the Future Offering Begin Date in*/
   /* YYMMDD format for the Pre-Build Quantity by Category Report.*/


   /* The name of the calling process must be moved to TA1PGMNM*/
   /* in TA1REC, for Error Diagnosis Reporting.*/

   /* ***  TA1REC.TA1PGMNM: The name of the calling process,  ****/
   /* ***                   for Error Diagnosis Reporting.    ****/

   /* If any error is found during editing, it is indicated by*/
   /* the completion code in FF01W26.FFBEGRC.*/

   /* *** The return code must indicate normal return.        ****/
   /* ***                                                     ****/
   /* ***   FF01W26.FF01WBRC:                                 ****/
   /* ***      '0' = Normal return                            ****/
   /* ***      '1' = No date in the field                     ****/
   /* ***      '2' = Invalid date entered                     ****/
   /* ***      '3' = Date out of range                        ****/
   /* ***                                                     ****/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Initialize the return codes and return dates.*/
   /* ------------------------------------------------------------*/

  FF01W26.FF01WBRC = "0"; /* Beginning date return code*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date is zero.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WBDT == 0) /* Beginning date missing*/
    FF01W26.FF01WBRC = "1"; /* Indicate no beginning date*/
  end

   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = FF01W26.FF01WBDD; /* validate begin day*/

  TA2REC.TA2GRGYM = FF01W26.FF01WBYM; /* validate begin yymm*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

    else
      FF01W26.FF01WBRC = "2"; /* Indicate invalid date entered*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF01S34 EDIT THE BEGINNING MONTH";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "S34"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end




   /* ------------------------------------------------------------*/
   /* Indicate error if the date is out of allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WBDT < "198701") /* Less than valid starting mo.*/

    FF01W26.FF01WBRC = "3"; /* Indicate invalid date*/

  end


   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WBRC == "3") /* Beginning date out of range*/
    return; /* Return to calling process*/

  end

  return; /* Return to calling process*/
end // end FF01S34

// Edit Futr Dt Rng on PreBld Rpt
Function FF01S35()
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine will edit the Future Offering End Date in*/
   /* YYMMDD format for the Pre-Build Quantity by Category Report.*/


   /* The name of the calling process must be moved to TA1PGMNM*/
   /* in TA1REC, for Error Diagnosis Reporting.*/

   /* ***  TA1REC.TA1PGMNM: The name of the calling process,  ****/
   /* ***                   for Error Diagnosis Reporting.    ****/

   /* If any error is found during editing, it is indicated by*/
   /* the completion code in FF01W26.FF01WXRC.*/

   /* *** The return code must indicate normal return.        ****/
   /* ***                                                     ****/
   /* ***   FF01W26.FF01WXRC:                                 ****/
   /* ***      '0' = Normal return                            ****/
   /* ***      '1' = No date in the field                     ****/
   /* ***      '2' = Invalid date entered                     ****/
   /* ***      '3' = Date out of range                        ****/
   /* ***                                                     ****/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Initialize the return codes and return dates.*/
   /* ------------------------------------------------------------*/

  FF01W26.FF01WXRC = "0"; /* Ending date return code*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date is zero.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WXDT == 0) /* Ending date missing*/
    FF01W26.FF01WXRC = "1"; /* Indicate no Ending date*/
  end

   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = FF01W26.FF01WXDD; /* validate End day*/

  TA2REC.TA2GRGYM = FF01W26.FF01WXYM; /* validate End yymm*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

    else
      FF01W26.FF01WXRC = "2"; /* Indicate invalid date entered*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "FF01S35 EDIT THE ENDING MONTH";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    FFWREC.XXXMODID = "S35"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* exit to display map*/

  end




   /* ------------------------------------------------------------*/
   /* Indicate error if the date is out of allowable bounds.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WXDT < FF01W26.FF01WBDT
  )
    FF01W26.FF01WXRC = "3"; /* Indicate invalid date*/

  end

  FF01W01.FF01W-WORK-DT = FF01W26.FF01WBDT;
  FF01W01.FF01W-WORK-MM = FF01W26.FF01WBMM + 8;
  if (FF01W01.FF01W-WORK-MM > 12)
    FF01W01.FF01W-WORK-MM = FF01W01.FF01W-WORK-MM - 12;
    FF01W01.FF01W-WORK-YY = FF01W01.FF01W-WORK-YY + 1;
  end
  if (FF01W26.FF01WXYM > FF01W01.FF01W-WORK-YYMM)

    FF01W26.FF01WXRC = "3"; /* Indicate invalid date*/

  end

   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (FF01W26.FF01WXRC == "3") /* Ending date out of range*/
    return; /* Return to calling process*/

  end

  return; /* Return to calling process*/
end // end FF01S35

// Verify parameters
Function FF01S39()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPCCD == "*") /* Wildcard line code*/
    FF01M020.XPCABRV = "ALL";
  else
    if (FF01M020.XPCCD > " ") /* Category was entered*/
      if (FF01M020.XPCCD in XPCTBL.XPCCD) /* Code in table*/
        FF01M020.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
        FF01M020.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S39"; /* Module identification*/
        set FF01M020.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M020.XPCABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPLCD == "*") /* Wildcard line code*/
    FF01M020.XPLABRV = "ALL";
  else
    if (FF01M020.XPLCD > " ") /* Line was entered*/
      if (FF01M020.XPLCD in XPLTBL.XPLCD) /* Code in table*/
        FF01M020.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M020.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S39"; /* Module identification*/
        set FF01M020.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M020.XPLABRV = " "; /* Clear abbrv*/
    end
  end
   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M020.PDTYP == "*") /* Wildcard line code*/
    FF01M020.YPGABRV = "ALL";
  else
    if (FF01M020.PDTYP > " ") /* Line was entered*/
      if (FF01M020.PDTYP in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* ACTIVE STATUS*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* FOOTWEAR FORCASTING*/
        FF01M020.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M020.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S39"; /* Module identification*/
        set FF01M020.PDTYP cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M020.YPGABRV = " "; /* Clear abbrv*/
    end
  end
   /* ------------------------------------------------------------*/
   /* VERIFY YEAR RANGE*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XSNYEAR < 0
   || FF01M020.XSNYEAR > 99)
    FFWREC.XXXMODID = "S39"; /* Module identification*/
    set FF01M020.XSNYEAR cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end

   /* ------------------------------------------------------------*/
   /* VERIFY IPM  RANGE*/
   /* ------------------------------------------------------------*/

  if (FF01M020.IPM-DATE < 0
   || FF01M020.IPM-DATE > 9999)
    FFWREC.XXXMODID = "S39"; /* Module identification*/
    set FF01M020.IPM-DATE cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Indicate invalid*/
  end

   /* ------------------------------------------------------------*/
   /* VERIFY SEASON CODE*/
   /* ------------------------------------------------------------*/
  if (FF01M020.XSESESN > " ")
    if (FF01M020.XSESESN in XSNTBL.XSECD) /* Code in table*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF01M020.XSESESN cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between line/type group/category*/
   /* ------------------------------------------------------------*/

  if (FF01M020.XPCCD > "  " /* Category was entered*/
   && FF01M020.XPLCD > "  " /* LINE       was entered*/
   && FF01M020.XPCCD != "*" /* CAT NOT **/
   && FF01M020.XPLCD != "*") /* LINE NOT **/
    FF01S43(); /* Verify relationship*/

  /* IF FF01M020.XPLCD = '  ';*/
  /* MOVE FF2REC.XPLCD TO FF01M020.XPLCD;*/
  /* RETR FF2REC.XPLCD XPLTBL.XPLCD FF01M020.XPLABRV XPLABRV;*/
  /* END;*/

    if (VAGen_SQLCODE == +100 /* Record not found*/
     || FF2REC.XPLCD != FF01M020.XPLCD) /* line code not match*/

      FFWREC.XXXMODID = "S39"; /* Module identification*/
      set FF01M020.XPLCD cursor, bold; /* Highlight*/
      set FF01M020.XPCCD bold; /* Highlight*/
      converseLib.validationFailed(203); /* Invalid date entered*/

    end
  end

end // end FF01S39

// Select/open DFCAST.VPMHDR01
Function FF01S40()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FG1REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FG1REC.FG1BEGMO = FFZREC.FFZBEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFZREC.FFZENDMO; /* End month*/
  FG1REC.XMSCD = "03"; /* Model status*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

   /* ------------------------------------------------------------*/
   /* Open cursor for PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize fields, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S40

// Fetch DFCAST.VPMHDR01
Function FF01S41()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for select, and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S41

// Close DFCAST.VPMHDR01
Function FF01S42()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S42"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S42

// Select 'S' dfcast.vffxrf01
Function FF01S43()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = "*";
  FF2REC.XPCCD = FF01M020.XPCCD;
  FF2REC.XPLCD = FF01M020.XPLCD;
  FF2REC.YSMXDV = "10";

  try
    call "IO4000" ("SC", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      return;
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF01S43

// Verify parameters
Function FF01S50()
   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPCCD > " ") /* Category was entered*/
    if (FF01M013.XPCCD in XPCTBL.XPCCD           /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
      FF01M013.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF01M013.XPCABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FF01M013.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF01M013.XPCABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.XPLCD == "*") /* Wildcard line code*/
    FF01M013.XPLABRV = "ALL";
  else
    if (FF01M013.XPLCD > " ") /* Line was entered*/
      if (FF01M013.XPLCD in XPLTBL.XPLCD           /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && XPLTBL.XGPCD[sysVar.arrayIndex] == "02") /* and footwear*/
        FF01M013.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M013.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF01M013.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M013.XPLABRV = " "; /* Clear abbrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.YPGCD == "*") /* Wildcard type group*/
    FF01M013.YPGABRV = "ALL";
  else
    if (FF01M013.YPGCD > " ") /* Type group was entered*/
      if (FF01M013.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
        FF01M013.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate invalid.*/
        /* ------------------------------------------------------------*/
        FF01M013.YPGABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF01M013.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      FF01M013.YPGABRV = " "; /* Clear abrv*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify submit month.*/
   /* ------------------------------------------------------------*/

  if (FF01M013.FF01MSMO > 0) /* Submit buy month entered*/
    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "E"; /* Type*/
    FF01W01.FF01WVYM = FF01M013.FF01MSMO;
    FF01W01.FF01WVDD = 01; /* Default day field*/
    TA2REC.TA2GRGEN = FF01W01.FF01WVDT;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/
        FF01W01.FF01WDTS = TA2REC.TA2GRCYM;
      else /* Abnormal return code*/
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FF01M013.FF01MSMO cursor, bold; /* Highlight*/
        converseLib.validationFailed(10); /* Indicate invalid*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "S50 EDIT SUBMIT MONTH  ";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify month range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF01M013.FF01MBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF01M013.FF01MXMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "S50"; /* Module identification*/
    set FF01M013.FF01MXMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "S50"; /* Module identification*/
    set FF01M013.FF01MBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify relationship between category/type group or line/*/
   /* type group.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors found*/
    if (FF01M013.XPCABRV != " " /* Category valid*/
     && FF01M013.XPLABRV != " " /* & line valid*/
     && FF01M013.YPGABRV != " ") /* & type grp valid*/

      set FF2REC empty; /* Clear row storage*/

      if (FF01M013.XPCCD != " ") /* Category entered*/
        FF2REC.XPCCD = FF01M013.XPCCD;
        FF2REC.XPLCD = "*";
      else
        FF2REC.XPLCD = FF01M013.XPLCD;
        FF2REC.XPCCD = "*";
      end

      FF2REC.YPGCD = FF01M013.YPGCD;
       /* div cd not relevant to relation edit*/
      FF2REC.YSMXDV = "*";

      FF01S20(); /* Select & open FF2REC "S1" csr*/

      FF01S21(); /* Fetch first FF2REC "S1" csr*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF01M013.YPGCD cursor, bold; /* Highlight*/
        if (FF01M013.XPLCD != " ")
          set FF01M013.XPLCD bold; /* Highlight*/
        end
        if (FF01M013.XPCCD != " ")
          set FF01M013.XPCCD bold; /* Highlight*/
        end
      else
        if (FF2REC.XPLCD != FF01M013.XPLCD)
          FF01M013.XPLCD = FF2REC.XPLCD;
          if (FF01M013.XPLCD in XPLTBL.XPLCD)
            FF01M013.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
          end
        end
      end

      FF01S22(); /* Close FF2REC "S1" csr*/

    end
  end


end // end FF01S50

// Verify parameters
Function FF01S70()
  set PG2REC empty;

  PG2REC.XGPCD = "02";
  PG2REC.SYBSTGNB = FF01M004.SYBSTGNB;

  FF01S71(); /* open dprodg.vsyclr01*/

  FF01S72(); /* fetch first record*/

  if (SQLCA.VAGen_SQLCODE == 100)
    FF01S73(); /* close cursor*/

    FFWREC.XXXMODID = "S70"; /* module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FF01M004.YPGCD cursor, bold;
    set FF01M004.XPLCD bold;
    set FF01M004.XPCCD bold;
    set FF01M004.SYBSTGNB bold;
  else
    FF01S73(); /* close cursor*/

    if (FF01M004.XPCCD != "*"
     && FF01M004.XPCCD != " ")
      if (PG2REC.XPCCD != FF01M004.XPCCD)
        FFWREC.XXXMODID = "S70";
        converseLib.validationFailed(203); /* inconsistent relationship*/
        set FF01M004.XPCCD cursor, bold;
        set FF01M004.SYBSTGNB bold;
      end
    end
    if (FF01M004.XPLCD != "*"
     && FF01M004.XPLCD != " ")
      if (PG2REC.XPLCD != FF01M004.XPLCD)
        FFWREC.XXXMODID = "S70";
        converseLib.validationFailed(203); /* inconsistent relationship*/
        set FF01M004.XPLCD cursor, bold;
        set FF01M004.SYBSTGNB bold;
      end
    end
    FF01S74(); /* fetch style group name*/

    if (SQLCA.VAGen_SQLCODE == 100)
      FF01M004.SYBSTGNM = "N/A";
    else
      FF01M004.SYBSTGNM = SYBREC.SYBSTGNM;
    end
  end
end // end FF01S70

// Verify parameters
Function FF01S71()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE PG2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S71

// Verify parameters
Function FF01S72()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Rows not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE PG2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S72

// Verify parameters
Function FF01S73()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S73"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF PG2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S73

// Verify parameters
Function FF01S74()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set SYBREC empty; /* Clear row storage area*/

  SYBREC.SYBSTGNB = FF01M004.SYBSTGNB; /* Style group number*/

  try
    call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S74"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE PG2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYGRP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF01S74

// Clear selections and exit
Function FF01S99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  FF01W01.FF01WIXM = 1; /* Initialize map index*/

  while (FF01W01.FF01WIXM <= FF01W01.FF01WIXL) /* Until end of array*/

    if (FF01W01.FF01MSEL[FF01WIXM] == "S") /* Entry is selected*/
      FF01W01.FF01MSEL[FF01WIXM] = " "; /* Reset entry*/
    end

    FF01W01.FF01WIXM = FF01W01.FF01WIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end FF01S99

//*** RECORD=FF01W00 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FF01W00 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(26) ; 
    10 FF01W-COND-CD FF01W-COND-CD ; 
    10 * char(38) ; 
  5 TARTYPE TARTYPE ; 
end // end FF01W00

//*** RECORD=FF01W01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF01W01 type basicRecord
  10 FF01MSEL FF01MSEL [98] ; 
  10 FF01WIXL FF01WIXL ; 
  10 FF01WIXM FF01WIXM ; 
  10 FF01WIXT FF01WIXT ; 
  10 FF01WSWX FF01WSWX ; 
  10 FF01WFLG FF01WFLG ; 
  10 FF01WIDX FF01WIDX ; 
  10 * char(1) ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFAENDMO FFAENDMO ; 
  10 FF01WVDT FF01WVDT ; 
    15 FF01WVYM FF01WVYM ; 
    15 FF01WVDD FF01WVDD ; 
  10 FF01WDTS FF01WDTS ; 
    15 FF01WCCS FF01WCCS ; 
    15 FF01WYMS FF01WYMS ; 
  10 FF01WFOR FF01WFOR ; 
  10 FF01WPGM FF01WPGM ; 
  10 FF01W-WORK-DT FF01W-WORK-DT ; 
    15 FF01W-WORK-YYMM FF01W-WORK-YYMM ; 
      20 FF01W-WORK-YY FF01W-WORK-YY ; 
      20 FF01W-WORK-MM FF01W-WORK-MM ; 
    15 FF01W-WORK-DD FF01W-WORK-DD ; 
  10 RPT-END-CCYYMM RPT-END-CCYYMM ; 
    15 RPT-END-CCYY RPT-END-CCYY ; 
      20 RPT-END-CC RPT-END-CC ; 
      20 RPT-END-YY RPT-END-YY ; 
    15 RPT-END-MM RPT-END-MM ; 
  10 FF01W-SESN-ENTERED FF01W-SESN-ENTERED ; 
  10 FF01W-DATE-ENTERED FF01W-DATE-ENTERED ; 
  10 FF01W-TEMP-YR FF01W-TEMP-YR ; 
  10 FF01W-SESN-YR FF01W-SESN-YR ; 
    15 FF01W-SESN FF01W-SESN ; 
    15 FF01W-YR FF01W-YR ; 
  10 FF01W-BEG-MO FF01W-BEG-MO ; 
    15 FF01W-BEG-CC FF01W-BEG-CC ; 
    15 FF01W-BEG-YY FF01W-BEG-YY ; 
    15 FF01W-BEG-MM FF01W-BEG-MM ; 
  10 FF01W-END-MO FF01W-END-MO ; 
    15 FF01W-END-CC FF01W-END-CC ; 
    15 FF01W-END-YY FF01W-END-YY ; 
    15 FF01W-END-MM FF01W-END-MM ; 
end // end FF01W01

//*** RECORD=FF01W02 ****
// ------------------------------------------------------------
// Parameters for FF7501 - Monthly Prdctn Qty By Category Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; // range begin month
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SES1 FF01W-SES1 ; 
    10 * char(1) ; // range end month
    10 FF01W-SES2 FF01W-SES2 ; 
    10 * char(1) ; // range end month
    10 FF01W-SES3 FF01W-SES3 ; 
    10 * char(43) ; // range end month
end // end FF01W02

//*** RECORD=FF01W03 ****
// ------------------------------------------------------------
// Parameters for FF7601 - Monthly Prdctn Qty By Product Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01WCPG FF01WCPG ; 
    10 * char(1) ; 
    10 FF01W-SES1 FF01W-SES1 ; 
    10 * char(1) ; 
    10 FF01W-SES2 FF01W-SES2 ; 
    10 * char(1) ; 
    10 FF01W-SES3 FF01W-SES3 ; 
    10 * char(38) ; 
end // end FF01W03

//*** RECORD=FF01W04 ****
// ------------------------------------------------------------
// Parameters for FF7701 - Shipment/Demand Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W04 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W04

//*** RECORD=FF01W05 ****
// ------------------------------------------------------------
// Parameters for FF7901 - Sales/Receipts/Inventory Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W05 type basicRecord
  5 TARJCL TARJCL ; 
    10 FF01WRTY FF01WRTY ; 
      15 FF01WCBN FF01WCBN ; 
      15 FF01WINL FF01WINL ; 
      15 FF01WMKP FF01WMKP ; 
      15 FF01WBGD FF01WBGD ; 
      15 FF01WCLT FF01WCLT ; 
    10 FF01WRNG FF01WRNG ; 
    10 FF01WLVL FF01WLVL ; 
    10 FF01WYPG FF01WYPG ; 
    10 FF01WXPL FF01WXPL ; 
    10 FF01WXPC FF01WXPC ; 
    10 FF01WSGP FF01WSGP ; 
    10 FF01WCMB FF01WCMB ; 
    10 FF01WRTS FF01WRTS ; 
    10 FF01WMIS FF01WMIS ; 
    10 FF01WFRM FF01WFRM ; 
    10 FF01WJOB FF01WJOB ; 
    10 FF01WBMT FF01WBMT ; 
      15 FF01WBYY FF01WBYY ; 
      15 FF01WBMM FF01WBMM ; 
    10 FF01WEMO FF01WEMO ; 
      15 FF01WEYY FF01WEYY ; 
      15 FF01WEMM FF01WEMM ; 
    10 FF01WCDT FF01WCDT ; 
      15 FF01WCYM FF01WCYM ; 
        20 FF01WCCC FF01WCCC ; 
        20 FF01WCYY FF01WCYY ; 
        20 FF01WCMM FF01WCMM ; 
      15 FF01WCDD FF01WCDD ; 
    10 FF01WXDV FF01WXDV [3] ; 
    10 * char(10) ; 
end // end FF01W05

//*** RECORD=FF01W06 ****
// ------------------------------------------------------------
// Parameters for FF8101 - Prdctn Fcst Special Features Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W06 type basicRecord
  5 TARJCL TARJCL ; 
    10 XFCCD XFCCD ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(61) ; 
end // end FF01W06

//*** RECORD=FF01W07 ****
// ------------------------------------------------------------
// Parameters for FF8201 - Target/Sugg Buy Comparison Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W07 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W07

//*** RECORD=FF01W08 ****
// ------------------------------------------------------------
// Parameters for FF8301 - Preset Production Plan Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W08 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(55) ; 
end // end FF01W08

//*** RECORD=FF01W09 ****
// ------------------------------------------------------------
// Parameters for FF8401 - Order Min By Style Group Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W09 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(69) ; 
end // end FF01W09

//*** RECORD=FF01W10 ****
// ------------------------------------------------------------
// Parameters for FF8501 - Order Min By Product Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W10 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(69) ; 
end // end FF01W10

//*** RECORD=FF01W11 ****
// ------------------------------------------------------------
// Parameters for FF7611 - Monthly Prdctn Qty By Sty grp Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W11 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01WCPG FF01WCPG ; 
    10 * char(53) ; 
end // end FF01W11

//*** RECORD=FF01W12 ****
// ------------------------------------------------------------
// Params for FF9311 - Modeled Prdctn fcst Qty By sty grp Rpt
// ------------------------------------------------------------
// ***********************
Record FF01W12 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01WCPG FF01WCPG ; 
    10 * char(56) ; 
end // end FF01W12

//*** RECORD=FF01W13 ****
// ------------------------------------------------------------
// Parameters for FF8801 - Makeup Adjustment Report.
// ------------------------------------------------------------
// ***********************
Record FF01W13 type basicRecord
  5 TARJCL TARJCL ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(67) ; 
end // end FF01W13

//*** RECORD=FF01W14 ****
// ------------------------------------------------------------
// Parameters for FF8901 - NIL Adjustment Report.
// ------------------------------------------------------------
// ***********************
Record FF01W14 type basicRecord
  5 TARJCL TARJCL ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(67) ; 
end // end FF01W14

//*** RECORD=FF01W15 ****
// ------------------------------------------------------------
// Parameters for FF7511 - Monthly Prdctn Qty By Line Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W15 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(61) ; 
end // end FF01W15

//*** RECORD=FF01W16 ****
// ------------------------------------------------------------
// Parameters for FF9101 - inventory position By Product Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W16 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W16

//*** RECORD=FF01W17 ****
// ------------------------------------------------------------
// Parameters for FF9201 - suggested buy By Product Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W17 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(3) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(55) ; 
end // end FF01W17

//*** RECORD=FF01W18 ****
// ------------------------------------------------------------
// Params for FF9301 - Modeled Prdctn fcst Qty By Product Rpt
// ------------------------------------------------------------
// ***********************
Record FF01W18 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01WCPG FF01WCPG ; 
    10 * char(56) ; 
end // end FF01W18

//*** RECORD=FF01W19 ****
// ------------------------------------------------------------
// Parameters for FF9401 - Mnthly sugg buy Qty By Categry Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W19 type basicRecord
  5 TARJCL TARJCL ; 
    10 YSMXDV YSMXDV ; 
    10 * char(1) ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W19

//*** RECORD=FF01W20 ****
// ------------------------------------------------------------
// Parameters for FF9501 - Submitted Prdctn Fcst By Product Rpt
// ------------------------------------------------------------
// ***********************
Record FF01W20 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01WSMO FF01WSMO ; 
    10 * char(51) ; 
end // end FF01W20

//*** RECORD=FF01W21 ****
// ------------------------------------------------------------
// Parameters for FF9121 - inventory position By prod/prd fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W21 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W21

//*** RECORD=FF01W22 ****
// ------------------------------------------------------------
// Parameters for FF9111 - inventory position By cat/sugg buy.
// ------------------------------------------------------------
// ***********************
Record FF01W22 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W22

//*** RECORD=FF01W23 ****
// ------------------------------------------------------------
// Parameters for FF9131 - inventory position By cat/prd fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W23 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W23

//*** RECORD=FF01W24 ****
// ------------------------------------------------------------
// Parameters for FF9141 - inventory position By prod/mdl fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W24 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W24

//*** RECORD=FF01W25 ****
// ------------------------------------------------------------
// Parameters for FF9151 - inventory position By cat/mdl fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W25 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W25

//*** RECORD=FF01W26 ****
// ------------------------------------------------------------
// Parameters for FF9701 - Pre-Build Qty by Category Report.
// ------------------------------------------------------------
// ***********************
Record FF01W26 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBDT FF01WBDT ; 
      15 FF01WBYM FF01WBYM ; 
        20 FF01WBYY FF01WBYY ; 
        20 FF01WBMM FF01WBMM ; 
      15 FF01WBDD FF01WBDD ; 
    10 * char(1) ; 
    10 FF01WXDT FF01WXDT ; 
      15 FF01WXYM FF01WXYM ; 
      15 FF01WXDD FF01WXDD ; 
    10 FF01WBRC FF01WBRC ; 
    10 FF01WXRC FF01WXRC ; 
    10 FF01WFRM FF01WFRM ; 
    10 FF01WJOB FF01WJOB ; 
    10 * char(50) ; 
end // end FF01W26

//*** RECORD=FF01W28 ****
// ------------------------------------------------------------
// Parameters for FF6921 - prdctn forecast balance
// ------------------------------------------------------------
// ***********************
Record FF01W28 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 FF01WBMO FF01WBMO ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(64) ; 
end // end FF01W28

//*** RECORD=FF01W29 ****
// ------------------------------------------------------------
// Parameters for FF6931 - prdctn forecast exception         .
// ------------------------------------------------------------
// ***********************
Record FF01W29 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPLCD XPLCD ; 
    10 YPGCD YPGCD ; 
    10 XPCCD XPCCD ; 
    10 FF01WBMO FF01WBMO ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(62) ; 
end // end FF01W29

//*** RECORD=FF01W30 ****
// ------------------------------------------------------------
// Parameters for FF9161 - inventory position By Sty grp Rpt.
// ------------------------------------------------------------
// ***********************
Record FF01W30 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(58) ; 
end // end FF01W30

//*** RECORD=FF01W31 ****
// ------------------------------------------------------------
// Parameters for FF9171 - inventory pos by sty grp/prd fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W31 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W31

//*** RECORD=FF01W32 ****
// ------------------------------------------------------------
// Parameters for FF9181 - inventory posit by sty grp/mdl fcst.
// ------------------------------------------------------------
// ***********************
Record FF01W32 type basicRecord
  5 TARJCL TARJCL ; 
    10 YPGCD YPGCD ; 
    10 * char(1) ; 
    10 XPLCD XPLCD ; 
    10 * char(1) ; 
    10 XPCCD XPCCD ; 
    10 * char(1) ; 
    10 FF01WBMO FF01WBMO ; 
    10 * char(1) ; 
    10 FF01WXMO FF01WXMO ; 
    10 * char(1) ; 
    10 FF01W-SESN1 FF01W-SESN1 ; 
    10 * char(1) ; 
    10 FF01W-SESN2 FF01W-SESN2 ; 
    10 * char(48) ; 
end // end FF01W32

//*** RECORD=FF01W33 ****
// ------------------------------------------------------------
// Parameters for FF6931 - prdctn forecast exception         .
// ------------------------------------------------------------
// ***********************
Record FF01W33 type basicRecord
  5 TARJCL TARJCL ; 
    10 XSNYEAR XSNYEAR ; 
    10 FILLER1 FILLER1 ; 
    10 XSESESN XSESESN ; 
    10 FILLER2 FILLER2 ; 
    10 XPLCD XPLCD ; 
    10 FILLER3 FILLER3 ; 
    10 XPCCD XPCCD ; 
    10 FILLER4 FILLER4 ; 
    10 PDTYP PDTYP ; 
    10 FILLER5 FILLER5 ; 
    10 IPM-DATE IPM-DATE ; 
    10 * char(61) ; 
end // end FF01W33

// report selection
DataItem FF01MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// condition code
DataItem FF01W-COND-CD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-DATE-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range end month
DataItem FF01W-SES1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range end month
DataItem FF01W-SES2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range end month
DataItem FF01W-SES3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-SESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-SESN-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-SESN1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-SESN2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01W-TEMP-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dd fld for pre-build rpt
DataItem FF01W-WORK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work dt fld for pre-build rpt
DataItem FF01W-WORK-DT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm fld for prebuild rpt
DataItem FF01W-WORK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy fld for prebuild rpt
DataItem FF01W-WORK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yymm fld for prebuild rpt
DataItem FF01W-WORK-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01W-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01WBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Rpt Begin CCYYMM
DataItem FF01WBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bgrade Report Type
DataItem FF01WBGD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rpt begin yy
DataItem FF01WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// range begin month
DataItem FF01WBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rpt begin yymm
DataItem FF01WBMT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01WBRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rpt begin mm
DataItem FF01WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Combine Report Type
DataItem FF01WCBN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv cutoff cc from vffctl01
DataItem FF01WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Submit cc
DataItem FF01WCCS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inv cutoff dd from vffctl01
DataItem FF01WCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inv cutoff dt from vffctl01
DataItem FF01WCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Closeout Report Type
DataItem FF01WCLT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// combine prod group type flag
DataItem FF01WCMB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv cutoff mm from vffctl01
DataItem FF01WCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// combine type groups flag
DataItem FF01WCPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv cutoff ccyymm from ffctl01
DataItem FF01WCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inv cutoff yy from vffctl01
DataItem FF01WCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Submit ccyymm
DataItem FF01WDTS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calc ending mm
DataItem FF01WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calc ending yymm
DataItem FF01WEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calc ending yy
DataItem FF01WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Switch to indicate seq select
DataItem FF01WFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Form code#
DataItem FF01WFOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Form Code
DataItem FF01WFRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for sequence array
DataItem FF01WIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inline Report Type
DataItem FF01WINL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem FF01WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FF01WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem FF01WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job Name
DataItem FF01WJOB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report Level
DataItem FF01WLVL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MISC percentage
DataItem FF01WMIS num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Makeup Report Type
DataItem FF01WMKP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program Identification
DataItem FF01WPGM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rpt Begin CCYYMM
DataItem FF01WRNG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RTS percentage
DataItem FF01WRTS num(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Report Type
DataItem FF01WRTY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_GRP_NBR
DataItem FF01WSGP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FF_SBMT_MO
DataItem FF01WSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Exit requested switch
DataItem FF01WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validate day
DataItem FF01WVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Validate yymmdd
DataItem FF01WVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Validate yymm
DataItem FF01WVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF01WXDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Report Level
DataItem FF01WXDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDV_DIV_CD
DataItem FF01WXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range end month
DataItem FF01WXMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPC_PROD_CAT_CD
DataItem FF01WXPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPL_PROD_LN_CD
DataItem FF01WXPL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF01WXRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range end month
DataItem FF01WXYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Submit yymm
DataItem FF01WYMS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YPG_PDTYP_GRP_CD
DataItem FF01WYPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YPG_PDTYP_GRP_CD
DataItem FILLER1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range begin month
DataItem FILLER2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range begin month
DataItem FILLER3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range begin month
DataItem FILLER4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// range begin month
DataItem FILLER5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IPM-DATE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem PDTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// report end century
DataItem RPT-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report end century and year
DataItem RPT-END-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report end date century+yr+mon
DataItem RPT-END-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report end month
DataItem RPT-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// report end year
DataItem RPT-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SEASON RANGE
DataItem XSESESN char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// YEAR CODE
DataItem XSNYEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

