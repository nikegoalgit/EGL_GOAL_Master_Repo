package ff0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import fk.common.*;
import fy.common.*;
import pg.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0X ****
// This application displays information concerning a produc-
// tion forecast for a particular product.  The user can update
// this forecast by changing the "MSTR PRDCTN FCST".  He can,
// also, update the "SUG PRDCTN FCST".  This update will cause
// the "END INVENTORY" AND "INVENTORY TURNS".  An update to
// the "MSTR PRDCTN FCST" will affect the "SUG TOT PROD FCST"
// amount.  By use of a PFkey, the user can request the program
// to calculate the "SUG PRDCTN FCST".
// 
// The user must specify the 'DATE RANGE', 'DIVISION GROUP',
// and 'STYLE'.  'COLOR' and 'DIM' have defaults of '00'.  The
// program will retrieve the "INTRO MO", "PROJ C/O MO", "Safety
// STOCK CLASS", and "PRESET" flag value.  It will calculate
// the "BAL TO SHIP", "SUPPLY", "END INVENTORY", "INVENTORY
// TURNS", AND "SUG TOT PROD FCST".
// 
// The program will search for a model run with a status of
// "SELECT".  If this is not found, a message will be returned
// to the user indicating that a 'SEL' model was not found.
// 
// The user may scroll Right and Left to view the first and
// second six months of the range by pressing PF11 and PF10.
// He may exit to any allowed application, via FAST PATH of PF
// at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/06/89  RHETRI  New application.
//          07/24/90  RHETRI  Fix index; chg data for modl pfct
//          07/30/90  RHETRI  Chgn date routine call to allow
//                            buy month in range.
// FF2015   09/05/90  RHETRI  Default color/dim.
// FF2033   09/14/90  RHETRI  Chg date edit to allow any range.
//  FIX     02/22/91  LDELUH  Chg cursor to style after PF20/21
//  FIX     04/15/91  MWALKE  Chg pf19 to "toggle" between
//                            using suggested buy and modeled
//                            production forecasted.
// FF       06/24/91  MDANGE  Remove PF13, PF14.  Change PF16
//                            to update master production fore-
//                            cast with the modeled forecast
//                            values.  Add PF18 to switch to
//                            FG06, submit production forecast.
// FF2060   08/28/91  MDANGE  Change style edit to be first on
//                            VFFSTY01 then VPMITM01.  This
//                            will allow style developments no
//                            longer being sales forecasted to
//                            be processed.
// FFmaint  11/21/91  MDANGE  Add a second map that will disp
//                            on PF17.  Second map will disp
//                            a list of styles for the current
//                            category and keep position of the
//                            last style processed.  Second map
//                            processing cloned from FG03.
//                            Allow user to update model and
//                            master even if style is preset.
// FF        7/20/92  MDANGE  Fix bug with subtotaling on PF16.
//                            Change list of styles on PF17 to
//                            be for model range entered and
//                            not a default to current model.
// FF321    10/16/92  MDANGE  change table for list of styles
// FF327                      to use new modeled styles table
//                            VPMSTY01.  Change to allow a
//                            cancelled product that is not on
//                            current model to just have its
//                            master production forecast set to
//                            zero.
// FF371    11/29/93  KGRAHA  change screen to protect fields
//                            prior or equal to the buy month.
//          05/20/96  CWHIT1  Allow entry in buy month if cat
//                            buy flag is 'y'
// FF175    12/12/96  DSMITH  Changed date range fill character
//                            to '0'.
//                            Also changed ff0x112 to increment
//                            century when yr=99.
// FFMAINT  04/01/97  DSMITH  added a display of first prod
//                            month to the map and a warning
//                            message if it doesn't exist.
// GPP Ph1  12/22/97  RKUDPI  1.Changed program to hilite if
//                            ending inventory for range > 0
//                            2. Added code to figure out if
//                            product is a specialty or caryovr
//                            3. Added code to figure out
//                            right screen to return to on PF18
//          09/10/98  CWHIT1  fix y2k in ff0x210
//          09/09/99  rkudpi  fix date problem
// *********************
Program FF0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0XW00 FF0XW00; // record
  FF0XW01 FF0XW01; // record
  FF0XW02 FF0XW02; // record
  FF0XW03 FF0XW03; // record
  FF0XW04 FF0XW04; // record
  FF0XW05 FF0XW05; // record
  FF1REC FF1REC; // record
  FF3REC FF3REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG1REC FG1REC; // record
  FG2REC FG2REC; // record
  FG9REC FG9REC; // record
  FH2REC FH2REC; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPMSTY01 VPMSTY01; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0XM.FF0XM001,  // forms
      FF0XM.FF0XM002, 
      FF0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0XM001 initial; /* M001 input/output*/
    set FF0XM002 initial; /* M001 input/output*/
    set FF0XW00 empty; /* Working storage*/
    set FF0XW01 empty; /* M001 display storage*/
    set FF0XW02 empty; /* Calculation fields*/
    set FF0XW03 empty; /* Total fields*/
    set FF0XW04 empty; /* Wroking storage map 2*/
    set FF0XW05 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/

    FF0XW00.FF0XWSWF = "Y"; /* Format the map flag*/
    FF0XW00.FF0XWSWD = "1"; /* Move 1 to map to display*/
    FF0XW00.FF0XWPAG = 1; /* Current Page number*/

     /* ------------------------------------------------------------*/
     /* If Country code is missing, default it to 'USA '.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.XCTCD == " ") /* ctry code not passed*/
      FFWREC.XCTCD = "USA "; /* default to 'USA '*/
      if (FFWREC.XCTCD in XCTTBL.XCTCD)
        FFWREC.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
      end
    end


     /* ------------------------------------------------------------*/
     /* If style code is missing, default color and dim if they*/
     /* are missing, because style development products have*/
     /* blank color and dim codes.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.SY1STNBR == " ") /* If style code not passed*/
      if (FFWREC.SY2CLRID == " ") /* color code not passed*/
        FFWREC.SY2CLRID = "00"; /* default to '00'*/
      end

      if (FFWREC.XDMCD == " ") /* dim code not passed*/
        FFWREC.XDMCD = "00"; /* default to '00'*/
      end
    end

     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO > 0 /* and ending month passed*/
     && FFWREC.SY1STNBR > " ") /* and style number passed*/

      FF0XW00.FF0XWSWR = "Y"; /* Request data*/

    else

      FF0XW00.FF0XWSWR = "N"; /* data not requested*/

    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.YPGCD = " "; /* Clear type code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FF0XW01.FF0XMSPH = "MODELD PRDCTN FCST"; /* set variable hdr*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0X001; /* Converse the main process*/


    FF0X001: FF0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0X001; /* Converse the main process*/


  end // end main
end // end FF0X

// Main process to display a map
Function FF0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWSWD == "1") /* Map 1 was requested*/

    FF0X050(); /* Display map 1*/

  else

    if (FF0XW00.FF0XWSWD == "2") /* Map 2 was requested*/

      FF0X700(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FF0XW00.FF0XWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FF03"; /* TO application*/

      XSFFS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end

end // end FF0X001

// Main process Map 1
Function FF0X050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0X100(); /* Obtain the data to display*/

  FF0X200(); /* Format and display the map*/

  FF0X300(); /* Check attention identifier*/

  FF0X400(); /* Reset fields to normal intensity*/

  FF0X500(); /* Verify the entered data*/

  FF0X600(); /* Process valid input request*/


end // end FF0X050

// Obtain the data to display
Function FF0X100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/

  set FF0XW01 empty; /* Clear fields*/

   /* ------------------------------------------------------------*/
   /* Set current page to 1.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWPAG = 1; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Determine buy month.*/
   /* ------------------------------------------------------------*/

  FF0XS70(); /* get futures cutoff date*/

  FF0XW04.FF0XWDT2 = FF1REC.FF1FUTDT;

  FF0XW04.FF0XWMM2 = FF0XW04.FF0XWMM2 + 5; /* buy date*/
  if (FF0XW04.FF0XWMM2 > 12)
    FF0XW04.FF0XWMM2 = FF0XW04.FF0XWMM2 - 12;
    if (FF0XW04.FF0XWYY2 == 99)
      FF0XW04.FF0XWCC2 = FF0XW04.FF0XWCC2 + 1;
      FF0XW04.FF0XWYY2 = 00;
    else
      FF0XW04.FF0XWYY2 = FF0XW04.FF0XWYY2 + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Expand date range to set of YYMMs.*/
   /* ------------------------------------------------------------*/

  FF0X110(); /* Expand dates*/

   /* ------------------------------------------------------------*/
   /* Open PMHDR to look for 'SELECTED' model run.*/
   /* ------------------------------------------------------------*/

  FF0X120(); /* Open PMHDR*/

   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.  (There can only be one Header out there per*/
                  /* data range.)*/
   /* ------------------------------------------------------------*/

  FF0X130(); /* Fetch PMHDR*/

   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  FF0X190(); /* Close PMHDR*/

  FF0XWCNT = 1;
  FF0XS03(); /* verify style on VFFSTY01/VPMITM01*/

  if (FFWREC.SY2CLRID == "   ")
    FF0X165();
    if (SQLCA.VAGen_SQLCODE == 0)
      FF0XW01.FF0XW-SESN = PG4REC.XSECD;
      FF0XW00.FF0XW-CCYY = PG4REC.XSNYR;
      FF0XW01.FF0XW-YEAR = FF0XW00.FF0XW-YY;
    else
      FF0XW01.FF0XW-SESN-YEAR = "XXXX";
    end
  else
    FF0X166();
    if (SQLCA.VAGen_SQLCODE == 0)
      FF0XW01.FF0XW-SESN = PG2REC.XSECD;
      FF0XW00.FF0XW-CCYY = PG2REC.XSNYR;
      FF0XW01.FF0XW-YEAR = FF0XW00.FF0XW-YY;
    else
      FF0XW01.FF0XW-SESN-YEAR = "XXXX";
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end
  if (FF0XW00.FF0XWHSW == "Y") /* PMHDR found switch*/

    /* ------------------------------------------------------------*/
     /* Initialize fields.*/
    /* ------------------------------------------------------------*/

    set FF0XW02 empty; /* Clear hold area for calc*/
    set FF0XW03 empty; /* Clear hold area for tots*/
    FF0XW01.FF0XMSPH = "MODELD PRDCTN FCST"; /* init variable column hdr*/

    FF0XW00.FF0XWCNT = 1; /* Set counter for months*/
    FF0XW00.FF0XWIXM = 1; /* Set counter for columns*/

    FF0XW00.FF0XWISW = "N"; /* Initialize PMITM found switch*/
    FF0XW00.FF0XWDSW = "N"; /* Initialize Data found switch*/

    /* ------------------------------------------------------------*/
     /* Loop through the months in the range.*/
    /* ------------------------------------------------------------*/

    while (FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* While count LE # of mos*/

      if (FF0XW00.FF0XWCNT == 7) /* If seventh month*/
        FF0X140(); /* Do sub-totaling*/
        FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 to column cnt*/
      end

      FF0X150(); /* Select PMITM*/

      FF0X160(); /* Select MSTY*/

      if (FF0XW00.FF0XWDSW == "Y") /* Data found switch*/

        FF0X170(); /* Save PMITM & MSTY data*/
        FF0X180(); /* Get more data, do calcs, save*/

      end

      FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* Add 1 to month cnt*/
      FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 to column cnt*/

    end

  end
   /* ------------------------------------------------------------*/
   /* Check to see if data was found to display.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWHSW == "Y" /* Header found switch*/
   && FF0XW00.FF0XWDSW == "Y") /* and data found switch*/

    FF0X140(); /* Calculate grand totals*/

  else

    if (converseVar.validationMsgNum == 0)
      FFWREC.XXXMODID = "100"; /* Module identification*/
      FFWREC.XXXMSGNO = 18; /* Indicate no data found*/
    end
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate request for data complete and modifiable data.*/
   /* Re-set request for sug buy.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWSWR = "N"; /* Request for data switch*/
  FF0XW01.CACHGFL = "Y"; /* Modifiable data switch*/
  FF0XW00.FF0XWCSW = "N"; /* request SBUY switch*/


end // end FF0X100

// Expand Dates
Function FF0X110()
   /* ------------------------------------------------------------*/
   /* Call XSFFS30 to expand date range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FFWREC.FFAENDMO; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* Save true number of months in range.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWNBR = FFZREC.FFZNUMMO; /* Hold true nbr of mos*/

   /* ------------------------------------------------------------*/
   /* Save dates.*/
   /* ------------------------------------------------------------*/

  FF0XW01.FFZBYYMM = FFZREC.FFZBYYMM; /* Beginning date*/
  FF0XW01.FFZEYYMM = FFZREC.FFZEYYMM; /* Ending date*/

  FF0XW00.FF0XWCNT = 1; /* Set counter*/
  while (FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* While cnt LE nbr mos*/

    FF0XW00.FFZINDMO[FF0XWCNT] = FFZREC.FFZINDMO[FF0XWCNT];

    FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1;

  end

   /* ------------------------------------------------------------*/
   /* If second page will exist, turn on switch.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWNBR > 6) /* If there are more than 6 mos*/
    FF0XW00.FF0XWPG2 = "Y"; /* Page 2 exist switch*/
  else
    FF0XW00.FF0XWPG2 = "N"; /* Page 2 exist switch*/
  end

   /* ------------------------------------------------------------*/
   /* Expand range three more months for use in calculations.*/
   /* ------------------------------------------------------------*/

  FF0X112(); /* Expand date three months*/


end // end FF0X110

// Expand Dates Three Months
Function FF0X112()
   /* ------------------------------------------------------------*/
   /* Add to the end month to get dates three months past*/
   /* the end of the entered date range.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWDT = FFZREC.FFZINDMO[FFZNUMMO]; /* work date area*/

  FF0XW00.FF0XWCNT = FFZREC.FFZNUMMO + 1; /* set index*/
  FF0XW00.FF0XWMM = FF0XW00.FF0XWMM + 1; /* increment month*/
  if (FF0XW00.FF0XWMM > 12) /* month gt 12*/
    FF0XW00.FF0XWMM = 1; /* set month to 1*/
    if (FF0XW00.FF0XWYY == 99)
      FF0XW00.FF0XWCC = FF0XW00.FF0XWCC + 1; /* add 1 to year*/
      FF0XW00.FF0XWYY = 00;
    else
      FF0XW00.FF0XWYY = FF0XW00.FF0XWYY + 1; /* add 1 to year*/
    end
  end
  FF0XW00.FFZINDMO[FF0XWCNT] = FF0XW00.FF0XWDT;
                                   /* first mo past range*/

  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* increment index*/
  FF0XW00.FF0XWMM = FF0XW00.FF0XWMM + 1; /* increment month*/
  if (FF0XW00.FF0XWMM > 12) /* month gt 12*/
    FF0XW00.FF0XWMM = 1; /* set month to 1*/
    if (FF0XW00.FF0XWYY == 99)
      FF0XW00.FF0XWCC = FF0XW00.FF0XWCC + 1; /* add 1 to year*/
      FF0XW00.FF0XWYY = 00;
    else
      FF0XW00.FF0XWYY = FF0XW00.FF0XWYY + 1; /* add 1 to year*/
    end
  end
  FF0XW00.FFZINDMO[FF0XWCNT] = FF0XW00.FF0XWDT; /* second mo past range*/

  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* increment index*/
  FF0XW00.FF0XWMM = FF0XW00.FF0XWMM + 1; /* increment month*/
  if (FF0XW00.FF0XWMM > 12) /* month gt 12*/
    FF0XW00.FF0XWMM = 1; /* set month to 1*/
    if (FF0XW00.FF0XWYY == 99)
      FF0XW00.FF0XWCC = FF0XW00.FF0XWCC + 1; /* add 1 to year*/
      FF0XW00.FF0XWYY = 00;
    else
      FF0XW00.FF0XWYY = FF0XW00.FF0XWYY + 1; /* add 1 to year*/
    end
  end
  FF0XW00.FFZINDMO[FF0XWCNT] = FF0XW00.FF0XWDT;
                                   /* third mo past range*/


end // end FF0X112

// Open PMHDR
Function FF0X120()
   /* ------------------------------------------------------------*/
   /* Format PMHDR call.*/
   /* ------------------------------------------------------------*/

  set FG1REC empty; /* Clear row storage area*/

  FG1REC.FG1BEGMO = FFWREC.FFABEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFWREC.FFAENDMO; /* End month*/
  FG1REC.XMSCD = "03"; /* 'Selected' status code*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

   /* ------------------------------------------------------------*/
   /* Open PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X120

// Fetch PMHDR
Function FF0X130()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.  The edit*/
   /* assured us that the header exists, otherwise a message was*/
   /* sent to the user from the edit and you would not be here.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0XW00.FF0XWHSW = "Y"; /* PMHDR found switch*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF0XW00.FF0XWHSW = "N"; /* PMHDR found switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X130

// Translate Totals
Function FF0X140()
   /* ------------------------------------------------------------*/
   /* Translate Beg Inventory total and load to W.S.*/
   /* ------------------------------------------------------------*/

   /* NO total shown*/

   /* ------------------------------------------------------------*/
   /* Translate Balance to Ship total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWBSA; /* Bal to Ship*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWBAS[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate On Order total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWONA; /* On Order*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWONO[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate SUG PRDCTN FCST total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWSFA; /* On Order*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWSPF[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate Supply total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWSUA; /* Supply*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWSUP[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate Ending Inventory total and load to W.S.*/
   /* ------------------------------------------------------------*/

   /* No total shown*/

   /* ------------------------------------------------------------*/
   /* Calculate Inventory Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = FF0XW03.FF0XWITA; /* Load total*/
  FF0XW00.FF0XWFDB = FF0XW00.FF0XWCNT - 1; /* Get count*/

  FF0XW00.FF0XWFDC = 0; /* Clear total*/
  if (FF0XW00.FF0XWFDB > 0)
    FF0XW00.FF0XWFDC = mathLib.round(FF0XW00.FF0XWFDA / FF0XW00.FF0XWFDB, -mathLib.decimals(FF0XW00.FF0XWFDC)); /* avg*/
  end

  FF0XW01.FF0XWIVT[FF0XWIXM] = FF0XW00.FF0XWFDC; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate Safety Stock total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWSSA; /* Safty Stock*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWSST[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate NIL PRDCTN total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWNPA; /* Nil Production*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWNIL[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate Production Fcst total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWPFA; /* Nil Production*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWMPF[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/

   /* ------------------------------------------------------------*/
   /* Translate Sug Tot Prdctn Fcst total and load to W.S.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWTPA; /* Nil Production*/

  XSFFS10(); /* Translation number*/

  FF0XW01.FF0XWTOT[FF0XWIXM] = FFXREC.FFXCHAR; /* Storage*/


end // end FF0X140

// Select PMSTY
Function FF0X145()
   /* ------------------------------------------------------------*/
   /* Clear PMSTY copybook.*/
   /* ------------------------------------------------------------*/

  set VPMSTY01 empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  VPMSTY01.FG1MODNB = FG1REC.FG1MODNB; /* Model number*/
  VPMSTY01.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  VPMSTY01.SY2CLRID = FFWREC.SY2CLRID; /* Color code*/
  VPMSTY01.XDMCD = FFWREC.XDMCD; /* Dim code*/
  VPMSTY01.YSMXDV = "10"; /* Division code*/

   /* ------------------------------------------------------------*/
   /* Select PMsty.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6540" ("S ", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, set switch, and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "145"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VPMSTY01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X145

// Select PMITM
Function FF0X150()
   /* ------------------------------------------------------------*/
   /* Clear PMITM copybook.*/
   /* ------------------------------------------------------------*/

  set FG2REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FG2REC.FG1MODNB = FG1REC.FG1MODNB; /* Model number*/
  FG2REC.FG2MODMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FG2REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FG2REC.SY2CLRID = FFWREC.SY2CLRID; /* Color code*/
  FG2REC.XDMCD = FFWREC.XDMCD; /* Dim code*/

   /* ------------------------------------------------------------*/
   /* Select PMITM.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4020" ("S ", SQLCA, FG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, set switch, and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
        FF0XW00.FF0XWISW = "Y"; /* PMITM found switch*/
        FF0XW00.FF0XWDSW = "Y"; /* Data found switch*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG2REC.FG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X150

// Get supporting data SYCLR/SYDV
Function FF0X155()

   /* ------------------------------------------------------------*/
   /* If style does not exist on VFFSTY01 or VPMSTY01 then we*/
   /* will let user update master production forecast only.*/
   /* Here we will get  supporting data from VSYCLR01 or VSYDVL01*/
   /* ------------------------------------------------------------*/

  if (FF3REC.SY2CLRID == " ")
    FF0X165(); /* get supporting data VSYDVL01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FFWREC.SY1SSTNM = PG4REC.SY1SSTNM; /* style name*/
      FF0XW00.SYBSTGNB = PG4REC.SYBSTGNB; /* save style group*/
      FF0XW00.XPCCD = PG4REC.XPCCD; /* save category*/
      if (PG4REC.XPRCD in XPRTBL.XPRCD)
        FF0XW00.YPGCD = XPRTBL.YPGCD[sysVar.arrayIndex];
      end /* get typ grp*/
      FF0XW00.YSMXDV = FFWREC.YSMXDV; /* save division*/
      FF0XW00.XPLCD = PG4REC.XPLCD; /* save line*/
      FF0XW01.SY2SSCIN = PG4REC.SY2SSCIN; /* Save sfty stk ind*/
      FF0XW01.FF3PREFL = "N"; /* Save preset flag*/
      FF0XW01.SY2FDSMO = PG4REC.PG4FSLMO; /* Save intro month*/
      FF0XW01.SY2PDCMO = PG4REC.SY2PDCMO; /* Save close-out mo*/
      FF0XW01.FSTPRDMO = PG4REC.PG4FDLMO; /* first prod mo*/
    end
  else
    FF0X166(); /* get supporting data VSYclr01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FFWREC.SY2CLRID = PG2REC.SY2CLRID; /* color id*/
      FFWREC.XDMCD = PG2REC.XDMCD; /* dimension*/
      FFWREC.SY1SSTNM = PG2REC.SY1SSTNM; /* style name*/
      FFWREC.SY2CLRAB = PG2REC.SY2CLRAB; /* color name*/
      FF0XW00.SYBSTGNB = PG2REC.SYBSTGNB; /* save style group*/
      FF0XW00.XPCCD = PG2REC.XPCCD; /* save category*/
      if (PG2REC.XPRCD in XPRTBL.XPRCD)
        FF0XW00.YPGCD = XPRTBL.YPGCD[sysVar.arrayIndex];
      end /* get typ grp*/
      FF0XW00.YSMXDV = FFWREC.YSMXDV; /* save division*/
      FF0XW00.XPLCD = PG2REC.XPLCD; /* save line*/
      FF0XW01.SY2SSCIN = PG2REC.SY2SSCIN; /* Save sfty stk ind*/
      FF0XW01.FF3PREFL = "N"; /* Save preset flag*/
      FF0XW01.SY2FDSMO = PG2REC.SY2FDSMO; /* Save intro month*/
      FF0XW01.SY2PDCMO = PG2REC.SY2PDCMO; /* Save close-out mo*/
      FF0XW01.FSTPRDMO = PG2REC.PG2FDLMO; /* first prod mo*/
    end
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    FFWREC.XXXMODID = "155"; /* Module identification*/
    set FF0XM001.SY1STNBR cursor, bold; /* Highlight*/
    set FF0XM001.SY2CLRID bold; /* Highlight*/
    set FF0XM001.XDMCD bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
  end
end // end FF0X155

// Select MSTY
Function FF0X160()
   /* ------------------------------------------------------------*/
   /* Clear MSTY copybook.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF9REC.FF4FCTMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Div grp code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color code*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dim code*/

   /* ------------------------------------------------------------*/
   /* Select MSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
        FF0XW00.FF0XWDSW = "Y"; /* Data found switch*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "160"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X160

// Get data from VSYDVL01
Function FF0X165()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PG4REC empty;
  PG4REC.PG4STNBR = FFWREC.SY1STNBR; /* style number*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG4REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X165

// Get data from VSYCLR01
Function FF0X166()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = "02"; /* gpc code*/
  PG2REC.SY1STNBR = FFWREC.SY1STNBR;
  PG2REC.SY2CLRID = FFWREC.SY2CLRID;
  PG2REC.XDMCD = FFWREC.XDMCD;
  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* PG2REC not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PRODUCT DESCRIPTIONS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X166

// Save data from PMHDR & MSTY
Function FF0X170()
   /* ------------------------------------------------------------*/
   /* If data exists on a model, use it.  Otherwise use info*/
   /* from MSTY, Month Mstr by Prod.  Hold data for calculations*/
   /* in number form; translate fields that appear on the map.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWISW == "Y") /* PMITM found switch*/
    FF0XW02.FG2SUGFC[FF0XWCNT] = FG2REC.FG2SUGFC; /* Hold Sug fcst*/
  else
    FF0XW02.FG2SUGFC[FF0XWCNT] = FF9REC.FF6SUGBY; /* Hold Sug fcst*/
  end
  FF0XW02.FF6BEINV[FF0XWCNT] = FF9REC.FF6BEINV; /* Hold Beg inv*/
  FF0XW02.FF6SFSTK[FF0XWCNT] = FF9REC.FF6SFSTK; /* Hold Sfty stk*/

   /* ------------------------------------------------------------*/
   /* If the user has requested "CALC-SBUY", pf 19*/
      /* if modeled prdctn fcst is currently display*/
         /* use sug buy for the "sug prdctn fcst"*/
      /* else*/
         /* use modeled prodctn fcst*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWCSW == "Y") /* CALC-SBUY switch*/

    FFWREC.XXXMODID = "170"; /* module id*/

    if (FF0XM001.FF0XMSPH == "MODELD PRDCTN FCST")
      FF0XW01.FF0XMSPH = "SUGGESTED BUY  ";
      FF0XW02.FG2SUGFC[FF0XWCNT] = FF9REC.FF6SUGBY; /* Hold Sug fcst*/
      FFWREC.XXXMSGNO = 248; /* indicated displ master sugg buy*/
    else
      FF0XW01.FF0XMSPH = "MODELD PRDCTN FCST";
      FFWREC.XXXMSGNO = 401; /* indicated displ modeld prdctn fcst*/
      if (FF0XW00.FF0XWISW == "Y") /* PMITM found switch*/
        FF0XW02.FG2SUGFC[FF0XWCNT] = FG2REC.FG2SUGFC;
                                   /* Hold Sug fcst*/
      else
        FF0XW02.FG2SUGFC[FF0XWCNT] = 0; /* Hold Sug fcst*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* These fields are from MSTY, Month Mstr by Prod.*/
   /* ------------------------------------------------------------*/

  FF0XW02.FF6PRFCT[FF0XWCNT] = FF9REC.FF6PRFCT; /* Hold Mstr Pfcst*/
  FF0XW02.FFRSSFCT[FF0XWCNT] = FF9REC.FFRSSFCT; /* Hold sft stk nbr*/

  FF0XW02.FG4ONORD[FF0XWCNT] = FF9REC.FG4ONORD; /* Hold On Order*/
  FF0XW02.FF6SLFCT = FF9REC.FF6SLFCT; /* Hold Sales Fcst*/

   /* ------------------------------------------------------------*/
   /* Accumulate Sls Fcst for INV TURNS calculation.*/
   /* ------------------------------------------------------------*/

  FF0XW02.FF0XWSLS = FF0XW02.FF0XWSLS + FF9REC.FF6SLFCT;
                                   /* Accum Sales Fcst*/

end // end FF0X170

// Obtain Data for Calculations
Function FF0X180()
   /* ------------------------------------------------------------*/
   /* Select MSTY for NIl Prdctn data.*/
   /* ------------------------------------------------------------*/

  FF0X181(); /* Select MSTY for NIL Prdctn*/

   /* ------------------------------------------------------------*/
   /* Obtain FHSTY for shipped qty history.*/
   /* ------------------------------------------------------------*/

  set FH2REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Begin month*/
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FF0XWCNT]; /* End month*/

  FH2REC.SY1STNBR = FFWREC.SY1STNBR; /* style nbr*/
  FH2REC.SY2CLRID = FFWREC.SY2CLRID; /* color id*/
  FH2REC.XDMCD = FFWREC.XDMCD; /* dimension*/
  FH2REC.XLCCD = "10"; /* life cycle*/
  FH2REC.XQACD = "01"; /* quality code*/
  FH2REC.XDVCD = FFWREC.YSMXDV; /* division*/
  FH2REC.XCTCD = FFWREC.XCTCD; /* country*/
  FH2REC.XWHCD = "*"; /* Warehouse code*/
  FH2REC.YSMXOT = "*"; /* order type grp*/
  FH2REC.FH1PNAC = "*"; /* nat'l acct flag*/
  FH2REC.XDSCD = "*"; /* dir ship flag*/

  TA1REC.TA1PGMNM = "FF0X180"; /* Calling process*/

  XSFFS53(); /* Sum VFHSTY01 quantities*/

  FF0XW02.FH2SHP = FH2REC.FH2SHP; /* Hold shipped qty*/

   /* ------------------------------------------------------------*/
   /* Select MSTY for summed sales data.*/
   /* ------------------------------------------------------------*/

  FF0X182(); /* Select MSTY for summed sales data*/

   /* ------------------------------------------------------------*/
   /* Calculate fields*/
   /* ------------------------------------------------------------*/

  FF0X183(); /* Perform Calculations*/
   /* ------------------------------------------------------------*/
   /* Reset PMITM found flag*/
   /* ------------------------------------------------------------*/
  FF0XW00.FF0XWISW = "N";

end // end FF0X180

// Select MSTY for NIL Prdctn
Function FF0X181()
   /* ------------------------------------------------------------*/
   /* Clear MSTY copybook.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format FFFREC.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Beg month*/
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FF0XWCNT]; /* End month*/
  FFFREC.FFFFUNCD = "SS"; /* Function*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style nbr*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dimension*/
  FF9REC.XCTCD = "*"; /* Country cd*/
  FF9REC.YSMXDV = "20"; /* Division cd*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data, and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* row not found*/

      FF0XW02.FF0XWNPF = FF9REC.FF6PRFCT; /* Hold NIl Prdctn*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "181"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X181

// Select MSTY summed sls data
Function FF0X182()
   /* ------------------------------------------------------------*/
   /* Clear MSTY copybook.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format FFFREC.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  FF0XW00.FF0XWIX2 = FF0XW00.FF0XWCNT + 1;
  FFFREC.FFFBEGMO = FF0XW00.FFZINDMO[FF0XWIX2]; /* Beginning month*/

  FF0XW00.FF0XWIX2 = FF0XW00.FF0XWCNT + 3;
  FFFREC.FFFENDMO = FF0XW00.FFZINDMO[FF0XWIX2]; /* Ending month*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF9REC.YSMXDV = "10"; /* Division group code*/
  FF9REC.XCTCD = "USA"; /* Foreign country code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color identification*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dimension code*/

   /* ------------------------------------------------------------*/
   /* Select MSTY for summed sales data.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no row was found*/

      FF0XW02.FF0XWSUM[FF0XWCNT] = FF9REC.FF6SLFCT; /* Hold Sum sls fcst*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "182"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUMMED SALES FCST DATA";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X182

// Calculate fields for columns
Function FF0X183()
   /* ------------------------------------------------------------*/
   /* FF0XWCNT is the counter for FF0XW02 which occurs 12 times*/
   /* FF0XWIXM is the counter for FF0XW01 which occurs 14 times*/
   /* ------------------------------------------------------------*/
   /* Translate Beginning Inventory*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWCNT == 1) /* If this is the first month of the range*/
    FFXREC.FFXNUMB = FF0XW02.FF6BEINV[FF0XWCNT]; /* Load for trans*/
    XSFFS10(); /* Translate*/
    FF0XW01.FF0XWBEI[FF0XWIXM] = FFXREC.FFXCHAR; /* Beg inv*/

  else
    /* ------------------------------------------------------------*/
     /* use last month's ending inventory for this month's beg inv.*/
    /* ------------------------------------------------------------*/

    if (FF0XW00.FF0XWCNT <= 7)
      FF0XW00.FF0XWIX3 = FF0XW00.FF0XWCNT - 1; /* subtract 1*/
      FF0XW01.FF0XWBEI[FF0XWIXM] = FF0XW01.FF0XWEIV[FF0XWIX3]; /* BI*/
    else
      FF0XW01.FF0XWBEI[FF0XWIXM] = FF0XW01.FF0XWEIV[FF0XWCNT]; /* BI*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Calculate:*/
               /* BAL-TO-SHIP  =  Sales Fcst  -  Shipped Qty*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = 0; /* clear work field*/
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FF6SLFCT;
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA - FF0XW02.FH2SHP;
  FF0XW02.FF0XWBTS[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/

  FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Bal to ship*/
  XSFFS10(); /* translate units to thousands*/
  FF0XW01.FF0XWBAS[FF0XWIXM] = FFXREC.FFXCHAR; /* Bal to Ship*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWBSA = FF0XW03.FF0XWBSA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Translate On Order.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW02.FG4ONORD[FF0XWCNT]; /* Load for trans*/
  XSFFS10(); /* Translate*/
  FF0XW01.FF0XWONO[FF0XWIXM] = FFXREC.FFXCHAR; /* On Order*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWONA = FF0XW03.FF0XWONA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Translate Suggested Production Forecast.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW02.FG2SUGFC[FF0XWCNT]; /* Load for trans*/
  XSFFS10(); /* Translate*/
  FF0XW01.FF0XWSPF[FF0XWIXM] = FFXREC.FFXCHAR; /* Sug fcst*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWSFA = FF0XW03.FF0XWSFA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Translate and hold modeled suggested forecast for compares.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWISW == "Y") /* pmitm found*/
    FFXREC.FFXNUMB = FG2REC.FG2SUGFC; /* Load for trans*/
    XSFFS10(); /* Translate*/
    FF0XW00.FF0XWHSF[FF0XWIXM] = FFXREC.FFXCHAR; /* Hold for compare*/
  else
    FF0XW00.FF0XWHSF[FF0XWIXM] = " "; /* Hold for compare*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* SUPPLY  =  Beg Inv  +  On Order  +  Sug Prd Fcst*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWCNT > 1) /* If not on the first month*/
    FF0XW00.FF0XWIX3 = FF0XW00.FF0XWCNT - 1; /* subtract 1*/
    FF0XW00.FF0XWFDA = FF0XW02.FF0XWHEI[FF0XWIX3];
  else
    FF0XW00.FF0XWFDA = FF0XW02.FF6BEINV[FF0XWCNT];
  end

  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FG4ONORD[FF0XWCNT];
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FG2SUGFC[FF0XWCNT];
  FF0XW02.FF0XWHSU[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/

  FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Supply*/
  XSFFS10(); /* Translate units to thousands*/
  FF0XW01.FF0XWSUP[FF0XWIXM] = FFXREC.FFXCHAR; /* display*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWSUA = FF0XW03.FF0XWSUA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* END INVENTORY  =  Supply  -  Bal-to-Ship*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = FF0XW02.FF0XWHSU[FF0XWCNT]; /* Supply held*/
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA - FF0XW02.FF0XWBTS[FF0XWCNT];
                                   /* bal shp*/

  FF0XW02.FF0XWHEI[FF0XWCNT] = FF0XW00.FF0XWFDA; /* hold end inv*/
  FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Bal to ship*/
  XSFFS10(); /* translate units to thousands*/
  FF0XW01.FF0XWEIV[FF0XWIXM] = FFXREC.FFXCHAR; /* display*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWEIA = FF0XW03.FF0XWEIA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  FF0XS02();

  FF0XW01.FF0XWIVT[FF0XWIXM] = FF0XW00.FF0XWFDC; /* display*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWITA = FF0XW03.FF0XWITA + FF0XW00.FF0XWFDC;

   /* ------------------------------------------------------------*/
   /* Translate Safety Stock.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW02.FF6SFSTK[FF0XWCNT]; /* Load for trans*/
  XSFFS10(); /* Translate*/
  FF0XW01.FF0XWSST[FF0XWIXM] = FFXREC.FFXCHAR; /* Sfty Stk*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWSSA = FF0XW03.FF0XWSSA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Translate NIL Production.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW02.FF0XWNPF; /* Nil Sales Fcst*/
  XSFFS10(); /* translate units to thousands*/
  FF0XW01.FF0XWNIL[FF0XWIXM] = FFXREC.FFXCHAR; /* display field*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWNPA = FF0XW03.FF0XWNPA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Translate Master Production Forecast.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW02.FF6PRFCT[FF0XWCNT]; /* Load for trans*/
  XSFFS10(); /* Translate*/
  FF0XW01.FF0XWMPF[FF0XWIXM] = FFXREC.FFXCHAR; /* Mstr Prdctn Fcst*/
  FF0XW00.FF0XWHMF[FF0XWIXM] = FFXREC.FFXCHAR; /* Hold for compare*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWPFA = FF0XW03.FF0XWPFA + FFXREC.FFXNUMB;

   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* SUG TOT PROD FCST  =  Nil Prdctn fcst  +  SUGG Prdctn Fcst*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = 0; /* clear field*/
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FF0XWNPF;
  FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FG2SUGFC[FF0XWCNT];

  FF0XW02.FF0XWHTP[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/
  FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Total Production*/
  XSFFS10(); /* translate units to thousands*/
  FF0XW01.FF0XWTOT[FF0XWIXM] = FFXREC.FFXCHAR; /* display*/

   /* --------------*/
   /* add to total*/
   /* --------------*/
  FF0XW03.FF0XWTPA = FF0XW03.FF0XWTPA + FFXREC.FFXNUMB;


end // end FF0X183

// Close PMHDR
Function FF0X190()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X190

// Format and converse the map
Function FF0X200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0XW00.FF0XWSWF == "Y") /* Map must be formatted*/
      FF0X210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0XM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0XM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0XM001.CAITEM; /* Application data*/


end // end FF0X200

// Format the data to display
Function FF0X210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0XM001 empty; /* M001 input/output area*/

  FF0XW00.FF0XWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the heading.*/
   /* ------------------------------------------------------------*/

  FF0XM001.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
  FF0XM001.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

  FF0XM001.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF0XM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Abbreviation*/

  FF0XM001.SY1STNBR = FFWREC.SY1STNBR; /* Style nbr*/
  FF0XM001.SY1SSTNM = FFWREC.SY1SSTNM; /* Abbreviation*/

  FF0XM001.SY2CLRID = FFWREC.SY2CLRID; /* Color id*/
  FF0XM001.SY2CLRAB = FFWREC.SY2CLRAB; /* Abbreviation*/

  FF0XM001.XDMCD = FFWREC.XDMCD; /* Dimension*/

  FF0XM001.SY2FDSMO = FF0XW01.SY2FDSMO; /* Intro month*/
  FF0XM001.SY2PDCMO = FF0XW01.SY2PDCMO; /* Close-out month*/
  FF0XM001.SY2SSCIN = FF0XW01.SY2SSCIN; /* Safety stock ind*/
  FF0XM001.FF3PREFL = FF0XW01.FF3PREFL; /* Preset flag*/
  FF0XM001.FF0XMSPH = FF0XW01.FF0XMSPH; /* variable column hdr*/
  FF0XM001.FSTPRDMO = FF0XW01.FSTPRDMO; /* first prod mo*/
  FF0XM001.FF0XSESN = FF0XW01.FF0XW-SESN-YEAR; /* Season Code like FA98*/

   /* ------------------------------------------------------------*/
   /* The following piece of code controls the highlighting of*/
   /* ending inv. field for the last month if > 0.*/
   /* This check needs to be performed regardless of whether*/
   /* data changed ( CACHGFL = 'y' ) to ensure proper resetting of*/
   /* the map variable.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWPAG == 1) /* if current page is 1*/
    FF0XW00.FF0XWIXM = 1;
    while (FF0XW00.FF0XWIXM <= 6
     && FF0XW00.FF0XWIXM <= FF0XW00.FF0XWNBR)
      if (FF0XW00.FF0XWIXM == FF0XW00.FF0XWNBR) /* last month*/
        if (FF0XW01.FF0XWEIV[FF0XWNBR] != "     "
         && FF0XW01.FF0XWEIV[FF0XWNBR] != "   -*"
         && FF0XW01.FF0XWEIV[FF0XWNBR] != "    *")
          set FF0XM001.FF0XWEIV[FF0XWIXM] cursor, protect, red;
        else
          set FF0XM001.FF0XWEIV[FF0XWIXM] defaultColor;
          set FF0XM001.FFZBYYMM cursor;
        end
      else
        set FF0XM001.FF0XWEIV[FF0XWIXM] protect, defaultColor;
        set FF0XM001.FFZBYYMM cursor;
      end
      FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1;
    end
  else
    FF0XW00.FF0XWIXM = 1; /* counter for columns*/
    FF0XW00.FF0XWCNT = 8; /* counter for months plus totals*/
    FF0XW00.FF0XWIX2 = FF0XW00.FF0XWNBR + 1; /* nbr of mos plus sub*/

    while (FF0XW00.FF0XWIXM <= 6
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWIX2)
      if (FF0XW00.FF0XWCNT == FF0XW00.FF0XWIX2) /* last month*/
        if (FF0XW01.FF0XWEIV[FF0XWCNT] != "     "
         && FF0XW01.FF0XWEIV[FF0XWCNT] != "   -*"
         && FF0XW01.FF0XWEIV[FF0XWCNT] != "    *")
          set FF0XM001.FF0XWEIV[FF0XWIXM] cursor, protect, red;
        else
          set FF0XM001.FF0XWEIV[FF0XWIXM] defaultColor;
          set FF0XM001.FFZBYYMM cursor;
        end
      end
      FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1;
      FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* Format the month range for the column headings.*/
   /* ------------------------------------------------------------*/

  if (FF0XW01.CACHGFL == "Y") /* If data exist*/

    if (FF0XW00.FF0XWPAG == 1) /* if current page is 1*/
      FF0XW00.FF0XWIXM = 1; /* counter for columns*/

      while (FF0XW00.FF0XWIXM <= 6 /* first page of data*/
       && FF0XW00.FF0XWIXM <= FF0XW00.FF0XWNBR) /* nbr of months*/

        FF0XM001.FF0XWRMO[FF0XWIXM] = FF0XW00.FFZIYYMM[FF0XWIXM];

        FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* counter for columns*/
      end

      /* ------------------------------------------------------------*/
       /* Go through once more to load the "total" heading.*/
      /* ------------------------------------------------------------*/

      if (FF0XW00.FF0XWNBR > 0) /* If any months exist*/
        if (FF0XW00.FF0XWPG2 == "Y") /* If page 2 exists*/
          FF0XM001.FF0XWRMO[FF0XWIXM] = " SUB"; /* load 'subtotal'*/
        else
          FF0XM001.FF0XWRMO[FF0XWIXM] = "TOTL"; /* load 'total'*/
        end
      end

    else /* Page 2*/

      FF0XW00.FF0XWIXM = 1; /* Counter for columns*/
      FF0XW00.FF0XWCNT = 7; /* counter for months*/

      while (FF0XW00.FF0XWIXM <= 7 /* second page of data*/
       && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

        FF0XM001.FF0XWRMO[FF0XWIXM] = FF0XW00.FFZIYYMM[FF0XWCNT];

        FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* counter for columns*/
        FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* counter for months*/

      end

      FF0XM001.FF0XWRMO[FF0XWIXM] = "TOTL"; /* set grand total col*/

    end

    /* ------------------------------------------------------------*/
     /* clear MCAT copybook*/
    /* ------------------------------------------------------------*/

    set FF7REC empty;

    /* ------------------------------------------------------------*/
     /* FORMAT CALL*/
    /* ------------------------------------------------------------*/

    FF7REC.FF4FCTMO = FF0XW04.FF0XWCY2; /* MONTH*/
    FF7REC.XPCCD = FF0XW00.XPCCD; /* CATEGORY CODE*/
    FF7REC.YPGCD = FF0XW00.YPGCD; /* TYPE*/
    FF7REC.XCTCD = FFWREC.XCTCD; /* COUNTRY*/
    FF7REC.YSMXDV = FFWREC.YSMXDV; /* DIV GRP CD*/
    /* ------------------------------------------------------------*/
     /* SELECT MCAT*/
    /* ------------------------------------------------------------*/

    FF0X661();

    /* ------------------------------------------------------------*/
     /* Format the detail lines on the map*/
    /* ------------------------------------------------------------*/

    if (FF0XW00.FF0XWPAG == 1) /* If current page is 1*/

      FF0XW00.FF0XWIXM = 1; /* Counter for columns*/
      FF0XW00.FF0XWCNT = 1; /* counter for months*/

      while (FF0XW00.FF0XWIXM <= 6 /* first page of data*/
       && FF0XW00.FF0XWIXM <= FF0XW00.FF0XWNBR) /* nbr of months*/

        FF0XW04.FF0XWYM3 = FF0XM001.FF0XWRMO[FF0XWIXM];
  /* IF FF0XW04.FF0XWYM3 GT 58;*/
        if (FF0XW04.FF0XWYY3 > 58)
          FF0XW04.FF0XWCC3 = 19;
        else
          FF0XW04.FF0XWCC3 = 20;
        end

        if (FF0XW00.FF0XWFSY == "N" /* not on VFFSTY01*/
         && FF0XW00.FF0XWMSY == "N") /* not on VPMSTY01*/
           /* NEXT SENTENCE*/
        else

          if (FF0XW04.FF0XWCY3 > FF0XW04.FF0XWCY2) /* > buy mth*/
            set FF0XM001.FF0XWSPF[FF0XWIXM] normal; /* make field visable*/
          else
            if (FF0XW04.FF0XWCY3 == FF0XW04.FF0XWCY2
             && FF7REC.FF7CBYFL == "N")
              set FF0XM001.FF0XWSPF[FF0XWIXM] normal; /* make visable*/
            else
              set FF0XM001.FF0XWSPF[FF0XWIXM] skip; /* protect*/
            end
          end

          if (FF0XW04.FF0XWCY3 == FF0XW04.FF0XWCY2)
            if (FF7REC.FF7CBYFL == "N")
              FF0XW04.FF0XWBIX = FF0XW00.FF0XWIXM; /* buy mth idx*/
            else
              FF0XW04.FF0XWBIX = FF0XW00.FF0XWIXM + 1; /* buy mth + 1*/
            end

            if (FF0XW04.FF0XWBIX <= 6) /* index within date columns*/
              set FF0XM001.FF0XWSPF[FF0XWBIX] cursor;
            else
              set FF0XM001.SY1STNBR cursor;
            end

          end

        end

        if (FF0XW04.FF0XWCY3 > FF0XW04.FF0XWCY2) /* > buy mth*/
          set FF0XM001.FF0XWMPF[FF0XWIXM] normal; /* make field visable*/
        else
          if (FF0XW04.FF0XWCY3 == FF0XW04.FF0XWCY2
           && FF7REC.FF7CBYFL == "N")
            set FF0XM001.FF0XWMPF[FF0XWIXM] normal; /* make visable*/
          else
            set FF0XM001.FF0XWMPF[FF0XWIXM] skip; /* protect*/
          end
        end

        FF0X211(); /* load the map*/

      end

    else /* Page 2*/

      FF0XW00.FF0XWIXM = 1; /* counter for columns*/
      FF0XW00.FF0XWCNT = 8; /* counter for months plus totals*/
      FF0XW00.FF0XWIX2 = FF0XW00.FF0XWNBR + 1; /* nbr of mos plus sub*/

      set FF0XM001.FF0XWSPF[1] cursor;

      while (FF0XW00.FF0XWIXM <= 6 /* max nbr of dis fields*/
       && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWIX2) /* nbr of months + 1*/

        FF0XW04.FF0XWYM3 = FF0XM001.FF0XWRMO[FF0XWIXM];
  /* IF FF0XW04.FF0XWYM3 GT 58;*/
        if (FF0XW04.FF0XWYY3 > 58)
          FF0XW04.FF0XWCC3 = 19;
        else
          FF0XW04.FF0XWCC3 = 20;
        end

        if (FF0XW00.FF0XWFSY == "N" /* not on VFFSTY01*/
         && FF0XW00.FF0XWMSY == "N") /* not on VPMSTY01*/
           /* NEXT SENTENCE*/
        else

          if (FF0XW04.FF0XWCY3 > FF0XW04.FF0XWCY2) /* > buy mth*/
            set FF0XM001.FF0XWSPF[FF0XWIXM] normal; /* make field visable*/
          else
            if (FF0XW04.FF0XWCY3 == FF0XW04.FF0XWCY2
             && FF7REC.FF7CBYFL == "N")
              set FF0XM001.FF0XWSPF[FF0XWIXM] normal; /* make visable*/
            else
              set FF0XM001.FF0XWSPF[FF0XWIXM] skip; /* protect*/
            end
          end

          if (FF0XW04.FF0XWCY3 <= FF0XW04.FF0XWCY2) /* buy mth*/
            FF0XW04.FF0XWBIX = FF0XW00.FF0XWIXM + 1; /* buy mth idx + 1*/

            if (FF0XW04.FF0XWBIX <= 6) /* index within date columns*/
              set FF0XM001.FF0XWSPF[FF0XWBIX] cursor;
            else
              set FF0XM001.SY1STNBR cursor;
            end

          end

        end

        if (FF0XW04.FF0XWCY3 > FF0XW04.FF0XWCY2) /* > buy mth*/
          set FF0XM001.FF0XWMPF[FF0XWIXM] normal; /* make field visable*/
        else
          if (FF0XW04.FF0XWCY3 == FF0XW04.FF0XWCY2
           && FF7REC.FF7CBYFL == "N")
            set FF0XM001.FF0XWMPF[FF0XWIXM] normal; /* make visable*/
          else
            set FF0XM001.FF0XWMPF[FF0XWIXM] skip; /* protect*/
          end
        end

        FF0X211(); /* load the map*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Go through once more to load the "total" amounts.*/
    /* ------------------------------------------------------------*/

    if (FF0XW00.FF0XWNBR > 0) /* If any months exist*/

      set FF0XM001.FF0XWSPF[FF0XWIXM] skip; /* make field show*/
      set FF0XM001.FF0XWMPF[FF0XWIXM] skip; /* make field show*/

      FF0X211(); /* load the map*/

    end

    if (converseVar.eventKey is pf20
     || converseVar.eventKey is pf21
     || converseVar.eventKey is pf16)
      set FF0XM001.SY1STNBR cursor;
    else
      if (FF0XW00.FF0XWFSY == "N" /* not on VFFSTY01*/
       && FF0XW00.FF0XWMSY == "N") /* not on VPMSTY01*/
        set FF0XM001.FF0XWMPF cursor;
      end
    end

  end


end // end FF0X210

// Load the data
Function FF0X211()
   /* ------------------------------------------------------------*/
   /* Load the map.*/
   /* ------------------------------------------------------------*/

  FF0XM001.FF0XWBEI[FF0XWIXM] = FF0XW01.FF0XWBEI[FF0XWCNT];
  FF0XM001.FF0XWBAS[FF0XWIXM] = FF0XW01.FF0XWBAS[FF0XWCNT];
  FF0XM001.FF0XWONO[FF0XWIXM] = FF0XW01.FF0XWONO[FF0XWCNT];
  FF0XM001.FF0XWSPF[FF0XWIXM] = FF0XW01.FF0XWSPF[FF0XWCNT];
  FF0XM001.FF0XWSUP[FF0XWIXM] = FF0XW01.FF0XWSUP[FF0XWCNT];
  FF0XM001.FF0XWEIV[FF0XWIXM] = FF0XW01.FF0XWEIV[FF0XWCNT];
  FF0XM001.FF0XWIVT[FF0XWIXM] = FF0XW01.FF0XWIVT[FF0XWCNT];
  FF0XM001.FF0XWSST[FF0XWIXM] = FF0XW01.FF0XWSST[FF0XWCNT];
  FF0XM001.FF0XWNIL[FF0XWIXM] = FF0XW01.FF0XWNIL[FF0XWCNT];
  FF0XM001.FF0XWMPF[FF0XWIXM] = FF0XW01.FF0XWMPF[FF0XWCNT];
  FF0XM001.FF0XWTOT[FF0XWIXM] = FF0XW01.FF0XWTOT[FF0XWCNT];

  if (FF0XM001.FSTPRDMO == FF0XM001.FF0XWRMO[FF0XWIXM])
    if (FF0XM001.FF0XWMPF[FF0XWIXM] > " " || 
    FF0XM001.FF0XWNIL[FF0XWIXM] > " ")
      /* next sentence*/
    else
      FFWREC.XXXMODID = "211";
      FFWREC.XXXMSGNO = "519";
    end
  end

  FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* counter for columns*/
  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* counter for months*/


end // end FF0X211

// Check attention identifier
Function FF0X300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0XW00.FF0XWSWR == "Y") /* Request for data*/
      set FF0XW01 empty; /* M001 display storage*/
    end

    FF0XW00.FF0XWSWF = "Y"; /* Format the map switch*/
    FF0XW00.FF0XWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0XM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF17 was pressed transfer to map  2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (FFWREC.XPCCD == FF0XW00.XPCCD       
     && FFWREC.YPGCD == FF0XW00.YPGCD       
     && FFWREC.FFABEGMO == FF0XW00.FF0XWBDT /* beg month equals*/
     && FFWREC.FFAENDMO == FF0XW00.FF0XWXDT) /* end month equals*/
      FF0XW00.FF0XWSWD = "2"; /* map switch*/
      FF0XW04.FF0XWSWF = "Y"; /* format the map*/
      exit stack; /* Exit to display map*/
    else
      FFWREC.XPCCD = FF0XW00.XPCCD;
      FFWREC.YPGCD = FF0XW00.YPGCD;
      FF0XW00.FF0XWBDT = FFWREC.FFABEGMO;
      FF0XW00.FF0XWXDT = FFWREC.FFAENDMO;
      FF0XW00.FF0XWSWD = "2"; /* map switch*/
      FF0XW04.FF0XWSWR = "Y"; /* request for data*/
      FF0XW04.FF0XWSWF = "Y"; /* format the map*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0XM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end


    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      if (COMMAREA.CAFRMAPP == "06")
        COMMAREA.CATOAP = "FG06"; /* TO application*/
      else
        COMMAREA.CATOAP = "FG05";
      end
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20  /* and PF20 was not pressed*/
   && converseVar.eventKey not pf21) /* and PF21 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf16 /* and PF16 was pressed*/
   || converseVar.eventKey is pf20) /* and PF20 was pressed*/

    if (FF0XW00.FF0XWFSY == "N" /* style not found on VFFSTY01*/
     && FF0XW00.FF0XWMSY == "N") /* style not found on VPMSTY01*/
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(3); /* Indicate invalid attention key*/
      exit stack; /* Exit to display map*/
    end

  end

end // end FF0X300

// Reset highlighted fields
Function FF0X400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0XM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FF0XM001.FFZEYYMM initialAttributes; /* Ending month*/
  set FF0XM001.YSMXDV initialAttributes; /* Division group*/
  set FF0XM001.SY1STNBR initialAttributes; /* Style Number*/
  set FF0XM001.SY2CLRID initialAttributes; /* Color Id*/
  set FF0XM001.XDMCD initialAttributes; /* Dimension*/
  set FF0XM001.FF3PREFL initialAttributes; /* preset flag*/

  set FF0XM001.CATOAP initialAttributes; /* TO application*/
  set FF0XM001.CAITEM initialAttributes; /* Application data*/

  FF0XW00.FF0XWCNT = 1; /* set counter*/
  while (FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR /* while LE # of mos*/
   && FF0XW00.FF0XWCNT <= 7) /* and LE seven*/

    set FF0XM001.FF0XWSPF[FF0XWCNT] initialAttributes; /* Sug Prdctn Fcst*/
    set FF0XM001.FF0XWMPF[FF0XWCNT] initialAttributes; /* mstr Prdctn Fcst*/

    FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* Add one to counter*/

  end


end // end FF0X400

// Verify the entered data
Function FF0X500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll Left request*/
   || converseVar.eventKey is pf11) /* Scroll Right request*/

    FF0X510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If any enterable fields changed, verify.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no error exists*/
    if (FF0XW00.FF0XWPAG == 1) /* If current page is 1*/

      FF0XW00.FF0XWIXM = 1; /* Counter map*/
      FF0XW00.FF0XWCNT = 1; /* counter months*/
      FF0XW00.FF0XWIX2 = 1; /* Counter working storage*/

      while (FF0XW00.FF0XWIXM <= 6 /* first page of data*/
       && FF0XW00.FF0XWIXM <= FF0XW00.FF0XWNBR) /* nbr of months*/

        FF0X520(); /* Verify fields*/
        FF0X530(); /* Check for key changes*/

      end

    else /* Page 2*/

      FF0XW00.FF0XWIXM = 1; /* counter map*/
      FF0XW00.FF0XWCNT = 7; /* counter months*/
      FF0XW00.FF0XWIX2 = 8; /* counter working storage*/

      while (FF0XW00.FF0XWIXM <= 6 /* max nbr of dis fields*/
       && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

        FF0X520(); /* Verify fields*/
        FF0X530(); /* Check for key changes*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FF0XM001.FFZBYYMM != FF0XW01.FFZBYYMM /* Beginning date changed*/
     || FF0XM001.FFZEYYMM != FF0XW01.FFZEYYMM /* or ending date changed*/
     || FF0XM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
     || FF0XM001.SY1STNBR != FFWREC.SY1STNBR  /* or style nbr changed*/
     || FF0XM001.SY2CLRID != FFWREC.SY2CLRID  /* or color id changed*/
     || FF0XM001.XDMCD != FFWREC.XDMCD        /* or dim changed*/
                                              
     || FF0XM001.FFZBYYMM == 0                /* Beginning date missing*/
     || FF0XM001.FFZEYYMM == 0                /* or ending date missing*/
     || FF0XM001.YSMXDV == " "                /* or division group missing*/
     || FF0XM001.SY1STNBR == " ")             /* or style nbr missing*/

      FF0X540(); /* Verify the key fields*/
      FF0X550(); /* Verify PMHDR exist*/

    else
      /* ------------------------------------------------------------*/
       /* Edit the preset flag*/
      /* -----------------------------------------------------------*/

      if (FF0XM001.FF3PREFL != FF0XW01.FF3PREFL) /* Preset flag changed*/
        if (FF0XM001.FF3PREFL == "Y" /* YES*/
         || FF0XM001.FF3PREFL == "N") /* NO*/
          FF0X610(); /* Select FFSTY*/
          if (SQLCA.VAGen_SQLCODE == 0) /* found on ffsty*/
             /* next sentence*/
          else
            set FF0XM001.FF3PREFL cursor, bold;
            FFWREC.XXXMODID = "500"; /* Module identification*/
            converseLib.validationFailed(11); /* Indicate not on database*/
          end
        else
          set FF0XM001.FF3PREFL cursor, bold;
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(427); /* Indicate must be 'y' or 'n'*/
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0X500

// Verify scroll request
Function FF0X510()
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that data exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    if (FF0XW00.FF0XWPG2 == "N") /* and no page 2 data available*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No columns to the right to display*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that data exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && FF0XW00.FF0XWPAG == 1)       /* Already on page one*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(23); /* No columns to the left to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.XDMCD != FFWREC.XDMCD) /* Dimension code changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM001.SY2CLRID != FFWREC.SY2CLRID) /* Color id changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM001.SY1STNBR != FFWREC.SY1STNBR) /* Style nbr changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM001.YSMXDV != FFWREC.YSMXDV) /* Division group changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM001.FFZEYYMM != FF0XW01.FFZEYYMM) /* Ending date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM001.FFZBYYMM != FF0XW01.FFZBYYMM) /* Beginning date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0XM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end


end // end FF0X510

// Check enterable fields
Function FF0X520()
   /* ------------------------------------------------------------*/
   /* If Sug Prdctn Fcst field was changed, verify field.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    /* ------------------------------------------------------------*/
     /* Verify field.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXCHAR = FF0XM001.FF0XWSPF[FF0XWIXM];
                                   /* send to translate*/

    XSFFS11();

    if (FFXREC.FFXRTNCD != 0) /* If error was found*/

      set FF0XM001.FF0XWSPF[FF0XWIXM] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(118); /* indicate field is invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If Mstr Prdctn Fcst field was changed, verify field.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    /* ------------------------------------------------------------*/
     /* Verify field.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXCHAR = FF0XM001.FF0XWMPF[FF0XWIXM];
                                   /* send to translate*/

    XSFFS11();

    if (FFXREC.FFXRTNCD != 0) /* If error was found*/

      set FF0XM001.FF0XWMPF[FF0XWIXM] cursor, bold; /* highlight*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(118); /* indicate field is invalid*/

    end

  end


end // end FF0X520

// Check for key changes
Function FF0X530()
   /* ------------------------------------------------------------*/
   /* If target field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2]
   || FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FF0XM001.FFZBYYMM != FF0XW01.FFZBYYMM /* range changed*/
     || FF0XM001.FFZEYYMM != FF0XW01.FFZEYYMM /* range changed*/
     || FF0XM001.YSMXDV != FFWREC.YSMXDV      /* div grp changed*/
     || FF0XM001.SY1STNBR != FFWREC.SY1STNBR  /* Style changed*/
     || FF0XM001.SY2CLRID != FFWREC.SY2CLRID  /* Color changed*/
     || FF0XM001.XDMCD != FFWREC.XDMCD)       /* Dim changed*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2])
        set FF0XM001.FF0XWSPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

      if (FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])
        set FF0XM001.FF0XWMPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

      if (FF0XM001.SY1STNBR != FFWREC.SY1STNBR) /* Style changed*/
        set FF0XM001.SY1STNBR cursor, bold; /* highlight*/
      end

      if (FF0XM001.SY2CLRID != FFWREC.SY2CLRID) /* Color changed*/
        set FF0XM001.SY2CLRID cursor, bold; /* highlight*/
      end

      if (FF0XM001.XDMCD != FFWREC.XDMCD) /* Dim changed*/
        set FF0XM001.XDMCD cursor, bold; /* highlight*/
      end

      if (FF0XM001.YSMXDV != FFWREC.YSMXDV) /* div grp changed*/
        set FF0XM001.YSMXDV cursor, bold; /* highlight*/
      end

      if (FF0XM001.FFZEYYMM != FF0XW01.FFZEYYMM) /* range changed*/
        set FF0XM001.FFZEYYMM cursor, bold; /* highlight*/
      end

      if (FF0XM001.FFZBYYMM != FF0XW01.FFZBYYMM) /* range changed*/
        set FF0XM001.FFZBYYMM cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey is pf20 /* If PF20 was pressed*/
     || converseVar.eventKey is pf21 /* If PF21 was pressed*/
     || converseVar.eventKey is pf16) /* If PF16 was pressed*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(111); /* Modifications not allowed*/

      if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2])
        set FF0XM001.FF0XWSPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

      if (FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])
        set FF0XM001.FF0XWMPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

    end

    if (converseVar.eventKey is pf10 /* If PF10 was pressed*/
     || converseVar.eventKey is pf11) /* If PF11 was pressed*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(111); /* Modifications not allowed*/

      if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2])
        set FF0XM001.FF0XWSPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

      if (FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])
        set FF0XM001.FF0XWMPF[FF0XWIXM] cursor, bold; /* highlight*/
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Add to counters.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to counter*/
  FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* add to counter*/
  FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to counter*/


end // end FF0X530

// Verify the key fields
Function FF0X540()
   /* ------------------------------------------------------------*/
   /* Verify division group.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FF0XM001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FF0X540 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FF0XM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FF0XM001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0XM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF0XM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FF0XM001.FFZEYYMM; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0XM001.FFZEYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FF0XM001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end


end // end FF0X540

// Verify 'SEL' model exists
Function FF0X550()
   /* ------------------------------------------------------------*/
   /* If there was an error found with the keys, return.  Other-*/
   /* wise, verify that a'Selected' model header exists.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If error exists*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Open PMHDR.*/
   /* ------------------------------------------------------------*/

  set FG1REC empty; /* Clear row storage area*/

  FG1REC.FG1BEGMO = FFZREC.FFZBEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFZREC.FFZENDMO; /* End month*/
  FG1REC.XMSCD = "03"; /* 'Selected' status code*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

  FF0X551(); /* Open PMHDR*/

   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  FF0X552(); /* Fetch PMHDR*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FF0XM001.FFZBYYMM cursor, bold; /* Highlight*/
    set FF0XM001.FFZEYYMM bold; /* Highlight*/
    converseLib.validationFailed(240); /* Indicate 'SEL' model must exist*/

  end

   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  FF0X553(); /* Close PMHDR*/


end // end FF0X550

// Open PMHDR
Function FF0X551()
   /* ------------------------------------------------------------*/
   /* Open PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "551"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X551

// Fetch PMHDR
Function FF0X552()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.  The edit*/
   /* assured us that the header exists, otherwise a message was*/
   /* sent to the user from the edit and you would not be here.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "552"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X552

// Close PMHDR
Function FF0X553()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "553"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X553

// Process valid input request
Function FF0X600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll Left was requested, Indicate first page*/
   /* data is to be displayed and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    FF0XW00.FF0XWPAG = 1; /* indicate page 1 data*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, indicate second page*/
   /* data to be displayed and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    FF0XW00.FF0XWPAG = 2; /* Indicate page 2 data*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FFZBYYMM != FF0XW01.FFZBYYMM /* Beginning month changed*/
   || FF0XM001.FFZEYYMM != FF0XW01.FFZEYYMM /* or ending month changed*/
   || FF0XM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
   || FF0XM001.SY1STNBR != FFWREC.SY1STNBR  /* or style nbr changed*/
   || FF0XM001.SY2CLRID != FFWREC.SY2CLRID  /* or color id changed*/
   || FF0XM001.XDMCD != FFWREC.XDMCD)       /* or dim changed*/

    /* ------------------------------------------------------------*/
     /* Save data.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/

    FFWREC.YSMXDV = FF0XM001.YSMXDV; /* Division group code*/
    FFWREC.YSMSMDSC = FF0XM001.YSMSMDSC; /* Division group name*/
    FFWREC.SY1STNBR = FF0XM001.SY1STNBR; /* style nbr*/
    FFWREC.SY1SSTNM = FF0XM001.SY1SSTNM; /* style name*/
    FFWREC.SY2CLRID = FF0XM001.SY2CLRID; /* color id*/
    FFWREC.SY2CLRAB = FF0XM001.SY2CLRAB; /* color name*/
    FFWREC.XDMCD = FF0XM001.XDMCD; /* dimension*/

    FF0XW00.FF0XWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check if 'PRESET' switch changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF3PREFL != FF0XW01.FF3PREFL) /* Preset flag changed*/
    FF0X610(); /* Select FFSTY*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found on FFSTY*/
      FF0X620(); /* Update FFSTY*/
    end
    FF0X145(); /* Select PMSTY*/
    if (SQLCA.VAGen_SQLCODE == 0) /* found on PMsty*/
      FF0X611(); /* update PMSTY*/
    end
    FF0XW01.FF3PREFL = FF0XM001.FF3PREFL; /* set to new*/
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
  end

   /* ------------------------------------------------------------*/
   /* If PF19 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19)

    FF0XW00.FF0XWSWR = "Y"; /* indicate that data requested*/
    FF0XW00.FF0XWCSW = "Y"; /* indicate calculation request*/

    /* ------------------------------------------------------------*/
     /* message and module id moved to ff0x170--4/17/91*/
     /* Indicate to user that modeled production fcst displayed or*/
     /* master suggested buy*/
    /* ------------------------------------------------------------*/

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF20 was pressed, update Sug Prdctn Fcst on PMITM if row*/
   /* is found or insert row if not found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data for the left page.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWCNT = 1; /* counter for months*/
    FF0XW00.FF0XWIX2 = 1; /* counter for W.S. fields*/

    while (FF0XW00.FF0XWCNT <= 6 /* first page of data*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      FF0X630(); /* Process PMITM*/

    end

    /* ------------------------------------------------------------*/
     /* Update the changed data for the right page.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWCNT = 7; /* counter for months*/
    FF0XW00.FF0XWIX2 = 8; /* counter for W.S. fields*/

    while (FF0XW00.FF0XWCNT <= 12 /* max nbr of months*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      FF0X630(); /* Process PMITM*/

    end

    /* ------------------------------------------------------------*/
     /* Indicate that the updates were successfully completed.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* If PF16 was pressed, update Mstr Prdctn Fcst on MSTY.*/
   /* with the modeled production forecast values*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)

    FF0X690(); /* updt master prod fcst with modeled*/
                                   /* values*/

  end

   /* ------------------------------------------------------------*/
   /* If PF21 was pressed, update Mstr Prdctn Fcst on MSTY.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21)

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    FF0XW00.FF0XWCNT = 1; /* counter for months*/
    FF0XW00.FF0XWIX2 = 1; /* counter for working storage*/

    while (FF0XW00.FF0XWCNT <= 6 /* first page of data*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

        /* ------------------------------------------------------------*/
         /* Check the left page for changes.*/
        /* ------------------------------------------------------------*/

      if (FF0XW01.FF0XWMPF[FF0XWIX2] != FF0XW00.FF0XWHMF[FF0XWIX2])

        FF0X640(); /* Process MSTY*/
        FF0XW00.FF0XWSWR = "Y"; /* Request for data switch*/

          /* ------------------------------------------------------------*/
           /* if the amount calculated as the difference between what*/
           /* was the prdcnt fcst and what the user changed it to be, is*/
           /* not equal to zero -- update the accum amount on D/Bs.*/
          /* ------------------------------------------------------------*/

        if (FF0XW00.FF0XWDIF != 0) /* If amount not equal zero*/

          FF0X650(); /* Process MSGRP*/
          FF0X660(); /* Process MCAT*/
          FF0X670(); /* Process MLTYP*/

        end
      end

      FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to subscript*/
      FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to subscript*/

    end
    /* ------------------------------------------------------------*/
     /* Check the right page for changes.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWCNT = 7; /* counter for months*/
    FF0XW00.FF0XWIX2 = 8; /* counter for W.S. fields*/

    while (FF0XW00.FF0XWCNT <= 12 /* max nbr of months*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      if (FF0XW01.FF0XWMPF[FF0XWIX2] != FF0XW00.FF0XWHMF[FF0XWIX2])

        FF0X640(); /* Process MSTY*/
        FF0XW00.FF0XWSWR = "Y"; /* Request for data switch*/

          /* ------------------------------------------------------------*/
           /* if the amount calculated as the difference between what*/
           /* was the prdcnt fcst and what the user changed it to be, is*/
           /* not equal to zero -- update the accum amount on D/Bs.*/
          /* ------------------------------------------------------------*/

        if (FF0XW00.FF0XWDIF != 0) /* If amount not equal zero*/

          FF0X650(); /* Process MSGRP*/
          FF0X660(); /* Process MCAT*/
          FF0X670(); /* Process MLTYP*/

        end
      end

      FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to subscript*/
      FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to subscript*/

    end
      /* ------------------------------------------------------------*/
       /* Indicate that the updates were successfully completed.*/
      /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

  end

   /* ------------------------------------------------------------*/
   /* Set the modified data exit switch off.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

   /* ------------------------------------------------------------*/
   /* Update  Display Storage area.*/
   /* ------------------------------------------------------------*/

  FF0X680(); /* Update display storage*/

   /* ------------------------------------------------------------*/
   /* If updates were requested, commit all changes.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20
   || converseVar.eventKey is pf21
   || converseVar.eventKey is pf16)

    if (FF0XW00.FF0XWFSY == "N" /* style not on VFFSTY01*/
     && FF0XW00.FF0XWMSY == "N") /* style not on Vpmsty01*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes, master update only*/
    else
      FF0X695(); /* verify product on VPFHST01/VPMSTY01*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
    end

  end


end // end FF0X600

// Select FFSTY
Function FF0X610()
   /* ------------------------------------------------------------*/
   /* Select FFSTY.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF3REC.SY1STNBR = FF0XM001.SY1STNBR; /* style nbr*/
  FF3REC.SY2CLRID = FF0XM001.SY2CLRID; /* color id*/
  FF3REC.XDMCD = FF0XM001.XDMCD; /* dimension*/

   /* ------------------------------------------------------------*/
   /* Select FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X610

// Update PMSTY
Function FF0X611()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  VPMSTY01.FF3PREFL = FF0XM001.FF3PREFL; /* Preset flag*/

  VPMSTY01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPMSTY01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update PMSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6540" ("U ", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "611"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X611

// Update FFSTY
Function FF0X620()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF3REC.FF3PREFL = FF0XM001.FF3PREFL; /* Preset flag*/

  FF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("U ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X620

// Process PMITM
Function FF0X630()
   /* ------------------------------------------------------------*/
   /* If data changed, do update.*/
   /* ------------------------------------------------------------*/

  if (FF0XW01.FF0XWSPF[FF0XWIX2] != FF0XW00.FF0XWHSF[FF0XWIX2]
   || FF0XW00.FF0XWMSY == "N") /* style not on model add all months*/

    /* ------------------------------------------------------------*/
     /* Clear PMITM copybook.*/
    /* ------------------------------------------------------------*/

    set FG2REC empty; /* Clear copybook*/

    /* ------------------------------------------------------------*/
     /* Format call.*/
    /* ------------------------------------------------------------*/

    FG2REC.FG1MODNB = FG1REC.FG1MODNB; /* Model number*/
    FG2REC.FG2MODMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
    FG2REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
    FG2REC.SY2CLRID = FFWREC.SY2CLRID; /* Color code*/
    FG2REC.XDMCD = FFWREC.XDMCD; /* Dim code*/

    /* ------------------------------------------------------------*/
     /* Select PMITM.*/
    /* ------------------------------------------------------------*/

    FF0X631(); /* Select PMITM*/

    /* ------------------------------------------------------------*/
     /* Translate the Suggested buy for the D/B.*/
    /* ------------------------------------------------------------*/

    FFXREC.FFXCHAR = FF0XW01.FF0XWSPF[FF0XWIX2]; /* Sug Prdctn fcst*/
    FF0XW00.FF0XWHSF[FF0XWIX2] = FFXREC.FFXCHAR; /* save new*/
    XSFFS11(); /* translate units to thousands*/
    FF0XW00.FF0XWAMT = FFXREC.FFXNUMB; /* Hold amount*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row was found for update*/
      /* ------------------------------------------------------------*/
       /* Update PMITM.*/
      /* ------------------------------------------------------------*/

      FF0X632(); /* Update PMITM*/

    else
      /* ------------------------------------------------------------*/
       /* Add PMITM.*/
      /* ------------------------------------------------------------*/

      FF0X633(); /* Add PMITM*/

    end

  end

  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to subscript*/
  FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* add to subscript*/
  FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to subscript*/


end // end FF0X630

// Select PMITM
Function FF0X631()
   /* ------------------------------------------------------------*/
   /* Select PMITM.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4020" ("S ", SQLCA, FG2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG2REC.FG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X631

// Update PMITM
Function FF0X632()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FG2REC.FG2SUGFC = FF0XW00.FF0XWAMT; /* Suggested fcst*/

  FG2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FG2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update PMITM.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4020" ("U ", SQLCA, FG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "632"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG2REC.FG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X632

// Add -- PMITM
Function FF0X633()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FG2REC.FG2SUGFC = FF0XW00.FF0XWAMT; /* Suggested fcst*/
  FG2REC.FF6BEINV = FF0XW02.FF6BEINV[FF0XWCNT]; /* Beginning Inv*/
  FG2REC.FF6SFSTK = FF0XW02.FF6SFSTK[FF0XWCNT]; /* Safety stock*/
  FG2REC.FFRSSFCT = FF0XW02.FFRSSFCT[FF0XWCNT]; /* Safety stock nbr*/
  FG2REC.FG2GRPFL = "N"; /* Group flag*/

  FG2REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FG2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FG2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Add PMITM.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4020" ("A ", SQLCA, FG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "633"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG2REC.FG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X633

// Process MSTY
Function FF0X640()
   /* ------------------------------------------------------------*/
   /* Clear MSTY copybook.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF9REC.FF4FCTMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Div grp code*/
  FF9REC.SY1STNBR = FFWREC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FFWREC.SY2CLRID; /* Color code*/
  FF9REC.XDMCD = FFWREC.XDMCD; /* Dim code*/

   /* ------------------------------------------------------------*/
   /* Select MSTY.*/
   /* ------------------------------------------------------------*/

  FF0X641(); /* Select MSTY*/

   /* ------------------------------------------------------------*/
   /* Translate the new production fcst for the D/B.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXCHAR = FF0XW01.FF0XWMPF[FF0XWIX2]; /* New amount*/
  XSFFS11(); /* translate units to thousands*/
  FF0XW00.FF0XWAMT = FFXREC.FFXNUMB; /* Hold new amount*/

   /* ------------------------------------------------------------*/
   /* Translate the old production fcst for the D/B.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXCHAR = FF0XW00.FF0XWHMF[FF0XWIX2]; /* Old amount*/
  XSFFS11(); /* translate units to thousands*/

   /* ------------------------------------------------------------*/
   /* Calculate the difference between old and new screen amounts*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWDIF = FF0XW00.FF0XWAMT; /* load new amount*/
  FF0XW00.FF0XWDIF = FF0XW00.FF0XWDIF - FFXREC.FFXNUMB; /* minus old*/

   /* ------------------------------------------------------------*/
   /* Update MSTY.*/
   /* ------------------------------------------------------------*/

  FF0X642(); /* Update MSTY*/

   /* if pfkey 16 entered move the new master value to the hold area*/
   /* for the previous master value.  We will not reobtain data.*/

  if (converseVar.eventKey is pf16) /* hold new master prod fcst, char and numeric*/
    FF0XW00.FF0XWHMF[FF0XWIX2] = FF0XW01.FF0XWMPF[FF0XWIX2];
    FF0XW02.FF6PRFCT[FF0XWCNT] = FF0XW00.FF0XWAMT;
  end


end // end FF0X640

// Select MSTY
Function FF0X641()
   /* ------------------------------------------------------------*/
   /* Select MSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X641

// Update MSTY
Function FF0X642()
   /* ------------------------------------------------------------*/
   /* Update the production forecast.*/
   /* ------------------------------------------------------------*/

  FF9REC.FF6PRFCT = FF0XW00.FF0XWAMT; /* updt amt*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update MSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" ("U ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "642"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X642

// Process MSGRP
Function FF0X650()
   /* ------------------------------------------------------------*/
   /* Clear MSGRP copybook.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF8REC.FF4FCTMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FF8REC.SYBSTGNB = FF0XW00.SYBSTGNB; /* Style grp cd*/
  FF8REC.YPGCD = FF0XW00.YPGCD; /* type code*/
  FF8REC.XCTCD = FFWREC.XCTCD; /* Country*/
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Div grp cd*/

   /* ------------------------------------------------------------*/
   /* Select MSGRP.*/
   /* ------------------------------------------------------------*/

  FF0X651(); /* Select MSGRP*/

   /* ------------------------------------------------------------*/
   /* Update MSGRP.*/
   /* ------------------------------------------------------------*/

  FF0X652(); /* Update MSGRP*/


end // end FF0X650

// Select MSGRP
Function FF0X651()
   /* ------------------------------------------------------------*/
   /* Select MSGRP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.(Must be there)*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X651

// Update MSGRP
Function FF0X652()
   /* ------------------------------------------------------------*/
   /* Add the calculated amount to the production forecast.*/
   /* ------------------------------------------------------------*/

  FF8REC.FF6PRFCT = FF8REC.FF6PRFCT + FF0XW00.FF0XWDIF; /* add amt*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update MSGRP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3730" ("U ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "652"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "652"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X652

// Process MCAT
Function FF0X660()
   /* ------------------------------------------------------------*/
   /* Clear MCAT copybook.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FF7REC.XPCCD = FF0XW00.XPCCD; /* Category cd*/
  FF7REC.YPGCD = FF0XW00.YPGCD; /* type*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* Country*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Div grp cd*/

   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  FF0X661(); /* Select MCAT*/

   /* ------------------------------------------------------------*/
   /* Update MCAT.*/
   /* ------------------------------------------------------------*/

  FF0X662(); /* Update MCAT*/


end // end FF0X660

// Select MCAT
Function FF0X661()
   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process. (Must be there)*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "661"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X661

// Update MCAT
Function FF0X662()
   /* ------------------------------------------------------------*/
   /* Add the calculated amount to the production forecast.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF6PRFCT = FF7REC.FF6PRFCT + FF0XW00.FF0XWDIF; /* add amt*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "662"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "662"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X662

// Process MLTYP
Function FF0X670()
   /* ------------------------------------------------------------*/
   /* Clear MLTYP copybook.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear copybook*/

   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FF6REC.FF4FCTMO = FFZREC.FFZINDMO[FF0XWCNT]; /* Month*/
  FF6REC.YPGCD = FF0XW00.YPGCD; /* Type code*/
  FF6REC.XPLCD = FF0XW00.XPLCD; /* Line code*/

   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  FF0X671(); /* Select MLTYP*/

   /* ------------------------------------------------------------*/
   /* Update MLTYP.*/
   /* ------------------------------------------------------------*/

  FF0X672(); /* Update MLTYP*/


end // end FF0X670

// Select MLTYP
Function FF0X671()
   /* ------------------------------------------------------------*/
   /* Select MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return.  (Must be there)*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "671"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X671

// Update MLTYP
Function FF0X672()
   /* ------------------------------------------------------------*/
   /* Add the calculated amount to the production forecast.*/
   /* ------------------------------------------------------------*/

  FF6REC.FF6PRFCT = FF6REC.FF6PRFCT + FF0XW00.FF0XWDIF; /* add amt*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update MLTYP.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("U ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "672"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "672"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X672

// Update display storage
Function FF0X680()
   /* ------------------------------------------------------------*/
   /* Update  Display Storage area.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWTSW = "N"; /* clear re-totaling switch*/

  if (FF0XW00.FF0XWPAG == 1) /* If current page is 1*/

    FF0XW00.FF0XWIXM = 1; /* Counter for map*/
    FF0XW00.FF0XWCNT = 1; /* counter for months*/
    FF0XW00.FF0XWIX2 = 1; /* counter for working storage*/

    while (FF0XW00.FF0XWCNT <= 6 /* first page of data*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      FF0X681(); /* Update display storage*/

    end

  else /* Page 2*/

    FF0XW00.FF0XWIXM = 1; /* counter for map*/
    FF0XW00.FF0XWCNT = 7; /* counter for months*/
    FF0XW00.FF0XWIX2 = 8; /* counter for working storage*/

    while (FF0XW00.FF0XWIXM <= 6 /* max nbr of dis fields*/
     && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      FF0X681(); /* Update display storage*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Check for re-totaling.*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWTSW == "Y" /* If re-totaling required*/
   || converseVar.eventKey is pf16) /* or updating master but not model*/

    FF0X682(); /* Change beg inv amounts*/

    /* ------------------------------------------------------------*/
     /* Initialize fields.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWCNT = 1; /* set month cnt*/
    FF0XW00.FF0XWIXM = 1; /* set column cnt*/
    FF0XW03.FF0XWSFA = 0; /* clear tot field*/
    FF0XW03.FF0XWSUA = 0; /* clear tot field*/
    FF0XW03.FF0XWEIA = 0; /* clear tot field*/
    FF0XW03.FF0XWITA = 0; /* clear tot field*/
    FF0XW03.FF0XWPFA = 0; /* clear tot field*/
    FF0XW03.FF0XWTPA = 0; /* clear tot field*/

    /* ------------------------------------------------------------*/
     /* Loop through months.*/
    /* ------------------------------------------------------------*/

    while (FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* While count LE # of mos*/

      if (FF0XW00.FF0XWCNT == 7) /* If seventh month*/
        FF0X683(); /* move totals*/
        FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 count*/
      end

      /* ---------------------------------------------------*/
       /* Add up fields.*/
      /* ---------------------------------------------------*/

      FF0XW03.FF0XWSFA = FF0XW03.FF0XWSFA + FF0XW02.FG2SUGFC[FF0XWCNT];
      FF0XW03.FF0XWSUA = FF0XW03.FF0XWSUA + FF0XW02.FF0XWHSU[FF0XWCNT];
      FF0XW03.FF0XWEIA = FF0XW03.FF0XWEIA + FF0XW02.FF0XWHEI[FF0XWCNT];
      FF0XW03.FF0XWITA = FF0XW03.FF0XWITA + FF0XW02.FF0XWHIT[FF0XWCNT];
      FF0XW03.FF0XWPFA = FF0XW03.FF0XWPFA + FF0XW02.FF6PRFCT[FF0XWCNT];
      FF0XW03.FF0XWTPA = FF0XW03.FF0XWTPA + FF0XW02.FF0XWHTP[FF0XWCNT];

      /* ---------------------------------------------------*/
       /* Add to counters.*/
      /* ---------------------------------------------------*/

      FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* Add 1 to month cnt*/
      FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 to column cnt*/

    end

    FF0X683(); /* move totals*/
  end


end // end FF0X680

// Re-calc any changed fields
Function FF0X681()
   /* ------------------------------------------------------------*/
   /* Check if Sug Production Forecast changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF0XWSPF[FF0XWIXM] != FF0XW01.FF0XWSPF[FF0XWIX2])

    FF0XW00.FF0XWTSW = "Y"; /* Re-totaling switch*/

    FFXREC.FFXCHAR = FF0XM001.FF0XWSPF[FF0XWIXM];
                                   /* send to translate*/
    XSFFS11();
    FF0XW02.FG2SUGFC[FF0XWCNT] = FFXREC.FFXNUMB; /* Sug prdctn fcst*/

    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWSPF[FF0XWIX2] = FFXREC.FFXCHAR; /* storage*/

    /* ------------------------------------------------------------*/
     /* Re-calculate Supply.*/
                /* SUPPLY  =  Beg Inv  +  On Order  +  Sug Prd Fcst*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFDA = FF0XW02.FF6BEINV[FF0XWCNT]; /* Beg inv*/

    FF0XW00.FF0XWFDB = FF0XW02.FG4ONORD[FF0XWCNT]; /* On order*/

    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW00.FF0XWFDB;
    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FG2SUGFC[FF0XWCNT];
    FF0XW02.FF0XWHSU[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/

    FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Supply*/
    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWSUP[FF0XWIX2] = FFXREC.FFXCHAR; /* storage*/

    /* ------------------------------------------------------------*/
     /* Re-Calculate:*/
                /* END INVENTORY  =  Supply  -  Bal-to-Ship*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFDB = FF0XW02.FF0XWBTS[FF0XWCNT]; /* Bal to ship*/

     /* FF0XWFDA is holding 'supply' from the above calculation*/
    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA - FF0XW00.FF0XWFDB; /* BAS*/
    FF0XW02.FF0XWHEI[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold end inv*/

    FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Bal to ship*/
    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWEIV[FF0XWIX2] = FFXREC.FFXCHAR; /* storage*/

    /* ------------------------------------------------------------*/
     /* Re-Calculate:*/
           /* SUG TOT PROD FCST =  Sug prdctn fcst + NIL production*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFDA = FF0XW02.FG2SUGFC[FF0XWCNT]; /* Sug pfcst*/

    FF0XW00.FF0XWFDB = 0; /* clear work field*/
    FFXREC.FFXCHAR = FF0XW01.FF0XWNIL[FF0XWIX2];
    XSFFS11(); /* Translate*/
    FF0XW00.FF0XWFDB = FFXREC.FFXNUMB; /* NIL prdctn*/

    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW00.FF0XWFDB; /* tot*/

    FF0XW02.FF0XWHTP[FF0XWCNT] = FF0XW00.FF0XWFDA; /* hold for calc*/
    FFXREC.FFXNUMB = FF0XW00.FF0XWFDA;
    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWTOT[FF0XWIX2] = FFXREC.FFXCHAR; /* storage*/

  end


   /* ------------------------------------------------------------*/
   /* Check if Mstr Production Forecast changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM001.FF0XWMPF[FF0XWIXM] != FF0XW01.FF0XWMPF[FF0XWIX2])

    FF0XW00.FF0XWTSW = "Y"; /* Re-totaling switch*/

    if (converseVar.eventKey is pf16) /* update master from modeled forecast*/
      FFXREC.FFXCHAR = FF0XW01.FF0XWMPF[FF0XWIX2]; /* send to translate*/
      XSFFS11();
      FF0XW02.FF6PRFCT[FF0XWCNT] = FFXREC.FFXNUMB;
                                   /* Mstr prdctn fcst*/
    else
      FFXREC.FFXCHAR = FF0XM001.FF0XWMPF[FF0XWIXM]; /* send to translate*/
      XSFFS11();
      FF0XW02.FF6PRFCT[FF0XWCNT] = FFXREC.FFXNUMB;
                                   /* Mstr prdctn fcst*/
      XSFFS10(); /* translate units to thousands*/
      FF0XW01.FF0XWMPF[FF0XWIX2] = FFXREC.FFXCHAR; /* storage*/
    end

  end

  FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add one to count*/
  FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* add one to count*/
  FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add one to count*/


end // end FF0X681

// Change Beg Inv amounts
Function FF0X682()
   /* ------------------------------------------------------------*/
   /* Change Beginning Inventory and re-calc supply and E.I.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWIXM = 1; /* Use for FF0XW01*/
  FF0XW00.FF0XWCNT = 1; /* Use for FF0XW02*/

   /* ------------------------------------------------------------*/
   /* Loop through the months in the range.*/
   /* ------------------------------------------------------------*/

  while (FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* While count LE # of mos*/

    if (FF0XW00.FF0XWCNT == 7)
      FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 counter*/
    end

    if (FF0XW00.FF0XWCNT == 1) /* If this is the first month of the range*/
       /* no need to change*/
    else
      /* ------------------------------------------------------------*/
       /* use last month's ending inventory for this month's beg inv.*/
      /* ------------------------------------------------------------*/

      FF0XW00.FF0XWIX3 = FF0XW00.FF0XWCNT - 1; /* subtract 1*/
      FF0XW02.FF6BEINV[FF0XWCNT] = FF0XW02.FF0XWHEI[FF0XWIX3]; /* BI*/
      if (FF0XW00.FF0XWCNT <= 7)
        FF0XW01.FF0XWBEI[FF0XWIXM] = FF0XW01.FF0XWEIV[FF0XWIX3];
                                   /* BI*/
      else
        FF0XW01.FF0XWBEI[FF0XWIXM] = FF0XW01.FF0XWEIV[FF0XWCNT];
                                   /* BI*/
      end

    end

    /* ------------------------------------------------------------*/
     /* Re-calculate Supply.*/
                /* SUPPLY  =  Beg Inv  +  On Order  +  Sug Prd Fcst*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFDA = FF0XW02.FF6BEINV[FF0XWCNT]; /* Beg inv*/

    FF0XW00.FF0XWFDB = FF0XW02.FG4ONORD[FF0XWCNT]; /* On order*/

    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW00.FF0XWFDB;
    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA + FF0XW02.FG2SUGFC[FF0XWCNT];
    FF0XW02.FF0XWHSU[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/

    FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Supply*/
    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWSUP[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/

    /* ------------------------------------------------------------*/
     /* Re-Calculate:*/
                /* END INVENTORY  =  Supply  -  Bal-to-Ship*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFDA = FF0XW02.FF0XWHSU[FF0XWCNT]; /* Supply held*/

    FF0XW00.FF0XWFDB = FF0XW02.FF0XWBTS[FF0XWCNT]; /* Bal to ship*/

    FF0XW00.FF0XWFDA = FF0XW00.FF0XWFDA - FF0XW00.FF0XWFDB;
    FF0XW02.FF0XWHEI[FF0XWCNT] = FF0XW00.FF0XWFDA; /* Hold for calc*/

    FFXREC.FFXNUMB = FF0XW00.FF0XWFDA; /* Ending inventory*/
    XSFFS10(); /* translate units to thousands*/
    FF0XW01.FF0XWEIV[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/

    /* ------------------------------------------------------------*/
     /* Re-Calculate:*/
                /* inventory turns*/
    /* ------------------------------------------------------------*/

    FF0XS02(); /* recalculate inventory turns*/

    FF0XW01.FF0XWIVT[FF0XWIXM] = FF0XW00.FF0XWFDC; /* storage*/
    FF0XW02.FF0XWHIT[FF0XWCNT] = FF0XW00.FF0XWFDC; /* for total*/

    /* ------------------------------------------------------------*/
     /* Add to counters.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* Add 1 counter*/
    FF0XW00.FF0XWIXM = FF0XW00.FF0XWIXM + 1; /* Add 1 counter*/

  end


end // end FF0X682

// Translate and move totals
Function FF0X683()
   /* --------------------------------------------------*/
   /* Suggested Prdctn Fcst Total.*/
   /* --------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWSFA; /* send to translate*/
  XSFFS10();
  FF0XW01.FF0XWSPF[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/

   /* --------------------------------------------------*/
   /* Supply Total.*/
   /* --------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWSUA; /* send to translate*/
  XSFFS10();
  FF0XW01.FF0XWSUP[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/

   /* --------------------------------------------------*/
   /* Ending Inventory Total.*/
   /* --------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWEIA; /* send to translate*/
  XSFFS10();
  FF0XW01.FF0XWEIV[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/
  FF0XW01.FF0XWEIV[FF0XWIXM] = " "; /* don't display*/

   /* ------------------------------------------------------------*/
   /* Calculate Inventory Turns total and load.*/
   /* Calculate:  Total turns divided by nbr of months*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = FF0XW03.FF0XWITA; /* Load total*/
  FF0XW00.FF0XWFDB = FF0XW00.FF0XWCNT - 1; /* Get count*/

  if (FF0XW00.FF0XWFDB > 0)
    FF0XW00.FF0XWFDA = mathLib.round(FF0XW00.FF0XWFDA / FF0XW00.FF0XWFDB, -mathLib.decimals(FF0XW00.FF0XWFDA)); /* avg*/
  end

  FF0XW01.FF0XWIVT[FF0XWIXM] = FF0XW00.FF0XWFDA; /* Storage*/

   /* --------------------------------------------------*/
   /* Mstr Prdctn Fcst Total.*/
   /* --------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWPFA; /* send to translate*/
  XSFFS10();
  FF0XW01.FF0XWMPF[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/

   /* --------------------------------------------------*/
   /* Sug tot production fcst.*/
   /* --------------------------------------------------*/

  FFXREC.FFXNUMB = FF0XW03.FF0XWTPA; /* send to translate*/
  XSFFS10();
  FF0XW01.FF0XWTOT[FF0XWIXM] = FFXREC.FFXCHAR; /* storage*/


end // end FF0X683

// Updt master from model fcst
Function FF0X690()

   /* ------------------------------------------------------------*/
   /* Update Mstr Prdctn Fcst on MSTY.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  FF0XW00.FF0XWCNT = 1; /* counter for months*/
  FF0XW00.FF0XWIX2 = 1; /* counter for working storage*/

  while (FF0XW00.FF0XWCNT <= 6 /* first page of data*/
   && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

      /* ------------------------------------------------------------*/
       /* Check the left page for changes.*/
      /* ------------------------------------------------------------*/

    if (FF0XW01.FF0XWMPF[FF0XWIX2] != FF0XW01.FF0XWSPF[FF0XWIX2])

      FF0XW01.FF0XWMPF[FF0XWIX2] = FF0XW01.FF0XWSPF[FF0XWIX2];
      FF0XW00.FF0XWSWF = "Y"; /* format map*/
      FF0X640(); /* Process MSTY*/

        /* ------------------------------------------------------------*/
         /* if the amount calculated as the difference between what*/
         /* was the prdcnt fcst and what the user changed it to be, is*/
         /* not equal to zero -- update the accum amount on D/Bs.*/
        /* ------------------------------------------------------------*/

      if (FF0XW00.FF0XWDIF != 0) /* If amount not equal zero*/

        FF0X650(); /* Process MSGRP*/
        FF0X660(); /* Process MCAT*/
        FF0X670(); /* Process MLTYP*/

      end
    end

    FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to subscript*/
    FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to subscript*/

  end
   /* ------------------------------------------------------------*/
   /* Check the right page for changes.*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWCNT = 7; /* counter for months*/
  FF0XW00.FF0XWIX2 = 8; /* counter for W.S. fields*/

  while (FF0XW00.FF0XWCNT <= 12 /* max nbr of months*/
   && FF0XW00.FF0XWCNT <= FF0XW00.FF0XWNBR) /* nbr of months*/

    if (FF0XW01.FF0XWMPF[FF0XWIX2] != FF0XW01.FF0XWSPF[FF0XWIX2])

      FF0XW01.FF0XWMPF[FF0XWIX2] = FF0XW01.FF0XWSPF[FF0XWIX2];
      FF0XW00.FF0XWSWF = "Y"; /* format map*/
      FF0X640(); /* Process MSTY*/

        /* ------------------------------------------------------------*/
         /* if the amount calculated as the difference between what*/
         /* was the prdcnt fcst and what the user changed it to be, is*/
         /* not equal to zero -- update the accum amount on D/Bs.*/
        /* ------------------------------------------------------------*/

      if (FF0XW00.FF0XWDIF != 0) /* If amount not equal zero*/

        FF0X650(); /* Process MSGRP*/
        FF0X660(); /* Process MCAT*/
        FF0X670(); /* Process MLTYP*/

      end
    end

    FF0XW00.FF0XWCNT = FF0XW00.FF0XWCNT + 1; /* add to subscript*/
    FF0XW00.FF0XWIX2 = FF0XW00.FF0XWIX2 + 1; /* add to subscript*/

  end
   /* ------------------------------------------------------------*/
   /* Indicate that the updates were successfully completed.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "600"; /* Module identification*/
  FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

end // end FF0X690

// Verify product on PFHST/PMSTY
Function FF0X695()
   /* *******************************************************************/
   /* If style is not on VPMSTY01 select VFFSTY01 and copy fields to*/
   /* add VPMSTY01.  Verify that product is on VPFHST01, if not found*/
   /* add it using VPMSTY01 fields.*/

   /* *******************************************************************/
  FF0X145(); /* select unique VPMSTY01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    FF0X610(); /* select unique VFFSTY01*/
    set VPMSTY01 empty;
    VPMSTY01.FG1MODNB = FG1REC.FG1MODNB;
    VPMSTY01.SY1STNBR = FF3REC.SY1STNBR; /* move fields from FFSTY*/
    VPMSTY01.SY2CLRID = FF3REC.SY2CLRID;
    VPMSTY01.XDMCD = FF3REC.XDMCD;
    VPMSTY01.SYBSTGNB = FF3REC.SYBSTGNB;
    VPMSTY01.XPCCD = FF3REC.XPCCD;
    VPMSTY01.YPGCD = FF3REC.YPGCD;
    VPMSTY01.XPLCD = FF3REC.XPLCD;
    VPMSTY01.YSMXDV = "10";
    VPMSTY01.SY1STYNM = FF3REC.SY1STYNM;
    VPMSTY01.SYBSTGNM = FF3REC.SYBSTGNM;
    VPMSTY01.SY1SSTNM = FF3REC.SY1SSTNM;
    VPMSTY01.SY2CLRDS = FF3REC.SY2CLRDS;
    VPMSTY01.SY2CLRAB = FF3REC.SY2CLRAB;
    VPMSTY01.XSUCD = FF3REC.XSUCD;
    VPMSTY01.XGACD = FF3REC.XGACD;
    VPMSTY01.PG7MAXPR = FF3REC.PG7MAXPR;
    VPMSTY01.FF2SYMIN = FF3REC.FF2SYMIN;
    VPMSTY01.FF2GRMIN = FF3REC.FF2GRMIN;
    VPMSTY01.FF3PREFL = FF3REC.FF3PREFL;
    VPMSTY01.PG2FPDMO = FF3REC.PG2FPDMO;
    VPMSTY01.PG1SC4CD = FF3REC.PG1SC4CD;
    VPMSTY01.SY2FDSMO = FF3REC.SY2FDSMO;
    VPMSTY01.SY2PDCMO = FF3REC.SY2PDCMO;
    VPMSTY01.SY2SSCIN = FF3REC.SY2SSCIN;
    if (converseVar.eventKey is pf20) /* only add to model when model updated*/
      FF0X698(); /* insert VPMSTY01*/
      FF0XW00.FF0XWMSY = "Y"; /* set flag yes*/
    end
  end

  FF0X696(); /* ;select unique VPFHST01*/
  if (SQLCA.VAGen_SQLCODE == 100)
    set FG9REC empty;
    FG9REC.SY1STNBR = VPMSTY01.SY1STNBR; /* from PMSTY*/
    FG9REC.SY2CLRID = VPMSTY01.SY2CLRID;
    FG9REC.XDMCD = VPMSTY01.XDMCD;
    FG9REC.SYBSTGNB = VPMSTY01.SYBSTGNB;
    FG9REC.XPCCD = VPMSTY01.XPCCD;
    FG9REC.YPGCD = VPMSTY01.YPGCD;
    FG9REC.XPLCD = VPMSTY01.XPLCD;
    FG9REC.YSMXDV = "10";
    FG9REC.SY1STYNM = VPMSTY01.SY1STYNM;
    FG9REC.SYBSTGNM = VPMSTY01.SYBSTGNM;
    FG9REC.SY1SSTNM = VPMSTY01.SY1SSTNM;
    FG9REC.SY2CLRDS = VPMSTY01.SY2CLRDS;
    FG9REC.SY2CLRAB = VPMSTY01.SY2CLRAB;
    FG9REC.XSUCD = VPMSTY01.XSUCD;
    FG9REC.XGACD = VPMSTY01.XGACD;
    FG9REC.PG7MAXPR = VPMSTY01.PG7MAXPR;
    FG9REC.FF2SYMIN = VPMSTY01.FF2SYMIN;
    FG9REC.FF2GRMIN = VPMSTY01.FF2GRMIN;
    FG9REC.FF3PREFL = VPMSTY01.FF3PREFL;
    FG9REC.PG2FPDMO = VPMSTY01.PG2FPDMO;
    FG9REC.PG1SC4CD = VPMSTY01.PG1SC4CD;
    FG9REC.SY2FDSMO = VPMSTY01.SY2FDSMO;
    FG9REC.SY2PDCMO = VPMSTY01.SY2PDCMO;
    FG9REC.SY2SSCIN = VPMSTY01.SY2SSCIN;
    FF0X697(); /* insert into VPFHST01*/
  end
end // end FF0X695

// Select unique VPFHST01
Function FF0X696()
   /* ------------------------------------------------------------*/
   /* Select FFSTY.*/
   /* ------------------------------------------------------------*/

  set FG9REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FG9REC.SY1STNBR = FF0XM001.SY1STNBR; /* style nbr*/
  FG9REC.SY2CLRID = FF0XM001.SY2CLRID; /* color id*/
  FG9REC.XDMCD = FF0XM001.XDMCD; /* dimension*/
  FG9REC.YSMXDV = "10"; /* division code*/

   /* ------------------------------------------------------------*/
   /* Select pfhst01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5430" ("S ", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "696"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X696

// Insert into VPFHST01
Function FF0X697()

  XX0XS01(); /* Obtain current date and time*/

  FG9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FG9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FG9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FG9REC.ZZZSTM = XX0XW01.XX0XWTIM; /* set up time*/


  try
    call "IO5430" ("A ", SQLCA, FG9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "697"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPFHST01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG9REC.FG9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X697

// Insert into VPMSTY01
Function FF0X698()
   /* ------------------------------------------------------------*/
   /* Insert row into VPMSTY01*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current date and time*/

  VPMSTY01.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPMSTY01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPMSTY01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPMSTY01.ZZZSTM = XX0XW01.XX0XWTIM; /* set up time*/


  try
    call "IO6540" ("A ", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "698"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X698

// Main process Map 2
Function FF0X700()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0X710(); /* Obtain the data to display*/

  FF0X720(); /* Format and display the map*/

  FF0X730(); /* Check attention identifier*/

  FF0X740(); /* Reset fields to normal intensity*/

  FF0X750(); /* Verify the entered data*/

  FF0X760(); /* Process valid input request*/


end // end FF0X700

// Obtain the data to display
Function FF0X710()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.FF0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  if (FFWREC.YPGCD == " ")
    /* NEXT SENTENCE*/
  else
    if (FFWREC.YPGCD in YPGTBL.YPGCD)
      FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
  end
  if (FFWREC.XPCCD == " ")
    /* NEXT SENTENCE*/
  else
    if (FFWREC.XPCCD in XPCTBL.XPCCD)
      FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  end
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0XW04.XXXTSLEN = 555; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0X711(); /* Determine date range for PMHDR*/
  FF0X712(); /* Get PMHDR*/
  FF0X713(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain data from Vpmsty01*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FF0XW04.FF0XWIXC = 1; /* init index*/

  FF0X714(); /* Select pmsty*/
  FF0X715(); /* Fetch pmsty*/

  while (SQLCA.VAGen_SQLCODE == 0) /* process until end of pmsty*/

    FF0X716(); /* Process VPMSTY01 row*/

    FF0X715(); /* Fetch vpmsty*/

  end

  FF0X717(); /* Close vpmsty*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.FF0XWIXC > 1) /* Page was formatted*/
    FF0X718(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  else

    FF0XW04.XXXTSPAG = 1; /* Desired page number*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0XW04.FF0XWSWR = "N"; /* Request for data switch*/


end // end FF0X710

// Determine range for PMHDR
Function FF0X711()
   /* ------------------------------------------------------------*/
   /* Determine current date as well as beg and end dates for*/
   /* suggested buy model.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date*/
  FF0XW04.FF0XWCWD = XX0XW01.XX0XWDAT; /* save current*/
  FF0XS70(); /* get futures cutoff date*/

  FF0XW04.FF0XWDT1 = FF1REC.FF1FUTDT;

  FF0XW04.FF0XWMM1 = FF0XW04.FF0XWMM1 + 6; /* buy plus one beg date*/
  if (FF0XW04.FF0XWMM1 > 12)
    FF0XW04.FF0XWMM1 = FF0XW04.FF0XWMM1 - 12;
    if (FF0XW04.FF0XWYY1 == 99)
      FF0XW04.FF0XWCC1 = FF0XW04.FF0XWCC1 + 1;
      FF0XW04.FF0XWYY1 = 00;
    else
      FF0XW04.FF0XWYY1 = FF0XW04.FF0XWYY1 + 1;
    end
  end

  if (FFWREC.FFABEGMO == 0) /* no date range entered yet*/
    FFWREC.FFABEGMO = FF0XW04.FF0XWCY1; /* buy month + one month*/
    FFWREC.FFAENDMO = FFWREC.FFABEGMO + 99; /* add 12 months for end month*/
  end


end // end FF0X711

// Get PMHDR
Function FF0X712()
   /* get model header number for the suggested buy model*/
   /* cooresponding to current buy month.*/

  FF0XS71(); /* open PMHDR*/
  FF0XS72(); /* fetch PMHDR*/
  if (SQLCA.VAGen_SQLCODE == 100)
    FF0XS73(); /* close PMHDR*/

     /* if model not found subtract one month and try again starting*/
     /* with buy month*/

    if (FF0XW04.FF0XWMM1 > 1)
      FF0XW04.FF0XWMM1 = FF0XW04.FF0XWMM1 - 1; /* subtract one month*/
    else
      FF0XW04.FF0XWMM1 = 12;
      if (FF0XW04.FF0XWYY1 == 00)
        FF0XW04.FF0XWYY1 = 99;
      else
        FF0XW04.FF0XWYY1 = FF0XW04.FF0XWYY1 - 1;
      end
    end

    FFWREC.FFABEGMO = FF0XW04.FF0XWCY1; /* buy month*/
    FFWREC.FFAENDMO = FFWREC.FFABEGMO + 99; /* add 12 months for end month*/
    FF0XS71(); /* open PMHDR*/
    FF0XS72(); /* fetch PMHDR*/


  end

  FF0XS73(); /* close PMHDR*/
end // end FF0X712

// Purge any temp storage
Function FF0X713()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0XW05 empty; /* m002 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF0XW04.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0XW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X713

// Select VPMSTY01
Function FF0X714()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set VPMSTY01 empty; /* Clear copybook.*/

   /* ------------------------------------------------------------*/
   /* Format Dfcast.Vpmsty01.*/
   /* ------------------------------------------------------------*/

  VPMSTY01.FG1MODNB = FG1REC.FG1MODNB; /* model header number*/
  VPMSTY01.YPGCD = FFWREC.YPGCD; /* product type group*/
  VPMSTY01.XPCCD = FFWREC.XPCCD; /* product category*/

  VPMSTY01.XPLCD = "*"; /* product line*/
  VPMSTY01.YSMXDV = "10"; /* Dom*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vpmsty01*/
   /* ------------------------------------------------------------*/

  try
    call "IO6540" ("S1", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "714"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VPMSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X714

// Fetch VPMSTY01
Function FF0X715()
   /* ------------------------------------------------------------*/
   /* Fetch Dfcast.vpmsty01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6540" ("N1", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "715"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VPMSTY01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0X715

// Process VPMSTY01 row
Function FF0X716()
   /* ------------------------------------------------------------*/
   /* Save VPMSTY01 data*/
   /* Save data in display storage.*/
   /* ------------------------------------------------------------*/

  FF0XS80(); /* Save data*/

   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to the storage queue.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.FF0XWIXC > 15) /* Page is full*/
    FF0X718(); /* Add page to temporary storage*/
  end

end // end FF0X716

// Close VPMSTY01
Function FF0X717()
   /* ------------------------------------------------------------*/
   /* Close Dfcast.vpmsty01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6540" ("C1", SQLCA, VPMSTY01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "717"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VPMSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPMSTY01.VPMSTY01-KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X717

// Add page to temp storage
Function FF0X718()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0XW05.XXXTSLEN = FF0XW04.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0XW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF0XW05 empty; /* m002 display storage*/

    FF0XW04.FF0XWIXC = 1; /* Display line index*/

    FF0XW04.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "718"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X718

// Format and converse the map
Function FF0X720()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.FF0XWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0XW04.FF0XWSWF == "Y") /* Map must be formatted*/
      FF0X721(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0XM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0XM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0XM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0XM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0XM002 alarm; /* Indicate sound alarm*/

  end

  converse FF0XM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0XM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0XM002.CAITEM; /* Application data*/


end // end FF0X720

// Format the data on the map
Function FF0X721()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0XM002 initial; /* m002 input/output area*/

  FF0XW04.FF0XWSWF = "N"; /* Format the map switch*/

  if (FF0XW04.FF0XWPAG > 0) /* position on next style if just back*/
                                   /* from FF0X*/
    FF0XW04.XXXTSPAG = FF0XW04.FF0XWPAG;
    FF0XW04.FF0XWPAG = 0;
  end


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF0XW04.TA5TSQIX > 0) /* Pages were formatted*/

    if (FF0XW04.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FF0XW04.XXXTSPAG > FF0XW04.TA5TSQIX) /* Desired greater highest*/
        FF0XW04.XXXTSPAG = FF0XW04.TA5TSQIX; /* Default to highest*/
      end

      FF0X722(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FF0XM002.XXXLITPG skip; /* "PAGE" literal*/
    FF0XM002.XXXTSPAG = FF0XW04.XXXTSPAG; /* Current page*/
    set FF0XM002.XXXLITOF skip; /* "OF" literal*/
    FF0XM002.TA5TSQIX = FF0XW04.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0XM002.XPCCD = FFWREC.XPCCD; /* Category*/
  FF0XM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  FF0XM002.YPGCD = FFWREC.YPGCD; /* Type*/
  FF0XM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  if (FF0XW04.FF0XWIDX > 0) /* check for position of next product*/
    if (FF0XW05.SY1STNBR[FF0XWIDX] > " ") /* if a prod exists*/
      set FF0XM002.FF0XMSEL[FF0XWIDX] cursor; /* Place cursor*/
    else
      set FF0XM002.XPCCD cursor; /* Place cursor*/
    end
    FF0XW04.FF0XWIDX = 0;
  else
    if (FF0XW05.SY1STNBR[1] > " ") /* if a prod exists*/
      set FF0XM002.FF0XMSEL[1] cursor; /* Place cursor*/
    end
  end

  FF0XW04.FF0XWIXC = 1; /* Initialize line index*/
  while (FF0XW04.FF0XWIXC <= 15 /* Until screen is full*/
   && FF0XW05.SY1STNBR[FF0XWIXC] > " ") /* and prod exists*/

    set FF0XM002.FF0XMSEL[FF0XWIXC] normal; /* make 'sel' visable*/
    FF0XM002.SY1STNBR[FF0XWIXC] = FF0XW05.SY1STNBR[FF0XWIXC];
    FF0XM002.FF0XWSTU[FF0XWIXC] = FF0XW05.FF0XWSTU[FF0XWIXC];
    FF0XM002.SY2CLRID[FF0XWIXC] = FF0XW05.SY2CLRID[FF0XWIXC];
    FF0XM002.XDMCD[FF0XWIXC] = FF0XW05.XDMCD[FF0XWIXC];
    FF0XM002.SYBSTGNM[FF0XWIXC] = FF0XW05.SYBSTGNM[FF0XWIXC];
    FF0XM002.SY2CLRAB[FF0XWIXC] = FF0XW05.SY2CLRAB[FF0XWIXC];

    FF0XW04.FF0XWIXC = FF0XW04.FF0XWIXC + 1; /* Increment line index*/

  end


end // end FF0X721

// Obtain temp storage queue
Function FF0X722()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0XW05.XXXTSLEN = FF0XW04.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0XW04.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0XW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "722"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0X722

// Check attention identifier
Function FF0X730()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0XW04.FF0XWSWR == "Y") /* Request for data*/
      set FF0XW05 empty; /* m002 display storage*/
    end

    FF0XW04.FF0XWSWF = "Y"; /* Format the map switch*/
    FF0XW04.FF0XWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FF0X713(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FF0XM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "730"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF17 pressed exit to map 1*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    FF0XW00.FF0XWSWD = "1"; /* map switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0XM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    FF0X713(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "730"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0X730

// Reset highlighted fields
Function FF0X740()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0XM002.XPCCD initialAttributes; /* category*/
  set FF0XM002.YPGCD initialAttributes; /* Type*/

  set FF0XM002.CATOAP initialAttributes; /* TO application*/
  set FF0XM002.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.XPCCD == "?" /* Cat list requested*/
   || FF0XM002.YPGCD == "?") /* Type list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of cat codes.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.XPCCD == "?") /* CAt list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0XM002.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0XM002.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0XM002.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0XM002.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0XM002.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.YPGCD == "?") /* Type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* type flag*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0XM002.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0XM002.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0XM002.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0XM002.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0XM002.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "740"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0X740

// Verify the entered data
Function FF0X750()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "750"; /* Module identification*/
    set FF0XM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FF0X751(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FF0XM002.XPCCD != FFWREC.XPCCD /* or cat changed*/
     || FF0XM002.YPGCD != FFWREC.YPGCD /* or type changed*/
                                       
     || FF0XM002.XPCCD == " "          /* or cat missing*/
     || FF0XM002.YPGCD == " ")         /* or type missing*/

      FF0X752(); /* Verify the key fields*/

    else

      /* ------------------------------------------------------------*/
       /* Else, if page was formatted, verify selection.*/
      /* ------------------------------------------------------------*/

      if (FF0XW04.TA5TSQIX > 0) /* Page was formatted*/

        FF0XW04.FF0XWIXC = 15; /* Initialize line index*/

        while (FF0XW04.FF0XWIXC > 0) /* Until end of lines*/

          FF0X753(); /* Verify selection*/

          FF0XW04.FF0XWIXC = FF0XW04.FF0XWIXC - 1; /* Decrement line number*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0X750

// Verify the scroll request
Function FF0X751()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0XW04.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0XW04.XXXTSPAG >= FF0XW04.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "751"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0X754(); /* Highlight selections*/

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.XPCCD != FFWREC.XPCCD) /* Cat changed*/

    FFWREC.XXXMODID = "751"; /* Module identification*/
    set FF0XM002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FF0XM002.YPGCD != FFWREC.YPGCD) /* Type changed*/

    FFWREC.XXXMODID = "751"; /* Module identification*/
    set FF0XM002.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end


end // end FF0X751

// Verify the key fields
Function FF0X752()
   /* ------------------------------------------------------------*/
   /* Hightlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0X754(); /* Highlight selections*/

   /* ------------------------------------------------------------*/
   /* Verify type.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF0XM002.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FF0XM002.YPGABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "752"; /* Module identification*/
    set FF0XM002.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify category code.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FF0XM002.XPCCD; /* Format key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format key*/

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF0XM002.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FF0XM002.XPCABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "752"; /* Module identification*/
    set FF0XM002.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF0X752

// Verify the selection
Function FF0X753()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.FF0XMSEL[FF0XWIXC] > " ") /* Selection was entered*/

    if (FF0XM002.FF0XMSEL[FF0XWIXC] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "753"; /* Module identification*/
      set FF0XM002.FF0XMSEL[FF0XWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    else

      FF0XW04.FF0XWIXX = FF0XW04.FF0XWIXC - 1; /* Set counter*/

      while (FF0XW04.FF0XWIXX > 0) /* While counter greater than 0*/
        if (FF0XM002.FF0XMSEL[FF0XWIXX] > " ") /* Valid selection character*/

          FFWREC.XXXMODID = "753"; /* Module identification*/
          set FF0XM002.FF0XMSEL[FF0XWIXC] cursor, bold; /* Highlight*/
          converseLib.validationFailed(73); /* More than one selection*/

        end

        FF0XW04.FF0XWIXX = FF0XW04.FF0XWIXX - 1; /* Decrement counter*/

      end
    end
  end


end // end FF0X753

// Highlight selections
Function FF0X754()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FF0XW04.FF0XWIXC = 15; /* Initialize line index*/

  while (FF0XW04.FF0XWIXC > 0) /* Until end of lines*/

    if (FF0XM002.FF0XMSEL[FF0XWIXC] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "754"; /* Module identification*/
      set FF0XM002.FF0XMSEL[FF0XWIXC] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end


    FF0XW04.FF0XWIXC = FF0XW04.FF0XWIXC - 1; /* Decrement line number*/

  end


end // end FF0X754

// Process valid input request
Function FF0X760()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0XW04.FF0XWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FF0XM002.XPCCD != FFWREC.XPCCD /* if cat changed*/
   || FF0XM002.YPGCD != FFWREC.YPGCD) /* or type changed*/

    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/

    FFWREC.XPCCD = FF0XM002.XPCCD; /* Cat code*/
    FFWREC.YPGCD = FF0XM002.YPGCD; /* Type code*/

    FF0XW04.FF0XWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FF0XW04.XXXTSPAG = FF0XW04.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FF0XW04.XXXTSPAG = FF0XW04.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FF0XM002.FF0XMSEL) /* Line selected*/

    FFWREC.SY1STNBR = FF0XM002.SY1STNBR[sysVar.arrayIndex]; /* style code*/
    FFWREC.SY2CLRID = FF0XM002.SY2CLRID[sysVar.arrayIndex]; /* color code*/
    FFWREC.XDMCD = FF0XM002.XDMCD[sysVar.arrayIndex]; /* dim code*/
    FF0XW04.FF0XWIDX = sysVar.arrayIndex; /* save style position*/
    FF0XW04.FF0XWPAG = FF0XW04.XXXTSPAG; /* save current page*/
    FF0XW00.FF0XWSWR = "Y"; /* request for data*/
    FF0XW00.FF0XWSWF = "Y"; /* format the map*/
    FF0XW00.FF0XWSWD = "1"; /* map switch*/

    exit stack;

  end


end // end FF0X760

// Select FFSTY
Function FF0XS01()

   /* ------------------------------------------------------------*/
   /* Clear FFSTY copybook.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* clear record*/

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF3REC.SY1STNBR = FFWREC.SY1STNBR; /* style nbr*/
  FF3REC.SY2CLRID = FFWREC.SY2CLRID; /* color code*/
  FF3REC.XDMCD = FFWREC.XDMCD; /* dim code*/

   /* ------------------------------------------------------------*/
   /* Select FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Not found*/
    )                             
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF0XS01

// Calc Inv Turns for month
Function FF0XS02()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
             /* Sales Average = Sales Fcst for next 3 months * 3*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDA = 0; /* clear work field*/
  FF0XW00.FF0XWFDB = 0; /* clear work field*/
  FF0XW00.FF0XWFDC = 0; /* clear work field*/

  FF0XW00.FF0XWFDA = FF0XW02.FF0XWSUM[FF0XWCNT] * 12; /* avg sales*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
        /* Average Inventory  =  Ending inventory  *  3*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFDB = FF0XW02.FF0XWHEI[FF0XWCNT] * 3; /* Avg Inv*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
              /* INV TURNS  =  Avg sales  /  Avg inv*/
   /* ------------------------------------------------------------*/

  if (FF0XW00.FF0XWFDB > 0) /* if number is greater than zero*/
    FF0XW00.FF0XWFDC = mathLib.round(FF0XW00.FF0XWFDA / FF0XW00.FF0XWFDB, -mathLib.decimals(FF0XW00.FF0XWFDC));
  end


end // end FF0XS02

// Verify style
Function FF0XS03()

   /* ------------------------------------------------------------*/
   /* Verify style exists on Vpmsty01 if not then try Vffsty01*/
   /* ------------------------------------------------------------*/

  FF0XW00.FF0XWFSY = "N"; /* on VFFSTY01 sw*/
  FF0XW00.FF0XWMSY = "N"; /* on VPMSTY01 sw*/
  FF0X145(); /* select PMSTY*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* ------------------------------------------------------------*/
     /* Save data for possible update or add.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWMSY = "Y"; /* on VPMSTY01 sw*/
    FFWREC.SY2CLRID = VPMSTY01.SY2CLRID; /* color id*/
    FFWREC.XDMCD = VPMSTY01.XDMCD; /* dimension*/
    FFWREC.SY1SSTNM = VPMSTY01.SY1SSTNM; /* style name*/
    FFWREC.SY2CLRAB = VPMSTY01.SY2CLRAB; /* color name*/
    FF0XW00.SYBSTGNB = VPMSTY01.SYBSTGNB; /* save style group*/
    FF0XW00.XPCCD = VPMSTY01.XPCCD; /* save category*/
    FF0XW00.YPGCD = VPMSTY01.YPGCD; /* save type*/
    FF0XW00.YSMXDV = VPMSTY01.YSMXDV; /* save division*/
    FF0XW00.XPLCD = VPMSTY01.XPLCD; /* save line*/
    FF0XW01.SY2SSCIN = VPMSTY01.SY2SSCIN; /* Save sfty stk ind*/
    FF0XW01.FF3PREFL = VPMSTY01.FF3PREFL; /* Save preset flag*/
    set FF0XM001.FF3PREFL initialAttributes;
    FF0XW01.SY2FDSMO = VPMSTY01.SY2FDSMO; /* Save intro month*/
    FF0XW01.SY2PDCMO = VPMSTY01.SY2PDCMO; /* Save close-out month*/
    FF0XW01.FSTPRDMO = VPMSTY01.PG2FPDMO; /* Save close-out month*/
    return;
  end

  FF0XS01(); /* Select FFSTY*/

   /* ------------------------------------------------------------*/
   /* If row found, move data to map and save data for later use*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

    /* ------------------------------------------------------------*/
     /* Save data for possible update or add.*/
    /* ------------------------------------------------------------*/

    FF0XW00.FF0XWFSY = "Y"; /* on VFFSTY01 sw*/
    FFWREC.SY2CLRID = FF3REC.SY2CLRID; /* color id*/
    FFWREC.XDMCD = FF3REC.XDMCD; /* dimension*/
    FFWREC.SY1SSTNM = FF3REC.SY1SSTNM; /* style name*/
    FFWREC.SY2CLRAB = FF3REC.SY2CLRAB; /* color name*/
    FF0XW00.SYBSTGNB = FF3REC.SYBSTGNB; /* save style group*/
    FF0XW00.XPCCD = FF3REC.XPCCD; /* save category*/
    FF0XW00.YPGCD = FF3REC.YPGCD; /* save type*/
    FF0XW00.YSMXDV = FF3REC.YSMXDV; /* save division*/
    FF0XW00.XPLCD = FF3REC.XPLCD; /* save line*/
    FF0XW01.SY2SSCIN = FF3REC.SY2SSCIN; /* Save sfty stk ind*/
    FF0XW01.FF3PREFL = FF3REC.FF3PREFL; /* Save preset flag*/
    set FF0XM001.FF3PREFL initialAttributes;
    FF0XW01.SY2FDSMO = FF3REC.SY2FDSMO; /* Save intro month*/
    FF0XW01.SY2PDCMO = FF3REC.SY2PDCMO; /* Save close-out month*/

  else
    FF0X155(); /* get supporting data from SYCLR/SYDVL*/
  end
end // end FF0XS03

// Get futures cutoff date
Function FF0XS70()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0XS70

// Open VPMHDR01
Function FF0XS71()
   /* ------------------------------------------------------------*/
   /* Format PMHDR call.*/
   /* ------------------------------------------------------------*/

  set FG1REC empty; /* Clear row storage area*/

  FG1REC.FG1BEGMO = FFWREC.FFABEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFWREC.FFAENDMO; /* End month*/
  FG1REC.XMSCD = "03"; /* 'Selected' status code*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

   /* ------------------------------------------------------------*/
   /* Open PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S71"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0XS71

// Fetch VPMHDR01
Function FF0XS72()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.  The edit*/
   /* assured us that the header exists, otherwise a message was*/
   /* sent to the user from the edit and you would not be here.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end


  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0XS72

// Close VPMHDR01
Function FF0XS73()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S73"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0XS73

// Save the display data
Function FF0XS80()

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FF0XW05.SY1STNBR[FF0XWIXC] = VPMSTY01.SY1STNBR;
  FF0XW05.SY2CLRID[FF0XWIXC] = VPMSTY01.SY2CLRID;
  FF0XW05.XDMCD[FF0XWIXC] = VPMSTY01.XDMCD;
  FF0XW05.SYBSTGNM[FF0XWIXC] = VPMSTY01.SY1SSTNM;
  FF0XW05.SY2CLRAB[FF0XWIXC] = VPMSTY01.SY2CLRAB;
  if (VPMSTY01.SY1STNBR == FFWREC.SY1STNBR
   && VPMSTY01.SY2CLRID == FFWREC.SY2CLRID
   && VPMSTY01.XDMCD == FFWREC.XDMCD)
    FF0XW04.FF0XWIDX = FF0XW04.FF0XWIXC; /* set column position*/
    FF0XW04.FF0XWPAG = FF0XW04.TA5TSQIX + 1; /* set page*/
  end

  FF0XW04.FF0XWIXC = FF0XW04.FF0XWIXC + 1; /* Increment line index*/

end // end FF0XS80

//*** RECORD=FF0XW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0XW00 type basicRecord
  10 FF0XWPAG FF0XWPAG ; 
  10 FF0XWPG2 FF0XWPG2 ; 
  10 FF0XWCNT FF0XWCNT ; 
  10 FF0XWIXM FF0XWIXM ; 
  10 FF0XWIX2 FF0XWIX2 ; 
  10 FF0XWIX3 FF0XWIX3 ; 
  10 * char(1) ; 
  10 FF0XWSWD FF0XWSWD ; 
  10 FF0XWSWF FF0XWSWF ; 
  10 FF0XWSWR FF0XWSWR ; 
  10 FF0XWHSW FF0XWHSW ; 
  10 FF0XWISW FF0XWISW ; 
  10 FF0XWDSW FF0XWDSW ; 
  10 FF0XWCSW FF0XWCSW ; 
  10 FF0XWTSW FF0XWTSW ; 
  10 FF0XWFSY FF0XWFSY ; 
  10 FF0XWMSY FF0XWMSY ; 
  10 * char(1) ; 
  10 FF0XWECF FF0XWECF ; 
  10 FF0XWEC2 FF0XWEC2 ; 
  10 FF0XWNBR FF0XWNBR ; 
  10 * char(1) ; 
  10 FF0XWDT FF0XWDT ; 
    15 FF0XWCC FF0XWCC ; 
    15 FF0XWYY FF0XWYY ; 
    15 FF0XWMM FF0XWMM ; 
  10 * num(1) ; 
  10 FFZINDMO FFZINDMO [15] ; 
    15 FFZICC FFZICC ; 
    15 FFZIYYMM FFZIYYMM ; 
  10 FF0XWBDT FF0XWBDT ; 
  10 FF0XWXDT FF0XWXDT ; 
  10 FF0XW-CCYY FF0XW-CCYY ; 
    15 FF0XW-CC FF0XW-CC ; 
    15 FF0XW-YY FF0XW-YY ; 
  10 * num(1) ; 
  10 FF0XWHSF FF0XWHSF [14] ; 
  10 FF0XWHMF FF0XWHMF [14] ; 
  10 * num(1) ; 
  10 FF0XWFDA FF0XWFDA ; 
  10 FF0XWFDB FF0XWFDB ; 
  10 FF0XWFDC FF0XWFDC ; 
  10 FF0XWSAV FF0XWSAV ; 
  10 FF0XWAMT FF0XWAMT ; 
  10 FF0XWDIF FF0XWDIF ; 
  10 * num(1) ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 XPCCD XPCCD ; 
  10 YPGCD YPGCD ; 
  10 YSMXDV YSMXDV ; 
  10 XPLCD XPLCD ; 
  10 * num(1) ; 
  10 FF0XWMSW FF0XWMSW ; 
  10 FF0XWSDT FF0XWSDT ; 
    15 FF0XWSDY FF0XWSDY ; 
    15 FF0XWSDM FF0XWSDM ; 
  10 FF0XWSVD FF0XWSVD ; 
    15 FF0XWSVC FF0XWSVC ; 
    15 FF0XWSVY FF0XWSVY ; 
    15 FF0XWSVM FF0XWSVM ; 
  10 FF0XWCHK FF0XWCHK ; 
  10 FF0XWCIX FF0XWCIX ; 
end // end FF0XW00

//*** RECORD=FF0XW01 ****
// Storage for total fields
// ***********************
Record FF0XW01 type basicRecord
  5 CACHGFL CACHGFL ; 
  5 FFZBYYMM FFZBYYMM ; 
  5 FFZEYYMM FFZEYYMM ; 
  5 FF0XW-SESN-YEAR FF0XW-SESN-YEAR ; 
    10 FF0XW-SESN FF0XW-SESN ; 
    10 FF0XW-YEAR FF0XW-YEAR ; 
  5 SY2FDSMO SY2FDSMO ; 
  5 SY2PDCMO SY2PDCMO ; 
  5 FSTPRDMO FSTPRDMO ; 
  5 SY2SSCIN SY2SSCIN ; 
  5 FF3PREFL FF3PREFL ; 
  5 * char(1) ; 
  5 FF0XWBEI FF0XWBEI [14] ; 
  5 FF0XWBAS FF0XWBAS [14] ; 
  5 FF0XWONO FF0XWONO [14] ; 
  5 FF0XWSPF FF0XWSPF [14] ; 
  5 FF0XMSPH FF0XMSPH [18] ; 
  5 FF0XWSUP FF0XWSUP [14] ; 
  5 FF0XWEIV FF0XWEIV [14] ; 
  5 FF0XWIVT FF0XWIVT [14] ; 
  5 FF0XWSST FF0XWSST [14] ; 
  5 FF0XWNIL FF0XWNIL [14] ; 
  5 FF0XWMPF FF0XWMPF [14] ; 
  5 FF0XWTOT FF0XWTOT [14] ; 
end // end FF0XW01

//*** RECORD=FF0XW02 ****
// Calculation fields
// ***********************
Record FF0XW02 type basicRecord
  5 FF6BEINV FF6BEINV [12] ; 
  5 FG2SUGFC FG2SUGFC [12] ; 
  5 FF6PRFCT FF6PRFCT [12] ; 
  5 FF6SFSTK FF6SFSTK [12] ; 
  5 FFRSSFCT FFRSSFCT [12] ; 
  5 FF0XWHSU FF0XWHSU [12] ; 
  5 FF0XWHEI FF0XWHEI [12] ; 
  5 FF0XWHIT FF0XWHIT [12] ; 
  5 FF0XWHTP FF0XWHTP [12] ; 
  5 FF0XWBTS FF0XWBTS [12] ; 
  5 FG4ONORD FG4ONORD [12] ; 
  5 FF0XWSUM FF0XWSUM [12] ; 
  5 * char(1) ; 
  5 FF6SLFCT FF6SLFCT ; 
  5 FH2SHP FH2SHP ; 
  5 FF0XWNPF FF0XWNPF ; 
  5 * char(1) ; 
  5 FF0XWSLS FF0XWSLS ; 
end // end FF0XW02

//*** RECORD=FF0XW03 ****
// Storage for total fields
// ***********************
Record FF0XW03 type basicRecord
  5 FF0XWBIA FF0XWBIA ; 
  5 FF0XWBSA FF0XWBSA ; 
  5 FF0XWONA FF0XWONA ; 
  5 FF0XWSFA FF0XWSFA ; 
  5 FF0XWSUA FF0XWSUA ; 
  5 FF0XWEIA FF0XWEIA ; 
  5 FF0XWITA FF0XWITA ; 
  5 FF0XWSSA FF0XWSSA ; 
  5 FF0XWNPA FF0XWNPA ; 
  5 FF0XWPFA FF0XWPFA ; 
  5 FF0XWTPA FF0XWTPA ; 
end // end FF0XW03

//*** RECORD=FF0XW04 ****
// ----------------------------
// Application working storage - Map 2
// ----------------------------
// ***********************
Record FF0XW04 type basicRecord
  10 FF0XWIXC FF0XWIXC ; 
  10 FF0XWIXX FF0XWIXX ; 
  10 FF0XWSWC FF0XWSWC ; 
  10 FF0XWSWF FF0XWSWF ; 
  10 FF0XWSWR FF0XWSWR ; 
  10 FF0XWSDV FF0XWSDV ; 
  10 FF0XWLCC FF0XWLCC ; 
  10 FF0XWLCD FF0XWLCD ; 
  10 FF0XWCWD FF0XWCWD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FF0XWCTR FF0XWCTR ; 
  10 FF0XWPAG FF0XWPAG ; 
  10 FF0XWIDX FF0XWIDX ; 
  10 * num(1) ; 
  10 FF0XWDT1 FF0XWDT1 ; 
    15 * num(1) ; 
    15 FF0XWCY1 FF0XWCY1 ; 
      20 FF0XWCC1 FF0XWCC1 ; 
      20 FF0XWYY1 FF0XWYY1 ; 
      20 FF0XWMM1 FF0XWMM1 ; 
    15 FF0XWDD1 FF0XWDD1 ; 
  10 * num(1) ; 
  10 FF0XWDT2 FF0XWDT2 ; 
    15 * num(1) ; 
    15 FF0XWCY2 FF0XWCY2 ; 
      20 FF0XWCC2 FF0XWCC2 ; 
      20 FF0XWYM2 FF0XWYM2 ; 
        25 FF0XWYY2 FF0XWYY2 ; 
        25 FF0XWMM2 FF0XWMM2 ; 
    15 FF0XWDD2 FF0XWDD2 ; 
  10 * num(1) ; 
  10 FF0XWBIX FF0XWBIX ; 
  10 FF0XWCY3 FF0XWCY3 ; 
    15 FF0XWCC3 FF0XWCC3 ; 
    15 FF0XWYM3 FF0XWYM3 ; 
      20 FF0XWYY3 FF0XWYY3 ; 
      20 FF0XWMM3 FF0XWMM3 ; 
end // end FF0XW04

//*** RECORD=FF0XW05 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record FF0XW05 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(555) ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 FF0XWSTU FF0XWSTU [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SYBSTGNM SYBSTGNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
end // end FF0XW05

//*** RECORD=VPMSTY01 ****
// ************ PRDCTN FCST PRODUCT HISTORY TABLE *************
// 
// DB2 TABLE VIEW:       DFCAST.VPmsty01
// 
// DCLGEN MEMBER:        DCL00???
// 
// I/O MODULE:           IO????
// 
// KEY TO TABLE:         FG1MODB
//                       YSMXDV
//                       SY1STNBR
//                       SY2CLRID
//                       XDMCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//           9/24/92  MDANGE  New record.
// ************************
Record VPMSTY01 type basicRecord
  5 VPMSTY01-GROUP VPMSTY01-GROUP ; 
    10 VPMSTY01-KEY VPMSTY01-KEY ; 
      15 FG1MODNB FG1MODNB ; 
      15 YSMXDV YSMXDV ; 
      15 YPGCD YPGCD ; 
      15 XPLCD XPLCD ; 
      15 XPCCD XPCCD ; 
      15 SYBSTGNB SYBSTGNB ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 SY1STYNM SY1STYNM ; 
    10 SYBSTGNM SYBSTGNM ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRDS SY2CLRDS ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XSUCD XSUCD ; 
    10 XGACD XGACD ; 
    10 PG7MAXPR PG7MAXPR ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 FF2GRMIN FF2GRMIN ; 
    10 FF2SYMIN FF2SYMIN ; 
    10 FF3PREFL FF3PREFL ; 
    10 SY2FDSMO SY2FDSMO ; 
    10 SY2PDCMO SY2PDCMO ; 
    10 PG2FPDMO PG2FPDMO ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPMSTY01

// variable column hdr
DataItem FF0XMSPH char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0XW-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Individual month CC
DataItem FF0XW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending month YYMM
DataItem FF0XW-SESN char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Ending month YYMM
DataItem FF0XW-SESN-YEAR char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Ending month YYMM
DataItem FF0XW-YEAR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Individual month YYMM
DataItem FF0XW-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Translated amount
DataItem FF0XWAMT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance to ship
DataItem FF0XWBAS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin month ccyymm
DataItem FF0XWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beg Inventory
DataItem FF0XWBEI char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg Inventory
DataItem FF0XWBIA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy mth index
DataItem FF0XWBIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance to ship
DataItem FF0XWBSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold Bal to Ship
DataItem FF0XWBTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date century
DataItem FF0XWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work cc
DataItem FF0XWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy cc
DataItem FF0XWCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy cc
DataItem FF0XWCC3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWCHK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWCIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Counter for months
DataItem FF0XWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Calculation requested sw
DataItem FF0XWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Counter for months
DataItem FF0XWCTR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save life cycle date
DataItem FF0XWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work CCyymm
DataItem FF0XWCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy CCyymm
DataItem FF0XWCY2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy CCyymm
DataItem FF0XWCY3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work dd
DataItem FF0XWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy dd
DataItem FF0XWDD2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Calc amt for prdctn fcst updt
DataItem FF0XWDIF bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data found switch
DataItem FF0XWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date area
DataItem FF0XWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date
DataItem FF0XWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work ccyymm
DataItem FF0XWDT2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end cursor flag two
DataItem FF0XWEC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end cursor flag
DataItem FF0XWECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ending Inventory
DataItem FF0XWEIA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending Inventory
DataItem FF0XWEIV char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// calculations work area
DataItem FF0XWFDA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area two
DataItem FF0XWFDB bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area three
DataItem FF0XWFDC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style on VFFSTY01 switch
DataItem FF0XWFSY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold ending inv
DataItem FF0XWHEI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold inv turns
DataItem FF0XWHIT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold mstr fcst for compare
DataItem FF0XWHMF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold sug fcst for compare
DataItem FF0XWHSF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold supply
DataItem FF0XWHSU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PMHDR found switch
DataItem FF0XWHSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold sug tot pfcst
DataItem FF0XWHTP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row for next style position
DataItem FF0XWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PMITM found switch
DataItem FF0XWISW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inventory Turns
DataItem FF0XWITA num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inventory Turns
DataItem FF0XWIVT num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general counter
DataItem FF0XWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general counter
DataItem FF0XWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for columns
DataItem FF0XWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for columns
DataItem FF0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general counter
DataItem FF0XWIXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save life cycle code
DataItem FF0XWLCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save life cycle date
DataItem FF0XWLCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date month
DataItem FF0XWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work mm
DataItem FF0XWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy mm
DataItem FF0XWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy mm
DataItem FF0XWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Master Prdctn Fcst
DataItem FF0XWMPF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_GRP_NBR
DataItem FF0XWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style on VPMSTY01 switch
DataItem FF0XWMSY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// True nbr of mos in range
DataItem FF0XWNBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Nil Production
DataItem FF0XWNIL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nil Production
DataItem FF0XWNPA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold Nil Production
DataItem FF0XWNPF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On Order
DataItem FF0XWONA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On Order
DataItem FF0XWONO char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current page nbr
DataItem FF0XWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Production Fcst
DataItem FF0XWPFA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page 2 present
DataItem FF0XWPG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculations save work area
DataItem FF0XWSAV bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWSDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style development flag
DataItem FF0XWSDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date area
DataItem FF0XWSDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Suggested prdctn fcst
DataItem FF0XWSFA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales Fcst (accum)
DataItem FF0XWSLS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Production Fcst
DataItem FF0XWSPF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Safety Stock
DataItem FF0XWSSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Safty Stock
DataItem FF0XWSST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0XWSTU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Supply
DataItem FF0XWSUA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold Sum sls fcst next 3 mos
DataItem FF0XWSUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Supply
DataItem FF0XWSUP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date area
DataItem FF0XWSVC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWSVD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWSVM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date area
DataItem FF0XWSVY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem FF0XWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Which map to display sw
DataItem FF0XWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tot Production
DataItem FF0XWTOT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tot Production
DataItem FF0XWTPA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Re-totaling switch
DataItem FF0XWTSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end   month ccyymm
DataItem FF0XWXDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy yymm
DataItem FF0XWYM2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy yymm
DataItem FF0XWYM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date year
DataItem FF0XWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work yy
DataItem FF0XWYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy yy
DataItem FF0XWYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy yy
DataItem FF0XWYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FSTPRDMO int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VPMSTY01-GROUP char(172)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VPMSTY01-KEY char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

