package ff0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0T ****
// This application allows the user to set order minimums
// either by Style Group or by Style/Color. Minimums are set
// for Div Grp/Type, Line/Type, Category/Type, Style Group,
// or Style/Color.
// 
// The user must specify either "Set Minimums by Style Group"
// or "Set Minimums by Style/Color". "Minimum" must also be
// entered. Either Div Grp/Type, Line/Type, Category/Type,
// Style Group, or Style/Color must be entered.
// 
// If the user doesn't know the code for a "Line", "Type", or
// "Category", he can enter a "?" to ask for help. The applic-
// ation will bring up a pop-up window to show a list of
// "Lines", "Types", or "Categories" and he can chose one from
// the window screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/27/89  CNEWMA  New application.
//          07/18/90  RHETRI  Fixed update with ezertn
//  FIX     02/26/91  LDELUH  Make color id 3 chars on map.
//  FF175   12/18/96  DSMITH  Regenerated for yr 2000.
// *********************
Program FF0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0TW00 FF0TW00; // record
  FF0TW01 FF0TW01; // record
  FF0TW02 FF0TW02; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL; // table
  use XPCTBL; // table
  use XPLTBL; // table
  use FF0TT {deleteAfterUse = yes}; // table
  use FF0TM.FF0TM001,  // forms
      FF0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0TM001 initial; /* M001 input/output*/
    set FF0TW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0TW00.FF0TWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* Move range to working storage.*/
     /* ------------------------------------------------------------*/

    FF0TW00.FFABEGMO = FFWREC.FFABEGMO; /* begin month*/
    FF0TW00.FFAENDMO = FFWREC.FFAENDMO; /* end month*/

     /* ------------------------------------------------------------*/
     /* If style code was not passed, default color and dim if they*/
     /* are missing.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.SY1STNBR == " ") /* if style code is missing*/
      if (FFWREC.SY2CLRID == " ") /* if color code is missing*/
        FFWREC.SY2CLRID = "00"; /* default to '00'*/
      end

      if (FFWREC.XDMCD == " ") /* if dim code is missing*/
        FFWREC.XDMCD = "00"; /* default to '00'*/
      end
    end

     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* if type is missing*/
      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0T001; /* Converse the main process*/


    FF0T001: FF0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0T001; /* Converse the main process*/


  end // end main
end // end FF0T

// Inquire/maintain a table row
Function FF0T001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0T200(); /* Format and display the map*/

  FF0T300(); /* Check attention identifier*/

  FF0T400(); /* Reset fields to normal intensity*/

  FF0T500(); /* Verify the entered data*/

  FF0T600(); /* Process valid input request*/


end // end FF0T001

// Format and converse the map
Function FF0T200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If map to be displayed, format the data.*/
   /* ------------------------------------------------------------*/

  if (FF0TW00.FF0TWSWF == "Y") /* Map must be formatted*/

    FF0T210(); /* format data*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0TM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0TM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0TM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "    "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0TM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0TM001.CAITEM; /* Application data*/


end // end FF0T200

// Format the data to display
Function FF0T210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0TM001 initial; /* M001 input/output area*/

  FF0TM001.YSMXDV = FFWREC.YSMXDV; /* load div grp*/
  FF0TM001.YSMSMDSC = FFWREC.YSMSMDSC; /* load div grp name*/
  FF0TM001.YPGCD = FFWREC.YPGCD; /* load type grp*/
  FF0TM001.YPGABRV = FFWREC.YPGABRV; /* load type grp name*/
  FF0TW00.FF0TWSWF = "N"; /* Format the map switch*/



end // end FF0T210

// Check attention identifier
Function FF0T300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0TW00.FF0TWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0TM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level, exit to the Master*/
   /* Menu, or exit to Rpt Scn was requested, exit to another*/
   /* application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf17) /* or PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0TM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FF01"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end FF0T300

// Reset highlighted fields
Function FF0T400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0TM001.FF0TMSMQ initialAttributes; /* Set Minimum qty*/
  set FF0TM001.FF0TMSSG initialAttributes; /* Set Minimum qty by Style Group*/
  set FF0TM001.FF0TMSSC initialAttributes; /* Set Minimum qty by Style/Color*/
  set FF0TM001.YSMXDV initialAttributes; /* Division code*/
  set FF0TM001.YPGCD initialAttributes; /* Type group code*/
  set FF0TM001.XPLCD initialAttributes; /* Product line code*/
  set FF0TM001.XPCCD initialAttributes; /* Category code*/
  set FF0TM001.SYBSTGNB initialAttributes; /* Style group*/
  set FF0TM001.SY1STNBR initialAttributes; /* Style number*/
  set FF0TM001.SY2CLRID initialAttributes; /* Color identification*/
  set FF0TM001.XDMCD initialAttributes; /* Dimension code*/
  set FF0TM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0TM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YPGCD == "?" /* or type group list requested*/
   || FF0TM001.XPLCD == "?" /* Product line list requested*/
   || FF0TM001.XPCCD == "?") /* or category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YPGCD == "?") /* Product type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0TM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0TM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0TM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0TM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0TM001.YPGCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0TM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF0TM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF0TM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF0TM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0TM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0TM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0TM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0TM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0TM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0TM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0T400

// Verify the entered data
Function FF0T500()
   /* ------------------------------------------------------------*/
   /* If fast path item data was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0TM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If minimum qty amount is 0, give second chance  e.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSMQ == 0) /* if minimum qty = 0*/

    if (FF0TW00.FF0TWSW1 == "N") /* not first time*/
      FF0TW00.FF0TWSW1 = "Y"; /* first time for next*/
    else /* its first time for this entry*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      /* SET FF0TM001.FF0TMSMQ CURSOR,BRIGHT;Highlight*/
      converseLib.validationFailed(333); /* press enter to continue*/
      FF0TW00.FF0TWSW1 = "N"; /* not first time now*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify fields.*/
   /* ------------------------------------------------------------*/

  FF0T510(); /* Verify style/color*/
  FF0T520(); /* Verify style group*/
  FF0T530(); /* Verify category*/
  FF0T540(); /* Verify line*/
  FF0T550(); /* Verify type grp*/
  FF0T560(); /* Verify div grp*/
  FF0T570(); /* verify data existence*/
  FF0T580(); /* Verify flags*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0T500

// Verify Style/Color
Function FF0T510()
   /* ------------------------------------------------------------*/
   /* If style/color was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SY1STNBR != " ") /* Style entered*/

    /* ------------------------------------------------------------*/
     /* Format key.*/
    /* ------------------------------------------------------------*/

    set FF3REC empty; /* clear record*/

    FF3REC.SY1STNBR = FF0TM001.SY1STNBR; /* style nbr*/
    FF3REC.SY2CLRID = FF0TM001.SY2CLRID; /* color id*/
    FF3REC.XDMCD = FF0TM001.XDMCD; /* dimension*/

    /* ------------------------------------------------------------*/
     /* Select FFSTY.*/
    /* ------------------------------------------------------------*/

    FF0T511(); /* Select FFSTY*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      FF0TM001.SY1SSTNM = FF3REC.SY1SSTNM; /* style name*/
      FF0TM001.SY2CLRAB = FF3REC.SY2CLRAB; /* color name*/

    else

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0TM001.XDMCD cursor, bold; /* Highlight*/
      set FF0TM001.SY2CLRID cursor, bold; /* Highlight*/
      set FF0TM001.SY1STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  else
    FF0TM001.SY1SSTNM = " "; /* clear style name*/
    FF0TM001.SY2CLRID = " "; /* clear color id*/
    FF0TM001.SY2CLRAB = " "; /* clear color name*/
    FF0TM001.XDMCD = " "; /* clear dimension*/

  end

   /* ------------------------------------------------------------*/
   /* If Style/color was entered, no other levels can be entered.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SY1STNBR > " ") /* style/color entered*/
    if (FF0TM001.SYBSTGNB > " " /* style grp entered*/
     || FF0TM001.XPCCD > " "    /* cat code entered*/
     || FF0TM001.XPLCD > " ")   /* line code entered*/

      converseLib.validationFailed(251); /* 'only one level can be set'*/
      FFWREC.XXXMODID = "510"; /* module identification*/

      set FF0TM001.SY1STNBR cursor, bold; /* set cursor*/
      set FF0TM001.XDMCD bold; /* highlight*/
      set FF0TM001.SY2CLRID bold; /* highlight*/

      if (FF0TM001.SYBSTGNB > " ") /* style grp entered*/
        set FF0TM001.SYBSTGNB cursor, bold; /* set cursor*/
      end

      if (FF0TM001.XPCCD > " ") /* cat code entered*/
        set FF0TM001.XPCCD cursor, bold; /* set cursor*/
      end

      if (FF0TM001.XPLCD > " ") /* line code entered*/
        set FF0TM001.XPLCD cursor, bold; /* set cursor*/
      end

    end
  end


end // end FF0T510

// Select FFSTY
Function FF0T511()
   /* ------------------------------------------------------------*/
   /* Get Next Row - Style Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "511"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T511

// Verify Style Group
Function FF0T520()
   /* ------------------------------------------------------------*/
   /* If style group was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SYBSTGNB != " ") /* Style group entered*/

    set FF3REC empty; /* clear record*/
    FF3REC.SYBSTGNB = FF0TM001.SYBSTGNB; /* style grp*/
    FF3REC.YPGCD = FF0TM001.YPGCD; /* type code*/
    FF3REC.YSMXDV = FF0TM001.YSMXDV; /* div grp code*/
    FF3REC.XLCCD = "*"; /* life cycle*/

    FF0T521(); /* Open FFSTY*/

    FF0T522(); /* Fetch FFSTY*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      FF0TM001.SYBSTGNM = FF3REC.SYBSTGNM; /* style grp name*/

    else

      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0TM001.SYBSTGNB cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

    FF0T523(); /* Close FFSTY*/

  else
    FF0TM001.SYBSTGNM = " "; /* style grp name*/

  end

   /* ------------------------------------------------------------*/
   /* If Style group was entered, no other levels can be entered.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SYBSTGNB > " ") /* style grp entered*/
    if (FF0TM001.XPCCD > " " /* cat code entered*/
     || FF0TM001.XPLCD > " ") /* line code entered*/

      converseLib.validationFailed(251); /* 'only one level can be set'*/
      FFWREC.XXXMODID = "520"; /* module identification*/

      set FF0TM001.SYBSTGNB cursor, bold; /* set cursor*/

      if (FF0TM001.XPCCD > " ") /* cat code entered*/
        set FF0TM001.XPCCD cursor, bold; /* set cursor*/
      end

      if (FF0TM001.XPLCD > " ") /* line code entered*/
        set FF0TM001.XPLCD cursor, bold; /* set cursor*/
      end

    end
  end


end // end FF0T520

// Open FFSTY
Function FF0T521()
   /* ------------------------------------------------------------*/
   /* Open FFSTY*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T521

// Fetch FFSTY
Function FF0T522()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T522

// Close FFSTY
Function FF0T523()
   /* ------------------------------------------------------------*/
   /* Close FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "523"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T523

// Verify Category
Function FF0T530()
   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPCCD != " ") /* category entered*/

    if (FF0TM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF0TM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF0TM001.XPCABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0TM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  else
    FF0TM001.XPCABRV = " "; /* Abbreviation*/

  end

   /* ------------------------------------------------------------*/
   /* If Category was entered, no other levels can be entered.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPCCD > " ") /* cat code entered*/
    if (FF0TM001.XPLCD > " ") /* line code entered*/

      converseLib.validationFailed(251); /* 'only one level can be set'*/
      FFWREC.XXXMODID = "530"; /* module identification*/

      set FF0TM001.XPCCD cursor, bold; /* set cursor*/

      if (FF0TM001.XPLCD > " ") /* line code entered*/
        set FF0TM001.XPLCD cursor, bold; /* set cursor*/
      end

    end
  end


end // end FF0T530

// Verify Line
Function FF0T540()
   /* ------------------------------------------------------------*/
   /* If line code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPLCD != " ") /* line code entered*/

    if (FF0TM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF0TM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF0TM001.XPLABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FF0TM001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  else
    FF0TM001.XPLABRV = " "; /* Abbreviation*/

  end

end // end FF0T540

// Verify Type grp
Function FF0T550()
   /* ------------------------------------------------------------*/
   /* Verify type code, if entered and style/color not used.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YPGCD == "*") /* Type grp equal 'all'*/

    FF0TM001.YPGABRV = "*ALL* "; /* Abbreviation*/

  else

    if (FF0TM001.YPGCD == " " /* Type grp missing*/
     && FF0TM001.SY1STNBR > " ") /* and style/color used*/

      FF0TM001.YPGABRV = " "; /* Abbreviation*/

    else
      if (FF0TM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        FF0TM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        FF0TM001.YPGABRV = " "; /* Abbreviation*/

        FFWREC.XXXMODID = "550"; /* Module identification*/
        set FF0TM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/

      end

    end

  end


end // end FF0T550

// Verify Division
Function FF0T560()
   /* ------------------------------------------------------------*/
   /* Verify division group code.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FF0TM001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FF0T560 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FF0TM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FF0TM001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "560"; /* Module identification*/
    set FF0TM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF0T560

// Verify data exists
Function FF0T570()
   /* ------------------------------------------------------------*/
   /* One of the following fields (levels) must be entered:*/
   /* Division, Line ,Category, Style Grp, or Style/Clr.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YSMXDV == " "   /* Division not entered*/
   && FF0TM001.XPLCD == " "    /* Line not entered*/
   && FF0TM001.XPCCD == " "    /* Category not entered*/
   && FF0TM001.SYBSTGNB == " " /* Style Grp not entered*/
   && FF0TM001.SY1STNBR == " ") /* Style/Clr not entered*/
    converseLib.validationFailed(178); /* 'one of these must be entered'*/
    FFWREC.XXXMODID = "570"; /* module identification*/
    set FF0TM001.SY1STNBR cursor, bold; /* set cursor*/
    set FF0TM001.SY2CLRID cursor, bold; /* set cursor*/
    set FF0TM001.XDMCD cursor, bold; /* set cursor*/
    set FF0TM001.SYBSTGNB cursor, bold; /* set cursor*/
    set FF0TM001.XPCCD cursor, bold; /* set cursor*/
    set FF0TM001.XPLCD cursor, bold; /* set cursor*/
    set FF0TM001.YSMXDV cursor, bold; /* set cursor*/
  end


end // end FF0T570

// Verify Flags
Function FF0T580()
   /* ------------------------------------------------------------*/
   /* Either enter minimum by Style Grp or by Style/Clr must be*/
   /* set to 'y'.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSG != "Y" /* set minimum by style grp not 'y'*/
   && FF0TM001.FF0TMSSC != "Y") /* set minimum by style/clr not 'y'*/
    converseLib.validationFailed(60); /* 'please make a selection'*/
    FFWREC.XXXMODID = "580"; /* module identification*/
    set FF0TM001.FF0TMSSC cursor, bold; /* set cursor*/
    set FF0TM001.FF0TMSSG cursor, bold; /* set cursor*/
  end

   /* ------------------------------------------------------------*/
   /* Both minimum by Style Grp and by Style/Clr cannot be*/
   /* entered.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSG == "Y" /* set minimum by style grp = 'y'*/
   && FF0TM001.FF0TMSSC == "Y") /* set minimum by style/clr = 'y'*/
    converseLib.validationFailed(233); /* 'mutually exclusive change'*/
    FFWREC.XXXMODID = "580"; /* module identification*/
    set FF0TM001.FF0TMSSC cursor, bold; /* set cursor*/
    set FF0TM001.FF0TMSSG cursor, bold; /* set cursor*/
  end

   /* ------------------------------------------------------------*/
   /* If set minimum by Style Grp eq 'y' and Style/Clr entered,*/
   /* indicate error.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSG == "Y") /* set minimum be style group*/
    if (FF0TM001.SY1STNBR > " " /* style nbr entered*/
     || FF0TM001.SY2CLRID > " " /* clr id entered*/
     || FF0TM001.XDMCD > " ")   /* dim cd entered*/
      converseLib.validationFailed(203); /* 'inconsistent relationship'*/
      FFWREC.XXXMODID = "580"; /* module identification*/
      set FF0TM001.XDMCD cursor, bold; /* set cursor*/
      set FF0TM001.SY2CLRID cursor, bold; /* set cursor*/
      set FF0TM001.SY1STNBR cursor, bold; /* set cursor*/
      set FF0TM001.FF0TMSSG cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Set minimums by style/clr flag entered, verify that*/
   /* it is valid.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSC != " ") /* flag entered*/
    if (FF0TM001.FF0TMSSC != "Y" /* flag not set to yes*/
     && FF0TM001.FF0TMSSC != "N") /* and not set to no*/
      FFWREC.XXXMODID = "580"; /* Module identification*/
      set FF0TM001.FF0TMSSC cursor, bold; /* set cursor*/
      converseLib.validationFailed(153); /* Indicate must be 'y' or 'n'*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If Set minimums by style group flag entered, verify that*/
   /* it is valid.*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSG != " ") /* flag entered*/
    if (FF0TM001.FF0TMSSG != "Y" /* flag not set to yes*/
     && FF0TM001.FF0TMSSG != "N") /* and not set to no*/
      FFWREC.XXXMODID = "580"; /* Module identification*/
      set FF0TM001.FF0TMSSG cursor, bold; /* set cursor*/
      converseLib.validationFailed(153); /* Indicate must be 'y' or 'n'*/

    end

  end


end // end FF0T580

// Process valid input request
Function FF0T600()
   /* ------------------------------------------------------------*/
   /* indicate that the map must be formated.*/
   /* ------------------------------------------------------------*/

  FF0TW00.FF0TWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update key in FFWREC.*/
   /* ------------------------------------------------------------*/

  FFWREC.YSMXDV = FF0TM001.YSMXDV; /* Division code*/
  FFWREC.YSMSMDSC = FF0TM001.YSMSMDSC; /* Division code abrv*/
  FFWREC.YPGCD = FF0TM001.YPGCD; /* type grp*/
  FFWREC.YPGABRV = FF0TM001.YPGABRV; /* type grp name*/
  FFWREC.XPLCD = FF0TM001.XPLCD; /* Product line code*/
  FFWREC.XPLABRV = FF0TM001.XPLABRV; /* Product line abrv*/
  FFWREC.XPCCD = FF0TM001.XPCCD; /* Category code*/
  FFWREC.XPCABRV = FF0TM001.XPCABRV; /* Category abrv*/
  FFWREC.SYBSTGNB = FF0TM001.SYBSTGNB; /* Style group*/
  FFWREC.SYBSTGNM = FF0TM001.SYBSTGNM; /* style group name*/
  FFWREC.SY1STNBR = FF0TM001.SY1STNBR; /* style nbr*/
  FFWREC.SY1SSTNM = FF0TM001.SY1SSTNM; /* style name*/
  FFWREC.SY2CLRID = FF0TM001.SY2CLRID; /* color id*/
  FFWREC.SY2CLRAB = FF0TM001.SY2CLRAB; /* color abrv*/
  FFWREC.XDMCD = FF0TM001.XDMCD; /* dimension code*/

   /* ------------------------------------------------------------*/
   /* Obtain date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Format obtain date and time*/

   /* ------------------------------------------------------------*/
   /* If set minimum by style grp requested, perform processing*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSG == "Y") /* set minimum by style grp*/
    FF0T610(); /* Set minimum by style grp*/
  end

   /* ------------------------------------------------------------*/
   /* If set minimum by style/clr requested, perform processing*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.FF0TMSSC == "Y") /* set minimum by style/clr*/
    FF0T620(); /* Set minimum be style/clr*/
  end

   /* ------------------------------------------------------------*/
   /* If rows were updated, indicate that the updates were*/
   /* successfully completed.*/
   /* ------------------------------------------------------------*/

  if (FF0TW00.FF0TWRUF == "Y") /* rows were updated*/
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/
    /* ------------------------------------------------------------*/
     /* Commit all updates.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all updates*/

  end

   /* ------------------------------------------------------------*/
   /* Submit Batch Job to update suggested buy*/
   /* ------------------------------------------------------------*/

   /* PERFORM FF0T630                 ; Submit batch job*/


end // end FF0T600

// Set Minimum by Style Grp
Function FF0T610()
   /* ------------------------------------------------------------*/
   /* If style group was entered, update FFSTY*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SYBSTGNB > " ") /* style group entered*/

    FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* style group*/
    FF3REC.YPGCD = FFWREC.YPGCD; /* type code*/
     /* MOVE '10' TO FF3REC.YSMXDV    ; div group*/
    FF3REC.YSMXDV = "* "; /* all div groups*/
    FF3REC.XLCCD = "*"; /* life cycle*/

    FF0T611(); /* open FFSTY*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T612(); /* fetch FFSTY*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FF3REC.FF2GRMIN = FF0TM001.FF0TMSMQ; /* sty grp minimum*/
        FF0T613(); /* update FFSTY*/
      end

    end

    FF0T614(); /* close FFSTY*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If category was entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPCCD > " ") /* category entered*/

    FF2REC.YSMXDV = "10"; /* division code*/
    FF2REC.XPLCD = "*"; /* line code*/
    FF2REC.XPCCD = FFWREC.XPCCD; /* category code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FF2REC.FF2GRMIN = FF0TM001.FF0TMSMQ; /* sty grp minimum*/
        FF2REC.FF2GOIND = "C"; /* level indicator*/
        FF0T617(); /* update FFXRF*/
      end

    end

    FF0T618(); /* close FFXRF*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPLCD > " ") /* line entered*/

    FF2REC.YSMXDV = "10"; /* division code*/
    FF2REC.XPCCD = "*"; /* category code*/
    FF2REC.XPLCD = FFWREC.XPLCD; /* line code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (FF2REC.FF2GOIND == "C") /* set at category level*/
           /* next sentence             ; do not update*/
        else
          FF2REC.FF2GRMIN = FF0TM001.FF0TMSMQ; /* sty grp minimum*/
          FF2REC.FF2GOIND = "L"; /* level indicator*/
          FF0T617(); /* update FFXRF*/
        end
      end

    end

    FF0T618(); /* close FFXRF*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If division entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YSMXDV > " ") /* division entered*/

    FF2REC.XPLCD = "*"; /* line code*/
    FF2REC.XPCCD = "*"; /* category code*/
    FF2REC.YSMXDV = FFWREC.YSMXDV; /* div grp code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (FF2REC.FF2GOIND == "C" /* set at category level*/
         || FF2REC.FF2GOIND == "L") /* set at line level*/
           /* next sentence             ; do not update*/
        else
          FF2REC.FF2GRMIN = FF0TM001.FF0TMSMQ; /* sty grp minimum*/
          FF2REC.FF2GOIND = "D"; /* level indicator*/
          FF0T617(); /* update FFXRF*/
        end
      end

    end

    FF0T618(); /* close FFXRF*/

  end


end // end FF0T610

// Open   FFSTY
Function FF0T611()
   /* ------------------------------------------------------------*/
   /* Open FFSTY*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T611

// Fetch  FFSTY
Function FF0T612()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FF0TW00.FF0TWECF = "Y"; /* end of cursor*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T612

// Update FFSTY
Function FF0T613()
   /* ------------------------------------------------------------*/
   /* Update field.*/
   /* ------------------------------------------------------------*/

  FF3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update FFSTY*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("U ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0TW00.FF0TWRUF = "Y"; /* indicate row updated*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "613"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T613

// Close  FFSTY
Function FF0T614()
   /* ------------------------------------------------------------*/
   /* Close FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "614"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T614

// Open   FFXRF
Function FF0T615()
   /* ------------------------------------------------------------*/
   /* Open FFXRF*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "615"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T615

// Fetch  FFXRF
Function FF0T616()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, Return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FF0TW00.FF0TWECF = "Y"; /* end of cursor*/
      end

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "616"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T616

// Update FFSTY
Function FF0T617()
   /* ------------------------------------------------------------*/
   /* Update field.*/
   /* ------------------------------------------------------------*/

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update FFSTY*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF0TW00.FF0TWRUF = "Y"; /* indicate row updated*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "617"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "617"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T617

// Close  FFXRF
Function FF0T618()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "618"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T618

// Set Minimum by Style/Clr
Function FF0T620()
   /* ------------------------------------------------------------*/
   /* If style/color was entered, update FFSTY*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SY1STNBR > " ") /* style/color entered*/

    FF3REC.SY1STNBR = FFWREC.SY1STNBR; /* style nbr*/
    FF3REC.SY2CLRID = FFWREC.SY2CLRID; /* color id*/
    FF3REC.XDMCD = FFWREC.XDMCD; /* dim cd*/

    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    FF0T621(); /* select FFSTY*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      FF3REC.FF2SYMIN = FF0TM001.FF0TMSMQ; /* sty/col minimum*/
      FF0T613(); /* update FFSTY*/
    end

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If style group was entered, update FFSTY*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.SYBSTGNB > " ") /* style group entered*/

    FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* style group*/
    FF3REC.YPGCD = FFWREC.YPGCD; /* type group*/
    FF3REC.YSMXDV = "10"; /* div group*/
    FF3REC.XLCCD = "*"; /* life cycle*/

    FF0T611(); /* open FFSTY*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T612(); /* select FFSTY*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FF3REC.FF2SYMIN = FF0TM001.FF0TMSMQ; /* sty/col minimum*/
        FF0T613(); /* update FFSTY*/
      end

    end

    FF0T614(); /* close FFSTY*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If category was entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPCCD > " ") /* category entered*/

    FF2REC.YSMXDV = "10"; /* division code*/
    FF2REC.XPLCD = "*"; /* line code*/
    FF2REC.XPCCD = FFWREC.XPCCD; /* category code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        FF2REC.FF2SYMIN = FF0TM001.FF0TMSMQ; /* sty/col minimum*/
        FF2REC.FF2COIND = "C"; /* level indicator*/
        FF0T617(); /* update FFXRF*/
      end

    end

    FF0T618(); /* close FFXRF*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If line was entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.XPLCD > " ") /* line entered*/

    FF2REC.YSMXDV = "10"; /* division code*/
    FF2REC.XPCCD = "*"; /* category code*/
    FF2REC.XPLCD = FFWREC.XPLCD; /* line code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (FF2REC.FF2COIND == "C") /* set at category level*/
           /* next sentence             ; do not update*/
        else
          FF2REC.FF2SYMIN = FF0TM001.FF0TMSMQ; /* sty/col minimum*/
          FF2REC.FF2COIND = "L"; /* level indicator*/
          FF0T617(); /* update FFXRF*/
        end
      end

    end

    FF0T618(); /* close FFXRF*/
    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If division entered, update FFXRF*/
   /* ------------------------------------------------------------*/

  if (FF0TM001.YSMXDV > " ") /* division entered*/

    FF2REC.XPLCD = "*"; /* line code*/
    FF2REC.XPCCD = "*"; /* category code*/
    FF2REC.YSMXDV = FFWREC.YSMXDV; /* div grp code*/
    FF2REC.YPGCD = FFWREC.YPGCD; /* type code*/

    FF0T615(); /* open FFXRF*/

    FF0TW00.FF0TWECF = "N"; /* initialize end of cursor flag*/
    FF0TW00.FF0TWRUF = "N"; /* initialize row updated flag*/

    while (FF0TW00.FF0TWECF != "Y") /* until end of cursor*/

      FF0T616(); /* select FFXRF*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
        if (FF2REC.FF2COIND == "C" /* set at category level*/
         || FF2REC.FF2COIND == "L") /* set at line level*/
           /* next sentece              ; do not update*/
        else
          FF2REC.FF2SYMIN = FF0TM001.FF0TMSMQ; /* sty/col minimum*/
          FF2REC.FF2COIND = "D"; /* level indicator*/
          FF0T617(); /* update FFXRF*/
        end
      end

    end

    FF0T618(); /* close FFXRF*/

  end


end // end FF0T620

// Select FFSTY
Function FF0T621()
   /* ------------------------------------------------------------*/
   /* Select FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S ", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, Return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FF0TW00.FF0TWECF = "Y"; /* end of cursor*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0T621

//*** RECORD=FF0TW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0TW00 type basicRecord
  10 FF0TWSWF FF0TWSWF ; 
  10 FF0TWECF FF0TWECF ; 
  10 FF0TWRUF FF0TWRUF ; 
  10 FF0TWCNT FF0TWCNT ; 
  10 FF0TWSUB FF0TWSUB ; 
  10 FF0TWSW1 FF0TWSW1 ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFAENDMO FFAENDMO ; 
  10 FF1MRNBR FF1MRNBR ; 
end // end FF0TW00

//*** RECORD=FF0TW01 ****
// Copybook for function code and count - PMHDR
// ***********************
Record FF0TW01 type basicRecord
  10 FF0TWFCD FF0TWFCD ; 
  10 FF0TWNBR FF0TWNBR ; 
end // end FF0TW01

//*** RECORD=FF0TW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0TW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 FF0TWCGI FF0TWCGI ; 
    15 YSMXDV YSMXDV ; 
    15 YPGCD YPGCD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 SYBSTGNB SYBSTGNB ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 FF0TWOMQ FF0TWOMQ ; 
    15 CAUSERID CAUSERID ; 
    15 * char(42) ; 
end // end FF0TW02

// color group indicator
DataItem FF0TWCGI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FF0TWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// End of cursor flag
DataItem FF0TWECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function code
DataItem FF0TWFCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of models
DataItem FF0TWNBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order minimum qty
DataItem FF0TWOMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row updated flag
DataItem FF0TWRUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Counter for loops
DataItem FF0TWSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// first time through switch
DataItem FF0TWSW1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0TWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

