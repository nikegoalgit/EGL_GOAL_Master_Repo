package ff0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import fh.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0D ****
// This application is part of the Footwear Forcast System  -
// Short Range.
// 
// The user may enter this application via the Short Range Menu
// (FF0A), the Work Sheet Select Screen (FF0B), the Set Hist
// Prop Ind screen (FF0r), the Set Hist Seas Ind screen
// (FF0m), or Fast Path.
// 
// This application displays Historical futures demand infor-
// mation for 1, 2, and combined years ago and any previously
// set hist seasonal indicator for a given category/type group.
// an alternate category code may also be displayed if it
// exists for the given category.
// 
// The user may press PF16 to have the alternate categories
// demand data if an alternate category has been set for the
// given category. By pressing PF17 the user returns to the
// original categories data on display.
// 
// The user may change the hist indicator for the original
// category by selecting one of the three displayed regardless
// of whether the original category or alternate category data
// is displayed.
// 
// The user may scroll left and right to see each month in the
// short range seasons for the category.
// 
// The user may PF13 to application FF0M, PF15 to application
// FF0R, or exit to any allowed application via Fast Path.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/25/89  CNEWMA  New application.
//          11/12/90  MDANGE  FF135 replace combined years
//                            option with a user created option
//                            Store user created %'s on
//                            DFCAST.VRCMTH01.
// FH140    02/09/94  JJUCH   Change to use authorized future.
// FF175    12/19/96  DSMITH  Regenerated for year 2000.
// *********************
Program FF0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0DW00 FF0DW00; // record
  FF0DW01 FF0DW01; // record
  FF0DW02 FF0DW02; // record
  FF0DW03 FF0DW03; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FF0DM.FF0DM001,  // forms
      FF0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FF0DM001 initial; /* M001 input/output*/
    set FF0DW00 empty; /* working storage*/
    set FF0DW01 empty; /* working storage*/
    set FF0DW02 empty; /* working storage*/
    set FF0DW03 empty; /* temp working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0DW00.FF0DWDRF = "N"; /* data not requested*/

    if (FFWREC.YPGCD == " ") /* type group code not entered*/
      FFWREC.YPGCD = "01";
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.XPCCD != " " /* category found*/
     && FFWREC.YPGCD != " ") /* type group code found*/
      FF0DW00.FF0DWDRF = "Y"; /* data requested*/
    end

    FF0DW00.FF0DWCAT = "Y"; /* original category data requested*/
    FF0DW00.FF0DWNCF = "Y"; /* New category requested*/
    FF0DW00.FF0DWPGN = 1; /* Page number*/
    FF0DW00.FF0DWFMF = "Y"; /* format the map*/
    FF0DW00.CACHGFL = "N";

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0D.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0D001; /* Converse the main process*/


    FF0D001: FF0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0D001; /* Converse the main process*/


  end // end main
end // end FF0D

// Inquire/maintain a table row
Function FF0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0D100(); /* Obtain the data to display*/

  FF0D200(); /* Format and display the map*/

  FF0D300(); /* Check attention identifier*/

  FF0D400(); /* Reset fields to normal intensity*/

  FF0D500(); /* Verify the entered data*/

  FF0D600(); /* Process valid input request*/


end // end FF0D001

// Obtain Data to Display
Function FF0D100()
   /* ------------------------------------------------------------*/
   /* if data not requested or an error occured, return to*/
   /* previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWDRF != "Y" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error occured*/
    return;
  end

  FF0DW00.CACHGFL = "N";

  FF0DW00.FF0DWSCR = FF0DW00.FF0DWCAT; /* Save cat req flag*/

   /* ------------------------------------------------------------*/
   /* Obtain original category data*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWCAT = "Y"; /* Original category requested*/
  set FF0DW02 empty; /* clear display storage*/
  FF0D110(); /* Obtain Season Data*/

  if (FF2REC.FF2NSEAS == 0) /* no seasons available*/
    converseLib.validationFailed(174); /* 'seasons not set up'*/
    FFWREC.XXXMODID = "100"; /* module identification*/
    return; /* return to previous process*/
  end

  if (FF0DW00.FF0DWCAT == "Y") /* original cat requested*/
    FF0D115(); /* Determine season lengths*/
  end

  FF0DW02.XPCCD = FF0DM001.XPCCD; /* orig cat code*/
  FF0DW00.FF0DWCTS = 1; /* season counter*/
  FF0DW00.FF0DWIX3 = 0; /* initialize index*/
  FF0DW00.FF0DWIX4 = 1; /* Master month range index*/

  while (FF0DW00.FF0DWCTS <= FF0DW01.FF2NSEAS) /* season cnt LE nbr seasons*/

    FF0D120(); /* Obtain Detail Data*/

    FF0D130(); /* monthly qty calcs (orig cat)*/

    FF0D140(); /* season qty and pct calcs (orig cat)*/

    FF0DW00.FF0DWCTS = FF0DW00.FF0DWCTS + 1; /* increment season counter*/
  end

  FF0D121(); /* Get user created percentages*/

   /* ------------------------------------------------------------*/
   /* If alternate category code exists, Obtain data - perform*/
   /* calculations.*/
   /* ------------------------------------------------------------*/

  if (FF0DW01.FF2ALCAT != " ") /* alt cat code exists*/

    FF0DW00.FF0DWCAT = "N"; /* alternate category requested*/
    set FF0DW03 empty; /* clear display storage*/
    FF0D110(); /* Obtain Season Data*/

    FF0DW03.XPCCD = FF0DW01.FF2ALCAT; /* alt cat code*/
    FF0DW00.FF0DWCTS = 1; /* season counter*/
    FF0DW00.FF0DWIX3 = 0; /* initialize index*/
    FF0DW00.FF0DWIX4 = 1; /* Master month range index*/

    while (FF0DW00.FF0DWCTS <= FF0DW01.FF2NSEAS) /* number of seasons*/

      FF0D120(); /* Obtain Detail Data*/

      FF0D150(); /* monthly qty calcs (alt cat)*/

      FF0D160(); /* season qty and pct calcs (alt cat)*/

      FF0DW00.FF0DWCTS = FF0DW00.FF0DWCTS + 1; /* increment season counter*/
    end
    set FFDREC empty;
    FFDREC.XPCCD = FF0DW01.FF2ALCAT; /* alt cat code*/
    FF0D127(); /* Get user created percentages - alt*/
                                   /* cat*/
  end

   /* ------------------------------------------------------------*/
   /* If category or type group was changed, set flag to view*/
   /* original data.*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWNCF == "Y") /* new category requested*/
    FF0DW00.FF0DWCAT = "Y"; /* set to orig cat*/
    FFWREC.XXXMSGNO = 162; /* view orig cat msg*/
    FF0DW00.FF0DWNCF = "N"; /* reset flag*/
    FF0DW00.FF0DWPGN = 1; /* orig cat pg 1*/
  else
    FF0DW00.FF0DWCAT = FF0DW00.FF0DWSCR;
  end

   /* ------------------------------------------------------------*/
   /* Save Map fields in Working Storage*/
   /* ------------------------------------------------------------*/

  FF0DW01.FF0DWMBM = FF0DM001.FF2SEASN; /* season begin month*/
  FF0DW00.FF0DWFMF = "Y"; /* format the map*/

  FF0DW00.FF0DWDRF = "N"; /* data not requested*/

  FF0DW00.CACHGFL = "Y";


end // end FF0D100

// Obtain Season Data
Function FF0D110()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
    FF2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  else
    FF2REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
  end

  FF2REC.YPGCD = FFWREC.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0D110

// Determine Season lengths
Function FF0D115()

     /* Calculate seasons lengths, page layouts, working storage position*/

  FF0DW01.FF2GROUP = FF2REC.FF2GROUP; /* save record group*/
  FF0DM001.FF2SEASN = FF2REC.FF2SEASN[1]; /* season beg month*/
  FF0DW01.FF2NSEAS = FF2REC.FF2NSEAS; /* number of months*/

  FF0DW00.FF0DWIX1 = 1; /* initialize index*/
  while (FF0DW00.FF0DWIX1 <= 4)
    FF0DW01.FF2SEASN[FF0DWIX1] = FF2REC.FF2SEASN[FF0DWIX1];
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
  end

  if (FF2REC.FF2ALCAT != " ")
    FF0DW01.FF2ALCAT = FF2REC.FF2ALCAT; /* alternate category*/
    if (FF0DW01.FF2ALCAT in XPCTBL.XPCCD)
      FF0DW01.FF0DWACA = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  else
    FF0DW01.FF2ALCAT = " "; /* alternate category*/
    FF0DW01.FF0DWACA = "      "; /* alt cat abrv*/
  end

  if (FF2REC.FF2FUIND != " ")
    FF0DW01.FF2FUIND = FF2REC.FF2FUIND; /* future year ind*/
    FF0DW01.FF0DWIND = FF2REC.FF2FUIND;
                                   /* future year ind - map*/
  end

   /* ------------------------------------------------------------*/
   /* calculate how many months long each season is and store*/
   /* ------------------------------------------------------------*/

  FF0DW01.FF0DWMNS[1] = 0;
  FF0DW01.FF0DWMNS[2] = 0;
  FF0DW01.FF0DWMNS[3] = 0;
  FF0DW01.FF0DWMNS[4] = 0;
  FF0DW00.FF0DWCNT = 1; /* month counter*/
  FF0DW00.FF0DWIX3 = FF2REC.FF2NSEAS; /* index max*/

  FF0DW00.FF0DWIX1 = 1;
  FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX1 + 1;
  while (FF0DW00.FF0DWIX1 <= FF0DW00.FF0DWIX3)

    FF0DW00.FF0DWKD1 = FF2REC.FF2SEASN[FF0DWIX1];
    if (FF2REC.FF2NSEAS == 1) /* only one season exists*/
      FF0DW01.FF0DWMNS[FF0DWIX1] = 12; /* default*/
      FF0DW01.FF0DWSTM[FF0DWIX1] = 1; /* season start map*/
    else
      if (FF0DW00.FF0DWIX2 > FF0DW00.FF0DWIX3) /* +1 index GT season max*/
        FF0DW00.FF0DWKD2 = FF2REC.FF2SEASN[1]; /* plus one year*/
      else
        FF0DW00.FF0DWKD2 = FF2REC.FF2SEASN[FF0DWIX2];
      end

      if (FF0DW00.FF0DWKM2 < FF0DW00.FF0DWKM1)
        FF0DW00.FF0DWKM2 = FF0DW00.FF0DWKM2 + 12; /* add 12 months*/
      end

      FF0DW01.FF0DWMNS[FF0DWIX1] = FF0DW00.FF0DWKM2 - FF0DW00.FF0DWKM1;
      FF0DW00.FF0DWCNT = FF0DW00.FF0DWCNT + FF0DW01.FF0DWMNS[FF0DWIX1];
      FF0DW01.FF0DWSTM[FF0DWIX1] = FF0DW00.FF0DWCNT -            FF0DW01.FF0DWMNS[FF0DWIX1]; /* seas start map*/
    end
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1; /* increment index*/

  end

   /* calculate page layout and WS positions*/

  FF0DW00.FF0DWCUR = 1; /* current season*/
  FF0DW00.FF0DWCMO = 1; /* curr season start month*/
  FF0DW00.FF0DWPGN = 1; /* set page number to 1*/
  FF0DW00.FF0DWMXP = 0; /* max pages*/

  FF0DW00.FF0DWIX1 = 1;
  FF0DW00.FF0DWIX2 = 1;
  while (FF0DW00.FF0DWIX1 <= FF0DW00.FF0DWIX3) /* while LE number of seasons*/

    FF0DW01.FF0DWTOT[FF0DWIX1] = FF0DWIX1 * 13; /* total positon WS*/
    FF0DW01.FF0DWSTW[FF0DWIX1] = FF0DWIX1 * 13 - 12; /* start position WS*/

    if (FF0DW01.FF0DWMNS[FF0DWIX1] > 6) /* season longer than one map*/
      FF0DW00.FF0DWMXP = FF0DW00.FF0DWMXP + 2; /* max pages*/
        /* first page*/
      FF0DW01.FF0DWTMP[FF0DWIX2] = "N"; /* total on map*/
      FF0DW01.FF0DWMPG[FF0DWIX2] = 6;
                                                          /* months on page*/

      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1; /* increment index*/

        /* second page*/
      FF0DW01.FF0DWTMP[FF0DWIX2] = "Y"; /* total on map*/
      FF0DW01.FF0DWMPG[FF0DWIX2] = FF0DW01.FF0DWMNS[FF0DWIX1] - 6;
    else
      FF0DW00.FF0DWMXP = FF0DW00.FF0DWMXP + 1; /* max pages*/
        /* one page season*/
      FF0DW01.FF0DWTMP[FF0DWIX2] = "Y"; /* total on map*/
      FF0DW01.FF0DWMPG[FF0DWIX2] = FF0DW01.FF0DWMNS[FF0DWIX1];
                                                          /* months on page*/
    end
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1; /* increment index*/

  end

end // end FF0D115

// Obtain Detail Data
Function FF0D120()
   /* ------------------------------------------------------------*/
   /* Calculate months in seasons - one and two yrs ago*/
   /* ------------------------------------------------------------*/

  FF0D122(); /* calculate months*/

   /* ------------------------------------------------------------*/
   /* Set up key data - Call subroutine (ff5500)*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = 1; /* initialize index*/

  while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[FF0DWCTS]) /* months in season*/

     /* set up key for future monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FF0DW00.FF0DWYRF = "Y"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season four*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - one year ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM11[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM12[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM13[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM14[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

     /* set up key for future monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FF0DW00.FF0DWYRF = "N"; /* one year ago*/
    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "N"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

     /* set up key for future nat'l monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "FT"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "Y"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

     /* set up key for prop monthly qtys - two years ago*/

    set FH3REC empty; /* initialize record*/

    FH3REC.XDVCD = "10"; /* division group code*/
    FH3REC.XPRCD = FFWREC.YPGCD; /* type group code*/
    FH3REC.YSMXOT = "PR"; /* order type group code*/
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.XCTCD = "USA "; /* country code*/
    FH3REC.FH1PNAC = "*"; /* nat'l acct flag*/
    FH3REC.XDSCD = "*"; /* direct ship code*/
    TA1REC.TA1PGMNM = "FF0D120"; /* calling process*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat requested*/
      FH3REC.XPCCD = FFWREC.XPCCD; /* category code*/
    else
      FH3REC.XPCCD = FF0DW01.FF2ALCAT; /* category code*/
    end

    if (FF0DW00.FF0DWCTS == 1) /* season one*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM21[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 2) /* season two*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM22[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 3) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM23[FF0DWIX1];
                                   /* end month range*/
    end

    if (FF0DW00.FF0DWCTS == 4) /* season three*/
      FFFREC.FFFBEGMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* beg month range*/
      FFFREC.FFFENDMO = FF0DW01.FF0DWM24[FF0DWIX1];
                                   /* end month range*/
    end

    XSFFS50(); /* Sum FHCAT01 qtys*/

    if (FF0DW00.FF0DWCAT == "Y") /* orig cat*/
      FF0D126(); /* store orig cat qtys*/
    else
      FF0D128(); /* store alt cat qtys*/
    end

    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

  end


end // end FF0D120

// Get user created percentages
Function FF0D121()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* ------------------------------------------------------------*/

  set FFDREC empty;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FF0D123(); /* select vrcmth01 's1'*/
  FF0D124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0DW02.FF0DWUQT[FF0DWIX1] = FFDREC.FFDFDPCT;
      FF0DW02.FF0DWSQT[FF0DWIX1] = FFDREC.FFDFDPCT; /* saved table value*/
      FF0D124(); /* fetch vrcmth01 'n1'*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end
  else
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= 12) /* months in season*/

      FF0DW02.FF0DWUQT[FF0DWIX1] = 0;
      FF0DW02.FF0DWSQT[FF0DWIX1] = 0; /* saved table value*/
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end
  end

  FF0D125(); /* close vrcmth01 'c1'*/
end // end FF0D121

// Calculate Months
Function FF0D122()
   /* ------------------------------------------------------------*/
   /* Calculate each month in a season for one and two years ago*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWCTS == 1) /* season one available*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[1]) /* months in season 1*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[1]; /* work area*/
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW00.FF0DWDT; /* master index*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 1; /* calculate one year ago*/
        FF0DW01.FF0DWM11[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM11[FF0DWIX1] = FF0DW00.FF0DWDT;
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW01.FF0DWM11[FF0DWIX1] + 100;
      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      FF0DW00.FF0DWIX4 = FF0DW00.FF0DWIX4 + 1;
                                   /* increment master range idx*/

    end

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[1]) /* months in season 1*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[1]; /* work area*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 2; /* calculate two years ago*/
        FF0DW01.FF0DWM21[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM21[FF0DWIX1] = FF0DW00.FF0DWDT;
      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end

    if (FF0DW00.FF0DWIX1 <= 12) /* months in season less than 12*/
      while (FF0DW00.FF0DWIX1 <= 12)
        FF0DW01.FF0DWM11[FF0DWIX1] = 0; /* month in season*/
        FF0DW01.FF0DWM12[FF0DWIX1] = 0; /* month in season*/
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0DW00.FF0DWCTS == 2) /* season two available*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[2]) /* months in season 2*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[2]; /* work area*/
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW00.FF0DWDT; /* master index*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 1; /* calculate one year ago*/
        FF0DW01.FF0DWM12[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM12[FF0DWIX1] = FF0DW00.FF0DWDT;
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW01.FF0DWM12[FF0DWIX1] + 100;

      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      FF0DW00.FF0DWIX4 = FF0DW00.FF0DWIX4 + 1;
                                   /* increment master range idx*/

    end

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[2]) /* months in season 2*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[2]; /* work area*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 2; /* calculate two years ago*/
        FF0DW01.FF0DWM22[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM22[FF0DWIX1] = FF0DW00.FF0DWDT;

      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end

    if (FF0DW00.FF0DWIX1 <= 12) /* months in season less than 12*/
      while (FF0DW00.FF0DWIX1 <= 12)
        FF0DW01.FF0DWM12[FF0DWIX1] = 0; /* month in season*/
        FF0DW01.FF0DWM22[FF0DWIX1] = 0; /* month in season*/
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      end
    end
  end

  if (FF0DW00.FF0DWCTS == 3) /* season three available*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[3]) /* months in season 3*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[3]; /* work area*/
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW00.FF0DWDT; /* master index*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 1; /* calculate one year ago*/
        FF0DW01.FF0DWM13[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM13[FF0DWIX1] = FF0DW00.FF0DWDT;
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW01.FF0DWM13[FF0DWIX1] + 100;
      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      FF0DW00.FF0DWIX4 = FF0DW00.FF0DWIX4 + 1;
                                   /* increment master range idx*/

    end

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[3]) /* months in season 3*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[3]; /* work area*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 2; /* calculate two years ago*/
        FF0DW01.FF0DWM23[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM23[FF0DWIX1] = FF0DW00.FF0DWDT;

      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end


    if (FF0DW00.FF0DWIX1 <= 12) /* months in season less than 12*/
      while (FF0DW00.FF0DWIX1 <= 12)
        FF0DW01.FF0DWM13[FF0DWIX1] = 0; /* month in season*/
        FF0DW01.FF0DWM23[FF0DWIX1] = 0; /* month in season*/
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      end
    end
  end


  if (FF0DW00.FF0DWCTS == 4) /* season four  available*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[4]) /* months in season 4*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[4]; /* work area*/
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW00.FF0DWDT; /* master index*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 1; /* calculate one year ago*/
        FF0DW01.FF0DWM14[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM14[FF0DWIX1] = FF0DW00.FF0DWDT;
        FF0DW01.FF0DWMTS[FF0DWIX4] = FF0DW01.FF0DWM14[FF0DWIX1] + 100;
      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      FF0DW00.FF0DWIX4 = FF0DW00.FF0DWIX4 + 1;
                                   /* increment master range idx*/

    end

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[4]) /* months in season 4*/

      if (FF0DW00.FF0DWIX1 == 1) /* first month in season*/
         /* move in season begin month*/
        FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[4]; /* work area*/
        FF0DW00.FF0DWYY = FF0DW00.FF0DWYY - 2; /* calculate two years ago*/
        FF0DW01.FF0DWM24[1] = FF0DW00.FF0DWDT;
      else

        FF0DW00.FF0DWMM = FF0DW00.FF0DWMM + 1; /* increment month by 1*/

         /* if months greater than 12, increment year*/

        if (FF0DW00.FF0DWMM > 12)
          FF0DW00.FF0DWYY = FF0DW00.FF0DWYY + 1;
          FF0DW00.FF0DWMM = FF0DW00.FF0DWMM - 12;
        end

        FF0DW01.FF0DWM24[FF0DWIX1] = FF0DW00.FF0DWDT;

      end

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end


    if (FF0DW00.FF0DWIX1 <= 12) /* months in season less than 12*/
      while (FF0DW00.FF0DWIX1 <= 12)
        FF0DW01.FF0DWM14[FF0DWIX1] = 0; /* month in season*/
        FF0DW01.FF0DWM24[FF0DWIX1] = 0; /* month in season*/
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
      end
    end
  end

end // end FF0D122

// select 's1' vrcmth01
Function FF0D123()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  FFDREC.FFABEGMO = FF0DW01.FF0DWMTS[1];
  FFDREC.FFAENDMO = FF0DW01.FF0DWMTS[12];
  FFFREC.FFFBEGMO = FFDREC.FFABEGMO;
  FFFREC.FFFENDMO = FFDREC.FFAENDMO;

  FFFFUNCD = "S1";

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "123"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D123

// fetch 'n1' vrcmth01
Function FF0D124()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "124"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D124

// close 'c1' vrcmth01
Function FF0D125()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "125"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D125

// Store Orig Cat Historical Qtys
Function FF0D126()
   /* ------------------------------------------------------------*/
   /* Save Original Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/


  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use acutal future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen futures*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW02.FF0DWA11[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB11[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC11[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD11[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW02.FF0DWA12[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB12[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC12[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD12[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW02.FF0DWA13[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB13[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC13[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD13[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW02.FF0DWA14[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB14[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC14[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD14[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW02.FF0DWA21[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB21[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC21[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD21[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW02.FF0DWA22[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB22[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC22[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD22[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW02.FF0DWA23[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB23[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC23[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD23[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW02.FF0DWA24[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW02.FF0DWB24[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW02.FF0DWC24[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW02.FF0DWD24[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use acutal future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen futures*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW02.FF0DWE11[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF11[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG11[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH11[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW02.FF0DWE12[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF12[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG12[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH12[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW02.FF0DWE13[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF13[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG13[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH13[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW02.FF0DWE14[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF14[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG14[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH14[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW02.FF0DWE21[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF21[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG21[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH21[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW02.FF0DWE22[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF22[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG22[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH22[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW02.FF0DWE23[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF23[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG23[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH23[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW02.FF0DWE24[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW02.FF0DWF24[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW02.FF0DWG24[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW02.FF0DWH24[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

      if (FF0DW00.FF0DWCTS == 1) /* season one*/
        FF0DW02.FF0DWI11[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ11[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK11[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW02.FF0DWL11[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 2) /* season two*/
        FF0DW02.FF0DWI12[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ12[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK12[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW02.FF0DWL12[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 3) /* season three*/
        FF0DW02.FF0DWI13[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ13[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK13[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW02.FF0DWL13[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 4) /* season four*/
        FF0DW02.FF0DWI14[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ14[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK14[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW02.FF0DWL14[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0DW00.FF0DWCTS == 1) /* season one*/
        FF0DW02.FF0DWI21[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ21[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK21[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW02.FF0DWL21[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 2) /* season two*/
        FF0DW02.FF0DWI22[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ22[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK22[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW02.FF0DWL22[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 3) /* season three*/
        FF0DW02.FF0DWI23[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ23[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK23[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW02.FF0DWL23[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 4) /* season four*/
        FF0DW02.FF0DWI24[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW02.FF0DWJ24[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW02.FF0DWK24[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW02.FF0DWL24[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0D126

// Get user created % - alt cat
Function FF0D127()
   /* ------------------------------------------------------------*/
   /* Retrieve user created percentages from vrcmth01 for season*/
   /* for alternate category*/
   /* ------------------------------------------------------------*/

  FF0D123(); /* select vrcmth01 's1'*/
  FF0D124(); /* fetch vrcmth01 'n1'*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= 12 /* months in season*/
     && SQLCA.VAGen_SQLCODE == 0)

      FF0DW03.FF0DWAQT[FF0DWIX1] = FFDREC.FFDFDPCT;
      FF0D124(); /* fetch vrcmth01 'n1'*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end
  else
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= 12) /* months in season*/

      FF0DW03.FF0DWAQT[FF0DWIX1] = 0;
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

    end
  end

  FF0D125(); /* close vrcmth01 'c1'*/
end // end FF0D127

// Store Alt Cat Historical Qtys
Function FF0D128()
   /* ------------------------------------------------------------*/
   /* Save Alternate Category Historical Qtys in Working Storage*/
   /* ------------------------------------------------------------*/

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC != "Y") /* non-nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW03.FF0DWA11[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB11[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC11[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD11[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW03.FF0DWA12[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB12[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC12[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD12[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW03.FF0DWA13[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB13[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC13[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD13[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW03.FF0DWA14[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB14[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC14[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD14[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      else

          /* two years ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW03.FF0DWA21[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB21[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC21[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD21[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW03.FF0DWA22[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB22[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC22[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD22[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW03.FF0DWA23[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB23[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC23[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD23[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW03.FF0DWA24[FF0DWIX1] = FH3REC.FH1PAQTY; /* future pre-alloc qty*/
          FF0DW03.FF0DWB24[FF0DWIX1] = FH3REC.FH1ALQTY; /* future alloc qty*/
          FF0DW03.FF0DWC24[FF0DWIX1] = FH3REC.FH2SHP; /* future ship qty*/
          FF0DW03.FF0DWD24[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "FT") /* future data*/
    if (FH3REC.FH1PNAC == "Y") /* nat'l data*/

      if (FFFREC.FFFBEGMO >= 199206) /* Before 199206 use actual future*/
        FH3REC.FH1PAQTY = FH3REC.FH-FRZ-PRAL-QTY; /* Frozen future*/
        FH3REC.FH1ALQTY = FH3REC.FH-FRZ-ALOC-QTY;
        FH3REC.FH2SHP = FH3REC.FH-FRZ-SHP-QTY;
        FH3REC.FH3CNCL = FH3REC.FH-FRZ-CNCL-QTY;
      end

      if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW03.FF0DWE11[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF11[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG11[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH11[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW03.FF0DWE12[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF12[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG12[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH12[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW03.FF0DWE13[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF13[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG13[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH13[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW03.FF0DWE14[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF14[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG14[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH14[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      else

           /* two years ago*/

        if (FF0DW00.FF0DWCTS == 1) /* season one*/
          FF0DW03.FF0DWE21[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF21[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG21[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH21[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 2) /* season two*/
          FF0DW03.FF0DWE22[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF22[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG22[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH22[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 3) /* season three*/
          FF0DW03.FF0DWE23[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF23[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG23[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH23[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

        if (FF0DW00.FF0DWCTS == 4) /* season four*/
          FF0DW03.FF0DWE24[FF0DWIX1] = FH3REC.FH1PAQTY; /* nat'l pre-alloc*/
          FF0DW03.FF0DWF24[FF0DWIX1] = FH3REC.FH1ALQTY;
                                   /* nat'l alloc*/
          FF0DW03.FF0DWG24[FF0DWIX1] = FH3REC.FH2SHP; /* nat'l ship qty*/
          FF0DW03.FF0DWH24[FF0DWIX1] = FH3REC.FH3CNCL; /* nat'l cancel qty*/
        end

      end
    end
  end

  if (FH3REC.YSMXOT == "PR") /* prop data*/
    if (FF0DW00.FF0DWYRF == "Y") /* one year ago*/

      if (FF0DW00.FF0DWCTS == 1) /* season one*/
        FF0DW03.FF0DWI11[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ11[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK11[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW03.FF0DWL11[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 2) /* season two*/
        FF0DW03.FF0DWI12[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ12[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK12[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW03.FF0DWL12[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 3) /* season three*/
        FF0DW03.FF0DWI13[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ13[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK13[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW03.FF0DWL13[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 4) /* season four*/
        FF0DW03.FF0DWI14[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ14[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK14[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW03.FF0DWL14[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

    else

         /* two years ago*/

      if (FF0DW00.FF0DWCTS == 1) /* season one*/
        FF0DW03.FF0DWI21[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ21[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK21[FF0DWIX1] = FH3REC.FH2SHP; /* prop ship qty*/
        FF0DW03.FF0DWL21[FF0DWIX1] = FH3REC.FH3CNCL; /* prop cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 2) /* season two*/
        FF0DW03.FF0DWI22[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ22[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK22[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW03.FF0DWL22[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 3) /* season three*/
        FF0DW03.FF0DWI23[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ23[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK23[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW03.FF0DWL23[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

      if (FF0DW00.FF0DWCTS == 4) /* season four*/
        FF0DW03.FF0DWI24[FF0DWIX1] = FH3REC.FH1PAQTY; /* prop pre-alloc qty*/
        FF0DW03.FF0DWJ24[FF0DWIX1] = FH3REC.FH1ALQTY; /* prop alloc qty*/
        FF0DW03.FF0DWK24[FF0DWIX1] = FH3REC.FH2SHP;
                                   /* future ship qty*/
        FF0DW03.FF0DWL24[FF0DWIX1] = FH3REC.FH3CNCL; /* future cancel qty*/
      end

    end
  end


end // end FF0D128

// Monthly qty calcs - orig cat
Function FF0D130()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for original category*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWCTS == 1) /* season one*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[1]; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[1]) /* months in season*/
     /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD11[FF0DWIX1];
      FF0DW02.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH11[FF0DWIX1];
      FF0DW02.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL11[FF0DWIX1];
      FF0DW02.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ1[FF0DWIX3];
      FF0DW02.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD21[FF0DWIX1];
      FF0DW02.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH21[FF0DWIX1];
      FF0DW02.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL21[FF0DWIX1];
      FF0DW02.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ2[FF0DWIX3];
      FF0DW02.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;

    end
  end

  if (FF0DW00.FF0DWCTS == 2) /* season two*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[2]; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[2]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD12[FF0DWIX1];
      FF0DW02.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH12[FF0DWIX1];
      FF0DW02.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL12[FF0DWIX1];
      FF0DW02.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ1[FF0DWIX3];
      FF0DW02.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD22[FF0DWIX1];
      FF0DW02.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH22[FF0DWIX1];
      FF0DW02.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL22[FF0DWIX1];
      FF0DW02.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ2[FF0DWIX3];
      FF0DW02.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;

    end
  end

  if (FF0DW00.FF0DWCTS == 3) /* season three*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[3]; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD13[FF0DWIX1];
      FF0DW02.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH13[FF0DWIX1];
      FF0DW02.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL13[FF0DWIX1];
      FF0DW02.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ1[FF0DWIX3];
      FF0DW02.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD23[FF0DWIX1];
      FF0DW02.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH23[FF0DWIX1];
      FF0DW02.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL23[FF0DWIX1];
      FF0DW02.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ2[FF0DWIX3];
      FF0DW02.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;

    end
  end

  if (FF0DW00.FF0DWCTS == 4) /* season four*/

    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[4]; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD14[FF0DWIX1];
      FF0DW02.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH14[FF0DWIX1];
      FF0DW02.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL14[FF0DWIX1];
      FF0DW02.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ1[FF0DWIX3];
      FF0DW02.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWA24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWB24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWC24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWD24[FF0DWIX1];
      FF0DW02.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWE24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWF24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWG24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWH24[FF0DWIX1];
      FF0DW02.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWI24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWJ24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWK24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWL24[FF0DWIX1];
      FF0DW02.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWPQ2[FF0DWIX3];
      FF0DW02.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;

    end
  end

  if (FF0DW00.FF0DWIX1 <= 12) /* limit of months in season*/
    FF0D132(); /* move zero qtys and pcts*/
  end


end // end FF0D130

// Clear original cat qtys
Function FF0D132()
  while (FF0DW00.FF0DWIX1 <= 12)

    FF0DW02.FF0DWFP1[FF0DWIX3] = 0; /* future pct*/
    FF0DW02.FF0DWFQ1[FF0DWIX3] = 0; /* future qty*/
    FF0DW02.FF0DWNP1[FF0DWIX3] = 0; /* future nat'l pct*/
    FF0DW02.FF0DWNQ1[FF0DWIX3] = 0; /* future nat'l qty*/
    FF0DW02.FF0DWPP1[FF0DWIX3] = 0; /* prop pct*/
    FF0DW02.FF0DWPQ1[FF0DWIX3] = 0; /* prop qty*/
    FF0DW02.FF0DWTP1[FF0DWIX3] = 0; /* total pct*/
    FF0DW02.FF0DWTQ1[FF0DWIX3] = 0; /* total qty*/
    FF0DW02.FF0DWFP2[FF0DWIX3] = 0; /* future pct*/
    FF0DW02.FF0DWFQ2[FF0DWIX3] = 0; /* future qty*/
    FF0DW02.FF0DWNP2[FF0DWIX3] = 0; /* future nat'l pct*/
    FF0DW02.FF0DWNQ2[FF0DWIX3] = 0; /* future nat'l qty*/
    FF0DW02.FF0DWPP2[FF0DWIX3] = 0; /* prop pct*/
    FF0DW02.FF0DWPQ2[FF0DWIX3] = 0; /* prop qty*/
    FF0DW02.FF0DWTP2[FF0DWIX3] = 0; /* total pct*/
    FF0DW02.FF0DWTQ2[FF0DWIX3] = 0; /* total qty*/

    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1; /* increment index*/

  end


end // end FF0D132

// Seas qty/pcts calcs - orig cat
Function FF0D140()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCTS]; /* season start pos*/
  FF0DW00.FF0DWIX2 = FF0DW01.FF0DWMNS[FF0DWCTS]; /* months in season*/
  FF0DW00.FF0DWIX5 = FF0DW01.FF0DWTOT[FF0DWCTS]; /* season total pos*/
  FF0DW00.FF0DWIX6 = 1; /* month counter*/

  while (FF0DW00.FF0DWIX6 <= FF0DW00.FF0DWIX2) /* months in seasons*/

        /* one year ago*/

    FF0DW02.FF0DWFQ1[FF0DWIX5] = FF0DW02.FF0DWFQ1[FF0DWIX5] +     FF0DW02.FF0DWFQ1[FF0DWIX1];
    FF0DW02.FF0DWNQ1[FF0DWIX5] = FF0DW02.FF0DWNQ1[FF0DWIX5] +     FF0DW02.FF0DWNQ1[FF0DWIX1];
    FF0DW02.FF0DWPQ1[FF0DWIX5] = FF0DW02.FF0DWPQ1[FF0DWIX5] +     FF0DW02.FF0DWPQ1[FF0DWIX1];
    FF0DW02.FF0DWTQ1[FF0DWIX5] = FF0DW02.FF0DWTQ1[FF0DWIX5] +     FF0DW02.FF0DWTQ1[FF0DWIX1];

        /* two years ago*/

    FF0DW02.FF0DWFQ2[FF0DWIX5] = FF0DW02.FF0DWFQ2[FF0DWIX5] +     FF0DW02.FF0DWFQ2[FF0DWIX1];
    FF0DW02.FF0DWNQ2[FF0DWIX5] = FF0DW02.FF0DWNQ2[FF0DWIX5] +     FF0DW02.FF0DWNQ2[FF0DWIX1];
    FF0DW02.FF0DWPQ2[FF0DWIX5] = FF0DW02.FF0DWPQ2[FF0DWIX5] +     FF0DW02.FF0DWPQ2[FF0DWIX1];
    FF0DW02.FF0DWTQ2[FF0DWIX5] = FF0DW02.FF0DWTQ2[FF0DWIX5] +     FF0DW02.FF0DWTQ2[FF0DWIX1];

    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX6 = FF0DW00.FF0DWIX6 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCTS]; /* season start pos*/
  FF0DW00.FF0DWIX6 = 1; /* month counter*/
  while (FF0DW00.FF0DWIX6 <= FF0DW00.FF0DWIX2) /* months in season*/

        /* one year ago*/
        /* calc future pct = month future qty / month demand qty*/

    if (FF0DW02.FF0DWFQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWFQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ1[FF0DWIX1];
      FF0DW02.FF0DWFP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWFP1[FF0DWIX1]));
    end

        /* calc nat'l future pct = month natl fut qty / month dmd qty*/

    if (FF0DW02.FF0DWNQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWNQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ1[FF0DWIX1];
      FF0DW02.FF0DWNP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWNP1[FF0DWIX1]));
    end

        /* calc prop pct = month prop qty / month demand qty*/

    if (FF0DW02.FF0DWPQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWPQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ1[FF0DWIX1];
      FF0DW02.FF0DWPP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWPP1[FF0DWIX1]));
    end

        /* calc total pct = (month fut + natl fut) / month dmd qty*/

    if (FF0DW02.FF0DWFQ1[FF0DWIX1] > 0 /* gt zeroes*/
     || FF0DW02.FF0DWNQ1[FF0DWIX1] > 0)
      if (FF0DW02.FF0DWTQ1[FF0DWIX1] > 0)
        FF0DW00.FF0DWCWK = 0; /* clear work area*/
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ1[FF0DWIX1];
        FF0DW02.FF0DWTP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWTP1[FF0DWIX1]));
      end
    end

        /* two years ago*/

        /* calc future pct = month future qty / month demand qty*/

    if (FF0DW02.FF0DWFQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWFQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ2[FF0DWIX1];
      FF0DW02.FF0DWFP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWFP2[FF0DWIX1]));
    end

        /* calc nat'l future pct = month natl fut qty / month dmd qty*/

    if (FF0DW02.FF0DWNQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWNQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ2[FF0DWIX1];
      FF0DW02.FF0DWNP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWNP2[FF0DWIX1]));
    end

        /* calc prop pct = month prop qty / month demand qty*/

    if (FF0DW02.FF0DWPQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW02.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW02.FF0DWPQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ2[FF0DWIX1];
      FF0DW02.FF0DWPP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWPP2[FF0DWIX1]));
    end

        /* calc total pct = (month fut + natl fut) / month dmd qty*/

    if (FF0DW02.FF0DWFQ2[FF0DWIX1] > 0 /* gt zeroes*/
     || FF0DW02.FF0DWNQ2[FF0DWIX1] > 0)
      if (FF0DW02.FF0DWTQ2[FF0DWIX1] > 0)
        FF0DW00.FF0DWCWK = 0; /* clear work area*/
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW02.FF0DWTQ2[FF0DWIX1];
        FF0DW02.FF0DWTP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW02.FF0DWTP2[FF0DWIX1]));
      end
    end


    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX6 = FF0DW00.FF0DWIX6 + 1; /* increment index*/

  end

   /* ----------------------------------------------------------*/
   /* Calculate Season Pcts*/
   /* ----------------------------------------------------------*/

    /* calc sesn fut pct = sesn fut qty / sesn demand qty*/

  if (FF0DW02.FF0DWFQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWFQ1[FF0DWIX5] * 100;
    FF0DW02.FF0DWFP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                          FF0DW02.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWFP1[FF0DWIX5]));
  end

  if (FF0DW02.FF0DWFQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWFQ2[FF0DWIX5] * 100;
    FF0DW02.FF0DWFP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                          FF0DW02.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWFP2[FF0DWIX5]));
  end

    /* calc sesn natl fut pct = sesn natl fut qty / sesn dmd qty*/

  if (FF0DW02.FF0DWNQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWNQ1[FF0DWIX5] * 100;
    FF0DW02.FF0DWNP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                        FF0DW02.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWNP1[FF0DWIX5]));
  end

  if (FF0DW02.FF0DWNQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWNQ2[FF0DWIX5] * 100;
    FF0DW02.FF0DWNP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                       FF0DW02.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWNP2[FF0DWIX5]));
  end

    /* calc sesn prop pct = sesn prop qty / sesn demand qty*/

  if (FF0DW02.FF0DWPQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWPQ1[FF0DWIX5] * 100;
    FF0DW02.FF0DWPP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                        FF0DW02.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWPP1[FF0DWIX5]));
  end

  if (FF0DW02.FF0DWPQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW02.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW02.FF0DWPQ2[FF0DWIX5] * 100;
    FF0DW02.FF0DWPP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                        FF0DW02.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWPP2[FF0DWIX5]));
  end

   /* Calc sesn total pct = (sesn fut + natl fut) / sesn dmd qty*/

  if (FF0DW02.FF0DWFQ1[FF0DWIX5] > 0 /* gt zeroes*/
   || FF0DW02.FF0DWNQ1[FF0DWIX5] > 0)
    if (FF0DW02.FF0DWTQ1[FF0DWIX5] > 0)
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ1[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ1[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
      FF0DW02.FF0DWTP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                          FF0DW02.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWTP1[FF0DWIX5]));
    end
  end

  if (FF0DW02.FF0DWFQ2[FF0DWIX5] > 0 /* gt zeroes*/
   || FF0DW02.FF0DWNQ2[FF0DWIX5] > 0)
    if (FF0DW02.FF0DWTQ2[FF0DWIX5] > 0)
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWFQ2[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW02.FF0DWNQ2[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
      FF0DW02.FF0DWTP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /                          FF0DW02.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW02.FF0DWTP2[FF0DWIX5]));
    end
  end

end // end FF0D140

// Monthly qty calcs - alt cat
Function FF0D150()
   /* ------------------------------------------------------------*/
   /* Calculations for monthly qtys for alternate category*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWCTS == 1) /* season one*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[1]; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[1]) /* months in season*/
     /* calculate qtys for one season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD11[FF0DWIX1];
      FF0DW03.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH11[FF0DWIX1];
      FF0DW03.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK11[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL11[FF0DWIX1];
      FF0DW03.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ1[FF0DWIX3];
      FF0DW03.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD21[FF0DWIX1];
      FF0DW03.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH21[FF0DWIX1];
      FF0DW03.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK21[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL21[FF0DWIX1];
      FF0DW03.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ2[FF0DWIX3];
      FF0DW03.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;
    end
  end

  if (FF0DW00.FF0DWCTS == 2) /* season two*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[2]; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[2]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD12[FF0DWIX1];
      FF0DW03.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH12[FF0DWIX1];
      FF0DW03.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK12[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL12[FF0DWIX1];
      FF0DW03.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ1[FF0DWIX3];
      FF0DW03.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD22[FF0DWIX1];
      FF0DW03.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH22[FF0DWIX1];
      FF0DW03.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK22[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL22[FF0DWIX1];
      FF0DW03.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ2[FF0DWIX3];
      FF0DW03.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;
    end
  end

  if (FF0DW00.FF0DWCTS == 3) /* season three*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[3]; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[3]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD13[FF0DWIX1];
      FF0DW03.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH13[FF0DWIX1];
      FF0DW03.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK13[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL13[FF0DWIX1];
      FF0DW03.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ1[FF0DWIX3];
      FF0DW03.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD23[FF0DWIX1];
      FF0DW03.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH23[FF0DWIX1];
      FF0DW03.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK23[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL23[FF0DWIX1];
      FF0DW03.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ2[FF0DWIX3];
      FF0DW03.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;
    end
  end

  if (FF0DW00.FF0DWCTS == 4) /* season four*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWIX3 = FF0DW01.FF0DWSTW[4]; /* initialize index*/

    while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMNS[4]) /* months in season*/

       /* calculate qtys for one year ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD14[FF0DWIX1];
      FF0DW03.FF0DWFQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH14[FF0DWIX1];
      FF0DW03.FF0DWNQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK14[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL14[FF0DWIX1];
      FF0DW03.FF0DWPQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ1[FF0DWIX3];
      FF0DW03.FF0DWTQ1[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate qtys for two years ago*/
       /* calculate future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWA24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWB24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWC24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWD24[FF0DWIX1];
      FF0DW03.FF0DWFQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate nat'l future qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWE24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWF24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWG24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWH24[FF0DWIX1];
      FF0DW03.FF0DWNQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate prop qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWI24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWJ24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWK24[FF0DWIX1];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWL24[FF0DWIX1];
      FF0DW03.FF0DWPQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

       /* calculate total qtys*/

      FF0DW00.FF0DWCWK = 0; /* initialize work field*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX3];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWPQ2[FF0DWIX3];
      FF0DW03.FF0DWTQ2[FF0DWIX3] = FF0DW00.FF0DWCWK;

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1;
    end
  end

  if (FF0DW00.FF0DWIX1 <= 12) /* limit of months in season*/
    FF0D152(); /* move zero qtys and pcts*/
  end


end // end FF0D150

// Clear alt cat qtys
Function FF0D152()
  while (FF0DW00.FF0DWIX1 <= 12)

    FF0DW03.FF0DWFP1[FF0DWIX3] = 0; /* future pct*/
    FF0DW03.FF0DWFQ1[FF0DWIX3] = 0; /* future qty*/
    FF0DW03.FF0DWNP1[FF0DWIX3] = 0; /* future nat'l pct*/
    FF0DW03.FF0DWNQ1[FF0DWIX3] = 0; /* future nat'l qty*/
    FF0DW03.FF0DWPP1[FF0DWIX3] = 0; /* prop pct*/
    FF0DW03.FF0DWPQ1[FF0DWIX3] = 0; /* prop qty*/
    FF0DW03.FF0DWTP1[FF0DWIX3] = 0; /* total pct*/
    FF0DW03.FF0DWTQ1[FF0DWIX3] = 0; /* total qty*/
    FF0DW03.FF0DWFP2[FF0DWIX3] = 0; /* future pct*/
    FF0DW03.FF0DWFQ2[FF0DWIX3] = 0; /* future qty*/
    FF0DW03.FF0DWNP2[FF0DWIX3] = 0; /* future nat'l pct*/
    FF0DW03.FF0DWNQ2[FF0DWIX3] = 0; /* future nat'l qty*/
    FF0DW03.FF0DWPP2[FF0DWIX3] = 0; /* prop pct*/
    FF0DW03.FF0DWPQ2[FF0DWIX3] = 0; /* prop qty*/
    FF0DW03.FF0DWTP2[FF0DWIX3] = 0; /* total pct*/
    FF0DW03.FF0DWTQ2[FF0DWIX3] = 0; /* total qty*/
    FF0DW03.FF0DWTQ2[FF0DWIX3] = 0; /* total qty*/

    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX3 = FF0DW00.FF0DWIX3 + 1; /* increment index*/

  end


end // end FF0D152

// Seas qty/pcts calcs - alt cat
Function FF0D160()
   /* ------------------------------------------------------------*/
   /* Perform monthly pcts and season pcts and qtys calculations*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Calculate Season Qtys*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCTS]; /* season start pos*/
  FF0DW00.FF0DWIX2 = FF0DW01.FF0DWMNS[FF0DWCTS]; /* months in season*/
  FF0DW00.FF0DWIX5 = FF0DW01.FF0DWTOT[FF0DWCTS]; /* season total pos*/
  FF0DW00.FF0DWIX6 = 1; /* month counter*/

  while (FF0DW00.FF0DWIX6 <= FF0DW00.FF0DWIX2) /* months in seasons*/

        /* one year ago*/

    FF0DW03.FF0DWFQ1[FF0DWIX5] = FF0DW03.FF0DWFQ1[FF0DWIX5] +     FF0DW03.FF0DWFQ1[FF0DWIX1];
    FF0DW03.FF0DWNQ1[FF0DWIX5] = FF0DW03.FF0DWNQ1[FF0DWIX5] +     FF0DW03.FF0DWNQ1[FF0DWIX1];
    FF0DW03.FF0DWPQ1[FF0DWIX5] = FF0DW03.FF0DWPQ1[FF0DWIX5] +     FF0DW03.FF0DWPQ1[FF0DWIX1];
    FF0DW03.FF0DWTQ1[FF0DWIX5] = FF0DW03.FF0DWTQ1[FF0DWIX5] +     FF0DW03.FF0DWTQ1[FF0DWIX1];

        /* two years ago*/

    FF0DW03.FF0DWFQ2[FF0DWIX5] = FF0DW03.FF0DWFQ2[FF0DWIX5] +     FF0DW03.FF0DWFQ2[FF0DWIX1];
    FF0DW03.FF0DWNQ2[FF0DWIX5] = FF0DW03.FF0DWNQ2[FF0DWIX5] +     FF0DW03.FF0DWNQ2[FF0DWIX1];
    FF0DW03.FF0DWPQ2[FF0DWIX5] = FF0DW03.FF0DWPQ2[FF0DWIX5] +     FF0DW03.FF0DWPQ2[FF0DWIX1];
    FF0DW03.FF0DWTQ2[FF0DWIX5] = FF0DW03.FF0DWTQ2[FF0DWIX5] +     FF0DW03.FF0DWTQ2[FF0DWIX1];

    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX6 = FF0DW00.FF0DWIX6 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate Monthly Pcts*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCTS]; /* season start pos*/
  FF0DW00.FF0DWIX6 = 1; /* month counter*/
  while (FF0DW00.FF0DWIX6 <= FF0DW00.FF0DWIX2) /* months in season*/

        /* one year ago*/
        /* calc future pct = month future qty / month demand qty*/

    if (FF0DW03.FF0DWFQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWFQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ1[FF0DWIX1];
      FF0DW03.FF0DWFP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWFP1[FF0DWIX1]));
    end

        /* calc nat'l future pct = month natl fut qty / month dmd qty*/

    if (FF0DW03.FF0DWNQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWNQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ1[FF0DWIX1];
      FF0DW03.FF0DWNP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWNP1[FF0DWIX1]));
    end

        /* calc prop pct = month prop qty / month demand qty*/

    if (FF0DW03.FF0DWPQ1[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ1[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWPQ1[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ1[FF0DWIX1];
      FF0DW03.FF0DWPP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWPP1[FF0DWIX1]));
    end

        /* calc total pct = (month fut + natl fut) / month dmd qty*/

    if (FF0DW03.FF0DWFQ1[FF0DWIX1] > 0 /* gt zeroes*/
     || FF0DW03.FF0DWNQ1[FF0DWIX1] > 0)
      if (FF0DW03.FF0DWTQ1[FF0DWIX1] > 0)
        FF0DW00.FF0DWCWK = 0; /* clear work area*/
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ1[FF0DWIX1];
        FF0DW03.FF0DWTP1[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWTP1[FF0DWIX1]));
      end
    end

        /* two years ago*/

        /* calc future pct = month future qty / month demand qty*/

    if (FF0DW03.FF0DWFQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWFQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ2[FF0DWIX1];
      FF0DW03.FF0DWFP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWFP2[FF0DWIX1]));
    end

        /* calc nat'l future pct = month natl fut qty / month dmd qty*/

    if (FF0DW03.FF0DWNQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWNQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ2[FF0DWIX1];
      FF0DW03.FF0DWNP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWNP2[FF0DWIX1]));
    end

        /* calc prop pct = month prop qty / month demand qty*/

    if (FF0DW03.FF0DWPQ2[FF0DWIX1] > 0 /* gt zeroes*/
     && FF0DW03.FF0DWTQ2[FF0DWIX1] > 0) /* gt zeroes*/
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW03.FF0DWPQ2[FF0DWIX1] * 100;
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ2[FF0DWIX1];
      FF0DW03.FF0DWPP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWPP2[FF0DWIX1]));
    end

        /* calc total pct = (month fut + natl fut) / month dmd qty*/

    if (FF0DW03.FF0DWFQ2[FF0DWIX1] > 0 /* gt zeroes*/
     || FF0DW03.FF0DWNQ2[FF0DWIX1] > 0)
      if (FF0DW03.FF0DWTQ2[FF0DWIX1] > 0)
        FF0DW00.FF0DWCWK = 0; /* clear work area*/
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX1];
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
        FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK / FF0DW03.FF0DWTQ2[FF0DWIX1];
        FF0DW03.FF0DWTP2[FF0DWIX1] = mathLib.round(FF0DW00.FF0DWCWK / 1, -mathLib.decimals(FF0DW03.FF0DWTP2[FF0DWIX1]));
      end
    end


    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX6 = FF0DW00.FF0DWIX6 + 1; /* increment index*/

  end

   /* ----------------------------------------------------------*/
   /* Calculate Season Pcts*/
   /* ----------------------------------------------------------*/

    /* calc sesn fut pct = sesn fut qty / sesn demand qty*/

  if (FF0DW03.FF0DWFQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWFQ1[FF0DWIX5] * 100;
    FF0DW03.FF0DWFP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWFP1[FF0DWIX5]));
  end

  if (FF0DW03.FF0DWFQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWFQ2[FF0DWIX5] * 100;
    FF0DW03.FF0DWFP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWFP2[FF0DWIX5]));
  end

    /* calc sesn natl fut pct = sesn natl fut qty / sesn dmd qty*/

  if (FF0DW03.FF0DWNQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWNQ1[FF0DWIX5] * 100;
    FF0DW03.FF0DWNP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWNP1[FF0DWIX5]));
  end

  if (FF0DW03.FF0DWNQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWNQ2[FF0DWIX5] * 100;
    FF0DW03.FF0DWNP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWNP2[FF0DWIX5]));
  end

    /* calc sesn prop pct = sesn prop qty / sesn demand qty*/

  if (FF0DW03.FF0DWPQ1[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ1[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWPQ1[FF0DWIX5] * 100;
    FF0DW03.FF0DWPP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWPP1[FF0DWIX5]));
  end

  if (FF0DW03.FF0DWPQ2[FF0DWIX5] > 0 /* gt zeroes*/
   && FF0DW03.FF0DWTQ2[FF0DWIX5] > 0) /* gt zeroes*/
    FF0DW00.FF0DWCWK = 0; /* clear work area*/
    FF0DW00.FF0DWCWK = FF0DW03.FF0DWPQ2[FF0DWIX5] * 100;
    FF0DW03.FF0DWPP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /     FF0DW03.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWPP2[FF0DWIX5]));
  end

   /* Calc sesn total pct = (sesn fut + natl fut) / sesn dmd qty*/

  if (FF0DW03.FF0DWFQ1[FF0DWIX5] > 0 /* gt zeroes*/
   || FF0DW03.FF0DWNQ1[FF0DWIX5] > 0)
    if (FF0DW03.FF0DWTQ1[FF0DWIX5] > 0)
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ1[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ1[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
      FF0DW03.FF0DWTP1[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /       FF0DW03.FF0DWTQ1[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWTP1[FF0DWIX5]));
    end
  end

  if (FF0DW03.FF0DWFQ2[FF0DWIX5] > 0 /* gt zeroes*/
   || FF0DW03.FF0DWNQ2[FF0DWIX5] > 0)
    if (FF0DW03.FF0DWTQ2[FF0DWIX5] > 0)
      FF0DW00.FF0DWCWK = 0; /* clear work area*/
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWFQ2[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK + FF0DW03.FF0DWNQ2[FF0DWIX5];
      FF0DW00.FF0DWCWK = FF0DW00.FF0DWCWK * 100;
      FF0DW03.FF0DWTP2[FF0DWIX5] = mathLib.round(FF0DW00.FF0DWCWK /       FF0DW03.FF0DWTQ2[FF0DWIX5], -mathLib.decimals(FF0DW03.FF0DWTP2[FF0DWIX5]));
    end
  end

end // end FF0D160

// Format and Converse Map
Function FF0D200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWDRF == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0DW00.FF0DWFMF == "Y") /* map must be formatted*/
      FF0D210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  FF0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    FF0DM001.XXXMODID = FFWREC.XXXMODID; /* module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end
                                   /* message number moved to ezemno*/
    set FF0DM001 alarm;
  end

  converse FF0DM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FF0DM001.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* error message number*/
  COMMAREA.CATOAP = FF0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0DM001.CAITEM; /* Application data*/


end // end FF0D200

// Format Data to Display
Function FF0D210()
   /* ------------------------------------------------------------*/
   /* Set map clear*/
   /* ------------------------------------------------------------*/

  set FF0DM001 initial; /* clear screen*/

   /* ------------------------------------------------------------*/
   /* Move category code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0DM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FF0DM001.XPCABRV = FFWREC.XPCABRV; /* category abrv*/

   /* ------------------------------------------------------------*/
   /* Move type group code and abrv to screen*/
   /* ------------------------------------------------------------*/

  FF0DM001.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF0DM001.YPGABRV = FFWREC.YPGABRV; /* type group abrv*/

   /* ------------------------------------------------------------*/
   /* If Alternate category code exists, display it on screen*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWFMF = "N"; /* reset flag*/

  if (FF0DW01.FF2ALCAT != " ") /* alt cat code exists*/
    FF0DM001.FF2ALCAT = FF0DW01.FF2ALCAT; /* alt cat code*/
    FF0DM001.FF0DMACD = FF0DW01.FF0DWACA; /* alt cat abrv*/
  else
    FF0DM001.FF2ALCAT = " "; /* alt cat code*/
    FF0DM001.FF0DMACD = "     "; /* alt cat abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If Historical Indicator already exists and not updated,*/
   /* place an 's' next to the appropriate field on the map.*/
   /* ------------------------------------------------------------*/

  if (FF0DW01.FF0DWIND == "1") /* hist demand eq one yr ago*/
    FF0DM001.FF0DMSEL[1] = "S"; /* set selection code*/
    set FF0DM001.FF0DMSEL[1] cursor; /* set cursor*/
  else
    FF0DM001.FF0DMSEL[1] = " "; /* set selection code*/
  end

  if (FF0DW01.FF0DWIND == "2") /* hist demand eq two yrs ago*/
    FF0DM001.FF0DMSEL[2] = "S"; /* set selection code*/
    set FF0DM001.FF0DMSEL[2] cursor; /* set cursor*/
  else
    FF0DM001.FF0DMSEL[2] = " "; /* set selection code*/
  end

  if (FF0DW01.FF0DWIND == "U") /* hist demand eq user created*/
    FF0DM001.FF0DMSEL[3] = "S"; /* set selection code*/
    set FF0DM001.FF0DMSEL[3] cursor; /* set cursor*/
  else
    FF0DM001.FF0DMSEL[3] = " "; /* set selection code*/
  end

  if (FF0DW00.CACHGFL == "N")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Set selection fields normal*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = 1; /* initialize index*/

  while (FF0DW00.FF0DWIX1 <= 3) /* nbr of selections*/
    set FF0DM001.FF0DMSEL[FF0DWIX1] normal;
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move user percents to screen,Set user percentages normal*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX2 = FF0DW01.FF0DWSTM[FF0DWCUR]; /* init start*/
  if (FF0DW00.FF0DWCMO == 1) /* first page of season*/
    /* next sentence*/
  else
    FF0DW00.FF0DWIX2 = FF0DW01.FF0DWSTM[FF0DWCUR] + 6;
                                   /* add 6 to start*/
  end

  FF0DW00.FF0DWIX1 = 1; /* initialize index map*/
  while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* months on page*/
    if (FF0DW00.FF0DWCAT == "Y") /* original category requested*/
      FF0DM001.FF0DMUQT[FF0DWIX1] = FF0DW02.FF0DWUQT[FF0DWIX2];
      if (FF0DW01.FF2ALCAT == " ") /* no alt cat code exists*/
        set FF0DM001.FF0DMUQT[FF0DWIX1] normal;
      else
        set FF0DM001.FF0DMUQT[FF0DWIX1] skip;
      end
    else
      FF0DM001.FF0DMUQT[FF0DWIX1] = FF0DW03.FF0DWAQT[FF0DWIX2];
      set FF0DM001.FF0DMUQT[FF0DWIX1] skip;
    end
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Move Months in season to map*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWDT = FF0DW01.FF2SEASN[1]; /* work beg date*/
  FF0DW00.FF0DWMNC = FF0DW00.FF0DWMM; /* display month*/
  FF0DW00.FF0DWYRC = FF0DW00.FF0DWYY; /* display year*/
  FF0DM001.FF2SEASN = FF0DW00.FF0DWYMC; /* display date*/
  FF0DW01.FF0DWMBM = FF0DW00.FF0DWYMC; /* save date*/

  if (FF0DW00.FF0DWCUR == 1) /* season one*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWCMO; /* season start positon*/
    FF0DW00.FF0DWIX2 = 1; /* / index  map*/
    while (FF0DW00.FF0DWIX2 <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* months on page*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DW01.FF0DWM11[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO1[FF0DWIX2] = FF0DW01.FF0DWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0DW01.FF0DWDYY = FF0DW01.FF0DWDYY + 1; /* current year*/
      FF0DM001.FF0DMMOU[FF0DWIX2] = FF0DW01.FF0DWDDT; /* user created mo*/
       /* month from 2 years ago*/
      FF0DW00.FF0DWDT = FF0DW01.FF0DWM21[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO2[FF0DWIX2] = FF0DW01.FF0DWDDT; /* two yr ago disp*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1;
    end
  end

  if (FF0DW00.FF0DWCUR == 2) /* season two*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWCMO; /* season start positon*/
    FF0DW00.FF0DWIX2 = 1; /* / index  map*/
    while (FF0DW00.FF0DWIX2 <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* months on page*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DWM12[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO1[FF0DWIX2] = FF0DW01.FF0DWDDT;
                                   /* 1 yr ago disp*/
       /* current year month*/
      FF0DW01.FF0DWDYY = FF0DW01.FF0DWDYY + 1; /* current year month*/
      FF0DM001.FF0DMMOU[FF0DWIX2] = FF0DW01.FF0DWDDT; /* user created mo*/
       /* month from two years ago*/
      FF0DW00.FF0DWDT = FF0DWM22[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO2[FF0DWIX2] = FF0DW01.FF0DWDDT;
                                   /* 2 yr ago disp*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1;
    end
  end

  if (FF0DW00.FF0DWCUR == 3) /* season three*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWCMO; /* season start positon*/
    FF0DW00.FF0DWIX2 = 1; /* / index  map*/
    while (FF0DW00.FF0DWIX2 <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* months on page*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DWM13[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO1[FF0DWIX2] = FF0DW01.FF0DWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0DW01.FF0DWDYY = FF0DW01.FF0DWDYY + 1; /* increment one yr ago*/
      FF0DM001.FF0DMMOU[FF0DWIX2] = FF0DW01.FF0DWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DWM23[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO2[FF0DWIX2] = FF0DW01.FF0DWDDT; /* two yr ago disp*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1;
    end
  end

  if (FF0DW00.FF0DWCUR == 4) /* season four*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWCMO; /* season start positon*/
    FF0DW00.FF0DWIX2 = 1; /* / index  map*/
    while (FF0DW00.FF0DWIX2 <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* months on page*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DWM14[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO1[FF0DWIX2] = FF0DW01.FF0DWDDT; /* one yr ago disp*/
       /* current year month*/
      FF0DW01.FF0DWDYY = FF0DW01.FF0DWDYY + 1; /* increment one yr ago*/
      FF0DM001.FF0DMMOU[FF0DWIX2] = FF0DW01.FF0DWDDT; /* user created mo*/
       /* month from one year ago*/
      FF0DW00.FF0DWDT = FF0DWM24[FF0DWIX1]; /* date work area*/
      FF0DW01.FF0DWDMM = FF0DW00.FF0DWMM; /* display month*/
      FF0DW01.FF0DWDYY = FF0DW00.FF0DWYY; /* display year*/
      FF0DM001.FF0DMMO2[FF0DWIX2] = FF0DW01.FF0DWDDT; /* two yr ago disp*/

      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* If Months in Season LT 6, clear headings on map*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = 1;
  while (FF0DW00.FF0DWIX1 <= 6) /* positions on screen*/
    if (FF0DM001.FF0DMMO1[FF0DWIX1] == " ") /* one yr ago disp*/
      FF0DM001.FF0DMHDG[FF0DWIX1] = " "; /* hdg month*/
      FF0DM001.FF0DMMO1[FF0DWIX1] = " "; /* hdg month*/
      FF0DM001.FF0DMMO2[FF0DWIX1] = " "; /* hdg month*/
      FF0DM001.FF0DMMOU[FF0DWIX1] = " "; /* hdg month*/
      set FF0DM001.FF0DMHDG[FF0DWIX1] invisible, skip;
      set FF0DM001.FF0DMMO1[FF0DWIX1] invisible, skip;
      set FF0DM001.FF0DMMO2[FF0DWIX1] invisible, skip;
      set FF0DM001.FF0DMMOU[FF0DWIX1] invisible, skip;
      FF0DM001.FF0DMFP1[FF0DWIX1] = 0;
      FF0DM001.FF0DMNP1[FF0DWIX1] = 0;
      FF0DM001.FF0DMPP1[FF0DWIX1] = 0;
      FF0DM001.FF0DMTP1[FF0DWIX1] = 0;
      FF0DM001.FF0DMFQ1[FF0DWIX1] = " ";
      FF0DM001.FF0DMNQ1[FF0DWIX1] = " ";
      FF0DM001.FF0DMPQ1[FF0DWIX1] = " ";
      FF0DM001.FF0DMTQ1[FF0DWIX1] = " ";
      FF0DM001.FF0DMFP2[FF0DWIX1] = 0;
      FF0DM001.FF0DMNP2[FF0DWIX1] = 0;
      FF0DM001.FF0DMPP2[FF0DWIX1] = 0;
      FF0DM001.FF0DMTP2[FF0DWIX1] = 0;
      FF0DM001.FF0DMFQ2[FF0DWIX1] = " ";
      FF0DM001.FF0DMNQ2[FF0DWIX1] = " ";
      FF0DM001.FF0DMPQ2[FF0DWIX1] = " ";
      FF0DM001.FF0DMTQ2[FF0DWIX1] = " ";
      FF0DM001.FF0DMUQT[FF0DWIX1] = 0;
      set FF0DM001.FF0DMUQT[FF0DWIX1] initialAttributes;
    else
      FF0DM001.FF0DMHDG[FF0DWIX1] = "PCT  QTY"; /* hdg month*/
    end
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1;
  end

  if (FF0DW01.FF0DWTMP[FF0DWPGN] == "N")
    FF0DM001.FF0DMTT1 = " "; /* no total on page*/
    FF0DM001.FF0DMTM1 = " "; /* no total on page*/
    FF0DM001.FF0DMTT2 = " "; /* no total on page*/
    FF0DM001.FF0DMTM2 = " "; /* no total on page*/
    set FF0DM001.FF0DMTT1 invisible, skip; /* no total on page*/
    set FF0DM001.FF0DMTM1 invisible, skip; /* no total on page*/
    set FF0DM001.FF0DMTT2 invisible, skip; /* no total on page*/
    set FF0DM001.FF0DMTM2 invisible, skip; /* no total on page*/
  else
    FF0DM001.FF0DMTM1 = "TOTAL"; /* total on page*/
    FF0DM001.FF0DMTM2 = "TOTAL"; /* total on page*/
    FF0DM001.FF0DMTT1 = " PCT "; /* total on page*/
    FF0DM001.FF0DMTT2 = " QTY "; /* total on page*/
  end

   /* ------------------------------------------------------------*/
   /* Move requested category's season data to map*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWCAT == "Y") /* original category requested*/

    FF0D212(); /* format original category data*/

  end

  if (FF0DW00.FF0DWCAT == "N") /* alternate category requested*/


    FF0D214(); /* format alternate category data*/

  end


end // end FF0D210

// Move original cat data to map
Function FF0D212()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIXM = 1; /* initialize index map*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCUR]; /* start WS*/

  if (FF0DW00.FF0DWCMO == 1) /* page starts with first month*/
     /* next sentence*/
  else
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 6; /* add 6 to start WS pos*/
  end

  while (FF0DW00.FF0DWIXM <= FF0DW01.FF0DWMPG[FF0DWPGN])
                                   /* max months on page*/
     /* future pct and qty - yr1*/
    FF0DM001.FF0DMFP1[FF0DWIXM] = FF0DW02.FF0DWFP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWFQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMFQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0DM001.FF0DMNP1[FF0DWIXM] = FF0DW02.FF0DWNP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWNQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMNQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0DM001.FF0DMPP1[FF0DWIXM] = FF0DW02.FF0DWPP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWPQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMPQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0DM001.FF0DMTP1[FF0DWIXM] = FF0DW02.FF0DWTP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWTQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMTQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0DM001.FF0DMFP2[FF0DWIXM] = FF0DW02.FF0DWFP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWFQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMFQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0DM001.FF0DMNP2[FF0DWIXM] = FF0DW02.FF0DWNP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWNQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMNQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0DM001.FF0DMPP2[FF0DWIXM] = FF0DW02.FF0DWPP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWPQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMPQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0DM001.FF0DMTP2[FF0DWIXM] = FF0DW02.FF0DWTP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW02.FF0DWTQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMTQ2[FF0DWIXM] = FFXREC.FFXCHAR;

    FF0DW00.FF0DWIXM = FF0DW00.FF0DWIXM + 1; /* increment index*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0DW01.FF0DWTMP[FF0DWPGN] == "N") /* total not on map return*/
    return;
  end

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWTOT[FF0DWCUR];
                                                   /* season total position*/

  FF0DM001.FF0DMMY1 = FF0DW02.FF0DWFP1[FF0DWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWFQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0DM001.FF0DMOY1 = FF0DW02.FF0DWNP1[FF0DWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWNQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0DM001.FF0DMQY1 = FF0DW02.FF0DWPP1[FF0DWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWPQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0DM001.FF0DMSY1 = FF0DW02.FF0DWTP1[FF0DWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWTQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0DM001.FF0DMMY2 = FF0DW02.FF0DWFP2[FF0DWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWFQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0DM001.FF0DMOY2 = FF0DW02.FF0DWNP2[FF0DWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWNQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0DM001.FF0DMQY2 = FF0DW02.FF0DWPP2[FF0DWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWPQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0DM001.FF0DMSY2 = FF0DW02.FF0DWTP2[FF0DWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW02.FF0DWTQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0D212

// Move alternate cat data to map
Function FF0D214()
   /* ------------------------------------------------------------*/
   /* Move season data to map*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIXM = 1; /* initialize index map*/

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWSTW[FF0DWCUR]; /* start WS*/

  if (FF0DW00.FF0DWCMO == 1) /* page starts with first month*/
      /* next sentence*/
  else
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 6; /* add 6 to start WS pos*/
  end

  while (FF0DW00.FF0DWIXM <= FF0DW01.FF0DWMPG[FF0DWPGN])
                                   /* max months on screen*/
     /* future pct and qty - yr1*/
    FF0DM001.FF0DMFP1[FF0DWIXM] = FF0DW03.FF0DWFP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWFQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMFQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr1*/
    FF0DM001.FF0DMNP1[FF0DWIXM] = FF0DW03.FF0DWNP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWNQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMNQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr1*/
    FF0DM001.FF0DMPP1[FF0DWIXM] = FF0DW03.FF0DWPP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWPQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMPQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr1*/
    FF0DM001.FF0DMTP1[FF0DWIXM] = FF0DW03.FF0DWTP1[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWTQ1[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMTQ1[FF0DWIXM] = FFXREC.FFXCHAR;
     /* future pct and qty - yr2*/
    FF0DM001.FF0DMFP2[FF0DWIXM] = FF0DW03.FF0DWFP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWFQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMFQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* nat'l pct and qty - yr2*/
    FF0DM001.FF0DMNP2[FF0DWIXM] = FF0DW03.FF0DWNP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWNQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMNQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* prop pct and qty - yr2*/
    FF0DM001.FF0DMPP2[FF0DWIXM] = FF0DW03.FF0DWPP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWPQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMPQ2[FF0DWIXM] = FFXREC.FFXCHAR;
     /* total pct and qty - yr2*/
    FF0DM001.FF0DMTP2[FF0DWIXM] = FF0DW03.FF0DWTP2[FF0DWIX1];
    set FFXREC empty;
    FFXREC.FFXNUMB = FF0DW03.FF0DWTQ2[FF0DWIX1];
    XSFFS10(); /* convert units to thousands*/
    FF0DM001.FF0DMTQ2[FF0DWIXM] = FFXREC.FFXCHAR;

    FF0DW00.FF0DWIXM = FF0DW00.FF0DWIXM + 1; /* increment index*/
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/

  end

   /* season totals - yr1*/

  if (FF0DW01.FF0DWTMP[FF0DWPGN] == "N") /* total not on map return*/
    return;
  end

  FF0DW00.FF0DWIX1 = FF0DW01.FF0DWTOT[FF0DWCUR]; /* season total pos*/

  FF0DM001.FF0DMMY1 = FF0DW03.FF0DWFP1[FF0DWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWFQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMNY1 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0DM001.FF0DMOY1 = FF0DW03.FF0DWNP1[FF0DWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWNQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMPY1 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0DM001.FF0DMQY1 = FF0DW03.FF0DWPP1[FF0DWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWPQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMRY1 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0DM001.FF0DMSY1 = FF0DW03.FF0DWTP1[FF0DWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWTQ1[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMTY1 = FFXREC.FFXCHAR; /* seas total qty*/

   /* season totals - yr2*/

  FF0DM001.FF0DMMY2 = FF0DW03.FF0DWFP2[FF0DWIX1]; /* seas tot future pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWFQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMNY2 = FFXREC.FFXCHAR; /* seas tot future qty*/

  FF0DM001.FF0DMOY2 = FF0DW03.FF0DWNP2[FF0DWIX1]; /* seas tot nat'l pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWNQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMPY2 = FFXREC.FFXCHAR; /* seas tot nat'l qty*/

  FF0DM001.FF0DMQY2 = FF0DW03.FF0DWPP2[FF0DWIX1];
                                   /* seas tot prop pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWPQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMRY2 = FFXREC.FFXCHAR; /* seas tot prop qty*/

  FF0DM001.FF0DMSY2 = FF0DW03.FF0DWTP2[FF0DWIX1]; /* seas total pct*/
  set FFXREC empty;
  FFXREC.FFXNUMB = FF0DW03.FF0DWTQ2[FF0DWIX1];
  XSFFS10(); /* convert units to thousands*/
  FF0DM001.FF0DMTY2 = FFXREC.FFXCHAR; /* seas total qty*/

end // end FF0D214

// Check Attention Identifier
Function FF0D300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0DW00.FF0DWDRF == "Y") /* data requested*/
      set FF0DW02 empty; /* clear display storage*/
      set FF0DW03 empty; /* clear display storage*/
    end
    COMMAREA.CATOAP = " "; /* clear to application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    FF0DW00.FF0DWDRF = "N"; /* data not requested*/
    FF0DW00.FF0DWFMF = "Y"; /* format the map*/
    exit stack; /* return to show error msg*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSFFS01();
      set FF0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(36); /* 'PF Keys not valid with Fast Path'*/
      FFWREC.XXXMODID = "300"; /* module identification*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If PF1 is pressed, go to HELP screen*/
   /* If PF5 is pressed, go to Production Menu*/
   /* If PF14 is pressed, go to FF0D*/
   /* If PF15 is pressed, go to FF0R*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* pf3 was pressed*/
   || converseVar.eventKey is pf5  /* pf5 was pressed*/
   || converseVar.eventKey is pf13 /* pf13 was pressed*/
   || converseVar.eventKey is pf15) /* pf15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0DM001"; /* APPLICATION FIND CODE*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "FF0A";
    end

    if (converseVar.eventKey is pf13) /* pf13 was pressed*/
      COMMAREA.CATOAP = "FF0M"; /* Season Pcts*/
    end

    if (converseVar.eventKey is pf15) /* pf15 was pressed*/
      COMMAREA.CATOAP = "FF0R"; /* Prop Pcts*/
    end

    XSFFS01();
    exit stack;

  end

  if (converseVar.eventKey is pf10 /* pf10 was pressed*/
   || converseVar.eventKey is pf11 /* pf11 was pressed*/
   || converseVar.eventKey is pf16 /* pf16 was pressed*/
   || converseVar.eventKey is pf17) /* pf17 was pressed*/
    return;
  end

  if (converseVar.eventKey not enter) /* enter was not pressed*/

    converseLib.validationFailed(3); /* Indicate PF key not valid*/
    FFWREC.XXXMODID = "300"; /* Process name*/
    if (converseVar.eventKey is pa1 /* pa1 was pressed*/
     || converseVar.eventKey is pa3) /* pa3 was pressed*/
      converseLib.clearScreen();
      
    end

    exit stack;

  end


end // end FF0D300

// Reset Highlighted Fields
Function FF0D400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0DM001.XPCCD initialAttributes; /* category code*/
  set FF0DM001.YPGCD initialAttributes; /* type grp code*/
  set FF0DM001.FF2SEASN initialAttributes; /* season beg month*/
  set FF0DM001.FF2ALCAT initialAttributes; /* alternate category code*/

  FF0DW00.FF0DWIXM = 1; /* Initialize map index*/

  while (FF0DW00.FF0DWIXM <= 3) /* number of selection codes*/
    set FF0DM001.FF0DMSEL[FF0DWIXM] normal; /* selection*/
    FF0DW00.FF0DWIXM = FF0DW00.FF0DWIXM + 1; /* increment index*/
  end

  FF0DW00.FF0DWIXM = 1; /* Initialize map index*/

  while (FF0DW00.FF0DWIXM <= FF0DW01.FF0DWMPG[FF0DWPGN]) /* reset user %'s*/
    if (FF0DW00.FF0DWCAT == "Y") /* original cat requested*/
      if (FF0DM001.FF2ALCAT == " ") /* no alt cat exists*/
        set FF0DM001.FF0DMUQT[FF0DWIXM] normal;
      else
        set FF0DM001.FF0DMUQT[FF0DWIXM] skip;
      end
    else
      set FF0DM001.FF0DMUQT[FF0DWIXM] skip;
    end
    FF0DW00.FF0DWIXM = FF0DW00.FF0DWIXM + 1; /* increment index*/
  end

  set FF0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0DM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to previous process*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.XPCCD == "?" /* category code list requested*/
   || FF0DM001.YPGCD == "?") /* type group code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      FFWREC.XXXMSGNO = 116; /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0DM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0DM001.XPCABRV = FFWREC.XPCABRV; /* Description*/
    else
      FF0DM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0DM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Description*/

    end

    set FF0DM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Type Group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.YPGCD == "?") /* Type Group list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0DM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0DM001.YPGABRV = FFWREC.YPGABRV; /* Description*/
    else
      FF0DM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0DM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/

    end

    set FF0DM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested list has been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  FFWREC.XXXMSGNO = 97; /* Indicate press ENTER*/

  exit stack;


end // end FF0D400

// Verify the entered data
Function FF0D500()
   /* ------------------------------------------------------------*/
   /* Edit Item (if entered)*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* item entered*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    set FF0DM001.CAITEM cursor, bold; /* set cursor*/
    converseLib.validationFailed(40); /* 'Enter only with Option'*/
  end

  if (FF0DW00.FF0DWPGN == 0) /* default page first time*/
    FF0DW00.FF0DWPGN = 1;
  end
   /* ------------------------------------------------------------*/
   /* Reset modified fields flags*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWDMF = "N"; /* reset data modified flag*/

   /* ------------------------------------------------------------*/
   /* If Data fields were modified, set flag.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0DM001.YPGCD != FFWREC.YPGCD /* type group code changed*/
   || FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT) /* alt category code changed*/
    FF0DW00.FF0DWDMF = "Y"; /* data modified*/
  end

  FF0DW00.FF0DWUPR = "N"; /* update not requested*/

  if (FF0DM001.FF0DMSEL[1] == "S"
   && FF0DW01.FF2FUIND != "1")
    FF0DW01.FF0DWIND = "1"; /* map save*/
    FF0DW00.FF0DWUPR = "Y"; /* update requested*/
    FF0DW00.FF0DWDMF = "Y"; /* data modified*/
  else
    if (FF0DM001.FF0DMSEL[2] == "S"
     && FF0DW01.FF2FUIND != "2")
      FF0DW01.FF0DWIND = "2"; /* map save*/
      FF0DW00.FF0DWUPR = "Y"; /* update requested*/
      FF0DW00.FF0DWDMF = "Y"; /* data modified*/
    else
      if (FF0DM001.FF0DMSEL[3] == "S"
       && FF0DW01.FF2FUIND != "U")
        FF0DW01.FF0DWIND = "U"; /* map save*/
        FF0DW00.FF0DWUPR = "Y"; /* update requested*/
      else
        FF0DW01.FF0DWIND = FF0DW01.FF2FUIND; /* reset*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save user created percentages in working storage*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWCUR > 0) /* data has been obtained*/
    FF0DW00.FF0DWIX2 = FF0DW01.FF0DWSTM[FF0DWCUR]; /* init WS start*/

    if (FF0DW00.FF0DWCMO == 1) /* at start of season*/
        /* next sentence*/
    else
      FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 6; /* add 6 to index*/
    end

    if (FF0DW00.FF0DWCAT == "Y") /* original cat requested*/
      FF0DW00.FF0DWIX1 = 1; /* initialize index*/
      while (FF0DW00.FF0DWIX1 <= FF0DW01.FF0DWMPG[FF0DWPGN])
                                   /* number of months on page*/
        if (FF0DM001.FF0DMUQT[FF0DWIX1] != FF0DW02.FF0DWSQT[FF0DWIX2]
         && FF0DM001.FF0DMSEL[3] == "S")
          FF0DW00.FF0DWUPR = "Y"; /* update requested*/
        end
        if (FF0DM001.FF0DMUQT[FF0DWIX1] != FF0DW02.FF0DWUQT[FF0DWIX2])
          FF0DW02.FF0DWUQT[FF0DWIX2] = FF0DM001.FF0DMUQT[FF0DWIX1];
        end
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
        FF0DW00.FF0DWIX2 = FF0DW00.FF0DWIX2 + 1; /* increment index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF10 (scroll left) or PF11 (scroll right) were pressed,*/
   /* verify that the scroll request is valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FF0DW00.FF0DWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data modified'*/

    else

      if (FF0DW00.FF0DWPGN < 2) /* and no previous pages*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(23); /* 'data at border'*/
      end
    end
  end

  if (converseVar.eventKey is pf11) /* Scroll right request*/
    if (FF0DW00.FF0DWDMF == "Y") /* Data modified*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(5); /* 'Scrolling not allowed when data modified'*/

    else

      if (FF0DW00.FF0DWPGN >= FF0DW00.FF0DWMXP) /* on max page now*/
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(24); /* No more pages to display*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify that all selection codes are 's' or ' '.*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWIX1 = 3; /* initialize index*/
  FF0DW00.FF0DWSCT = 0; /* initialize counter*/

  while (FF0DW00.FF0DWIX1 > 0)
    if (FF0DM001.FF0DMSEL[FF0DWIX1] == "S")
      FF0DW00.FF0DWSCT = FF0DW00.FF0DWSCT + 1; /* increment selection cnt*/
    else
      if (FF0DM001.FF0DMSEL[FF0DWIX1] != " ") /* not equal space*/
        converseLib.validationFailed(41); /* 'must be s or space'*/
        FFWREC.XXXMODID = "500"; /* module identification*/
        set FF0DM001.FF0DMSEL[FF0DWIX1] cursor, bold; /* set cursor*/
      end
    end
    FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* If selection was made, verify that only one indicator was*/
   /* chosen. If more than one chosen, display error message*/
   /* ------------------------------------------------------------*/

  if (FF0DW00.FF0DWSCT > 1)
    converseLib.validationFailed(73); /* 'Only one option may be chosen'*/
    FFWREC.XXXMODID = "500"; /* module identification*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW00.FF0DWFSF = "Y"; /* first selection flag*/
    while (FF0DW00.FF0DWIX1 <= 3)
      if (FF0DM001.FF0DMSEL[FF0DWIX1] == "S") /* selection made*/
        if (FF0DW00.FF0DWFSF == "Y") /* selection made*/
          FF0DW00.FF0DWFSF = "N";
        else
          set FF0DM001.FF0DMSEL[FF0DWIX1] cursor, bold; /* set cursor*/
        end
      end
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    end
  end
   /* ------------------------------------------------------------*/
   /* If Alternate Category code has been changed and isn't*/
   /* a space, verify it's validity.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT /* alternate category changed*/
   && FF0DM001.FF2ALCAT != " ")             /* alternate category not space*/
    FF0D510(); /* Verify alt cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* If Type Group code has been changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.YPGCD != FFWREC.YPGCD) /* Type Group code changed*/
    if (FF0DM001.YPGCD in YPGTBL.YPGCD           /* if code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* status is active*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* valid for forecasting*/
      FF0DM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* move abrv to map*/
    else
      FF0DM001.YPGABRV = " "; /* clear description*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0DM001.YPGCD cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If Category code has changed, verify its validity.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.XPCCD != FFWREC.XPCCD) /* Category code changed*/
    FF0D520(); /* Verify orig cat for ftwr fcstg*/
  end

   /* ------------------------------------------------------------*/
   /* if PF16 was pressed, the alternate category code must*/
   /* be present; otherwise, display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    if (FF0DM001.FF2ALCAT == " ") /* alternate category not entered*/
      converseLib.validationFailed(150); /* ' alternate category code not*/
                                   /* entered'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0DM001.FF2ALCAT cursor, bold; /* set cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF16 or PF17 was pressed and data was changed, display*/
   /* error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   || converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (FF0DW00.FF0DWDMF == "Y") /* data was modified*/
      converseLib.validationFailed(111);
                                   /* 'function not allowed - data changed'*/
      FFWREC.XXXMODID = "500"; /* module identification*/

      FF0DW00.FF0DWIX1 = 3; /* initialize index*/
      while (FF0DW00.FF0DWIX1 > 0)
        if (FF0DM001.FF0DMSEL[FF0DWIX1] != FF0DW01.FF0DWSEL[FF0DWIX1])
          set FF0DM001.FF0DMSEL[FF0DWIX1] cursor, bold; /* set cursor*/
        end
        FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 - 1; /* decrement index*/
      end

      if (FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT)
                                   /* alt category code changed*/
        set FF0DM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
      if (FF0DM001.FF2SEASN != FF0DW01.FF0DWMBM) /* beg month changed*/
        set FF0DM001.FF2SEASN cursor, bold; /* set cursor*/
      end
      if (FF0DM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
        set FF0DM001.YPGCD cursor, bold; /* set cursor*/
      end
      if (FF0DM001.XPCCD != FFWREC.XPCCD) /* category code changed*/
        set FF0DM001.XPCCD cursor, bold; /* set cursor*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if Category code or type group were not entered on screen*/
   /* highlight appropriate field and display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/

    if (FF0DM001.YPGCD == " ") /* Type Group code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0DM001.YPGCD cursor, bold; /* set cursor*/
    end

    if (FF0DM001.XPCCD == " ") /* Category code not entered*/
      converseLib.validationFailed(8); /* 'Required field, please enter'*/
      FFWREC.XXXMODID = "500"; /* module identification*/
      set FF0DM001.XPCCD cursor, bold; /* set cursor*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If user created %'s modified check for all seasons = 100%*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.FF0DMSEL[3] == "S"
   && converseVar.eventKey is enter)
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    FF0DW01.FF0DWNMX = 0; /* reset percentage accumulator*/
    while (FF0DW00.FF0DWIX1 <= 12)
      if (FF0DM001.FF2ALCAT == " ") /* no alt cat chosen*/
        FF0DW01.FF0DWNMX = FF0DW01.FF0DWNMX + FF0DW02.FF0DWUQT[FF0DWIX1];
      else
        FF0DW01.FF0DWNMX = FF0DW01.FF0DWNMX + FF0DW03.FF0DWAQT[FF0DWIX1];
      end
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    end
    if (FF0DW01.FF0DWNMX <= 0) /* user created % not gt 0*/
      if (FF0DM001.FF2ALCAT == " ") /* no alt cat chosen*/
        if (FF0DW00.FF0DWCAT == "Y") /* original cat requested*/
          set FF0DM001.FF0DMUQT[1] cursor;
          converseLib.validationFailed(385); /* user created percents must be > 0*/
          FFWREC.XXXMODID = "500"; /* module identification*/
        else
          set FF0DM001.FF0DMSEL[3] cursor;
          converseLib.validationFailed(388); /* orig cat user created index invalid*/
          FFWREC.XXXMODID = "500"; /* module identification*/
        end
      else
        FF0DM001.FF0DMSEL[1] = "S"; /* alt index invalid reset to 1*/
        FF0DM001.FF0DMSEL[3] = " ";
        FF0DW01.FF0DWIND = "1"; /* map save*/
        FF0DW00.FF0DWUPR = "Y"; /* update requested*/
        FFWREC.XXXMSGNO = 387; /* indicate reset to 1 after update*/
        FFWREC.XXXMODID = "500"; /* module identification*/
        set FF0DM001.FF0DMSEL[1] cursor;
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* if error has occured, flow to redisplay map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


end // end FF0D500

// Verify alt cat for FF
Function FF0D510()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0DM001.FF2ALCAT; /* alt cat code*/
  FF2REC.YPGCD = FF0DM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0DM001.FF2ALCAT;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0DM001.FF0DMACD = XPCTBL.XPCABRV[sysVar.arrayIndex];
        set FFDREC empty;
        FFDREC.XPCCD = FF0DM001.FF2ALCAT;
        FF0D127(); /* get user created %'s for alt cat*/
      else
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "510"; /* module identification*/
        set FF0DM001.FF2ALCAT cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "510"; /* module identification*/
      set FF0DM001.FF2ALCAT cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "510"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0D510

// Verify orig cat for FF
Function FF0D520()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area*/
   /* Set up key - Footwear Forecast XREF Table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* initialize record*/

  FF2REC.XPCCD = FF0DM001.XPCCD; /* orig cat code*/
  FF2REC.YPGCD = FF0DM001.YPGCD; /* type group*/
  FF2REC.YSMXDV = "10"; /* division group code*/
  FF2REC.XPLCD = "*"; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select requested row from table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      XPCREC.XPCCD = FF0DM001.XPCCD;
      XPCREC.XGPCD = COMMAREA.XGPCD;
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* if code in table*/
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
        FF0DM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
        FF0DW00.FF0DWNCF = "Y"; /* new cat requested*/
      else
        FF0DM001.XPCABRV = "      ";
        converseLib.validationFailed(10); /* 'invalid value entered'*/
        FFWREC.XXXMODID = "520"; /* module identification*/
        set FF0DM001.XPCCD cursor, bold; /* set cursor*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
      FF0DM001.XPCABRV = "      ";
      converseLib.validationFailed(10); /* 'invalid value entered'*/
      FFWREC.XXXMODID = "520"; /* module identification*/
      set FF0DM001.XPCCD cursor, bold; /* set cursor*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0D520

// Process Valid Input Request
Function FF0D600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be formatted*/
   /* ------------------------------------------------------------*/

  FF0DW00.FF0DWFMF = "Y"; /* Format map*/

   /* ------------------------------------------------------------*/
   /* If PF10, decrement the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    if (FF0DW00.FF0DWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0DW00.FF0DWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0DW01.FF0DWMNS[FF0DWCUR] > 6) /* current season longer than 6*/
      if (FF0DW01.FF0DWTMP[FF0DWPGN] == "Y") /* total on current page*/
        FF0DW00.FF0DWCMO = 1; /* season start month*/
        FF0DW00.FF0DWPGN = FF0DW00.FF0DWPGN - 1; /* subtract 1 curr page*/
      else
        FF0DW00.FF0DWCUR = FF0DW00.FF0DWCUR - 1;
                                   /* sub 1 from curr season*/
        FF0DW00.FF0DWPGN = FF0DW00.FF0DWPGN - 1; /* subtract 1 curr page*/
        if (FF0DW01.FF0DWMNS[FF0DWCUR] > 6) /* prev season longer than 6*/
          FF0DW00.FF0DWCMO = 7; /* season start month*/
        else
          FF0DW00.FF0DWCMO = 1; /* season start month*/
        end
      end
    else
      FF0DW00.FF0DWCUR = FF0DW00.FF0DWCUR - 1; /* sub 1 from curr season*/
      FF0DW00.FF0DWPGN = FF0DW00.FF0DWPGN - 1; /* subtract 1 curr page*/
      if (FF0DW01.FF0DWMNS[FF0DWCUR] > 6) /* prev season longer than 6*/
        FF0DW00.FF0DWCMO = 7; /* season start month*/
      else
        FF0DW00.FF0DWCMO = 1; /* season start month*/
      end
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF11, increment the page requested and return to the*/
   /* calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    if (FF0DW00.FF0DWCAT == "Y") /* original category data*/
      FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    else
      if (FF0DW00.FF0DWCAT == "N") /* alternate category data*/
        FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
      end
    end
    if (FF0DW01.FF0DWTMP[FF0DWPGN] == "Y") /* total on current page*/
      FF0DW00.FF0DWCUR = FF0DW00.FF0DWCUR + 1; /* add 1 curr season*/
      FF0DW00.FF0DWCMO = 1; /* season start month*/
      FF0DW00.FF0DWPGN = FF0DW00.FF0DWPGN + 1; /* add 1 curr page*/
    else
      FF0DW00.FF0DWPGN = FF0DW00.FF0DWPGN + 1; /* add 1 curr page*/
      FF0DW00.FF0DWCMO = 7; /* season start month*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF16 was pressed, display alternate category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* pf16 was pressed*/

    FF0DW00.FF0DWCAT = "N"; /* set for alternate cat data*/
    FF0DW00.FF0DWPGN = 1; /* set page nbr*/
    FF0DW00.FF0DWCUR = 1; /* set current season*/
    FF0DW00.FF0DWCMO = 1; /* season start month*/
    FFWREC.XXXMSGNO = 163; /* 'viewing alt category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If PF17 was pressed, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* pf17 was pressed*/

    FF0DW00.FF0DWCAT = "Y"; /* set for original cat data*/
    FF0DW00.FF0DWPGN = 1; /* set page nbr*/
    FF0DW00.FF0DWCUR = 1; /* set current season*/
    FF0DW00.FF0DWCMO = 1; /* season start month*/
    FFWREC.XXXMSGNO = 162; /* 'viewing original category data'*/
    FFWREC.XXXMODID = "600"; /* module identification*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system COMMAREA.*/
   /* ------------------------------------------------------------*/
  if (FF0DM001.XPCCD != FFWREC.XPCCD /* category code changed*/
   || FF0DM001.YPGCD != FFWREC.YPGCD) /* type group code changed*/
    FFWREC.XPCCD = FF0DM001.XPCCD; /* category code*/
    FFWREC.YPGCD = FF0DM001.YPGCD; /* type group code*/
    FFWREC.XPCABRV = FF0DM001.XPCABRV; /* category abrv*/
    FFWREC.YPGABRV = FF0DM001.YPGABRV; /* type abrv*/
    FF0DW01.FF0DWMBM = FF0DM001.FF2SEASN; /* map beg month*/
    FF0DW01.FF2ALCAT = FF0DM001.FF2ALCAT; /* alt cat code*/
    FF0DW01.FF0DWACA = FF0DM001.FF0DMACD; /* alt cat abrv*/
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/
    if (FF0DM001.XPCCD != " " /* cat entered*/
     && FF0DM001.YPGCD != " ") /* & type grp entered*/
      FF0DW00.FF0DWDRF = "Y"; /* data requested*/
    else
      FF0DW00.FF0DWDRF = "N"; /* data requested*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If alternate category or history future indicator were*/
   /* changed, perform update and display data.*/
   /* ------------------------------------------------------------*/

  if (FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT /* alternate category changed*/
   || FF0DW00.FF0DWUPR == "Y")              /* update requested*/
    FF0D610(); /* update table row*/
    FF0DW01.FF2ALCAT = FF0DM001.FF2ALCAT; /* alt cat code*/
    if (FFWREC.XXXMSGNO == 0)
      FFWREC.XXXMSGNO = 032; /* 'update successful'*/
      FFWREC.XXXMODID = "600"; /* module identification*/
    end
    /* ------------------------------------------------------------*/
     /* commit all changes to protected resources*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/

    FF0DW00.FF0DWDRF = "Y"; /* data requested*/
  end

  FF0D620(); /* set data to display*/


end // end FF0D600

// update range table data
Function FF0D605()

  set FFCREC empty;

  FFCREC.FFABEGMO = FF0DW01.FF0DWMTS[1]; /* beg month in range*/
  FFCREC.FFAENDMO = FF0DW01.FF0DWMTS[12]; /* end month in range*/

  FF0D606(); /* select dfcast.vrcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCFDIND != "U")
      FF0D607(); /* update dfcast.vrcat001 row*/
    end
    FFDREC.XPCCD = FFWREC.XPCCD;
    FF0D123(); /* select 's1' dfcast.vrcmth01*/
    FF0D124(); /* fetch 'n1' dfcast.vrcmth01*/
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      if (FF0DW02.FF0DWUQT[FF0DWIX1] != FFDREC.FFDFDPCT)
        FFDREC.FFDFDPCT = FF0DW02.FF0DWUQT[FF0DWIX1];
        FF0DW02.FF0DWSQT[FF0DWIX1] = FF0DW02.FF0DWUQT[FF0DWIX1];
        FF0D611(); /* update dfcast.vrcmth01*/
      end
      FF0D124(); /* fetch 'n1' dfcast.vrcmth01*/
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    end
    FF0D125(); /* close 'c1' dfcast.vrcmth01*/
  else
    FF0D612(); /* add dfcast.vrcat001 row*/
    set FFDREC empty;
    FFDREC.FFABEGMO = FFCREC.FFABEGMO;
    FFDREC.FFAENDMO = FFCREC.FFAENDMO;
    FF0DW00.FF0DWIX1 = 1; /* initialize index*/
    while (FF0DW00.FF0DWIX1 <= 12
     && SQLCA.VAGen_SQLCODE == 0)
      FFDREC.FFDFDPCT = FF0DW02.FF0DWUQT[FF0DWIX1];
      FF0DW02.FF0DWSQT[FF0DWIX1] = FF0DW02.FF0DWUQT[FF0DWIX1];
      FF0D613(); /* add dfcast.vrcmth01 row*/
      FF0DW00.FF0DWIX1 = FF0DW00.FF0DWIX1 + 1; /* increment index*/
    end
  end
end // end FF0D605

// select vrcat001
Function FF0D606()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "606"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D606

// update vrcat001
Function FF0D607()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCFDIND = "U"; /* user created data indicator*/

  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0DW00.FF0DWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "607"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "607"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D607

// update table row vffxrf01
Function FF0D610()
   /* ------------------------------------------------------------*/
   /* Set record to original category data*/
   /* ------------------------------------------------------------*/

  set FF2REC empty;
  FF2REC.FF2GROUP = FF0DW01.FF2GROUP;

   /* ------------------------------------------------------------*/
   /* Obtain current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  FF2REC.FF2ALCAT = FF0DM001.FF2ALCAT; /* alternate cat code*/

  if (FF0DM001.FF0DMSEL[1] == "S") /* one year ago selected*/
    FF2REC.FF2FUIND = "1"; /* demand indicator*/
    FF0DW01.FF2FUIND = "1"; /* saved demand indicator*/
  end

  if (FF0DM001.FF0DMSEL[2] == "S") /* one year ago selected*/
    FF2REC.FF2FUIND = "2"; /* demand indicator*/
    FF0DW01.FF2FUIND = "2"; /* saved demand indicator*/
  end

  if (FF0DM001.FF0DMSEL[3] == "S") /* one year ago selected*/
    FF2REC.FF2FUIND = "U"; /* demand indicator*/
    FF0DW01.FF2FUIND = "U"; /* saved demand indicator*/
    if (FF0DW00.FF0DWCAT == "Y" /* original category requested*/
     && FF0DM001.FF2ALCAT == " ") /* alternate cat code does not exist*/
      FF0D605(); /* update vrcmth01 with percents*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Update Cross Reference Table Row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* database updated by another user*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes made by user*/
        FF0DW00.FF0DWDRF = "Y"; /* data requested*/
        exit stack; /* Exit to display map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* database currently in use*/
    converseLib.validationFailed(47); /* 'database currently in use'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback changes made by user*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.validationFailed(01); /* error, notify progamming staff*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  FFWREC.XXXMODID = "610"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0D610

// update vrcmth01
Function FF0D611()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.FF4FCTMO = FF0DW01.FF0DWMTS[FF0DWIX1]; /* move fcst month*/

  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0DW00.FF0DWDRF = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "611"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0D611

// add vrcat001
Function FF0D612()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  FFCREC.FFCFDIND = "U"; /* set user created indicator*/

  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D612

// add vrcmth01
Function FF0D613()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;
  FFDREC.FF4FCTMO = FF0DW01.FF0DWMTS[FF0DWIX1];

  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0D613

// determine data request
Function FF0D620()
   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to spaces, display original category data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0DW00.FF0DWCAT == "N") /* alternate category displayed*/
      if (FF0DM001.FF2ALCAT == " ") /* alt category code spaces*/
        FF0DW00.FF0DWPGN = 1; /* first season - orig cat*/
        FF0DW00.FF0DWCUR = 1; /* current season*/
        FF0DW00.FF0DWCMO = 1; /* season start month*/
        FF0DW00.FF0DWCAT = "Y"; /* orig cat requested*/
        FF0DW00.FF0DWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing alternate category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0DW00.FF0DWCAT == "N") /* alternate category displayed*/
      if (FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT) /* alt cat changed*/
        FF0DW00.FF0DWPGN = 1; /* first season - alt cat*/
        FF0DW00.FF0DWCUR = 1; /* current season*/
        FF0DW00.FF0DWCMO = 1; /* season start month*/
        FF0DW00.FF0DWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If viewing original category and alternate category code*/
   /* changed to non-spaces, exit to obtain data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (FF0DW00.FF0DWCAT == "Y") /* original cat data displayed*/
      if (FF0DM001.FF2ALCAT != FF0DW01.FF2ALCAT
       && FF0DM001.FF2ALCAT != " ") /* alt category code spaces*/
        FF0DW00.FF0DWPGN = 1; /* first season - orig cat*/
        FF0DW00.FF0DWCUR = 1; /* current season*/
        FF0DW00.FF0DWCMO = 1; /* season start month*/
        FF0DW00.FF0DWDRF = "Y"; /* data requested*/
        return;
      end
    end
  end


end // end FF0D620

//*** RECORD=FF0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// FF135 - 11/19/90 MDANGE
// Added FF0DWIX4 - index for master range of months
// ***********************
Record FF0DW00 type basicRecord
  10 FF0DWFMF FF0DWFMF ; 
  10 FF0DWDRF FF0DWDRF ; 
  10 FF0DWDMF FF0DWDMF ; 
  10 FF0DWBMF FF0DWBMF ; 
  10 FF0DWBMA FF0DWBMA ; 
  10 FF0DWFSF FF0DWFSF ; 
  10 FF0DWUPR FF0DWUPR ; 
  10 FF0DWNCF FF0DWNCF ; 
  10 FF0DWYRF FF0DWYRF ; 
  10 FF0DWRCT FF0DWRCT ; 
  10 FF0DWSCT FF0DWSCT ; 
  10 FF0DWCTS FF0DWCTS ; 
  10 FF0DWCMO FF0DWCMO ; 
  10 FF0DWCUR FF0DWCUR ; 
  10 FF0DWMXP FF0DWMXP ; 
  10 FF0DWCMS FF0DWCMS ; 
  10 FF0DWPGN FF0DWPGN ; 
  10 FF0DWCAT FF0DWCAT ; 
  10 FF0DWCWK FF0DWCWK ; 
  10 FF0DWCDT FF0DWCDT ; 
    15 FF0DWYMC FF0DWYMC ; 
      20 FF0DWYRC FF0DWYRC ; 
      20 FF0DWMNC FF0DWMNC ; 
    15 FF0DWDAY FF0DWDAY ; 
  10 FF0DWDT FF0DWDT ; 
    15 FF0DWYY FF0DWYY ; 
    15 FF0DWMM FF0DWMM ; 
  10 FF0DWIX1 FF0DWIX1 ; 
  10 FF0DWIX2 FF0DWIX2 ; 
  10 FF0DWIX3 FF0DWIX3 ; 
  10 FF0DWIX4 FF0DWIX4 ; 
  10 FF0DWIX5 FF0DWIX5 ; 
  10 FF0DWIX6 FF0DWIX6 ; 
  10 FF0DWIXM FF0DWIXM ; 
  10 CACHGFL CACHGFL ; 
  10 FF0DWSCR FF0DWSCR ; 
  10 FF0DWCNT FF0DWCNT ; 
  10 FF0DWKD1 FF0DWKD1 ; 
    15 FF0DWKC1 FF0DWKC1 ; 
    15 FF0DWKM1 FF0DWKM1 ; 
  10 FF0DWKD2 FF0DWKD2 ; 
    15 FF0DWKC2 FF0DWKC2 ; 
    15 FF0DWKM2 FF0DWKM2 ; 
end // end FF0DW00

//*** RECORD=FF0DW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// Some of the fields in this record follow this format:
// FF0dWXYZ
// 
// X being one of the following codes:
//             M = FUTURE TOTAL PCT
//             N = FUTURE TOTAL QTY
//             O = NAT'L TOTAL PCT
//             P = NAT'L TOTAL QTY
//             Q = PROP TOTAL PCT
//             R = PROP TOTAL QTY
//             S = TOTAL PCT
//             T = TOTAL QTY
// 
// YZ being one of the following codes:
//             Y1 = One Year Ago
//             Y2 = Two Years Ago
//             CB = Combined Years
// 
// FF135 - 11/19/90 MDANGE
// Added FF0DWNMX - user created percentage accumulator
// Added FF0DWmts - master range of months to update VRCMTH01
// ***********************
Record FF0DW01 type basicRecord
  10 FF2GROUP FF2GROUP ; 
  10 FF0DWMBM FF0DWMBM ; 
  10 FF2ALCAT FF2ALCAT ; 
  10 FF0DWACA FF0DWACA ; 
  10 FF0DWSEL FF0DWSEL [3] ; 
  10 FF2SEASN FF2SEASN [4] ; 
  10 FF0DWMNS FF0DWMNS [4] ; 
  10 FF0DWTMP FF0DWTMP [5] ; 
  10 FF0DWTOT FF0DWTOT [4] ; 
  10 FF0DWMPG FF0DWMPG [5] ; 
  10 FF0DWSTW FF0DWSTW [4] ; 
  10 FF0DWSTM FF0DWSTM [4] ; 
  10 FF0DWM11 FF0DWM11 [12] ; 
  10 FF0DWM12 FF0DWM12 [12] ; 
  10 FF0DWM13 FF0DWM13 [12] ; 
  10 FF0DWM14 FF0DWM14 [12] ; 
  10 FF0DWM21 FF0DWM21 [12] ; 
  10 FF0DWM22 FF0DWM22 [12] ; 
  10 FF0DWM23 FF0DWM23 [12] ; 
  10 FF0DWM24 FF0DWM24 [12] ; 
  10 FF0DWDDT FF0DWDDT ; 
    15 FF0DWDYY FF0DWDYY ; 
    15 FF0DWDMM FF0DWDMM ; 
  10 FF2NSEAS FF2NSEAS ; 
  10 FF0DWWNS FF0DWWNS ; 
  10 FF2FUIND FF2FUIND ; 
  10 FF0DWIND FF0DWIND ; 
  10 FF0DWNMX FF0DWNMX ; 
  10 FF0DWMTS FF0DWMTS [12] ; 
end // end FF0DW01

//*** RECORD=FF0DW02 ****
// ----------------------------------------------
// Application working storage for orig cat data.
// ----------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0dWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// 
// FF135 11/12/90 MDANGE - Removed fields for combined values.
//       added FF0DWUQT to hold user created percents.
//       added FF0DWSQT to hold percents from table rows
// ***********************
Record FF0DW02 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0DWSN1 FF0DWSN1 ; 
    15 FF0DWMS1 FF0DWMS1 [12] ; 
      20 FF0DWA11 FF0DWA11 ; 
      20 FF0DWB11 FF0DWB11 ; 
      20 FF0DWC11 FF0DWC11 ; 
      20 FF0DWD11 FF0DWD11 ; 
      20 FF0DWE11 FF0DWE11 ; 
      20 FF0DWF11 FF0DWF11 ; 
      20 FF0DWG11 FF0DWG11 ; 
      20 FF0DWH11 FF0DWH11 ; 
      20 FF0DWI11 FF0DWI11 ; 
      20 FF0DWJ11 FF0DWJ11 ; 
      20 FF0DWK11 FF0DWK11 ; 
      20 FF0DWL11 FF0DWL11 ; 
      20 FF0DWA21 FF0DWA21 ; 
      20 FF0DWB21 FF0DWB21 ; 
      20 FF0DWC21 FF0DWC21 ; 
      20 FF0DWD21 FF0DWD21 ; 
      20 FF0DWE21 FF0DWE21 ; 
      20 FF0DWF21 FF0DWF21 ; 
      20 FF0DWG21 FF0DWG21 ; 
      20 FF0DWH21 FF0DWH21 ; 
      20 FF0DWI21 FF0DWI21 ; 
      20 FF0DWJ21 FF0DWJ21 ; 
      20 FF0DWK21 FF0DWK21 ; 
      20 FF0DWL21 FF0DWL21 ; 
  10 * char(1) ; 
  10 FF0DWSN2 FF0DWSN2 ; 
    15 FF0DWMS2 FF0DWMS2 [12] ; 
      20 FF0DWA12 FF0DWA12 ; 
      20 FF0DWB12 FF0DWB12 ; 
      20 FF0DWC12 FF0DWC12 ; 
      20 FF0DWD12 FF0DWD12 ; 
      20 FF0DWE12 FF0DWE12 ; 
      20 FF0DWF12 FF0DWF12 ; 
      20 FF0DWG12 FF0DWG12 ; 
      20 FF0DWH12 FF0DWH12 ; 
      20 FF0DWI12 FF0DWI12 ; 
      20 FF0DWJ12 FF0DWJ12 ; 
      20 FF0DWK12 FF0DWK12 ; 
      20 FF0DWL12 FF0DWL12 ; 
      20 FF0DWA22 FF0DWA22 ; 
      20 FF0DWB22 FF0DWB22 ; 
      20 FF0DWC22 FF0DWC22 ; 
      20 FF0DWD22 FF0DWD22 ; 
      20 FF0DWE22 FF0DWE22 ; 
      20 FF0DWF22 FF0DWF22 ; 
      20 FF0DWG22 FF0DWG22 ; 
      20 FF0DWH22 FF0DWH22 ; 
      20 FF0DWI22 FF0DWI22 ; 
      20 FF0DWJ22 FF0DWJ22 ; 
      20 FF0DWK22 FF0DWK22 ; 
      20 FF0DWL22 FF0DWL22 ; 
  10 * char(1) ; 
  10 FF0DWSN3 FF0DWSN3 ; 
    15 FF0DWMS3 FF0DWMS3 [12] ; 
      20 FF0DWA13 FF0DWA13 ; 
      20 FF0DWB13 FF0DWB13 ; 
      20 FF0DWC13 FF0DWC13 ; 
      20 FF0DWD13 FF0DWD13 ; 
      20 FF0DWE13 FF0DWE13 ; 
      20 FF0DWF13 FF0DWF13 ; 
      20 FF0DWG13 FF0DWG13 ; 
      20 FF0DWH13 FF0DWH13 ; 
      20 FF0DWI13 FF0DWI13 ; 
      20 FF0DWJ13 FF0DWJ13 ; 
      20 FF0DWK13 FF0DWK13 ; 
      20 FF0DWL13 FF0DWL13 ; 
      20 FF0DWA23 FF0DWA23 ; 
      20 FF0DWB23 FF0DWB23 ; 
      20 FF0DWC23 FF0DWC23 ; 
      20 FF0DWD23 FF0DWD23 ; 
      20 FF0DWE23 FF0DWE23 ; 
      20 FF0DWF23 FF0DWF23 ; 
      20 FF0DWG23 FF0DWG23 ; 
      20 FF0DWH23 FF0DWH23 ; 
      20 FF0DWI23 FF0DWI23 ; 
      20 FF0DWJ23 FF0DWJ23 ; 
      20 FF0DWK23 FF0DWK23 ; 
      20 FF0DWL23 FF0DWL23 ; 
  10 FF0DWSN4 FF0DWSN4 ; 
    15 FF0DWMS4 FF0DWMS4 [12] ; 
      20 FF0DWA14 FF0DWA14 ; 
      20 FF0DWB14 FF0DWB14 ; 
      20 FF0DWC14 FF0DWC14 ; 
      20 FF0DWD14 FF0DWD14 ; 
      20 FF0DWE14 FF0DWE14 ; 
      20 FF0DWF14 FF0DWF14 ; 
      20 FF0DWG14 FF0DWG14 ; 
      20 FF0DWH14 FF0DWH14 ; 
      20 FF0DWI14 FF0DWI14 ; 
      20 FF0DWJ14 FF0DWJ14 ; 
      20 FF0DWK14 FF0DWK14 ; 
      20 FF0DWL14 FF0DWL14 ; 
      20 FF0DWA24 FF0DWA24 ; 
      20 FF0DWB24 FF0DWB24 ; 
      20 FF0DWC24 FF0DWC24 ; 
      20 FF0DWD24 FF0DWD24 ; 
      20 FF0DWE24 FF0DWE24 ; 
      20 FF0DWF24 FF0DWF24 ; 
      20 FF0DWG24 FF0DWG24 ; 
      20 FF0DWH24 FF0DWH24 ; 
      20 FF0DWI24 FF0DWI24 ; 
      20 FF0DWJ24 FF0DWJ24 ; 
      20 FF0DWK24 FF0DWK24 ; 
      20 FF0DWL24 FF0DWL24 ; 
  10 * char(1) ; 
  10 FF0DWFP1 FF0DWFP1 [52] ; 
  10 FF0DWFQ1 FF0DWFQ1 [52] ; 
  10 FF0DWNP1 FF0DWNP1 [52] ; 
  10 FF0DWNQ1 FF0DWNQ1 [52] ; 
  10 FF0DWPP1 FF0DWPP1 [52] ; 
  10 FF0DWPQ1 FF0DWPQ1 [52] ; 
  10 FF0DWTP1 FF0DWTP1 [52] ; 
  10 FF0DWTQ1 FF0DWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0DWFP2 FF0DWFP2 [52] ; 
  10 FF0DWFQ2 FF0DWFQ2 [52] ; 
  10 FF0DWNP2 FF0DWNP2 [52] ; 
  10 FF0DWNQ2 FF0DWNQ2 [52] ; 
  10 FF0DWPP2 FF0DWPP2 [52] ; 
  10 FF0DWPQ2 FF0DWPQ2 [52] ; 
  10 FF0DWTP2 FF0DWTP2 [52] ; 
  10 FF0DWTQ2 FF0DWTQ2 [52] ; 
  10 * char(1) ; 
  10 FF0DWUQT FF0DWUQT [12] ; 
  10 FF0DWSQT FF0DWSQT [12] ; 
end // end FF0DW02

//*** RECORD=FF0DW03 ****
// ---------------------------------------------
// Application working storage for alt cat data.
// ---------------------------------------------
// 
// Some of the fields in this record follow this format:
// FF0dWXYZ.
// 
// X being one of the following codes:
//          A = PRE-ALLOCATED FUTURE QTY
//          B = ALLOCATED FUTURE QTY
//          C = SHIP FUTURE QTY
//          D = CANCEL FUTURE QTY
//          E = PRE-ALLOCATED NAT'L QTY
//          F = ALLOCATED NAT'L QTY
//          G = SHIP NAT'L QTY
//          H = CANCEL NAT'L QTY
//          I = PRE-ALLOCATED PROP QTY
//          J = ALLOCATED PROP QTY
//          K = SHIP PROP QTY
//          L = CANCEL PROP QTY
// 
// Y being one of the following codes:
//          1 = One Year Ago
//          2 = Two Years Ago
// 
// Z being one of the following codes:
//          1 = Season One
//          2 = Season Two
//          3 = Season Three
// 
// FF135 11/12/90 MDANGE - Removed fields for combined values.
// Added FF0DWAQT for user created percentages
// ***********************
Record FF0DW03 type basicRecord
  10 XPCCD XPCCD ; 
  10 FF0DWSN1 FF0DWSN1 ; 
    15 FF0DWMS1 FF0DWMS1 [12] ; 
      20 FF0DWA11 FF0DWA11 ; 
      20 FF0DWB11 FF0DWB11 ; 
      20 FF0DWC11 FF0DWC11 ; 
      20 FF0DWD11 FF0DWD11 ; 
      20 FF0DWE11 FF0DWE11 ; 
      20 FF0DWF11 FF0DWF11 ; 
      20 FF0DWG11 FF0DWG11 ; 
      20 FF0DWH11 FF0DWH11 ; 
      20 FF0DWI11 FF0DWI11 ; 
      20 FF0DWJ11 FF0DWJ11 ; 
      20 FF0DWK11 FF0DWK11 ; 
      20 FF0DWL11 FF0DWL11 ; 
      20 FF0DWA21 FF0DWA21 ; 
      20 FF0DWB21 FF0DWB21 ; 
      20 FF0DWC21 FF0DWC21 ; 
      20 FF0DWD21 FF0DWD21 ; 
      20 FF0DWE21 FF0DWE21 ; 
      20 FF0DWF21 FF0DWF21 ; 
      20 FF0DWG21 FF0DWG21 ; 
      20 FF0DWH21 FF0DWH21 ; 
      20 FF0DWI21 FF0DWI21 ; 
      20 FF0DWJ21 FF0DWJ21 ; 
      20 FF0DWK21 FF0DWK21 ; 
      20 FF0DWL21 FF0DWL21 ; 
  10 * char(1) ; 
  10 FF0DWSN2 FF0DWSN2 ; 
    15 FF0DWMS2 FF0DWMS2 [12] ; 
      20 FF0DWA12 FF0DWA12 ; 
      20 FF0DWB12 FF0DWB12 ; 
      20 FF0DWC12 FF0DWC12 ; 
      20 FF0DWD12 FF0DWD12 ; 
      20 FF0DWE12 FF0DWE12 ; 
      20 FF0DWF12 FF0DWF12 ; 
      20 FF0DWG12 FF0DWG12 ; 
      20 FF0DWH12 FF0DWH12 ; 
      20 FF0DWI12 FF0DWI12 ; 
      20 FF0DWJ12 FF0DWJ12 ; 
      20 FF0DWK12 FF0DWK12 ; 
      20 FF0DWL12 FF0DWL12 ; 
      20 FF0DWA22 FF0DWA22 ; 
      20 FF0DWB22 FF0DWB22 ; 
      20 FF0DWC22 FF0DWC22 ; 
      20 FF0DWD22 FF0DWD22 ; 
      20 FF0DWE22 FF0DWE22 ; 
      20 FF0DWF22 FF0DWF22 ; 
      20 FF0DWG22 FF0DWG22 ; 
      20 FF0DWH22 FF0DWH22 ; 
      20 FF0DWI22 FF0DWI22 ; 
      20 FF0DWJ22 FF0DWJ22 ; 
      20 FF0DWK22 FF0DWK22 ; 
      20 FF0DWL22 FF0DWL22 ; 
  10 * char(1) ; 
  10 FF0DWSN3 FF0DWSN3 ; 
    15 FF0DWMS3 FF0DWMS3 [12] ; 
      20 FF0DWA13 FF0DWA13 ; 
      20 FF0DWB13 FF0DWB13 ; 
      20 FF0DWC13 FF0DWC13 ; 
      20 FF0DWD13 FF0DWD13 ; 
      20 FF0DWE13 FF0DWE13 ; 
      20 FF0DWF13 FF0DWF13 ; 
      20 FF0DWG13 FF0DWG13 ; 
      20 FF0DWH13 FF0DWH13 ; 
      20 FF0DWI13 FF0DWI13 ; 
      20 FF0DWJ13 FF0DWJ13 ; 
      20 FF0DWK13 FF0DWK13 ; 
      20 FF0DWL13 FF0DWL13 ; 
      20 FF0DWA23 FF0DWA23 ; 
      20 FF0DWB23 FF0DWB23 ; 
      20 FF0DWC23 FF0DWC23 ; 
      20 FF0DWD23 FF0DWD23 ; 
      20 FF0DWE23 FF0DWE23 ; 
      20 FF0DWF23 FF0DWF23 ; 
      20 FF0DWG23 FF0DWG23 ; 
      20 FF0DWH23 FF0DWH23 ; 
      20 FF0DWI23 FF0DWI23 ; 
      20 FF0DWJ23 FF0DWJ23 ; 
      20 FF0DWK23 FF0DWK23 ; 
      20 FF0DWL23 FF0DWL23 ; 
  10 FF0DWSN4 FF0DWSN4 ; 
    15 FF0DWMS4 FF0DWMS4 [12] ; 
      20 FF0DWA14 FF0DWA14 ; 
      20 FF0DWB14 FF0DWB14 ; 
      20 FF0DWC14 FF0DWC14 ; 
      20 FF0DWD14 FF0DWD14 ; 
      20 FF0DWE14 FF0DWE14 ; 
      20 FF0DWF14 FF0DWF14 ; 
      20 FF0DWG14 FF0DWG14 ; 
      20 FF0DWH14 FF0DWH14 ; 
      20 FF0DWI14 FF0DWI14 ; 
      20 FF0DWJ14 FF0DWJ14 ; 
      20 FF0DWK14 FF0DWK14 ; 
      20 FF0DWL14 FF0DWL14 ; 
      20 FF0DWA24 FF0DWA24 ; 
      20 FF0DWB24 FF0DWB24 ; 
      20 FF0DWC24 FF0DWC24 ; 
      20 FF0DWD24 FF0DWD24 ; 
      20 FF0DWE24 FF0DWE24 ; 
      20 FF0DWF24 FF0DWF24 ; 
      20 FF0DWG24 FF0DWG24 ; 
      20 FF0DWH24 FF0DWH24 ; 
      20 FF0DWI24 FF0DWI24 ; 
      20 FF0DWJ24 FF0DWJ24 ; 
      20 FF0DWK24 FF0DWK24 ; 
      20 FF0DWL24 FF0DWL24 ; 
  10 * char(1) ; 
  10 FF0DWFP1 FF0DWFP1 [52] ; 
  10 FF0DWFQ1 FF0DWFQ1 [52] ; 
  10 FF0DWNP1 FF0DWNP1 [52] ; 
  10 FF0DWNQ1 FF0DWNQ1 [52] ; 
  10 FF0DWPP1 FF0DWPP1 [52] ; 
  10 FF0DWPQ1 FF0DWPQ1 [52] ; 
  10 FF0DWTP1 FF0DWTP1 [52] ; 
  10 FF0DWTQ1 FF0DWTQ1 [52] ; 
  10 * char(1) ; 
  10 FF0DWFP2 FF0DWFP2 [52] ; 
  10 FF0DWFQ2 FF0DWFQ2 [52] ; 
  10 FF0DWNP2 FF0DWNP2 [52] ; 
  10 FF0DWNQ2 FF0DWNQ2 [52] ; 
  10 FF0DWPP2 FF0DWPP2 [52] ; 
  10 FF0DWPQ2 FF0DWPQ2 [52] ; 
  10 FF0DWTP2 FF0DWTP2 [52] ; 
  10 FF0DWTQ2 FF0DWTQ2 [52] ; 
  10 FF0DWAQT FF0DWAQT [12] ; 
end // end FF0DW03

// pre-alloc future - yr 1
DataItem FF0DWA11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0DWA12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0DWA13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 1
DataItem FF0DWA14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0DWA21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0DWA22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0DWA23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc future - yr 2
DataItem FF0DWA24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alt cat abrv
DataItem FF0DWACA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created percents- alt cat
DataItem FF0DWAQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0DWB11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0DWB12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0DWB13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc future - yr 1
DataItem FF0DWB14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWB21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWB22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWB23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWB24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin month available flag
DataItem FF0DWBMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin month found flag
DataItem FF0DWBMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship future - yr 1
DataItem FF0DWC11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0DWC12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0DWC13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 1
DataItem FF0DWC14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWC21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWC22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWC23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship future - yr 2
DataItem FF0DWC24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original cat viewed
DataItem FF0DWCAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// converted beg date
DataItem FF0DWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month in season
DataItem FF0DWCMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculated months in season
DataItem FF0DWCMS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month counter
DataItem FF0DWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season counter
DataItem FF0DWCTS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current season number 1 - 4
DataItem FF0DWCUR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// calculations work area
DataItem FF0DWCWK bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0DWD11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0DWD12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0DWD13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 1
DataItem FF0DWD14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0DWD21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0DWD22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0DWD23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel future - yr 2
DataItem FF0DWD24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date day
DataItem FF0DWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display date
DataItem FF0DWDDT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FF0DWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display month
DataItem FF0DWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data request flag
DataItem FF0DWDRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date ccyymm work area
DataItem FF0DWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display year
DataItem FF0DWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0DWE11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0DWE12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0DWE13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 1
DataItem FF0DWE14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0DWE21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0DWE22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0DWE23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc nat'l - yr 2
DataItem FF0DWE24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0DWF11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0DWF12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0DWF13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 1
DataItem FF0DWF14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0DWF21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0DWF22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0DWF23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc nat'l - yr 2
DataItem FF0DWF24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format Map flag
DataItem FF0DWFMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future percent one yr
DataItem FF0DWFP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future percent two yrs ago
DataItem FF0DWFP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity one yr
DataItem FF0DWFQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future quantity two yrs ago
DataItem FF0DWFQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first selection flag
DataItem FF0DWFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0DWG11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0DWG12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0DWG13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 1
DataItem FF0DWG14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0DWG21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0DWG22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0DWG23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship nat'l - yr 2
DataItem FF0DWG24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0DWH11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0DWH12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0DWH13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 1
DataItem FF0DWH14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0DWH21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0DWH22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0DWH23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel nat'l - yr 2
DataItem FF0DWH24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0DWI11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0DWI12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0DWI13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 1
DataItem FF0DWI14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0DWI21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0DWI22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0DWI23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pre-alloc prop - yr 2
DataItem FF0DWI24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_FUTR_YR_IND from map
DataItem FF0DWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index one for stored fields
DataItem FF0DWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FF0DWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index three for stored fields
DataItem FF0DWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four - for master mo rng
DataItem FF0DWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four - for master mo rng
DataItem FF0DWIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index four - for master mo rng
DataItem FF0DWIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FF0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0DWJ11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0DWJ12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0DWJ13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 1
DataItem FF0DWJ14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0DWJ21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0DWJ22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0DWJ23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// alloc prop - yr 2
DataItem FF0DWJ24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0DWK11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0DWK12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0DWK13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 1
DataItem FF0DWK14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0DWK21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0DWK22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0DWK23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship prop - yr 2
DataItem FF0DWK24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy
DataItem FF0DWKC1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyy
DataItem FF0DWKC2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 1
DataItem FF0DWKD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date 2
DataItem FF0DWKD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0DWKM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mm
DataItem FF0DWKM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0DWL11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0DWL12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0DWL13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 1
DataItem FF0DWL14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0DWL21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0DWL22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0DWL23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cancel prop - yr 2
DataItem FF0DWL24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month - one yr ago - seas 1
DataItem FF0DWM11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 2
DataItem FF0DWM12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 3
DataItem FF0DWM13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - one yr ago - seas 4
DataItem FF0DWM14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 1
DataItem FF0DWM21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 2
DataItem FF0DWM22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 3
DataItem FF0DWM23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// month - two yrs ago - seas 4
DataItem FF0DWM24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// map season begin month
DataItem FF0DWMBM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// beg date month
DataItem FF0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion month
DataItem FF0DWMNC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season
DataItem FF0DWMNS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months on page
DataItem FF0DWMPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// months in season one
DataItem FF0DWMS1 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season two
DataItem FF0DWMS2 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season three
DataItem FF0DWMS3 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// months in season four
DataItem FF0DWMS4 char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// master range of months
DataItem FF0DWMTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max pages (2-5)
DataItem FF0DWMXP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New category flag
DataItem FF0DWNCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created % accumulator
DataItem FF0DWNMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % - one yr
DataItem FF0DWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future % -  two yrs ago
DataItem FF0DWNP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty one yr
DataItem FF0DWNQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// natl future qty two yrs ago
DataItem FF0DWNQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page nbr
DataItem FF0DWPGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % - one yr
DataItem FF0DWPP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop % -  two yrs ago
DataItem FF0DWPP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty one yr
DataItem FF0DWPQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prop qty two yrs ago
DataItem FF0DWPQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row count
DataItem FF0DWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved cat request flag
DataItem FF0DWSCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection cnt
DataItem FF0DWSCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection field
DataItem FF0DWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr one
DataItem FF0DWSN1 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr two
DataItem FF0DWSN2 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr three
DataItem FF0DWSN3 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season nbr four
DataItem FF0DWSN4 char(1152)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save created percents-table
DataItem FF0DWSQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start map
DataItem FF0DWSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season start WS
DataItem FF0DWSTW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total on page ind. Y or N
DataItem FF0DWTMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total position on page WS
DataItem FF0DWTOT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - one year
DataItem FF0DWTP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total % - two year
DataItem FF0DWTP2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - one year
DataItem FF0DWTQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total qty - two year
DataItem FF0DWTQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update requested flag
DataItem FF0DWUPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user created percents
DataItem FF0DWUQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work nbr of seasons
DataItem FF0DWWNS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion yymm
DataItem FF0DWYMC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// conversion year
DataItem FF0DWYRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year flag
DataItem FF0DWYRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg date year
DataItem FF0DWYY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

