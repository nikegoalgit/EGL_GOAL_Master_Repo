package ff0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0J ****
// This application obtains a specific line/type group &
// displays a list of categories for the line/type group.
// It also displays the date user last updated revised
// seasonal index & the date all master forecast work sheets
// were completed for all products in the displayed category.
// The user may add or alter a completed date when they know
// that all the products in the displayed category have had
// master forecasts set.  The user may scroll forward or
// back to view all the categories for the given line.
// 
// The user may select a displayed category & PF13 to appli-
// cation FF0B with the selected category or exit to any
// allowed application via Fast Path.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/11/89  LDELUH  New application.
// ff175    12/19/96  dsmith  regenerated for year 2000.
// *********************
Program FF0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0JW00 FF0JW00; // record
  FF0JW01 FF0JW01; // record
  FF2REC FF2REC; // record
  FFWREC FFWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0JM.FF0JM001,  // forms
      FF0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0JM001 initial; /* M001 input/output*/
    set FF0JW00 empty; /* Working storage*/
    set FF0JW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up window parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date & time convert parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    FF0JW00.FF0JWFMS = "Y"; /* Format the map switch*/
    FF0JW00.FF0JWRDS = "N"; /* Request for data switch*/
    FF0JW00.CACHGFL = "N"; /* Set data not obtained*/

    if (FFWREC.YPGCD == " ") /* Type group not known*/
      FFWREC.YPGCD = "01"; /* Default value*/
      FFWREC.YPGABRV = "******";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.YPGCD != "  "
     && FFWREC.XPLCD != "  ") /* line/type grp passed from another*/
                                     /* appl*/
      FF0JW00.FF0JWRDS = "Y"; /* Request for data switch "on"*/
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0J.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPCCD = "  ";
    FFWREC.XPCABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0J001; /* Converse the main process*/


    FF0J001: FF0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0J001; /* Converse the main process*/


  end // end main
end // end FF0J

// Main process to display a map
Function FF0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0J100(); /* Obtain the data to display*/

  FF0J200(); /* Format and display the map*/

  FF0J300(); /* Check attention identifier*/

  FF0J400(); /* Reset fields to normal intensity*/

  FF0J500(); /* Verify the entered data*/

  FF0J600(); /* Process valid input request*/


end // end FF0J001

// Obtain the data to display
Function FF0J100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0JW00.FF0JWRDS == "N" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  FF0JW00.CACHGFL = "N"; /* Set data not obtained*/

   /* ------------------------------------------------------------*/
   /* Obtain data & build temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0J110(); /* Build up the temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0JW00.TA5TSQIX == 0) /* No pages formatted*/
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    return; /* Exit to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FF0JW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF0JW00.FF0JWRDS = "N"; /* Request for data switch "off"*/
  FF0JW00.CACHGFL = "Y"; /* Set data obtained*/


end // end FF0J100

// Build up the temporary storage
Function FF0J110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF0JW00.XXXTSLEN = 554; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF0J111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Obtain & format FF2REC rows into temporary storage area.*/
   /* ------------------------------------------------------------*/

  FF0J112(); /* Select set & open FF2REC csr*/
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  while (FF0JW00.FF0JWECS == "N") /* Until end of cursor*/
    FF0J113(); /* Fetch selected FF2REC row*/
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (FF0JW00.FF0JWMIX > 15) /* Page is full*/
      FF0J115(); /* Add page to temporary storage*/
    end
  end
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (FF0JW00.FF0JWMIX > 1) /* Page was formatted*/
    FF0J115(); /* Add page to temporary storage*/
  end
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected FF2REC set.*/
   /* ------------------------------------------------------------*/
  FF0J116(); /* Close FF2REC cursor*/


end // end FF0J110

// Purge any temporary storage
Function FF0J111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF0JW01 empty; /* M001 display storage*/

  FF0JW00.FF0JWUPS = "N"; /* Update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF0JW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J111

// Select & open FF2REC cursor
Function FF0J112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPLCD = FFWREC.XPLCD;
  FF2REC.YPGCD = FFWREC.YPGCD;
  FF2REC.XPCCD = "*";
  FF2REC.YSMXDV = "10";

   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0JW00.FF0JWMIX = 1; /* Initialize display index*/
      FF0JW00.FF0JWECS = "N";
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN LIST OF CATEGORIES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J112

// Fetch next FF2REC row
Function FF0J113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FF0J114(); /* Save in display storage*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      FF0JW00.FF0JWECS = "Y"; /* Indicate end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE FF2REC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J113

// Save data in display storage
Function FF0J114()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  FF0JW01.XPCCD[FF0JWMIX] = FF2REC.XPCCD; /* Category*/
  if (FF2REC.XPCCD in XPCTBL.XPCCD)
    FF0JW01.XPCDESC[FF0JWMIX] = XPCTBL.XPCDESC[sysVar.arrayIndex];
  end
  FF0JW01.ZZZCHGCT[FF0JWMIX] = FF2REC.ZZZCHGCT; /* Chg count*/

  if (FF2REC.FF2CATDT != 0)
    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "G"; /* Type MMDDYY*/
    TA2REC.TA2GRGGN = FF2REC.FF2CATDT;
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/
        FF0JW01.FF0JWCDT[FF0JWMIX] = TA2REC.TA2GRGB;
      else
        TAEREC.TAEDESC1 = sysVar.errorCode;
        TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "REFORMAT COMPLETED DATE";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
        FFWREC.XXXMODID = "114"; /* Module identification*/
        converseLib.validationFailed(1); /* System error occured*/
        exit stack; /* Exit to display map*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "REFORMAT COMPLETED DATE";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
      FFWREC.XXXMODID = "114"; /* Module identification*/
      converseLib.validationFailed(1); /* System error occured*/
      exit stack; /* Exit to display map*/
    end
  end

  FF0JW01.FF2REVDT[FF0JWMIX] = FF2REC.FF2REVDT; /* Revd dt*/

  FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX + 1; /* Increment display index*/


end // end FF0J114

// Add page to temp storage
Function FF0J115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF0JW01.XXXTSLEN = FF0JW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FF0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set FF0JW01 empty; /* M001 display storage*/
    FF0JW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FF0JW00.FF0JWMIX = 1; /* Map line number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J115

// Close FF2REC cursor
Function FF0J116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF FF2REC ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J116

// Format and converse the map
Function FF0J200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0JW00.FF0JWRDS == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0JW00.FF0JWFMS == "Y") /* map must be formatted*/
      FF0J210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FF0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0JM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0JM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0JM001.CAITEM; /* Application data*/


end // end FF0J200

// Format the display data
Function FF0J210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0JM001 initial; /* M001 input/output area*/

  FF0JW00.FF0JWFMS = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF0JW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (FF0JW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (FF0JW00.FF0JWUPS == "Y") /* Current page was changed*/
        FF0J211(); /* Update temporary storage page*/
        FF0JW00.FF0JWUPS = "N"; /* Reset update switch*/
      end
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (FF0JW00.XXXTSPAG > FF0JW00.TA5TSQIX) /* Desired greater highest*/
        FF0JW00.XXXTSPAG = FF0JW00.TA5TSQIX; /* Default to highest*/
      end
      FF0J212(); /* Obtain temporary storage page*/
    end
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set FF0JM001.XXXLITPG skip;
    set FF0JM001.XXXLITOF skip;
    FF0JM001.XXXTSPAG = FF0JW00.XXXTSPAG; /* Current page*/
    FF0JM001.TA5TSQIX = FF0JW00.TA5TSQIX; /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0JM001.XPLCD = FFWREC.XPLCD;
  FF0JM001.XPLABRV = FFWREC.XPLABRV;
  FF0JM001.YPGCD = FFWREC.YPGCD;
  FF0JM001.YPGABRV = FFWREC.YPGABRV;

  FF0JW00.FF0JWMIX = 1; /* Initialize line index*/

  while (FF0JW00.FF0JWMIX <= 15 /* Until screen is full*/
   && FF0JW01.XPCCD[FF0JWMIX] > " ") /* or end of data*/
    if (FF0JW00.FF0JWMIX == 1) /* First select field*/
      set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, normal; /* Position cursor*/
      set FF0JM001.FF0JMCDT[FF0JWMIX] normal; /* Unprotect*/
    else
      set FF0JM001.FF0JMSEL[FF0JWMIX] normal; /* Unprotect*/
      set FF0JM001.FF0JMCDT[FF0JWMIX] normal; /* Unprotect*/
    end
    FF0JM001.XPCCD[FF0JWMIX] = FF0JW01.XPCCD[FF0JWMIX];
    FF0JM001.XPCDESC[FF0JWMIX] = FF0JW01.XPCDESC[FF0JWMIX];
    if (FF0JW01.FF0JWCDT[FF0JWMIX] != " ")
      FF0JM001.FF0JMCDT[FF0JWMIX] = FF0JW01.FF0JWCDT[FF0JWMIX];
    end
    if (FF0JW01.FF2REVDT[FF0JWMIX] > 0)
      FF0JM001.FF0JMRDT[FF0JWMIX] = FF0JW01.FF2REVDT[FF0JWMIX];
    end
    FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX + 1; /* Increment line index*/
  end


end // end FF0J210

// Update temporary storage page
Function FF0J211()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FF0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J211

// Read temporary storage page
Function FF0J212()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF0JW01.XXXTSLEN = FF0JW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF0JW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J212

// Check attention identifier
Function FF0J300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (FF0JW00.FF0JWRDS == "Y") /* Request for data*/
      set FF0JW01 empty; /* M001 display storage*/
    end
    FF0JW00.FF0JWFMS = "Y"; /* Format the map switch*/
    FF0JW00.FF0JWRDS = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      FF0J111(); /* Purge temporary storage*/
      XSFFS01(); /* Exit to another application*/
      set FF0JM001.CATOAP cursor, bold; /* Highlight*/
      FF0JW00.FF0JWFMS = "Y"; /* Format the map switch*/
      FF0JW00.FF0JWRDS = "N"; /* Request for data switch*/
    else
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0JM001"; /* Application find code*/
    end
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end
    FF0J111(); /* Purge temporary storage*/
    XSFFS01(); /* Exit to another application*/
    FF0JW00.FF0JWFMS = "Y"; /* Format the map switch*/
    FF0JW00.FF0JWRDS = "N"; /* Request for data switch*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf13)
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end FF0J300

// Reset highlighted fields
Function FF0J400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0JM001.YPGCD initialAttributes;
  set FF0JM001.XPLCD initialAttributes;

  FF0JW00.FF0JWMIX = 1; /* Initialize line index*/

  while (FF0JW00.FF0JWMIX <= 15 /* Until end of lines*/
   && FF0JM001.XPCCD[FF0JWMIX] > " ") /* or end of display*/
    set FF0JM001.FF0JMSEL[FF0JWMIX] normal; /* Reset select flag*/
    set FF0JM001.FF0JMCDT[FF0JWMIX] normal; /* Reset completed date*/
    FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX + 1; /* Increment line index*/
  end

  set FF0JM001.CATOAP initialAttributes; /* TO application*/
  set FF0JM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD == "?" /* Type group lies requested*/
   || FF0JM001.XPLCD == "?") /* Line list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD == "?") /* product list requested*/
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "    TYPE GROUP";
    XX0XW02.YPGFFFL = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    if (XX0XW02.XX0XWPIX > 0)
      FF0JM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FF0JM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FF0JM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0JM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.XPLCD == "?") /* Line list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE    "; /* Heading*/
    XX0XW02.XGPCD = "02";
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0JM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF0JM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF0JM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF0JM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
    end
    set FF0JM001.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/


end // end FF0J400

// Verify the entered data
Function FF0J500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.CAITEM > " ") /* Application data was entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    FF0J510(); /* Verify scroll request*/
  else
    /* ------------------------------------------------------------*/
     /* If it is not a scroll request & the search key was*/
     /* changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    if (FF0JM001.YPGCD != FFWREC.YPGCD /* Type group changed*/
     || FF0JM001.XPLCD != FFWREC.XPLCD /* or line changed*/
     || FF0JW00.CACHGFL == "N")        /* or data not obtained*/
      FF0J520(); /* Verify the key fields*/
    else
      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/
      if (FF0JW00.TA5TSQIX > 0) /* Page was formatted*/
        FF0JW00.FF0JWSSW = "N"; /* Initialize select switch*/
        FF0JW00.FF0JWSSI = 0; /* Initialize save select ix*/
        FF0JW00.FF0JWMIX = 15; /* Initialize line index*/
        while (FF0JW00.FF0JWMIX > 0) /* Until end of lines*/
          FF0J530(); /* Verify data in the line*/
          FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX - 1; /* Decrement line number*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF0J500

// Verify scroll request
Function FF0J510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF0JW00.XXXTSPAG < 2)       /* and no previous pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF0JW00.XXXTSPAG >= FF0JW00.TA5TSQIX) /* and no more pages*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered or any completed*/
   /* date that was changed.*/
   /* ------------------------------------------------------------*/

  FF0JW00.FF0JWMIX = 15; /* Initialize line index*/

  while (FF0JW00.FF0JWMIX > 0) /* Until end of lines*/
    if (FF0JM001.FF0JMSEL[FF0JWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    if (FF0JM001.FF0JMCDT[FF0JWMIX] != FF0JW01.FF0JWCDT[FF0JWMIX])
      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0JM001.FF0JMCDT[FF0JWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0JM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end

  if (FF0JM001.XPLCD != FFWREC.XPLCD) /* Line changed*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0JM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
  end


end // end FF0J510

// Verify the key fields
Function FF0J520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered since selections*/
   /* are not allowed when key fields are changed.*/
   /* ------------------------------------------------------------*/

  FF0JW00.FF0JWMIX = 15; /* Initialize line index*/

  while (FF0JW00.FF0JWMIX > 0) /* Until end of lines*/
    if (FF0JM001.FF0JMSEL[FF0JWMIX] > " ") /* Selection entered*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modifications not allowed*/
    end
    FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX - 1; /* Decrement line number*/
  end

   /* ------------------------------------------------------------*/
   /* Verify that line & type group codes were entered.  Key*/
   /* fields are not allowed to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD == " ") /* Type group not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0JM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF0JM001.XPLCD == " ") /* Line not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0JM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If line was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.XPLCD > " ") /* Line was entered*/
    if (FF0JM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FF0JM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0JM001.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0JM001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0JM001.XPLABRV = " "; /* Clear abbrv*/
  end

   /* ------------------------------------------------------------*/
   /* If type group was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD > " ") /* Type group was entered*/
    if (FF0JM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF0JM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate invalid.*/
      /* ------------------------------------------------------------*/
      FF0JM001.YPGABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0JM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0JM001.YPGABRV = " "; /* Clear abrv*/
  end


end // end FF0J520

// Verify data in the line
Function FF0J530()
   /* ------------------------------------------------------------*/
   /* If PF13 was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf13) /* PF13 pressed*/
    /* ------------------------------------------------------------*/
     /* If selection was entered and is not a "S", indicate that*/
     /* only "S" may be used to select a line.*/
    /* ------------------------------------------------------------*/
    if (FF0JM001.FF0JMSEL[FF0JWMIX] > " " /* Selection was entered*/
     && FF0JM001.FF0JMSEL[FF0JWMIX] != "S") /* and is not a "S"*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/
    end
    /* ------------------------------------------------------------*/
     /* If more than one selection entered indicate that only one*/
     /* selection may be made.*/
    /* ------------------------------------------------------------*/
    if (FF0JM001.FF0JMSEL[FF0JWMIX] > " ") /* Selection made*/
      if (FF0JW00.FF0JWSSW == "Y") /* Selection already made*/
        FFWREC.XXXMODID = "530"; /* Module identification*/
        set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(136); /* Indicate more than one line selected*/
      else
        FF0JW00.FF0JWSSW = "Y"; /* Indicate selection made*/
        FF0JW00.FF0JWSSI = FF0JW00.FF0JWMIX; /* Save select index*/
      end
    end
    /* ------------------------------------------------------------*/
     /* If a completed date has been changed indicate that changes*/
     /* not allowed with PF13.*/
    /* ------------------------------------------------------------*/
    if (FF0JM001.FF0JMCDT[FF0JWMIX] != FF0JW01.FF0JWCDT[FF0JWMIX])
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FF0JM001.FF0JMCDT[FF0JWMIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(111); /* Modification not allowed*/
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed verify any changed completed dates*/
   /* & do not allow selection to be made.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.FF0JMSEL[FF0JWMIX] > " ") /* Selection entered*/
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FF0JM001.FF0JMSEL[FF0JWMIX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(200); /* Select not allowed*/
  end

  if (FF0JM001.FF0JMCDT[FF0JWMIX] != FF0JW01.FF0JWCDT[FF0JWMIX])
    if (FF0JM001.FF0JMCDT[FF0JWMIX] > " ") /* Completed dt entered*/
      set TA2REC empty; /* Clear row storage area*/
      TA2REC.TA2GRGB = FF0JM001.FF0JMCDT[FF0JWMIX];
      if (TA2REC.TA2GRBD1 == "-")
        TA2REC.TA2GRTYP = "B"; /* Type MM-DD-YY*/
      else
        TA2REC.TA2GRTYP = "A"; /* Type MMDDYY*/
        TA2REC.TA2GRGA = FF0JM001.FF0JMCDT[FF0JWMIX];
      end
      TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
      try
        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Date routine*/
      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (TA2RTNCD == 0) /* Normal return code*/
          FF0JM001.FF0JMCDT[FF0JWMIX] = TA2REC.TA2GRGB;
        else /* Abnormal return code*/
          FFWREC.XXXMODID = "530"; /* Module identification*/
          set FF0JM001.FF0JMCDT[FF0JWMIX] cursor, bold; /* Highlight*/
          converseLib.validationFailed(118); /* Indicate missing or invalid*/
        end
      else
        TAEREC.TAEDESC1 = sysVar.errorCode;
        TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "530 EDIT COMPLETED DATE";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis rtn*/
        FFWREC.XXXMODID = "530"; /* Module identification*/
        converseLib.validationFailed(1); /* System error occured*/
        exit stack; /* Exit to display map*/
      end
    end
  end


end // end FF0J530

// Process valid input request
Function FF0J600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF0JW00.FF0JWFMS = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.YPGCD != FFWREC.YPGCD /* Type group changed*/
   || FF0JM001.XPLCD != FFWREC.XPLCD) /* or line changed*/
    FFWREC.YPGCD = FF0JM001.YPGCD;
    FFWREC.YPGABRV = FF0JM001.YPGABRV;
    FFWREC.XPLCD = FF0JM001.XPLCD;
    FFWREC.XPLABRV = FF0JM001.XPLABRV;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/
    if (FFWREC.YPGCD != "  " /* Type group entered*/
     && FFWREC.XPLCD != "  ") /* and line entered*/
      FF0J111(); /* Purge any temp storage*/
      FF0JW00.FF0JWRDS = "Y"; /* Request for data switch*/
    else
      FF0JW00.FF0JWRDS = "N"; /* Request for data switch*/
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    FF0JW00.XXXTSPAG = FF0JW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    FF0JW00.XXXTSPAG = FF0JW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If PF13 was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)
    if (FF0JW00.FF0JWSSW == "Y") /* Selection was made*/
      FFWREC.XPCCD = FF0JW01.XPCCD[FF0JWSSI];
      if (FFWREC.XPCCD in XPCTBL.XPCCD)
        FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
      COMMAREA.CATOAP = "FF0B"; /* To application*/
      FF0J111(); /* Purge any temporary storage*/
      XSFFS01(); /* Transfer to application*/
      /* ------------------------------------------------------------*/
       /* If transfer request failed display returned error message.*/
      /* ------------------------------------------------------------*/
      COMMAREA.CATOAP = "    "; /* Clear to application*/
      exit stack; /* Exit to display map*/
    else
      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(154); /* Indicate selection missing*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If ENter was pressed.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date & time*/

  FF0JW00.FF0JWMIX = 1;
  while (FF0JW00.FF0JWMIX <= 15)
    if (FF0JM001.FF0JMCDT[FF0JWMIX] != FF0JW01.FF0JWCDT[FF0JWMIX])
      FF0JW00.FF0JWUPS = "Y"; /* Set update switch*/
      FF0J610(); /* Update FF2REC*/
      VGVar.handleSysLibraryErrors = 1;
      sysLib.commit(); /* CommitDB2*/
    end
    FF0JW00.FF0JWMIX = FF0JW00.FF0JWMIX + 1; /* Increment*/
  end

  if (FF0JW00.FF0JWUPS == "Y")
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Update successful*/
    exit stack; /* Exit to display map*/
  end


end // end FF0J600

// Update FF2REC row
Function FF0J610()
   /* ------------------------------------------------------------*/
   /* Select unique FF2REC row from table.*/
   /* ------------------------------------------------------------*/

  FF0JS01(); /* Select unique FF2REC*/

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  FF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  FF2REC.ZZZCHGCT = FF0JW01.ZZZCHGCT[FF0JWMIX];

   /* ------------------------------------------------------------*/
   /* Reformat completed date from MM-DD-YY map format to*/
   /* CCYYMMDD format for data base update.*/
   /* ------------------------------------------------------------*/

  if (FF0JM001.FF0JMCDT[FF0JWMIX] == "        ")
    FF2REC.FF2CATDT = 0;
  else
    set TA2REC empty; /* Clear row storage area*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Option*/
    TA2REC.TA2GRTYP = "B"; /* Type MM-DD-YY*/
    TA2REC.TA2GRGB = FF0JM001.FF0JMCDT[FF0JWMIX];
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date routine*/
    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (TA2RTNCD == 0) /* Normal return code*/
        FF2REC.FF2CATDT = TA2REC.TA2GRGGN;
        FF0JW01.FF0JWCDT[FF0JWMIX] = TA2REC.TA2GRGB;
      else
        TAEREC.TAEDESC1 = sysVar.errorCode;
        TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "610 ADD CENTURY TO DATE";
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        FFWREC.XXXMODID = "610"; /* Module identification*/
        converseLib.validationFailed(1); /* Exit to display map*/
        exit stack; /* Exit to display map*/
      end
    else
      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "610 ADD CENTURY TO DATE";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      FFWREC.XXXMODID = "610"; /* Module identification*/
      converseLib.validationFailed(1); /* Exit to display map*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Update the requested row on the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("U ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all changes*/
      FF0JW00.FF0JWRDS = "Y"; /* Request for data switch*/
      FFWREC.XXXMODID = "610"; /* Module identification*/
      converseLib.validationFailed(20); /* Row updtd by another*/
      exit stack; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE XREF TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0J610

// Select unique FF2REC row
Function FF0JS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YPGCD = FFWREC.YPGCD;
  FF2REC.YSMXDV = "10";
  FF2REC.XPCCD = FF0JM001.XPCCD[FF0JWMIX];

   /* ------------------------------------------------------------*/
   /* Select unique FF2REC row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      FF0JW00.FF0JWRDS = "Y"; /* Request for data switch*/
      FFWREC.XXXMODID = "S01"; /* Module identification*/
      converseLib.validationFailed(20); /* Row updtd by another*/
      exit stack; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT XREF ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0JS01

//*** RECORD=FF0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0JW00 type basicRecord
  10 FF0JWMIX FF0JWMIX ; 
  10 FF0JWFMS FF0JWFMS ; 
  10 FF0JWRDS FF0JWRDS ; 
  10 FF0JWECS FF0JWECS ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 CACHGFL CACHGFL ; 
  10 FF0JWWDT FF0JWWDT ; 
    15 FF0JWWCC FF0JWWCC ; 
    15 FF0JWWYM FF0JWWYM ; 
      20 FF0JWWYY FF0JWWYY ; 
      20 FF0JWWMM FF0JWWMM ; 
  10 FF0JWCMD FF0JWCMD ; 
    15 FF0JWCCC FF0JWCCC ; 
    15 FF0JWCYY FF0JWCYY ; 
    15 FF0JWCMM FF0JWCMM ; 
    15 FF0JWCDD FF0JWCDD ; 
  10 FF0JWVDT FF0JWVDT ; 
    15 FF0JWVYM FF0JWVYM ; 
    15 FF0JWVDD FF0JWVDD ; 
  10 FF0JWSSW FF0JWSSW ; 
  10 FF0JWSSI FF0JWSSI ; 
  10 FF0JWUPS FF0JWUPS ; 
end // end FF0JW00

//*** RECORD=FF0JW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0JW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(554) ; 
    10 FF0JWSEL FF0JWSEL [14] ; 
    10 XPCCD XPCCD [15] ; 
    10 XPCDESC XPCDESC [15] ; 
    10 FF0JWCDT FF0JWCDT [15] ; 
    10 FF2REVDT FF2REVDT [15] ; 
    10 ZZZCHGCT ZZZCHGCT [15] ; 
end // end FF0JW01

// completed century
DataItem FF0JWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// completed day
DataItem FF0JWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// complete date mmddyy
DataItem FF0JWCDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// completed ccyymmdd
DataItem FF0JWCMD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// completed month
DataItem FF0JWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// completed year
DataItem FF0JWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem FF0JWECS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF0JWFMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map lines index
DataItem FF0JWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0JWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work sheet selection indicator
DataItem FF0JWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save select index
DataItem FF0JWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection switch
DataItem FF0JWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update switch
DataItem FF0JWUPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validate day
DataItem FF0JWVDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate date
DataItem FF0JWVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// validate year/month
DataItem FF0JWVYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FF0JWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FF0JWWDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FF0JWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month
DataItem FF0JWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FF0JWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

