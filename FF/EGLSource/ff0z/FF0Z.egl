package ff0z;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fe.common.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0Z ****
// This application allows the user to submit a Master Produc-
// tion Forecast Update via a batch job. This job will be run
// immediately. The application must verify that a model has
// been selected (FF0W) for a master before allowing the user
// to submit the job.
// 
// The user must specify the "range". He may update all lines
// by leaving the other fields blank, or he can specify a
// "type" and "line", or a "type" and "category". The "update
// from selected model test run" must be "y" for the batch job
// to be submitted.
// 
// if the user doesn't know the code for a "line", "type", or
// "category", he can enter a "?" to ask for help. The program
// will bring up a pop-up window to show a list of lines, types
// or categories. so that he can choose from there.
// 
// The user may exit to any allowed application, via fast path
// or PF keys.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/22/89  CNEWMA  New application.
// FF#14    06/01/90  RHETRI  Add msg and default switch
// FF#0     07/03/90  LDELUH  Change to allow user to enter
//                            "*" in line code field.
// FF#134   08/14/90  SFORD   Set job complete msg = 'y'
// FF#0     08/17/90  RHETRI  Add edit to force line or cat to
//                            be entered.
// FF2033   09/04/90  RHETRI  Chg date edit to allow any date.
// FIX      04/19/91  MWALKE  Chg edit criteria on type group
//                            in ff0z510
// FF-338   06/30/93  KGRAHA  Change screen title to UPDATE
//                            PRODUCTION FORECAST FROM MODEL
//                            and change question description
//                            to UPDATE PRODUCTION FORECAST
//                            FROM MODEL (Y/N):.
// FF       09/07/93  mdange  Add logic to submit either test
//                            or production JCL.
// FF175    12/12/96  DSMITH  Changed date range fill character
//                            to '0'.
// FF1631E  07/14/98  BMUSTI  Modify the on-line mastering
//                            screen FF0Z.
//          09/01/98  CWHIT1  Fix date in ff0z517, has euro cal
// FF1641   09/30/98  RKUDPI  Changed for 3-season project
// *********************
Program FF0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0ZW00 FF0ZW00; // record
  FF0ZW01 FF0ZW01; // record
  FF0ZW02 FF0ZW02; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG1REC FG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use XDMTBL; // table
  use FF0ZT; // table
  use FF0ZT5O {deleteAfterUse = yes}; // table
  use FE0DTBL {deleteAfterUse = yes}; // table
  use FF0ZM.FF0ZM001,  // forms
      FF0ZM.TA0PM001, 
      FF0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0ZM001 initial; /* M001 input/output*/
    set FF0ZW00 empty; /* Working storage*/
    set FF0ZW01 empty; /* M001 display storage*/
    set FF0ZW02 empty; /* Jcl storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0ZW00.FF0ZWSWF = "Y"; /* Format the map switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    if (FFWREC.YPGCD == "  ") /* No type group*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0Z001; /* Converse the main process*/


    FF0Z001: FF0Z001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0Z001; /* Converse the main process*/


  end // end main
end // end FF0Z

// Inquire/maintain a table row
Function FF0Z001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0Z200(); /* Format and display the map*/

  FF0Z300(); /* Check attention identifier*/

  FF0Z400(); /* Reset fields to normal intensity*/

  FF0Z500(); /* Verify the entered data*/

  FF0Z600(); /* Process valid input request*/


end // end FF0Z001

// Format and converse the map
Function FF0Z200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF0ZW00.FF0ZWSWF == "Y") /* Map must be formatted*/
      FF0Z210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0ZM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0ZM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF0ZM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF0ZM001 alarm; /* Indicate sound alarm*/

  end

  converse FF0ZM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF0ZM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0ZM001.CAITEM; /* Application data*/


end // end FF0Z200

// Format the display data
Function FF0Z210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0ZM001 initial; /* M001 input/output area*/

  FF0ZW00.FF0ZWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FF0ZM001.FFZBYYMM = FFWREC.FFABEGMO; /* date range beg month*/
  FF0ZM001.FFZEYYMM = FFWREC.FFAENDMO; /* date range end month*/
  FF0ZM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF0ZM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FF0ZM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF0ZM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FF0ZM001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF0ZM001.XPCABRV = FFWREC.XPCABRV; /* Category short description*/
  FF0ZM001.FF0ZSES1 = FF0ZW01.FF0ZSES1; /* Season Code*/
  FF0ZM001.FF0ZSES2 = FF0ZW01.FF0ZSES2; /* Season Code*/
  FF0ZM001.FF0ZSES3 = FF0ZW01.FF0ZSES3; /* Season Code*/
  FF0ZM001.FF0ZSES4 = FF0ZW01.FF0ZSES4; /* Season Code*/

  FF0ZM001.FF0ZCLJS = FF0ZW01.FF0ZCLJS; /* CLEANUP SWITCH*/

  if (FF0ZM001.FF0ZCLJS == "Y")
    set FF0ZM001.FF0ZCAU1 protect, bold;
    set FF0ZM001.FF0ZCAU2 protect, bold;
  else
    FF0ZM001.FF0ZCAU1 = "  ";
    FF0ZM001.FF0ZCAU2 = "  ";
    set FF0ZM001.FF0ZCAU1 protect, invisible;
    set FF0ZM001.FF0ZCAU2 protect, invisible;
  end

end // end FF0Z210

// Check attention identifier
Function FF0Z300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    FF0ZW00.FF0ZWSWF = "Y"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0ZM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0ZM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FF0Y"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF0W"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0X"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FF01"; /* TO application*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "FG06"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0Z300

// Reset highlighted fields
Function FF0Z400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0ZM001.FF0ZMSJS initialAttributes; /* Submit job switch*/
  set FF0ZM001.XPLCD initialAttributes; /* Product line code*/
  set FF0ZM001.YPGCD initialAttributes; /* Type group code*/
  set FF0ZM001.XPCCD initialAttributes; /* Category code*/
  set FF0ZM001.FFZBYYMM initialAttributes; /* date range beg month*/
  set FF0ZM001.FFZEYYMM initialAttributes; /* date range end month*/

  set FF0ZM001.FF0ZSES1 initialAttributes; /* Season Code*/
  set FF0ZM001.FF0ZSES2 initialAttributes; /* Season Code*/
  set FF0ZM001.FF0ZSES3 initialAttributes; /* Season Code*/
  set FF0ZM001.FF0ZSES4 initialAttributes; /* Season Code*/

  set FF0ZM001.FF0ZCLJS initialAttributes; /* Cleanup Switch*/
  set FF0ZM001.FF0ZCAU1 initialAttributes; /* Cautionary msg line 1*/
  set FF0ZM001.FF0ZCAU2 initialAttributes; /* Cautionary msg line 2*/

  set FF0ZM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF0ZM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPLCD == "?" /* Product line list requested*/
   || FF0ZM001.YPGCD == "?" /* or type group liest requested*/
   || FF0ZM001.XPCCD == "?") /* or category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0ZM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF0ZM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF0ZM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF0ZM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0ZM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.YPGCD == "?") /* Type group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0ZM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF0ZM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FF0ZM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0ZM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0ZM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF0ZM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF0ZM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF0ZM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0ZM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF0ZM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF0Z400

// Verify the entered data
Function FF0Z500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0ZM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify Key data*/
   /* ------------------------------------------------------------*/

  FF0Z510(); /* verify key data*/

   /* ------------------------------------------------------------*/
   /* Verify relationships*/
   /* ------------------------------------------------------------*/

  FF0Z520(); /* verify relationships*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
   /* BGN TCS*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    FF0ZM001.FF0ZMRS1 = "N";
    exit stack; /* Exit to display map*/
  end
   /* END TCS*/


end // end FF0Z500

// Verify Key Data
Function FF0Z510()
   /* BGN TCS*/
   /* ------------------------------------------------------------*/
   /* If Cleanup switch was entered, verify the entered switch.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.FF0ZCLJS != " ") /* Cleanup switch entered*/

    if (FF0ZM001.FF0ZCLJS != "Y"
     && FF0ZM001.FF0ZCLJS != "N")

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(153); /* Indicate value must be 'y' or 'n'*/
      set FF0ZM001.FF0ZCLJS cursor, bold; /* Highlighted*/

    end

  else
    FF0ZM001.FF0ZCLJS = "N"; /* Default to 'n'*/
  end

   /* END TCS*/
   /* ------------------------------------------------------------*/
   /* If Submit switch was entered, verify the entered switch.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.FF0ZMSJS != " ") /* Submit job switch entered*/

    if (FF0ZM001.FF0ZMSJS != "Y"
     && FF0ZM001.FF0ZMSJS != "N")

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(153); /* Indicate value must be 'y' or 'n'*/
      set FF0ZM001.FF0ZMSJS cursor, bold; /* Highlighted*/

    end

  else
    FF0ZM001.FF0ZMSJS = "N"; /* Default to 'n'*/
  end

   /* BGN TCS*/
   /* --------------------------------------------------------------------*/
   /* Ensure at least one season needs to be entered. Validate*/
   /* that the entered season(s) against the FE0DTBL.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.FF0ZSES1 == "    "
   && FF0ZM001.FF0ZSES2 == "    "
   && FF0ZM001.FF0ZSES3 == "    "
   && FF0ZM001.FF0ZSES4 == "    "
   && FF0ZM001.XPLCD != "11")
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0ZM001.FF0ZSES1 cursor, bold; /* Highlight*/
    set FF0ZM001.FF0ZSES2 bold; /* Highlight*/
    set FF0ZM001.FF0ZSES3 bold; /* Highlight*/
    set FF0ZM001.FF0ZSES4 bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    FF0ZW00.FF0ZW-SESN-ENTERED = "N";

  else
    FF0ZW00.FF0ZW-SESN-ENTERED = "Y";
  end


  FF0Z517(); /* Read DFCAST.VFFCTL01*/

  if (FF0ZW00.FF0ZW-SESN-ENTERED == "Y"
   && FF0ZM001.XPLCD != "11")
    FF0ZW00.FF0ZW-LEAST-BEG-MO = FF0ZW00.FF0ZW-BUY-CYM;
    if (FF0ZM001.FF0ZSES1 != "    ")
      FF0ZW00.FF0ZW-SESN-NUM = 1;
      FF0ZW00.FF0ZW-SESN-YR = FF0ZM001.FF0ZSES1;
      FF0ZW00.FF0ZW-BEG-MO = 000000;
      FF0ZS-VAL-SEASON();
    end
    if (FF0ZM001.FF0ZSES2 != "    ")
      FF0ZW00.FF0ZW-SESN-NUM = 2;
      FF0ZW00.FF0ZW-SESN-YR = FF0ZM001.FF0ZSES2;
      FF0ZW00.FF0ZW-BEG-MO = 000000;
      FF0ZS-VAL-SEASON();
    end
    if (FF0ZM001.FF0ZSES3 != "    ")
      FF0ZW00.FF0ZW-SESN-NUM = 3;
      FF0ZW00.FF0ZW-SESN-YR = FF0ZM001.FF0ZSES3;
      FF0ZW00.FF0ZW-BEG-MO = 000000;
      FF0ZS-VAL-SEASON();
    end
    if (FF0ZM001.FF0ZSES4 != "    ")
      FF0ZW00.FF0ZW-SESN-NUM = 4;
      FF0ZW00.FF0ZW-SESN-YR = FF0ZM001.FF0ZSES4;
      FF0ZW00.FF0ZW-BEG-MO = 000000;
      FF0ZS-VAL-SEASON();
    end
  end
   /* END TCS*/
   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPCCD != " ") /* category entered*/

    if (FF0ZM001.XPCCD in XPCTBL.XPCCD /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      FF0ZM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      FF0ZM001.XPCABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FF0ZM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/

    end

  else
    FF0ZM001.XPCABRV = " "; /* Abbreviation*/

  end

   /* ------------------------------------------------------------*/
   /* If line code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPLCD != " ") /* line code entered*/
    if (FF0ZM001.XPLCD == "*") /* line code wildcarded*/
      FF0ZM001.XPLABRV = "ALL"; /* Abbreviation*/
    else
      if (FF0ZM001.XPLCD in XPLTBL.XPLCD /* Code in table*/
       && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        FF0ZM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/
        FF0ZM001.XPLABRV = " "; /* Abbreviation*/
        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FF0ZM001.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/
      end
    end
  else
    FF0ZM001.XPLABRV = " "; /* Abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If category was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.XPCCD == " " /* category missing*/
   && FF0ZM001.XPLCD == " ") /* line code missing*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0ZM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If type code was entered, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (FF0ZM001.YPGCD != " ") /* line code entered*/
    if (FF0ZM001.YPGCD == "*") /* line code wildcarded*/
      FF0ZM001.YPGABRV = "ALL"; /* Abbreviation*/
    else
      if (FF0ZM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
       && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
       && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and flag eq yes*/

        FF0ZM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        FF0ZM001.YPGABRV = " "; /* Abbreviation*/

        FFWREC.XXXMODID = "510"; /* Module identification*/
        set FF0ZM001.YPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(118); /* Indicate missing or invalid*/

      end
    end
  else
    FF0ZM001.YPGABRV = " "; /* Abbreviation*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF0ZM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
  end

   /* ------------------------------------------------------------*/
   /* Verify Date Range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FF0ZM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FF0ZM001.FFZEYYMM; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/

    FFWREC.XXXMODID = "400"; /* Module identification*/
    set FF0ZM001.FFZEYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "400"; /* Module identification*/
    set FF0ZM001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that a Model was selected through FF0W first.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Open PMHDR*/
   /* ------------------------------------------------------------*/

  FF0ZW00.FF0ZWECF = "N"; /* initialize flag*/
  FF0ZW00.FF0ZWCNT = 0; /* initialize counter*/

  FG1REC.FG1BEGMO = FFZREC.FFZBEGMO; /* beg date*/
  FG1REC.FG1ENDMO = FFZREC.FFZENDMO; /* end date*/
  FG1REC.XMSCD = "03"; /* model selected status code*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/

  FF0Z512(); /* Open PMHDR*/

   /* ------------------------------------------------------------*/
   /* Until end of cursor, fetch rows PMHDR*/
   /* ------------------------------------------------------------*/

  while (FF0ZW00.FF0ZWECF != "Y") /* until end of cursor*/
    FF0Z514(); /* Fetch PMHDR*/
  end

   /* ------------------------------------------------------------*/
   /* Close PMHDR*/
   /* ------------------------------------------------------------*/

  FF0Z516(); /* Close PMHDR*/

   /* ------------------------------------------------------------*/
   /* If no model selected, indicate no model selected yet.*/
   /* ------------------------------------------------------------*/

  if (FF0ZW00.FF0ZWCNT == 0) /* no model selected yet*/
    FFWREC.XXXMODID = "510"; /* module identification*/
    FFWREC.XXXMSGNO = 249; /* 'model not yet selected'*/
    converseLib.validationFailed(249); /* 'model not yet selected'*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If more than one model found, indicate severe error.*/
   /* ------------------------------------------------------------*/

  if (FF0ZW00.FF0ZWCNT > 1) /* more than one model selected*/
    FFWREC.XXXMODID = "510"; /* module identification*/
    converseLib.validationFailed(1); /* 'unexpected error, call systems'*/
    exit stack;
  end


end // end FF0Z510

// Open FFSTY
Function FF0Z512()
   /* ------------------------------------------------------------*/
   /* Open PMHDR*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "512"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z512

// Fetch FFSTY
Function FF0Z514()
   /* ------------------------------------------------------------*/
   /* Fetch Row - PMHDR*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, Return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      FF0ZW00.FF0ZWCNT = FF0ZW00.FF0ZWCNT + 1; /* add one to counter*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        FF0ZW00.FF0ZWECF = "Y"; /* indicate end of rows*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "514"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z514

// Close Cursor - FFSTY
Function FF0Z516()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "516"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z516

// Verify Relationships
Function FF0Z517()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in FF0ZW00.FF0ZW-BUY-DT*/
   /* ------------------------------------------------------------*/

  FF0Z518(); /* get futures cutoff date*/

  FF0ZW00.FF0ZW-BUY-DT = FF1REC.FF1FUTDT;

  FF0ZW00.FF0ZW-BUY-MM = FF0ZW00.FF0ZW-BUY-MM + 6;
   /* Buy month is futures + 5 ; We require buy-mo + 1 as starting pt.*/
   /* Also taken into consideration, the offset for Europe data alignment*/
   /* Actually it should not have the  Europe date offset*/
  if (FF0ZW00.FF0ZW-BUY-MM > 12)
    FF0ZW00.FF0ZW-BUY-MM = FF0ZW00.FF0ZW-BUY-MM - 12;
    if (FF0ZW00.FF0ZW-BUY-YY == 99)
      FF0ZW00.FF0ZW-BUY-CC = FF0ZW00.FF0ZW-BUY-CC + 1;
      FF0ZW00.FF0ZW-BUY-YY = 00;
    else
      FF0ZW00.FF0ZW-BUY-YY = FF0ZW00.FF0ZW-BUY-YY + 1;
    end
  end

  FF0ZW00.FF0ZW-GRTST-END-MO = FF0ZW00.FF0ZW-BUY-CYM;
  FF0ZW00.FF0ZW-GRTST-END-MM = FF0ZW00.FF0ZW-GRTST-END-MM + 11;
  if (FF0ZW00.FF0ZW-GRTST-END-MM > 12)
    FF0ZW00.FF0ZW-GRTST-END-MM = FF0ZW00.FF0ZW-GRTST-END-MM - 12;
    if (FF0ZW00.FF0ZW-GRTST-END-YY == 99)
      FF0ZW00.FF0ZW-GRTST-END-CC = FF0ZW00.FF0ZW-GRTST-END-CC + 1;
      FF0ZW00.FF0ZW-GRTST-END-YY = 00;
    else
      FF0ZW00.FF0ZW-GRTST-END-YY = FF0ZW00.FF0ZW-GRTST-END-YY + 1;
    end
  end

end // end FF0Z517

// Verify Relationships
Function FF0Z518()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "126"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z518

// Verify Relationships
Function FF0Z520()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If there are no errors*/

    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    if (FF0ZM001.XPCCD == " ") /* category not entered*/
      FF2REC.XPCCD = "*"; /* category*/
    else
      FF2REC.XPCCD = FF0ZM001.XPCCD; /* category*/
    end

    if (FF0ZM001.XPLCD == " ") /* line not entered*/
      FF2REC.XPLCD = "*"; /* line*/
    else
      FF2REC.XPLCD = FF0ZM001.XPLCD; /* line*/
    end

    FF2REC.YSMXDV = "*"; /* division*/

    if (FF0ZM001.YPGCD == " ") /* type grp not entered*/
      FF2REC.YPGCD = "*"; /* type grp*/
    else
      FF2REC.YPGCD = FF0ZM001.YPGCD; /* type grp*/
    end

    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/

    FF0Z522(); /* Open cursor for DFCAST.VFFXRF01*/

    FF0Z524(); /* fetch FFXRF*/

    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/

      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      if (FF0ZM001.XPCCD != " ") /* category entered*/
        set FF0ZM001.XPCCD bold; /* highlight*/
      end
      if (FF0ZM001.XPLCD != " ") /* line entered*/
        set FF0ZM001.XPLCD cursor, bold; /* highlight*/
      end
      converseLib.validationFailed(203); /* Indicate invalid relationship*/

    end

    FF0Z526(); /* close cursor*/

  end


end // end FF0Z520

// Open FFXRF
Function FF0Z522()
   /* ------------------------------------------------------------*/
   /* Open FFXRF*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z522

// Fetch FFXRF
Function FF0Z524()
   /* ------------------------------------------------------------*/
   /* Fetch Next Row Xref Table*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or not found, Return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "524"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z524

// Close Cursor - FFXRF
Function FF0Z526()
   /* ------------------------------------------------------------*/
   /* Close FFXRF*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "526"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0Z526

// Process valid input request
Function FF0Z600()
   /* ------------------------------------------------------------*/
   /* Save fields that were entered by the user.*/
   /* ------------------------------------------------------------*/

  FF0ZW00.FF0ZWSWF = "Y"; /* Format the map switch*/
  FF0ZW01.FFZBYYMM = FF0ZM001.FFZBYYMM; /* beg month*/
  FF0ZW01.FFZEYYMM = FF0ZM001.FFZEYYMM; /* end month*/
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* beg month*/
  FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* end month*/
  FFWREC.XPLCD = FF0ZM001.XPLCD; /* line code*/
  FFWREC.XPLABRV = FF0ZM001.XPLABRV; /* line abrv*/
  FFWREC.YPGCD = FF0ZM001.YPGCD; /* type code*/
  FFWREC.YPGABRV = FF0ZM001.YPGABRV; /* type abrv*/
  FFWREC.XPCCD = FF0ZM001.XPCCD; /* category code*/
  FFWREC.XPCABRV = FF0ZM001.XPCABRV; /* category abrv*/
  FF0ZW01.FF0ZMSJS = FF0ZM001.FF0ZMSJS; /* submit job switch*/
  FF0ZW01.FF0ZCLJS = FF0ZM001.FF0ZCLJS; /* CLEANUP  switch*/

  FF0ZW01.FF0ZSES1 = FF0ZM001.FF0ZSES1; /* Season Code*/
  FF0ZW01.FF0ZSES2 = FF0ZM001.FF0ZSES2; /* Season Code*/
  FF0ZW01.FF0ZSES3 = FF0ZM001.FF0ZSES3; /* Season Code*/
  FF0ZW01.FF0ZSES4 = FF0ZM001.FF0ZSES4; /* Season Code*/

   /* ------------------------------------------------------------*/
   /* If submit job switch eq 'y' and key has changed, submit the*/
   /* the JCL to run the batch job.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGMO != FF0ZW02.FFZBEGMO /* beg month changed*/
   || FFZREC.FFZENDMO != FF0ZW02.FFZENDMO /* end month changed*/
   || FF0ZM001.XPLCD != FF0ZW02.XPLCD     /* Product line changed*/
   || FF0ZM001.YPGCD != FF0ZW02.YPGCD     /* or type group changed*/
   || FF0ZM001.XPCCD != FF0ZW02.XPCCD     /* or category changed*/
   || FF0ZM001.FF0ZSES1 != FF0ZW02.FF0ZSES1
   || FF0ZM001.FF0ZSES2 != FF0ZW02.FF0ZSES2
   || FF0ZM001.FF0ZSES3 != FF0ZW02.FF0ZSES3
   || FF0ZM001.FF0ZSES4 != FF0ZW02.FF0ZSES4)


    if (FF0ZM001.FF0ZMSJS == "Y") /* Submit Job*/

      if (FF0ZM001.FF0ZCLJS == "Y")
        if (FF0ZM001.FF0ZMRS1 == "Y")
          FF0ZM001.FF0ZCAU1 = "  ";
          FF0ZM001.FF0ZCAU2 = "  ";
          FF0Z610(); /* Submit a batch job*/
          FF0ZM001.FF0ZMRS1 = "N";
          FF0ZM001.FF0ZCLJS = "N";
          FF0ZM001.FF0ZMSJS = "N";
          FF0ZW01.FF0ZMSJS = "N";
        else
          FFWREC.XXXMODID = "600";
          converseLib.validationFailed();
          set FF0ZM001.FF0ZCLJS cursor, bold;
          FF0ZW00.FF0ZCAU1-PART-1 = " YOU HAVE REQUESTED ALL RECORDS OF TYPE:";
          FF0ZW00.FF0ZCAU1-TYPE = FF0ZM001.YPGCD;
          FF0ZW00.FF0ZCAU1-LINE-LBL = ", LINE:";
          FF0ZW00.FF0ZCAU1-LINE = FF0ZM001.XPLCD;
          FF0ZW00.FF0ZCAU1-CAT-LBL = ", CAT:";
          FF0ZW00.FF0ZCAU1-CAT = FF0ZM001.XPCCD;
          FF0ZW00.FF0ZCAU1-PART-2 = " TO BE DELETED  ";
          FF0ZM001.FF0ZCAU1 = FF0ZW00.FF0ZCAU1;
          FF0ZM001.FF0ZCAU2 = " PRESS <ENTER> TO CONFIRM";
          set FF0ZM001.FF0ZCAU1 protect, bold;
          set FF0ZM001.FF0ZCAU2 protect, bold;
          FF0ZM001.FF0ZMRS1 = "Y";
          exit stack;
        end
      else
        if (FF0ZM001.FF0ZMRS1 == "Y")
          FF0ZM001.FF0ZMRS1 = "N";
          FF0ZM001.FF0ZCAU1 = "  ";
          FF0ZM001.FF0ZCAU2 = " THE CLEANUP STEP WILL NOT OCCUR,PRESS <ENTER> TO CONFIRM";
          set FF0ZM001.FF0ZCAU1 protect, bold;
          set FF0ZM001.FF0ZCAU2 protect, bold;
          converseLib.validationFailed();
          exit stack;
        else
          FF0ZM001.FF0ZCAU1 = "  ";
          FF0ZM001.FF0ZCAU2 = "  ";
          set FF0ZM001.FF0ZCAU1 protect, bold;
          set FF0ZM001.FF0ZCAU2 protect, bold;
          FF0Z610(); /* Submit a batch job*/
          FF0ZM001.FF0ZMRS1 = "N";
          FF0ZM001.FF0ZCLJS = "N";
          FF0ZM001.FF0ZMSJS = "N";
        end
      end
    else

      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(302); /* Switch must be 'Y' to prcs*/
      set FF0ZM001.FF0ZMSJS cursor; /* set cursor*/
      FF0ZM001.FF0ZMRS1 = "N";
      exit stack; /* Exit to display map*/

    end

  else

    if (FF0ZM001.FF0ZMSJS == "Y") /* Submit Job*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 313; /* Forecast already submitted*/

    else

      FFWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(302); /* Switch must be 'Y' to prcs*/
      set FF0ZM001.FF0ZMSJS cursor; /* set cursor*/

      exit stack; /* Exit to display map*/
    end

  end


end // end FF0Z600

// Submit a batch job
Function FF0Z610()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0Z611(); /* format production jcl*/
    else
      FF0Z612(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "610"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0Z610

// Submit Prod JCL FF7101
Function FF0Z611()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0ZT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF0ZW02.FFZBEGMO = FFZREC.FFZBEGMO; /* Actual buy month*/
      FF0ZW02.FFZENDMO = FFZREC.FFZENDMO; /* Actual buy month*/
      FF0ZW02.YPGCD = FF0ZM001.YPGCD; /* Type group*/
      FF0ZW02.XPLCD = FF0ZM001.XPLCD; /* Product line*/
      FF0ZW02.XPCCD = FF0ZM001.XPCCD; /* Category*/

   /* bgn tcs*/
      if (FF0ZM001.XPLCD != "11")
        FF0ZW02.FF0ZSES1 = FF0ZM001.FF0ZSES1; /* Season Code*/
        FF0ZW02.FF0ZSES2 = FF0ZM001.FF0ZSES2; /* Season Code*/
        FF0ZW02.FF0ZSES3 = FF0ZM001.FF0ZSES3; /* Season Code*/
        FF0ZW02.FF0ZSES4 = FF0ZM001.FF0ZSES4; /* Season Code*/
        if (FF0ZW00.FF0ZW-SESN-ENTERED == "Y")
          FF0ZW02.FF0ZSNRN = "S";
        end
      else
        FF0ZW02.FF0ZSES1 = "  ";
        FF0ZW02.FF0ZSES2 = "  ";
        FF0ZW02.FF0ZSES3 = "  ";
        FF0ZW02.FF0ZSES4 = "  ";
        FF0ZW02.FF0ZSNRN = "R";
      end

      FF0ZW02.FF0ZCLJS = FF0ZM001.FF0ZCLJS; /* Season Code*/
   /* end tcs*/

      TA6REC.TARJCL[TA6INDEX] = FF0ZW02.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0ZT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0ZT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0ZT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online msg*/

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end FF0Z611

// Submit test JCL FF7101
Function FF0Z612()
   /* submit test JCL*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0ZT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      FF0ZW02.FFZBEGMO = FFZREC.FFZBEGMO; /* Actual buy month*/
      FF0ZW02.FFZENDMO = FFZREC.FFZENDMO; /* Actual buy month*/
      FF0ZW02.YPGCD = FF0ZM001.YPGCD; /* Type group*/
      FF0ZW02.XPLCD = FF0ZM001.XPLCD; /* Product line*/
      FF0ZW02.XPCCD = FF0ZM001.XPCCD; /* Category*/

      /* bgn tcs*/
      if (FF0ZM001.XPLCD != "11")
        FF0ZW02.FF0ZSES1 = FF0ZM001.FF0ZSES1; /* Season Code*/
        FF0ZW02.FF0ZSES2 = FF0ZM001.FF0ZSES2; /* Season Code*/
        FF0ZW02.FF0ZSES3 = FF0ZM001.FF0ZSES3; /* Season Code*/
        FF0ZW02.FF0ZSES4 = FF0ZM001.FF0ZSES4; /* Season Code*/
        if (FF0ZW00.FF0ZW-SESN-ENTERED == "Y")
          FF0ZW02.FF0ZSNRN = "S";
        else
          FF0ZW02.FF0ZSNRN = "R";
        end
      else
        FF0ZW02.FF0ZSES1 = "  ";
        FF0ZW02.FF0ZSES2 = "  ";
        FF0ZW02.FF0ZSES3 = "  ";
        FF0ZW02.FF0ZSES4 = "  ";
        FF0ZW02.FF0ZSNRN = "R";
      end

      FF0ZW02.FF0ZCLJS = FF0ZM001.FF0ZCLJS; /* CLEANUP SWITCH*/
   /* end tcs*/
      TA6REC.TARJCL[TA6INDEX] = FF0ZW02.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0ZT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0ZT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0ZT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online msg*/

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end FF0Z612

// DETERMINES ESN FIELD IN ERROR
Function FF0ZS-DET-SESN-ERR()
   /* DETERMINES THE SEASON FIELD IN ERROR THAT NEEDS TO BE HIGHLIGHTED*/

  if (FF0ZW00.FF0ZW-SESN-NUM == 1)
    set FF0ZM001.FF0ZSES1 cursor, bold;
  else
    if (FF0ZW00.FF0ZW-SESN-NUM == 2)
      set FF0ZM001.FF0ZSES2 cursor, bold;
    else
      if (FF0ZW00.FF0ZW-SESN-NUM == 3)
        set FF0ZM001.FF0ZSES3 cursor, bold;
      else
        if (FF0ZW00.FF0ZW-SESN-NUM == 4)
          set FF0ZM001.FF0ZSES4 cursor, bold;
        end
      end
    end
  end

end // end FF0ZS-DET-SESN-ERR

// VALIDATE SEASON CODE
Function FF0ZS-VAL-SEASON()
  if (FF0ZW00.FF0ZW-YR not numeric)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(537);
    FF0ZS-DET-SESN-ERR();
    return;
  end

  if (FF0ZW00.FF0ZW-SESN in FE0DTBL.FE0DSESN)
    FF0ZW00.FF0ZW-BEG-MM = FE0DTBL.FE0DBMON[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(537);
    FF0ZS-DET-SESN-ERR();
    return;
  else
    FF0ZW00.FF0ZW-END-YY = FF0ZW00.FF0ZW-YR;
    FF0ZW00.FF0ZW-BEG-YY = FF0ZW00.FF0ZW-YR;
    FF0ZW00.FF0ZW-END-MM = FE0DTBL.FE0DEMON[sysVar.arrayIndex];
   /* IF FF0ZW00.FF0ZW-SESN = 'SP';*/
   /* IF FF0ZW00.FF0ZW-YR = 00;*/
   /* MOVE 99 TO FF0ZW00.FF0ZW-YR;*/
   /* ELSE;*/
   /* MOVE FF0ZW00.FF0ZW-YR TO FF0ZW00.FF0ZW-TEMP-YR;*/
   /* FF0ZW00.FF0ZW-TEMP-YR = FF0ZW00.FF0ZW-TEMP-YR - 1;*/
   /* MOVE FF0ZW00.FF0ZW-TEMP-YR TO FF0ZW00.FF0ZW-YR;*/
   /* END;*/
   /* END;*/
    if (FF0ZW00.FF0ZW-END-YY > 57)
      FF0ZW00.FF0ZW-END-CC = 19;
    else
      FF0ZW00.FF0ZW-END-CC = 20;
    end
    if (FF0ZW00.FF0ZW-BEG-YY > 57)
      FF0ZW00.FF0ZW-BEG-CC = 19;
    else
      FF0ZW00.FF0ZW-BEG-CC = 20;
    end
    if (FF0ZW00.FF0ZW-BEG-MO < FF0ZW00.FF0ZW-LEAST-BEG-MO)
      FF0ZW00.FF0ZW-LEAST-BEG-MO = FF0ZW00.FF0ZW-BEG-MO;
    end
  end

  if (FF0ZW00.FF0ZW-LEAST-BEG-MO < FF0ZW00.FF0ZW-BUY-CYM)
    if (FF0ZW00.FF0ZW-END-MO < FF0ZW00.FF0ZW-BUY-CYM)
      FFWREC.XXXMODID = "510";
      converseLib.validationFailed(540);
      FF0ZS-DET-SESN-ERR();
      return;
    else
      FF0ZW00.FF0ZW-LEAST-BEG-MO = FF0ZW00.FF0ZW-BUY-CYM;
    end
  end

  if (FF0ZW00.FF0ZW-BEG-MO > FF0ZW00.FF0ZW-GRTST-END-MO)
    FFWREC.XXXMODID = "510";
    converseLib.validationFailed(542);
    FF0ZS-DET-SESN-ERR();
  end

end // end FF0ZS-VAL-SEASON

//*** RECORD=FF0ZW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0ZW00 type basicRecord
  10 FF0ZWSWF FF0ZWSWF ; 
  10 FF0ZWSWZ FF0ZWSWZ ; 
  10 FF0ZWECF FF0ZWECF ; 
  10 FF0ZWCNT FF0ZWCNT ; 
  10 FF0ZWIXM FF0ZWIXM ; 
  10 FFABEGMO FFABEGMO ; 
  10 FFQMBYMO FFQMBYMO ; 
  10 FF1FUTDT FF1FUTDT ; 
  10 FF0ZWBYM FF0ZWBYM ; 
  10 XWSCD XWSCD ; 
  10 FF0ZW-SESN-ENTERED FF0ZW-SESN-ENTERED ; 
  10 FF0ZW-DATE-ENTERED FF0ZW-DATE-ENTERED ; 
  10 FF0ZW-BUY-DT FF0ZW-BUY-DT ; 
    15 * num(1) ; 
    15 FF0ZW-BUY-CYM FF0ZW-BUY-CYM ; 
      20 FF0ZW-BUY-CC FF0ZW-BUY-CC ; 
      20 FF0ZW-BUY-YY FF0ZW-BUY-YY ; 
      20 FF0ZW-BUY-MM FF0ZW-BUY-MM ; 
    15 FF0ZW-BUY-DD FF0ZW-BUY-DD ; 
  10 FF0ZW-SESN-YR FF0ZW-SESN-YR ; 
    15 FF0ZW-SESN FF0ZW-SESN ; 
    15 FF0ZW-YR FF0ZW-YR ; 
  10 FF0ZW-TEMP-YR FF0ZW-TEMP-YR ; 
  10 FF0ZW-BEG-MO FF0ZW-BEG-MO ; 
    15 FF0ZW-BEG-CC FF0ZW-BEG-CC ; 
    15 FF0ZW-BEG-YY FF0ZW-BEG-YY ; 
    15 FF0ZW-BEG-MM FF0ZW-BEG-MM ; 
  10 FF0ZW-END-MO FF0ZW-END-MO ; 
    15 FF0ZW-END-CC FF0ZW-END-CC ; 
    15 FF0ZW-END-YY FF0ZW-END-YY ; 
    15 FF0ZW-END-MM FF0ZW-END-MM ; 
  10 FF0ZW-LEAST-BEG-MO FF0ZW-LEAST-BEG-MO ; 
    15 FF0ZW-LEAST-BEG-CC FF0ZW-LEAST-BEG-CC ; 
    15 FF0ZW-LEAST-BEG-YY FF0ZW-LEAST-BEG-YY ; 
    15 FF0ZW-LEAST-BEG-MM FF0ZW-LEAST-BEG-MM ; 
  10 FF0ZW-GRTST-END-MO FF0ZW-GRTST-END-MO ; 
    15 FF0ZW-GRTST-END-CC FF0ZW-GRTST-END-CC ; 
    15 FF0ZW-GRTST-END-YY FF0ZW-GRTST-END-YY ; 
    15 FF0ZW-GRTST-END-MM FF0ZW-GRTST-END-MM ; 
  10 FF0ZCAU1 FF0ZCAU1 ; 
    15 FF0ZCAU1-PART-1 FF0ZCAU1-PART-1 ; 
    15 FF0ZCAU1-TYPE FF0ZCAU1-TYPE ; 
    15 FF0ZCAU1-LINE-LBL FF0ZCAU1-LINE-LBL ; 
    15 FF0ZCAU1-LINE FF0ZCAU1-LINE ; 
    15 FF0ZCAU1-CAT-LBL FF0ZCAU1-CAT-LBL ; 
    15 FF0ZCAU1-CAT FF0ZCAU1-CAT ; 
    15 FF0ZCAU1-PART-2 FF0ZCAU1-PART-2 ; 
  10 FF0ZW-SESN-NUM FF0ZW-SESN-NUM ; 
end // end FF0ZW00

//*** RECORD=FF0ZW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0ZW01 type basicRecord
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 FFZBYYMM FFZBYYMM ; 
  10 FFZEYYMM FFZEYYMM ; 
  10 FF0ZMSJS FF0ZMSJS ; 
  10 FF0ZW-FFZBYYMM FF0ZW-FFZBYYMM ; 
  10 FF0ZW-FFZEYYMM FF0ZW-FFZEYYMM ; 
  10 FF0ZSES1 FF0ZSES1 ; 
  10 FF0ZSES2 FF0ZSES2 ; 
  10 FF0ZSES3 FF0ZSES3 ; 
  10 FF0ZSES4 FF0ZSES4 ; 
  10 FF0ZCLJS FF0ZCLJS ; 
end // end FF0ZW01

//*** RECORD=FF0ZW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0ZW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 YPGCD YPGCD ; 
    15 * char(1) ; 
    15 XPLCD XPLCD ; 
    15 * char(1) ; 
    15 XPCCD XPCCD ; 
    15 * char(1) ; 
    15 FFZBEGMO FFZBEGMO ; 
    15 * char(1) ; 
    15 FFZENDMO FFZENDMO ; 
    15 FF0ZSES1 FF0ZSES1 ; 
    15 FF0ZSES2 FF0ZSES2 ; 
    15 FF0ZSES3 FF0ZSES3 ; 
    15 FF0ZSES4 FF0ZSES4 ; 
    15 * char(1) ; 
    15 FF0ZSNRN FF0ZSNRN ; 
    15 FF0ZCLJS FF0ZCLJS ; 
    15 * char(39) ; 
end // end FF0ZW02

// Cautionary message line 1
DataItem FF0ZCAU1 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-CAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-CAT-LBL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-LINE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-LINE-LBL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-PART-1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-PART-2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZCAU1-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// clean up before upd?
DataItem FF0ZCLJS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// submit job switch
DataItem FF0ZMSJS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code 1
DataItem FF0ZSES1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code 2
DataItem FF0ZSES2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code 3
DataItem FF0ZSES3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code 4
DataItem FF0ZSES4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZSNRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZW-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-CYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-BUY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-DATE-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZW-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-FFZBYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-FFZEYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-GRTST-END-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-GRTST-END-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-GRTST-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-GRTST-END-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-LEAST-BEG-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-LEAST-BEG-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-LEAST-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-LEAST-BEG-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-SESN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZW-SESN-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZW-SESN-NUM num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-SESN-YR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FF0ZW-TEMP-YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0ZW-YR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date range beg month
DataItem FF0ZWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row counter
DataItem FF0ZWCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End cursor flag
DataItem FF0ZWECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season index
DataItem FF0ZWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FF0ZWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Tentative buy qty zero flag
DataItem FF0ZWSWZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

