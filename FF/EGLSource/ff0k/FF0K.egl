package ff0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF0K ****
// The user can enter this application via the S.R. Menu (ff0a)
// or Fast Path.
// 
// This application displays existing default sfty stk factors
// for user entered category/type & date range for classes A,
// B, C, & D.
// 
// The user may press PF14 and copy the default values to the
// update portion of the screen so these values can be used
// by the next category the user may enter.
// 
// The user may press PF15 to update the default factors for
// the specified category/type.
// 
// The user may press PF16 to update the default factors for
// the specified category/type and also update the Short Range
// worksheets and month master tables for each style in the
// category/type.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/11/89  RGILLI  New application.
// FF#227   04/15/91  LDELUH  Chg screen & add PF14,15,16.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
//          10/16/92  JJUCH   Add relationship editing for
//                            category and type group.
// FF402    05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF       09/01/93  mdange  Add logic to submit either test
//                            or prod JCL.
//          12/17/96  CWHIT1  FIX 0 FILL FOR YR 2000
// *********************
Program FF0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF0KW00 FF0KW00; // record
  FF0KW01 FF0KW01; // record
  FF0KW02 FF0KW02; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FF0KT {deleteAfterUse = yes}; // table
  use FF0KT5O {deleteAfterUse = yes}; // table
  use FF0KM.FF0KM001,  // forms
      FF0KM.TA0PM001, 
      FF0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF0KM001 initial; /* M001 input/output*/
    set FF0KW00 empty; /* Working storage*/
    set FF0KW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FF0KW00.FF0KWSWR = "N"; /* Request for data switch*/
    FF0KW00.FF0KWSWF = "Y"; /* format screen data switch*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF0K.*/
     /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = 0;
    FFWREC.FFAENDMO = 0;
    FFWREC.XPLCD = "  ";
    FFWREC.XPLABRV = "  ";
    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0K001; /* Converse the main process*/


    FF0K001: FF0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF0K001; /* Converse the main process*/


  end // end main
end // end FF0K

// Inquire/maintain a table row
Function FF0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF0K100(); /* Obtain the data to display*/

  FF0K200(); /* Format and display the map*/

  FF0K300(); /* Check attention identifier*/

  FF0K400(); /* Reset fields to normal intensity*/

  FF0K500(); /* Verify the entered data*/

  FF0K600(); /* Process valid input request*/


end // end FF0K001

// Obtain the data to display
Function FF0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0KW00.FF0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Select default values from DFCAST.VMCAT001 table.*/
   /* ------------------------------------------------------------*/

  FF0K120(); /* Select set MCAT*/

   /* ------------------------------------------------------------*/
   /* Load year/month headings and requested data if found*/
   /* ------------------------------------------------------------*/

  FF0K130(); /* Save in display storage*/

   /* ------------------------------------------------------------*/
   /* if no system errors indicate request for data completed*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    FF0KW00.FF0KWSWR = "N"; /* Request for data switch*/
  end


end // end FF0K100

// Select set on dfcast.vmcat001
Function FF0K120()
   /* ------------------------------------------------------------*/
   /* Select default sfty stk factors from DFCAST.VMCAT001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/
  set FFFREC empty; /* i/o functions*/

  FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.XCTCD = "USA "; /* country code*/
  FF7REC.YSMXDV = "10"; /* div domestic*/
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
  FFFREC.FFFENDMO = FFWREC.FFAENDMO;

  FFFREC.FFFFUNCD = "S1"; /* function code*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0K120

// Save display data - ff0kw01
Function FF0K130()
   /* ------------------------------------------------------------*/
   /* Load month headings using range requested*/
   /* ------------------------------------------------------------*/

  FF0KW00.FF0KWIDX = 1; /* Month index*/

  while (FF0KW00.FF0KWIDX <= 12)
    FF0KW01.FF0KWHDR[FF0KWIDX] = FFZREC.FFZINDMO[FF0KWIDX];
    FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1; /* increment current index*/
  end

   /* ------------------------------------------------------------*/
   /* Load DFCAST.VMCAT001 factors per fcst month.*/
   /* ------------------------------------------------------------*/

  FF0K131(); /* Fetch MCAT*/

  if (SQLCA.VAGen_SQLCODE == 100)
    FFWREC.XXXMODID = "130";
    FFWREC.XXXMSGNO = 18;
  else
    while (SQLCA.VAGen_SQLCODE == 0) /* process all vmcat001 rows*/
      FF0KW00.FF0KWIDX = 1; /* init index*/
      while (FF0KW00.FF0KWIDX <= 12)
        if (FF7REC.FF4FCTMO == FF0KW01.FF0KWHDR[FF0KWIDX])
          FF0KW01.FF0KWDFA[FF0KWIDX] = FF7REC.FF7SSCLA;
          FF0KW01.FF0KWDFB[FF0KWIDX] = FF7REC.FF7SSCLB;
          FF0KW01.FF0KWDFC[FF0KWIDX] = FF7REC.FF7SSCLC;
          FF0KW01.FF0KWDFD[FF0KWIDX] = FF7REC.FF7SSCLD;
          if (FF0KW01.CACHGFL != "Y")
            FF0KW01.FF0KWUFA[FF0KWIDX] = FF7REC.FF7SSCLA;
            FF0KW01.FF0KWUFB[FF0KWIDX] = FF7REC.FF7SSCLB;
            FF0KW01.FF0KWUFC[FF0KWIDX] = FF7REC.FF7SSCLC;
            FF0KW01.FF0KWUFD[FF0KWIDX] = FF7REC.FF7SSCLD;
          end
          FF0KW00.FF0KWIDX = 13;
        end
        FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1; /* increment index*/
      end
      FF0K131(); /* Fetch MCAT*/
    end
  end

  FF0K132(); /* Close MCAT*/

   /* ------------------------------------------------------------*/
   /* Set modifiable data flag.*/
   /* ------------------------------------------------------------*/

  FF0KW01.CACHGFL = "Y";


end // end FF0K130

// fetch dfcast.vmcat001 row
Function FF0K131()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("N1", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DFCAST.VMCAT001 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF0K131

// close dfcast.vmcat001 table
Function FF0K132()
   /* ------------------------------------------------------------*/
   /* close dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("C1", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "132"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0K132

// Format and converse the map
Function FF0K200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF0KW00.FF0KWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (FF0KW00.FF0KWSWF == "Y") /* map must be formatted*/
      FF0K210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FF0KM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FF0KM001 alarm; /* Indicate sound alarm*/
  end


  converse FF0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FF0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF0KM001.CAITEM; /* Application data*/


end // end FF0K200

// Format the display data
Function FF0K210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF0KM001 initial; /* M001 input/output area*/

  FF0KW00.FF0KWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from display storage.*/
   /* ------------------------------------------------------------*/

  FF0KM001.XPCCD = FFWREC.XPCCD; /* product category code*/
  FF0KM001.XPCABRV = FFWREC.XPCABRV; /* product category short desc*/

  FF0KM001.YPGCD = FFWREC.YPGCD; /* product type grp code*/
  FF0KM001.YPGABRV = FFWREC.YPGABRV; /* product type grp short desc*/

  FF0KM001.FF0KMBMO = FFWREC.FFABEGMO;
  FF0KM001.FF0KMEMO = FFWREC.FFAENDMO;

   /* ------------------------------------------------------------*/
   /* if data is not loaded, bypass loading of map fields*/
   /* ------------------------------------------------------------*/

  if (FF0KW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Move range month column headings & factors to map.*/
   /* ------------------------------------------------------------*/

  FF0KW00.FF0KWIDX = 12; /* init load index*/

  while (FF0KW00.FF0KWIDX >= 1)

    if (FF0KW01.FF0KWRYM[FF0KWIDX] != 0)

      FF0KM001.FF0KMMON[FF0KWIDX] = FF0KW01.FF0KWRYM[FF0KWIDX];
      set FF0KM001.FF0KMMON[FF0KWIDX] skip;

      FF0KM001.FF0KMDFA[FF0KWIDX] = FF0KW01.FF0KWDFA[FF0KWIDX];
      FF0KM001.FF0KMDFB[FF0KWIDX] = FF0KW01.FF0KWDFB[FF0KWIDX];
      FF0KM001.FF0KMDFC[FF0KWIDX] = FF0KW01.FF0KWDFC[FF0KWIDX];
      FF0KM001.FF0KMDFD[FF0KWIDX] = FF0KW01.FF0KWDFD[FF0KWIDX];

      set FF0KM001.FF0KMDFA[FF0KWIDX] skip;
      set FF0KM001.FF0KMDFB[FF0KWIDX] skip;
      set FF0KM001.FF0KMDFC[FF0KWIDX] skip;
      set FF0KM001.FF0KMDFD[FF0KWIDX] skip;

      FF0KM001.FF0KMUFA[FF0KWIDX] = FF0KW01.FF0KWUFA[FF0KWIDX];
      FF0KM001.FF0KMUFB[FF0KWIDX] = FF0KW01.FF0KWUFB[FF0KWIDX];
      FF0KM001.FF0KMUFC[FF0KWIDX] = FF0KW01.FF0KWUFC[FF0KWIDX];
      FF0KM001.FF0KMUFD[FF0KWIDX] = FF0KW01.FF0KWUFD[FF0KWIDX];

      set FF0KM001.FF0KMUFA[FF0KWIDX] cursor, normal;
      set FF0KM001.FF0KMUFB[FF0KWIDX] normal;
      set FF0KM001.FF0KMUFC[FF0KWIDX] normal;
      set FF0KM001.FF0KMUFD[FF0KWIDX] normal;

    end

    FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX - 1; /* decrement load index*/

  end


end // end FF0K210

// Check attention identifier
Function FF0K300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF0KW00.FF0KWSWR == "Y")
      set FF0KW01 empty; /* set map storage empty*/
    end

    FF0KW00.FF0KWSWF = "Y"; /* set map switch*/
    FF0KW00.FF0KWSWR = "N"; /* data request switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      set FF0KM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF0KM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14  /* & PF14 not pressed*/
   && converseVar.eventKey not pf15  /* & PF15 not pressed*/
   && converseVar.eventKey not pf16) /* & PF16 not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF0K300

// Reset highlighted fields
Function FF0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF0KM001.XPCCD initialAttributes; /* product category*/
  set FF0KM001.YPGCD initialAttributes; /* product type group*/
  set FF0KM001.FF0KMBMO initialAttributes; /* begin month range*/
  set FF0KM001.FF0KMEMO initialAttributes; /* end month range*/

  if (FF0KW01.CACHGFL == "Y")
    FF0KW00.FF0KWIDX = 1; /* init load index*/
    while (FF0KW00.FF0KWIDX <= 12)
      set FF0KM001.FF0KMMON[FF0KWIDX] skip; /* month description*/
      set FF0KM001.FF0KMUFA[FF0KWIDX] normal; /* Updt sfty stk fctr-A*/
      set FF0KM001.FF0KMUFB[FF0KWIDX] normal; /* Updt sfty stk fctr-B*/
      set FF0KM001.FF0KMUFC[FF0KWIDX] normal; /* Updt sfty stk fctr-C*/
      set FF0KM001.FF0KMUFD[FF0KWIDX] normal; /* Updt sfty stk fctr-D*/
      FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1; /* increment load index*/
    end
  end

  set FF0KM001.CATOAP initialAttributes;
  set FF0KM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.XPCCD == "?" /* GPC list requested*/
   || FF0KM001.YPGCD == "?") /* or dimension list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(3); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0KM001.XPCCD = FFWREC.XPCCD;
      FF0KM001.XPCABRV = FFWREC.XPCABRV;
    else
      FF0KM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF0KM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Description*/
    end

    set FF0KM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      FF0KM001.YPGCD = FFWREC.YPGCD;
      FF0KM001.YPGABRV = FFWREC.YPGABRV;
    else
      FF0KM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF0KM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Description*/
    end

    set FF0KM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97);

  exit stack; /* Exit to display map*/


end // end FF0K400

// Verify the entered data
Function FF0K500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If keys were changed, verify the new key fields.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.FF0KMBMO != FF0KW01.FF0KWBMO /* Range beg mo chgd*/
   || FF0KM001.FF0KMEMO != FF0KW01.FF0KWEMO /* or range end mo chgd*/
   || FF0KM001.XPCCD != FFWREC.XPCCD        /* or category changed*/
   || FF0KM001.YPGCD != FFWREC.YPGCD)       /* or product type grp changed*/

    FF0K510(); /* Check modifiable fields*/

    FF0K520(); /* Verify key fields*/

    if (converseVar.validationMsgNum == 0)
      FF0KW00.FF0KWSWR = "Y"; /* request for data*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FF0K500

// Check modifiable fields
Function FF0K510()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that data may*/
   /* not be changed when a different key is requested.*/
   /* ------------------------------------------------------------*/

  FF0KW00.FF0KWIDX = 12; /* init load index*/
  FF0KW00.FF0KWDCF = "N"; /* init data change flag*/

  while (FF0KW00.FF0KWIDX > 0)

    if (FF0KM001.FF0KMUFD[FF0KWIDX] != FF0KW01.FF0KWUFD[FF0KWIDX])
      FF0KW00.FF0KWDCF = "Y"; /* data changed flag*/
      set FF0KM001.FF0KMUFD[FF0KWIDX] cursor, bold; /* Highlight*/
    end

    if (FF0KM001.FF0KMUFC[FF0KWIDX] != FF0KW01.FF0KWUFC[FF0KWIDX])
      FF0KW00.FF0KWDCF = "Y"; /* data changed flag*/
      set FF0KM001.FF0KMUFC[FF0KWIDX] cursor, bold; /* Highlight*/
    end

    if (FF0KM001.FF0KMUFB[FF0KWIDX] != FF0KW01.FF0KWUFB[FF0KWIDX])
      FF0KW00.FF0KWDCF = "Y"; /* data changed flag*/
      set FF0KM001.FF0KMUFB[FF0KWIDX] cursor, bold; /* Highlight*/
    end

    if (FF0KM001.FF0KMUFA[FF0KWIDX] != FF0KW01.FF0KWUFA[FF0KWIDX])
      FF0KW00.FF0KWDCF = "Y"; /* data changed flag*/
      set FF0KM001.FF0KMUFA[FF0KWIDX] cursor, bold; /* Highlight*/
    end

    FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX - 1; /* decrement load index*/

  end

  if (FF0KW00.FF0KWDCF == "Y") /* data modified*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(130); /* Indicate cannot change*/
  end

end // end FF0K510

// validate key field entries
Function FF0K520()
   /* ------------------------------------------------------------*/
   /* Verify that category, type group, & range were entered.*/
   /* Key fields are not allowed to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.FF0KMEMO == 0) /* Range end month not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0KM001.FF0KMEMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF0KM001.FF0KMBMO == 0) /* Range begin month not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0KM001.FF0KMBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF0KM001.YPGCD == "  ") /* Type group code not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0KM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF0KM001.XPCCD == "  ") /* Category code not entered*/
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0KM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

   /* ------------------------------------------------------------*/
   /* If month range was entered verify that it is valid.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.FF0KMBMO != 0 /* Range beg mo entered*/
   && FF0KM001.FF0KMEMO != 0) /* & range end mo entered*/
    FF0K521(); /* Validate range*/
  end

   /* ------------------------------------------------------------*/
   /* If product tye group code was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.YPGCD != " ")
    if (FF0KM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and ftwr fcstg*/
      FF0KM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FF0KM001.YPGABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0KM001.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0KM001.YPGABRV = "  "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* If category was entered verify the code.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.XPCCD != "  ")
    set XPCREC empty; /* Row storage area*/
    XPCREC.XPCCD = FF0KM001.XPCCD; /* Category code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      FF0KM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    else
      FF0KM001.XPCABRV = " "; /* Clear description*/
      FFWREC.XXXMODID = "520"; /* Module identification*/
      set FF0KM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid*/
    end
  else
    FF0KM001.XPCABRV = "  "; /* Clear abrv*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the category and type group relationship by checking*/
   /* the dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  FF0K522(); /* Select vffxrf01 table*/

  if (SQLCA.VAGen_SQLCODE == +100)
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF0KM001.XPCCD cursor, bold; /* Highlight*/
    set FF0KM001.YPGCD bold; /* Highlight*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
  end

end // end FF0K520

// Validate month range
Function FF0K521()
   /* ------------------------------------------------------------*/
   /* Verify that range begin & end months are valid dates,*/
   /* begin month is not less than current business month, &*/
   /* end month is not more than 12 months from begin month.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/
  FFZREC.FFZSRANG = "N";
  FFZREC.FFZBYYMM = FF0KM001.FF0KMBMO; /* Beginning date*/
  FFZREC.FFZEYYMM = FF0KM001.FF0KMEMO; /* Ending date*/
  TA1REC.TA1PGMNM = "FF0K521";

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/
    FFWREC.XXXMODID = "521"; /* Module identification*/
    set FF0KM001.FF0KMEMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/
    FFWREC.XXXMODID = "528"; /* Module identification*/
    set FF0KM001.FF0KMBMO cursor, bold; /* Highlight*/
    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else
      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else
        converseLib.validationFailed(151); /* Date is out of range*/
      end
    end
  end


end // end FF0K521

// Select dfcast.vffxrf01 row
Function FF0K522()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10";
  FF2REC.YPGCD = FF0KM001.YPGCD;
  FF2REC.XPCCD = FF0KM001.XPCCD;

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0K522

// Process valid input request
Function FF0K600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FF0KW00.FF0KWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information*/
   /* in FF system commarea.*/
   /* ------------------------------------------------------------*/

  if (FF0KM001.FF0KMBMO != FF0KW01.FF0KWBMO /* Range beg mo chgd*/
   || FF0KM001.FF0KMEMO != FF0KW01.FF0KWEMO /* or range end mo chgd*/
   || FF0KM001.YPGCD != FFWREC.YPGCD        /* or type group changed*/
   || FF0KM001.XPCCD != FFWREC.XPCCD)       /* or category changed*/
    FF0KW01.FF0KWBMO = FF0KM001.FF0KMBMO;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
    FF0KW01.FF0KWEMO = FF0KM001.FF0KMEMO;
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;
    FFWREC.YPGCD = FF0KM001.YPGCD;
    FFWREC.YPGABRV = FF0KM001.YPGABRV;
    FFWREC.XPCCD = FF0KM001.XPCCD;
    FFWREC.XPCABRV = FF0KM001.XPCABRV;

    /* ------------------------------------------------------------*/
     /* if a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    if (FF0KW01.FF0KWBMO != 0
     && FF0KW01.FF0KWEMO != 0
     && FFWREC.YPGCD != "  "
     && FFWREC.XPCCD != "  ")
      FF0KW00.FF0KWSWR = "Y"; /* Request for data switch*/
    else
      FF0KW00.FF0KWSWR = "N"; /* Request for data switch*/
    end
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If PF14 was pressed move display default factors to update*/
   /* factor fields on map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PF14 pressed*/
    FF0KW00.FF0KWIDX = 1; /* Initialize month index*/
    while (FF0KW00.FF0KWIDX <= 12)
      FF0KM001.FF0KMUFA[FF0KWIDX] = FF0KM001.FF0KMDFA[FF0KWIDX];
      FF0KM001.FF0KMUFB[FF0KWIDX] = FF0KM001.FF0KMDFB[FF0KWIDX];
      FF0KM001.FF0KMUFC[FF0KWIDX] = FF0KM001.FF0KMDFC[FF0KWIDX];
      FF0KM001.FF0KMUFD[FF0KWIDX] = FF0KM001.FF0KMDFD[FF0KWIDX];
      FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1; /* Increment index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF15 was pressed update default factors on DFCAST.*/
   /* VMCAT001 database table.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 pressed*/
    FF0K610(); /* Update MCAT*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    FFWREC.XXXMODID = "600"; /* Module identification*/
    FFWREC.XXXMSGNO = 32; /* Indicate update completed*/
  end

   /* ------------------------------------------------------------*/
   /* If PF16 was pressed update default factors on DFCAST.*/
   /* VMCAT001 database table & submit batch job to update*/
   /* safety stock qtys in S.R. worksheets & month master tbls.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF16 pressed*/
    FF0K610(); /* Update MCAT*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    FF0K620(); /* Submit batch JCL*/
  end

   /* ------------------------------------------------------------*/
   /* Update display storage area with changed factors.*/
   /* ------------------------------------------------------------*/

  FF0KW00.FF0KWIDX = 1; /* Initialize month index*/
  while (FF0KW00.FF0KWIDX <= 12)
    FF0KW01.FF0KWUFA[FF0KWIDX] = FF0KM001.FF0KMUFA[FF0KWIDX];
    FF0KW01.FF0KWUFB[FF0KWIDX] = FF0KM001.FF0KMUFB[FF0KWIDX];
    FF0KW01.FF0KWUFC[FF0KWIDX] = FF0KM001.FF0KMUFC[FF0KWIDX];
    FF0KW01.FF0KWUFD[FF0KWIDX] = FF0KM001.FF0KMUFD[FF0KWIDX];
    if (converseVar.eventKey is pf15
     || converseVar.eventKey is pf16)
      FF0KW01.FF0KWDFA[FF0KWIDX] = FF0KM001.FF0KMUFA[FF0KWIDX];
      FF0KW01.FF0KWDFB[FF0KWIDX] = FF0KM001.FF0KMUFB[FF0KWIDX];
      FF0KW01.FF0KWDFC[FF0KWIDX] = FF0KM001.FF0KMUFC[FF0KWIDX];
      FF0KW01.FF0KWDFD[FF0KWIDX] = FF0KM001.FF0KMUFD[FF0KWIDX];
    end
    FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1; /* Increment index*/
  end


end // end FF0K600

// Process VMCAT001 update
Function FF0K610()
   /* ------------------------------------------------------------*/
   /* Process DFCAST.VMCAT001 safety stock factor update.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  FF0KW00.FF0KWIDX = 1; /* Init month index*/

  while (FF0KW00.FF0KWIDX <= 12)

    if (FF0KW01.FF0KWHDR[FF0KWIDX] != 0)

      FF0KS05(); /* Select MCAT*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FF0KS10(); /* Update MCAT*/
      else
        if (FF0KM001.FF0KMUFA[FF0KWIDX] != 0
         || FF0KM001.FF0KMUFB[FF0KWIDX] != 0
         || FF0KM001.FF0KMUFB[FF0KWIDX] != 0
         || FF0KM001.FF0KMUFB[FF0KWIDX] != 0)
          FF0KS15(); /* Add MCAT*/
        end
      end
    end

    FF0KW00.FF0KWIDX = FF0KW00.FF0KWIDX + 1;

  end


end // end FF0K610

// Submit batch JCL
Function FF0K620()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FF0K621(); /* format production jcl*/
    else
      FF0K622(); /* format development jcl*/
    end
  else

    FFWREC.XXXMODID = "620"; /* module identification*/
    FFWREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end FF0K620

// Submit Prod JCL FF9601
Function FF0K621()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0KT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF0KW02 empty; /* Parameter area*/
      FF0KW02.YPGCD = FF0KM001.YPGCD; /* Type group*/
      FF0KW02.XPCCD = FF0KM001.XPCCD; /* Category*/

      TA6REC.TARJCL[TA6INDEX] = FF0KW02.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0KT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0KT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0KT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end FF0K621

// Submit test JCL FF9601
Function FF0K622()
   /* submit test jcl*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FF0KT5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set FF0KW02 empty; /* Parameter area*/
      FF0KW02.YPGCD = FF0KM001.YPGCD; /* Type group*/
      FF0KW02.XPCCD = FF0KM001.XPCCD; /* Category*/

      TA6REC.TARJCL[TA6INDEX] = FF0KW02.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FF0KT5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FF0KT5O.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FF0KT5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/


end // end FF0K622

// Select DFCAST.VMCAT001 row
Function FF0KS05()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/
  set FF7REC empty;

  FF7REC.FF4FCTMO = FF0KW01.FF0KWHDR[FF0KWIDX]; /* date*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.XCTCD = "USA "; /* country*/
  FF7REC.YSMXDV = "10"; /* division domestic*/

   /* ------------------------------------------------------------*/
   /* Select unique dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0KS05

// Update DFCAST.VMCAT001 row
Function FF0KS10()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

   /* set safety stock factor*/

  FF7REC.FF7SSCLA = FF0KM001.FF0KMUFA[FF0KWIDX];
  FF7REC.FF7SSCLB = FF0KM001.FF0KMUFB[FF0KWIDX];
  FF7REC.FF7SSCLC = FF0KM001.FF0KMUFC[FF0KWIDX];
  FF7REC.FF7SSCLD = FF0KM001.FF0KMUFD[FF0KWIDX];

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FF0KW00.FF0KWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S10"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VMCAT001 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0KS10

// Add DFCAST.VMCAT001 row
Function FF0KS15()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty;

  FF7REC.FF4FCTMO = FF0KW01.FF0KWHDR[FF0KWIDX]; /* date*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF7REC.XCTCD = "USA "; /* country*/
  FF7REC.YSMXDV = "10"; /* division domestic*/
  FF7REC.FF7FRZFL = "N";
  FF7REC.FF7CBYFL = "N";
  FF7REC.FF7PBYFL = "N";
  FF7REC.FF7CATFL = "N";

  if (FFWREC.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

   /* safety stock factor a, b, c, or d*/

  FF7REC.FF7SSCLA = FF0KM001.FF0KMUFA[FF0KWIDX];
  FF7REC.FF7SSCLB = FF0KM001.FF0KMUFB[FF0KWIDX];
  FF7REC.FF7SSCLC = FF0KM001.FF0KMUFC[FF0KWIDX];
  FF7REC.FF7SSCLD = FF0KM001.FF0KMUFD[FF0KWIDX];

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ------------------------------------------------------------*/
   /* add dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VMCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF0KS15

//*** RECORD=FF0KW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF0KW00 type basicRecord
  10 FF0KWDCF FF0KWDCF ; 
  10 FF0KWCHG FF0KWCHG ; 
  10 FF0KWSWR FF0KWSWR ; 
  10 FF0KWSWF FF0KWSWF ; 
  10 FF0KWIDX FF0KWIDX ; 
  10 FF0KWPIX FF0KWPIX ; 
  10 FF0KWCDT FF0KWCDT ; 
    15 FF0KWCCC FF0KWCCC ; 
    15 FF0KWCYM FF0KWCYM ; 
      20 FF0KWCYY FF0KWCYY ; 
      20 FF0KWCMM FF0KWCMM ; 
  10 FF0KWFCT FF0KWFCT ; 
    15 * num(3) ; 
    15 FF0KWFCC FF0KWFCC ; 
    15 FF0KWFYM FF0KWFYM ; 
      20 FF0KWFYY FF0KWFYY ; 
      20 FF0KWFMM FF0KWFMM ; 
  10 FF0KWTDT FF0KWTDT ; 
    15 FF0KWTCC FF0KWTCC ; 
    15 FF0KWTYM FF0KWTYM ; 
      20 FF0KWTYY FF0KWTYY ; 
      20 FF0KWTMM FF0KWTMM ; 
    15 FF0KWTDD FF0KWTDD ; 
end // end FF0KW00

//*** RECORD=FF0KW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF0KW01 type basicRecord
  5 FF0KWGRP FF0KWGRP ; 
    10 CACHGFL CACHGFL ; 
    10 FF0KWBMO FF0KWBMO ; 
    10 FF0KWEMO FF0KWEMO ; 
    10 FF0KWMAP FF0KWMAP [12] ; 
      15 FF0KWHDR FF0KWHDR ; 
        20 FF0KWRCC FF0KWRCC ; 
        20 FF0KWRYM FF0KWRYM ; 
          25 FF0KWRYY FF0KWRYY ; 
          25 FF0KWRMM FF0KWRMM ; 
      15 FF0KWDFA FF0KWDFA ; 
      15 FF0KWDFB FF0KWDFB ; 
      15 FF0KWDFC FF0KWDFC ; 
      15 FF0KWDFD FF0KWDFD ; 
      15 FF0KWUFA FF0KWUFA ; 
      15 FF0KWUFB FF0KWUFB ; 
      15 FF0KWUFC FF0KWUFC ; 
      15 FF0KWUFD FF0KWUFD ; 
end // end FF0KW01

//*** RECORD=FF0KW02 ****
// ---------------------------------
// Parameter for passing to FF9601.
// ---------------------------------
// ***********************
Record FF0KW02 type basicRecord
  10 TARJCL TARJCL ; 
    15 YPGCD YPGCD ; 
    15 XPCCD XPCCD ; 
    15 * char(76) ; 
end // end FF0KW02

// Range begin YYMM
DataItem FF0KWBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem FF0KWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FF0KWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// update data flag
DataItem FF0KWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current month
DataItem FF0KWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year and month
DataItem FF0KWCYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year
DataItem FF0KWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FF0KWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Disp sfty stk fctr-A
DataItem FF0KWDFA num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Disp sfty stk fctr-B
DataItem FF0KWDFB num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Disp sfty stk fctr-C
DataItem FF0KWDFC num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Disp sfty stk fctr-D
DataItem FF0KWDFD num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Range end YYMM
DataItem FF0KWEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FF0KWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF FCST date
DataItem FF0KWFCT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// begin month
DataItem FF0KWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FF0KWFYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year
DataItem FF0KWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FF0KWGRP char(465)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading date range
DataItem FF0KWHDR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// load index
DataItem FF0KWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display fields group level
DataItem FF0KWMAP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous index
DataItem FF0KWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem FF0KWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FF0KWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FF0KWRYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FF0KWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FF0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FF0KWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin day
DataItem FF0KWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work field used by ta0040
DataItem FF0KWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin month
DataItem FF0KWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FF0KWTYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year
DataItem FF0KWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Updt sfty stk fctr-A
DataItem FF0KWUFA num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Updt sfty stk fctr-B
DataItem FF0KWUFB num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Updt sfty stk fctr-C
DataItem FF0KWUFC num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Updt sfty stk fctr-D
DataItem FF0KWUFD num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

