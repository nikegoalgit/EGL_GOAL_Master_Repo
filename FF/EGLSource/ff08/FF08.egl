package ff08;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=FF08 ****
// This application displays the level that a buy exists for
// one buy month. The user has to specify the line (or cate-
// gory), type group and buy month. The screen will show the
// detail level which the buy exists at. If line was entered.
// All categories will be displayed regardless of whether any
// buy has been done or not. If both line and category were
// entered, must ensure that the category is within that line.
// 
// There are three different entries to get into this program.
// They are short range menu screen, submit buy screen, display
// months with completed buy screen. From the last two screens,
// The selection criteria will be cattied over.
// 
// The scroll ability is provided for viewing multiple pages
// of data. The user may exit to any allowed application, via
// fast path or PF key.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/08/89  JJUCH   New application.
//          12/19/96  CWHIT1  REGEN FOR YR 2000
// *********************
Program FF08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF08W00 FF08W00; // record
  FF08W01 FF08W01; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FF08M.FF08M001,  // forms
      FF08M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FF08M001 initial; /* M001 input/output*/
    set FF08W00 empty; /* Working storage*/
    set FF08W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA2REC empty; /* Date subroutine parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    if (FFWREC.YPGCD == "  ") /* No type group*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end

    FF08W00.XCTCD = "USA "; /* Default country code*/
    FF08W00.FF08WTYP[1] = "01"; /* Type group 'Inline'*/
    FF08W00.FF08WTYP[2] = "02"; /* Type group 'Makeup'*/

    FF08W00.FF08WSWF = "Y"; /* Format the map switch*/
    FF08W00.FF08WSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    FF08W01.FF08WBMO = FFWREC.FFQMBYMO; /* Buy month*/

    if (FFWREC.FFQMBYMO > 0) /* Buy month passed*/
      if (FFWREC.YPGCD > "  " /* Type group passed*/
       && FFWREC.XPCCD > "  ") /* Category passed*/
        FF08W00.FF08WSWR = "Y"; /* Request for data switch*/
      else
        if (FFWREC.XPLCD > "  " /* Product line passed*/
         && FFWREC.YPGCD > "  ") /* Type group passed*/
          FF08W00.FF08WSWR = "Y"; /* Request for data switch*/
        end
      end
    end

     /* ------------------------------------------------------------*/
     /* Clear other FFWREC levels not used in FF08.*/
     /* ------------------------------------------------------------*/

    FFWREC.SYBSTGNB = "  ";
    FFWREC.SYBSTGNM = "  ";
    FFWREC.SY1STNBR = "  ";
    FFWREC.SY1SSTNM = "  ";
    FFWREC.SY2CLRID = "  ";
    FFWREC.SY2CLRAB = "  ";
    FFWREC.XDMCD = "  ";
    FFWREC.XDMABRV = "  ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF08001; /* Converse the main process*/


    FF08001: FF08001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FF08001; /* Converse the main process*/


  end // end main
end // end FF08

// Inquire/maintain a table row
Function FF08001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FF08100(); /* Obtain the data to display*/

  FF08200(); /* Format and display the map*/

  FF08300(); /* Check attention identifier*/

  FF08400(); /* Reset fields to normal intensity*/

  FF08500(); /* Verify the entered data*/

  FF08600(); /* Process valid input request*/


end // end FF08001

// Obtain the data to display
Function FF08100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF08W00.FF08WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  FF08110(); /* Build up temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FF08W00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FF08W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FF08W00.FF08WSWR = "N"; /* Request for data switch*/


end // end FF08100

// Build up the temporary storage
Function FF08110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FF08W00.XXXTSLEN = 321; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FF08111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/

  FF08W01.FF08WBMO = FFWREC.FFQMBYMO; /* Buy month*/

   /* ------------------------------------------------------------*/
   /* Obtain the buy perform flag for each level.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Product category were specified. Type group is either*/
    /* specified or wildcard.*/
   /* ------------------------------------------------------------*/
  if (FFWREC.XPCCD > "  ")
    FF08112(); /* Process specified category*/
  else
    /* ------------------------------------------------------------*/
        /* Request all lines.*/
    /* ------------------------------------------------------------*/
    if (FFWREC.XPLCD == "*")
      FF08113(); /* Process all lines*/
    else
      /* ------------------------------------------------------------*/
        /* Product line was specified and all type groups or one*/
        /* type group was requested.*/
      /* ------------------------------------------------------------*/
      if (FFWREC.XPLCD > "  ")
        FF08114(); /* Process one line and type groups*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FF08W00.FF08WIXM > 1) /* Page was formatted*/
    FF08S01(); /* Add page to temporary storage*/
  end


end // end FF08110

// Purge temporary storage
Function FF08111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF08W01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FF08W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FF08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08111

// Process single category
Function FF08112()

   /* ---------------------------------------------------------*/
   /* Obtain buy performed flag by category from VMCAT001.*/
   /* ---------------------------------------------------------*/

  FF08W00.FF08WIXM = 1; /* Initialize display index*/
  FF08W00.XPCCD = "  ";

  FF08S02(); /* Retrieve buy flag for cat*/

   /* ---------------------------------------------------------*/
   /* Retrieve related product line for specified category &*/
   /* type group.*/
   /* ---------------------------------------------------------*/

  FF08S05(); /* Retrieve line from FFXRF01*/

  if (FF08W00.FF08WEXF == "Y") /* Related line exists*/
    XPLREC.XPLCD = FF2REC.XPLCD;
    FF08W01.FF08MXPL[1] = "******";
    if (XPLREC.XPLCD in XPLTBL.XPLCD)
      FF08W01.FF08MXPL[1] = XPLTBL.XPLABRV[sysVar.arrayIndex];
    end
    FF08S10(); /* Retr buy flag for line from MLINE01*/
    if (FF08W00.FF08WSWB != "Y") /* Buy not performed at line level*/
      FF08S20(); /* Retr buy flag for typ grp from*/
                                   /* MLTYP01*/
    end
  end


end // end FF08112

// Process all lines
Function FF08113()

  FF08S25(); /* Obtain list of lines from FFXRF01*/

  FF08W00.FF08WSWL = "N"; /* Init end of line cursor switch*/
  FF08W00.FF08WIXM = 1; /* Initialize display index*/

  FF08S26(); /* Fetch next FFXRF01 line row*/

  while (FF08W00.FF08WSWL == "N") /* Until end of FFXRF01 line cursor*/

    FF08W00.FF08WSWB = "N"; /* Initialize buy performed flag*/
    FF08S27(); /* Obtain line buy flag*/

    if (FF08W00.FF08WSWB != "Y") /* Buy wasn't performed at line level*/

      FF08S20(); /* Retrieve buy flag for type group*/

    end

    /* ---------------------------------------------------------*/
       /* Check if category was specified. if it was, obtain*/
       /* the related buy perform flag from VMCAT001 table.*/
       /* Otherwise, obtain all the category codes from VFFXRF01*/
       /* table and check the buy flag of each category.*/
    /* ---------------------------------------------------------*/

    if (FFWREC.XPCCD == "  ") /* Check if category entered*/

      FF08S30(); /* Obtain list of cats from FFXRF01*/

    else

      FF08M001.XPLCD = FF08W00.XPLCD;
                                   /* Move the curr line for checking*/
      FF08S05(); /* Check if the category is within this line*/
      FF08M001.XPLCD = "*"; /* Restore the product line field*/

      if (FF08W00.FF08WEXF == "Y") /* Category is in this product line*/

        FF08W00.XPCCD = "  "; /* Initialize temp category code*/
        FF08S02(); /* Retrieve buy flag for the specified cat*/

      else

        FF08W00.FF08WIXM = FF08W00.FF08WIXM + 1;

        if (FF08W00.FF08WIXM > 15)

          FF08S01(); /* Add page to temporary storage*/

        end

      end

    end

    FF08W00.FF08WSWB = "N"; /* Initialize buy performed flag*/
    FF08S26(); /* Fetch the next row*/

  end

  FF08S28(); /* Close FFXRF01 line cursor*/


end // end FF08113

// Process 1 line and all types
Function FF08114()

  FF08W01.FF08MXPL[1] = FFWREC.XPLABRV;

  FF08W00.FF08WIXM = 1; /* Initialize the display index*/
  FF08W00.FF08WSWB = "N"; /* Initialize the buy performed flag*/

   /* --------------------------------------------------------*/
   /* Obtain buy performed flag by line from VMLINE01 table*/
   /* --------------------------------------------------------*/

  FF08S10(); /* Retrieve buy flag for the line*/

  if (FF08W00.FF08WSWB != "Y") /* Buy wasn't performed at line level*/

    /* --------------------------------------------------------*/
     /* Obtain buy performed flag by type group from VMLTYP01*/
    /* --------------------------------------------------------*/

    FF08S20();
                                   /* Retrieve buy flag for all type groups*/

  end

   /* ---------------------------------------------------------*/
     /* Check if category was specified. if it was, obtain*/
     /* the related buy perform flag from VMCAT001 table.*/
     /* Otherwise, obtain all the category codes from VFFXRF01*/
     /* table and check the buy flag of each category.*/
   /* ---------------------------------------------------------*/

  if (FFWREC.XPCCD == "  ") /* Check if category entered*/

    FF08S30(); /* Obtain list of cats from FFXRF01*/

  else

    FF08W00.XPCCD = "  "; /* Initialize temp category code*/
    FF08S02(); /* Retrieve buy flag for the specified cat*/

  end


end // end FF08114

// Format and converse the map
Function FF08200()

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FF08W00.FF08WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FF08W00.FF08WSWF == "Y") /* Map must be formatted*/
      FF08210(); /* Format the data on the map*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FF08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FF08M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FF08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FF08M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FF08M001 alarm; /* Indicate sound alarm*/

  end

  converse FF08M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FF08M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FF08M001.CAITEM; /* Application data*/


end // end FF08200

// Format the display data
Function FF08210()

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FF08M001 initial; /* M001 input/output area*/

  FF08W00.FF08WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FF08W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FF08W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FF08W00.XXXTSPAG > FF08W00.TA5TSQIX) /* Desired greater highest*/
        FF08W00.XXXTSPAG = FF08W00.TA5TSQIX; /* Default to highest*/
      end

      FF08S60(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FF08M001.XXXLITPG skip; /* "PAGE" literal*/
    set FF08M001.XXXLITOF skip; /* "OF" literal*/
    FF08M001.XXXTSPAG = FF08W00.XXXTSPAG; /* Current page*/
    FF08M001.TA5TSQIX = FF08W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FF08W01.FF08MBMO != 0)
    FF08M001.FF08MBMO = FF08W01.FF08MBMO; /* Buy month*/
  end

  FF08M001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF08M001.XPLABRV = FFWREC.XPLABRV; /* Line abbreciation*/
  FF08M001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF08M001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FF08M001.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF08M001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/

  FF08W00.FF08WXPL = "      "; /* Initialize the temp line abbrv.*/

  FF08W00.FF08WIXM = 1; /* Initialize line index*/

  while (FF08W00.FF08WIXM <= 15) /* Until screen is full*/

    FF08M001.FF08MXPL[FF08WIXM] = FF08W01.FF08MXPL[FF08WIXM];
    FF08M001.FF08MLFL[FF08WIXM] = FF08W01.FF08MLFL[FF08WIXM];
    FF08M001.FF08MXPC[FF08WIXM] = FF08W01.FF08MXPC[FF08WIXM];
    FF08M001.FF08MCFL[FF08WIXM] = FF08W01.FF08MCFL[FF08WIXM];
    FF08M001.FF08MPFL[FF08WIXM] = FF08W01.FF08MPFL[FF08WIXM];

    if (FF08W00.FF08WXPL != FF08W01.FF08MXPL[FF08WIXM])
                                   /* Product line changed*/

      set FF08M001.FF08MXPL[FF08WIXM] skip;
      FF08W00.FF08WXPL = FF08W01.FF08MXPL[FF08WIXM];
                                   /* Save curr line*/

      if (FF08W01.FF08MLFL[FF08WIXM] == "Y")

        set FF08M001.FF08MLFL[FF08WIXM] normal;
        set FF08M001.FF08MLFL[FF08WIXM] skip;

      end

    end


    FF08W00.FF08WIXM = FF08W00.FF08WIXM + 1; /* Increment line index*/

  end

end // end FF08210

// Check attention identifier
Function FF08300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FF08W00.FF08WSWR == "Y") /* Request for data*/
      set FF08W01 empty; /* M001 display storage*/
    end

    FF08W00.FF08WSWF = "Y"; /* Format the map switch*/
    FF08W00.FF08WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FF08111(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FF08M001.CATOAP cursor, bold; /* Highlight*/

      FF08W00.FF08WSWF = "Y"; /* Format the map switch*/
      FF08W00.FF08WSWR = "N"; /* Request for data switch*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14) /* or PF14 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FF08M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/

      COMMAREA.CATOAP = "FF0B"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FF0G"; /* TO application*/
    end

    FF08111(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    FF08W00.FF08WSWF = "Y"; /* Format the map switch*/
    FF08W00.FF08WSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FF08300

// Reset highlighted fields
Function FF08400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FF08M001.XPLCD initialAttributes; /* Product line code*/
  set FF08M001.YPGCD initialAttributes; /* Type group code*/
  set FF08M001.XPCCD initialAttributes; /* Category code*/
  set FF08M001.FF08MBMO initialAttributes; /* Buy month*/
  set FF08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set FF08M001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPLCD == "?" /* Line list requested*/
   || FF08M001.YPGCD == "?" /* or type group list requested*/
   || FF08M001.XPCCD == "?") /* or category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPLCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF08M001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FF08M001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FF08M001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FF08M001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF08M001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of YPG codes.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.YPGCD == "?") /* YPG list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF08M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FF08M001.YPGABRV = FFWREC.YPGABRV;
    else
      FF08M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FF08M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];

    end

    set FF08M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FF08M001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FF08M001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FF08M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FF08M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FF08M001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FF08400

// Verify the entered data
Function FF08500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF08M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FF08510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that either line/type grp or cat/type grp were*/
   /* entered along with buy month. Key fields are not allowed*/
   /* to be spaces or zeros.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.FF08MBMO == 0) /* Buy month not entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF08M001.FF08MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF08M001.YPGCD == "  ") /* Type group not entered*/
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FF08M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
  end

  if (FF08M001.XPCCD == "  ") /* Cat not entered*/
    if (FF08M001.XPLCD == "  ") /* LINE NOT ENTERED*/
      FFWREC.XXXMODID = "500"; /* Module identification*/
      set FF08M001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* If any missing fields*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the buy month.*/
   /* ------------------------------------------------------------*/

  FF08520(); /* Verify the buy month*/

   /* ------------------------------------------------------------*/
   /* If category entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPCCD > "  ") /* Category was entered*/
    FF08530(); /* Verify the category*/
  else
    FF08M001.XPCABRV = "     "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If type group entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.YPGCD > "  ") /* Type group was entered*/
    FF08540(); /* verify the type group*/
  else
    FF08M001.YPGABRV = "      "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* If line code entered verify.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPLCD > "  ") /* Product line was entered*/
    FF08550(); /* verify the product line*/
  else
    FF08M001.XPLABRV = "      "; /* Clear the abbreviation*/
  end

   /* ------------------------------------------------------------*/
   /* Verify line/type grp or cat/type grp relationship.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (FF08M001.XPCCD > "  "
     && FF08M001.YPGCD > "  ")
      set FF2REC empty; /* Clear row storage area*/
      FF2REC.YSMXDV = FFWREC.YSMXDV; /* Div grp code*/
      FF2REC.YPGCD = FF08M001.YPGCD; /* Type grp code*/
      FF2REC.XPCCD = FF08M001.XPCCD; /* Cat code*/
      FF2REC.XPLCD = "*"; /* Line code*/
      FF08560(); /* Select FFXRF01*/
      FF08561(); /* Fetch FFXRF01 row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* GOOD RELATIONSHIP*/
        FF08M001.XPLCD = FF2REC.XPLCD;
        FFWREC.XPLCD = FF2REC.XPLCD;
        if (FF08M001.XPLCD in XPLTBL.XPLCD)
          FF08M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
        FFWREC.XPLABRV = FF08M001.XPLABRV;
      else
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(203); /* Inconsistent relationship*/
        set FF08M001.YPGCD bold; /* Highlight*/
        set FF08M001.XPCCD cursor, bold; /* Hifhlight*/
      end
      FF08562(); /* Close FFXRF01*/
    else
      if (FF08M001.YPGCD > "  "
       && FF08M001.XPLCD > "  ")
        set FF2REC empty; /* Clear row storage area*/
        FF2REC.YSMXDV = FFWREC.YSMXDV; /* Div grp code*/
        FF2REC.YPGCD = FF08M001.YPGCD; /* Type grp code*/
        FF2REC.XPLCD = FF08M001.XPLCD; /* Line code*/
        FF2REC.XPCCD = "*"; /* Cat code*/
        FF08560(); /* Select FFXRF01*/
        FF08561(); /* Fetch FFXRF01 row*/
        if (SQLCA.VAGen_SQLCODE == 100)
          FFWREC.XXXMODID = "500"; /* Module identification*/
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          set FF08M001.XPLCD bold; /* Highlight*/
          set FF08M001.YPGCD cursor, bold; /* Hifhlight*/
        end
        FF08562(); /* Close FFXRF01*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FF08500

// Verify scroll request
Function FF08510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FF08W00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FF08W00.XXXTSPAG >= FF08W00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.FF08MBMO != FF08W01.FF08MBMO) /* Buy month changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF08M001.FF08MBMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FF08M001.XPCCD != FFWREC.XPCCD) /* Category changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF08M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FF08M001.YPGCD != FFWREC.YPGCD) /* Type group changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF08M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FF08M001.XPLCD != FFWREC.XPLCD) /* Product line changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FF08M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

end // end FF08510

// Verify buy month
Function FF08520()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FF08M001.FF08MBMO; /* Buy month*/
  FFZREC.FFZEYYMM = FF08M001.FF08MBMO; /* Buy month*/
  FFZREC.FFZMONTH = 1; /* Number of month*/
  FFZREC.FFZSRANG = "Y"; /* Short range flag*/
  FFZREC.FFZCHK12 = "N"; /* 12 month range flag*/

  XSFFS30(); /* Verify the range*/

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FF08M001.FF08MBMO cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

  end


end // end FF08520

// verify the category
Function FF08530()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FF08M001.XPCCD;

  if (FF08M001.XPCCD > "  ")
    FF08M001.XPCABRV = "******";
  end

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF08M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FF08M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF08530

// verify the type group
Function FF08540()

  if (FF08M001.YPGCD == "*") /* Wild cardwas entered*/

    FF08M001.YPGABRV = "ALL"; /* Abbreviation*/

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.YPGCD == "  ") /* No type group code*/
    FF08M001.YPGABRV = "      ";
  else
    FF08M001.YPGABRV = "******";
  end

  if (FF08M001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/

    FF08M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "540"; /* Module identification*/

    set FF08M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FF08540

// verify the product line
Function FF08550()
  if (FF08M001.XPLCD == "* ") /* Wild card was entered*/

    FF08M001.XPLABRV = "ALL";

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPLCD > "  ") /* No product line*/
    FF08M001.XPLABRV = "******";
  end

  XPLREC.XPLCD = FF08M001.XPLCD;

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FF08M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "550"; /* Module identification*/

    set FF08M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FF08550

// Select & open FFXRF01
Function FF08560()
   /* ------------------------------------------------------------*/
   /* Select & open FFXRF01 cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "560"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08560

// Fetch FFXRF01 row
Function FF08561()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08561

// Close FFXRF01 cursor
Function FF08562()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "562"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08562

// Process valid input request
Function FF08600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FF08W00.FF08WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FF08W00.XXXTSPAG = FF08W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FF08W00.XXXTSPAG = FF08W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If the key fields changed, determine if a key was entered.*/
   /* ------------------------------------------------------------*/

  if (FF08M001.XPLCD != FFWREC.XPLCD /* Product line changed*/
   || FF08M001.YPGCD != FFWREC.YPGCD /* or type group changed*/
   || FF08M001.XPCCD != FFWREC.XPCCD /* or category changed*/
   || FF08M001.FF08MBMO != FF08W01.FF08MBMO) /* or Buy month changed*/

    FFWREC.XPLCD = FF08M001.XPLCD; /* Product line*/
    FFWREC.YPGCD = FF08M001.YPGCD; /* Type group*/
    FFWREC.XPCCD = FF08M001.XPCCD; /* Category*/
    FFWREC.XPLABRV = FF08M001.XPLABRV; /* Product line abbreviation*/
    FFWREC.YPGABRV = FF08M001.YPGABRV; /* Type group abbreviation*/
    FFWREC.XPCABRV = FF08M001.XPCABRV; /* Category abbreviation*/
    FFWREC.FFQMBYMO = FFZREC.FFZBEGMO; /* Buy month*/

    /* ------------------------------------------------------------*/
     /* If the key field was entered, request the data to display.*/
     /* Otherwise, clear existing data from map display storage.*/
    /* ------------------------------------------------------------*/

    if (FF08M001.FF08MBMO > 0) /* Buy month was entered*/

      if (FF08M001.YPGCD > "  " /* Type group was entered*/
       && FF08M001.XPCCD > "  ") /* Category was entered*/
        FF08W00.FF08WSWR = "Y"; /* Request for data switch*/
      else
        if (FF08M001.XPLCD > "  " /* Product line was entered*/
         && FF08M001.YPGCD > "  ") /* Type group was entered*/
          FF08W00.FF08WSWR = "Y"; /* Request for data switch*/
        end
      end

      return; /* Return to previous process*/
    end

  end


end // end FF08600

// Add page to temporary storage
Function FF08S01()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FF08W01.XXXTSLEN = FF08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FF08W00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FF08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FF08W01 empty; /* M001 display storage*/

    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FF08W01.FF08WBMO = FFWREC.FFQMBYMO; /* Beginning month*/

    FF08W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FF08W00.FF08WIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S01

// Retrieve buy flag for the cat
Function FF08S02()

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.FF4FCTMO = FF08W01.FF08WBMO; /* Forecast month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = FF08W00.XCTCD; /* Country code*/

  if (FFWREC.XPCCD > "  ") /* Category was specified*/

    FF7REC.XPCCD = FFWREC.XPCCD; /* Category from screen*/

    if (FFWREC.YPGCD == "* ") /* Wild card*/

      FF7REC.YPGCD = FF08W00.FF08WTYP[1]; /* Inline*/
      FF08S03(); /* Retrieve buy flag from VMCAT001*/
      FF7REC.YPGCD = FF08W00.FF08WTYP[2]; /* Makeup*/

    else

      FF7REC.YPGCD = FFWREC.YPGCD; /* Type group*/

    end

  else

    FF7REC.XPCCD = FF2REC.XPCCD; /* Category from VFFXRF01*/

    if (FFWREC.YPGCD == "* ") /* Wild card*/

      FF7REC.YPGCD = FF2REC.YPGCD;

    else

      FF7REC.YPGCD = FFWREC.YPGCD; /* Type group*/

    end

  end

  FF08S03(); /* Retrieve buy flag from VMCAT001*/

  if (FF7REC.XPCCD != FF08W00.XPCCD) /* Category code changed*/

    XPCREC.XPCCD = FF7REC.XPCCD;
    FF08W01.FF08MXPC[FF08WIXM] = "************";
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      FF08W01.FF08MXPC[FF08WIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    FF08W00.XPCCD = FF7REC.XPCCD;

    FF08W00.FF08WIXM = FF08W00.FF08WIXM + 1;

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FF08W00.FF08WIXM > 15) /* Page is full*/
      FF08S01(); /* Add page to temporary storage*/
    end

  end


end // end FF08S02

// Select & open for VMCAT001
Function FF08S03()

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF7REC.FF7CBYFL == "Y") /* Buy performed at CAT level*/

        FF08W01.FF08MCFL[FF08WIXM] = "Y";

      end

      if (FF7REC.FF7PBYFL == "Y") /* Buy performed at PROD level*/

        FF08W01.FF08MPFL[FF08WIXM] = "Y";

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF08W00.FF08WSWC = "Y"; /* End of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S03

// Retrieve line from VFFXRF01
Function FF08S05()

  FF08W00.FF08WEXF = "N"; /* Initialize the line exist flag*/

   /* ------------------------------------------------------------*/
   /* Select the row with the providing category and type group.*/
   /* ------------------------------------------------------------*/

  FF08S06();

   /* ------------------------------------------------------------*/
   /* Fetch the first row in the VFFXRF01 table.*/
   /* ------------------------------------------------------------*/

  FF08S07();

   /* ------------------------------------------------------------*/
   /* Close the cursor for the VFFXRF01 table.*/
   /* ------------------------------------------------------------*/

  FF08S08();

end // end FF08S05

// Select & open for VFFXRF01
Function FF08S06()

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  if (FFWREC.XPCCD == "  ")
    FF2REC.XPCCD = "*"; /* Wild card*/
    if (FFWREC.XPLCD == "  ")
      FF2REC.XPLCD = "*"; /* Wild card*/
    else
      FF2REC.XPLCD = FFWREC.XPLCD; /* Product line*/
    end
  else
    FF2REC.XPCCD = FFWREC.XPCCD; /* Category code*/
    FF2REC.XPLCD = "*"; /* Wild card*/
  end

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S06

// Fetch the 1st row in VFFXRF01
Function FF08S07()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF08W00.FF08WEXF = "Y"; /* Turn the line exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S07

// Close cursor for VFFXRF01
Function FF08S08()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S08

// Retrieve buy flag for line
Function FF08S10()

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF5REC empty; /* Clear row storage area*/

  if (FFWREC.XPLCD == " ")

    FF5REC.XPLCD = FF2REC.XPLCD; /* Product line from VFFXRF01*/

  else

    FF5REC.XPLCD = FFWREC.XPLCD; /* Product line from screen*/

  end
  FF5REC.FF4FCTMO = FF08W01.FF08WBMO; /* Buy month*/

  try
    call "IO3710" ("S ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF5REC.FF4BPFFL == "Y") /* Buy performed at line level*/

        FF08W01.FF08MLFL[1] = "Y";
        FF08W00.FF08WSWB = "Y";

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end FF08S10

// Retrieve buy flag for type grp
Function FF08S20()

   /* ----------------------------------------------------------*/
      /* Select and open the cursor*/
   /* ----------------------------------------------------------*/

  FF08S21(); /* Select and open cursor for VMLTYP01*/

   /* ----------------------------------------------------------*/
      /* Fetch the next row in the cursor*/
   /* ----------------------------------------------------------*/

  FF08W00.FF08WSWT = "N"; /* Initialize the end of cursor switch*/

  FF08W00.FF08WSWB = "N"; /* Initialize the buy exist switch*/

  while (FF08W00.FF08WSWT != "Y" /* Until end of cursor*/
   && FF08W00.FF08WSWB != "Y") /* or buy performed*/

    FF08S22(); /* Fetch next row in VMLTYP01*/

  end

   /* ----------------------------------------------------------*/
      /* Close the cursor*/
   /* ----------------------------------------------------------*/

  FF08S23(); /* Close the cursor for VMLTYP01*/


end // end FF08S20

// Select & open for VMLTYP01
Function FF08S21()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear row storage area*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = FF08W01.FF08WBMO; /* Beginning month*/
  FFFREC.FFFENDMO = FF08W01.FF08WBMO; /* Ending month*/

  if (FFWREC.XPLCD == "*")

    FF6REC.XPLCD = FF08W00.XPLCD; /* Product line from VMLINE01*/

  else

    FF6REC.XPLCD = FFWREC.XPLCD; /* Product line from screen*/
  end

  FF6REC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FF6REC.FF4BPFFL = "Y"; /* Buy performed flag*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S21

// Fetch next row in VMLTYP01
Function FF08S22()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("N1", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FF08W00.FF08WSWB = "Y"; /* Buy performed at line level*/

      if (FFWREC.XPCCD != " ") /* If category only*/
        FF08W01.FF08MLFL[1] = "Y"; /* Turn on the line flag*/
      else
        FF08W01.FF08MLFL[FF08WIXM] = "Y"; /* Turn on the line flag*/
      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF08W00.FF08WSWT = "Y"; /* End of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S22

// Close the cursor for VMLTYP01
Function FF08S23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" ("C1", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF08S23

// Obtain list of FFXRF01 lines
Function FF08S25()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S25

// Fetch next FFXRF01 line row
Function FF08S26()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      XPLREC.XPLCD = FF2REC.XPLCD;
      FF08W00.XPLCD = FF2REC.XPLCD; /* Save current product line*/
      FF08W01.FF08MXPL[FF08WIXM] = "******";
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FF08W01.FF08MXPL[FF08WIXM] = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF08W00.FF08WSWL = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S26

// Obtain MLINE01 buy flag
Function FF08S27()
   /* ------------------------------------------------------------*/
   /* Select the MLINE01 row using line from FFXRF01.*/
   /* ------------------------------------------------------------*/

  set FF5REC empty; /* Clear row storage area*/

  FF5REC.FF4FCTMO = FF08W01.FF08WBMO; /* Fcst month*/
  FF5REC.XPLCD = FF08W00.XPLCD;

  try
    call "IO3710" ("S ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF5REC.FF4BPFFL == "Y") /* Buy performed at line level*/
        FF08W00.FF08WSWB = "Y";
        FF08W01.FF08MLFL[FF08WIXM] = "Y"; /* Turn on line flag*/
      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S27

// Close the cursor for VFFXRF01
Function FF08S28()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S28"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S28

// Retrieve buy flgs for all cats
Function FF08S30()

   /* ----------------------------------------------------------*/
      /* Select and open the cursor*/
   /* ----------------------------------------------------------*/

  FF08S31(); /* Select and open cursor for VFFXRF01*/

   /* ----------------------------------------------------------*/
      /* Fetch the next row in the cursor*/
   /* ----------------------------------------------------------*/

  FF08W00.FF08WSWX = "N"; /* Initialize end of cursor switch*/
  FF08W00.XPCCD = "  "; /* Initialize temp category code area*/

  FF08S32(); /* Fetch next row in VFFXRF01*/

  if (FF08W00.FF08WSWX == "Y")

    FF08W00.FF08WIXM = FF08W00.FF08WIXM + 1;

    if (FF08W00.FF08WIXM > 15) /* Page is full*/

      FF08S01(); /* Add page to temporary storage*/

    end

  else

    while (FF08W00.FF08WSWX != "Y") /* Until end of cursor*/

      FF08S02(); /* Retrieve buy flag for each category*/

      FF08S32(); /* Fetch next row in VFFXRF01*/

    end

  end

   /* ----------------------------------------------------------*/
      /* Close the cursor*/
   /* ----------------------------------------------------------*/

  FF08S33(); /* Close the cursor for VFFXRF01*/


end // end FF08S30

// Select & open for VFFXRF01
Function FF08S31()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.XPCCD = "*"; /* Category code*/

  if (FFWREC.XPLCD == "*")

    FF2REC.XPLCD = FF08W00.XPLCD; /* Product line from VMLINE01*/

  else

    FF2REC.XPLCD = FFWREC.XPLCD; /* Product line from screen*/

  end

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S31

// Fetch next row in VFFXRF01
Function FF08S32()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FF08W00.FF08WSWX = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S32

// Close the cursor for VFFXRF01
Function FF08S33()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S33"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FF08S33

// Obtain temporary storage
Function FF08S60()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FF08W01.XXXTSLEN = FF08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FF08W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FF08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S60"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FF08S60

//*** RECORD=FF08W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FF08W00 type basicRecord
  10 FF08WSWF FF08WSWF ; 
  10 FF08WSWR FF08WSWR ; 
  10 FF08WSWC FF08WSWC ; 
  10 FF08WSWX FF08WSWX ; 
  10 FF08WSWL FF08WSWL ; 
  10 FF08WSWT FF08WSWT ; 
  10 FF08WSWB FF08WSWB ; 
  10 FF08WEXF FF08WEXF ; 
  10 FF08WIXM FF08WIXM ; 
  10 FF08WIND FF08WIND ; 
  10 FF08WXPL FF08WXPL ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XCTCD XCTCD ; 
  10 XPLCD XPLCD ; 
  10 XPCCD XPCCD ; 
  10 FF08WTYP FF08WTYP [2] ; 
end // end FF08W00

//*** RECORD=FF08W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FF08W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(321) ; 
    10 FF08WBMO FF08WBMO ; 
      15 FF08WBCC FF08WBCC ; 
      15 FF08MBMO FF08MBMO ; 
    10 FF08MXPL FF08MXPL [15] ; 
    10 FF08MLFL FF08MLFL [15] ; 
    10 FF08MXPC FF08MXPC [15] ; 
    10 FF08MCFL FF08MCFL [15] ; 
    10 FF08MPFL FF08MPFL [15] ; 
end // end FF08W01

// Buy YYMM
DataItem FF08MBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy flag at category level
DataItem FF08MCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy flag at line level
DataItem FF08MLFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy flag at product level
DataItem FF08MPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Category short description
DataItem FF08MXPC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product line abbreviation
DataItem FF08MXPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buy century
DataItem FF08WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy month
DataItem FF08WBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line existing flag
DataItem FF08WEXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display index
DataItem FF08WIND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display index
DataItem FF08WIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy flag switch
DataItem FF08WSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor sw - comp & cat
DataItem FF08WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FF08WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - line
DataItem FF08WSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FF08WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - type
DataItem FF08WSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor switch - xref
DataItem FF08WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type group code
DataItem FF08WTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp line abbreviation
DataItem FF08WXPL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

