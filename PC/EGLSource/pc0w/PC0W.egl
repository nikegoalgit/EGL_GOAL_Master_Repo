package pc0w;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=PC0W ****
//   This application brings up a list of P.O. header audits.
// The database will return 0 to N rows based upon the
// selection criteria passed in.  The application will format
// the screen with the information returned from the database.
// 
//   The user will enter this program by pressing enter from
// P.O. audit inquiry selection (PC0Q) with a selection type
// of 'H'.  After pressing PF3 the user will return to that
// program.
// 
//   The user may scroll through the data by pressing either
// PF7(backward) of PF8 (orward) if more than one page exists.
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
// 07/07/89   JNEWMA         New application.
// 06/03/97   PHARWO         PCA367 - PPR PROJECT, PO VIEWS
// 07/08/97   jniese         PCA367 - PPR corrections
// 08/27/98   dsinha         Pcf163 - to use drda and to
//                           display Reg code description
// *********************
Program PC0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC0WW00 PC0WW00; // record
  PC0WW01 PC0WW01; // record
  PC0WW02 PC0WW02; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOAHD02 VPOAHD02; // record
  VPOREG01 VPOREG01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YOATBL {deleteAfterUse = yes}; // table
  use PC0WM.PC0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC0W001; /* Special Initialization*/

    PC0W001: PC0W001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC0W002; /* Converse main process*/
    PC0W002: PC0W002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0W002; /* Converse Detail Schedule List*/


  end // end main
end // end PC0W

// Special Initialization
Function PC0W001()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] != "PC0Q") /* If not coming from PC0Q*/
    COMMAREA.CATOAP = "PC0A"; /* Load for transfer*/
    PCWREC.XXXMSGNO = 191; /* Cannot fastpath to here*/
    XSPCS01(); /* Transfer to P.O. menu*/
    exit stack; /* Display message if error in transfer*/
  end
  PCWREC.CAFROMAP[2] = " "; /* Init from ap 2 for error transfer*/

  set PC0WW00 empty; /* Initialize working storage*/
  set PC0WW01 empty; /* Initialize map 001 detail format*/
  set PC0WW02 empty; /* Initialize map 001 storage area*/
  set PC0WM001 initial; /* M001 input/output*/
  set PCYREC empty; /* Function,count,& date range for IO*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA5REC empty; /* Temporary storage*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/

  PC0WW00.XXXPRCNM = "PC0W"; /* Module identification*/
  PC0WW00.XXXTSLEN = 1155; /* Page length*/
  PC0WW00.XXXTSPAG = 1; /* Page requested*/

end // end PC0W001

// Audit inquiry selection
Function PC0W002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0W100(); /* Obtain data to display*/

  PC0W200(); /* Format and display the map*/

  PC0W300(); /* Check attention identifier*/

  PC0W400(); /* Reset fields to normal intensity*/

  PC0W500(); /* Verify the entered data*/

end // end PC0W002

// Obtain data to display
Function PC0W100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0WW00.PC0WWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0WW00.PC0WWSWR = "N"; /* display data switch*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage*/
   /* ------------------------------------------------------------*/

  PC0WS01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* IO to select and open VPOAHD02 ( P.O. ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC0W110(); /* Open cursor for VPOAHD02*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOAHD02 row, format & store data*/
   /* ------------------------------------------------------------*/

  PC0WW00.PC0WWIXM = 1; /* Initialize map index*/
  while (PC0WW00.PC0WWDCF == "N") /* While more rows*/

    PC0W120(); /* Get next VPOAHD02 row*/

    if (PC0WW00.PC0WWDCF == "N") /* If more data obtained*/
      if (VPOAHD02.YOACD in YOATBL.YOACD /* If audit type in table*/
       && YOATBL.YOAINQFL[sysVar.arrayIndex] == "Y") /* and online flag is yes*/
        if (VPOAHD02.YOACD == PCWREC.YOACD /* If codes match*/
         || PCWREC.YOACD == "*")           /* or wildcard*/
          PC0W150(); /* Format a detail line*/
          PC0WW00.PC0WWIXM = PC0WW00.PC0WWIXM + 1; /* Increment map index*/
          if (PC0WW00.PC0WWIXM > 15) /* Page is full*/
            PC0W140(); /* Add page to temporary storage*/
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* IO to close VPOAHD02 set*/
   /* ------------------------------------------------------------*/

  PC0W130(); /* Close cursor VPOAHD02 row*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0WW00.PC0WWIXM > 1) /* Page was formatted*/
    PC0W140(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0WW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0WW00.XXXPRCNM = "PC0W100"; /* Module identification*/
    PCWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    PC0WS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    exit stack; /* Return to show error message*/

    exit stack; /* Exit to display map*/
  end
end // end PC0W100

// Select cursor - VPOAHD01
Function PC0W110()
  PC0WW00.PC0WWDCF = "N"; /* End of VPOAHD02 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOAHD02 with key values for select set*/
   /* ------------------------------------------------------------*/

  set VPOAHD02 empty; /* Initialize VPOAHD02*/
  VPOAHD02.XGPCD = PCWREC.XGPCD; /* GPC code*/
  VPOAHD02.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAHD02.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  PCYREC.PCYFUNC = "Z1"; /* Function*/
  PCYREC.PCYFRDT = PCWREC.PCWFRDT; /* From PO ID*/
  PCYREC.PCYTODT = PCWREC.PCWTODT; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0WW00.XXXPRCNM = "PC0W110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOAHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0W110"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PC0WW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0WW00.PC0WWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PC0WW00.PC0WWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PC0WW00.PC0WWKN3 = VPOAHD02.PC3POIDT; /* Key field 3*/
  PC0WW00.PC0WWKA4 = VPOAHD02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0WW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0WS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/

end // end PC0W110

// Fetch next row - VPOAHD01
Function PC0W120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOAHD02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "G1"; /* Function*/
  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0WW00.PC0WWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0WW00.XXXPRCNM = "PC0W120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0W120"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PC0WW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0WW00.PC0WWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PC0WW00.PC0WWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PC0WW00.PC0WWKN3 = VPOAHD02.PC3POIDT; /* Key field 3*/
  PC0WW00.PC0WWKA4 = VPOAHD02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0WW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0WS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/

end // end PC0W120

// Close cursor - VPOAHD01
Function PC0W130()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Q1"; /* Close cursor*/
  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0WW00.XXXPRCNM = "PC0W130"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOAHD02 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0W130"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0WS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/


end // end PC0W130

// Add page to temp storage
Function PC0W140()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0WW02.XXXTSLEN = PC0WW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0WW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0WW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0WW02 empty; /* M001 display storage*/

    PC0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0WW00.PC0WWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0WW00.XXXPRCNM = "PC0W140"; /* Module identification*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0W140"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0W140

// Move data to map page storage
Function PC0W150()
  set PC0WW01 empty;
  PC0W151(); /* Convert date*/
  PC0WW00.PC0WWCTM = VPOAHD02.ZZZCHGTM; /* Change time*/
  PC0WW01.PC0WWHH = PC0WW00.PC0WWHH; /* Hours*/
  PC0WW01.PC0WWCLN = ":"; /* Colon*/
  PC0WW01.PC0WWMM = PC0WW00.PC0WWMM; /* Minutes*/
  if (VPOAHD02.YOACD in YOATBL.YOACD)
    PC0WW01.YOASDESC = YOATBL.YOASDESC[sysVar.arrayIndex];
  end
  PC0WW01.PC0WWUID = VPOAHD02.XXXPGUID; /* User ID*/
  if (VPOAHD02.PCIBFRN == 0 /* IF zero before num*/
   && VPOAHD02.PCIAFTN == 0) /* & zero after num*/
    PC0WW01.PC0WWBFA = VPOAHD02.PCIBFRA; /* Before image*/
    PC0WW01.PC0WWAFA = VPOAHD02.PCIAFTA; /* After image*/
  else
    PC0WW01.PC0WWBFN = VPOAHD02.PCIBFRN; /* Before image*/
    if (PC0WW01.PC0WWBFN < 0) /* If negative*/
      PC0WWBFN = PC0WWBFN * -1; /* Make positive*/
      PC0WW01.PC0WWBFS = "-"; /* Sign*/
    else
      PC0WW01.PC0WWBFS = " "; /* Sign*/
    end
    PC0WW01.PC0WWAFN = VPOAHD02.PCIAFTN; /* After image*/
    if (PC0WW01.PC0WWAFN < 0) /* If negative*/
      PC0WWAFN = PC0WWAFN * -1; /* Make positive*/
      PC0WW01.PC0WWAFS = "-"; /* Sign*/
    else
      PC0WW01.PC0WWAFS = " "; /* Sign*/
    end
  end

  PC0WW02.PC0WMLIN[PC0WWIXM] = PC0WW01.PC0WMLIN; /* Map detail line*/

end // end PC0W150

// Convert date
Function PC0W151()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to convert date.*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* Initialize date record*/
  TA2REC.TA2GRGGN = VPOAHD02.ZZZSDT; /* Setup date*/
  TA2REC.TA2GRTYP = "G"; /* Type CCYYMMDD*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    PC0WW01.PC0WWSDT = TA2REC.TA2GRGA; /* Reformatted date*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0WW00.XXXPRCNM = "PC0W151"; /* MODULE IDENTIFICATION*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PC0WW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0W151

// Converse PO audit header map
Function PC0W200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0W210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0WM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0WM001.XXXPRCNM = PC0WW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0WM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0WW00.XXXPRCNM = "PC0W"; /* Module identification*/
  COMMAREA.CATOAP = PC0WM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0WM001.CAITEM; /* Application data*/

end // end PC0W200

// Format detail lines of 001
Function PC0W210()
   /* ------------------------------------------------------------*/
   /* Clear map fields*/
   /* ------------------------------------------------------------*/

  set PC0WM001 initial; /* M001 input/output area*/
  PC0WM001.XXXTSPAG = PC0WW00.XXXTSPAG; /* Current page*/
  PC0WM001.TA5TSQIX = PC0WW00.TA5TSQIX; /* Total pages*/
  PC0WW00.PC0WWPOD = PCWREC.PC3POIDT; /* PO ID*/
  PC0WW00.PC0WMYY = PC0WW00.PC0WWYY; /* PO ID year*/
  PC0WW00.PC0WMD1 = "-"; /* PO ID dash 1*/
  PC0WW00.PC0WMM1 = PC0WW00.PC0WWM1; /* PO ID buy month*/
  PC0WW00.PC0WMD2 = "-"; /* PO ID dash 2*/
  PC0WW00.PC0WMM2 = PC0WW00.PC0WWM2; /* PO ID deliver month*/
  PC0WW00.PC0WMD3 = "-"; /* PO ID dash 3*/
  PC0WW00.FY1FCTYC = PCWREC.FY1FCTYC; /* PO ID factory*/
  PC0WM001.PC0WMPOD = PC0WW00.PC0WMPOD; /* PO ID reformatted*/
  PC0WM001.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  PC0WM001.PC4ORTYP = PCWREC.PC4ORTYP; /* PO type*/
  PC0WS11(); /* get reg description*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0WM001.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  else /* Row not found*/
    PC0WM001.PO-REG-DESC = "*** NOT FOUND"; /* po-reg-desc*/
  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0WW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0WW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0WW00.XXXTSPAG > PC0WW00.TA5TSQIX) /* Desired greater highest*/
        PC0WW00.XXXTSPAG = PC0WW00.TA5TSQIX; /* Default to highest*/
      end

      PC0W211(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0WW00.PC0WWIXM = 1; /* Initialize line index*/

  while (PC0WW00.PC0WWIXM <= 15 /* Until screen is full*/
   && PC0WW02.PC0WMLIN[PC0WWIXM] > " ") /* or end of data*/

    PC0WM001.PC0WMLIN[PC0WWIXM] = PC0WW02.PC0WMLIN[PC0WWIXM];

    PC0WW00.PC0WWIXM = PC0WW00.PC0WWIXM + 1; /* Increment line index*/

  end

end // end PC0W210

// Read temp storage page
Function PC0W211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0WW02.XXXTSLEN = PC0WW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0WW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0WW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0WW00.XXXPRCNM = "PC0W211"; /* Module identification*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0W211"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0W211

// Check attention identifiers
Function PC0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PC0WS01(); /* Purge temporary storage*/
      set PCWREC empty; /* Initialize PC communications record*/
      XSPCS01(); /* Transfer*/
      PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
      COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
      XSPCS01(); /* Transfer*/
    else
      PC0WW00.XXXPRCNM = "PC0W300"; /* Module identification*/
      set PC0WM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/


    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    else
      PCWREC.CAFROMAP[1] = " "; /* Init from ap 1*/
      PCWREC.PCWUSER1 = " "; /* Init user 1*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0WS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    exit stack; /* Return to show error message*/

  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf7) 
    PC0WW00.XXXPRCNM = "PC0W300"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0W300

// Reset highlighted fields
Function PC0W400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0WM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0WM001.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0W400

// Verify the entered data
Function PC0W500()
   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0WW00.XXXPRCNM = "PC0W500"; /* Module identification*/
    set PC0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0WW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0WW00.XXXPRCNM = "PC0W500"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
      exit stack; /* Display map*/
    else
      PC0WW00.XXXTSPAG = PC0WW00.XXXTSPAG - 1; /* Decrement page number*/
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0WW00.XXXTSPAG >= PC0WW00.TA5TSQIX) /* if no more pages*/
      PC0WW00.XXXPRCNM = "PC0W500"; /* Module identification*/
      PCWREC.XXXMSGNO = 3; /* No more pages to display*/
      exit stack; /* Display map*/
    else
      PC0WW00.XXXTSPAG = PC0WW00.XXXTSPAG + 1; /* Increment page number*/
      return;
    end
  end

end // end PC0W500

// Purge any temporary storage
Function PC0WS01()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0WW02 empty; /* Map display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0WW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0WW00.XXXPRCNM = "PC0WS01"; /* Module identification*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0WS01"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0WS01

// Select unique from VPOREG01
Function PC0WS11()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = PCWREC.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to get desc.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0WM001.XXXPRCNM = "PC0WS11"; /* Module name*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PC0WS11"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack; /* Exit to display map*/

end // end PC0WS11

//*** RECORD=PC0WW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0WW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PC0WWSWR PC0WWSWR ; 
  10 PC0WWDCF PC0WWDCF ; 
  10 PC0WWIXM PC0WWIXM ; 
  10 PC0WWCTM PC0WWCTM ; 
    15 PC0WWHH PC0WWHH ; 
    15 PC0WWMM PC0WWMM ; 
  10 PC0WWPOD PC0WWPOD ; 
    15 PC0WWYY PC0WWYY ; 
    15 PC0WWM1 PC0WWM1 ; 
    15 PC0WWM2 PC0WWM2 ; 
  10 PC0WMPOD PC0WMPOD ; 
    15 PC0WMYY PC0WMYY ; 
    15 PC0WMD1 PC0WMD1 ; 
    15 PC0WMM1 PC0WMM1 ; 
    15 PC0WMD2 PC0WMD2 ; 
    15 PC0WMM2 PC0WMM2 ; 
    15 PC0WMD3 PC0WMD3 ; 
    15 FY1FCTYC FY1FCTYC ; 
  10 PC0WWKEY PC0WWKEY ; 
    15 PC0WWKY1 PC0WWKY1 ; 
    15 PC0WWKY2 PC0WWKY2 ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0WWKA1 PC0WWKA1 ; 
      20 PC0WWKN1 PC0WWKN1 ; 
      20 * char(1) ; 
    15 PC0WWKA2 PC0WWKA2 ; 
      20 PC0WWKN2 PC0WWKN2 ; 
      20 * char(1) ; 
    15 PC0WWKA3 PC0WWKA3 ; 
      20 PC0WWKN3 PC0WWKN3 ; 
      20 * char(1) ; 
    15 PC0WWKA4 PC0WWKA4 ; 
      20 PC0WWKN4 PC0WWKN4 ; 
      20 * char(1) ; 
end // end PC0WW00

//*** RECORD=PC0WW01 ****
// ******* MAP ADDRESS STORAGE FOR PC05M010 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0WW01 type basicRecord
  10 PC0WMLIN PC0WMLIN ; 
    15 PC0WWSDT PC0WWSDT ; 
    15 * char(1) ; 
    15 PC0WWHH PC0WWHH ; 
    15 PC0WWCLN PC0WWCLN ; 
    15 PC0WWMM PC0WWMM ; 
    15 * char(2) ; 
    15 YOASDESC YOASDESC ; 
    15 * char(2) ; 
    15 PC0WWUID PC0WWUID ; 
    15 * char(2) ; 
    15 PC0WWBFA PC0WWBFA ; 
      20 PC0WWBFN PC0WWBFN ; 
      20 PC0WWBFS PC0WWBFS ; 
      20 * char(10) ; 
    15 * char(1) ; 
    15 PC0WWAFA PC0WWAFA ; 
      20 PC0WWAFN PC0WWAFN ; 
      20 PC0WWAFS PC0WWAFS ; 
      20 * char(10) ; 
end // end PC0WW01

//*** RECORD=PC0WW02 ****
// *** WORK RECORD FOR PC0Z PAGE DATA TEMPORARY STORAGE ***
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/13/89   JNEWMA   NEW RECORD
// ***********************
Record PC0WW02 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 PC0WMLIN PC0WMLIN [15] ; 
end // end PC0WW02

// PO ID dash 1
DataItem PC0WMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 2
DataItem PC0WMD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 3
DataItem PC0WMD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map detail line
DataItem PC0WMLIN char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0WMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0WMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted for map
DataItem PC0WMPOD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0WMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// After image alpha
DataItem PC0WWAFA char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// After image numeric
DataItem PC0WWAFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// After numeric sign
DataItem PC0WWAFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Before image alpha
DataItem PC0WWBFA char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Before image numeric
DataItem PC0WWBFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Before numeric sign
DataItem PC0WWBFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon
DataItem PC0WWCLN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change time
DataItem PC0WWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor flag
DataItem PC0WWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours
DataItem PC0WWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map detail line index
DataItem PC0WWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0WWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0WWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0WWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0WWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for access to CSP tables
DataItem PC0WWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0WWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0WWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0WWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0WWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First field of table key
DataItem PC0WWKY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second field of table key
DataItem PC0WWKY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0WWM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0WWM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minutes
DataItem PC0WWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID from DB
DataItem PC0WWPOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Setup date
DataItem PC0WWSDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PC0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User ID
DataItem PC0WWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0WWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

