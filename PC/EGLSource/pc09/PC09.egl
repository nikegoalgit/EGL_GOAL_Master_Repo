package pc09;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PC09 ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO CREATE THE ORDER BY SUMMARY AND
// *   THE SIZE DESTINATION REPORTS.   ONLY FOOTWARE WILL HAVE
// *   USE OF THIS PROGRAM.
// *
// *   THE USER WILL ENTER A P.O. ID DATE(THE FIRST SIX DIGITS)
// *   AND WILL THEN BE ABLE TO SPECIFY EITHER ALL FACTORIES
// *   OR ONE FACTORY, IF ALL FACTORIES THE USER THEN WILL HAVE
// *   THE OPTION OF ENTERING A COUNTRY CODE TO OBTAIN A REPORT
// *   FOR ALL FACTORIES FOR THAT COUNTRY.  IF A SINGLE FACTORY
// *   IS SELECTED FOR THE FIRST TIME FOR A SPECIFIC P.O. ID
// *   DATE THE USER CAN ONLY ENTER SINGLE FACTORIES UNTIL THEY
// *   CHANGE THE P.O. ID DATE OR REQUEST THE PRINTER ROUTINE
// *   BY HITTING THE PF9 KEY. IF ALL FACTORIES IS SELECTED
// *   THE USER CAN ENTER A COUNTRY AND THEY WILL GET ALL THE
// *   FACTORIES FOR THE COUNTRY ENTERED. BY LEAVING THE
// *   COUNTRY FIELD BLANK THE USER WILL GET A REPORT(S) FOR
// *   ALL FACTORIES AND ALL COUNTRIES.
// *
// *   THE USER WILL HAVE TO SELECT AT LEAST ONE OF THE REPORTS
// *   LISTED TO GET TO THE PRINTER SELECTION ROUTINE. ONCE
// *   A REPORT(S) HAS/HAVE BEEN SELECTED THE REPORT FLAGS WILL
// *   BE LOCKED UP UNTIL THE PRINTER ROUTINE HAS RUN.
// *
// *   AT THE PRESENT TIME 9-13-89 THE USER WILL BE ABLE TO
// *   ENTER UP TO 60 PARMS. PER REPORT REQUEST.
// *
// ************************************************************
// *   DATE        USERID             COMMENTS
// * ________    __________          ______________________
// * 09/01/89    gwitzi              new application
// * 12/05/89    JWOOD               REMOVED TARREC FROM LIST
// * 12/05/89    JWOOD               REPLACED TA0PM001
// * 07/17/90    JWOOD               REMOVED UT2REC FROM LIST
// * 09/28/90    mchris              changed jcl to not allow
// *                                 step p0070 to run
// * 01/08/91    kdenne              added logic to allow users
// *                                 to enter style,dim,colr as
// *                                 options.
// * 02/28/91    kdenne              found bug in logic for
// *                                 sty,dim,colr edits.
// * 07/01/91    dfranc              Added new laser print map
// *                                 field.  Added JCL tables
// *                                 to print out to the laser
// *                                 and remote printers for
// *                                 bundle.
// * 10/09/91    lsutto              change implicits allowed
// *                                 to = no in appl pc09
// * 08/03/92    ksanfo              F131 - renamed job and
// *                                 procs to PC1001.
// * 10/13/92    ksanfo              jcl bug fix PC09T01
// * 12/30/93    gamen               add theater of ops code
// * 11/19/1997  TTHAN1              Y2KFIX - ADD NEW ITEM
// *                                 PC09CCYY, CHANGE SIZE OF
// *                                 PC09WCY1 AND PC09WCY2
// *                                 FROM 2 TO 4, ADD NEW
// *                                 GROUP PC09WCY.  CHANGE
// *                                 PC09520
// ************************************************************
// *********************
Program PC09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC09W01 PC09W01; // record
  PC09W02 PC09W02; // record
  PC09W03 PC09W03; // record
  PC09W04 PC09W04; // record
  PCWREC PCWREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PC09T01 {deleteAfterUse = yes}; // table
  use PC09T11; // table
  use PC09T02 {deleteAfterUse = yes}; // table
  use PC09T22 {deleteAfterUse = yes}; // table
  use PC09M.PC09M010,  // forms
      PC09M.TA0PM001, 
      PC09M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE THE RECORDS, MAPS, AND FIELDS*/
     /* ------------------------------------------------------------*/

    set FY1REC empty; /* CLEAR FACTORY RECORD*/
    set PG2REC empty; /* CLEAR STYLE RECORD*/
    set PC09W01 empty; /* Working storage*/
    set PC09W02 empty; /* Working storage  JCL*/
    set PC09W03 empty; /* Working storage Screen parm.*/
    set PC09W04 empty; /* Working storage Parm. table*/

    set ERRSQLCA empty;
    set SQLCA empty;
    set TA1REC empty;
    set TA2REC empty;
    set XCTHREC empty;
    set TA6REC empty;
    set TAEREC empty;

    set PC09M010 initial;
    set XX0XM001 initial;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PC09M010.FY1FCTYC = "ALL"; /* Initalize factory*/
    PC09M010.PC09MOBD = "N"; /* Initalize size request flag*/
    PC09M010.PC09MOBS = "N"; /* Initalize size summ.request flag*/
    PC09M010.PC09MPRT = "N"; /* Initalize laser print flag*/

    PC09W01.PC09WBRI = 0; /* Rpt. index*/
    PC09W01.PC09WMXB = 60; /* Rpt. max. number*/

     /* Will change later. For testing 10 prams. will be enough*/
     /* Will change later. For testing 10 prams. will be enough*/

    PC09W01.PC09WMXD = 10; /* Max. number for parms.*/


    PC09000: PC09000();
     /* no flow*/
    PC09050: PC09050();
    goto PC09050;
  end // end main
end // end PC09

// Special initialization
Function PC09000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC09W01.PC09WCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC09"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC09M010.XXXPRCNM = "PC09000"; /* Process name*/

    end
  end


end // end PC09000

// MAIN PROCESS TO DISPLAY MAP
Function PC09050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[2] == "Y" /* User can enter*/
   && COMMAREA.XGPCD == "02")   /* only footwear is allowed*/

    PC09080(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0X"; /* To application*/
    XSEXIT(); /* Exit to another application*/
  end



   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PC09M010.XXXPRCNM = "PC09050"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

end // end PC09050

// PROGRAM PROCESS CONTROL
Function PC09080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PC09200(); /* Format and display the map*/

  PC09300(); /* Check attention identifier*/

  PC09400(); /* Reset fields to normal intensity*/

  PC09500(); /* Verify the entered data*/

  PC09600(); /* Process the entered data*/


end // end PC09080

// DISPLAY MAP
Function PC09200()

   /* ------------------------------------------------------------*/
   /* If no hard errors to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No information message*/
   || converseVar.validationMsgNum == 253) /* Parms. added*/

    if (PC09W01.PC09WBRI == 0) /* Array index greater than nothing*/
      set PC09M010.PC09WMYY cursor; /* POID year*/
    else
      set PC09M010.FY1FCTYC cursor; /* Factory*/
    end

  else


    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC09M010.XXXPRCNM = "PC09200"; /* PROCESS NAME*/
      PC09M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PC09M010 alarm; /* Indicate sound alarm*/

  end


  PC09M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse PC09M010 ;

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PC09210(); /* POP-UP window*/
  end

end // end PC09200

// PERFORM POP UP WINDOW ROUTINE
Function PC09210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC09M010.XCTCD == "?" /* if any ?*/
   || PC09M010.XDMCD == "?")

    /* ------------------------------------------------------------*/
           /* factory country table window*/
    /* ------------------------------------------------------------*/

    if (PC09M010.XCTCD == "?") /* if ? in country code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               COUNTRY CODES"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform Country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the Season     **/
       /* *  table code to the map.                               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC09M010.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        set PC09M010.XCTCD cursor, modified;
      else
        PC09M010.XCTCD = PC09W01.XCTCD; /* clear fields*/
        set PC09M010.XCTCD cursor, modified;
      end
    end

    /* ------------------------------------------------------------*/
           /* dimension code table window*/
    /* ------------------------------------------------------------*/

    if (PC09M010.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             DIMENSION CODES"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dim. code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the Season     **/
       /* *  table code to the map.                               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC09M010.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
        set PC09M010.XDMCD cursor, modified;
      else
        PC09M010.XDMCD = PC09W01.XDMCD; /* clear fields*/
        set PC09M010.XDMCD cursor, modified;
      end
    end

    converseLib.clearScreen();
     /* Clear screen before display*/

     /* MOVE 84 TO EZEMNO               ; Hit enter to process*/

     /* EZEFLO                          ; Exit to redisplay map2*/

  end

end // end PC09210

// CHECK ATTENTION IDENTIFIERS
Function PC09300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC09M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PC09M010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC09M010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    end

    set PC09M010.CATOAP cursor, bold; /* Highlight*/
    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf9 /* PF9 was pressed*/
   && PC09W04.XGPCD[1] == " ")    /* Table empty*/
    converseLib.validationFailed(17); /* Parms. must be entered*/
    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PC09M010.XXXPRCNM = "PC09300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC09300

// RESTET THE HIGHLIGHTED FIELDS
Function PC09400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC09M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC09M010.CAITEM initialAttributes; /* Commarea application data*/

  set PC09M010.PC09WMYY initialAttributes; /* P.O. id production year*/
  set PC09M010.PC09WMM1 initialAttributes; /* P.O. id production month*/
  set PC09M010.PC09WMM2 initialAttributes; /* P.O. id delivery month*/
  set PC09M010.FY1FCTYC initialAttributes; /* Factory code*/
  set PC09M010.XCTCD initialAttributes; /* Country code*/
  set PC09M010.SY1STNBR initialAttributes; /* style number*/
  set PC09M010.SY2CLRID initialAttributes; /* style color*/
  set PC09M010.XDMCD initialAttributes; /* dimension*/
  set PC09M010.PC09MOBD initialAttributes; /* Order by size report request*/
  set PC09M010.PC09MOBS initialAttributes; /* Order by size summ. report request*/


end // end PC09400

// VERIFY THE ENTERED DATA
Function PC09500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC09M010.CAITEM > " ") /* Application data was entered*/

    set PC09M010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC09M010.XXXPRCNM = "PC09500"; /* Process name*/

  else

    PC09510(); /* Verify the entered data*/
    PC09520(); /* Process detail edits*/
    PC09525(); /* Process style,colr,dim edits*/
    PC09530(); /* Process parm. edits*/

  end


end // end PC09500

// EDIT THE ENTERED DATA
Function PC09510()

   /* ------------------------------------------------------------*/
     /* CHECK AND SEE WHAT REPORTS WERE REQUESTED*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/

    if (PC09M010.PC09MOBD == "Y" /* Order by size flag is y*/
     && PC09M010.PC09MOBS == "Y") /* Order by size summ. flag is y*/
      if (PC09W01.PC09WBRI >= PC09W01.PC09WMXB)
                                   /* Both index is ge both max.*/
        converseLib.validationFailed(240); /* Max. reached for both*/
        PC09M010.XXXPRCNM = "PC09510"; /* Process name*/
      end
    else
      if (PC09M010.PC09MOBD == "Y" /* Order by Dest flag is y*/
       && PC09M010.PC09MOBS == "N") /* Order by size summ. flag is n*/
        if (PC09W01.PC09WBRI >= PC09W01.PC09WMXB)
                                      /* Both index is ge Both max.*/
          converseLib.validationFailed(237); /* Max. reached for Dest.*/
          PC09M010.XXXPRCNM = "PC09510"; /* Process name*/
          exit stack; /* Exit to redisplay map*/
        end

      else
        if (PC09M010.PC09MOBS == "Y" /* Order by size summ. flag is y*/
         && PC09M010.PC09MOBD == "N") /* Order by Dest. flag is n*/
          if (PC09W01.PC09WBRI >= PC09W01.PC09WMXB)
                                          /* Both index is ge Both max.*/
            converseLib.validationFailed(238); /* Max. reached for Both*/
            PC09M010.XXXPRCNM = "PC09510"; /* Process name*/
            exit stack; /* Exit to redisplay map*/
          end
        end
      end
    end
  end


end // end PC09510

// DO DETAIL EDITS
Function PC09520()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* CHECK LASER PRINT OUTPUT REQUEST*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09MPRT == "Y")
     /* next sentence*/
  else
    if (PC09M010.PC09MPRT == "N"
     || PC09M010.PC09MPRT == " ")
      /* next sentence*/
    else
      set PC09M010.PC09MPRT cursor, bold; /* Highlight error*/
      converseLib.validationFailed(42); /* Print selection is invalid*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* CHECK THE REPORT REQUEST FLAGS*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09MOBS == "Y" /* Summ. report requested*/
   || PC09M010.PC09MOBS == "N") /* Summ. report not requested*/
    PC09W01.PC09MOBS = PC09M010.PC09MOBS;
  else
    set PC09M010.PC09MOBS cursor, bold; /* Highlight error*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC09M010.PC09MOBD == "Y" /* Dest. report requested*/
   || PC09M010.PC09MOBD == "N") /* Dest. report not requested*/
    PC09W01.PC09MOBD = PC09M010.PC09MOBD;
  else
    set PC09M010.PC09MOBD cursor, bold; /* Highlight error*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC09M010.PC09MOBD == "N" /* Dest. report requested*/
   && PC09M010.PC09MOBS == "N") /* Summ. report not requested*/
    set PC09M010.PC09MOBD cursor, bold; /* Highlight error*/
    set PC09M010.PC09MOBS bold; /* Highlight error*/
    converseLib.validationFailed(257); /* Only y or n valid*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09WMYY == 00 /* Nothing there*/
   && PC09M010.PC09WMM1 == 00 /* Nothing there*/
   && PC09M010.PC09WMM2 == 00) /* Nothing there*/
    set PC09M010.PC09WMYY cursor, bold; /* Highlight error*/
    converseLib.validationFailed(177); /* Date is missing*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/


  if (PC09M010.FY1FCTYC == " " /* Factory not entered*/
   && PC09M010.XCTCD == " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PC09M010.FY1FCTYC cursor, bold; /* Highlight error*/
    set PC09M010.XCTCD bold; /* Highlight error*/
    PC09M010.XCTDESC = " "; /* Country desc.*/
    PC09M010.FY1FCTNM = " "; /* Factory name*/
    PC09W01.XCTDESC = " "; /* Country desc.*/
    PC09W01.FY1FCTNM = " "; /* Factory name*/
    PC09M010.XXXPRCNM = "PC0952A"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* COUNTRY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC09M010.XCTCD > " ")
    if (PC09M010.XCTCD in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC09W01.XCTCD = PC09M010.XCTCD; /* Country code*/
      PC09M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
      PC09W01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/

    else
      converseLib.validationFailed(49); /* Invalid country code*/
      set PC09M010.XCTCD cursor, bold; /* Highlight error*/
      PC09M010.XCTDESC = " "; /* Country desc.*/
      PC09W01.XCTCD = " "; /* Country code*/
      PC09W01.XCTDESC = " "; /* Country desc.*/
      PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
    end
  else
    PC09W01.XCTCD = " "; /* Country code*/
    PC09M010.XCTDESC = " "; /* Country desc.*/
    PC09W01.XCTDESC = " "; /* Country desc.*/
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC09M010.FY1FCTYC == " ") /* Nothing there*/

    converseLib.validationFailed(252); /* Must enter*/
    set PC09M010.FY1FCTYC cursor, bold; /* Highlight error*/
    PC09W01.FY1FCTYC = " "; /* Factory code*/
    PC09W01.FY1FCTNM = " "; /* Factory name*/
    PC09M010.FY1FCTNM = " "; /* Factory name*/

  else
    if (PC09M010.FY1FCTYC == "ALL")
      PC09W01.FY1FCTYC = "ALL"; /* Factory code*/
      PC09W01.FY1FCTNM = " "; /* Factory name*/
      PC09M010.FY1FCTNM = " "; /* Factory name*/
    else
      set FY1REC empty; /* Clear record*/
      FY1REC.FY1FCTYC = PC09M010.FY1FCTYC; /* Search key*/
      FY1REC.XGPCD = "02"; /* Search key*/


      PC09S01(); /* Call factory check routine*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        if (FY1REC.XXXSTAT == "A") /* Everything OK*/
          PC09W01.FY1FCTYC = FY1REC.FY1FCTYC; /* Factory code*/
          PC09W01.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
          PC09M010.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
        else
          converseLib.validationFailed(32); /* Invalid factory*/
          PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
          set PC09M010.FY1FCTYC cursor, bold; /* Highlight error*/
          PC09W01.FY1FCTYC = " "; /* Factory code*/
          PC09W01.FY1FCTNM = " "; /* Factory name*/
          PC09M010.FY1FCTNM = " "; /* Factory name*/
        end
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
        set PC09M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC09W01.FY1FCTYC = " "; /* Factory code*/
        PC09W01.FY1FCTNM = " "; /* Factory name*/
        PC09M010.FY1FCTNM = " "; /* Factory name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09WMM2 > 00 /* Something there*/
   && PC09M010.PC09WMM2 <= 12)

    PC09W01.PC09WMM2 = PC09M010.PC09WMM2;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
    set PC09M010.PC09WMM2 cursor, bold; /* Highlight*/
    PC09W01.PC09WMM2 = 00;
  end

   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09WMM1 > 00 /* Something there*/
   && PC09M010.PC09WMM1 <= 12)

    PC09W01.PC09WMM1 = PC09M010.PC09WMM1;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
    set PC09M010.PC09WMM1 cursor, bold; /* Highlight*/
    PC09W01.PC09WMM1 = 00;
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09WMYY >= 00
   && PC09M010.PC09WMYY <= 99)
    PC09W01.PC09WMYY = PC09M010.PC09WMYY;

    /* ----------Y2K OUT BEGIN----------*/
    /* PC09W01.PC09WCY1 = PC09W01.PC09WYYY + 1; /* One year greater*/
    /* PC09W01.PC09WCY2 = PC09W01.PC09WYYY - 1; /* One year less*/
    /* IF PC09W01.PC09WMYY GE PC09W01.PC09WCY2  /* One year less or equal*/
    /* AND PC09W01.PC09WMYY LE PC09W01.PC09WCY1;*/
    /* ----------Y2K OUT END------------*/
    /* ----------Y2K IN BEGIN-----------*/
    PC09W01.PC09CCYY = PC09M010.PC09WMYY;
    if (PC09M010.PC09WMYY > 60)
      PC09W01.PC09CCYY = PC09W01.PC09CCYY + 1900;
    else
      PC09W01.PC09CCYY = PC09W01.PC09CCYY + 2000;
    end
    PC09W01.PC09WCY1 = PC09W01.PC09WCY + 1; /* One year greater*/
    PC09W01.PC09WCY2 = PC09W01.PC09WCY - 1; /* One year less*/
    if (PC09W01.PC09CCYY >= PC09W01.PC09WCY2 /* One year less or equal*/
     && PC09W01.PC09CCYY <= PC09W01.PC09WCY1)
      /* ----------Y2K IN END-------------*/
                                   /* One year greater or equal*/

       /* NEXT SENTENCE*/

    else
      converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
      PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
      set PC09M010.PC09WMYY cursor, bold; /* Highlight*/
      PC09W01.PC09WMYY = 00;
    end
  else
    converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
    PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
    set PC09M010.PC09WMYY cursor, bold; /* Highlight*/
    PC09W01.PC09WMYY = 00;
  end

  if (converseVar.validationMsgNum == 0) /* No message*/
    PC09S02(); /* Set up p.o. id date*/
  end

  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* No message*/

    if (PC09M010.FY1FCTYC != "ALL" /* P.O. ID factory code not all*/
     && PC09M010.FY1FCTYC > " "    /* P.O. ID factory code not all*/
     && PC09M010.XCTCD > " ")      /* Country code*/
      converseLib.validationFailed(236); /* Enter factory or country*/
      PC09M010.XXXPRCNM = "PC09520"; /* Process name*/
      set PC09M010.FY1FCTYC cursor, bold; /* Highlight error*/
    end

    if (PC09M010.PC09MOBD == "Y" /* Order by size flag*/
     || PC09M010.PC09MOBS == "Y") /* Order by size summ. flag*/
      set PC09M010.PC09MOBD skip; /* Order by size flag*/
      set PC09M010.PC09MOBS skip; /* Order by size summ. flag*/
    end
  end


end // end PC09520

// EDIT STYLE, COLOR, DIM.
Function PC09525()

   /* ------------------------------------------------------------*/
    /* SEE IF THE DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  PC09W01.SY1STNBR = " "; /* Style number*/
  PC09W01.SY2CLRID = " "; /* Color id*/
  PC09W01.XDMCD = " "; /* Dim. code*/
  if (PC09M010.XDMCD > " ") /* Something there*/
    if (PC09M010.XDMCD in XDMTBL.XDMCD /* Code is in the table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Code is active*/

       /* NEXT SENTENCE*/

    else
      set PC09M010.XDMCD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(53); /* Style/color/dim. invalid*/
      PC09M010.XXXPRCNM = "PC09525";
    end
  end

   /* ------------------------------------------------------------*/
    /* SEE IF THE STYLE, COLOR, DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  if (PC09M010.SY1STNBR > " " /* Style number*/
   && PC09M010.SY2CLRID > " " /* Color id*/
   && PC09M010.XDMCD > " ")   /* Dim. code*/
    set PG2REC empty; /* Clear style record*/
    PG2REC.SY1STNBR = PC09M010.SY1STNBR; /* Style number*/
    PG2REC.SY2CLRID = PC09M010.SY2CLRID; /* Color id*/
    PG2REC.XDMCD = PC09M010.XDMCD; /* Dim. code*/
    PG2REC.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    TA1REC.TA1PGMNM = "PC09525";

    XSPG202(); /* Get the style name*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

      PC09W01.SY1STNBR = PC09M010.SY1STNBR; /* Style number*/
      PC09W01.SY2CLRID = PC09M010.SY2CLRID; /* Color id*/
      PC09W01.XDMCD = PC09M010.XDMCD; /* Dim. code*/

    else
      set PC09M010.SY1STNBR cursor, bold; /* Style number*/
      set PC09M010.SY2CLRID bold; /* Color id*/
      set PC09M010.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(197); /* Style/color/dim. invalid*/
      PC09M010.XXXPRCNM = "PC09525";
    end
  else
    if (PC09M010.SY1STNBR > " ") /* Style number*/
      set PG2REC empty; /* Clear record*/
      PG2REC.SY1STNBR = PC09M010.SY1STNBR; /* Style number*/
      PG2REC.XGPCD = PCWREC.XGPCD; /* Gpc code*/
      TA1REC.TA1PGMNM = "PC09525";

      XSPG201(); /* Get the style name*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

        PC09W01.SY1STNBR = PC09M010.SY1STNBR; /* Style number*/
        PC09W01.SY2CLRID = PC09M010.SY2CLRID; /* Color id*/
        PC09W01.XDMCD = PC09M010.XDMCD; /* Dim. code*/

      else
        set PC09M010.SY1STNBR cursor, bold; /* Style number*/
        converseLib.validationFailed(52); /* Style color invalid*/
        PC09M010.XXXPRCNM = "PC09525";
      end
    end
  end

  if (PC09M010.SY1STNBR == " ") /* Style number*/
    if (PC09M010.SY2CLRID == "00" /* Color id*/
     || PC09M010.SY2CLRID == "  " /* Color id*/
     || PC09M010.XDMCD == "00")   /* Dim. code*/

       /* NEXT SENTENCE*/

    else
      set PC09M010.SY2CLRID cursor, bold; /* Color id*/
      set PC09M010.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(294); /* Style color invalid*/
      PC09M010.XXXPRCNM = "PC09525";
    end
  end


end // end PC09525

// PROCESS PARM EDITS
Function PC09530()

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC09W03.XGPCD = "02"; /* Gpc code*/
    PC09W03.PC09WIDT = PC09W01.PC09WPDT; /* PO ID*/
    PC09W03.FY1FCTYC = PC09W01.FY1FCTYC; /* Factory*/
    PC09W03.XCTCD = PC09W01.XCTCD; /* Country code*/
    PC09W03.SY1STNBR = PC09W01.SY1STNBR; /* style number*/
    PC09W03.SY2CLRID = PC09W01.SY2CLRID; /* style color*/
    PC09W03.XDMCD = PC09W01.XDMCD; /* dimension code*/
    PC09W03.PC09WAFL = "9"; /* Application req. flag*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS ARE ALREADY SET*/
    /* ------------------------------------------------------------*/


    if (PC09W03.PC09WDTB in PC09W04.PC09WBTB) /* Parm in table*/
      set PC09M010.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(241); /* Parm already in table*/
      PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
      return; /* Return to previous process*/
    else
      if (PC09W03.PC09WIDT in PC09W04.PC09WIDT) /* PO ID*/
        PC09W01.PC09WSRI = sysVar.arrayIndex; /* Set index*/
        while (PC09W01.PC09WSRI != PC09W01.PC09WMXB
         && PC09W04.XGPCD[PC09WSRI] > " ") /* Something in row*/
          if (PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
           && PC09W04.XCTCD[PC09WSRI] == " " /* Country code*/
           && PC09M010.FY1FCTYC == "ALL"     
           && PC09M010.XCTCD > " ")          /* Country code*/
            set PC09M010.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(254); /* cannot be country specific*/
            PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
           && PC09W04.XCTCD[PC09WSRI] > " " /* Country code*/
           && PC09M010.FY1FCTYC == "ALL"    
           && PC09M010.XCTCD == " ")        /* Country code*/
            set PC09M010.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(256); /* must be country specific*/
            PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC09M010.FY1FCTYC != "ALL"
           && PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
           && PC09W04.XCTCD[PC09WSRI] > " ")
            set PC09M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting all factories*/
            PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC09M010.FY1FCTYC == "ALL"
           && PC09W04.FY1FCTYC[PC09WSRI] > " "
           && PC09W04.FY1FCTYC[PC09WSRI] != "ALL")
            set PC09M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(260); /* Already getting factory*/
            PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC09M010.FY1FCTYC != "ALL"
           && PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
           && PC09M010.XCTCD == " ")
            set PC09M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting factory*/
            PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC09M010.SY1STNBR > " ")
            if (PC09W04.FY1FCTYC[PC09WSRI] == "ALL"       
             && PC09M010.FY1FCTYC == "ALL"                
             && PC09W04.XCTCD[PC09WSRI] == PC09M010.XCTCD /* ctry code*/
             && PC09M010.SY1STNBR == PC09W04.SY1STNBR[PC09WSRI]
             && PC09M010.SY2CLRID == PC09W04.SY2CLRID[PC09WSRI]
             && PC09M010.XDMCD == PC09W04.XDMCD[PC09WSRI])
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              set PC09M010.SY2CLRID bold;
              set PC09M010.XDMCD bold;
              converseLib.validationFailed(241); /* parm already requested*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09W04.FY1FCTYC[PC09WSRI] == "ALL"       
             && PC09M010.FY1FCTYC == "ALL"                
             && PC09W04.XCTCD[PC09WSRI] == PC09M010.XCTCD /* ctry code*/
             && PC09W04.SY1STNBR[PC09WSRI] == " ")        /* all styles*/
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(292); /* style already selected*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09M010.FY1FCTYC == PC09W04.FY1FCTYC[PC09WSRI]
             && PC09M010.XCTCD == " "
             && PC09M010.SY1STNBR == PC09W04.SY1STNBR[PC09WSRI]
             && PC09M010.SY2CLRID == PC09W04.SY2CLRID[PC09WSRI]
             && PC09M010.XDMCD == PC09W04.XDMCD[PC09WSRI])
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              set PC09M010.SY2CLRID bold;
              set PC09M010.XDMCD bold;
              converseLib.validationFailed(241); /* parm already requested*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09M010.FY1FCTYC == PC09W04.FY1FCTYC[PC09WSRI]
             && PC09M010.XCTCD == " "
             && PC09W04.SY1STNBR[PC09WSRI] == " ") /* all styles*/
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(292); /* style entered can't be blank*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09M010.FY1FCTYC != "ALL"
             && PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
             && PC09M010.XCTCD == " "
             && PC09M010.SY1STNBR == PC09W04.SY1STNBR[PC09WSRI]
             && PC09M010.SY2CLRID == PC09W04.SY2CLRID[PC09WSRI]
             && PC09M010.XDMCD == PC09W04.XDMCD[PC09WSRI])
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              set PC09M010.SY2CLRID bold;
              set PC09M010.XDMCD bold;
              converseLib.validationFailed(255); /* 'all' fctys requested*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

          end
          if (PC09M010.SY1STNBR == " ")
            if (PC09M010.FY1FCTYC == PC09W04.FY1FCTYC[PC09WSRI]
             && PC09M010.XCTCD == " "
             && PC09W04.SY1STNBR[PC09WSRI] > " ") /* unique style*/
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(293); /* style entered can't be blank*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09M010.FY1FCTYC == PC09W04.FY1FCTYC[PC09WSRI]
             && PC09M010.XCTCD == PC09W04.XCTCD[PC09WSRI]
             && PC09W04.SY1STNBR[PC09WSRI] > " ") /* unique style*/
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(293); /* style entered can't be blank*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

            if (PC09M010.FY1FCTYC != "ALL"
             && PC09W04.FY1FCTYC[PC09WSRI] == "ALL"
             && PC09M010.XCTCD == " "
             && PC09W04.SY1STNBR[PC09WSRI] > " ") /* unique style*/
              set PC09M010.SY1STNBR cursor, bold; /* Highlight*/
              converseLib.validationFailed(255); /* 'all' fctys requested*/
              PC09M010.XXXPRCNM = "PC09530"; /* Process name*/
              exit stack; /* Return to previous process*/
            end

          end

          PC09W01.PC09WSRI = PC09W01.PC09WSRI + 1; /* Increment index*/
        end
      end
    end
  end


end // end PC09530

// PROCESS THE VALID INPUT DATA
Function PC09600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/

    PC09610(); /* Save parms.*/

  else

    if (converseVar.eventKey is pf9) /* PF9 pressed*/

      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        if (PC09M010.PC09MPRT == "Y")
          PC09640(); /* format production jcl for laser*/
        else
          PC09620(); /* format production jcl for remote*/
        end
      else
        if (PC09M010.PC09MPRT == "Y")
          PC09641(); /* format development jcl for laser*/
        else
          PC09621(); /* format development jcl for remote*/
        end
      end

      PC09W01.PC09WDRI = 0;
      PC09W01.PC09WBRI = 0;
      PC09W01.PC09WSRI = 0;
      PC09W01.PC09WMXB = 10;

      set PC09W03 empty;
      set PC09W04 empty;

    end
  end


end // end PC09600

// DO SAVE THE PARMS
Function PC09610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC09W01.PC09WBRI = PC09W01.PC09WBRI + 1; /* Add 1 to index*/
    PC09W04.XGPCD[PC09WBRI] = "02"; /* Gpc code*/
    PC09W04.PC09WIDT[PC09WBRI] = PC09W01.PC09WPDT; /* PO ID*/
    PC09W04.FY1FCTYC[PC09WBRI] = PC09W01.FY1FCTYC; /* Factory*/
    PC09W04.XCTCD[PC09WBRI] = PC09W01.XCTCD; /* Country code*/
    PC09W04.SY1STNBR[PC09WBRI] = PC09W01.SY1STNBR; /* style nbr*/
    PC09W04.SY2CLRID[PC09WBRI] = PC09W01.SY2CLRID; /* style colr*/
    PC09W04.XDMCD[PC09WBRI] = PC09W01.XDMCD; /* dimension code*/
    PC09W04.PC09WAFL[PC09WBRI] = "9"; /* Application req. flag*/
    converseLib.validationFailed(253); /* Parm. Entered*/

    if (PC09W01.PC09WBRI == 10) /* Max amount for table*/
      converseLib.validationFailed(240); /* Max amount reached*/
      PC09M010.XXXPRCNM = "PC09610"; /* Process name*/
    end

  end


end // end PC09610

// SUBMIT PROD JOBS TO REMOTE
Function PC09620()

   /* ------------------------------------------------------------*/
     /* Format and submit prod jcl for remote print*/
   /* ------------------------------------------------------------*/

  if (PC09W04.PC09WBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* set the condition code over-rides*/
    /* ------------------------------------------------------------*/

    PC09630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC09W01.PC09WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC09W01.PC09WIX2 = 0; /* Initialize index*/
    PC09W01.PC09WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC09W01.PC09WIXT > 0) /* Until end of table*/

      if (PC09T01.TARTYPE[PC09WIXT] == "E") /* Execute statement*/

        /* ------------------------------------------------------------*/
         /* Format Execute statement*/
        /* ------------------------------------------------------------*/

        PC09W02.PC09WTYP = "E"; /* Type*/

        if (PC09W01.PC09WIXT < PC09W01.PC09WMXB) /* primary rpts exec stmnt*/
          PC09W02.PC09WEX1 = "//S0010   EXEC"; /* execute statemen*/
          PC09W02.PC09WPNM = "PC1001,"; /* Proc name*/
        end

        TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCE; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PC09T01.TARTYPE[PC09WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

          PC09W02.PC09WTYP = "P"; /* Type*/

          PC09W01.PC09WIX3 = 1;

          while (PC09W01.PC09WIX3 <= PC09W01.PC09WMXD) /* LE max for table*/
            if (PC09W04.PC09WBTB[PC09WIX3] > "0")
              TA6REC.TA6ROW[TA6INDEX] = PC09W04.PC09WBTB[PC09WIX3];
              TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* increment parms index*/
            else
              PC09W01.PC09WIX3 = PC09W01.PC09WMXD; /* Set index to 10*/
            end
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1;
                                  /* ; Increment both tbl indx*/
          end
        else
          if (PC09T01.TARTYPE[PC09WIXT] == "X") /* condition statment*/


            /* ------------------------------------------------------------*/
             /* Format condition statements*/

            /* ------------------------------------------------------------*/

            PC09W02.PC09WTYP = "X"; /* type*/
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1; /* increment index*/
            PC09W02.PC09WJCC[PC09WIX3] = " "; /* clear working strg*/
            PC09W02.PC09WJCC[PC09WIX3] = PC09T01.TARJCL[PC09WIXT];
            PC09W02.PC09WCLG[PC09WIX3] = PC09W02.PC09WCND[PC09WIX3];
            TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCC[PC09WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

          else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            if (PC09T01.TARJCL[PC09WIXT] == "            /*EOF" /* End of table*/
             && PC09W01.PC09WIXT == PC09W01.PC09WMXB)   

              PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1;
              /* increment index*/
            else
               /* move ta0431 and other cards to table*/
              PC09622();
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC09T01.TARJCL[PC09WIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PC09W01.PC09WIXT == PC09W01.PC09WMXB)
           /* next sentence*/
        else
          PC09W01.PC09WIXT = 0; /* Indicate end of table*/
        end

      else

        PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC09S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC09W04 empty; /* Clear parameter table*/
      return;

    else

      set PC09W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC09620

// SUBMIT TEST JOBS TO REMOTE
Function PC09621()

   /* ------------------------------------------------------------*/
     /* Format and submit test jcl for remote print*/
   /* ------------------------------------------------------------*/

  if (PC09W04.PC09WBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* set the condition code over-rides*/
    /* ------------------------------------------------------------*/

    PC09630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC09W01.PC09WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC09W01.PC09WIX2 = 0; /* Initialize index*/
    PC09W01.PC09WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC09W01.PC09WIXT > 0) /* Until end of table*/

      if (PC09T11.TARTYPE[PC09WIXT] == "E") /* Execute statement*/

        /* ------------------------------------------------------------*/
         /* Format Execute statement*/
        /* ------------------------------------------------------------*/

        PC09W02.PC09WTYP = "E"; /* Type*/

        if (PC09W01.PC09WIXT < PC09W01.PC09WMXB) /* primary rpts exec stmnt*/
          PC09W02.PC09WEX1 = "//S0010   EXEC"; /* execute statemen*/
          PC09W02.PC09WPNM = "PC1001,"; /* Proc name*/
        end

        TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCE; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PC09T11.TARTYPE[PC09WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

          PC09W02.PC09WTYP = "P"; /* Type*/

          PC09W01.PC09WIX3 = 1;

          while (PC09W01.PC09WIX3 <= PC09W01.PC09WMXD) /* LE max for table*/
            if (PC09W04.PC09WBTB[PC09WIX3] > "0")
              TA6REC.TA6ROW[TA6INDEX] = PC09W04.PC09WBTB[PC09WIX3];
              TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
            else
              PC09W01.PC09WIX3 = PC09W01.PC09WMXD; /* Set index to 10*/
            end
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1;
                                  /* ; Increment both tbl indx*/
          end

        else
          if (PC09T11.TARTYPE[PC09WIXT] == "X") /* condition statment*/

            /* -----------------------------------------*/
             /* Format condition statements*/
            /* -----------------------------------------*/

            PC09W02.PC09WTYP = "X"; /* type*/
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1; /* increment index*/
            PC09W02.PC09WJCC[PC09WIX3] = " "; /* clear working strg*/
            PC09W02.PC09WJCC[PC09WIX3] = PC09T11.TARJCL[PC09WIXT];
            PC09W02.PC09WCLG[PC09WIX3] = PC09W02.PC09WCND[PC09WIX3];
            TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCC[PC09WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

          else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            if (PC09T11.TARJCL[PC09WIXT] == "            /*EOF" /* End of table*/
             && PC09W01.PC09WIXT == PC09W01.PC09WMXB)   

              PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* incrmnt indx*/

            else
               /* move ta0431 and other cards to table*/
              PC09623();
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC09T11.TARJCL[PC09WIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PC09W01.PC09WIXT == PC09W01.PC09WMXB)
           /* next sentence*/
        else
          PC09W01.PC09WIXT = 0; /* Indicate end of table*/
        end

      else

        PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC09S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC09W04 empty; /* Clear parameter table*/
      return;

    else

      set PC09W04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC09621

// Set which report to print
Function PC09622()
  if (PC09T01.TARTYPE[PC09WIXT] == "Y" /* should obs dest be printed*/
   && PC09M010.PC09MOBD == "Y")       
     /* do not move this card so the obd dest rpt will print*/
  else
    if (PC09T01.TARTYPE[PC09WIXT] == "Z" /* should obs summ be printed*/
     && PC09M010.PC09MOBS == "Y")       
       /* do not move this card so the obs summ rpt will print*/
    else /* move the card*/
      TA6REC.TARJCL[TA6INDEX] = PC09T01.TARJCL[PC09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC09T01.TARTYPE[PC09WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
  end
end // end PC09622

// Set which report to print
Function PC09623()
  if (PC09T11.TARTYPE[PC09WIXT] == "Y" /* should obs dest be printed*/
   && PC09M010.PC09MOBD == "Y")       
     /* do not move this card so the obd dest rpt will print*/
  else
    if (PC09T11.TARTYPE[PC09WIXT] == "Z" /* should obs summ be printed*/
     && PC09M010.PC09MOBS == "Y")       
       /* do not move this card so the obs summ rpt will print*/
    else /* move the card*/
      TA6REC.TARJCL[TA6INDEX] = PC09T11.TARJCL[PC09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC09T11.TARTYPE[PC09WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
  end
end // end PC09623

// DETERMINE OVERRIDES
Function PC09630()

   /* ------------------------------------------------------------*/
     /* Determine the overrides*/
   /* ------------------------------------------------------------*/

  PC09W01.PC09WLTC = "LE)',"; /* Less than cond. over.*/


  if (PC09M010.PC09MOBD == "Y" /* Order by size flag is y*/
   && PC09M010.PC09MOBS == "Y") /* Order by size summ. flag is y*/
    PC09W02.PC09WCND[1] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[2] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[3] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[4] = "NE,S0010.P0010)' "; /* execute step*/
    return;
  end

  if (PC09M010.PC09MOBD == "Y" /* Order by size flag is y*/
   && PC09M010.PC09MOBS == "N") /* Order by size summ. flag is n*/
    PC09W02.PC09WCND[1] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[2] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[3] = "LE)',"; /* Do not execute*/
    PC09W02.PC09WCND[4] = "LE)' "; /* Do not execute*/
    return;
  end

  if (PC09M010.PC09MOBD == "N" /* Order by size flag is n*/
   && PC09M010.PC09MOBS == "Y") /* Order by size summ. flag is y*/
    PC09W02.PC09WCND[1] = "LE)',"; /* Do not execute step*/
    PC09W02.PC09WCND[2] = "LE)',"; /* Do not execute step*/
    PC09W02.PC09WCND[3] = "NE,S0010.P0010)',"; /* execute step*/
    PC09W02.PC09WCND[4] = "NE,S0010.P0010)' "; /* execute step*/
    return;
  end


end // end PC09630

// SUBMIT PROD JOBS TO LASER
Function PC09640()

   /* ------------------------------------------------------------*/
     /* Format and submit prod jcl for lazer print*/
   /* ------------------------------------------------------------*/

  if (PC09W04.PC09WBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* set the condition code over-rides*/
    /* ------------------------------------------------------------*/

    PC09630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC09W01.PC09WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC09W01.PC09WIX2 = 0; /* Initialize index*/
    PC09W01.PC09WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC09W01.PC09WIXT > 0) /* Until end of table*/

      if (PC09T02.TARTYPE[PC09WIXT] == "E") /* Execute statement*/

        /* ------------------------------------------------------------*/
         /* Format Execute statement*/
        /* ------------------------------------------------------------*/

        PC09W02.PC09WTYP = "E"; /* Type*/

        if (PC09W01.PC09WIXT < PC09W01.PC09WMXB) /* primary rpts exec stmnt*/
          PC09W02.PC09WEX1 = "//S0010   EXEC"; /* execute statemen*/
          PC09W02.PC09WPNM = "PC1001,"; /* Proc name*/
        end

        TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCE; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PC09T02.TARTYPE[PC09WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

          PC09W02.PC09WTYP = "P"; /* Type*/

          PC09W01.PC09WIX3 = 1;

          while (PC09W01.PC09WIX3 <= PC09W01.PC09WMXD) /* LE max for table*/
            if (PC09W04.PC09WBTB[PC09WIX3] > "0")
              TA6REC.TA6ROW[TA6INDEX] = PC09W04.PC09WBTB[PC09WIX3];
              TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* increment parms index*/
            else
              PC09W01.PC09WIX3 = PC09W01.PC09WMXD; /* Set index to 10*/
            end
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1;
                                  /* ; Increment both tbl indx*/
          end

        else
          if (PC09T02.TARTYPE[PC09WIXT] == "X") /* condition statment*/


            /* ------------------------------------------------------------*/
             /* Format condition statements*/

            /* ------------------------------------------------------------*/

            PC09W02.PC09WTYP = "X"; /* type*/
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1; /* increment index*/
            PC09W02.PC09WJCC[PC09WIX3] = " "; /* clear working strg*/
            PC09W02.PC09WJCC[PC09WIX3] = PC09T02.TARJCL[PC09WIXT];
            PC09W02.PC09WCLG[PC09WIX3] = PC09W02.PC09WCND[PC09WIX3];
            TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCC[PC09WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

          else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            if (PC09T02.TARJCL[PC09WIXT] == "            /*EOF" /* End of table*/
             && PC09W01.PC09WIXT == PC09W01.PC09WMXB)   

              PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1;
              /* increment index*/
            else
               /* move ta0431 and other cards to table*/
              PC09642();
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC09T02.TARJCL[PC09WIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PC09W01.PC09WIXT == PC09W01.PC09WMXB)
           /* next sentence*/
        else
          PC09W01.PC09WIXT = 0; /* Indicate end of table*/
        end

      else

        PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC09S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC09W04 empty; /* Clear parameter table*/
      return;

    else

      set PC09W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC09640

// SUBMIT TEST JOBS TO LASER
Function PC09641()

   /* ------------------------------------------------------------*/
     /* format and submit test system jcl for lazer print*/
   /* ------------------------------------------------------------*/

  if (PC09W04.PC09WBTB[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Set the condition code over-rides*/
    /* ------------------------------------------------------------*/

    PC09630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC09W01.PC09WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC09W01.PC09WIX2 = 0; /* Initialize index*/
    PC09W01.PC09WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC09W01.PC09WIXT > 0) /* Until end of table*/

      if (PC09T22.TARTYPE[PC09WIXT] == "E") /* Execute statement*/

        /* ------------------------------------------------------------*/
         /* Format Execute statement*/
        /* ------------------------------------------------------------*/

        PC09W02.PC09WTYP = "E"; /* Type*/

        if (PC09W01.PC09WIXT < PC09W01.PC09WMXB) /* primary rpts exec stmnt*/
          PC09W02.PC09WEX1 = "//S0010   EXEC"; /* execute statemen*/
          PC09W02.PC09WPNM = "PC1001,"; /* Proc name*/
        end

        TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCE; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      else

        if (PC09T22.TARTYPE[PC09WIXT] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

          PC09W02.PC09WTYP = "P"; /* Type*/

          PC09W01.PC09WIX3 = 1;

          while (PC09W01.PC09WIX3 <= PC09W01.PC09WMXD) /* LE max for table*/
            if (PC09W04.PC09WBTB[PC09WIX3] > "0")
              TA6REC.TA6ROW[TA6INDEX] = PC09W04.PC09WBTB[PC09WIX3];
              TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP; /* Type*/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incrment index*/
            else
              PC09W01.PC09WIX3 = PC09W01.PC09WMXD; /* Set index to 10*/
            end
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1;
                                  /* ; Increment both tbl indx*/
          end

        else

          if (PC09T22.TARTYPE[PC09WIXT] == "X") /* condition statment*/

            /* -----------------------------------------*/
             /* Format condition statements*/
            /* -----------------------------------------*/

            PC09W02.PC09WTYP = "X"; /* type*/
            PC09W01.PC09WIX3 = PC09W01.PC09WIX3 + 1; /* increment index*/
            PC09W02.PC09WJCC[PC09WIX3] = " "; /* clear working strg*/
            PC09W02.PC09WJCC[PC09WIX3] = PC09T22.TARJCL[PC09WIXT];
            PC09W02.PC09WCLG[PC09WIX3] = PC09W02.PC09WCND[PC09WIX3];
            TA6REC.TARJCL[TA6INDEX] = PC09W02.PC09WJCC[PC09WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC09W02.PC09WTYP;
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

          else


            /* ------------------------------------------------------------*/
             /* Format the Job Control Language statement from the table.*/

            /* ------------------------------------------------------------*/

            if (PC09T22.TARJCL[PC09WIXT] == "            /*EOF" /* End of table*/
             && PC09W01.PC09WIXT == PC09W01.PC09WMXB)   

              PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* incrmnt indx*/

            else
               /* move ta0431 and other cards to table*/
              PC09643();
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC09T22.TARJCL[PC09WIXT] == "/*EOF") /* End of table*/
        /* max jcl lines primary rpts*/
        if (PC09W01.PC09WIXT == PC09W01.PC09WMXB)
           /* next sentence*/
        else
          PC09W01.PC09WIXT = 0; /* Indicate end of table*/
        end

      else

        PC09W01.PC09WIXT = PC09W01.PC09WIXT + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC09S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC09W04 empty; /* Clear parameter table*/
      return;

    else

      set PC09W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC09641

// Set which report to print
Function PC09642()
  if (PC09T02.TARTYPE[PC09WIXT] == "Y" /* should obs dest be printed*/
   && PC09M010.PC09MOBD == "Y")       
     /* do not move this card so the obd dest rpt will print*/
  else
    if (PC09T02.TARTYPE[PC09WIXT] == "Z" /* should obs summ be printed*/
     && PC09M010.PC09MOBS == "Y")       
       /* do not move this card so the obs summ rpt will print*/
    else /* move the card*/
      TA6REC.TARJCL[TA6INDEX] = PC09T02.TARJCL[PC09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC09T02.TARTYPE[PC09WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
  end
end // end PC09642

// Set which report to print
Function PC09643()
  if (PC09T22.TARTYPE[PC09WIXT] == "Y" /* should obs dest be printed*/
   && PC09M010.PC09MOBD == "Y")       
     /* do not move this card so the obd dest rpt will print*/
  else
    if (PC09T22.TARTYPE[PC09WIXT] == "Z" /* should obs summ be printed*/
     && PC09M010.PC09MOBS == "Y")       
       /* do not move this card so the obs summ rpt will print*/
    else /* move the card*/
      TA6REC.TARJCL[TA6INDEX] = PC09T22.TARJCL[PC09WIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC09T22.TARTYPE[PC09WIXT];
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end
  end
end // end PC09643

// Call factory row
Function PC09S01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC09"; /* Process name*/
  TA1REC.TA1LOC = "PC09S01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC09M010.XXXPRCNM = "PC09S01"; /* Process name*/

  exit stack;


end // end PC09S01

// SET UP DATE
Function PC09S02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in type*/
  TA2REC.TA2GRGEN = PC09W01.PC09WDAT;

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC09W01.PC09WPDT = TA2REC.TA2GRGGN; /* P.O. id date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC09S02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC09M010.XXXPRCNM = "PC09S02"; /* Process name*/

    end
  end


end // end PC09S02

// SUBMIT JCL
Function PC09S03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  if (PC09M010.PC09MPRT == "Y")
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
    TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/
  else
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
    TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/
  end

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* and reset the map.*/
   /* ------------------------------------------------------------*/

  set PC09W04 empty;
  set PC09M010 initial; /* Clear the map*/

  PC09M010.PC09MOBD = "N"; /* Reset the defaults*/
  PC09M010.PC09MOBS = "N";
  PC09M010.PC09MPRT = "N";
  PC09M010.FY1FCTYC = "ALL";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Job submitted to reader*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PC09W04 empty;
    PC09M010.XXXPRCNM = "PC09S03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    PC09M010.XXXPRCNM = "PC09S03"; /* Process name*/
    exit stack;

  end


end // end PC09S03

//*** RECORD=PC09W01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC09
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// *  9/12/89   GWITZI        NEW RECORD
// *
// ************************************************************
// ***********************
Record PC09W01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTNM FY1FCTNM ; 
  10 XGPCD XGPCD ; 
  10 XCTCD XCTCD ; 
  10 XCTDESC XCTDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PC09WPDT PC09WPDT ; 
  10 PC09WDAT PC09WDAT ; 
    15 PC09WMYY PC09WMYY ; 
    15 PC09WMM1 PC09WMM1 ; 
    15 PC09WMM2 PC09WMM2 ; 
  10 PC09WCY1 PC09WCY1 ; 
  10 PC09WCY2 PC09WCY2 ; 
  10 PC09WCDT PC09WCDT ; 
    15 PC09WCY PC09WCY ; 
      20 PC09WCCC PC09WCCC ; 
      20 PC09WYYY PC09WYYY ; 
    15 PC09WMMM PC09WMMM ; 
    15 PC09WDDD PC09WDDD ; 
  10 PC09MOBD PC09MOBD ; 
  10 PC09MOBS PC09MOBS ; 
  10 PC09WIXT PC09WIXT ; 
  10 PC09WIX2 PC09WIX2 ; 
  10 PC09WIX3 PC09WIX3 ; 
  10 PC09WDRI PC09WDRI ; 
  10 PC09WSRI PC09WSRI ; 
  10 PC09WBRI PC09WBRI ; 
  10 PC09WMXD PC09WMXD ; 
  10 PC09WMXS PC09WMXS ; 
  10 PC09WMXB PC09WMXB ; 
  10 PC09WEX1 PC09WEX1 ; 
  10 PC09WSRF PC09WSRF ; 
  10 PC09WJCE PC09WJCE ; 
  10 PC09WJCP PC09WJCP ; 
  10 PC09WJCC PC09WJCC ; 
  10 PC09WCND PC09WCND ; 
  10 PC09WTYP PC09WTYP ; 
  10 PC09WCLG PC09WCLG ; 
  10 PC09WMPR PC09WMPR ; 
  10 PC09WPNM PC09WPNM ; 
  10 PC09WLTC PC09WLTC ; 
  10 PC09CCYY PC09CCYY ; 
end // end PC09W01

//*** RECORD=PC09W02 ****
// ************************************************************
// *
// *    JCL RECORD AREA  (WORKING STORAGE
// *
// ************************************************************
// ***********************
Record PC09W02 type basicRecord
  10 PC09WJCP PC09WJCP ; 
  10 PC09WJCE PC09WJCE ; 
    15 PC09WEX1 PC09WEX1 ; 
    15 PC09WPNM PC09WPNM ; 
    15 * char(58) ; 
  10 PC09WJCC PC09WJCC [16] ; 
    15 * char(23) ; 
    15 PC09WCLG PC09WCLG ; 
    15 * char(40) ; 
  10 PC09WTYP PC09WTYP ; 
  10 PC09WCND PC09WCND [16] ; 
    15 * char(4) ; 
    15 PC09WCMM PC09WCMM ; 
    15 * char(12) ; 
end // end PC09W02

//*** RECORD=PC09W03 ****
// ************************************************************
// *
// *   Screen table working storage
// *
// ************************************************************
// ***********************
Record PC09W03 type basicRecord
  10 PC09WDTB PC09WDTB ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PC09WIDT PC09WIDT ; 
    15 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC09WAFL PC09WAFL ; 
    15 * char(1) ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(38) ; 
end // end PC09W03

//*** RECORD=PC09W04 ****
// ************************************************************
// *
// *  Report working storage for the array to pass to ta6rec
// *
// ************************************************************
// ***********************
Record PC09W04 type basicRecord
  10 PC09WBTB PC09WBTB [10] ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PC09WIDT PC09WIDT ; 
    15 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC09WAFL PC09WAFL ; 
    15 * char(1) ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(38) ; 
end // end PC09W04

//          day
DataItem PC09CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC09MOBD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC09MOBS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Application flag
DataItem PC09WAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. index
DataItem PC09WBRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both report tbl recd
DataItem PC09WBTB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          centry
DataItem PC09WCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC09WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement logic
DataItem PC09WCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PC09WCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem PC09WCND char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC09WCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date +1
DataItem PC09WCY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PC09WCY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC09WDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PC09WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. index
DataItem PC09WDRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. report tablerec.
DataItem PC09WDTB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem PC09WEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID mo rng
DataItem PC09WIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PC09WIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PC09WIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem PC09WIXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem PC09WJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem PC09WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem PC09WJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Less than condidition override
DataItem PC09WLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month
DataItem PC09WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month
DataItem PC09WMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          month
DataItem PC09WMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max jcl lines for primary rpts
DataItem PC09WMPR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Both rpt. max.
DataItem PC09WMXB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dest. rpt. max.
DataItem PC09WMXD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summ. rpt. max.
DataItem PC09WMXS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id year
DataItem PC09WMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id date
DataItem PC09WPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proc name
DataItem PC09WPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// secondary rpts needed flag
DataItem PC09WSRF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summ. rpt. index
DataItem PC09WSRI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL statement type
DataItem PC09WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC09WYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

