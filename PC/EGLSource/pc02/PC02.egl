package pc02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC02 ****
// ************************************************************
// *  THIS PROGRAM IS USED TO CREATE THE LETTER OF CREDIT
// *  AMMENDMENT SUMMARY REPORT DURING THE DAY FOR THE POID
// *  SPECIFIED.
// *
// *  THE GPC CODE WILL DEFAULT ON THE TOP OF THIS SCREEN BASED
// *  UPON THE GPC ENTERED ON THE PC0A MENU. ONLY FOOTWEAR AND
// *  APPAREL ARE TO BE ALLOWED AND THE USER WILL HAVE TO BE
// *  ABLE TO ADD/CHANGE FOR THAT GPC CODE.
// *
// *  THE LETTER OF CREDIT AMENDMENT SUMMARY REPORT IS A
// *  SUMMARY OF ALL FOB PRICE CHANGES AND QUANTITY CHANGES TO
// *  A PO ID OVER A SPECIFIED PERIOD OF TIME.  TO SPECIFY THE
// *  TIME WANTED FOR THE SUMMARY REPORT, ENTER A BEGINNING
// *  AND ENDING DATE (AUDIT CREATE DATES).
// *
// *  NOTE: THE END DATE WILL DEFAULT TO THE CURRENT DATE.
// *
// *  THE USER MUST SELECT AT LEAST ONE REPORT.
// *
// *  THE LETTER OF CREDIT AMENDMENT SUMMARY WILL BRINT FOR
// *  SPECFIC POID DESTINATIONS (EITHER USA OR INTERNATIONAL
// *  (export) DESTINATIONS).  TO SPECIFY WHICH TYPE FO DEST-
// *  INATION THEY WISH A "Y" MUST BE ENTERED IN EITHER/OR
// *  BOTH OF THE PRINT REQUEST FIELDS.
// *
// *  IN ORDER TO SUBMIT THE REPORT THE USER WILL HIT PF9 AND
// *  TRANSFER TO TA0P TO SEND THE JCL TO THE INTERNAL READER.
// *
// *  AFTER THE JCL IS SUBMITTED CONTROL RETURNS TO THIS
// *  PROGRAM AND ALL THE ENTERABLE FIELDS WILL BE OPENED.
// *
// ************************************************************
// *   DATE           USERID          COMMENTS
// * ________        ________        ___________________
// * 10/10/89        GWITZI          New Application
// * 12/05/89        JWOOD           REMOVED TARREC FROM LIST
// * 12/05/89        JWOOD           REPLACED TA0PM001 (NEW)
// * 07/17/90        JWOOD           REMOVED UT2REC FROM LIST
// * 04/16/91        kdenne          added logic to submit the
// *                                 l/c adjustment report.
// * 10/09/91        lsutto          change implicits allowed
// *                                 to = no in appl
// * 08/30/92        lsutto          chng pf3 key to go to lc0a
// *                                 in pc02300
// * 12/29/93        gamen           add theater of ops code
// *  2/08/94        DHALES          CHANGED HDR IOMOD FUNCT
// *                                 TO 'SE' TO EXCLUDE PO NBRS
// *                                 LESS THAN 299999
// * 07/08/97        jniese          pca367 - ppr corrections
// * 11/13/97        TTHAN1          Y2KFIX - ADD NEW ITEM
// *                                 PC02CCYY, CHANGE SIZE OF
// *                                 PC02WCY1 AND PC02WCY2
// *                                 FROM 2 TO 4, ADD NEW
// *                                 GROUP PC01WCY.  CHANGE
// *                                 PC02511.
// * 03/24/98        vramac          PCF162 - Modified JCLs to
// *                                 run programs PC363D for
// *                                 GPC CD = 2 and PC293D for
// *                                 GPC CD = 3. These 2 pgms
// *                                 are basically splitted
// *                                 from PC330D based on GPC.
// * 05/09/98 PCF137 DRAMSE          Added JCL table PC02T04
// *                                 and PC02T14 for Equipment
// *                                 jobs PC7631 and PC7631T
// * 05/13/98 PCF137 DRAMSE          Changed logic to trigger
// *                                 PC7631/PC7631T for
// *                                 Equipment factories
// * 07/21/98 PCF137 DRAMSE          Changed to use VFCTY003
// * 08/12/98 PCF171 DRAMSE          Changed PC02513, PC02511.
// *                                 LCs are also issued for
// *                                 some USA factories
// * 02/03/99 PCF194 DRAMMO          Changed to print LC rpts
// *                                 for Japan POs.
// * 07/05/99 PCF198 DRAMMO          Modified to exclude FTWR
// *                                 POs of 'LP' type.
// * 10/19/00      gkamal            added steps to copy
// *                                 sap file into a gdg if
// *                                 the file is not  empty
// * 10/24/00      gkamal            added logic to have 00
// *                                 and 02 as normal eoj codes
// * 03/18/02      RSELVA            MODIFIED TO USE VPOVFY02.
// ************************************************************
// *********************
Program PC02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC02W01 PC02W01; // record
  PC02W02 PC02W02; // record
  PC02W03 PC02W03; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  VFCTY003 VFCTY003; // record
  VPOHDR02 VPOHDR02; // record
  VPOVFY02 VPOVFY02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PC02T01 {deleteAfterUse = yes}; // table
  use PC02T11 {deleteAfterUse = yes}; // table
  use PC02T02 {deleteAfterUse = yes}; // table
  use PC02T12 {deleteAfterUse = yes}; // table
  use PC02T03 {deleteAfterUse = yes}; // table
  use PC02T13 {deleteAfterUse = yes}; // table
  use PC02T04 {deleteAfterUse = yes}; // table
  use PC02T44 {deleteAfterUse = yes}; // table
  use PC02T05 {deleteAfterUse = yes}; // table
  use PC02T55 {deleteAfterUse = yes}; // table
  use PC02T06 {deleteAfterUse = yes}; // table
  use PC02T66 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use PC02M.PC02M010,  // forms
      PC02M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
       /* INITIALIZE RECORDS AND THE MAP*/
     /* ------------------------------------------------------------*/

    set PC02W01 empty; /* Clear working storage*/
    set PC02W02 empty; /* Clear jcl passing record*/
    set VPOVFY02 empty; /* Clear p.o. verification record*/
    set PCYREC empty; /* Clear p.o. function passing record*/
    set PC2REC empty; /* Clear cust. xfer record*/
    set VPOHDR02 empty; /* Clear p.o. header record*/
    set PC4REC empty; /* Clear p.o. type record*/

    set VFCTY003 empty; /* Clear factory record*/

    set ERRSQLCA empty; /* Clear error sqlca record*/
    set SQLCA empty;

    set TA1REC empty;
    set TA2REC empty; /* Clear date record*/
    set XCTHREC empty; /* Clear user record*/
    set TA6REC empty; /* Clear jcl record*/
    set TAEREC empty; /* Clear user record*/

    set PC02W03 empty; /* Clear Array no. one*/
    set PC02M010 initial; /* Clear map*/
    set XX0XW01 empty;

     /* ----------------------------------------------------------*/
       /* INITIALIZE VALUES ON INDEXIES ETC.*/
     /* ----------------------------------------------------------*/

    PC02M010.XGPCD = PCWREC.XGPCD; /* Gpc code field*/
    PC02W01.XGPCD = PCWREC.XGPCD; /* Gpc code field*/
    PC02W01.PO-REG-CD = "01"; /* po region*/
    PCWREC.PO-REG-CD = "01"; /* po region*/

    if (PCWREC.XGPCD == "02") /* Footware*/
      PC02M010.PC4ORTYP = "FT"; /* Default type*/
      PC02M010.XGPDESC = "FOOTWEAR"; /* Gpc description*/
      PC02M010.PC02MPSO = "N"; /* print amendment flag*/
      PC02M010.PC02MPDO = "N"; /* print adjustment flag*/
      PC02M010.PC02MJFL = "N"; /* Print Japan only flag*/
    end
    if (PCWREC.XGPCD == "03") /* Apparel*/
      PC02M010.XGPDESC = "APPAREL"; /* Gpc description*/
    end

    PC02M010.PC02MPUO = "N"; /* Print USA only flag*/
    PC02M010.PC02MPEO = "N"; /* Print Export only flag*/

    PC02W01.PC02WLIX = 0;
    PC02W01.PC02WAIX = 0;
    PC02W01.PC02WMAX = 50;

    PC02000: PC02000();
     /* NO FLOW*/
    PC02050: PC02050();
    goto PC02050; /* program flow*/
  end // end main
end // end PC02

// CURRENT DATE
Function PC02000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/

      PC02W01.PC02WCDT = TA2REC.TA2GRGGN; /* Current date*/
      PC02W01.PC02WDDT = TA2REC.TA2GRGB; /* Default date mm/dd/yy*/
      PC02M010.PC02MEPM = TA2REC.TA2GRBMM; /* Default date mm*/
      PC02M010.PC02MEDM = TA2REC.TA2GRBDD; /* Default date dd*/
      PC02M010.PC02MEYR = TA2REC.TA2GRBYY; /* Default date yy*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT CURRENT DATE ROUTINE";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC02M010.XXXERRID = "PC02000"; /* Process name*/

    end
  end

end // end PC02000

// MAIN PROCESS TO DISPAY MAP
Function PC02050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02") /* Footware*/
    if (COMMAREA.CACLVL[2] == "Y") /* User can enter*/

      PC02080(); /* Report generation pcocess*/

    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  else
    if (PCWREC.XGPCD == "03") /* Apparel*/
      if (COMMAREA.CACLVL[3] == "Y") /* User can enter*/

        PC02080(); /* Report generation pcocess*/

      else
        PCWREC.XXXMSGNO = 138; /* Request invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* To application*/
        XSPCS01(); /* Exit to another application*/
        PCWREC.XXXMSGNO = 138; /* Request invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "MN0M"; /* To application*/
        XSPCS01(); /* Exit to another application*/
      end
    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  end

   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

end // end PC02050

// PROGRAM PROCESS CONTROL
Function PC02080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.  N/A*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC02200(); /* Format and display the map*/

  PC02300(); /* Check attention identifier*/

  PC02400(); /* Reset fields to normal intensity*/

  PC02500(); /* Verify the entered data*/

  PC02600(); /* Process the entered data*/

end // end PC02080

// FORMAT AND DISPLAY MAP
Function PC02200()

   /* ------------------------------------------------------------*/
     /* DISPLAY THE MAP*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No Message*/
   || converseVar.validationMsgNum == 238) /* Parameter has been entered*/

    set PC02M010.PC02MMYY cursor; /* P.O. ID year*/

  else

    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC02M010.XXXERRID = "PC02200"; /* Process name*/
      PC02M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PC02M010 alarm; /* Sound alarm*/

  end

   /* MOVE 'N' TO PC02M010.PC02MJFL;*/
  PC02M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PCWREC.XGPCD == "03") /* apparel only*/
    set PC02M010.PC02MADL skip, invisible; /* darken adj. literal*/
    set PC02M010.PC02MPDO skip, invisible; /* darken adj. rpt flag*/
    set PC02M010.PC02MASL skip, invisible; /* darken amend. literal*/
    set PC02M010.PC02MPSO skip, invisible; /* darken amend. rpt. flag*/
    set PC02M010.PC02MJLT skip, invisible; /* darken jap po literal*/
    set PC02M010.PC02MJFL skip, invisible; /* darken jap po rpt. flag*/
  end

  converse PC02M010 ;

end // end PC02200

// CHECK ATTENTION IDENTIFIERS
Function PC02300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC02M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC02M010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC02M010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC02M010.XXXERRID = "PC02300"; /* Process name*/
    end

    set PC02M010.CATOAP cursor, bold; /* Highlight*/
    PC02M010.XXXERRID = "PC02300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1) /* Help screen*/
    COMMAREA.CAITEM = "PC02M010";
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3) /* Return to previous screen*/
    COMMAREA.CATOAP = "LC0A";
    XSPCS01();

    PC02M010.XXXERRID = "PC02300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC02M010.XXXERRID = "PC02300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC02M010.XXXERRID = "PC02300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PC02M010.XXXERRID = "PC0230A"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end

end // end PC02300

// RESET HIGHLIGHTED FIELDS
Function PC02400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC02M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC02M010.CAITEM initialAttributes; /* Commarea application data*/

  set PC02M010.XGPCD initialAttributes; /* Gpc code*/
  set PC02M010.FY1FCTYC initialAttributes; /* Factory code*/
  set PC02M010.PC4ORTYP initialAttributes; /* P.O. type*/
  set PC02M010.PC02MMYY initialAttributes; /* P.O. id production year*/
  set PC02M010.PC02MDMO initialAttributes; /* P.O. id del month*/
  set PC02M010.PC02MBMO initialAttributes; /* P.O. id buy month*/

  set PC02M010.PC02MBYR initialAttributes; /* Beg. year*/
  set PC02M010.PC02MBPM initialAttributes; /* Beg. month*/
  set PC02M010.PC02MBDM initialAttributes; /* Beg. day*/
  set PC02M010.PC02MEYR initialAttributes; /* End. year*/
  set PC02M010.PC02MEPM initialAttributes; /* End. month*/
  set PC02M010.PC02MEDM initialAttributes; /* End. day*/

  set PC02M010.PC02MPUO initialAttributes; /* Print USA only flag*/
  set PC02M010.PC02MPEO initialAttributes; /* Print export only flag*/

  set PC02M010.PC02MASL initialAttributes; /* Print amendment summary literal*/
  set PC02M010.PC02MPSO initialAttributes; /* Print amendment summary flag*/
  set PC02M010.PC02MADL initialAttributes; /* Print adjustment detail literal*/
  set PC02M010.PC02MPDO initialAttributes; /* Print adjustment detail flag*/
  set PC02M010.PC02MJLT initialAttributes; /* Print japan pos only literal*/
  set PC02M010.PC02MJFL initialAttributes; /* Print japan pos only flag*/

  if (PCWREC.XGPCD == "03")
    set PC02M010.PC02MADL skip, invisible; /* darken adj. detail literal*/
    set PC02M010.PC02MPDO skip, invisible; /* darken adj. detail flag*/
    set PC02M010.PC02MASL skip, invisible; /* darken amd. summary literal*/
    set PC02M010.PC02MPSO skip, invisible; /* darken amd. summary flag*/
    set PC02M010.PC02MJLT skip, invisible; /* darken jap pos only literal*/
    set PC02M010.PC02MJFL skip, invisible; /* darken jap pos only flag*/
  end

end // end PC02400

// VERIFY THE INPUT REQUEST
Function PC02500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC02M010.CAITEM > " ") /* Application data was entered*/

    set PC02M010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC02M010.XXXERRID = "PC02500"; /* Process name*/
  else

    if (converseVar.eventKey is enter) /* Enter key is pressed*/

      PC02510(); /* Process date edits*/
      PC02511(); /* Process detail edits*/
      PC02513(); /* Process more detail edits*/
      PC02520(); /* Process parm*/

    end
  end

end // end PC02500

// DO EDITS ON DATES AND FLAGS
Function PC02510()

   /* ------------------------------------------------------------*/
    /* CHECK THE REPORT REQUEST FLAGS*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
        /* PRINT ADJUSTMENT AND AMENDMENT REPORT*/
   /* ------------------------------------------------------------*/

  PC02W01.PC02WPSO = " ";
  PC02W01.PC02WPDO = " ";
  if (PC02M010.XGPCD == "02") /* footwear only*/
    if (PC02M010.PC02MPDO == "Y" /* Print adjustment report*/
     || PC02M010.PC02MPDO == "N")

      PC02W01.PC02WPDO = PC02M010.PC02MPDO;
    else
      set PC02M010.PC02MPDO cursor, bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(42); /* Only y or n valid*/
    end

    if (PC02M010.PC02MPSO == "Y" /* Print amendment report*/
     || PC02M010.PC02MPSO == "N")

      PC02W01.PC02WPSO = PC02M010.PC02MPSO;
    else
      set PC02M010.PC02MPSO cursor, bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(42); /* Only y or n valid*/
    end

    if (PC02M010.PC02MPSO == "N" /* both flags are 'n'*/
     && PC02M010.PC02MPDO == "N")
      set PC02M010.PC02MPSO cursor, bold; /* Highlight error*/
      set PC02M010.PC02MPDO bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(257); /* at least one eq 'y'*/
    end

    if (PC02M010.PC02MPSO == "Y" /* both flags are 'y'*/
     && PC02M010.PC02MPDO == "Y")
      set PC02M010.PC02MPSO cursor, bold; /* Highlight error*/
      set PC02M010.PC02MPDO bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(417); /* only one can eq 'y'*/
    end

    /* ------------------------------------------------------------*/
        /* PRINT USA, EXPORT AND JAPAN FLAGS*/
    /* ------------------------------------------------------------*/

    if (PC02M010.PC02MJFL != "Y"
     && PC02M010.PC02MJFL != "N") /* Jap pos flg not entered*/
      set PC02M010.PC02MJFL cursor, bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(42); /* Only y or n valid*/
    end

    if (PC02M010.PC02MPSO == "N"
     && PC02M010.PC02MPDO == "Y"
     && PC02M010.PC02MJFL != "N") /* detail rept selected & jap selected*/
      set PC02M010.PC02MJFL cursor, bold; /* Highlight error*/
      set PC02M010.PC02MPSO bold; /* Highlight error*/
      PC02M010.XXXERRID = "PC02510"; /* Process name*/
      converseLib.validationFailed(564); /* can be entered for summary rept*/
    end
  end

  if (PC02M010.XGPCD == "03") /* apparel only*/
    PC02W01.PC02WPSO = "Y";
    PC02W01.PC02WPDO = "N";
  end

  if (PC02M010.PC02MPEO == "Y" /* Print export report requested*/
   || PC02M010.PC02MPEO == "N")

    PC02W01.PC02WPEO = PC02M010.PC02MPEO;
  else
    set PC02M010.PC02MPEO cursor, bold; /* Highlight error*/
    PC02M010.XXXERRID = "PC02510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC02M010.PC02MPUO == "Y" /* Print USA only report requested*/
   || PC02M010.PC02MPUO == "N")

    PC02W01.PC02WPUO = PC02M010.PC02MPUO;
  else
    set PC02M010.PC02MPUO cursor, bold; /* Highlight error*/
    PC02M010.XXXERRID = "PC02510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC02M010.PC02MPUO == "N" /* Print USA report not requested*/
   && PC02M010.PC02MPEO == "N" /* Print export report not requested*/
   && PC02M010.PC02MJFL == "N") /* Print Japan  report not requested*/

    set PC02M010.PC02MPUO cursor, bold; /* Highlight error*/
    set PC02M010.PC02MPEO bold; /* Highlight error*/
    set PC02M010.PC02MJFL bold; /* Highlight error*/
    PC02M010.XXXERRID = "PC02510"; /* Process name*/
    converseLib.validationFailed(257); /* Only y or n valid*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF ENDING DATE ENTERED - required for amendment rpt*/
   /* ------------------------------------------------------------*/

  if (PC02M010.PC02MEYR == "  " /* Nothing there*/
   && PC02M010.PC02MEPM == "  " /* Nothing there*/
   && PC02M010.PC02MEDM == "  ") /* Nothing there*/

    if (PC02W01.PC02WPDO == "Y") /* if adjustment requested - ignore*/
       /* next sentence*/
    else
      if (PC02W01.PC02WPSO == "Y") /* if amendment requested*/
        set PC02M010.PC02MEPM cursor, bold; /* Highlight error*/
        converseLib.validationFailed(38); /* Date is missing*/
        PC02M010.XXXERRID = "PC02510"; /* Process name*/
      end
    end
  end

  PC02W01.PC02WEPM = PC02M010.PC02MEPM; /* Ending month*/
  PC02W01.PC02WEDM = PC02M010.PC02MEDM; /* Ending day*/
  PC02W01.PC02WEYR = PC02M010.PC02MEYR; /* Ending year*/

   /* ------------------------------------------------------------*/
    /* SEE IF BEGINNING DATE ENTERED - required for amendment rpt*/
   /* ------------------------------------------------------------*/

  if (PC02M010.PC02MBYR == "  " /* Nothing there*/
   && PC02M010.PC02MBPM == "  " /* Nothing there*/
   && PC02M010.PC02MBDM == "  ") /* Nothing there*/

    if (PC02W01.PC02WPDO == "Y") /* if adjustment requested init*/
      PC02W01.PC02WBDT = 0; /* begin date w/zeroes*/
    else
      if (PC02W01.PC02WPSO == "Y") /* if amendment requested*/
        set PC02M010.PC02MBPM cursor, bold; /* Highlight error*/
        converseLib.validationFailed(38); /* Date is missing*/
        PC02M010.XXXERRID = "PC02510"; /* Process name*/
      end
    end
  end

  PC02W01.PC02WBPM = PC02M010.PC02MBPM; /* Beg. month*/
  PC02W01.PC02WBDM = PC02M010.PC02MBDM; /* Beg. day*/
  PC02W01.PC02WBYR = PC02M010.PC02MBYR; /* Beg. year*/

  if (PC02W01.PC02WTDT > " " /* ending date entered*/
   && PC02W01.PC02WFDT > " ") /* beginning date entered*/
    if (PC02W01.PC02WPSO == "Y" /* if amendment requested*/
     || PC02W01.PC02WPDO == "Y") /* or adjustment requested*/

      PC02514(); /* edit beginning and ending dates*/

    end
  end

end // end PC02510

// DO THE DETAIL EDITS
Function PC02511()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* P.O. TYPE*/
   /* ----------------------------------------------------------*/

  if (PC02M010.PC4ORTYP > " ") /* Something there*/

    if (PC02M010.XGPCD != "02"
     || PC02M010.PC4ORTYP != "LP") /* Not of Local Production type*/

      set PC4REC empty; /* Clear record*/
      PC4REC.PC4ORTYP = PC02M010.PC4ORTYP;
      PC4REC.XGPCD = PC02M010.XGPCD;

      PC02S04(); /* Call Production Order Type Table*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (PC4REC.XXXSTAT == "A") /* Active status*/

          PC02W01.PC4ORTYP = PC4REC.PC4ORTYP;
        else
          set PC02M010.PC4ORTYP cursor, bold; /* Highlight error*/
          converseLib.validationFailed(33); /* P.O. type invalid*/
          PC02M010.XXXERRID = "PC02511"; /* Process name*/
        end
      else
        set PC02M010.PC4ORTYP cursor, bold; /* Highlight error*/
        converseLib.validationFailed(33); /* P.O. type invalid*/
        PC02M010.XXXERRID = "PC02511"; /* Process name*/
      end
    else /* Local Production type*/
      set PC02M010.PC4ORTYP cursor, bold; /* Highlight error*/
      converseLib.validationFailed(33); /* P.O. type invalid*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
    end
  else
    set PC02M010.PC4ORTYP cursor, bold; /* Highlight error*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC02M010.XXXERRID = "PC02511"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
     /* AND CHECK GPC CODE*/
   /* ------------------------------------------------------------*/

  if (PC02M010.XGPCD == "03") /* Apparel*/

    PC02512(); /* Apparel po id edit*/

  else
    if (PC02M010.PC02MMYY == "  " /* Nothing there*/
     && PC02M010.PC02MBMO == "  " /* Nothing there*/
     && PC02M010.PC02MDMO == "  ") /* Nothing there*/

      set PC02M010.PC02MMYY cursor, bold; /* Highlight error*/
      converseLib.validationFailed(177); /* Date is missing*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* SEE IF FACTORY CODE ENTERED*/
    /* ------------------------------------------------------------*/

    if (PC02M010.FY1FCTYC == " ") /* Factory not entered*/

      set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC02M010.FY1FCTSN = " "; /* Factory name*/
      PC02W01.FY1FCTSN = " "; /* Factory name*/
      PC02W01.FY1FCTYC = " "; /* Factory code*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Fetch the row from the factory set.*/
     /* If any error, indicate a system error.*/
     /* Format the data in the temporary storage display line.*/
    /* ------------------------------------------------------------*/

    if (PC02M010.FY1FCTYC == " ") /* Nothing there*/

      converseLib.validationFailed(32); /* Must enter*/
      set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC02W01.FY1FCTYC = " "; /* Factory code*/
      PC02W01.FY1FCTSN = " "; /* Factory name*/
      PC02M010.FY1FCTSN = " "; /* Factory name*/
    else
      set VFCTY003 empty; /* Clear record*/
      VFCTY003.FY1FCTYC = PC02M010.FY1FCTYC; /* Search key*/
      VFCTY003.XGPCD = PC02M010.XGPCD; /* Search key*/

      PC02S01(); /* Call factory check routine*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        if (VFCTY003.XXXSTAT == "A") /* Everything OK*/
          /* dramse 08/12/98*/
          /* IF VFCTY003.XCTCD NE 'USA';/* Everything OK*/
          if (VFCTY003.FY1FRGN != "N") /* Everything OK*/

            PC02M010.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory name*/
            PC02W01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory name*/
            PC02W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
          else
            converseLib.validationFailed(286); /* Can not be usa*/
            PC02M010.XXXERRID = "PC02511"; /* Process name*/
            set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
            PC02W01.FY1FCTYC = " "; /* Factory code*/
            PC02W01.FY1FCTSN = " "; /* Factory name*/
            PC02M010.FY1FCTSN = " "; /* Factory name*/
          end
        else
          converseLib.validationFailed(32); /* Invalid factory*/
          PC02M010.XXXERRID = "PC02511"; /* Process name*/
          set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
          PC02W01.FY1FCTYC = " "; /* Factory code*/
          PC02W01.FY1FCTSN = " "; /* Factory name*/
          PC02M010.FY1FCTSN = " "; /* Factory name*/
        end
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC02M010.XXXERRID = "PC02511"; /* Process name*/
        set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC02W01.FY1FCTYC = " "; /* Factory code*/
        PC02W01.FY1FCTSN = " "; /* Factory name*/
        PC02M010.FY1FCTSN = " "; /* Factory name*/
      end
    end

    PC02W01.PCFSECD = " "; /* Blank out season code*/

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC02M010.PC02MDMO == "01" /* Something there*/
     || PC02M010.PC02MDMO == "02" /* Something there*/
     || PC02M010.PC02MDMO == "03" /* Something there*/
     || PC02M010.PC02MDMO == "04" /* Something there*/
     || PC02M010.PC02MDMO == "05" /* Something there*/
     || PC02M010.PC02MDMO == "06" /* Something there*/
     || PC02M010.PC02MDMO == "07" /* Something there*/
     || PC02M010.PC02MDMO == "08" /* Something there*/
     || PC02M010.PC02MDMO == "09" /* Something there*/
     || PC02M010.PC02MDMO == "10" /* Something there*/
     || PC02M010.PC02MDMO == "11" /* Something there*/
     || PC02M010.PC02MDMO == "12") /* Something there*/

      PC02W01.PC02WDMO = PC02M010.PC02MDMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
      set PC02M010.PC02MDMO cursor, bold; /* Highlight*/
      PC02W01.PC02WDMO = 00;
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC02M010.PC02MBMO == "01" /* Something there*/
     || PC02M010.PC02MBMO == "02" /* Something there*/
     || PC02M010.PC02MBMO == "03" /* Something there*/
     || PC02M010.PC02MBMO == "04" /* Something there*/
     || PC02M010.PC02MBMO == "05" /* Something there*/
     || PC02M010.PC02MBMO == "06" /* Something there*/
     || PC02M010.PC02MBMO == "07" /* Something there*/
     || PC02M010.PC02MBMO == "08" /* Something there*/
     || PC02M010.PC02MBMO == "09" /* Something there*/
     || PC02M010.PC02MBMO == "10" /* Something there*/
     || PC02M010.PC02MBMO == "11" /* Something there*/
     || PC02M010.PC02MBMO == "12") /* Something there*/

      PC02W01.PC02WBMO = PC02M010.PC02MBMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
      set PC02M010.PC02MBMO cursor, bold; /* Highlight*/
      PC02W01.PC02WBMO = 00;
    end

    /* ------------------------------------------------------------*/
     /* SEE IF NUMMERIC DATA ENTERED BY CHECKING THE DATE*/
    /* ------------------------------------------------------------*/

    PC02W01.PC02WCYR = PC02M010.PC02MMYY; /* Year*/
    PC02W01.PC02WCPM = PC02M010.PC02MBMO; /* Buy month*/
    PC02W01.PC02WCDM = PC02M010.PC02MDMO; /* Del. month*/

    set TA2REC empty; /* Clear record*/
    TA2REC.TA2GRGE = PC02W01.PC02WCAT; /* POID char date*/
    TA2REC.TA2GRTYP = "E"; /* Date type*/

    PC02S02(); /* Set up p.o. id date*/

    if (TA2REC.TA2RTNCD == 0000) /* Good return*/

       /* NEXT SENTENCE*/

    end
    if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
      set PC02M010.PC02MDMO bold; /* Highlight*/
      set PC02M010.PC02MBMO bold;
      set PC02M010.PC02MMYY cursor, bold; /* Highlight error*/
      converseLib.validationFailed(313); /* Date is missing*/
      PC02M010.XXXERRID = "PC02511"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No errors*/

      if (PC02M010.PC02MMYY >= "00"
       && PC02M010.PC02MMYY <= "99")

        PC02W01.PC02WMYY = PC02M010.PC02MMYY;

        /* ----------Y2K OUT BEGIN----------*/
        /* PC02W01.PC02WCY1 = PC02W01.PC02WYYY + 1; /* One year greater*/
        /* PC02W01.PC02WCY2 = PC02W01.PC02WYYY - 1; /* One year less*/
        /* IF PC02W01.PC02WMYY GE PC02W01.PC02WCY2  /* One year <=*/
        /* AND PC02W01.PC02WMYY LE PC02W01.PC02WCY1; /* One year >=*/
        /* ----------Y2K OUT END------------*/
        /* ----------Y2K IN BEGIN-----------*/
        PC02W01.PC02CCYY = PC02M010.PC02MMYY;
        if (PC02M010.PC02MMYY > 60)
          PC02W01.PC02CCYY = PC02W01.PC02CCYY + 1900;
        else
          PC02W01.PC02CCYY = PC02W01.PC02CCYY + 2000;
        end
        PC02W01.PC02WCY1 = PC02W01.PC02WCY + 1; /* One year greater*/
        PC02W01.PC02WCY2 = PC02W01.PC02WCY - 1; /* One year less*/
        if (PC02W01.PC02CCYY >= PC02W01.PC02WCY2 /* One year <=*/
         && PC02W01.PC02CCYY <= PC02W01.PC02WCY1) /* One year >=*/
          /* ----------Y2K IN END-------------*/

           /* NEXT SENTENCE*/

        else
          converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
          PC02M010.XXXERRID = "PC02511"; /* Process name*/
          set PC02M010.PC02MMYY cursor, bold; /* Highlight*/
          PC02W01.PC02WMYY = 00;
          /* ----------Y2K IN BEGIN-----------*/
          PC02W01.PC02CCYY = 0;
          /* ----------Y2K IN end-------------*/
        end
      else
        converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
        PC02M010.XXXERRID = "PC02511"; /* Process name*/
        set PC02M010.PC02MMYY cursor, bold; /* Highlight*/
        PC02W01.PC02WMYY = 00;
        /* ----------Y2K IN BEGIN-----------*/
        PC02W01.PC02CCYY = 0;
        /* ----------Y2K IN end-------------*/
      end

      /* -----------------------------------------------------------*/
        /* IF NO ERRORS FORMAT THE POID DATE*/
      /* -----------------------------------------------------------*/

      set TA2REC empty; /* Clear date record*/
      TA2REC.TA2GRTYP = "E"; /* Move in date type*/
      TA2REC.TA2GRGEN = PC02W01.PC02WDAT; /* Move in map poid*/

      PC02S02(); /* Set up p.o. id date*/

      if (TA2REC.TA2RTNCD == 0000) /* Good return*/

        PC02W01.PC02WPDT = TA2REC.TA2GRGGN; /* Move complete date*/

      end
      if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
        set PC02M010.PC02MDMO bold; /* Highlight*/
        set PC02M010.PC02MBMO bold;
        set PC02M010.PC02MMYY cursor, bold; /* Highlight error*/
        converseLib.validationFailed(313); /* Date is missing*/
        PC02M010.XXXERRID = "PC02511"; /* Process name*/
      end
    end
  end

end // end PC02511

// APPAREL PO ID EDIT
Function PC02512()

   /* ----------------------------------------------------------*/
   /* P.O. ID FOR APPAREL*/
   /* ----------------------------------------------------------*/

  if (PC02M010.PC02MMYY > " " /* Something in po id year*/
   || PC02M010.PC02MBMO > " " /* Something in po id buy month*/
   || PC02M010.PC02MDMO > " " /* Something in po id delivery month*/
   || PC02M010.FY1FCTYC > " ") /* Something in po id fcty. code*/

    set VFCTY003 empty; /* Clear factory record*/
    VFCTY003.XGPCD = PC02M010.XGPCD; /* Gpc code*/
    VFCTY003.FY1FCTYC = PC02M010.FY1FCTYC; /* Factory code*/

    PC02S01(); /* Validate the factory code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
      if (VFCTY003.XXXSTAT == "A") /* Active factory*/
        if (VFCTY003.XCTCD != "USA") /* Not USA factory*/

          PC02W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
          PC02W01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
          PC02M010.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
        else
          set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
          PC02M010.FY1FCTSN = " "; /* Factory short name*/
          PC02W01.FY1FCTSN = " "; /* Factory short name*/
          PC02W01.FY1FCTYC = " "; /* Factory code*/
          converseLib.validationFailed(286); /* Factory code invalid or missimg*/
          PC02M010.XXXERRID = "PC02512"; /* Process name*/
        end
      else
        set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC02M010.FY1FCTSN = " "; /* Factory short name*/
        PC02W01.FY1FCTSN = " "; /* Factory short name*/
        PC02W01.FY1FCTYC = " "; /* Factory code*/
        converseLib.validationFailed(32); /* Factory code invalid or missimg*/
        PC02M010.XXXERRID = "PC02512"; /* Process name*/
      end
    else
      set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC02M010.FY1FCTSN = " "; /* Factory short name*/
      PC02W01.FY1FCTSN = " "; /* Factory short name*/
      PC02W01.FY1FCTYC = " "; /* Factory code*/
      converseLib.validationFailed(32); /* Factory code invalid or missimg*/
      PC02M010.XXXERRID = "PC02512"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
     /* DATE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC02M010.PC02MDMO == "01" /* Something there*/
     || PC02M010.PC02MDMO == "02" /* Something there*/
     || PC02M010.PC02MDMO == "03" /* Something there*/
     || PC02M010.PC02MDMO == "04" /* Something there*/
     || PC02M010.PC02MDMO == "05" /* Something there*/
     || PC02M010.PC02MDMO == "06" /* Something there*/
     || PC02M010.PC02MDMO == "07" /* Something there*/
     || PC02M010.PC02MDMO == "08" /* Something there*/
     || PC02M010.PC02MDMO == "09" /* Something there*/
     || PC02M010.PC02MDMO == "10" /* Something there*/
     || PC02M010.PC02MDMO == "11" /* Something there*/
     || PC02M010.PC02MDMO == "12") /* Something there*/

      PC02W01.PC02WDLM = PC02M010.PC02MDMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC02M010.XXXERRID = "PC02512"; /* Process name*/
      set PC02M010.PC02MDMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC02M010.PC02MBMO == "01" /* Something there*/
     || PC02M010.PC02MBMO == "02" /* Something there*/
     || PC02M010.PC02MBMO == "03" /* Something there*/
     || PC02M010.PC02MBMO == "04" /* Something there*/
     || PC02M010.PC02MBMO == "05" /* Something there*/
     || PC02M010.PC02MBMO == "06" /* Something there*/
     || PC02M010.PC02MBMO == "07" /* Something there*/
     || PC02M010.PC02MBMO == "08" /* Something there*/
     || PC02M010.PC02MBMO == "09" /* Something there*/
     || PC02M010.PC02MBMO == "10" /* Something there*/
     || PC02M010.PC02MBMO == "11" /* Something there*/
     || PC02M010.PC02MBMO == "12") /* Something there*/

      PC02W01.PC02WBYM = PC02M010.PC02MBMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC02M010.XXXERRID = "PC02512"; /* Process name*/
      set PC02M010.PC02MBMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
      /* CHECK P.O. ID FOR APPAREL YEAR CODE, BUY MONTH, DEL. MONTH*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No message*/

      set VPOVFY02 empty; /* Clear record*/
      VPOVFY02.PCFSECD = PC02M010.PC02MMYY; /* P.O. id season cd*/
      PC02W01.PC02WBMO = PC02M010.PC02MBMO; /* Buy month*/
      VPOVFY02.PCFBUYMO = PC02W01.PC02WBMO; /* Season buy month*/
      VPOVFY02.PO-REG-CD = "01";

      PC02S06(); /* P.O. id edit routine for apparel*/

      if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
       && VPOVFY02.XXXSTAT == "A") /* Active status*/

        PC02W01.PC02WAYR = VPOVFY02.PCFBUYYR; /* Apparel year ccyy*/
        PC02W01.PC02WOWY = VPOVFY02.PCFBUYYR; /* Apparel year ccyy*/
        PC02W01.PCFSECD = VPOVFY02.PCFSECD; /* P.O. season code*/
        PC02W01.PCFSEYR = VPOVFY02.PCFSEYR; /* P.O. season year*/
        PC02W01.XSECD = VPOVFY02.XSECD; /* Season code*/
        PC02W01.PC02WPCC = PC02W01.PC02WACY; /* P.O. ID cent.*/
        PC02W01.PC02WPYR = PC02W01.PC02WAYE; /* P.O. ID year*/

        /* ------------------------------------------------------------*/
         /* DATE VALIDATION*/
        /* ------------------------------------------------------------*/

        if (converseVar.validationMsgNum == 0) /* No message*/

          set TA2REC empty; /* Clear date record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
          TA2REC.TA2GRTYP = "G"; /* Move in date type*/
          TA2REC.TA2GRGGN = PC02W01.PC02WODT; /* Move in date*/

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

          if (TA2REC.TA2RTNCD == 0000) /* Valid date*/

            PC02W01.PC02WPDT = TA2REC.TA2GRGGN; /* PO ID date*/
          else
            set PC02M010.PC02MMYY cursor, bold; /* Highlight error*/
            set PC02M010.PC02MBMO bold; /* Highlight error*/
            converseLib.validationFailed(80); /* Invalid date*/
            PC02M010.XXXERRID = "PC02512"; /* Process name*/
          end
        end
      else
        set PC02M010.PC02MMYY cursor, bold; /* Season year*/
        set PC02M010.PC02MBMO bold; /* buy month*/
        converseLib.validationFailed(192); /* P.O. ID season year/or buy month*/
                                   /* invalid*/
        PC02M010.XXXERRID = "PC02512"; /* Process name*/
      end
    end
  end

end // end PC02512

// PROCESS MORE DETAIL EDITS
Function PC02513()

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF PO ID DATE HAS A PO.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/

    set VPOHDR02 empty; /* Clear record*/
    set PCYREC empty; /* Clear record*/

    PCYREC.PCYFUNC = "SE";
    PCYREC.PCYFRDT = PC02W01.PC02WBDT; /* PO ID from date*/
    PCYREC.PCYTODT = PC02W01.PC02WEDT; /* PO ID to date*/

    if (PC02M010.FY1FCTYC == "ALL") /* Factory code*/

      VPOHDR02.FY1FCTYC = "*";
    else
      VPOHDR02.FY1FCTYC = PC02M010.FY1FCTYC;
    end

    VPOHDR02.XGPCD = PC02M010.XGPCD; /* Gpc code*/
    VPOHDR02.PO-REG-CD = PC02W01.PO-REG-CD; /* po region*/
    VPOHDR02.PCFSECD = PC02W01.PCFSECD; /* Season code*/
    VPOHDR02.PC4ORTYP = PC02M010.PC4ORTYP; /* PO type code*/
    VPOHDR02.PC3POIDT = PC02W01.PC02WPDT; /* PO ID date*/

    PC02S05(); /* Call po header*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

        converseLib.validationFailed(18); /* No row found*/
        set PC02M010.PC02MMYY cursor, bold; /* Highlight*/
        PC02M010.XXXERRID = "PC02513"; /* Process name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF THE FACTORY COUNTRY IS USA*/
   /* ------------------------------------------------------------*/

  if (PC02M010.PC02MPUO == "Y" /* Print USA report*/
   || PC02M010.PC02MPEO == "Y") /* Print Export report*/
                                  /* dramse: 08/12/98 commented the*/
                                   /* following code since LCs are also*/
                                   /* issued*/
                   /* for USA factories for Equipment*/
    /* IF VFCTY003.XCTCD EQ 'USA';    /* Factory country is the US*/
    if (VFCTY003.FY1FRGN == "N") /* if offshore flag is 'N'; NO LC*/

      set PC02M010.FY1FCTYC cursor, bold; /* Highlight error*/
      converseLib.validationFailed(286);
      PC02M010.XXXERRID = "PC02513"; /* Process name*/
    end
  end

end // end PC02513

// VERIFY BEGIN AND END DATES
Function PC02514()

   /* ------------------------------------------------------------*/
    /* SEE IF ENDING DATE ENTERED*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2GRTYP = "E"; /* Move in the date type*/
  TA2REC.TA2GRGE = PC02W01.PC02WTDT; /* Move End date*/

  PC02S02(); /* Set up p.o. id date*/

  if (TA2REC.TA2RTNCD == 0000) /* No message*/

    PC02W01.PC02WEDT = TA2REC.TA2GRGGN; /* Ending date*/
  else
    set PC02M010.PC02MEPM cursor, bold; /* Highlight error*/
    set PC02M010.PC02MEDM bold; /* Ending day*/
    set PC02M010.PC02MEYR bold; /* Ending year*/
    converseLib.validationFailed(38); /* Date is missing*/
    PC02M010.XXXERRID = "PC02514"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF BEGINNING DATE ENTERED*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2GRTYP = "E"; /* Move in the date type*/
  TA2REC.TA2GRGE = PC02W01.PC02WFDT; /* Move Beg date*/

  PC02S02(); /* Set up p.o. id date*/

  if (TA2REC.TA2RTNCD == 0000) /* No message*/

    PC02W01.PC02WBDT = TA2REC.TA2GRGGN; /* Beg. date*/
  else
    set PC02M010.PC02MBPM cursor, bold; /* Highlight error*/
    set PC02M010.PC02MBDM bold; /* Beg. day*/
    set PC02M010.PC02MBYR bold; /* Beg. year*/
    converseLib.validationFailed(38); /* Date is missing*/
    PC02M010.XXXERRID = "PC02514"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF BEGINNING DATE IS LESS THAN THE ENDING DATE*/
   /* ------------------------------------------------------------*/

  if (TA2REC.TA2RTNCD == 0000) /* No message*/
    if (PC02W01.PC02WEDT < PC02W01.PC02WBDT) /* The end. date < beg.*/

      set PC02M010.PC02MBPM cursor, bold; /* Highlight error*/
      set PC02M010.PC02MBDM bold; /* Beg. day*/
      set PC02M010.PC02MBYR bold; /* Beg. year*/
      set PC02M010.PC02MEPM bold; /* Highlight error*/
      set PC02M010.PC02MEDM bold; /* Beg. day*/
      set PC02M010.PC02MEYR bold; /* Beg. year*/
      converseLib.validationFailed(136); /* The end. date can't be less*/
      PC02M010.XXXERRID = "PC02514"; /* Process name*/
    end
  end

end // end PC02514

// DO THE PARM. EDIT
Function PC02520()

   /* ------------------------------------------------------------*/
    /* MOVE IN THE PARMS. TO THE PC02WTB1 ARRAY*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC02W03.XGPCD = PC02M010.XGPCD; /* Gpc code*/
    PC02W03.PC02WIBT = PC02W01.PC02WPDT; /* Begin PO ID*/
    PC02W03.PC02WIET = PC02W01.PC02WPDT; /* End   PO ID*/
    PC02W03.FY1FCTYC = PC02W01.FY1FCTYC; /* Factory*/
    PC02W03.PCFSECD = PC02W01.PCFSECD; /* PO season code*/
    PC02W03.PC4ORTYP = PC02W01.PC4ORTYP; /* PO type*/
    PC02W03.PC02WTBT = PC02W01.PC02WBDT; /* Beg. date*/
    PC02W03.PC02WTET = PC02W01.PC02WEDT; /* End. date*/
    PC02W03.PC02WPUO = PC02W01.PC02WPUO; /* usa flag*/
    PC02W03.PC02WPEO = PC02W01.PC02WPEO; /* export flag*/

    converseLib.validationFailed(238); /* Max. reached hit pf9*/
    PC02M010.XXXERRID = "PC02520"; /* Process name*/
    set PC02M010.CATOAP cursor; /* Set cursor*/

  end

end // end PC02520

// PROCESS THE INPUT REQUEST
Function PC02600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* PF9 pressed*/
   && PC02W03.XGPCD > " ")       

    if (PC02W03.XGPCD == "02") /* Footwear Report requested*/
      if (VFCTY003.FY-FCTY-TYP-CD == "F")
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
            if (PC02M010.PC02MJFL == "Y") /* japan pos only*/
              PC02640(); /* format prod. amd. jcl*/
            else
              PC02620(); /* format prod. adj. jcl*/
            end
          else
            PC02623(); /* format prod. adj. jcl*/
          end
        else
          if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
            if (PC02M010.PC02MJFL == "Y") /* japan pos only*/
              PC02641(); /* format devl. amd. jcl*/
            else
              PC02621(); /* format devl. adj. jcl*/
            end
          else
            PC02622(); /* format devl. adj. jcl*/
          end
        end
      end

      if (VFCTY003.FY-FCTY-TYP-CD == "E")
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
            if (PC02M010.PC02MJFL == "Y") /* japan pos only*/
              PC02650(); /* format prod. amd. jcl*/
            else
              PC02630(); /* format prod. adj. jcl*/
            end
          else
            PC02623(); /* format prod. adj. jcl*/
          end
        else
          if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
            if (PC02M010.PC02MJFL == "Y") /* japan pos only*/
              PC02651(); /* format devl. amd. jcl*/
            else
              PC02633(); /* format devl. adj. jcl*/
            end
          else
            PC02622(); /* format devl. adj. jcl*/
          end
        end
      end
    end

    if (PC02W03.XGPCD == "03") /* Apparel Report requested*/
      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
          PC02624(); /* format prod. amd. jcl*/
        else
          PC02623(); /* format prod. adj. jcl*/
        end
      else
        if (PC02W01.PC02WPSO == "Y") /* amendment report requested*/
          PC02625(); /* format devl. amd. jcl*/
        else
          PC02622(); /* format devl. adj. jcl*/
        end
      end
    end

    PC02W01.PC02WLIX = 0;
    PC02W01.PC02WAIX = 0;

    set PC02W03 empty; /* Clear the parm. record*/
    set PC02M010 initial; /* Clear the map*/
    set PC02W02 empty; /* Clear JCL storage*/

    if (PC02W01.XGPCD == "02") /* Footwear*/

      PC02M010.XGPCD = PC02W01.XGPCD; /* Gpc code*/
      PC02M010.PC4ORTYP = "FT";
      PC02M010.XGPDESC = "FOOTWEAR";
      PC02M010.PC02MPSO = "N"; /* print amendment flag*/
      PC02M010.PC02MPDO = "N"; /* print adjustment flag*/
      PC02M010.PC02MJFL = "N"; /* print Japan POs flag*/
    else
      if (PC02W01.XGPCD == "03") /* Apperal*/

        PC02M010.XGPCD = PC02W01.XGPCD; /* Gpc code*/
        PC02M010.PC4ORTYP = "IL";
        PC02M010.XGPDESC = "APPAREL";
        set PC02M010.PC02MASL skip, invisible; /* darken amd. summary literal*/
        set PC02M010.PC02MPSO skip, invisible; /* darken amd. summary flag*/
        set PC02M010.PC02MADL skip, invisible; /* darken adj. detail literal*/
        set PC02M010.PC02MPDO skip, invisible; /* darken adj. detail flag*/
      end
    end

    set PC02M010.PC02MMYY cursor; /* PO ID year*/
    PC02M010.PC02MPUO = "N"; /* Print USA flag*/
    PC02M010.PC02MPEO = "N"; /* Print Export flag*/

    PC02M010.PC02MEPM = PC02W01.PC02WDEM; /* End. month*/
    PC02M010.PC02MEDM = PC02W01.PC02WDED; /* End. day*/
    PC02M010.PC02MEYR = PC02W01.PC02WDYR; /* End. year*/

  else
    if (converseVar.eventKey is enter) /* Enter key pressed*/

       /* NEXT SENTENCE*/

    else
      converseLib.validationFailed(17); /* Must have some parms. to pass*/
      PC02M010.XXXERRID = "PC02600"; /* Process name*/
    end
  end

end // end PC02600

// SET UP THE JCL
Function PC02620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T01.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S08(); /* format jcl lines*/

      end

      PC02S09(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02620

// SET UP THE JCL
Function PC02621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T11.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S88(); /* format jcl lines*/

      end

      PC02S99(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02621

// SUBMIT ADJUST. DEVL. JCL
Function PC02622()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE ADJUSTMENT REPORT FROM DEVL.*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T12.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S10(); /* format devl. adj. jcl lines*/

      end

      PC02S11(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02622

// SUBMIT ADJUST. PROD. JCL
Function PC02623()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE ADJUSTMENT REPORT FROM PROD.*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T02.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S89(); /* format prod. adj. jcl lines*/

      end

      PC02S98(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02623

// SET UP THE JCL
Function PC02624()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T03.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S12(); /* format jcl lines*/

      end

      PC02S13(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02624

// SET UP THE JCL
Function PC02625()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T13.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S14(); /* format jcl lines*/

      end

      PC02S15(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02625

// SET UP THE JCL
Function PC02630()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T04.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S16(); /* format jcl lines*/

      end

      PC02S17(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02630

// SET UP THE JCL
Function PC02633()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T44.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S26(); /* format jcl lines*/

      end

      PC02S27(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02633

// SET UP THE JCL
Function PC02640()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T05.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S30(); /* format jcl lines*/

      end

      PC02S31(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02640

// SET UP THE JCL
Function PC02641()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T55.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S32(); /* format jcl lines*/

      end

      PC02S33(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02641

// SET UP THE JCL
Function PC02650()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T06.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S36(); /* format jcl lines*/

      end

      PC02S37(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02650

// SET UP THE JCL
Function PC02651()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC02W03.PC02WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC02W01.PC02WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC02W01.PC02WAIX = 0; /* Initialize index*/
    PC02W01.PC02WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC02W01.PC02WLIX > 0) /* Until end of table*/
      if (PC02T66.TARTYPE[PC02WLIX] == "P") /* Parameters statement*/

        PC02S07(); /* format parameters*/

      else

        PC02S38(); /* format jcl lines*/

      end

      PC02S39(); /* increment table index*/

    end

    PC02S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC02W03 empty; /* Clear parameter table*/
      return;
    else
      set PC02W03 empty; /* Clear parameter table*/
      return;
    end
  end

end // end PC02651

// CALL THE FACTORY RECORD
Function PC02S01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC02"; /* Process name*/
  TA1REC.TA1LOC = "PC02S01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC02M010.XXXERRID = "PC02S01"; /* Process name*/

  exit stack;

end // end PC02S01

// CALL THE DATE ROUTINE
Function PC02S02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000 /* Valid date*/
     || TA2REC.TA2RTNCD == 0222) /* Invalid date*/

      return;

    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC02S02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC02M010.XXXERRID = "PC02S02"; /* Process name*/

      exit stack;

    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC02S02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC02M010.XXXERRID = "PC02S02"; /* Process name*/

    exit stack;

  end

end // end PC02S02

// SUBMIT THE JOB
Function PC02S03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  TA6-MAX-COND-CODE = 02; /* 00 and 02 are noral eoj codes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    set PC02W03 empty;
    converseLib.validationFailed(190); /* Job submitted to reader*/
    PC02M010.XXXERRID = "PC02S03";
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PC02W03 empty;
    PC02M010.XXXERRID = "PC02S03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC02M010.XXXERRID = "PC02S03"; /* Process name*/
    exit stack;
  end

end // end PC02S03

// Call P.O. type routine
Function PC02S04()

   /* ------------------------------------------------------------*/
   /* Select a unique p.o. type row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC02"; /* Program name*/
  TA1REC.TA1LOC = "PC02S04 SELECT UNIQUE P.O. TYPE ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC02M010.XXXERRID = "PC02S04"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end PC02S04

// CALL P.O. HEADER ROUTINE
Function PC02S05()

   /* ------------------------------------------------------------*/
   /* P.O. ID date CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the po header set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC02M010.XXXERRID = "PC02S05"; /* Process name*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC02M010.XXXERRID = "PC02S05"; /* Process name*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC02"; /* Process name*/
  TA1REC.TA1LOC = "PC02S05 SELECT COUNT P.O. HEADER ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC02M010.XXXERRID = "PC02S05"; /* Process name*/

  exit stack;

end // end PC02S05

// CALL PO ID EDIT FOR APPAREL
Function PC02S06()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("S ", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC02"; /* Process name*/
  TA1REC.TA1LOC = "PC02S06 P.O. ID EDIT FOR APPAREL  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC02M010.XXXERRID = "PC02S06"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end PC02S06

// Format JCL Parameter Cards
Function PC02S07()

   /* ------------------------------------------------------------*/
   /* Format parameters*/
   /* ------------------------------------------------------------*/

  PC02W02.PC02WTYP = "P"; /* Type*/
  PC02W01.PC02WIX3 = 1; /* Move 1 to array index*/

  while (PC02W01.PC02WIX3 <= PC02W01.PC02WMAX) /* LE max for table*/
    if (PC02W03.PC02WTBG[PC02WIX3] > "0")

      TA6REC.TA6ROW[TA6INDEX] = PC02W03.PC02WTBG[PC02WIX3];
      TA6REC.TARTYPE[TA6INDEX] = PC02W02.PC02WTYP; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Add 1 to index*/
    else
      PC02W01.PC02WIX3 = PC02W01.PC02WMAX; /* Set index to 10*/
    end
    PC02W01.PC02WIX3 = PC02W01.PC02WIX3 + 1; /* Add 1 to array idx*/
  end
end // end PC02S07

// Format JCL Cards
Function PC02S08()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T01.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T01.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T01.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S08

// Increment JCL Index
Function PC02S09()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T01.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S09

// Format Adj. Jcl Cards
Function PC02S10()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T12.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T12.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T12.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S10

// Increment Adj. Jcl Index
Function PC02S11()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T12.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S11

// Format JCL Cards
Function PC02S12()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T03.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T03.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T03.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S12

// Increment JCL Index
Function PC02S13()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T03.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S13

// Format JCL Cards
Function PC02S14()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T13.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T13.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T13.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S14

// Format prod. adj. Jcl cards
Function PC02S15()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T13.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S15

// Format JCL Cards
Function PC02S16()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T04.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T04.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T04.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S16

// Increment JCL Index
Function PC02S17()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T04.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S17

// Format JCL Cards
Function PC02S26()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T44.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T44.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T44.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S26

// Increment JCL Index
Function PC02S27()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T44.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S27

// Format JCL Cards
Function PC02S30()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T05.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T05.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T05.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S30

// Increment JCL Index
Function PC02S31()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T05.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S31

// Format JCL Cards
Function PC02S32()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T55.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T55.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T55.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S32

// Increment JCL Index
Function PC02S33()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T55.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S33

// Format JCL Cards
Function PC02S36()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T06.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T06.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T06.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S36

// Increment JCL Index
Function PC02S37()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T06.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S37

// Format JCL Cards
Function PC02S38()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T66.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T66.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T66.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S38

// Increment JCL Index
Function PC02S39()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T66.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S39

// Format JCL Cards
Function PC02S88()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T11.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T11.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T11.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S88

// Format prod. adj. Jcl cards
Function PC02S89()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC02T02.TARJCL[PC02WLIX] == "            /*EOF" /* End of table*/
   && PC02W01.PC02WLIX == PC02W01.PC02WMAX)   

    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC02T02.TARJCL[PC02WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC02T02.TARTYPE[PC02WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC02S89

// Increment Prod. Adj. Jcl Index
Function PC02S98()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T02.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S98

// Increment JCL Index
Function PC02S99()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC02T11.TARJCL[PC02WLIX] == "/*EOF") /* End of table*/
    if (PC02W01.PC02WLIX == PC02W01.PC02WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC02W01.PC02WLIX = 0; /* Indicate end of table*/
    end
  else
    PC02W01.PC02WLIX = PC02W01.PC02WLIX + 1; /* Increment table index*/
  end
end // end PC02S99

//*** RECORD=PC02W01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC03
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// *  9/25/89   GWITZI        NEW RECORD
// * 11/17/97   tthan1        changed
// *
// ************************************************************
// ***********************
Record PC02W01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCFSECD PCFSECD ; 
  10 PCFSEYR PCFSEYR ; 
  10 XSECD XSECD ; 
  10 PC02WDDT PC02WDDT ; 
    15 PC02WDEM PC02WDEM ; 
    15 PC02WBD1 PC02WBD1 ; 
    15 PC02WDED PC02WDED ; 
    15 PC02WBD2 PC02WBD2 ; 
    15 PC02WDYR PC02WDYR ; 
  10 PC02WODT PC02WODT ; 
    15 PC02WOWY PC02WOWY ; 
      20 PC02WPCC PC02WPCC ; 
      20 PC02WPYR PC02WPYR ; 
    15 PC02WBYM PC02WBYM ; 
    15 PC02WDLM PC02WDLM ; 
  10 PC02WAYR PC02WAYR ; 
    15 PC02WACY PC02WACY ; 
    15 PC02WAYE PC02WAYE ; 
  10 PC02WPDT PC02WPDT ; 
  10 PC02WDAT PC02WDAT ; 
    15 PC02WMYY PC02WMYY ; 
    15 PC02WBMO PC02WBMO ; 
    15 PC02WDMO PC02WDMO ; 
  10 PC02WCY1 PC02WCY1 ; 
  10 PC02WCY2 PC02WCY2 ; 
  10 PC02WCDT PC02WCDT ; 
    15 PC02WCY PC02WCY ; 
      20 PC02WCCC PC02WCCC ; 
      20 PC02WYYY PC02WYYY ; 
    15 PC02WMMM PC02WMMM ; 
    15 PC02WDDD PC02WDDD ; 
  10 PC02WPUO PC02WPUO ; 
  10 PC02WPEO PC02WPEO ; 
  10 PC02WPSO PC02WPSO ; 
  10 PC02WPDO PC02WPDO ; 
  10 PC02WLIX PC02WLIX ; 
  10 PC02WAIX PC02WAIX ; 
  10 PC02WIX3 PC02WIX3 ; 
  10 PC02WMAX PC02WMAX ; 
  10 PC02WLTC PC02WLTC ; 
  10 PC02WBDT PC02WBDT ; 
  10 PC02WFDT PC02WFDT ; 
    15 PC02WBYR PC02WBYR ; 
    15 PC02WBPM PC02WBPM ; 
    15 PC02WBDM PC02WBDM ; 
  10 PC02WCAT PC02WCAT ; 
    15 PC02WCYR PC02WCYR ; 
    15 PC02WCPM PC02WCPM ; 
    15 PC02WCDM PC02WCDM ; 
  10 PC02WEDT PC02WEDT ; 
  10 PC02WTDT PC02WTDT ; 
    15 PC02WEYR PC02WEYR ; 
    15 PC02WEPM PC02WEPM ; 
    15 PC02WEDM PC02WEDM ; 
  10 PC02CCYY PC02CCYY ; 
end // end PC02W01

Record PC02W02 type basicRecord
  10 PC02WJCE PC02WJCE ; 
    15 PC02WEX1 PC02WEX1 ; 
    15 PC02WPNM PC02WPNM ; 
    15 * char(58) ; 
  10 PC02WJCP PC02WJCP ; 
  10 PC02WTYP PC02WTYP ; 
  10 PC02WOVR PC02WOVR [7] ; 
    15 * char(4) ; 
    15 PC02WCMM PC02WCMM ; 
    15 * char(12) ; 
  10 PC02WJCC PC02WJCC [7] ; 
    15 * char(22) ; 
    15 PC02WCLG PC02WCLG ; 
    15 * char(41) ; 
end // end PC02W02

//*** RECORD=PC02W03 ****
// ************************************************************
// *
// *     Parmeter passing record
// *                           Must look like WPC140D
// *                                     in SHR.TEST.PANLIB
// *
// ************************************************************
// ***********************
Record PC02W03 type basicRecord
  10 PC02WTBG PC02WTBG [10] ; 
    15 XGPCD XGPCD ; 
    15 PC02WIBT PC02WIBT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(4) ; 
    15 PC02WIET PC02WIET ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 * char(6) ; 
    15 * char(3) ; 
    15 * char(2) ; 
    15 * char(2) ; 
    15 PC02WTBT PC02WTBT ; 
      20 * num(1) ; 
      20 PC02WTBC PC02WTBC ; 
      20 PC02WTBY PC02WTBY ; 
      20 PC02WTBM PC02WTBM ; 
      20 PC02WTBD PC02WTBD ; 
    15 PC02WTET PC02WTET ; 
      20 * num(1) ; 
      20 PC02WTEC PC02WTEC ; 
      20 PC02WTEY PC02WTEY ; 
      20 PC02WTEM PC02WTEM ; 
      20 PC02WTED PC02WTED ; 
    15 PC02WRFL PC02WRFL ; 
    15 PC02WPUO PC02WPUO ; 
    15 PC02WPEO PC02WPEO ; 
    15 * char(14) ; 
end // end PC02W03

//          day
DataItem PC02CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem PC02WACY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PC02WAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC02WAYE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apparel buy yr
DataItem PC02WAYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dash-1
DataItem PC02WBD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash-2
DataItem PC02WBD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC02WBDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. working date
DataItem PC02WBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id buy month
DataItem PC02WBMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          month
DataItem PC02WBPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC02WBYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC02WBYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit working poid
DataItem PC02WCAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          centry
DataItem PC02WCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PC02WCDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date
DataItem PC02WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition logic
DataItem PC02WCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PC02WCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          month
DataItem PC02WCPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC02WCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date +1
DataItem PC02WCY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PC02WCY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          year
DataItem PC02WCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date
DataItem PC02WDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PC02WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Default date
DataItem PC02WDDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PC02WDED char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC02WDEM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery mo
DataItem PC02WDLM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month
DataItem PC02WDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC02WDYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC02WEDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End. working date
DataItem PC02WEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC02WEPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute stat. constants
DataItem PC02WEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC02WEYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. working date
DataItem PC02WFDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Begin po date range
DataItem PC02WIBT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End po date range
DataItem PC02WIET num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PC02WIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement
DataItem PC02WJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PC02WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PC02WJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem PC02WLIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Less than condidition override
DataItem PC02WLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. max.
DataItem PC02WMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC02WMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id year
DataItem PC02WMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC PO date
DataItem PC02WODT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// override statement
DataItem PC02WOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC centry/year
DataItem PC02WOWY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//       centry
DataItem PC02WPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print adjustment flag
DataItem PC02WPDO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id date
DataItem PC02WPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Export FLAG
DataItem PC02WPEO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// program name
DataItem PC02WPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print amendment flag
DataItem PC02WPSO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print USA FLAG
DataItem PC02WPUO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC02WPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pgm request flag pc0'2'
DataItem PC02WRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem PC02WTBC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem PC02WTBD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table row
DataItem PC02WTBG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem PC02WTBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beg. date
DataItem PC02WTBT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC02WTBY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End. working date
DataItem PC02WTDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem PC02WTEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem PC02WTED num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem PC02WTEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End. date
DataItem PC02WTET num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC02WTEY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl type
DataItem PC02WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC02WYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end