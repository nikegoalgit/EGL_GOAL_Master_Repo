package pc01;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC01 ****
// ************************************************************
// *
// *  THIS PROGRAM WILL GENERATE LETTER OF CREDIT AMENDEMENT
// *  REPORTS DURING THE DAY FOR THE PO ID AND PRODUCTS THAT
// *  USER SPECIFIES.
// *
// *  THE GPC CODE WILL DEFAULT TO THE GPC ENTERED ON THE PC0A
// *  MENU.  ONLY 02 AND 03 ARE ALLOWED.  THE USER MUST ALSO
// *  HAVE THE AUTHORITY TO ADD AND CHANGE FOR THE GPC CODE
// *  ENTERED.
// *
// *  THE USER WILL BE ABLE TO ENTER A PO ID OR SPECIFY A PO ID
// *  RANGE (PO ID = YY-MM-MM-FC).
// *
// *  THE USER WILL ALSO BE SPECIFIC BY PO TYPE.  THE DEFAULTS
// *  ARE: "FT" FOR FOOTWEAR.
// *
// *  THE USER WILL BE ABLE TO ENTER STYLE, COLOR, AND DIM.(IF
// *  APPLICABLE).  IF MORE THAN ONE PRODUCT, ENTER THE STYLE
// *  AND PRESS ENTER AND THE SYSTEM WILL ACCEPT THE STYLE THAT
// *  IS ENTERED AND THE CURSOR WILL GO BACK TO THE STYLE FIELD
// *  FOR THE USER TO ENTER THE NEXT STYLE.
// *
// *  TO HAVE THE REPORT PRINTED THE USER WILL PRESS PF9.
// *
// *  THE USER WILL BE ABLE TO SAVE UP TO 50 PARMS. BEFORE
// *  THEY HAVE TO SUBMIT THE REPORT.
// *
// ************************************************************
// *
// *   DATE         USERID             COMMENTS
// * ________     __________          ________________________
// * 10/03/89      GWITZI              New Application
// * 12/05/89      JWOOD               REMOVED TARREC FROM LST
// * 12/05/89      JWOOD               REPLACED TA0PM001 (NEW)
// * 07/17/90      JWOOD               REMOVED UT2REC FROM T&R
// * 04/17/91      GAMEN               REMOVE "SC" EDIT ON P.O.
// *                                   ID TO COUNT P.O.'S FOR
// *                                   APPAREL
// * 10/09/91      lsutto              change inplicits allowed
// *                                   to = no on appl
// * 08/30/92      lsutto      move to l/c screen lc0a (pf3 key
// *                                   change in pc01300)
// * 12/29/93      gamen               add theater of ops code
// * 01/04/94      gamen               fix theater of ops code
// * 02/08/94      DHALES              CHANGE FUNC OF HDR COUNT
// *                                   SELECT TO 'SE' TO
// *                                   EXCLUDE PO NBRS < 300000
// * 06/10/97      PHARWO              PCA367 - PPR PROJECT
// * 07/08/97      jniese              PCA367 - PPR corrections
// * 11/12/97      TTHAN1              Y2KFIX - ADD NEW ITEM
// *                                   PC01CCYY, CHANGE SIZE OF
// *                                   PC01WCY1 AND PC01WCY2
// *                                   FROM 2 TO 4, ADD NEW
// *                                   GROUP PC01WCY.  CHANGE
// *                                   PC01513 AND PC01514.
// * 01/14/98      DRAMSE              ADDED NEW JCL TABLES.
// * 05/11/98      DRAMSE              CHANGED LOGIC TO TRIGGER
// *                                   PC7601 for EQUIPMENT
// *                                   FACTORIES.
// * 07/21/98      DRAMSE              CHANGED TO USE VFCTY003
// * 08/12/98      DRAMSE              CHANGED PC01512,PC01514
// *                                   LCs can also be issued
// *                                   for USA factories.
// * 01/15/99      ATHELA              Changed to print LC rpts
// *                                   for Japan POs.
// * 07/05/99      DRAMMO     PCF198   Excluded Footwear POs
// *                                   of 'LP' type.
// * 10/19/00      gkamal              added steps to copy
// *                                   the sap file to a gdg
// *                                   if the file is not empty
// * 10/24/00      gkamal              added steps to have 00
// *                                   and 02 as normal eoj
// *                                   beacuse of check for
// *                                   empty file.
// ************************************************************
// *********************
Program PC01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC01W01 PC01W01; // record
  PC01W02 PC01W02; // record
  PC01WTB1 PC01WTB1; // record
  PC01WTB2 PC01WTB2; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFCTY003 VFCTY003; // record
  VPOHDR02 VPOHDR02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PC01T01 {deleteAfterUse = yes}; // table
  use PC01T11 {deleteAfterUse = yes}; // table
  use PC01T02 {deleteAfterUse = yes}; // table
  use PC01T22 {deleteAfterUse = yes}; // table
  use PC01T03 {deleteAfterUse = yes}; // table
  use PC01T33 {deleteAfterUse = yes}; // table
  use PC01T04 {deleteAfterUse = yes}; // table
  use PC01T44 {deleteAfterUse = yes}; // table
  use PC01T05 {deleteAfterUse = yes}; // table
  use PC01T55 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use PC01M.PC01M010,  // forms
      PC01M.TA0PM001, 
      PC01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
       /* INITIALIZE RECORDS, MAP AND SOME ITEMS*/
     /* ------------------------------------------------------------*/

    set PC01W01 empty; /* Clear working storage*/
    set PC01W02 empty; /* Clear jcl working storage*/
    set PCYREC empty; /* Clear iomod passing record*/
    set PCFREC empty; /* Clear po id verification record*/
    set VPOHDR02 empty; /* Clear po header record*/
    set PC4REC empty; /* Clear po type record*/
    set PG2REC empty; /* Clear style record*/

    set PC01WTB1 empty; /* Clear Array no. 1*/
    set PC01WTB2 empty; /* Clear Array no. 2*/

    set VFCTY003 empty; /* Clear factory record*/

    set ERRSQLCA empty; /* Clear error sqlca record*/
    set SQLCA empty; /* Clear sqlca record*/

    set TA1REC empty; /* Clear error diag. record*/
    set TA2REC empty; /* Clear date record*/
    set XCTHREC empty; /* Clear user record*/
    set TA6REC empty; /* Clear jcl record*/
    set TAEREC empty; /* Clear error reporting record*/

    set XX0XW01 empty; /* Clear date record*/
    set XX0XW02 empty;

    set PC01M010 initial; /* Clear map*/
    set XX0XM001 initial; /* Clear map*/

    PC01W01.PC01WMAX = 50; /* Max. parm*/

    PC01M010.XGPCD = PCWREC.XGPCD;
    PC01W01.XGPCD = PCWREC.XGPCD;
    PC01W01.PO-REG-CD = "01"; /* po region*/
    PCWREC.PO-REG-CD = "01"; /* po region*/

    if (PCWREC.XGPCD == "02") /* Footwear*/
      PC01M010.PC4ORTYP = "FT"; /* P.O. type*/
      PC01M010.XGPDESC = "FOOTWEAR"; /* Gpc description*/
      PC01M010.SY2CLRID = "00"; /* Color id*/
      PC01M010.XDMCD = "00"; /* Dim. code*/
      PC01M010.PC01MJFL = "N"; /* Jap. POs flag*/
    else
      if (PCWREC.XGPCD == "03") /* Apparel*/
        PC01M010.XGPDESC = "APPAREL "; /* Gpc description*/
        PC01M010.SY2CLRID = " "; /* Color id*/
        PC01M010.XDMCD = "00"; /* Dim. code*/
      end
    end


    PC01000: PC01000();
     /* no flow*/
    PC01050: PC01050();

    goto PC01050;

  end // end main
end // end PC01

// GET CURRENT DATE
Function PC01000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC01W01.PC01WCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC01"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC01M010.XXXERRID = "PC01000"; /* Process name*/

    end
  end


end // end PC01000

// MAIN PROCESS TO DISPLAY MAP
Function PC01050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02") /* Footwear*/
    if (COMMAREA.CACLVL[2] == "Y") /* User can enter*/

      PC01080(); /* Report generation pcocess*/

    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  else
    if (PCWREC.XGPCD == "03") /* Apparel*/
      if (COMMAREA.CACLVL[3] == "Y") /* User can enter*/

        PC01080(); /* Report generation pcocess*/

      else
        PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* To application*/
        XSPCS01(); /* Exit to another application*/
        PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "MN0M"; /* To application*/
        XSPCS01(); /* Exit to another application*/
      end
    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  end



   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

     /* MOVE 'PC01050' TO PC01M010.XXXPRCNM;module ident*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

end // end PC01050

// PROGRAM PROCESS CONTROL
Function PC01080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map. N/A*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PC01200(); /* Format and display the map*/

  PC01300(); /* Check attention identifier*/

  PC01400(); /* Reset fields to normal intensity*/

  PC01500(); /* Verify the entered data*/

  PC01600(); /* Process the entered data*/


end // end PC01080

// FORMAT AND DISPLAY MAP
Function PC01200()

   /* ------------------------------------------------------------*/
       /* DISPLAY THE MAP*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 253)

    if (PC01WTB2.XGPCD[1] > " ") /* Parm has been added*/
      set PC01M010.SY1STNBR cursor; /* Style number*/
      set PC01M010.PC01MBYR skip; /* Lock up*/
      set PC01M010.PC01MBPM skip; /* Lock up*/
      set PC01M010.PC01MBDM skip; /* Lock up*/
      set PC01M010.PC4ORTYP skip; /* Protect type*/
      set PC01M010.FY1FCTYC skip; /* Protect factory*/
      set PC01M010.PC01MEYR skip;
      set PC01M010.PC01MEPM skip;
      set PC01M010.PC01MEDM skip;
    else
      set PC01M010.PC01MBYR cursor; /* P.O. ID year*/
      set PC01M010.PC01MBYR initialAttributes; /* Lock up*/
      set PC01M010.PC01MBPM initialAttributes; /* Lock up*/
      set PC01M010.PC01MBDM initialAttributes; /* Lock up*/
      set PC01M010.PC4ORTYP initialAttributes; /* Protect type*/
      set PC01M010.FY1FCTYC initialAttributes; /* Protect factory*/
      set PC01M010.PC01MEYR initialAttributes;
      set PC01M010.PC01MEPM initialAttributes;
      set PC01M010.PC01MEDM initialAttributes;
    end

  else

    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC01M010.XXXERRID = "PC01200"; /* Process name*/
      PC01M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PC01M010 alarm; /* Sound alarm*/

  end

  if (PCWREC.XGPCD == "03")
    set PC01M010.PC01MJLT skip, invisible; /* darken Jap. literal*/
    set PC01M010.PC01MJFL skip, invisible; /* darken Jap. flag*/
    set PC01M010.PC01MJLO skip, invisible; /* darken Jap. option*/
  end

  PC01M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse PC01M010 ;

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PC01210(); /* Process pop-up window*/
  end


end // end PC01200

// PROCESS POP-UP WINDOW
Function PC01210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC01M010.XDMCD == "?") /* if ? in Dim. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "             DIMENSION CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXDM01(); /* perform Dim. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Dim.       **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC01M010.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      set PC01M010.XDMCD cursor, modified;
    else
      PC01M010.XDMCD = PC01W01.XDMCD; /* clear fields*/
      set PC01M010.XDMCD cursor, modified;
    end
  else

    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(84); /* Hit enter to process*/

  exit stack; /* Exit to redisplay map2*/


end // end PC01210

// CHECK ATTENTION IDENTIFIERS
Function PC01300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC01M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC01M010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC01M010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC01M010.XXXERRID = "PC01300"; /* Process name*/
    end

    set PC01M010.CATOAP cursor, bold; /* Highlight*/
    PC01M010.XXXERRID = "PC01300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "LC0A";
    XSPCS01();

    PC01M010.XXXERRID = "PC01300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC01M010.XXXERRID = "PC01300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC01M010.XXXERRID = "PC01300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PC01M010.XXXERRID = "PC0130A"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC01300

// RESET HIGHLIGHTED FIELDS
Function PC01400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC01M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC01M010.CAITEM initialAttributes; /* Commarea application data*/

  set PC01M010.XGPCD initialAttributes; /* Gpc code*/
  set PC01M010.PC4ORTYP initialAttributes; /* P.O. type*/
  set PC01M010.FY1FCTYC initialAttributes; /* Factory code*/
  set PC01M010.PC01MBYR initialAttributes; /* P.O. id production year beg.*/
  set PC01M010.PC01MBPM initialAttributes; /* P.O. id buy month beg.*/
  set PC01M010.PC01MBDM initialAttributes; /* P.O. id del month beg.*/
  set PC01M010.PC01MEYR initialAttributes; /* P.O. id production year end.*/
  set PC01M010.PC01MEPM initialAttributes; /* P.O. id buy month end.*/
  set PC01M010.PC01MEDM initialAttributes; /* P.O. id del month end.*/

  set PC01M010.SY1STNBR initialAttributes; /* Style number*/
  set PC01M010.SY2CLRID initialAttributes; /* Color id*/
  set PC01M010.XDMCD initialAttributes; /* Dim. code*/
  set PC01M010.PC01MJFL initialAttributes; /* Japan POs Flag*/

  set PC01M010.PC01MBYY initialAttributes; /* beginning year*/
  set PC01M010.PC01MBMM initialAttributes; /* beginning month*/
  set PC01M010.PC01MBDD initialAttributes; /* beginning day*/
  set PC01M010.PC01MBYY initialAttributes; /* beginning year*/
  set PC01M010.PC01MBMM initialAttributes; /* beginning month*/
  set PC01M010.PC01MBDD initialAttributes; /* beginning day*/

  if (PC01W01.XGPCD == "03") /* Apparel*/
    set PC01M010.PC01MJLT skip, invisible; /* darken Jap. literal*/
    set PC01M010.PC01MJFL skip, invisible; /* darken Jap. flag*/
    set PC01M010.PC01MJLO skip, invisible; /* darken Jap. option*/
  end

end // end PC01400

// VERIFY THE ENTERED DATA
Function PC01500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC01M010.CAITEM > " ") /* Application data was entered*/

    set PC01M010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC01M010.XXXERRID = "PC01500"; /* Process name*/

  else

    if (converseVar.eventKey is enter) /* Enter key is pressed*/
      PC01509(); /* Edit begin and end dates*/
      PC01510(); /* Edit style,color,dim.*/
      PC01511(); /* Process more detail edits*/
      PC01512(); /* Process more detail edits*/
      PC01513(); /* Process detail edits*/
      PC01514(); /* Process detail edits*/
      PC01515(); /* Process more detail edits*/
      PC01520(); /* Process parm. edits*/
      if (PC01W01.XGPCD == "02") /* Footwear or Equipment*/
        if (PC01M010.PC01MJFL != "Y" &&  /* Validate Japan POs flg*/
        PC01M010.PC01MJFL != "N")       
          set PC01M010.PC01MJFL cursor, bold; /* Highlight error*/
          converseLib.validationFailed(42);
          PC01M010.XXXERRID = "PC01500";
        end
      end
    end
  end

end // end PC01500

// Edit Begin and End Dates
Function PC01509()

   /* ------------------------------------------------------------*/
    /* SEE IF ENDING DATE ENTERED*/
   /* ------------------------------------------------------------*/


  if (PC01M010.PC01MEYY == "  " /* Nothing there*/
   && PC01M010.PC01MEMM == "  " /* Nothing there*/
   && PC01M010.PC01MEDD == "  ") /* Nothing there*/
    /* next sentence*/
  else

    PC01W01.PC01WEMM = PC01M010.PC01MEMM; /* Ending month*/
    PC01W01.PC01WEDD = PC01M010.PC01MEDD; /* Ending day*/
    PC01W01.PC01WEYY = PC01M010.PC01MEYY; /* Ending year*/


    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2GRTYP = "E"; /* Move in the date type*/
    TA2REC.TA2GRGE = PC01W01.PC01WEDA; /* Move End date*/


    PC01S02(); /* Set up p.o. id date*/


    if (TA2REC.TA2RTNCD == 0000) /* No message*/

      PC01W01.PC01WEDE = TA2REC.TA2GRGGN; /* Ending date*/
    else
      set PC01M010.PC01MEMM cursor, bold; /* Highlight error*/
      set PC01M010.PC01MEDD bold; /* Ending day*/
      set PC01M010.PC01MEYY bold; /* Ending year*/
      converseLib.validationFailed(38); /* Date is missing*/
      PC01M010.XXXERRID = "PC01509"; /* Process name*/
    end

  end

   /* ------------------------------------------------------------*/
    /* SEE IF BEGINNING DATE ENTERED*/
   /* ------------------------------------------------------------*/


  if (PC01M010.PC01MBYY == "  " /* Nothing there*/
   && PC01M010.PC01MBMM == "  " /* Nothing there*/
   && PC01M010.PC01MBDD == "  ") /* Nothing there*/
     /* next sentence*/
  else

    PC01W01.PC01WBMM = PC01M010.PC01MBMM; /* Beg. month*/
    PC01W01.PC01WBDD = PC01M010.PC01MBDD; /* Beg. day*/
    PC01W01.PC01WBYY = PC01M010.PC01MBYY; /* Beg. year*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2GRTYP = "E"; /* Move in the date type*/
    TA2REC.TA2GRGE = PC01W01.PC01WBDA; /* Move Beg date*/

    PC01S02(); /* Set up p.o. id date*/

    if (TA2REC.TA2RTNCD == 0000) /* No message*/

      PC01W01.PC01WBDE = TA2REC.TA2GRGGN; /* Beg. date*/
    else
      set PC01M010.PC01MBMM cursor, bold; /* Highlight error*/
      set PC01M010.PC01MBDD bold; /* Beg. day*/
      set PC01M010.PC01MBYY bold; /* Beg. year*/
      converseLib.validationFailed(38); /* Date is missing*/
      PC01M010.XXXERRID = "PC01509"; /* Process name*/
    end

  end


   /* ------------------------------------------------------------*/
    /* Both dates must be entered or not at all*/
   /* ------------------------------------------------------------*/

  if (PC01M010.PC01MBYY == "  " /* Nothing there*/
   && PC01M010.PC01MBMM == "  " /* Nothing there*/
   && PC01M010.PC01MBDD == "  " /* Nothing there*/
   && PC01M010.PC01MEYY == "  " /* Nothing there*/
   && PC01M010.PC01MEMM == "  " /* Nothing there*/
   && PC01M010.PC01MEDD == "  ") /* Nothing there*/
     /* next sentence*/
  else
    if (PC01M010.PC01MBYY == "  " /* Nothing there*/
     && PC01M010.PC01MBMM == "  " /* Nothing there*/
     && PC01M010.PC01MBDD == "  ") /* Nothing there*/

      set PC01M010.PC01MBMM cursor, bold; /* Highlight error*/
      set PC01M010.PC01MBDD bold; /* Beg. day*/
      set PC01M010.PC01MBYY bold; /* Beg. year*/
      set PC01M010.PC01MEMM bold; /* Highlight error*/
      set PC01M010.PC01MEDD bold; /* End  day*/
      set PC01M010.PC01MEYY bold; /* End  year*/
      converseLib.validationFailed(346); /* The end. date can't be less*/
      PC01M010.XXXERRID = "PC01509"; /* Process name*/
    end
    if (PC01M010.PC01MEYY == "  " /* Nothing there*/
     && PC01M010.PC01MEMM == "  " /* Nothing there*/
     && PC01M010.PC01MEDD == "  ") /* Nothing there*/

      set PC01M010.PC01MBMM cursor, bold; /* Highlight error*/
      set PC01M010.PC01MBDD bold; /* Beg. day*/
      set PC01M010.PC01MBYY bold; /* Beg. year*/
      set PC01M010.PC01MEMM bold; /* Highlight error*/
      set PC01M010.PC01MEDD bold; /* End  day*/
      set PC01M010.PC01MEYY bold; /* End  year*/
      converseLib.validationFailed(346); /* The end. date can't be less*/
      PC01M010.XXXERRID = "PC01509"; /* Process name*/
    end
  end


   /* ------------------------------------------------------------*/
    /* SEE IF BEGINNING DATE IS LESS THAN THE ENDING DATE*/
   /* ------------------------------------------------------------*/


  if (PC01M010.PC01MBYY == "  " /* Nothing there*/
   && PC01M010.PC01MBMM == "  " /* Nothing there*/
   && PC01M010.PC01MBDD == "  " /* Nothing there*/
   && PC01M010.PC01MEYY == "  " /* Nothing there*/
   && PC01M010.PC01MEMM == "  " /* Nothing there*/
   && PC01M010.PC01MEDD == "  ") /* Nothing there*/
     /* next sentence*/
  else
    if (converseVar.validationMsgNum > 0
     && TA2REC.TA2RTNCD == 0000 /* No message*/
     && PC01W01.PC01WEDE < PC01W01.PC01WBDE) /* The end. date < beg.*/

      set PC01M010.PC01MBMM cursor, bold; /* Highlight error*/
      set PC01M010.PC01MBDD bold; /* Beg. day*/
      set PC01M010.PC01MBYY bold; /* Beg. year*/
      set PC01M010.PC01MEMM bold; /* Highlight error*/
      set PC01M010.PC01MEDD bold; /* End  day*/
      set PC01M010.PC01MEYY bold; /* End  year*/
      converseLib.validationFailed(136); /* The end. date can't be less*/
      PC01M010.XXXERRID = "PC01509"; /* Process name*/
    end
  end


end // end PC01509

// EDIT STYLE, COLOR, DIM.
Function PC01510()

   /* ------------------------------------------------------------*/
    /* SEE IF THE DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  if (PC01M010.XDMCD > " ") /* Something there*/
    if (PC01M010.XDMCD in XDMTBL.XDMCD /* Code is in the table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Code is active*/

       /* NEXT SENTENCE*/

    else
      set PC01M010.XDMCD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(53); /* Style/color/dim. invalid*/
      PC01M010.XXXERRID = "PC01510";
    end
  end

   /* ------------------------------------------------------------*/
    /* SEE IF THE STYLE, COLOR, DIM. EXISTS*/
   /* ------------------------------------------------------------*/

  if (PC01M010.SY1STNBR > " " /* Style number*/
   && PC01M010.SY2CLRID > " " /* Color id*/
   && PC01M010.XDMCD > " ")   /* Dim. code*/
    set PG2REC empty; /* Clear record*/
    PG2REC.SY1STNBR = PC01M010.SY1STNBR; /* Style number*/
    PG2REC.SY2CLRID = PC01M010.SY2CLRID; /* Color id*/
    PG2REC.XDMCD = PC01M010.XDMCD; /* Dim. code*/
    PG2REC.XGPCD = PC01M010.XGPCD; /* Gpc code*/

    XSPG202(); /* Get the style name*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

      PC01W01.SY1STNBR = PC01M010.SY1STNBR; /* Style number*/
      PC01W01.SY2CLRID = PC01M010.SY2CLRID; /* Color id*/
      PC01W01.XDMCD = PC01M010.XDMCD; /* Dim. code*/

    else
      set PC01M010.SY1STNBR cursor, bold; /* Style number*/
      set PC01M010.SY2CLRID bold; /* Color id*/
      set PC01M010.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(197); /* Style/color/dim. invalid*/
      PC01M010.XXXERRID = "PC01510";
    end
  else
    if (PC01M010.SY1STNBR > " "  /* Style number*/
     && PC01M010.SY2CLRID == " " /* Color id*/
     && PC01M010.XDMCD == " ")   /* Dim. code*/
      set PG2REC empty; /* Clear record*/
      PG2REC.SY1STNBR = PC01M010.SY1STNBR; /* Style number*/
      PG2REC.XGPCD = PC01M010.XGPCD; /* Gpc code*/

      XSPG201(); /* Get the style name*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/

        PC01W01.SY1STNBR = PC01M010.SY1STNBR; /* Style number*/

      else
        set PC01M010.SY1STNBR cursor, bold; /* Style number*/
        converseLib.validationFailed(52); /* Style color invalid*/
        PC01M010.XXXERRID = "PC01510";
      end
    end
  end

  if (PC01M010.SY1STNBR == " ") /* Style number*/
    if (PC01M010.SY2CLRID == "00" /* Color id*/
     || PC01M010.SY2CLRID == "  " /* Color id*/
     || PC01M010.XDMCD == "00")   /* Dim. code*/

       /* NEXT SENTENCE*/

    else
      set PC01M010.SY2CLRID cursor, bold; /* Color id*/
      set PC01M010.XDMCD bold; /* Dim. code*/
      converseLib.validationFailed(294); /* Style color invalid*/
      PC01M010.XXXERRID = "PC01510";
    end
  end

   /* ----------------------------------------------------------*/
   /* P.O. TYPE*/
   /* ----------------------------------------------------------*/

  if (PC01M010.PC4ORTYP > " ") /* Something there*/

    if (PC01M010.XGPCD != "02"
     || PC01M010.PC4ORTYP != "LP") /* Not of Local Production type*/

      set PC4REC empty; /* Clear record*/
      PC4REC.PC4ORTYP = PC01M010.PC4ORTYP; /* PO type*/
      PC4REC.XGPCD = PC01M010.XGPCD; /* Gpc code*/


      PC01S04(); /* Call Production Order Type Table*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (PC4REC.XXXSTAT == "A") /* Active status*/
          PC01W01.PC4ORTYP = PC4REC.PC4ORTYP; /* PO type*/
        else
          set PC01M010.PC4ORTYP cursor, bold; /* Highlight error*/
          converseLib.validationFailed(33); /* P.O. type invalid*/
          PC01M010.XXXERRID = "PC01510"; /* Process name*/
        end
      else
        set PC01M010.PC4ORTYP cursor, bold; /* Highlight error*/
        converseLib.validationFailed(33); /* P.O. type invalid*/
        PC01M010.XXXERRID = "PC01510"; /* Process name*/
      end
    else /* Local Production type*/
      set PC01M010.PC4ORTYP cursor, bold; /* Highlight error*/
      converseLib.validationFailed(33); /* P.O. type invalid*/
      PC01M010.XXXERRID = "PC01510"; /* Process name*/
    end
  else
    set PC01M010.PC4ORTYP cursor, bold; /* Highlight error*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC01M010.XXXERRID = "PC01510"; /* Process name*/
  end


end // end PC01510

// Second Apparel poid edit
Function PC01511()

   /* ----------------------------------------------------------*/
   /* OPTIONAL P.O. ID FOR APPAREL*/
   /* ----------------------------------------------------------*/

  if (PC01M010.XGPCD == "03") /* Apparel*/
    if (PC01M010.PC01MEYR > "  " /* Something in po id year*/
     || PC01M010.PC01MEPM > "  " /* Something in po id buy month*/
     || PC01M010.PC01MEDM > "  ") /* Something in po id delivery month*/


      /* ------------------------------------------------------------*/
        /* CHECK P.O. ID FOR APPAREL YEAR CODE, BUY MONTH, DEL. MONTH*/
      /* ------------------------------------------------------------*/


      /* ------------------------------------------------------------*/
       /* DELIVERY MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC01M010.PC01MEDM == "01" /* Something there*/
       || PC01M010.PC01MEDM == "02" /* Something there*/
       || PC01M010.PC01MEDM == "03" /* Something there*/
       || PC01M010.PC01MEDM == "04" /* Something there*/
       || PC01M010.PC01MEDM == "05" /* Something there*/
       || PC01M010.PC01MEDM == "06" /* Something there*/
       || PC01M010.PC01MEDM == "07" /* Something there*/
       || PC01M010.PC01MEDM == "08" /* Something there*/
       || PC01M010.PC01MEDM == "09" /* Something there*/
       || PC01M010.PC01MEDM == "10" /* Something there*/
       || PC01M010.PC01MEDM == "11" /* Something there*/
       || PC01M010.PC01MEDM == "12") /* Something there*/

        PC01W01.PC01WTDM = PC01M010.PC01MEDM;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC01M010.XXXERRID = "PC01511"; /* Process name*/
        set PC01M010.PC01MEDM cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* BUY MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC01M010.PC01MEPM == "01" /* Something there*/
       || PC01M010.PC01MEPM == "02" /* Something there*/
       || PC01M010.PC01MEPM == "03" /* Something there*/
       || PC01M010.PC01MEPM == "04" /* Something there*/
       || PC01M010.PC01MEPM == "05" /* Something there*/
       || PC01M010.PC01MEPM == "06" /* Something there*/
       || PC01M010.PC01MEPM == "07" /* Something there*/
       || PC01M010.PC01MEPM == "08" /* Something there*/
       || PC01M010.PC01MEPM == "09" /* Something there*/
       || PC01M010.PC01MEPM == "10" /* Something there*/
       || PC01M010.PC01MEPM == "11" /* Something there*/
       || PC01M010.PC01MEPM == "12") /* Something there*/

        PC01W01.PC01WTBM = PC01M010.PC01MEPM;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC01M010.XXXERRID = "PC01511"; /* Process name*/
        set PC01M010.PC01MEPM cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* DATE CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* No error*/

        set PCFREC empty; /* Clear record*/
        PCFREC.PCFSECD = PC01M010.PC01MEYR; /* P.O. id season cd*/
        PC01W01.PC01WEPM = PC01M010.PC01MEPM; /* Buy month*/
        PCFREC.PCFBUYMO = PC01W01.PC01WEPM; /* Season buy month*/


        PC01S06(); /* P.O. id edit routine for apparel*/


        if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
         && PCFREC.XXXSTAT == "A")   /* Active status*/
          PC01W01.PC01WTYR = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
          PC01W01.PC01WTWY = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
          PC01W01.PCFSECD = PCFREC.PCFSECD; /* P.O. season code*/
          PC01W01.PCFSEYR = PCFREC.PCFSEYR; /* P.O. season year*/
          PC01W01.XSECD = PCFREC.XSECD; /* Season code*/
          PC01W01.PC01WTCC = PC01W01.PC01WTCY; /* P.O. ID cent.*/
          PC01W01.PC01WTYY = PC01W01.PC01WTYE; /* P.O. ID year*/


          /* ------------------------------------------------------------*/
           /* DATE VALIDATION*/
          /* ------------------------------------------------------------*/

          if (converseVar.validationMsgNum == 0) /* No message*/
            set TA2REC empty; /* Clear date record*/
            TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
            TA2REC.TA2GRTYP = "G"; /* Move in date type*/
            TA2REC.TA2GRGG = PC01W01.PC01WTDA; /* Move in date*/

            call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

            if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
              PC01W01.PC01WEDT = TA2REC.TA2GRGGN; /* PO ID date*/
            else
              if (TA2REC.TA2RTNCD == 0222) /* Valid date*/
                set PC01M010.PC01MEYR cursor, bold; /* Highlight error*/
                set PC01M010.PC01MEPM bold; /* Highlight error*/
                converseLib.validationFailed(80); /* Invalid date*/
                PC01M010.XXXERRID = "PC01511"; /* Process name*/
              else
                set PC01M010.PC01MEYR cursor, bold; /* Highlight error*/
                set PC01M010.PC01MEPM bold; /* Highlight error*/
                converseLib.validationFailed(80); /* Invalid date*/
                PC01M010.XXXERRID = "PC01511"; /* Process name*/
              end
            end
          end
        else
          set PC01M010.PC01MEYR cursor, bold; /* Season year*/
          set PC01M010.PC01MEPM bold; /* buy month*/
          converseLib.validationFailed(192); /* P.O. ID season year/or buy month invalid*/
          PC01M010.XXXERRID = "PC01511"; /* Process name*/
        end
      end
    end
  end


end // end PC01511

// PO ID APPAREL CHECK
Function PC01512()

   /* ----------------------------------------------------------*/
   /* P.O. ID FOR APPAREL*/
   /* ----------------------------------------------------------*/

  if (PC01M010.XGPCD == "03") /* Apparel*/
    if (PC01M010.PC01MBYR > "  " /* Something in po id year*/
     || PC01M010.PC01MBPM > "  " /* Something in po id buy month*/
     || PC01M010.PC01MBDM > "  " /* Something in po id delivery month*/
     || PC01M010.FY1FCTYC > "   ") /* Something in po id fcty. code*/
      if (PC01M010.FY1FCTYC > "   ") /* Factory entered*/


        set VFCTY003 empty; /* Clear factory record*/
        VFCTY003.XGPCD = PC01M010.XGPCD; /* Gpc code*/
        VFCTY003.FY1FCTYC = PC01M010.FY1FCTYC; /* Factory code*/


        PC01S01(); /* Validate the factory code*/


        if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
          if (VFCTY003.XXXSTAT == "A") /* Active factory*/
            /* dramse 08/12/98*/
            /* IF VFCTY003.XCTCD NE 'USA';/* Country not usa*/
            if (VFCTY003.FY1FRGN != "N") /* Country not usa*/
              PC01W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
            else
              set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
              converseLib.validationFailed(286); /* Factory code invalid or missimg*/
              PC01M010.XXXERRID = "PC01512"; /* Process name*/
            end
          end
        else
          set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
          converseLib.validationFailed(32); /* Factory code invalid or missimg*/
          PC01M010.XXXERRID = "PC01512"; /* Process name*/
        end
      else
        set PC01M010.FY1FCTYC cursor, bold; /* Factory*/
        converseLib.validationFailed(32); /* Factory invalid or missing*/
        PC01M010.XXXERRID = "PC01512"; /* Process name*/
      end
    else
      set PC01M010.PC01MBYR cursor, bold; /* Season year*/
      set PC01M010.PC01MBPM bold; /* Highlight error*/
      set PC01M010.PC01MBDM bold; /* Highlight error*/
      converseLib.validationFailed(177); /* P.O. ID must be entered*/
      PC01M010.XXXERRID = "PC01512"; /* Process name*/
    end

    /* ------------------------------------------------------------*/
     /* DATE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC01M010.PC01MBDM == "01" /* Something there*/
     || PC01M010.PC01MBDM == "02" /* Something there*/
     || PC01M010.PC01MBDM == "03" /* Something there*/
     || PC01M010.PC01MBDM == "04" /* Something there*/
     || PC01M010.PC01MBDM == "05" /* Something there*/
     || PC01M010.PC01MBDM == "06" /* Something there*/
     || PC01M010.PC01MBDM == "07" /* Something there*/
     || PC01M010.PC01MBDM == "08" /* Something there*/
     || PC01M010.PC01MBDM == "09" /* Something there*/
     || PC01M010.PC01MBDM == "10" /* Something there*/
     || PC01M010.PC01MBDM == "11" /* Something there*/
     || PC01M010.PC01MBDM == "12") /* Something there*/

      PC01W01.PC01WDLM = PC01M010.PC01MBDM;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC01M010.XXXERRID = "PC01512"; /* Process name*/
      set PC01M010.PC01MBDM cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC01M010.PC01MBPM == "01" /* Something there*/
     || PC01M010.PC01MBPM == "02" /* Something there*/
     || PC01M010.PC01MBPM == "03" /* Something there*/
     || PC01M010.PC01MBPM == "04" /* Something there*/
     || PC01M010.PC01MBPM == "05" /* Something there*/
     || PC01M010.PC01MBPM == "06" /* Something there*/
     || PC01M010.PC01MBPM == "07" /* Something there*/
     || PC01M010.PC01MBPM == "08" /* Something there*/
     || PC01M010.PC01MBPM == "09" /* Something there*/
     || PC01M010.PC01MBPM == "10" /* Something there*/
     || PC01M010.PC01MBPM == "11" /* Something there*/
     || PC01M010.PC01MBPM == "12") /* Something there*/

      PC01W01.PC01WBYM = PC01M010.PC01MBPM;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC01M010.XXXERRID = "PC01512"; /* Process name*/
      set PC01M010.PC01MBPM cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
      /* CHECK P.O. ID FOR APPAREL YEAR CODE, BUY MONTH, DEL. MONTH*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No error*/

      set PCFREC empty; /* Clear record*/
      PCFREC.PCFSECD = PC01M010.PC01MBYR; /* P.O. id season cd*/
      PC01W01.PC01WBPM = PC01M010.PC01MBPM; /* Buy month*/
      PCFREC.PCFBUYMO = PC01W01.PC01WBPM; /* Season buy month*/


      PC01S06(); /* P.O. id edit routine for apparel*/


      if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
       && PCFREC.XXXSTAT == "A")   /* Active status*/
        PC01W01.PC01WAYR = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
        PC01W01.PC01WOWY = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
        PC01W01.PCFSECD = PCFREC.PCFSECD; /* P.O. season code*/
        PC01W01.PCFSEYR = PCFREC.PCFSEYR; /* P.O. season year*/
        PC01W01.XSECD = PCFREC.XSECD; /* Season code*/
        PC01W01.PC01WPCC = PC01W01.PC01WACY; /* P.O. ID cent.*/
        PC01W01.PC01WPYR = PC01W01.PC01WAYE; /* P.O. ID year*/

        /* ------------------------------------------------------------*/
         /* DATE VALIDATION*/
        /* ------------------------------------------------------------*/

        if (converseVar.validationMsgNum == 0) /* No message*/
          set TA2REC empty; /* Clear date record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
          TA2REC.TA2GRTYP = "G"; /* Move in date type*/
          TA2REC.TA2GRGG = PC01W01.PC01WODT; /* Move in date*/

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

          if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
            PC01W01.PC01WPDT = TA2REC.TA2GRGGN; /* PO ID date*/
          else
            set PC01M010.PC01MBYR cursor, bold; /* Highlight error*/
            set PC01M010.PC01MBPM bold; /* Highlight error*/
            set PC01M010.PC01MBDM bold; /* Highlight error*/
            converseLib.validationFailed(38); /* Invalid date*/
            PC01M010.XXXERRID = "PC01512"; /* Process name*/
          end
        end
      else
        set PC01M010.PC01MBYR cursor, bold; /* Season year*/
        set PC01M010.PC01MBPM bold; /* buy month*/
        converseLib.validationFailed(192); /* P.O. ID season year/or buy month*/
                                   /* invalid*/
        PC01M010.XXXERRID = "PC01512"; /* Process name*/
      end
    end
  end


end // end PC01512

// Second poid edit
Function PC01513()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF  OPTIONAL P.O. ID ENTERED    FOOTWEAR*/
   /* ------------------------------------------------------------*/

  if (PC01M010.XGPCD == "02") /* FOOTWEAR*/
    if (PC01M010.PC01MEYR > "  " /* Something there*/
     || PC01M010.PC01MEPM > "  " /* Something there*/
     || PC01M010.PC01MEDM > "  ") /* Something there*/

      PC01W01.PCFSECD = " "; /* Blank out season code*/

      /* ------------------------------------------------------------*/
       /* MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC01M010.PC01MEDM == "01" /* Something there*/
       || PC01M010.PC01MEDM == "02" /* Something there*/
       || PC01M010.PC01MEDM == "03" /* Something there*/
       || PC01M010.PC01MEDM == "04" /* Something there*/
       || PC01M010.PC01MEDM == "05" /* Something there*/
       || PC01M010.PC01MEDM == "06" /* Something there*/
       || PC01M010.PC01MEDM == "07" /* Something there*/
       || PC01M010.PC01MEDM == "08" /* Something there*/
       || PC01M010.PC01MEDM == "09" /* Something there*/
       || PC01M010.PC01MEDM == "10" /* Something there*/
       || PC01M010.PC01MEDM == "11" /* Something there*/
       || PC01M010.PC01MEDM == "12") /* Something there*/

        PC01W01.PC01WEDM = PC01M010.PC01MEDM;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC01M010.XXXERRID = "PC01513"; /* Process name*/
        set PC01M010.PC01MEDM cursor, bold; /* Highlight*/
        PC01W01.PC01WEDM = 00;
      end

      /* ------------------------------------------------------------*/
       /* BUY MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC01M010.PC01MEPM == "01" /* Something there*/
       || PC01M010.PC01MEPM == "02" /* Something there*/
       || PC01M010.PC01MEPM == "03" /* Something there*/
       || PC01M010.PC01MEPM == "04" /* Something there*/
       || PC01M010.PC01MEPM == "05" /* Something there*/
       || PC01M010.PC01MEPM == "06" /* Something there*/
       || PC01M010.PC01MEPM == "07" /* Something there*/
       || PC01M010.PC01MEPM == "08" /* Something there*/
       || PC01M010.PC01MEPM == "09" /* Something there*/
       || PC01M010.PC01MEPM == "10" /* Something there*/
       || PC01M010.PC01MEPM == "11" /* Something there*/
       || PC01M010.PC01MEPM == "12") /* Something there*/

        PC01W01.PC01WEPM = PC01M010.PC01MEPM;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC01M010.XXXERRID = "PC01513"; /* Process name*/
        set PC01M010.PC01MEPM cursor, bold; /* Highlight*/
        PC01W01.PC01WEPM = 00;
      end

      /* ------------------------------------------------------------*/
       /* SEE IF NUMMERIC DATA ENTERED BY CHECKING THE DATE*/
      /* ------------------------------------------------------------*/

      PC01W01.PC01WCYR = PC01M010.PC01MEYR; /* Year*/
      PC01W01.PC01WCPM = PC01M010.PC01MEPM; /* Buy month*/
      PC01W01.PC01WCDM = PC01M010.PC01MEDM; /* Del. month*/

      set TA2REC empty; /* Clear record*/
      TA2REC.TA2GRGE = PC01W01.PC01WCAT; /* Ending date*/

      PC01S02(); /* Set up p.o. id date*/

      if (TA2REC.TA2RTNCD == 0000) /* Good return*/

         /* NEXT SENTENCE*/

      end
      if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
        set PC01M010.PC01MEPM bold; /* Highlight*/
        set PC01M010.PC01MEDM bold;
        set PC01M010.PC01MEYR cursor, bold; /* Highlight error*/
        converseLib.validationFailed(313); /* Date is missing*/
        PC01M010.XXXERRID = "PC01513"; /* Process name*/
      end

      /* ------------------------------------------------------------*/
       /* YEAR CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* No message*/
        if (PC01M010.PC01MEYR >= "00"
         && PC01M010.PC01MEYR <= "99")
          PC01W01.PC01WEYR = PC01M010.PC01MEYR;

                                  /* --------Y2K OUT BEGIN--------------*/
  /* PC01W01.PC01WCY1 = PC01W01.PC01WYYY + 1;/* One year greater*/
  /* PC01W01.PC01WCY2 = PC01W01.PC01WYYY - 1;/* One year less*/
  /* ;*/
  /* IF PC01W01.PC01WEYR GE PC01W01.PC01WCY2*/
  /* /* One year less or equal*/
  /* AND PC01W01.PC01WEYR LE PC01W01.PC01WCY1;/* One yr gt or equal*/
                                  /* --------Y2K OUT END----------------*/
                                  /* --------Y2K IN BEGIN---------------*/
          PC01W01.PC01CCYY = PC01M010.PC01MEYR;
          if (PC01M010.PC01MEYR > 60)
            PC01W01.PC01CCYY = PC01W01.PC01CCYY + 1900;
          else
            PC01W01.PC01CCYY = PC01W01.PC01CCYY + 2000;
          end
          PC01W01.PC01WCY1 = PC01W01.PC01WCY + 1; /* One year greater*/
          PC01W01.PC01WCY2 = PC01W01.PC01WCY - 1; /* One year less*/

          if (PC01W01.PC01CCYY >= PC01W01.PC01WCY2
           /* One year less or equal*/
           && PC01W01.PC01CCYY <= PC01W01.PC01WCY1) /* One yr gt or equal*/
                                  /* --------Y2K IN END-----------------*/

             /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
            PC01M010.XXXERRID = "PC01513"; /* Process name*/
            set PC01M010.PC01MEYR cursor, bold; /* Highlight*/
            PC01W01.PC01WEYR = 00;
          end
        else
          converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
          PC01M010.XXXERRID = "PC01513"; /* Process name*/
          set PC01M010.PC01MEYR cursor, bold; /* Highlight*/
          PC01W01.PC01WEYR = 00;
        end


        set TA2REC empty; /* Clear record*/
        TA2REC.TA2GRGE = PC01W01.PC01WEAT; /* Ending date*/

        PC01S02(); /* Set up p.o. id date*/

        if (TA2REC.TA2RTNCD == 0000) /* Good return*/
          PC01W01.PC01WEDT = TA2REC.TA2GRGGN; /* Ending date*/
        end
        if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
          set PC01M010.PC01MEPM bold; /* Highlight*/
          set PC01M010.PC01MEDM bold;
          set PC01M010.PC01MEYR cursor, bold; /* Highlight error*/
          converseLib.validationFailed(313); /* Date is missing*/
          PC01M010.XXXERRID = "PC01513"; /* Process name*/
        end
      end
    end
  end


end // end PC01513

// do detail edits
Function PC01514()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC01M010.XGPCD == "02") /* Footwear*/
    if (PC01M010.PC01MBYR == "  " /* Nothing there*/
     && PC01M010.PC01MBPM == "  " /* Nothing there*/
     && PC01M010.PC01MBDM == "  ") /* Nothing there*/
      set PC01M010.PC01MBYR cursor, bold; /* Highlight error*/
      converseLib.validationFailed(177); /* Date is missing*/
      PC01M010.XXXERRID = "PC01514"; /* Process name*/
      return; /* Return to previous process*/
    end


    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Fetch the row from the factory set.*/
     /* If any error, indicate a system error.*/
     /* Format the data in the temporary storage display line.*/
    /* ------------------------------------------------------------*/

    if (PC01M010.FY1FCTYC == " ") /* Nothing there*/

      converseLib.validationFailed(32); /* Must enter*/
      set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC01W01.FY1FCTYC = " "; /* Factory code*/
      PC01M010.XXXERRID = "PC01514"; /* Process name*/

    else
      set VFCTY003 empty; /* Clear record*/
      VFCTY003.FY1FCTYC = PC01M010.FY1FCTYC; /* Search key fcty code*/
      VFCTY003.XGPCD = PC01M010.XGPCD; /* Search key gpc code*/


      PC01S01(); /* Call factory check routine*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        if (VFCTY003.XXXSTAT == "A") /* Everything OK*/
          /* dramse 08/12/98*/
          /* IF VFCTY003.XCTCD NE 'USA';/* Everything OK*/
          if (VFCTY003.FY1FRGN != "N") /* Everything OK*/
            PC01W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
          else
            converseLib.validationFailed(286); /* Invalid factory*/
            PC01M010.XXXERRID = "PC01514"; /* Process name*/
            set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
            PC01W01.FY1FCTYC = " "; /* Factory code*/
          end
        else
          converseLib.validationFailed(32); /* Invalid factory*/
          PC01M010.XXXERRID = "PC01514"; /* Process name*/
          set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
          PC01W01.FY1FCTYC = " "; /* Factory code*/
        end
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC01M010.XXXERRID = "PC01514"; /* Process name*/
        set PC01M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC01W01.FY1FCTYC = " "; /* Factory code*/
      end
    end

    PC01W01.PCFSECD = " "; /* Blank out season code*/

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC01M010.PC01MBDM == "01" /* Something there*/
     || PC01M010.PC01MBDM == "02" /* Something there*/
     || PC01M010.PC01MBDM == "03" /* Something there*/
     || PC01M010.PC01MBDM == "04" /* Something there*/
     || PC01M010.PC01MBDM == "05" /* Something there*/
     || PC01M010.PC01MBDM == "06" /* Something there*/
     || PC01M010.PC01MBDM == "07" /* Something there*/
     || PC01M010.PC01MBDM == "08" /* Something there*/
     || PC01M010.PC01MBDM == "09" /* Something there*/
     || PC01M010.PC01MBDM == "10" /* Something there*/
     || PC01M010.PC01MBDM == "11" /* Something there*/
     || PC01M010.PC01MBDM == "12") /* Something there*/

      PC01W01.PC01WBDM = PC01M010.PC01MBDM;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC01M010.XXXERRID = "PC01514"; /* Process name*/
      set PC01M010.PC01MBDM cursor, bold; /* Highlight*/
      PC01W01.PC01WBDM = 00;
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC01M010.PC01MBPM == "01" /* Something there*/
     || PC01M010.PC01MBPM == "02" /* Something there*/
     || PC01M010.PC01MBPM == "03" /* Something there*/
     || PC01M010.PC01MBPM == "04" /* Something there*/
     || PC01M010.PC01MBPM == "05" /* Something there*/
     || PC01M010.PC01MBPM == "06" /* Something there*/
     || PC01M010.PC01MBPM == "07" /* Something there*/
     || PC01M010.PC01MBPM == "08" /* Something there*/
     || PC01M010.PC01MBPM == "09" /* Something there*/
     || PC01M010.PC01MBPM == "10" /* Something there*/
     || PC01M010.PC01MBPM == "11" /* Something there*/
     || PC01M010.PC01MBPM == "12") /* Something there*/

      PC01W01.PC01WBPM = PC01M010.PC01MBPM;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC01M010.XXXERRID = "PC01514"; /* Process name*/
      set PC01M010.PC01MBPM cursor, bold; /* Highlight*/
      PC01W01.PC01WBPM = 00;
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    PC01W01.PC01WCYR = PC01M010.PC01MBYR;
    PC01W01.PC01WCPM = PC01M010.PC01MBPM;
    PC01W01.PC01WCDM = PC01M010.PC01MBDM;

    set TA2REC empty; /* Clear record*/
    TA2REC.TA2GRGE = PC01W01.PC01WCAT; /* Beg. date*/

    PC01S02(); /* Set up p.o. id date*/

    if (TA2REC.TA2RTNCD == 0000) /* Good return*/

      PC01W01.PC01WPDT = TA2REC.TA2GRGGN; /* Beg. date*/

    end

    if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
      set PC01M010.PC01MBPM bold; /* Highlight*/
      set PC01M010.PC01MBDM bold;
      set PC01M010.PC01MBYR cursor, bold; /* Highlight error*/
      converseLib.validationFailed(313); /* Date is missing*/
      PC01M010.XXXERRID = "PC01514"; /* Process name*/
    end

    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC01M010.PC01MBYR >= "00"
       && PC01M010.PC01MBYR <= "99")
        PC01W01.PC01WBYR = PC01M010.PC01MBYR;

        /* ---------Y2K OUT BEGIN----------*/
        /* PC01W01.PC01WCY1 = PC01W01.PC01WYYY + 1; /* One year greater*/
        /* PC01W01.PC01WCY2 = PC01W01.PC01WYYY - 1; /* One year less*/
        /* ;*/
                                  /* IF PC01W01.PC01WBYR GE*/
                                   /* PC01W01.PC01WCY2  /* One year less or*/
                                   /* equal*/
                                  /* AND PC01W01.PC01WBYR LE*/
                                   /* PC01W01.PC01WCY1; /* One yr gt or*/
                                   /* equal*/
        /* ---------Y2K OUT END------------*/
                           /* --------Y2K IN BEGIN---------------*/
        PC01W01.PC01CCYY = PC01M010.PC01MBYR;
        if (PC01M010.PC01MBYR > 60)
          PC01W01.PC01CCYY = PC01W01.PC01CCYY + 1900;
        else
          PC01W01.PC01CCYY = PC01W01.PC01CCYY + 2000;
        end
        PC01W01.PC01WCY1 = PC01W01.PC01WCY + 1; /* One year greater*/
        PC01W01.PC01WCY2 = PC01W01.PC01WCY - 1; /* One year less*/

        if (PC01W01.PC01CCYY >= PC01W01.PC01WCY2
         /* One year less or equal*/
         && PC01W01.PC01CCYY <= PC01W01.PC01WCY1) /* One yr gt or equal*/
                           /* --------Y2K IN END-----------------*/

           /* NEXT SENTENCE*/

        else
          converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
          PC01M010.XXXERRID = "PC01514"; /* Process name*/
          set PC01M010.PC01MBYR cursor, bold; /* Highlight*/
          PC01W01.PC01WBYR = 00;
        end
      else
        converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
        PC01M010.XXXERRID = "PC01514"; /* Process name*/
        set PC01M010.PC01MBYR cursor, bold; /* Highlight*/
        PC01W01.PC01WBYR = 00;
      end
    end
  end


end // end PC01514

// do more detail edits
Function PC01515()

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF THE BEG. POID IS LT THE END. POID*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No errors*/
    if (PC01M010.PC01MEYR > " ") /* End. year entered*/
      if (PC01W01.PC01WPDT <= PC01W01.PC01WEDT)

          /* NEXT SENTENCE*/

      else
        converseLib.validationFailed(136);
        set PC01M010.PC01MBYR cursor, bold; /* Highlight*/
        PC01M010.XXXERRID = "PC01515"; /* Process name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF PO ID DATE HAS A PO. FOR FOOTWEAR*/
   /* ------------------------------------------------------------*/

  if (PC01M010.XGPCD != "03")
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set VPOHDR02 empty; /* Clear record*/
      set PCYREC empty; /* Clear record*/

      PCYREC.PCYFUNC = "SE";
      PCYREC.PCYFRDT = PC01W01.PC01WPDT; /* PO ID from date*/

      if (PC01M010.PC01MEYR > " ") /* Something there*/
        PCYREC.PCYTODT = PC01W01.PC01WEDT; /* PO ID to date*/
      else
        PCYREC.PCYTODT = PC01W01.PC01WPDT; /* PO ID to date*/
        PC01W01.PC01WEDT = PC01W01.PC01WPDT; /* PO ID to date*/
      end

      VPOHDR02.FY1FCTYC = PC01M010.FY1FCTYC;

      VPOHDR02.XGPCD = PC01M010.XGPCD; /* Gpc code*/
      VPOHDR02.PO-REG-CD = PC01W01.PO-REG-CD; /* po region*/
      VPOHDR02.PCFSECD = PC01W01.PCFSECD; /* Season code*/
      VPOHDR02.PC4ORTYP = PC01M010.PC4ORTYP; /* PO type code*/
      VPOHDR02.PC3POIDT = PC01W01.PC01WPDT; /* PO ID date*/


      PC01S05(); /* Call po header*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

        if (PCYREC.PCYCOUNT == 0)
          converseLib.validationFailed(111);
          set PC01M010.PC01MBYR cursor, bold; /* Highlight*/
          set PC01M010.PC01MBPM bold; /* Highlight*/
          set PC01M010.PC01MBDM bold; /* Highlight*/
          set PC01M010.FY1FCTYC bold; /* Highlight*/
          set PC01M010.PC01MEYR bold; /* Highlight*/
          set PC01M010.PC01MEPM bold; /* Highlight*/
          set PC01M010.PC01MEDM bold; /* Highlight*/
          set PC01M010.PC4ORTYP bold; /* Highlight error*/
          PC01M010.XXXERRID = "PC01515"; /* Process name*/
        end

      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

          converseLib.validationFailed(18); /* No row found*/
          set PC01M010.PC01MBYR cursor, bold; /* Highlight*/
          set PC01M010.PC01MBPM bold; /* Highlight*/
          set PC01M010.PC01MBDM bold; /* Highlight*/
          set PC01M010.PC01MEYR bold; /* Highlight*/
          set PC01M010.PC01MEPM bold; /* Highlight*/
          set PC01M010.PC01MEDM bold; /* Highlight*/
          set PC01M010.PC4ORTYP bold; /* Highlight error*/
          PC01M010.XXXERRID = "PC01515"; /* Process name*/

        end
      end
    end
  end
end // end PC01515

// do parm. edit
Function PC01520()

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC01WTB1.XGPCD = PC01M010.XGPCD; /* Gpc code*/
    PC01WTB1.PC01WFDT = PC01W01.PC01WPDT; /* PO ID*/
    PC01WTB1.FY1FCTYC = PC01W01.FY1FCTYC; /* Factory*/
    PC01WTB1.PC01WTDT = PC01W01.PC01WEDT; /* PO ID*/
    PC01WTB1.PCFSECD = PC01W01.PCFSECD; /* PO season code*/
    PC01WTB1.PC4ORTYP = PC01W01.PC4ORTYP; /* PO type*/
    PC01WTB1.SY1STNBR = PC01W01.SY1STNBR; /* style number*/
    PC01WTB1.SY2CLRID = PC01W01.SY2CLRID; /* color id*/
    PC01WTB1.XDMCD = PC01W01.XDMCD; /* dim. code*/
    PC01WTB1.PC01WBDE = PC01W01.PC01WBDE; /* begin date*/
    PC01WTB1.PC01WEDE = PC01W01.PC01WEDE; /* end   date*/
    PC01WTB1.PC01WRFL = "1"; /* pgm req flag*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS ARE ALREADY SET*/
    /* ------------------------------------------------------------*/


    if (PC01WTB1.PC01WGRP in PC01WTB2.PC01WTBG) /* Parm in table*/
      set PC01M010.SY1STNBR cursor; /* set cursor*/
      converseLib.validationFailed(241); /* Parm already in table*/
      XXXERRID = "PC01520"; /* Process name*/
      return; /* Return to previous process*/
    end
    if (PC01WTB1.PC01WFDT in PC01WTB2.PC01WFDT) /* From PO ID*/
      PC01W01.PC01WLIX = sysVar.arrayIndex; /* Set index*/
      while (PC01W01.PC01WLIX != PC01W01.PC01WMAX
       && PC01WTB2.XGPCD[PC01WLIX] > " ") /* Something in row*/
        if (PC01M010.SY1STNBR > " ")
          if (PC01WTB2.SY1STNBR[PC01WLIX] == " ") /* No Style entered*/
            set PC01M010.SY1STNBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(292); /* Parm already in table*/
            XXXERRID = "PC01520"; /* Process name*/
            return; /* Return to previous process*/
          end
          if (PC01M010.SY1STNBR == " "
           && PC01WTB2.SY1STNBR[PC01WLIX] > " ") /* Some style entered*/
            set PC01M010.SY1STNBR cursor, bold; /* Highlight*/
            converseLib.validationFailed(293); /* Parm already in table*/
            XXXERRID = "PC01520"; /* Process name*/
            return; /* Return to previous process*/
          end
          if (PC01M010.SY1STNBR == PC01WTB2.SY1STNBR[PC01WLIX]
           && PC01M010.SY2CLRID == PC01WTB2.SY2CLRID[PC01WLIX]
           && PC01M010.XDMCD == PC01WTB2.XDMCD[PC01WLIX])
            set PC01M010.SY1STNBR cursor, bold; /* Highlight*/
            set PC01M010.SY2CLRID bold;
            set PC01M010.XDMCD bold;
            converseLib.validationFailed(255); /* Parm already in table*/
            XXXERRID = "PC01520"; /* Process name*/
            return; /* Return to previous process*/
          end
        end
        PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment index*/
      end
    end
  end


end // end PC01520

// PROCESS THE ENTERED DATA
Function PC01600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/

    PC01610(); /* Save parms.*/

  else

    if (converseVar.eventKey is pf9 /* PF9 pressed*/
     && PC01WTB2.XGPCD[1] > " ")   

      if (PC01M010.XGPCD == "02")
        if (VFCTY003.FY-FCTY-TYP-CD == "F") /* for footwear factories*/
          if (PC01M010.PC01MJFL == "N") /* Not for japan POs*/
            if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
              PC01620(); /* format production jcl for ftwr*/
            else
              PC01621(); /* format development jcl for ftwr*/
            end
          else
            if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
              PC01622(); /* format prod jcl for japan ftwr*/
            else
              PC01623(); /* format devl jcl for japan ftwr*/
            end
          end
        end

        if (VFCTY003.FY-FCTY-TYP-CD == "E") /* for Equipment factories*/
          if (PC01M010.PC01MJFL == "N")
            if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
              PC01640(); /* format production jcl for Equip*/
            else
              PC01641(); /* format development jcl for Equip*/
            end
          else
            if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
              PC01642(); /* format prod jcl for japan Equip*/
            else
              PC01643(); /* format devl jcl for japan Equip*/
            end
          end
        end
      end

      if (PC01M010.XGPCD == "03")
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          PC01630(); /* format production jcl for aprl*/
        else
          PC01631(); /* format development jcl for aprl*/
        end
      end

      PC01W01.PC01WLIX = 0;
      PC01W01.PC01WAIX = 0;
      PC01W01.PC01WMAX = 50;

      set PC01WTB1 empty;
      set PC01WTB2 empty;
      set PC01M010 initial; /* CLear map*/

      if (PC01W01.XGPCD == "02") /* Footwear*/
        PC01M010.XGPCD = "02";
        PC01M010.XGPDESC = "FOOTWEAR";
        PC01M010.PC4ORTYP = "FT";
        PC01M010.XDMCD = "00"; /* Dimension code*/
        PC01M010.SY2CLRID = "00"; /* Color id*/
        PC01M010.PC01MJFL = "N"; /* Japan POs flag*/
        PC01W01.XDMCD = "00"; /* Dimension code*/
        PC01W01.SY2CLRID = "00"; /* Color id*/
      else
        if (PC01W01.XGPCD == "03") /* Footwear*/
          PC01M010.XGPCD = "03";
          PC01M010.XGPDESC = "APPAREL";
          PC01M010.XDMCD = "00"; /* Dimension code*/
          PC01W01.XDMCD = "00"; /* Dimension code*/
          PC01M010.SY2CLRID = "  "; /* Color id*/
          PC01W01.SY2CLRID = "  "; /* Color id*/
        end
      end

      PC01M010.SY1STNBR = "  "; /* Style number*/
      PC01W01.SY1STNBR = "  "; /* Style number*/
      set PC01M010.PC4ORTYP initialAttributes;

    else
      converseLib.validationFailed(17); /* Must have some parms. to pass*/
      PC01M010.XXXERRID = "PC01600"; /* Process name*/
    end
  end


end // end PC01600

// save the parameters
Function PC01610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC01W01.PC01WAIX = PC01W01.PC01WAIX + 1; /* Add 1 to index*/
    PC01WTB2.XGPCD[PC01WAIX] = PC01M010.XGPCD; /* Gpc code*/
    PC01WTB2.PC01WFDT[PC01WAIX] = PC01W01.PC01WPDT; /* PO ID*/
    PC01WTB2.FY1FCTYC[PC01WAIX] = PC01W01.FY1FCTYC; /* Factory*/
    PC01WTB2.PC01WTDT[PC01WAIX] = PC01W01.PC01WEDT; /* PO ID*/
    if (PC01M010.XGPCD == "03") /* Gpc code = apparel*/
      PC01WTB2.PCFSECD[PC01WAIX] = PC01W01.PCFSECD; /* Season code*/
    else
      PC01WTB2.PCFSECD[PC01WAIX] = " "; /* Season code*/
    end
    PC01WTB2.PC4ORTYP[PC01WAIX] = PC01W01.PC4ORTYP; /* P.O. type*/
    PC01WTB2.SY1STNBR[PC01WAIX] = PC01W01.SY1STNBR; /* Style nbr.*/
    PC01WTB2.SY2CLRID[PC01WAIX] = PC01W01.SY2CLRID; /* Color*/
    PC01WTB2.XDMCD[PC01WAIX] = PC01W01.XDMCD; /* Dim. code*/
    PC01WTB2.PC01WBDE[PC01WAIX] = PC01W01.PC01WBDE; /* begin date*/
    PC01WTB2.PC01WEDE[PC01WAIX] = PC01W01.PC01WEDE; /* end date*/
    PC01WTB2.PC01WRFL[PC01WAIX] = "1"; /* pgm req flag*/
    converseLib.validationFailed(253); /* Parm. Entered*/

    if (PC01W01.PC01WAIX == 10) /* Max amount for table*/
      converseLib.validationFailed(240); /* Max amount reached*/
      PC01M010.XXXERRID = "PC01610"; /* Process name*/
    end

  end


end // end PC01610

// submit the jcl
Function PC01620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T01.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S08(); /* format jcl lines*/

      end

      PC01S09(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01620

// submit the jcl
Function PC01621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T11.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S88(); /* format jcl lines*/

      end

      PC01S99(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01621

// submit the jcl
Function PC01622()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T04.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S13(); /* format jcl lines*/

      end

      PC01S14(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01622

// submit the jcl
Function PC01623()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T44.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S23(); /* format jcl lines*/

      end

      PC01S24(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01623

// DO ANY EXCEPTIONS
Function PC01630()
   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T02.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S18(); /* format jcl lines*/

      end

      PC01S19(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01630

Function PC01631()
   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T22.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S28(); /* format jcl lines*/

      end

      PC01S29(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01631

// submit the jcl
Function PC01640()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T03.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S11(); /* format jcl lines*/

      end

      PC01S12(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01640

// submit the jcl
Function PC01641()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T33.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S21(); /* format jcl lines*/

      end

      PC01S22(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01641

// submit the jcl
Function PC01642()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T05.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S15(); /* format jcl lines*/

      end

      PC01S16(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01642

// submit the jcl
Function PC01643()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC01WTB2.PC01WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC01W01.PC01WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC01W01.PC01WAIX = 0; /* Initialize index*/
    PC01W01.PC01WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC01W01.PC01WLIX > 0) /* Until end of table*/
      if (PC01T55.TARTYPE[PC01WLIX] == "P") /* Parameters statement*/

        PC01S07(); /* format parameters*/

      else

        PC01S25(); /* format jcl lines*/

      end

      PC01S26(); /* increment table index*/

    end

    PC01S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    else
      PC01W01.PC01WPDT = 0;
      PC01W01.PC01WEDT = 0;
      PC01W01.PC01WBDE = 0;
      PC01W01.PC01WEDE = 0;
      PC01W01.SY1STNBR = " ";
      PC01W01.SY2CLRID = " ";
      PC01W01.XDMCD = " ";
      set PC01M010 empty; /* Clear parameter table*/
      set PC01WTB2 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC01643

// SELECT FACTORY ROW
Function PC01S01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "S "; /* Move in function*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC01"; /* Process name*/
  TA1REC.TA1LOC = "PC01S01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC01M010.XXXERRID = "PC01S01"; /* Process name*/

  exit stack;


end // end PC01S01

// call ta0040 for date edit
Function PC01S02()

   /* ----------------------------------------------------------*/
   /* Calll Ta0040 for date edit*/
   /* ----------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000 /* Valid date*/
     || TA2REC.TA2RTNCD == 0222) /* Invalid date*/

      return; /* Return to previous process*/

    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC01S02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC01M010.XXXERRID = "PC01S02"; /* Process name*/

    end
  end


end // end PC01S02

// TRANSFER TO TA0P
Function PC01S03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS Job completed message*/

  TA6-MAX-COND-CODE = 02; /* 00 and 02 are normal eoj codes*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    set PC01WTB2 empty;
    converseLib.validationFailed(190); /* Job submitted to reader*/
    PC01M010.XXXERRID = "PC01S03"; /* Process name*/
    PC01M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
    set PC01M010 alarm; /* ===> set alarm*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PC01WTB2 empty;
    PC01M010.XXXERRID = "PC01S03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    PC01M010.XXXERRID = "PC01S03"; /* Process name*/
    exit stack;

  end


end // end PC01S03

// SELECT PO TYPE ROW
Function PC01S04()

   /* ------------------------------------------------------------*/
   /* Select a unique p.o. type row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC01"; /* Program name*/
  TA1REC.TA1LOC = "PC01S04 SELECT UNIQUE P.O. TYPE ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC01M010.XXXERRID = "PC01S04"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC01S04

// CHECK PO HEADER ROW
Function PC01S05()

   /* ------------------------------------------------------------*/
   /* P.O. ID date CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the po header set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC01"; /* Process name*/
  TA1REC.TA1LOC = "PC01S05 SELECT COUNT P.O. HEADER ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC01M010.XXXERRID = "PC01S05"; /* Process name*/

  exit stack;


end // end PC01S05

// TRANSLATE APPAREL PO ID
Function PC01S06()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC01"; /* Process name*/
  TA1REC.TA1LOC = "PC01S06 P.O. ID EDIT FOR APPAREL  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC01M010.XXXERRID = "PC01S06"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC01S06

// Format JCL Parameter Cards
Function PC01S07()

   /* ------------------------------------------------------------*/
   /* Format parameters*/
   /* ------------------------------------------------------------*/

  PC01W02.PC01WTYP = "P"; /* Type*/
  PC01W01.PC01WIX3 = 1; /* Move 1 to array index*/

  while (PC01W01.PC01WIX3 <= PC01W01.PC01WMAX) /* LE max for table*/
    if (PC01WTB2.PC01WTBG[PC01WIX3] > "0")

      TA6REC.TA6ROW[TA6INDEX] = PC01WTB2.PC01WTBG[PC01WIX3];
      TA6REC.TARTYPE[TA6INDEX] = PC01W02.PC01WTYP; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Add 1 to index*/
    else
      PC01W01.PC01WIX3 = PC01W01.PC01WMAX; /* Set index to 10*/
    end
    PC01W01.PC01WIX3 = PC01W01.PC01WIX3 + 1; /* Add 1 to array idx*/
  end
end // end PC01S07

// Format JCL Cards
Function PC01S08()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T01.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T01.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T01.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S08

// Increment JCL Index
Function PC01S09()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T01.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S09

// Format JCL Cards
Function PC01S11()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T03.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T03.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T03.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S11

// Increment JCL Index
Function PC01S12()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T03.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S12

// Format JCL Cards
Function PC01S13()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T04.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T04.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T04.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S13

// Increment JCL Index
Function PC01S14()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T04.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S14

// Format JCL Cards
Function PC01S15()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T05.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T05.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T05.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S15

// Increment JCL Index
Function PC01S16()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T05.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S16

Function PC01S18()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T02.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T02.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T02.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S18

Function PC01S19()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T02.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S19

// Format JCL Cards
Function PC01S21()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T33.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T33.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T33.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S21

// Increment JCL Index
Function PC01S22()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T33.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S22

// Format JCL Cards
Function PC01S23()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T44.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T44.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T44.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S23

// Increment JCL Index
Function PC01S24()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T44.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S24

// Format JCL Cards
Function PC01S25()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T55.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T55.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T55.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S25

// Increment JCL Index
Function PC01S26()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T55.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S26

Function PC01S28()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T22.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T22.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T22.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S28

Function PC01S29()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T22.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S29

// Format JCL Cards
Function PC01S88()
   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC01T11.TARJCL[PC01WLIX] == "            /*EOF" /* End of table*/
   && PC01W01.PC01WLIX == PC01W01.PC01WMAX)   

    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* increment index*/

  else

    TA6REC.TARJCL[TA6INDEX] = PC01T11.TARJCL[PC01WLIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC01T11.TARTYPE[PC01WLIX];
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

  end
end // end PC01S88

// Increment JCL Index
Function PC01S99()
   /* ------------------------------------------------------------*/
   /* If not end of table, increment the table index.*/
   /* ------------------------------------------------------------*/

  if (PC01T11.TARJCL[PC01WLIX] == "/*EOF") /* End of table*/
    if (PC01W01.PC01WLIX == PC01W01.PC01WMAX) /* JCL lines*/

       /* NEXT SENTENCE*/

    else
      PC01W01.PC01WLIX = 0; /* Indicate end of table*/
    end
  else
    PC01W01.PC01WLIX = PC01W01.PC01WLIX + 1; /* Increment table index*/
  end
end // end PC01S99

//*** RECORD=PC01W01 ****
// ************************************************************
// *
// *   WORKING STORAGE FOR PROGRAM PC01
// *
// *   DATE             USERID       COMMENTS
// * --------          --------     -----------------------
// * 10/03/89          gwitzi       new record
// *
// ************************************************************
// ***********************
Record PC01W01 type basicRecord
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCFSECD PCFSECD ; 
  10 PCFSEYR PCFSEYR ; 
  10 XSECD XSECD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC01WODT PC01WODT ; 
    15 PC01WOWY PC01WOWY ; 
      20 PC01WPCC PC01WPCC ; 
      20 PC01WPYR PC01WPYR ; 
    15 PC01WBYM PC01WBYM ; 
    15 PC01WDLM PC01WDLM ; 
  10 PC01WTDA PC01WTDA ; 
    15 PC01WTWY PC01WTWY ; 
      20 PC01WTCC PC01WTCC ; 
      20 PC01WTYY PC01WTYY ; 
    15 PC01WTBM PC01WTBM ; 
    15 PC01WTDM PC01WTDM ; 
  10 PC01WZDA PC01WZDA ; 
    15 PC01WZWY PC01WZWY ; 
      20 PC01WZCC PC01WZCC ; 
      20 PC01WZYY PC01WZYY ; 
    15 PC01WZBM PC01WZBM ; 
    15 PC01WZDM PC01WZDM ; 
  10 PC01WAYR PC01WAYR ; 
    15 PC01WACY PC01WACY ; 
    15 PC01WAYE PC01WAYE ; 
  10 PC01WTYR PC01WTYR ; 
    15 PC01WTCY PC01WTCY ; 
    15 PC01WTYE PC01WTYE ; 
  10 PC01WPDT PC01WPDT ; 
  10 PC01WEDT PC01WEDT ; 
  10 PC01WBAT PC01WBAT ; 
    15 PC01WBYR PC01WBYR ; 
    15 PC01WBPM PC01WBPM ; 
    15 PC01WBDM PC01WBDM ; 
  10 PC01WEAT PC01WEAT ; 
    15 PC01WEYR PC01WEYR ; 
    15 PC01WEPM PC01WEPM ; 
    15 PC01WEDM PC01WEDM ; 
  10 PC01WCAT PC01WCAT ; 
    15 PC01WCYR PC01WCYR ; 
    15 PC01WCPM PC01WCPM ; 
    15 PC01WCDM PC01WCDM ; 
  10 PC01WCY1 PC01WCY1 ; 
  10 PC01WCY2 PC01WCY2 ; 
  10 PC01WCDT PC01WCDT ; 
    15 PC01WCY PC01WCY ; 
      20 PC01WCCC PC01WCCC ; 
      20 PC01WYYY PC01WYYY ; 
    15 PC01WMMM PC01WMMM ; 
    15 PC01WDDD PC01WDDD ; 
  10 PC01WLIX PC01WLIX ; 
  10 PC01WAIX PC01WAIX ; 
  10 PC01WIX3 PC01WIX3 ; 
  10 PC01WMAX PC01WMAX ; 
  10 PC01WLTC PC01WLTC ; 
  10 PC01WBDE PC01WBDE ; 
  10 PC01WBDA PC01WBDA ; 
    15 PC01WBYY PC01WBYY ; 
    15 PC01WBMM PC01WBMM ; 
    15 PC01WBDD PC01WBDD ; 
  10 PC01WEDE PC01WEDE ; 
  10 PC01WEDA PC01WEDA ; 
    15 PC01WEYY PC01WEYY ; 
    15 PC01WEMM PC01WEMM ; 
    15 PC01WEDD PC01WEDD ; 
  10 PC01CCYY PC01CCYY ; 
end // end PC01W01

//*** RECORD=PC01W02 ****
// ************************************************************
// *
// *    JCL SET UP RECORD
// *
// ************************************************************
// ***********************
Record PC01W02 type basicRecord
  10 PC01WJCE PC01WJCE ; 
    15 PC01WEX1 PC01WEX1 ; 
    15 PC01WPNM PC01WPNM ; 
    15 * char(58) ; 
  10 PC01WJCP PC01WJCP ; 
  10 PC01WTYP PC01WTYP ; 
  10 PC01WOVR PC01WOVR [5] ; 
    15 * char(4) ; 
    15 PC01WCMM PC01WCMM ; 
    15 * char(12) ; 
  10 PC01WJCC PC01WJCC [5] ; 
    15 * char(22) ; 
    15 PC01WCLG PC01WCLG ; 
    15 * char(41) ; 
end // end PC01W02

//*** RECORD=PC01WTB1 ****
// ************************************************************
// *
// *  PARMAMETER COMPARISION RECORD
// *
// ************************************************************
// ************************
Record PC01WTB1 type basicRecord
  10 PC01WGRP PC01WGRP ; 
    15 XGPCD XGPCD ; 
    15 PC01WFDT PC01WFDT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(4) ; 
    15 PC01WTDT PC01WTDT ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(2) ; 
    15 PC01WBDE PC01WBDE ; 
    15 PC01WEDE PC01WEDE ; 
    15 PC01WRFL PC01WRFL ; 
    15 * char(16) ; 
end // end PC01WTB1

//*** RECORD=PC01WTB2 ****
// ************************************************************
// *
// *   PARAMETER HOLDING RECORD
// *
// ************************************************************
// ************************
Record PC01WTB2 type basicRecord
  10 PC01WTBG PC01WTBG [50] ; 
    15 XGPCD XGPCD ; 
    15 PC01WFDT PC01WFDT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(4) ; 
    15 PC01WTDT PC01WTDT ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 * char(2) ; 
    15 PC01WBDE PC01WBDE ; 
    15 PC01WEDE PC01WEDE ; 
    15 PC01WRFL PC01WRFL ; 
    15 * char(16) ; 
end // end PC01WTB2

//          day
DataItem PC01CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem PC01WACY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PC01WAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC01WAYE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apparel buy yr beg.
DataItem PC01WAYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC01WBAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beg. working date alphanumeric
DataItem PC01WBDA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC01WBDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beg. working date numeric
DataItem PC01WBDE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id delivery month
DataItem PC01WBDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          month
DataItem PC01WBMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month
DataItem PC01WBPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC01WBYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id year
DataItem PC01WBYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC01WBYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date end.
DataItem PC01WCAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          centry
DataItem PC01WCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id delivery month end.
DataItem PC01WCDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date
DataItem PC01WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition logic
DataItem PC01WCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PC01WCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month end.
DataItem PC01WCPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC01WCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date +1
DataItem PC01WCY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PC01WCY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id year end.
DataItem PC01WCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC01WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delivery mo
DataItem PC01WDLM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working date end.
DataItem PC01WEAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End  working date alphanumeric
DataItem PC01WEDA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC01WEDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End  working date numeric
DataItem PC01WEDE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id delivery month end.
DataItem PC01WEDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id date end.
DataItem PC01WEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC01WEMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month end.
DataItem PC01WEPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// execute stat. constants
DataItem PC01WEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id year end.
DataItem PC01WEYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC01WEYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po date range beg.
DataItem PC01WFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table group
DataItem PC01WGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PC01WIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement
DataItem PC01WJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PC01WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PC01WJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem PC01WLIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Less than condidition override
DataItem PC01WLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. max.
DataItem PC01WMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC01WMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC PO date
DataItem PC01WODT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// override statement
DataItem PC01WOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC centry/year
DataItem PC01WOWY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//       centry
DataItem PC01WPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id date beg.
DataItem PC01WPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program name
DataItem PC01WPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC01WPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request flag pc0'1'
DataItem PC01WRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table row
DataItem PC01WTBG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC01WTBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//       centry
DataItem PC01WTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc
DataItem PC01WTCY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC PO date end.
DataItem PC01WTDA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// delivery mo
DataItem PC01WTDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po date range end.
DataItem PC01WTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC centry/year
DataItem PC01WTWY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC01WTYE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl type
DataItem PC01WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apparel buy yr end.
DataItem PC01WTYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC01WTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC01WYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC01WZBM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//       centry
DataItem PC01WZCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC PO date end.
DataItem PC01WZDA char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery mo
DataItem PC01WZDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC centry/year
DataItem PC01WZWY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC01WZYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

