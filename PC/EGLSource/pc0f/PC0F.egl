package pc0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0F ****
// This program will allow the user to inquire/maintain
// customer special instruction information. The database
// will return 0 to n rows based upon the selection criteria.
// This program will format the screen with the data returned
// from the database.
// 
// This program enables the user to inquiry, add, change, or
// copy customer special instruction rows.  The copy request
// allows the user to modify then copy the customer special
// instruction row to the p.o. item special instruction
// database.
// 
//   A user can select customer special instruction rows
// for inquiry by general product group and customer xref code,
// or general product group, customer xref code, and
// special instruction type.  By pressing ENTER the data
// will be displayed for viewing.
// 
//   A user may add new rows by pressing PF13 from the list
// screen (blank or filled with rows).  This will position
// them in an ADD screen.  A row can then be added ( if
// entries pass edit criteria) by pressing ENTER.  The user
// may continue adding or exit to the list screen.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(non-key data only)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
//   A user may select one or more rows for copy and press
// ENTER.  The user will then be positioned in a COPY screen
// where they can make their changes to non-key fields and
// hit ENTER to cycle to the next row selected, or, PF3 to
// return to the list screen.
// 
// -------   --------  --------    ----------------------------
// control     date     userid     description
// -------   --------  --------    ----------------------------
//           06/26/89   rgilli     created
//           08/27/90   mchris     default origin country in
//                                 text of 'made in:' line
//                                 for apparel
//           09/27/90   lsutto     allow gpc 07 access
//           05/03/91   kdenne     added pc6itmnb in pc0f260
//           05/08/91   kdenne     changed pc0f260 use po item
//           06/10/91   chaert     db2 changes, add so# to
//                                 po audit item, pc0fs24
//           03/09/92   lsutto     add fields to pg2rec for
//                                 03/92 db2 changes
// A150      05/19/92   ksanfo     fix gpc bug
//           12/03/92   LSUTTO     ADD NO-BEEP LOGIC IN 120,
//                                 220,320,410,520
// PCA367    06/06/97   PHARWO     CHANGES FOR PPR PROJECT
// PCA367    07/12/97   jniese     ppr corrections
// PCA???    09/30/97   DRAMSE     added loop to prevent
//                                 same time stamp in audit
//                                 records(PC0FS24)
// *********************
Program PC0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC0FW01 PC0FW01; // record
  PC0FW02 PC0FW02; // record
  PC0FW03 PC0FW03; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCBREC PCBREC; // record
  PCCREC PCCREC; // record
  PCDREC PCDREC; // record
  PCGREC PCGREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use YSITBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PC9TBL {deleteAfterUse = yes}; // table
  use PC0FM.PC0FM001,  // forms
      PC0FM.PC0FM002, 
      PC0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0F001;
    PC0F001: PC0F001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PC0F002;

    PC0F002: PC0F002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0F002;

  end // end main
end // end PC0F

// first time processing
Function PC0F001()

   /* ------------------------------------------------------------*/
   /* check commarea security fields*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.XGPCD != "01"
   && COMMAREA.XGPCD != "02"
   && COMMAREA.XGPCD != "03"
   && COMMAREA.XGPCD != "07")
    PCWREC.XXXMSGNO = 138; /* security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PC0FW01 empty;
  set PC0FW02 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set PC2REC empty;
  set PC4REC empty;
  set VPOITM03 empty;
  set PCBREC empty;
  set PCCREC empty;
  set PCDREC empty;
  set PCGREC empty;
  set PCYREC empty;

  PC0FW01.PC0FWCIX = 1; /* init cursor index*/
  PC0FW01.PC0FWMAP = "1"; /* init to map 1*/
  PC0FW01.PC0FWSWR = "Y"; /* init request for data switch*/
  PC0FW01.PC0FWBYF = "N"; /* init bypass processing switch*/
  COMMAREA.CATOAP = " "; /* init application field*/
  COMMAREA.CAITEM = " "; /* init item field*/

  if (COMMAREA.CAFROMAP == "PC0I") /* p.o. product special instruction*/
    PC0FW01.PC0FWCPY = "Y";
  else
    PC0FW01.PC0FWCPY = "N";
  end

   /* load key fields*/

  PC0FW01.XGPCD = COMMAREA.XGPCD;
  PC0FW01.PO-REG-CD = PCWREC.PO-REG-CD;
  PC0FW01.PC2CUXID = PCWREC.PC2CUXID;
  PC0FW01.YSICD = PCWREC.YSICD;
end // end PC0F001

// p.o. cust spec instr inq/maint
Function PC0F002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Display the customer special instruction - list screen*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "1") /* Map 1 was requested*/
    PC0F100(); /* Display map 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer special instruction - COPY screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "2" /* Map 2 was selected*/
   && PC0FW01.PC0FWFSW == "T") /* and COPY function*/

    if (converseVar.validationMsgNum == 0
     && PC0FW01.PC0FWBYF == "N")
      PC0FW01.PC0FWIXM = 1; /* Initialize index*/
    end

    while (PC0FW01.PC0FWIXM <= 12 /* Until end of page*/
     && PC0FW01.PC0FWMAP == "2") /* and map 2*/

      if (PC0FM001.PC0FMSEL[PC0FWIXM] == "S") /* If line selected*/
        PC0F200(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0FW01.PC0FWBYF == "N")         
        PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Increment index*/
      end

    end
    PC0FW01.PC0FWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* Display the customer special instruction - INQUIRY screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "2" /* Map 2 was selected*/
   && PC0FW01.PC0FWFSW == "I") /* and INQUIRE function*/

    if (converseVar.validationMsgNum == 0
     && PC0FW01.PC0FWBYF == "N")
      PC0FW01.PC0FWIXM = 1; /* Initialize index*/
    end

    while (PC0FW01.PC0FWIXM <= 12 /* Until end of page*/
     && PC0FW01.PC0FWMAP == "2") /* and map 2*/

      if (PC0FM001.PC0FMSEL[PC0FWIXM] == "S") /* If line selected*/
        PC0F300(); /* Display INQUIRY Map*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0FW01.PC0FWBYF == "N")         
        PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Increment index*/
      end
    end
    PC0FW01.PC0FWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer special instruction - ADD screen*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "2" /* Map 2 was requested*/
   && PC0FW01.PC0FWFSW == "A") /* and ADD function*/
    PC0F400(); /* Display Add Map*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer special instruction - CHANGE screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "2" /* Map 2 was selected*/
   && PC0FW01.PC0FWFSW == "C") /* and CHANGE function*/

    if (converseVar.validationMsgNum == 0
     && PC0FW01.PC0FWBYF == "N")
      PC0FW01.PC0FWIXM = 1; /* Initialize index*/
    end

    while (PC0FW01.PC0FWIXM <= 12 /* Until end of page*/
     && PC0FW01.PC0FWMAP == "2") /* and map 2*/

      if (PC0FM001.PC0FMSEL[PC0FWIXM] == "S") /* If line selected*/
        PC0F500(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0FW01.PC0FWBYF == "N")         
        PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Incr index*/
      end

    end
    PC0FW01.PC0FWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid map number terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "1"
   || PC0FW01.PC0FWMAP == "2")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0F002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PC0FW01.PC0FWMAP; /* Map name*/
    TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid function switch terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMAP == "2")
    if (PC0FW01.PC0FWFSW == "A"
     || PC0FW01.PC0FWFSW == "I"
     || PC0FW01.PC0FWFSW == "C"
     || PC0FW01.PC0FWFSW == "T")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "PC0F002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PC0FW01.PC0FWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP FUNCTION IS INVALID";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    end
  end

end // end PC0F002

// p.o. cust spec instr list
Function PC0F100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PC0F110(); /* Obtain the data to display*/

  PC0F120(); /* Format and display the map*/

  PC0F130(); /* Check attention identifier*/

  PC0F140(); /* Reset fields to normal intensity*/

  PC0F150(); /* Verify the entered data*/

  PC0F160(); /* Process valid input request*/


end // end PC0F100

// Obtain the data to display
Function PC0F110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWSWR == "N") /* Data not requested*/

    return;

  end


  PC0FS01(); /* Purge any temporary storage*/

  set PCCREC empty; /* Clear p.o. cust spec instr record*/
  set PC0FW02 empty; /* Clear temporary storage record*/
  set PC0FM001 initial; /* Clear map pc0fm001*/
  PC0FW01.PC0FWCIX = 1; /* reset cursor index*/
  PC0FW01.PC0FWSWR = "N"; /* Request for data completed*/

   /* ------------------------------------------------------------*/
   /* load key fields*/
   /* ------------------------------------------------------------*/

  PC0FM001.XGPCD = PC0FW01.XGPCD;
  PC0FM001.PC2CUXID = PC0FW01.PC2CUXID;
  PC0FM001.PC0FMSIT = PC0FW01.YSICD;

   /* ------------------------------------------------------------*/
   /* edit of the gpc code must come first because of security*/
   /* check*/
   /* ------------------------------------------------------------*/

  if (PC0FM001.XGPCD != " ")
    if (PC0FM001.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active gpc code*/
      PCCREC.XGPCD = PC0FM001.XGPCD;
      PC0FW01.XGPCD = PC0FM001.XGPCD;
      PCWREC.XGPCD = PC0FM001.XGPCD;
      COMMAREA.XGPCD = PC0FM001.XGPCD;
      PC0FW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      PC0FM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      if (PC0FM001.XGPCD != "01"
       && PC0FM001.XGPCD != "02"
       && PC0FM001.XGPCD != "03"
       && PC0FM001.XGPCD != "07")
        converseLib.validationFailed(200); /* invalid gpc for po system*/
      end
    else
      converseLib.validationFailed(28); /* missing/invalid gpc*/
    end
  else
    converseLib.validationFailed(28); /* missing/invalid gpc*/
  end

  if (converseVar.validationMsgNum == 28 /* missing/invalid gpc*/
   || converseVar.validationMsgNum == 200) /* invalid for po sys*/
    PC0FW01.XGPCD = " "; /* clear w/s gpc code*/
    PC0FW01.XGPDESC = " "; /* clear w/s gpc desc*/
    PC0FM001.XGPDESC = " "; /* clear map gpc desc*/
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F110"; /* process name*/
    set PC0FM001.XGPCD cursor, modified, bold;
    return; /* if invalid gpc code display error message*/
  end

   /* ------------------------------------------------------------*/
   /* If valid gpc code verify user security*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWUPD = "N"; /* reset update flag*/
  PC0FW01.PC0FWINQ = "N"; /* reset inquiry flag*/
  if (PC0FW01.PC0FWCPY == "N")

     /* verify if user is authorized to add/chg data*/

    if (PC0FM001.XGPCD == "01"
     && COMMAREA.CACLVL[1] == "Y")
      PC0FW01.PC0FWUPD = "Y";
    end

    if (PC0FM001.XGPCD == "02"
     && COMMAREA.CACLVL[2] == "Y")
      PC0FW01.PC0FWUPD = "Y";
    end

    if (PC0FM001.XGPCD == "03"
     && COMMAREA.CACLVL[3] == "Y")
      PC0FW01.PC0FWUPD = "Y";
    end

    if (PC0FM001.XGPCD == "07"
     && COMMAREA.CACLVL[7] == "Y")
      PC0FW01.PC0FWUPD = "Y";
    end

     /* verify if user is authorized to inq data*/

    if (PC0FW01.PC0FWUPD == "N")
      if (PC0FM001.XGPCD == "01"
       && COMMAREA.CAILVL[1] == "Y")
        PC0FW01.PC0FWINQ = "Y";
      end

      if (PC0FM001.XGPCD == "02"
       && COMMAREA.CAILVL[2] == "Y")
        PC0FW01.PC0FWINQ = "Y";
      end

      if (PC0FM001.XGPCD == "03"
       && COMMAREA.CAILVL[3] == "Y")
        PC0FW01.PC0FWINQ = "Y";
      end

      if (PC0FM001.XGPCD == "07"
       && COMMAREA.CAILVL[7] == "Y")
        PC0FW01.PC0FWINQ = "Y";
      end

      if (PC0FW01.PC0FWINQ == "N")
        PC0FW01.XGPCD = " "; /* clear w/s gpc code*/
        PC0FM001.PC0FMSIT = " "; /* clear key fields*/
        PC0FW01.YSICD = " ";
        PC0FM001.PC2CUXID = " ";
        PC0FW01.PC2CUXID = " ";
        converseLib.validationFailed(105); /* user not authorized*/
        PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
        PC0FM001.XXXPRCNM = "PC0F110";
        set PC0FM001.XGPCD cursor; /* set cursor*/
        return; /* user not authorized display error message*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if gpc code is valid and user is authorized*/
   /* verify additional fields*/
   /* ------------------------------------------------------------*/

  if (PC0FM001.PC0FMSIT != " ")
    if (PC0FM001.PC0FMSIT in YSITBL.YSICD
     && YSITBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active spec instr type*/
      PCCREC.YSICD = PC0FM001.PC0FMSIT;
      PC0FW01.YSICD = PC0FM001.PC0FMSIT;
      PC0FM001.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
      PC0FW01.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
    else
      PC0FW01.YSICD = "@#"; /* force validation routine*/
      PC0FW01.YSIDESC = " "; /* clear w/s special instr desc*/
      PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
      converseLib.validationFailed(67); /* missing/invalid spec instr type*/
      PC0FM001.XXXPRCNM = "PC0F110"; /* process name*/
      set PC0FM001.PC0FMSIT cursor, modified, bold;
    end
  else
    PCCREC.YSICD = "*"; /* set customer special instr code*/
    PC0FW01.YSICD = " "; /* set w/s special instr code*/
    PC0FW01.YSIDESC = " "; /* clear w/s special instr desc*/
  end

   /* ------------------------------------------------------------*/
   /* Verify customer xref code*/
   /* ------------------------------------------------------------*/

  if (PC0FM001.PC2CUXID != " ")

    set PC2REC empty; /* clear pc2rec*/

    PC2REC.XGPCD = PC0FM001.XGPCD;
    PC2REC.PC2CUXID = PC0FM001.PC2CUXID;

    PC0FS02(); /* select customer xref row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PCCREC.PC2CUXID = PC0FM001.PC2CUXID;
      PC0FM001.PC2NAME = PC2REC.PC2NAME;
      PC0FW01.PC2CUXID = PC0FM001.PC2CUXID;
      PC0FW01.PC2NAME = PC2REC.PC2NAME;
    else
      converseLib.validationFailed(123); /* missing/invalid cust xref code*/
    end
  else
    converseLib.validationFailed(234); /* please enter customer xref code*/
  end

  if (converseVar.validationMsgNum == 234 /* please enter customer xref code*/
   || converseVar.validationMsgNum == 123) /* invalid cust xref for this gpc*/
    PC0FW01.PC2CUXID = " "; /* clear w/s customer xref code*/
    PC0FW01.PC2NAME = " "; /* clear w/s customer xref desc*/
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F110"; /* process name*/
    set PC0FM001.PC2CUXID cursor, modified, bold;
  end

  if (PC0FW01.PC0FWPSW == "Y") /* bypass additional database i/o*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If valid data was entered and security passed select*/
   /* requested customer special instruction information.*/
   /* ------------------------------------------------------------*/

  PC0FS03(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    PC0FW01.PC0FWIXM = 1; /* Initialize display line number*/
    PC0FW01.PC0FWCSW = "N"; /* Initialize end of file switch*/
    PC0FW01.PC0FWPSW = "N"; /* Init problem found switch*/

    PC0FS04(); /* Fetch pccrec row*/

    while (PC0FW01.PC0FWCSW == "N" /* Until end of set or problem found*/
     && PC0FW01.PC0FWPSW == "N")

       /* load temporary storage record pc0fw02*/

      PC0FW02.XGPCD[PC0FWIXM] = PCCREC.XGPCD;
      PC0FW02.PCASINBR[PC0FWIXM] = PCCREC.PCASINBR;
      PC0FW02.PC2CUXID[PC0FWIXM] = PCCREC.PC2CUXID;
      PC0FW02.PC4ORTYP[PC0FWIXM] = PCCREC.PC4ORTYP;

      PC4REC.XGPCD = PCCREC.XGPCD;
      PC4REC.PC4ORTYP = PCCREC.PC4ORTYP;

      PC0FS05(); /* select po order type descritpion*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0FW02.PC4SDESC = PC4REC.PC4SDESC;
      else
        PC0FW02.PC4SDESC = " ";
      end

      PC0FW02.YSICD[PC0FWIXM] = PCCREC.YSICD;
      PC0FW02.PCASIDSC[PC0FWIXM] = PCCREC.PCASIDSC;
      PC0FW02.PCASTDFL[PC0FWIXM] = PCCREC.PCASTDFL;
      PC0FW02.FY1FRGN[PC0FWIXM] = PCCREC.FY1FRGN;
      PC0FW02.XXXSTAT[PC0FWIXM] = PCCREC.XXXSTAT;
      PC0FW02.ZZZCHGCT[PC0FWIXM] = PCCREC.ZZZCHGCT;

      if (PC0FW01.PC0FWIXM >= 12)
        PC0FS06(); /* Add page to temp storage*/
      else
        PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Incr. index*/
      end

      PC0FS04(); /* Fetch pccrec row*/

    end

    PC0FW01.PC0FWTSP = 1; /* Initialize page number*/

    PC0FS07(); /* Close set of pccrec rows*/

  end

  if (PC0FW01.PC0FWPSW == "N" /* no errors*/
   && PC0FW01.PC0FWIXM > 1)   /* additional data for temp storage*/

    PC0FS06(); /* add page to temp storage*/

  end

  if (PC0FW01.TA5TSQIX == 0) /* No data to display*/
    PC0FW01.XGPCD = " "; /* clear w/s gpc code*/
    PC0FW01.PC2CUXID = " "; /* clear w/s customer xref code*/
    PC0FW01.YSICD = " "; /* clear w/s special instr code*/
    PC0FW01.PC0FWPSW = "Y"; /* indicate error exists*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0FM001.XXXPRCNM = "PC0F110"; /* process name*/
    set PC0FM001.XGPCD cursor; /* set cursor*/
  end

end // end PC0F110

// Format and display the map
Function PC0F120()

   /* ------------------------------------------------------------*/
   /* If no error(s) to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0
   && PC0FW01.PC0FWBYF == "N")
    PC0F121(); /* Format the selected data*/
  end

   /* ------------------------------------------------------------*/
   /* The problem switch is set if: -invalid key data*/
                                  /* (gpc, xref code, spec instr)*/
                                 /* -invalid transfer application*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWPSW == "Y") /* Error message to display*/
    if (COMMAREA.CATOAP > " ") /* invalid transfer request*/
      set PC0FM001 initial; /* clear map pc0fm001*/
      PC0FM001.XXXPRCNM = "PC0F120"; /* load process name*/
      PC0FM001.CATOAP = COMMAREA.CATOAP; /* load transfer application*/
      PC0FM001.CAITEM = COMMAREA.CAITEM; /* load transfer items*/
      COMMAREA.CATOAP = " "; /* clear commarea transfer application*/
      COMMAREA.CAITEM = " "; /* clear commarea transfer items*/
      PC0FW01.XGPCD = " "; /* clear w/s gpc*/
      PC0FW01.PC2CUXID = " "; /* clear w/s customer xref code*/
      PC0FW01.YSICD = " "; /* clear w/s special instr code*/
      set PC0FM001.CATOAP cursor, modified, bold; /* set cursor*/
    end

    set PC0FM001.PC0FMPGL initialAttributes; /* Turn off "PAGE" literal*/
    set PC0FM001.PC0FMOFL initialAttributes; /* Turn off "OF" literal*/
    set PC0FM001.PC0FWTSP initialAttributes; /* turn off current page number*/
    set PC0FM001.TA5TSQIX initialAttributes; /* Turn off highest page number*/

  end

   /* ------------------------------------------------------------*/
   /* Display PF key options*/
   /* ------------------------------------------------------------*/


  if (PC0FW01.PC0FWCPY == "Y") /* copy function requested*/
    set PC0FM001.PC0FMHLP skip, invisible;
    set PC0FM001.PC0FMPDM skip, invisible;
    set PC0FM001.PC0FMADD skip, invisible;
    set PC0FM001.PC0FMCHG skip, invisible;
    set PC0FM001.PC0FMMST skip, invisible;
    set PC0FM001.PC0FMNKE skip, invisible;
    set PC0FM001.PC0FMOPT skip, invisible;
    set PC0FM001.CATOAP skip, invisible;
    set PC0FM001.PC0FMITM skip, invisible;
    set PC0FM001.CAITEM skip, invisible;
    set PC0FM001.XGPCD skip;
    PC0FM001.PC0FMPOT = "3:PO INST";
  else
    PC0FM001.PC0FMPOT = "3:PO MN  ";
  end

  if (PC0FW01.PC0FWUPD == "Y")
    set PC0FM001.PC0FMADD skip;
    set PC0FM001.PC0FMCHG skip;
  end

   /* ------------------------------------------------------------*/
   /* if data successful updated display message*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWMFL == "Y") /* update flag on*/
    converseLib.validationFailed(1);
    PC0FM001.XXXPRCNM = "PC0F120"; /* process name*/
    PC0FW01.PC0FWMFL = "N"; /* reset message flag*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors sound the alarm*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
      set PC0FM001 alarm; /* Indicate sound alarm*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Display customer special instruction list screen*/
   /* ------------------------------------------------------------*/

  PC0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0FM001 ;

   /* ------------------------------------------------------------*/
   /* Reset problem switch and check if the user has requested*/
   /* the display of the gpc pop-up window.*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWPSW = "N"; /* Reset problem switch*/
  PC0FW01.PC0FWBYF = "N"; /* Reset bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0F122(); /* Check for ? inquiry by user*/
  end

end // end PC0F120

// Format the selected data
Function PC0F121()

   /* ------------------------------------------------------------*/
   /* Obtain temporary storage, load and display map fields.*/
   /* ------------------------------------------------------------*/

  set PC0FM001 initial;

  PC0FM001.XGPCD = PC0FW01.XGPCD;
  PC0FM001.XGPDESC = PC0FW01.XGPDESC;

  PC0FM001.PC2CUXID = PC0FW01.PC2CUXID;
  PC0FM001.PC2NAME = PC0FW01.PC2NAME;

  PC0FM001.PC0FMSIT = PC0FW01.YSICD;
  PC0FM001.YSIDESC = PC0FW01.YSIDESC;

  PC0FS08(); /* Obtain temporary storage page*/

  set PC0FM001.PC0FMPGL skip; /* Display "PAGE" literal*/
  set PC0FM001.PC0FMOFL skip; /* Display "OF" literal*/

  PC0FM001.PC0FWTSP = PC0FW01.PC0FWTSP; /* Current page number*/
  set PC0FM001.PC0FWTSP skip; /* Display number*/
  PC0FM001.TA5TSQIX = PC0FW01.TA5TSQIX; /* Highest page number*/
  set PC0FM001.TA5TSQIX skip; /* Display number*/

  PC0FW01.PC0FWIXM = 1; /* Initialize line index*/
  while (PC0FW01.PC0FWIXM <= 12 /* Until end of lines or*/
   && PC0FW02.YSICD[PC0FWIXM] != " ") /* all special instr displayed*/

    if (PC0FW01.PC0FWCPY == "Y" /* in copy mode*/
     && PC0FW02.XXXSTAT[PC0FWIXM] == "I") /* inactive status*/
       /* can't copy inactive instructions*/
      set PC0FM001.PC0FMSEL[PC0FWIXM] protect, invisible; /* protect select flag*/
    else
      set PC0FM001.PC0FMSEL[PC0FWIXM] normal; /* Display select flag*/
    end
    PC0FM001.PC0FMSEL[PC0FWIXM] = PC0FW02.PC0FMSEL[PC0FWIXM];
    PC0FM001.YSICD[PC0FWIXM] = PC0FW02.YSICD[PC0FWIXM];
    PC0FM001.PCASIDSC[PC0FWIXM] = PC0FW02.PCASIDSC[PC0FWIXM];
    PC0FM001.PCASTDFL[PC0FWIXM] = PC0FW02.PCASTDFL[PC0FWIXM];
    PC0FM001.FY1FRGN[PC0FWIXM] = PC0FW02.FY1FRGN[PC0FWIXM];
    PC0FM001.PC4ORTYP[PC0FWIXM] = PC0FW02.PC4ORTYP[PC0FWIXM];
    PC0FM001.XXXSTAT[PC0FWIXM] = PC0FW02.XXXSTAT[PC0FWIXM];

    PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Increment line index*/

  end

  set PC0FM001.PC0FMSEL[PC0FWCIX] cursor; /* Last row viewed*/

end // end PC0F121

// Check for ? inquiry by user
Function PC0F122()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0FM001.XGPCD == "?"
   || PC0FM001.PC0FMSIT == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0FM001.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0FM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0FM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        PC0FM001.XGPCD = PC0FW01.XGPCD;
        if (PC0FW01.XGPCD in XGPTBL.XGPCD)
          PC0FM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end

      set PC0FM001.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check special instruction type for ?*/
    /* *************************************************************/

    if (PC0FM001.PC0FMSIT == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  SPECIAL INSTRUCTION TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSI01(); /* perform special instr type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0FM001.PC0FMSIT = YSITBL.YSICD[XX0XWPIX]; /* move code*/
        PC0FM001.YSIDESC = YSITBL.YSIDESC[XX0XWPIX]; /* move name*/
      else
        PC0FM001.PC0FMSIT = PC0FW01.YSICD;
        if (PC0FW01.YSICD in YSITBL.YSICD)
          PC0FM001.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
        end
      end

      set PC0FM001.PC0FMSIT cursor; /* set cursor*/

    end

    converseLib.clearScreen();

    PC0FW01.PC0FWBYF = "Y";

  end


end // end PC0F122

// Check attention identifier
Function PC0F130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0fm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0FW01.PC0FWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify pfkeys for copy function*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWCPY == "Y")
    PC0F131(); /* check copy attention identifiers*/
  else
    PC0F132(); /* check non copy attention identifiers*/
  end

end // end PC0F130

// Check copy attention ident.
Function PC0F131()

   /* ------------------------------------------------------------*/
   /* Check copy attention identifier.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0FS01(); /* Purge any temporary storage*/

    COMMAREA.CAUSERA = " "; /* init. commarea*/
    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Set to application*/
    PCWREC.PCWFNC[4] = "C"; /* set function switch to copy*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F131"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PC0FM001.XXXPRCNM = "PC0F131"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0F131

// Check non copy attention ident
Function PC0F132()

   /* ------------------------------------------------------------*/
   /* Check non copy attention identifiers.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0FM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0FS01(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* clear pcwrec*/
      COMMAREA.CATOAP = PC0FM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0FM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
      PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/

  end
   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0FS01(); /* Purge any temporary storage*/

    COMMAREA.CAUSERA = " "; /* init. commarea*/
    PCWREC.CAUSERA = " "; /* clear pcwrec area*/
    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PC0FM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PC0FS01(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF13 - Verify if user is authorized to add customer*/
          /* special instruction information*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0FW01.PC0FWUPD == "N")     /* and user add not authorized*/
    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF14 - Verify if user is authorized to change customer*/
          /* special instruction information*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0FW01.PC0FWUPD == "N")     /* and user chg not authorized*/
    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF16 - transfer to nike special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* PF3 was pressed*/

    PC0FS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0G"; /* Set to nike special instruction*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end
   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    PC0FM001.XXXPRCNM = "PC0F132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0F132

// Reset highlighted fields
Function PC0F140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0FM001.XGPCD initialAttributes; /* gpc code*/
  set PC0FM001.PC2CUXID initialAttributes; /* customer xref code*/
  set PC0FM001.PC0FMSIT initialAttributes; /* special instr. type*/

  PC0FW01.PC0FWIXM = 1; /* Initialize line index*/

  while (PC0FW01.PC0FWIXM <= 12 /* Until end of lines*/
   && PC0FM001.YSICD[PC0FWIXM] != " ")
                                   /* and special instr. type exists*/
    set PC0FM001.PC0FMSEL[PC0FWIXM] normal; /* Reset select flag*/
    PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM + 1; /* Increment line index*/
  end

  set PC0FM001.CATOAP initialAttributes;
  set PC0FM001.CAITEM initialAttributes;

end // end PC0F140

// Verify the entered data
Function PC0F150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0FM001.CAITEM > " ") /* Application data was entered*/
    set PC0FM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0FM001.XXXPRCNM = "PC0F150"; /* Process name*/

    return; /* exit redisplay map*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0F151(); /* Verify scroll request*/

  else
    if (converseVar.eventKey not pf13)

      PC0F152(); /* Verify any changed data*/

    end
  end

end // end PC0F150

// Verify scroll request
Function PC0F151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWIXM = 12; /* Initialize line index*/

  while (PC0FW01.PC0FWIXM > 0) /* Until end of lines*/
    if (PC0FM001.PC0FMSEL[PC0FWIXM] > " "
     && PC0FM001.PC0FMSEL[PC0FWIXM] != "V")
      set PC0FM001.PC0FMSEL[PC0FWIXM] cursor, modified, bold; /* Highlight*/
      PC0FM001.XXXPRCNM = "PC0F151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0FW01.PC0FWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PC0FM001.XXXPRCNM = "PC0F151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PC0FW01.PC0FWTSP >= PC0FW01.TA5TSQIX /* and no more pages*/
   && converseVar.validationMsgNum == 0)   /* and no errors*/
    PC0FM001.XXXPRCNM = "PC0F151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum == 0)
    PC0FW01.PC0FWCIX = 1; /* set cursor at first row*/
  end

end // end PC0F151

// Verify any changed data
Function PC0F152()

   /* ------------------------------------------------------------*/
   /* Check for change in gpc code, customer xref code, or*/
   /* special instruction type*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* error message*/
   || PC0FW01.PC0FWBYF == "Y")          /* bypass processing*/
    return;
  end

  if (PC0FM001.XGPCD != PC0FW01.XGPCD       /* gpc changed*/
   || PC0FM001.PC2CUXID != PC0FW01.PC2CUXID /* customer xref changed*/
   || PC0FM001.PC0FMSIT != PC0FW01.YSICD)   /* special instr. type changed*/
    PC0FW01.PC0FWSWR = "Y"; /* request data switch*/
    PC0FW01.XGPCD = PC0FM001.XGPCD;
    PC0FW01.PC2CUXID = PC0FM001.PC2CUXID;
    PC0FW01.YSICD = PC0FM001.PC0FMSIT;
    exit stack;
  end

  if (PC0FM001.XGPCD == " " /* blank gpc code*/
   || PC0FM001.PC2CUXID == " ") /* blank customer xref*/
    PC0FW01.PC0FWSWR = "Y"; /* request data switch*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Check to see if data has been selected off the list screen*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWSFL = "N"; /* Initialize selection flag*/
  PC0FW01.PC0FWIXM = 12; /* Initialize index*/

  while (PC0FW01.PC0FWIXM > 0) /* Until end of lines*/
    if (PC0FM001.PC0FMSEL[PC0FWIXM] != " ") /* If selection not blank*/
      if (PC0FM001.PC0FMSEL[PC0FWIXM] == "S")
        PC0FW01.PC0FWSFL = "Y"; /* Initialize selection flag*/
      else
        if (PC0FM001.PC0FMSEL[PC0FWIXM] != "V") /* invalid entry*/
          converseLib.validationFailed(13); /* Error message and highlight*/
          PC0FM001.XXXPRCNM = "PC0F152"; /* Process name*/
          PC0FW01.PC0FWSFL = "Y"; /* Initialize selection flag*/
          set PC0FM001.PC0FMSEL[PC0FWIXM] cursor, modified, bold;
        end
      end
    end

    PC0FW01.PC0FWIXM = PC0FW01.PC0FWIXM - 1; /* Decrement line index*/
  end

   /* ------------------------------------------------------------*/
   /* If PF14 was pressed and no data selected display error msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0FW01.PC0FWSFL == "N")     /* and selection was not made*/
    PC0FM001.XXXPRCNM = "PC0F152"; /* Process name*/
    converseLib.validationFailed(25); /* enter 's' for selection*/
  end
end // end PC0F152

// Process valid input request
Function PC0F160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error message set up*/
   || PC0FW01.PC0FWBYF == "Y")          /* bypass processing*/
    return;
  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PC0FW01.PC0FWTSP = PC0FW01.PC0FWTSP - 1; /* Decrement page number*/
    return;
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PC0FW01.PC0FWTSP = PC0FW01.PC0FWTSP + 1; /* Increment page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Copy function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0FW01.PC0FWCPY == "Y"       /* copy function requested*/
   && PC0FW01.PC0FWSFL == "Y")      /* and selection was made*/
    PC0FW01.PC0FWMAP = "2"; /* Select Map #2*/
    PC0FW01.PC0FWFSW = "T"; /* Select inquiry function*/
    converseLib.validationFailed(0); /* Clear error message field*/
  end

   /* ------------------------------------------------------------*/
   /* Inquiry function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0FW01.PC0FWCPY == "N"       /* copy function was not requested*/
   && PC0FW01.PC0FWSFL == "Y")      /* and selection was made*/
    PC0FW01.PC0FWMAP = "2"; /* Select Map #2*/
    PC0FW01.PC0FWFSW = "I"; /* Select inquiry function*/
    converseLib.validationFailed(0); /* Clear error message field*/
  end

   /* ------------------------------------------------------------*/
   /* Add function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0FW01.PC0FWCPY == "N")     /* copy function was not requested*/
    PC0FW01.PC0FWMAP = "2"; /* Select Map #2*/
    PC0FW01.PC0FWFSW = "A"; /* Select add function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    PC0FW01.PC2NAME = " "; /* clear customer name*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Change function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0FW01.PC0FWCPY == "N"      /* copy function was not requested*/
   && PC0FW01.PC0FWSFL == "Y")     /* and selection was made*/
    PC0FW01.PC0FWMAP = "2"; /* Select Map #2*/
    PC0FW01.PC0FWFSW = "C"; /* Select change function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end


end // end PC0F160

// customer special instr - copy
Function PC0F200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0F210(); /* obtain data*/

  PC0F220(); /* Format and display the map*/

  PC0F230(); /* Check attention identifier*/

  PC0F240(); /* Reset fields to normal intensity*/

  PC0F250(); /* verify the entered data*/

  PC0F260(); /* process valid input request*/

end // end PC0F200

// Obtain spec instr text
Function PC0F210()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

    set PC0FM002 initial; /* clear screen pc0fm002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

    PC0FS09(); /* select set and open the cursor*/

    PC0FW01.PC0FWSIX = 1; /* init spec.instr. line index*/
    PC0FW01.PC0FWSTW = "N"; /* init spec. instr. text switch*/
    PC0FW01.PC0FWPSW = "N"; /* reset problem switch*/

    PC0FS10(); /* fetch pcbrec row*/

    while (PC0FW01.PC0FWSTW == "N" /* until end of special text or*/
     && PC0FW01.PC0FWPSW == "N" /* problem found*/
     && PC0FW01.PC0FWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/
      PC0FW03.PCBSITXT = PCBREC.PCBSITXT;
      if (PC0FW03.PC0FWMIN == "MADE IN:"
       && COMMAREA.XGPCD == "03")
        VPOHDR02.XGPCD = COMMAREA.XGPCD;
        VPOHDR02.PO-REG-CD = PCWREC.PO-REG-CD;
        VPOHDR02.PC3PONBR = PCWREC.PC3PONBR;
        PC0FS26(); /* get po header*/
        if (VPOHDR02.PC4ORTYP == "XI" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "XD" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "S8" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "S9") /* nil po type*/
          if (VPOHDR02.XCTCD in XCTTBL.XCTCD) /* get county desc*/
            PC0FW03.PC0FWCTY = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move ctry*/
          end
        else /* not a nil po type*/
          if (VPOHDR02.XCTCD == "USA") /* do not default if usa and domestic*/
            /* next sentence*/
          else /* not = 'usa'*/
            if (VPOHDR02.XCTCD in XCTTBL.XCTCD) /* get county desc*/
              PC0FW03.PC0FWCTY = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move ctry*/
            end
          end
        end
      end

      PC0FM002.PCBSITXT[PC0FWSIX] = PC0FW03.PCBSITXT;

      PC0FS10(); /* fetch pcbrec row*/

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1; /* incr. index*/

    end

    PC0FS11(); /* close set of pcbrec rows*/

  end

end // end PC0F210

// Format and display the map
Function PC0F220()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

     /* load customer special instruction from temp storage*/

    PC0FM002.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    if (PC0FW02.XGPCD[PC0FWIXM] in XGPTBL.XGPCD)
      PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0FM002.YSICD = PC0FW02.YSICD[PC0FWIXM];
    if (PC0FW02.YSICD[PC0FWIXM] in YSITBL.YSICD)
      PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0FM002.PCASIDSC = PC0FW02.PCASIDSC[PC0FWIXM];
    PC0FM002.PC4ORTYP = PC0FW02.PC4ORTYP[PC0FWIXM];
    PC0FM002.PC4SDESC = PC0FW02.PC4SDESC[PC0FWIXM];
    PC0FM002.PCASTDFL = PC0FW02.PCASTDFL[PC0FWIXM];
    PC0FM002.FY1FRGN = PC0FW02.FY1FRGN[PC0FWIXM];
    PC0FM002.XXXSTAT = PC0FW02.XXXSTAT[PC0FWIXM];
    PC0FM002.PC2CUXID = PC0FM001.PC2CUXID;
    PC0FM002.PC2NAME = PC0FM001.PC2NAME;

    converseLib.validationFailed(115); /* press enter to copy data*/
    PC0FW01.PC0FWCIX = PC0FW01.PC0FWIXM; /* save to position cursor*/
    PC0FW02.PC0FMSEL[PC0FWIXM] = "V";

    PC0FS12(); /* update temp storage*/

  end

   /* Protect all customer special instruction data*/

  set PC0FM002.XGPCD protect; /* Gpc code*/
  set PC0FM002.YSICD protect; /* special instr. type code*/
  set PC0FM002.PC4ORTYP protect; /* p.o. order type code*/
  set PC0FM002.PCASTDFL protect; /* standard print*/
  set PC0FM002.FY1FRGN protect; /* offshore flag*/
  set PC0FM002.XXXSTAT protect; /* status code*/
  set PC0FM002.PC2CUXID protect; /* customer xref code*/

   /* Darken pfkey literials*/

  set PC0FM002.PC0FMHLP skip, invisible;
  set PC0FM002.PC0FMPRD skip, invisible;
  set PC0FM002.PC0FMMST skip, invisible;
  set PC0FM002.CATOAP skip, invisible;
  set PC0FM002.CAITEM skip, invisible;
  set PC0FM002.PC0FMOPT skip, invisible;
  set PC0FM002.PC0FMITM skip, invisible;

  PC0FM002.PC0FMFNC = "COPY"; /* Move copy literal to map*/
  PC0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  set PC0FM002.PCASIDSC cursor; /* set cursor*/

  if (PC0FW01.PC0FWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0FM002.XXXPRCNM = "PC0F220"; /* process name*/
    PC0FW01.PC0FWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum != 115) /* bypass copy message*/
      if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
      else
        set PC0FM002 alarm; /* sound the alarm*/
      end
    end
  end

  converse PC0FM002 ;

  PC0FW01.PC0FWPSW = "N"; /* Initialize problem switch*/
  PC0FW01.PC0FWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0F220

// Check attention identifier
Function PC0F230()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0fm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer special instruction list pc0fm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0FW01.PC0FWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0FM002.XXXPRCNM = "PC0F230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PC0F230

// Reset highlighted fields
Function PC0F240()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0FM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0FM002.YSICD initialAttributes; /* special instr. type*/
  set PC0FM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0FM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0FM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0FM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0FM002.XXXSTAT initialAttributes; /* status code*/
  set PC0FM002.PC2CUXID initialAttributes; /* customer xref type*/

  PC0FW01.PC0FWSIX = 1; /* init spec text index*/
  while (PC0FW01.PC0FWSIX <= 13)
    set PC0FM002.PCBSITXT[PC0FWSIX] initialAttributes;
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
  end

  set PC0FM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0FM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0F240

// verify entered data
Function PC0F250()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWSIX = 13;
  PC0FW01.PC0FWTEF = "N";
  while (PC0FW01.PC0FWSIX >= 1
   && PC0FW01.PC0FWTEF == "N")
    if (PC0FM002.PCBSITXT[PC0FWSIX] != " ")
      PC0FW01.PC0FWTEF = "Y";
    end

    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1; /* incr. index*/

  end

  if (PC0FW01.PC0FWTEF == "N")
    converseLib.validationFailed(68); /* description required*/
    PC0FM002.XXXPRCNM = "PC0F250"; /* load process name*/
    PC0FW01.PC0FWSIX = 13;
    while (PC0FW01.PC0FWSIX >= 1)
      set PC0FM002.PCBSITXT[PC0FWSIX] cursor, modified, bold;

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* validate customer special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PCASIDSC == " ")
    converseLib.validationFailed(68); /* description required*/
    PC0FM002.XXXPRCNM = "PC0F250"; /* load process name*/
    set PC0FM002.PCASIDSC cursor, modified, bold;
  end


end // end PC0F250

// process valid input request
Function PC0F260()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0 /* errors exist*/
   || PC0FW01.PC0FWBYF == "Y")          /* bypass processing*/
    return;
  end

  set VPOITM03 empty; /* init p.o. item rec*/
  set PCGREC empty; /* init p.o. product spec instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

   /* ------------------------------------------------------------*/
   /* obtain p.o. item row(s)*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = COMMAREA.XGPCD;
  VPOITM03.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
  VPOITM03.PC3PONBR = PCWREC.PC3PONBR;
  VPOITM03.SY1STNBR = PCWREC.SY1STNBR;
  VPOITM03.SY2CLRID = PCWREC.SY2CLRID;
  VPOITM03.XDMCD = PCWREC.XDMCD;
  VPOITM03.XQACD = PCWREC.XQACD;
  VPOITM03.XOWCD = PCWREC.XOWCD;
  VPOITM03.PC2INSEG = PCWREC.PC2INSEG;
  VPOITM03.XPGCD = PCWREC.XPGCD;
  VPOITM03.XUMCD = PCWREC.XUMCD;
  VPOITM03.XWHCD = PCWREC.XWHCD;
  VPOITM03.PC6ETSDT = PCWREC.PC6ETSDT;
  VPOITM03.PC6RTADT = PCWREC.PC6RTADT;
  VPOITM03.PC6OETS = PCWREC.PC6OETS;
  VPOITM03.PC2CUXID = PCWREC.PC2CUXID;

   /* move 0 to VPOITM03.op1cuoid;*/
   /* move 0 to VPOITM03.op1norid;*/
   /* move ' ' to VPOITM03.op1partn;*/

  VPOITM03.YMTCD = PCWREC.YMTCD;
  VPOITM03.YSMXDV = PCWREC.YSMXDV;
  VPOITM03.PC6PLAN = -1;
  VPOITM03.XDSCD = "*";

  PC0FS20(); /* select set and open the cursor*/

  PC0FW01.PC0FWPOI = "N"; /* set po item eof switch*/
  PC0FW01.PC0FWPSW = "N"; /* reset problem switch*/

  PC0FS21(); /* fetch po item*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    converseLib.validationFailed(169); /* po item deleted by another appl*/
  end

  while (PC0FW01.PC0FWPOI == "N") /* until end of po item*/

    if (VPOITM03.PC6STAT == "OP")
      VPOITM03.PC3SIFL = "Y";
      VPOITM03.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PC0FS22(); /* update po item row*/

      if (SQLCA.VAGen_SQLCODE == 100)
        PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
        PC0FW01.PC0FWPOI = "Y"; /* set eof flag*/
        converseLib.validationFailed(198); /* po itm data update by another appl*/
      else

        PCDREC.XGPCD = COMMAREA.XGPCD;

        PC0FS13(); /* select next spec instr number*/

        PCGREC.XGPCD = COMMAREA.XGPCD;
        PCGREC.PCASINBR = PCDREC.PCDSINBR;
        PCGREC.PC3PONBR = VPOITM03.PC3PONBR;
        PCGREC.PC6ITMNB = VPOITM03.PC6ITMNB;
        PCGREC.SY1STNBR = VPOITM03.SY1STNBR;
        PCGREC.SY2CLRID = VPOITM03.SY2CLRID;
        PCGREC.XDMCD = VPOITM03.XDMCD;
        PCGREC.XQACD = VPOITM03.XQACD;
        PCGREC.XOWCD = VPOITM03.XOWCD;
        PCGREC.PC2INSEG = VPOITM03.PC2INSEG;
        PCGREC.XPGCD = VPOITM03.XPGCD;
        PCGREC.XUMCD = VPOITM03.XUMCD;
        PCGREC.XWHCD = VPOITM03.XWHCD;
        PCGREC.PC6ETSDT = VPOITM03.PC6ETSDT;
        PCGREC.PC6RTADT = VPOITM03.PC6RTADT;
        PCGREC.PC6OETS = VPOITM03.PC6OETS;
        PCGREC.PC2CUXID = VPOITM03.PC2CUXID;
        PCGREC.OP1PARTN = VPOITM03.OP1PARTN;
        PCGREC.OP1CUOID = VPOITM03.OP1CUOID;
        PCGREC.OP1NORID = VPOITM03.OP1NORID;
        PCGREC.YMTCD = VPOITM03.YMTCD;
        PCGREC.YSICD = PC0FM002.YSICD;
        PCGREC.PCASIDSC = PC0FM002.PCASIDSC;
        PCGREC.PCEPRSEQ = 1;
        PCGREC.PCESIID = "C";
        PCGREC.ZZZSDT = XX0XW01.XX0XWDAT;
        VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PC0FS14(); /* add p.o. product spec instr*/

        PC0FS24(); /* add po item si audit*/

         /* determine the number of special msg text lines to be added*/

        PC0FW01.PC0FWSIX = 13;
        while (PC0FM002.PCBSITXT[PC0FWSIX] == " ")
          PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1;
        end

         /* load special instruction text*/

        PCBREC.XGPCD = COMMAREA.XGPCD;
        PCBREC.PCASINBR = PCDREC.PCDSINBR;
        PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
        PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
        PC0FW01.PC0FWLIX = PC0FW01.PC0FWSIX;
        PC0FW01.PC0FWSIX = 1;
        while (PC0FW01.PC0FWSIX <= PC0FW01.PC0FWLIX)

          PCBREC.PCBSISEQ = PC0FW01.PC0FWSIX;
          PCBREC.PCBSITXT = PC0FM002.PCBSITXT[PC0FWSIX];

          PC0FS15(); /* add special instruction text*/

          PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;

        end
      end
    end

    PC0FS21(); /* fetch next po item*/

  end

  PC0FS23(); /* close po item cursor*/

  if (PC0FW01.PC0FWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0FW01.PC0FWMFL = "N"; /* reset message flag*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0FW01.PC0FWMFL = "Y"; /* message flag*/
  end

  PC0FM002.XXXPRCNM = "PC0F260"; /* process name*/
end // end PC0F260

// customer special instr - inq
Function PC0F300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0F310(); /* obtain data*/

  PC0F320(); /* Format and display the map*/

  PC0F330(); /* Check attention identifier*/

  PC0F340(); /* Reset fields to normal intensity*/

  PC0F350(); /* Verify the entered data*/

end // end PC0F300

// Obtain spec instr text
Function PC0F310()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

    set PC0FM002 initial; /* clear screen pc0fm002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

    PC0FS09(); /* select set and open the cursor*/

    PC0FW01.PC0FWSIX = 1; /* init spec.instr. line index*/
    PC0FW01.PC0FWSTW = "N"; /* init spec. instr. text switch*/
    PC0FW01.PC0FWPSW = "N"; /* reset problem switch*/

    PC0FS10(); /* fetch pcbrec row*/

    while (PC0FW01.PC0FWSTW == "N" /* until end of special text or*/
     && PC0FW01.PC0FWPSW == "N" /* problem found*/
     && PC0FW01.PC0FWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/

      PC0FM002.PCBSITXT[PC0FWSIX] = PCBREC.PCBSITXT;

      PC0FS10(); /* fetch pcbrec row*/

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1; /* incr. index*/

    end

    PC0FS11(); /* close pcbrec row*/

  end

end // end PC0F310

// Format and display the map
Function PC0F320()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

     /* load customer special instruction from temp storage*/

    PC0FM002.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    if (PC0FW02.XGPCD[PC0FWIXM] in XGPTBL.XGPCD)
      PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0FM002.YSICD = PC0FW02.YSICD[PC0FWIXM];
    if (PC0FW02.YSICD[PC0FWIXM] in YSITBL.YSICD)
      PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0FM002.PCASIDSC = PC0FW02.PCASIDSC[PC0FWIXM];
    PC0FM002.PC4ORTYP = PC0FW02.PC4ORTYP[PC0FWIXM];
    PC0FM002.PC4SDESC = PC0FW02.PC4SDESC[PC0FWIXM];
    PC0FM002.PCASTDFL = PC0FW02.PCASTDFL[PC0FWIXM];
    PC0FM002.FY1FRGN = PC0FW02.FY1FRGN[PC0FWIXM];
    PC0FM002.XXXSTAT = PC0FW02.XXXSTAT[PC0FWIXM];
    PC0FM002.PC2CUXID = PC0FM001.PC2CUXID;
    PC0FM002.PC2NAME = PC0FM001.PC2NAME;

    set PC0FM002.CATOAP cursor; /* Position cursor*/
    PC0FW01.PC0FWCIX = PC0FW01.PC0FWIXM; /* save to position cursor*/
    PC0FW02.PC0FMSEL[PC0FWIXM] = "V";

    PC0FS12(); /* update temp storage*/

  end

   /* protect all enterable fields*/

  set PC0FM002.XGPCD protect; /* Gpc code*/
  set PC0FM002.YSICD protect; /* special instr. type code*/
  set PC0FM002.PCASIDSC protect; /* special instr. type desc*/
  set PC0FM002.PC4ORTYP protect; /* p.o. order type code*/
  set PC0FM002.PCASTDFL protect; /* standard print*/
  set PC0FM002.FY1FRGN protect; /* offshore flag*/
  set PC0FM002.XXXSTAT protect; /* status code*/
  set PC0FM002.PC2CUXID protect; /* customer xref code*/

  PC0FW01.PC0FWSIX = 1; /* init spec. text line index*/
  while (PC0FW01.PC0FWSIX <= 13)
    set PC0FM002.PCBSITXT[PC0FWSIX] protect; /* spec text*/
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1; /* incr. index*/
  end

  PC0FM002.PC0FMFNC = "INQUIRY"; /* Move inquiry literal to map*/
  PC0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
      set PC0FM002 alarm; /* sound the alarm*/
    end
  end

  converse PC0FM002 ;

  PC0FW01.PC0FWPSW = "N"; /* Initialize problem switch*/
  PC0FW01.PC0FWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0F320

// Check attention identifier
Function PC0F330()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0fm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0FS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0FM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0FM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0FW01.PC0FWPSW = "Y"; /* Set error switch*/
      PC0FW01.PC0FWMAP = 1; /* display list screen*/
      PC0FM001.XXXPRCNM = "PC0F330"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0FM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0FM002.XXXPRCNM = "PC0F330"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer special instruction list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0FW01.PC0FWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0FM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0FS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0FW01.PC0FWMAP = 1; /* reset map*/
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F330"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0FM002.XXXPRCNM = "PC0F330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0F330

// Reset highlighted fields
Function PC0F340()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0FM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0FM002.YSICD initialAttributes; /* special instr. type*/
  set PC0FM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0FM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0FM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0FM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0FM002.XXXSTAT initialAttributes; /* status code*/
  set PC0FM002.PC2CUXID initialAttributes; /* customer xref type*/

  PC0FW01.PC0FWSIX = 1; /* init spec text index*/
  while (PC0FW01.PC0FWSIX <= 13)
    set PC0FM002.PCBSITXT[PC0FWSIX] initialAttributes;
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
  end

  set PC0FM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0FM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0F340

// Verify the entered data
Function PC0F350()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.CAITEM > " ") /* Application data was entered*/
    set PC0FM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0FM002.XXXPRCNM = "PC0F350"; /* Process name*/

    return;

  end

end // end PC0F350

// customer special instr - add
Function PC0F400()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0F410(); /* Format and display the map*/

  PC0F420(); /* Check attention identifier*/

  PC0F430(); /* Reset fields to normal intensity*/

  PC0F440(); /* verify the entered data*/

  PC0F450(); /* process valid input request*/

end // end PC0F400

// Format and display the map
Function PC0F410()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

    set PC0FM002 initial; /* clear map pc0fm002*/
    PC0FM002.XGPCD = COMMAREA.XGPCD;
    if (COMMAREA.XGPCD in XGPTBL.XGPCD)
      PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0FM002.YSICD = PCWREC.YSICD;
    if (PCWREC.YSICD in YSITBL.YSICD)
      PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0FM002.PC2CUXID = PCWREC.PC2CUXID;
    PC0FM002.PC2NAME = PC0FW01.PC2NAME;
    PC0FM002.PCASTDFL = "N";
    PC0FM002.FY1FRGN = "N";
    PC0FM002.XXXSTAT = "A";

    set PC0FM002.YSICD cursor, normal; /* Position cursor*/
    PC0FM002.PC0FMFNC = "ADD";

  end

  if (PC0FW01.PC0FWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0FM002.XXXPRCNM = "PC0F410"; /* process name*/
    PC0FW01.PC0FWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEST SENTENCE*/
    else
      set PC0FM002 alarm; /* sound the alarm*/
    end
  end

  set PC0FM002.XXXSTAT protect; /* protect on add*/
  PC0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0FM002 ;

  PC0FW01.PC0FWPSW = "N"; /* Initialize problem switch*/
  PC0FW01.PC0FWBYF = "N"; /* Initialize bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0F411(); /* check of ? inquiry by user*/
  end

   /* load commarea*/

  COMMAREA.XGPCD = PC0FM002.XGPCD;
  PCWREC.PC2CUXID = PC0FM002.PC2CUXID;
  PCWREC.YSICD = PC0FM002.YSICD;

end // end PC0F410

// Check for ? inquiry by user
Function PC0F411()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0FM002.XGPCD == "?"
   || PC0FM002.YSICD == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0FM002.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0FM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0FM002.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* move name*/
      else
        PC0FM002.XGPCD = COMMAREA.XGPCD;
        if (COMMAREA.XGPCD in XGPTBL.XGPCD)
          PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
        end
      end

      set PC0FM002.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check special instruction type for ?*/
    /* *************************************************************/

    if (PC0FM002.YSICD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  SPECIAL INSTRUCTION TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSI01(); /* perform special instr type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0FM002.YSICD = YSITBL.YSICD[XX0XWPIX]; /* move code*/
        PC0FM002.YSISDESC = YSITBL.YSISDESC[XX0XWPIX]; /* move name*/
      else
        PC0FM002.YSICD = PCWREC.YSICD;
        if (PCWREC.YSICD in YSITBL.YSICD)
          PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
        end
      end

      set PC0FM002.YSICD cursor; /* set cursor*/

    end

    converseLib.clearScreen();

    PC0FW01.PC0FWBYF = "Y";

  end


end // end PC0F411

// Check attention identifier
Function PC0F420()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0fm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0FS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0FM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0FM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0FW01.PC0FWPSW = "Y"; /* Set error switch*/
      PC0FW01.PC0FWMAP = 1; /* display list screen*/
      PC0FM001.XXXPRCNM = "PC0F420"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0FM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0FM002.XXXPRCNM = "PC0F420"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer special instruction list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0FW01.PC0FWSWR = "Y"; /* request for data yes*/
    PC0FW01.PC0FWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0FM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0FS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0FW01.PC0FWMAP = 1; /* reset map*/
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F420"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0FM002.XXXPRCNM = "PC0F420"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0F420

// Reset highlighted fields
Function PC0F430()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0FM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0FM002.YSICD initialAttributes; /* special instr. type*/
  set PC0FM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0FM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0FM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0FM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0FM002.XXXSTAT initialAttributes; /* status code*/
  set PC0FM002.PC2CUXID initialAttributes; /* customer xref type*/

  PC0FW01.PC0FWSIX = 1; /* init spec text index*/
  while (PC0FW01.PC0FWSIX <= 13)
    set PC0FM002.PCBSITXT[PC0FWSIX] initialAttributes;
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
  end

  set PC0FM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0FM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0F430

// Verify the entered data
Function PC0F440()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0FW01.PC0FWDEF = "N"; /* initialize data entered flag*/

  if (PC0FM002.CAITEM > " ") /* Application data was entered*/
    set PC0FM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0FM002.XXXPRCNM = "PC0F440"; /* Process name*/

    exit stack;

  end

  if (converseVar.eventKey is enter) /* if enter was pressed*/
    PC0F441(); /* validate input data*/
  end

end // end PC0F440

// validate input data
Function PC0F441()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWSIX = 13;
  PC0FW01.PC0FWTEF = "N";
  while (PC0FW01.PC0FWSIX >= 1
   && PC0FW01.PC0FWTEF == "N")
    if (PC0FM002.PCBSITXT[PC0FWSIX] != " ")
      PC0FW01.PC0FWTEF = "Y";
    end

    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1; /* incr. index*/

  end

  if (PC0FW01.PC0FWTEF == "N")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    PC0FW01.PC0FWSIX = 13;
    while (PC0FW01.PC0FWSIX >= 1)
      set PC0FM002.PCBSITXT[PC0FWSIX] cursor, modified, bold;

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify customer xref code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PC2CUXID != " ")

    set PC2REC empty; /* clear pc2rec*/

    PC2REC.XGPCD = PC0FM002.XGPCD;
    PC2REC.PC2CUXID = PC0FM002.PC2CUXID;

    PC0FS02(); /* select customer xref row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0FM002.PC2NAME = PC2REC.PC2NAME;
      PC0FW01.PC2NAME = PC2REC.PC2NAME;
    else
      converseLib.validationFailed(123); /* missing/invalid cust xref code*/
      PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
      PC0FM002.PC2NAME = " "; /* clear map cust xref desc*/
      PC0FW01.PC2NAME = " "; /* clear map cust xref desc*/
      set PC0FM002.PC2CUXID cursor, modified, bold;
    end
  else
    converseLib.validationFailed(45); /* missing/invalid cust xref code*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    PC0FM002.PC2NAME = " "; /* clear map cust xref desc*/
    PC0FW01.PC2NAME = " "; /* clear map cust xref desc*/
    set PC0FM002.PC2CUXID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate customer special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PCASIDSC == " ")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    set PC0FM002.PCASIDSC cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate status code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.XXXSTAT != "A"
   && PC0FM002.XXXSTAT != "I")
    converseLib.validationFailed(37); /* missing/invalid status code*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    set PC0FM002.XXXSTAT cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* Validate offshore flag*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.FY1FRGN != "Y"
   && PC0FM002.FY1FRGN != "N")
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    set PC0FM002.FY1FRGN cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate standard print flag*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PCASTDFL != "Y"
   && PC0FM002.PCASTDFL != "N")
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    set PC0FM002.PCASTDFL cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate special instruction type*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.YSICD != " ")
    if (PC0FM002.YSICD in YSITBL.YSICD
     && YSITBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active spec instr type*/
      PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(67); /* missing/invalid spec instr type*/
      PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
      PC0FM002.YSISDESC = " "; /* clear map spec instr desc*/
      set PC0FM002.YSICD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(67); /* missing/invalid spec instr type*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    PC0FM002.YSISDESC = " "; /* clear map spec instr desc*/
    set PC0FM002.YSICD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate po type code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PC4ORTYP != " ")

    set PC4REC empty; /* clear pc4rec*/

    PC4REC.XGPCD = PC0FM002.XGPCD;
    PC4REC.PC4ORTYP = PC0FM002.PC4ORTYP;

    PC0FS05(); /* select customer xref row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0FM002.PC4SDESC = PC4REC.PC4SDESC;
    else
      PC0FM002.PC4SDESC = " ";
      PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
      converseLib.validationFailed(124); /* invalid po type for this gpc*/
      set PC0FM002.PC4ORTYP cursor, modified, bold;
    end
  else
    PC0FM002.PC4SDESC = " ";
  end

   /* ------------------------------------------------------------*/
   /* Verify gpc code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.XGPCD != " ")
    if (PC0FM002.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active gpc code*/
      PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      if (PC0FM002.XGPCD != "01"
       && PC0FM002.XGPCD != "02"
       && PC0FM002.XGPCD != "03"
       && PC0FM002.XGPCD != "07")
        converseLib.validationFailed(185); /* gpc invalid for po system*/
        PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
        PC0FM002.XGPABRV = " "; /* clear map gpc desc*/
        set PC0FM002.XGPCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(28); /* missing/invalid gpc*/
      PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
      PC0FM002.XGPABRV = " "; /* clear map gpc desc*/
      set PC0FM002.XGPCD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(28); /* missing/invalid gpc*/
    PC0FM002.XXXPRCNM = "PC0F441"; /* load process name*/
    PC0FM002.XGPABRV = " "; /* clear map gpc desc*/
    set PC0FM002.XGPCD cursor, modified, bold;
  end

end // end PC0F441

// process valid input request
Function PC0F450()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWDEF == "N"           /* no data entered*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0FW01.PC0FWBYF == "Y")          /* bypass processing*/
    return;
  end

  set PCCREC empty; /* init customer special instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

  PCDREC.XGPCD = PC0FM002.XGPCD;

  PC0FS13(); /* select next spec instr number*/

   /* load customer special instruction header*/

  PCCREC.XGPCD = PC0FM002.XGPCD;
  PCCREC.PCASINBR = PCDREC.PCDSINBR;
  PCCREC.PC2CUXID = PC0FM002.PC2CUXID;
  PCCREC.PC4ORTYP = PC0FM002.PC4ORTYP;
  PCCREC.YSICD = PC0FM002.YSICD;
  PCCREC.PCASIDSC = PC0FM002.PCASIDSC;
  PCCREC.PCASTDFL = PC0FM002.PCASTDFL;
  PCCREC.FY1FRGN = PC0FM002.FY1FRGN;
  PCCREC.XXXSTAT = PC0FM002.XXXSTAT;
  PCCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0FS16(); /* add customer special instr header*/

   /* determine the number of special msg text lines to be added*/

  PC0FW01.PC0FWSIX = 13;
  while (PC0FM002.PCBSITXT[PC0FWSIX] == " ")
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1;
  end

   /* load special instruction text*/

  PCBREC.XGPCD = PC0FM002.XGPCD;
  PCBREC.PCASINBR = PCDREC.PCDSINBR;
  PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PC0FW01.PC0FWLIX = PC0FW01.PC0FWSIX;
  PC0FW01.PC0FWSIX = 1;
  while (PC0FW01.PC0FWSIX <= PC0FW01.PC0FWLIX)

    PCBREC.PCBSISEQ = PC0FW01.PC0FWSIX;
    PCBREC.PCBSITXT = PC0FM002.PCBSITXT[PC0FWSIX];

    PC0FS15(); /* add special instruction text*/

    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  PC0FW01.PC0FWMFL = "Y"; /* set message flag*/
  PC0FM002.XXXPRCNM = "PC0F450";

end // end PC0F450

// customer special instr - chg
Function PC0F500()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0F510(); /* obtain data to display*/

  PC0F520(); /* Format and display the map*/

  PC0F530(); /* Check attention identifier*/

  PC0F540(); /* Reset fields to normal intensity*/

  PC0F550(); /* Verify the entered data*/

  PC0F560(); /* process valid input request*/

end // end PC0F500

// select spec instr text row(s)
Function PC0F510()

   /* ------------------------------------------------------------*/
   /* select special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/
    set PC0FM002 initial; /* clear screen pc0fm002*/

    set PCBREC empty; /* init spec. text rec pcbrec*/
    move " " to PC0FWTXT[1] for all; /* clear w/s text table*/

    PCBREC.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

    PC0FS09(); /* select set and open the cursor*/

    PC0FW01.PC0FWSIX = 1; /* init spec.instr. line index*/
    PC0FW01.PC0FWSTW = "N"; /* init spec. instr. text switch*/

    PC0FS10(); /* fetch pcbrec row*/

    while (PC0FW01.PC0FWSIX <= 13 /* CAN NOT EXCEED 13 ENTRIES*/
     && PC0FW01.PC0FWSTW == "N") /* until end of set*/

      PC0FM002.PCBSITXT[PC0FWSIX] = PCBREC.PCBSITXT;
      PC0FW01.PCBSITXT[PC0FWSIX] = PCBREC.PCBSITXT;

      PC0FS10(); /* fetch pcbrec row*/

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1; /* incr. index*/

    end

    PC0FS11(); /* close pcbrec row*/

  end

end // end PC0F510

// Format and display the map
Function PC0F520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0FW01.PC0FWBYF == "N")          /* do not bypass processing*/

     /* load customer special instruction from temp storage*/

    PC0FM002.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
    if (PC0FW02.XGPCD[PC0FWIXM] in XGPTBL.XGPCD)
      PC0FM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0FM002.YSICD = PC0FW02.YSICD[PC0FWIXM];
    if (PC0FW02.YSICD[PC0FWIXM] in YSITBL.YSICD)
      PC0FM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0FM002.PCASIDSC = PC0FW02.PCASIDSC[PC0FWIXM];
    PC0FM002.PC4ORTYP = PC0FW02.PC4ORTYP[PC0FWIXM];
    PC0FM002.PC4SDESC = PC0FW02.PC4SDESC[PC0FWIXM];
    PC0FM002.PCASTDFL = PC0FW02.PCASTDFL[PC0FWIXM];
    PC0FM002.FY1FRGN = PC0FW02.FY1FRGN[PC0FWIXM];
    PC0FM002.XXXSTAT = PC0FW02.XXXSTAT[PC0FWIXM];
    PC0FM002.PC2CUXID = PC0FM001.PC2CUXID;
    PC0FM002.PC2NAME = PC0FM001.PC2NAME;

    set PC0FM002.PCASIDSC cursor; /* Position cursor*/
    PC0FW01.PC0FWCIX = PC0FW01.PC0FWIXM; /* save to position cursor*/
    PC0FW02.PC0FMSEL[PC0FWIXM] = "V";

    PC0FS12(); /* update temp storage*/

  end

   /* protect key fields*/

  set PC0FM002.XGPCD protect; /* Gpc code*/
  set PC0FM002.YSICD protect; /* special instr. type code*/
  set PC0FM002.PC2CUXID protect; /* customer xref code*/

  if (PC0FM002.XXXSTAT == "I")
    set PC0FM002.PCASIDSC protect;
    set PC0FM002.PC4ORTYP protect;
    set PC0FM002.PCASTDFL protect;
    set PC0FM002.FY1FRGN protect;
    set PC0FM002.XXXSTAT cursor;
    PC0FW01.PC0FWSIX = 1;
    while (PC0FW01.PC0FWSIX <= 13)
      set PC0FM002.PCBSITXT[PC0FWSIX] protect;
      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
    end
  end

  PC0FM002.PC0FMFNC = "CHANGE"; /* Move inquiry literal to map*/
  PC0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC0FW01.PC0FWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0FM002.XXXPRCNM = "PC0F520"; /* process name*/
    PC0FW01.PC0FWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEST SENTENCE*/
    else
      set PC0FM002 alarm; /* sound the alarm*/
    end
  end

  converse PC0FM002 ;

  PC0FW01.PC0FWPSW = "N"; /* Initialize problem switch*/
  PC0FW01.PC0FWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0F520

// Check attention identifier
Function PC0F530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0fm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0FS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init commarea*/
      COMMAREA.CATOAP = PC0FM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0FM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0FW01.PC0FWPSW = "Y"; /* Set error switch*/
      PC0FW01.PC0FWMAP = 1; /* display list screen*/
      PC0FM001.XXXPRCNM = "PC0F530"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0FM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0FM002.XXXPRCNM = "PC0F530"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer special instruction list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0FW01.PC0FWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0FM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0FS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0FW01.PC0FWMAP = 1; /* reset map*/
    PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
    PC0FM001.XXXPRCNM = "PC0F530"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0FM002.XXXPRCNM = "PC0F530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0FW01.PC0FWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0F530

// Reset highlighted fields
Function PC0F540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0FM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0FM002.YSICD initialAttributes; /* special instr. type*/
  set PC0FM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0FM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0FM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0FM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0FM002.XXXSTAT initialAttributes; /* status code*/
  set PC0FM002.PC2CUXID initialAttributes; /* customer xref type*/

  PC0FW01.PC0FWSIX = 1; /* init spec text index*/
  while (PC0FW01.PC0FWSIX <= 13)
    set PC0FM002.PCBSITXT[PC0FWSIX] initialAttributes;
    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
  end

  set PC0FM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0FM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0F540

// Verify the entered data
Function PC0F550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0FW01.PC0FWDEF = "N"; /* initialize data entered flag*/

  if (PC0FM002.CAITEM > " ") /* Application data was entered*/
    set PC0FM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0FM002.XXXPRCNM = "PC0F550"; /* Process name*/

    exit stack;

  end

   /* if no changes have been applied bypass edits*/

  if (PC0FM002.PC4ORTYP == PC0FW02.PC4ORTYP[PC0FWIXM]
   && PC0FM002.PCASTDFL == PC0FW02.PCASTDFL[PC0FWIXM]
   && PC0FM002.PCASIDSC == PC0FW02.PCASIDSC[PC0FWIXM]
   && PC0FM002.PCASTDFL == PC0FW02.PCASTDFL[PC0FWIXM]
   && PC0FM002.FY1FRGN == PC0FW02.FY1FRGN[PC0FWIXM]
   && PC0FM002.XXXSTAT == PC0FW02.XXXSTAT[PC0FWIXM])
    PC0FW01.PC0FWSIX = 1;
    PC0FW01.PC0FWTEF = "N";
    while (PC0FW01.PC0FWSIX <= 13)
      if (PC0FW01.PCBSITXT[PC0FWSIX] != PC0FM002.PCBSITXT[PC0FWSIX])
        PC0FW01.PC0FWTEF = "Y"; /* text entered flag*/
      end
      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
    end

    if (PC0FW01.PC0FWTEF == "N")
      return;
    end
  end

  PC0F551(); /* validate input data*/

end // end PC0F550

// validate input data
Function PC0F551()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0FW01.PC0FWSIX = 13;
  PC0FW01.PC0FWTEF = "N";
  while (PC0FW01.PC0FWSIX >= 1
   && PC0FW01.PC0FWTEF == "N")
    if (PC0FM002.PCBSITXT[PC0FWSIX] != " ")
      PC0FW01.PC0FWTEF = "Y";
    end

    PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1; /* incr. index*/

  end

  if (PC0FW01.PC0FWTEF == "N")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
    PC0FW01.PC0FWSIX = 13;
    while (PC0FW01.PC0FWSIX >= 1)
      set PC0FM002.PCBSITXT[PC0FWSIX] cursor, modified, bold;

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* validate customer special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PCASIDSC == " ")
    PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    set PC0FM002.PCASIDSC cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate status code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.XXXSTAT != "A"
   && PC0FM002.XXXSTAT != "I")
    PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
    converseLib.validationFailed(37); /* missing/invalid status code*/
    set PC0FM002.XXXSTAT cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* Validate offshore flag*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.FY1FRGN != "Y"
   && PC0FM002.FY1FRGN != "N")
    PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    set PC0FM002.FY1FRGN cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate standard print flag*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PCASTDFL != "Y"
   && PC0FM002.PCASTDFL != "N")
    PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    set PC0FM002.PCASTDFL cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate po type code*/
   /* ------------------------------------------------------------*/

  if (PC0FM002.PC4ORTYP != " ")

    set PC4REC empty; /* clear pc4rec*/

    PC4REC.XGPCD = PC0FM002.XGPCD;
    PC4REC.PC4ORTYP = PC0FM002.PC4ORTYP;

    PC0FS05(); /* select customer xref row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0FM002.PC4SDESC = PC4REC.PC4SDESC;
    else
      PC0FM002.PC4SDESC = " ";
      converseLib.validationFailed(124); /* missing/invalid po type code*/
      PC0FM002.XXXPRCNM = "PC0F551"; /* load process name*/
      set PC0FM002.PC4ORTYP cursor, modified, bold;
    end
  else
    PC0FM002.PC4SDESC = " ";
  end


end // end PC0F551

// process valid input request
Function PC0F560()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWDEF == "N"           /* data has not changed*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0FW01.PC0FWBYF == "Y")          /* bypass processing*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* init customer special instruction hdr and detial records*/
   /* ------------------------------------------------------------*/

  set PCCREC empty; /* init customer special instr rec*/
  set PCBREC empty; /* init special instr text rec*/

   /* ------------------------------------------------------------*/
   /* obtain current date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* obtain current date and time*/


   /* ------------------------------------------------------------*/
   /* udpate customer special instruction header information*/
   /* ------------------------------------------------------------*/

  PCCREC.XGPCD = PC0FM002.XGPCD;
  PCCREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

  PC0FS17(); /* select customer special instr hdr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* cust spec instr hdr has been deleted*/
    PC0FM001.XXXPRCNM = "PC0F560";
    PC0FW01.PC0FWMAP = 1; /* reset map*/
    PC0FW01.XGPCD = " "; /* force validation routine*/
    converseLib.validationFailed(26); /* data deleted by another application*/
    exit stack;
  else
    PCCREC.YSICD = PC0FM002.YSICD;
    PCCREC.PC4ORTYP = PC0FM002.PC4ORTYP;
    PCCREC.PCASIDSC = PC0FM002.PCASIDSC;
    PCCREC.PCASTDFL = PC0FM002.PCASTDFL;
    PCCREC.FY1FRGN = PC0FM002.FY1FRGN;
    PCCREC.XXXSTAT = PC0FM002.XXXSTAT;
    PCCREC.ZZZCHGCT = PC0FW02.ZZZCHGCT[PC0FWIXM];
    PCCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PCCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0FS18(); /* upd customer special instr header*/

    if (SQLCA.VAGen_SQLCODE == 100)

      PC0F561(); /* upd temp storage/screen w/upd data*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If customer special instruction text information changed*/
   /* update table row*/
   /* ------------------------------------------------------------*/

  if (PC0FW01.PC0FWPSW == "N")
    PC0FW01.PC0FWSIX = 1;
    PC0FW01.PC0FWTEF = "N";
    while (PC0FW01.PC0FWSIX <= 13)
      if (PC0FW01.PCBSITXT[PC0FWSIX] != PC0FM002.PCBSITXT[PC0FWSIX])
        PC0FW01.PC0FWTEF = "Y";
      end
      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;
    end

    if (PC0FW01.PC0FWTEF == "Y") /* special message text changed*/

      PCBREC.XGPCD = PC0FM002.XGPCD;
      PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

      PC0FS19(); /* delete pcbrec set*/

       /* Determine how many message text lines to add*/
       /* (bypass blank lines)*/

      PC0FW01.PC0FWSIX = 13;
      while (PC0FM002.PCBSITXT[PC0FWSIX] == " ") /* determine load index*/
        PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX - 1;
      end

       /* Load special message text data*/

      PC0FW01.PC0FWLIX = PC0FW01.PC0FWSIX; /* max entries*/
      PC0FW01.PC0FWSIX = 1;
      PCBREC.XGPCD = PC0FM002.XGPCD;
      PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];
      PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
      PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      while (PC0FW01.PC0FWSIX <= PC0FW01.PC0FWLIX)
        PCBREC.PCBSISEQ = PC0FW01.PC0FWSIX;
        PCBREC.PCBSITXT = PC0FM002.PCBSITXT[PC0FWSIX];

        PC0FS15(); /* add special instruction text*/

        PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1;

      end
    end
  end

  if (PC0FW01.PC0FWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll out all database changes*/
  else

     /* update temp storage (customer special instruction info)*/

    PC0FW02.YSICD[PC0FWIXM] = PCCREC.YSICD;
    PC0FW02.PC4ORTYP[PC0FWIXM] = PCCREC.PC4ORTYP;
    PC0FW02.PCASIDSC[PC0FWIXM] = PCCREC.PCASIDSC;
    PC0FW02.PCASTDFL[PC0FWIXM] = PCCREC.PCASTDFL;
    PC0FW02.FY1FRGN[PC0FWIXM] = PCCREC.FY1FRGN;
    PC0FW02.XXXSTAT[PC0FWIXM] = PCCREC.XXXSTAT;
    PC0FW02.ZZZCHGCT[PC0FWIXM] = PCCREC.ZZZCHGCT;

    PC0FS12(); /* update temp storage*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* changes completed*/
    PC0FW01.PC0FWMFL = "Y"; /* data update flag*/
  end

  PC0FM002.XXXPRCNM = "PC0F560"; /* process name*/

end // end PC0F560

// upd temp storage/map
Function PC0F561()

   /* ------------------------------------------------------------*/
   /* if customer special instruction data changed obtain both*/
   /* the customer special instruction hdr and text to update*/
   /* temporary storage and map fields.*/
   /* ------------------------------------------------------------*/

  PCCREC.XGPCD = PC0FM002.XGPCD;
  PCCREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

  PC0FS17(); /* select customer special instr.*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0FM001.XXXPRCNM = "PC0F561"; /* load process name*/
    PC0FW01.PC0FWMAP = 1; /* display list screen*/
    PC0FW01.XGPCD = " "; /* force validation*/
    converseLib.validationFailed(26); /* data deleted by another appl.*/
    exit stack; /* exit*/
  end

  PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
  converseLib.validationFailed(12); /* data updated by another appl.*/

   /* update temp storage*/

  PC0FW02.PC4ORTYP[PC0FWIXM] = PCCREC.PC4ORTYP;
  PC0FW02.PCASIDSC[PC0FWIXM] = PCCREC.PCASIDSC;
  PC0FW02.PCASTDFL[PC0FWIXM] = PCCREC.PCASTDFL;
  PC0FW02.FY1FRGN[PC0FWIXM] = PCCREC.FY1FRGN;
  PC0FW02.XXXSTAT[PC0FWIXM] = PCCREC.XXXSTAT;
  PC0FW02.ZZZCHGCT[PC0FWIXM] = PCCREC.ZZZCHGCT;

  PC0FS12(); /* update temp storage*/

   /* update pc0fm002 map*/

  PC0FM002.PC4ORTYP = PCCREC.PC4ORTYP;
  PC0FM002.PCASIDSC = PCCREC.PCASIDSC;
  PC0FM002.PCASTDFL = PCCREC.PCASTDFL;
  PC0FM002.FY1FRGN = PCCREC.FY1FRGN;
  PC0FM002.XXXSTAT = PCCREC.XXXSTAT;

   /* reload message text for display*/

  set PCBREC empty; /* init spec. text rec pcbrec*/
  move " " to PC0FWTXT[1] for all; /* clear w/s text table*/

  PCBREC.XGPCD = PC0FW02.XGPCD[PC0FWIXM];
  PCBREC.PCASINBR = PC0FW02.PCASINBR[PC0FWIXM];

  PC0FS09(); /* select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PC0FW01.PC0FWSIX = 1; /* init spec.instr. line index*/
    PC0FW01.PC0FWSTW = "N"; /* init spec. instr. text switch*/

    PC0FS10(); /* fetch pcbrec row*/

    while (PC0FW01.PC0FWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display and compare use*/

      if (PC0FW01.PC0FWSTW == "N")
        PC0FM002.PCBSITXT[PC0FWSIX] = PCBREC.PCBSITXT;
        PC0FW01.PCBSITXT[PC0FWSIX] = PCBREC.PCBSITXT;
      else
        PC0FM002.PCBSITXT[PC0FWSIX] = " ";
      end

      PC0FS10(); /* fetch pcbrec row*/

      PC0FW01.PC0FWSIX = PC0FW01.PC0FWSIX + 1; /* incr. index*/

    end

    PC0FS11(); /* close pcbrec row*/

  end

end // end PC0F561

// Purge temp storage
Function PC0FS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PC0F"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0FS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PC0FW01.PC0FWTSP = 0; /* Reset current page number*/
  PC0FW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PC0FS01

// Select cust. xref row
Function PC0FS02()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT CUST. XREF ROW      ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PC0FW01.PC0FWMAP == 1)
    PC0FW01.XGPCD = " "; /* force key validation*/
    PC0FM001.XXXPRCNM = "PC0FS02"; /* Process name*/
  else
    if (PC0FW01.PC0FWMAP == 2)
      PC0FM002.XXXPRCNM = "PC0FS02"; /* Process name*/
    end
  end

  exit stack;

end // end PC0FS02

// Select Set pccrec (S1)
Function PC0FS03()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("S1", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS03"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCCREC.PCCGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FW01.XGPCD = " "; /* force key validation*/
  PC0FM001.XXXPRCNM = "PC0FS03"; /* Process name*/

  exit stack;

end // end PC0FS03

// Fetch pccrec row
Function PC0FS04()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("N1", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0FW01.PC0FWCSW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCCREC.PCCGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FW01.XGPCD = " "; /* force key validation*/
  PC0FM001.XXXPRCNM = "PC0FS04"; /* Process name*/

  exit stack;

end // end PC0FS04

// Select p.o. type row
Function PC0FS05()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS05"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. TYPE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PC0FW01.PC0FWMAP == 1)
    PC0FW01.XGPCD = " "; /* force key validation*/
    PC0FM001.XXXPRCNM = "PC0FS05"; /* Process name*/
  else
    if (PC0FW01.PC0FWMAP == 2)
      PC0FM002.XXXPRCNM = "PC0FS05"; /* Process name*/
    end
  end

  exit stack;

end // end PC0FS05

// Add page to temp storage
Function PC0FS06()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0FW02.PC0FWLEN = 756; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0F"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PC0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* everything is a-ok*/
    PC0FW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PC0FW01.PC0FWIXM = 1; /* Reset display line number*/
    set PC0FW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS06"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* SUBROUTINE PARAMETERS*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0FM001.XXXPRCNM = "PC0FS06"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0FW01.PC0FWSWR = "Y"; /* request data*/

  end

end // end PC0FS06

// Close selected pccrec set
Function PC0FS07()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("C1", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS07"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    PC0FM001.XXXPRCNM = "PC0FS07"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0FW01.PC0FWSWR = "Y"; /* request data*/

    exit stack;

  end

end // end PC0FS07

// Obtain lines from temp storage
Function PC0FS08()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0FW02.PC0FWLEN = 756; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0F"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0FW01.PC0FWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PC0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS08"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0FM001"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0FW01.PC0FWSWR = "Y"; /* request data*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0FM001.XXXPRCNM = "PC0FS08"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0FS08

// Select Set pcbrec (S1)
Function PC0FS09()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS09"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FW01.PC0FWMAP = "1"; /* display list map*/
  PC0FM001.XXXPRCNM = "PC0FS09"; /* Process name*/

  exit stack;

end // end PC0FS09

// Fetch pcbrec row
Function PC0FS10()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0FW01.PC0FWSTW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS10"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM001.XXXPRCNM = "PC0FS10"; /* Process name*/

  exit stack;

end // end PC0FS10

// Close selected pcbrec set
Function PC0FS11()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS11"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    PC0FM001.XXXPRCNM = "PC0FS11"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0FW01.PC0FWSWR = "Y"; /* request data*/

    exit stack;

  end

end // end PC0FS11

// update temporary storage
Function PC0FS12()

   /* ------------------------------------------------------------*/
   /* Update the temp storage page.*/
   /* ------------------------------------------------------------*/

  PC0FW02.PC0FWLEN = 756; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0F"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0FW01.PC0FWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PC0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS12"; /* Process name*/
    TA1REC.TA1LOC = "UPD PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0FM002"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0FW01.PC0FWSWR = "Y"; /* request data*/
    PC0FW01.PC0FWMAP = 1; /* redisplay list screen*/
    PC0FM001.XXXPRCNM = "PC0FS12"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0FS12

// Select next spec inst nbr
Function PC0FS13()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS13"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT INSTR. NBR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.PCDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
  PC0FM002.XXXPRCNM = "PC0FS13"; /* Process name*/

  exit stack;

end // end PC0FS13

// Add p.o. spec instr hdr row
Function PC0FS14()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("A ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS14"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FW01.PC0FWPSW = "Y"; /* set problem switch*/
  PC0FM002.XXXPRCNM = "PC0FS14"; /* Process name*/

  exit stack;

end // end PC0FS14

// Add spec instr text row
Function PC0FS15()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS15"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0CS15"; /* Process name*/

  exit stack;

end // end PC0FS15

// Add cust spec instr hdr row
Function PC0FS16()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("A ", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS16"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0CS16"; /* Process name*/

  exit stack;

end // end PC0FS16

// Select cust spec inst hdr
Function PC0FS17()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("S ", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS17"; /* Process name*/
  TA1REC.TA1LOC = "SELECT CUST INSTR. HDR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCCREC.PCCGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0FS17"; /* Process name*/

  exit stack;

end // end PC0FS17

// upd cust spec instr hdr row
Function PC0FS18()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3230" ("U ", SQLCA, PCCREC) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS18"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0CS18"; /* Process name*/

  exit stack;

end // end PC0FS18

// del spec instr text rows
Function PC0FS19()

   /* ------------------------------------------------------------*/
   /* This module deletes table rows*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("D ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* del table rows*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS19"; /* Process name*/
  TA1REC.TA1LOC = "DEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0CS19"; /* Process name*/

  exit stack;

end // end PC0FS19

// Select Set pc6rec (S7)
Function PC0FS20()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S7*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS20"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0FS20"; /* Process name*/

  exit stack;

end // end PC0FS20

// Fetch pc6rec row
Function PC0FS21()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0FW01.PC0FWPOI = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0FW01.PC0FWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS21"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0FS21"; /* Process name*/

  exit stack;

end // end PC0FS21

// upd po item row
Function PC0FS22()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "UA";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS22"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0CS22"; /* Process name*/

  exit stack;

end // end PC0FS22

// Close selected pc6rec set
Function PC0FS23()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Close table set C7*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0FS23"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    PC0FM002.XXXPRCNM = "PC0FS23"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    exit stack;

  end

end // end PC0FS23

// Insert item audit row VPOAIT01
Function PC0FS24()

   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* Init audit record*/
  VPOAIT02.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM03.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM03.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM03.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM03.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM03.XPGCD; /* Package*/
  VPOAIT02.XPRCD = VPOITM03.XPRCD; /* product type*/
  VPOAIT02.XUMCD = VPOITM03.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM03.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM03.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM03.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM03.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM03.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM03.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM03.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = VPOITM03.PC6XCTCD; /* dest country*/
  VPOAIT02.OP1PARTN = VPOITM03.OP1PARTN; /* op part char*/
  VPOAIT02.OP1NORID = VPOITM03.OP1NORID; /* op nike id*/
  VPOAIT02.OP1CUOID = VPOITM03.OP1CUOID; /* op cust id*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM03.PC4ORTYP; /* PO type*/
  VPOAIT02.PA1OANBR = 0; /* PA_ORD_ADJ_NBR*/
  VPOAIT02.YACCD = " "; /* Audit comment code*/
  VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  VPOAIT02.PCIBFRA = "SPECIAL INSTR"; /* Before image*/
  VPOAIT02.PCIAFTA = " "; /* After image*/

   /* SAVE SEQUENCE NUMBER IN AFTER NUMBER*/

  VPOAIT02.PCIAFTN = PCGREC.PCASINBR; /* after number*/

  if (VPOITM03.XGPCD == "02")
    VPOAIT02.YOACD = "32"; /* Audit code*/
  else
    VPOAIT02.YOACD = "78"; /* Audit code*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header*/
   /* ------------------------------------------------------------*/
  PC0FS25(); /* Obtain P.O. header*/
  if (VPOHDR02.PC3NISFL == "Y"
   || VPOHDR02.PC3NISFL == "N")
    VPOAIT02.PCJAMEND = "5";
  else
    VPOAIT02.PCJAMEND = "3";
  end

  PC0FSA8(); /* get and load change memo and order*/
                                   /* adj memo flags*/

  VPOAIT02.XDSCD = VPOITM03.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM03.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM03.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM03.PG1SC4CD; /* Scheduler code*/

  XX0XS01(); /* Get date and time*/
  /* ---------------------- BEGIN ------------------------------*/
  /* added this loop to prevent having same time stamp for*/
  /* different audit records which were causing -811 in*/
  /* while printing the change memos*/
  /* -----------------------------------------------------------*/
  PC0FW01.PC0F-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0FW01.PC0F-ZZHHMMSS)
    XX0XS01();
  end
  /* ------------------------ END --------------------------------*/

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS24"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM001.XXXPRCNM = "PC0FS24"; /* Module identification*/
  exit stack;

end // end PC0FS24

// Get PO header  DPRODC.VPOHDR01
Function PC0FS25()
   /* ------------------------------------------------------------*/
   /* Select unique PO number xref row from table.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init P.O. header record*/
  VPOHDR02.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0FM001.XXXPRCNM = "PC0FS25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0FS25"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0FS25

// Get PO header  DPRODC.VPOHDR01
Function PC0FS26()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/


      return;

    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0FM002.XXXPRCNM = "PC0FS26";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0FM002.XXXPRCNM = "PC0FS26";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0FS26"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0FM002.XXXPRCNM = "PC0FS26";
  exit stack;

end // end PC0FS26

// load chg memo and oa memo flag
Function PC0FSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ==> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0FM001.XXXPRCNM = "PC0FSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0fSA8 ***********************/
end // end PC0FSA8

//*** RECORD=PC0FW01 ****
// Working storage for pc0f - p.o. customer special instruction
// ***********************
Record PC0FW01 type basicRecord
  5 PC0FW1GP PC0FW1GP ; 
    10 PC0FWIXM PC0FWIXM ; 
    10 PC0FWLIX PC0FWLIX ; 
    10 PC0FWCIX PC0FWCIX ; 
    10 PC0FWSIX PC0FWSIX ; 
    10 PC0FWSTW PC0FWSTW ; 
    10 PC0FWCSW PC0FWCSW ; 
    10 PC0FWSFL PC0FWSFL ; 
    10 PC0FWTEF PC0FWTEF ; 
    10 PC0FWPSW PC0FWPSW ; 
    10 PC0FWCPY PC0FWCPY ; 
    10 PC0FWSWR PC0FWSWR ; 
    10 PC0FWTSP PC0FWTSP ; 
    10 PC0FWMAP PC0FWMAP ; 
    10 PC0FWFSW PC0FWFSW ; 
    10 PC0FWPOI PC0FWPOI ; 
    10 PC0FWTXT PC0FWTXT [13] ; 
      15 PCBSITXT PCBSITXT ; 
    10 XGPCD XGPCD ; 
    10 XGPDESC XGPDESC ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC2NAME PC2NAME ; 
    10 YSICD YSICD ; 
    10 YSIDESC YSIDESC ; 
    10 PC0FWCFL PC0FWCFL ; 
    10 PC0FWMFL PC0FWMFL ; 
    10 PC0FWDEF PC0FWDEF ; 
    10 PC0FWUPD PC0FWUPD ; 
    10 PC0FWBYF PC0FWBYF ; 
    10 PC0FWINQ PC0FWINQ ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PC0F-ZZHHMMSS PC0F-ZZHHMMSS ; 
end // end PC0FW01

//*** RECORD=PC0FW02 ****
// Temp. storage record for pc0f - p.o. customer spec inst list
// ***********************
Record PC0FW02 type basicRecord
  10 PC0FWLEN PC0FWLEN ; 
  10 PC0FWLIN PC0FWLIN [12] ; 
    15 PC0FMSEL PC0FMSEL ; 
    15 XGPCD XGPCD ; 
    15 PCASINBR PCASINBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC4SDESC PC4SDESC ; 
    15 YSICD YSICD ; 
    15 PCASIDSC PCASIDSC ; 
    15 PCASTDFL PCASTDFL ; 
    15 FY1FRGN FY1FRGN ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PC0FW02

//*** RECORD=PC0FW03 ****
// Temp. storage record for pc0f - p.o. customer spec inst list
// ***********************
Record PC0FW03 type basicRecord
  10 PCBSITXT PCBSITXT ; 
    15 * char(1) ; 
    15 PC0FWMIN PC0FWMIN ; 
    15 * char(1) ; 
    15 PC0FWCTY PC0FWCTY ; 
    15 * char(30) ; 
end // end PC0FW03

//*** RECORD=PCCREC ****
// *********  CUSTOMER SPECIAL INSTRUCTION HEADER  **********
// 
// DB2 TABLE:           DPRODC.VCUSSI01
// 
// COPYLIB MEMBER:      DCL00569
// 
// I/O MOD:             IO3230
// 
// KEY TO DB2 TABLE:    XGP_GPC_CD  (s)   XGP_GPC_CD  (s1)
//                      PC_SINST_NBR      PC_PRDCU_ID
//                                        YSI_TYP_CD BETWEEN
// 
// DATE CREATED:        05/11/89
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 05/11/89  RGILLI     INITIAL RECORD CREATION
// 
// ************************************************************
// **********************
Record PCCREC type basicRecord
  5 PCCGROUP PCCGROUP ; 
    10 XGPCD XGPCD ; 
    10 PCASINBR PCASINBR ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 YSICD YSICD ; 
    10 PCASIDSC PCASIDSC ; 
    10 PCASTDFL PCASTDFL ; 
    10 FY1FRGN FY1FRGN ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PCCREC

DataItem PC0F-ZZHHMMSS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection field
DataItem PC0FMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc0fw01 group level
DataItem PC0FW1GP char(918)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bypass processing flag
DataItem PC0FWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer special type flag
DataItem PC0FWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor index
DataItem PC0FWCIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// copy function requested
DataItem PC0FWCPY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of customer spec instr
DataItem PC0FWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin country
DataItem PC0FWCTY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data entered flag
DataItem PC0FWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add/del function switch
DataItem PC0FWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inquiry allowed
DataItem PC0FWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem PC0FWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage length
DataItem PC0FWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage line
DataItem PC0FWLIN char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load special msg text index
DataItem PC0FWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// map to be displayed
DataItem PC0FWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message flag
DataItem PC0FWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'made in' literal
DataItem PC0FWMIN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po item eof switch
DataItem PC0FWPOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem PC0FWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem PC0FWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr text index
DataItem PC0FWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of special instr text
DataItem PC0FWSTW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem PC0FWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special text data entered
DataItem PC0FWTEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage page
DataItem PC0FWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// verify chg in spec text
DataItem PC0FWTXT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updates allowed
DataItem PC0FWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PCCREC GROUP LEVEL
DataItem PCCGROUP char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

