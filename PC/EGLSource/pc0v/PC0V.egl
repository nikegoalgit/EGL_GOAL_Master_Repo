package pc0v;
import ab.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0V ****
//   This application allows apparel production users to create
// PO's from apparel buy data.
// 
//   First the scheduler wanting to create PO's will enter
// option '22' from the PO menu.  Their userid will be filled
// in on the apparel autoload selection screen and they must
// enter the option for creating PO's for blank T-shirts,
// screener T-shirts or other apparel items.  The scheduler
// control table will tell the program which buy month we are
// creating PO's for.
// 
//   Second, the user presses enter on the selection screen.
// A list screen is returned that shows all products that may
// be autoloaded (PO's created) for this scheduler and buy
// month.  All the products will be pre-selected since most all
// of them will be autoloaded as PO's.  The user may space out
// the 'S' in the selection field of those products they do not
// want to load at this time.  The format of the list screen
// varies slightly for blank T-shirts vs. screened T-shirts vs.
// regular apparel.
// 
//   Third, the user presses enter on the list screen.
// A detail screen will appear for the first selected product
// from the list screen.  This screen will list all the colors
// for a style that are ready to be autoloaded.
// 
// ('R'egular) will create PO's based on the following:
//    - option 'S'tyle; one PO per style/owner grp
//    - option 'C'olor; one PO per style/colr/owner grp
//    - option 'D'elete; marks the vbsize record
//      as being autoloaded.
//    - option 'V'erified; record was processed
// ('S'creened) will create PO's based on the following:
//    - option 'S'elect; one po per style/color.
//    - option 'D'elete; marks the vbsize record
//      as being autoloaded.
//    - option 'V'erified; record was processed
// ('B'lanks) will create PO's based on the following:
//    - option 'S'elect; one po per style/color.
//      - action code of 'B'uy, create one PO per blank
//        style/blank color.
//      - action code of 'P'ull-from-stock, create a stock
//        transfer at night.
//      - action code of 'R'edirect, split quantity from an
//        existing PO's quantities going to a split quantity
//        warehouse and create a new item going to the
//        screener.
//    - option 'D'elete; marks the vbsize record
//      as being autoloaded.
//    - option 'V'erified; record was processed
// ('U'ncrested) will create PO's based on the following:
//    - option 'S'tyle; one PO per style/owner grp.
//    - option 'C'olor; one PO per style/colr/owner grp
//    - option 'D'elete; marks the vbsize record
//      as being autoloaded.
//    - option 'V'erified; record was processed
// 
// All the colors for a product and associated sizes will show
// on this screen.  All this data equates to one apparel PO
// (with the exception of some blanks).  The apparel scheduler
// can either choose to autoload the data or skip it and
// proceed to subsequent products selected from the list screen
// 
// ************************************************************
// **                                                        **
// 
//   DATE     NAME   DESCRIPTION OF CHANGE
// --------  ------  ------------------------------------------
// 08/19/89  JNEWMA  New application.
// 
// 07/03/90  SFORD   Modified to use correct year for
//                      PO ID Date. PC0V361 & PC0V362
// 
// 07/11/90  SFORD   Modified "B" option to display & process
//                      each destination instead of combining
//                      into one item. (buy,PFS,RE_Direct)
// 
// 07/19/90  mchris  Modified "B" option in pc0vs14 to also
//                      match on buy type before updating the
//                      bsize status.
// 
// 07/20/90  mchris  Changed pc0vs30 to show an error if a
//                      blank redirect is trying to redirect
//                      to an existing po item.
//                   Change in pc0v363 to do an alternate
//                      update ('ua' - pc0vs38) so the cancel
//                      version number can be updated if need
//                      be.
// 
// 07/30/90  mchris  Modified pc0v362 to get po id info from
//                      pc3rec in all situations.  also modi-
//                      fied pc0vs31 to look at the blank
//                      redirect flags instead of a weird
//                      po id field (also in pc0v362).
// 08/21/90  mchris  include pfs whse in matching, selects and
//                      updates for blank tees, and screen
//                      t-shirts.  changed pc0v321 to only move
//                      xref fcty to cust for blank tees if it
//                      exists.
// 08/22/90  kdenne  Modified pc0v321 to show stock transfer #
//                      on screened t-shirts.
//                   Modified pc0v350 changed edit on stock
//                      transfer # to edited only for option
//                      'b's.
//                   Modified pc0v360 added logic to accept
//                      return code of 1022 from in9020 as
//                      valid.
//                   Modified pc0v364 to set in8ovrfl to bypass
//                      availability table look up and go
//                      directly to the update process in
//                      'in9040' call routine.
// 08/28/90  mchris  Modified pc0v361 to default origin ctry
//                      in fog ship point.
// 09/26/90  GAMEN   Work on invalid po #/stock xfer #
// 11/08/90  GAMEN   DB2 changes. Add init to pc_prebuild_fl
// 11/19/90  GAMEN   Highlight p.o. number when autoload is
//                   completed.
// 11/28/90  mchris  get scheduler code from map userid for
//                   nil po's.
// 12/03/90  mchris  increase absty table to 1000 to allow
//                   nil po's to be loaded.
// 12/05/90  GAMEN   Zero out misc. chg's when re-direct
//                   is all moved
// 02/21/91  GAMEN   Allow multiple p.o. nbr's for redirects
// 03/14/91  GAMEN   Fix redirect so that quantities for sizes
//                   not being split are not carried to the new
//                   p.o. line item (pc0vs31).
// 03/15/91  GAMEN   Add owner group code processing, remove
//                   preselecting, one style/color/owner for
//                   screen goods, allow 'sd'or 'cd' for screen
//                   goods only, and fix pf7/pf8 literals.
// 04/30/91  GAMEN   Include NIL only logic for ship via,
//                   shipping point, and made in country for
//                   everbody else. Fix delete on a redirect so
//                   the p.o. nbr is not moved from VPOITM02
//                   because it isn't there. Add Interim style
//                   code when it's a blank being processed so
//                   the p.o. type is 'SD' or 'CD'. Also, add
//                   code to select by factory.
// 06/12/91  GAMEN   Add code for DB2 changes for June.
// 06/26/91  TLEWIS  increase absty table to 2000 to allow
//                   nil po's to be loaded.
// 07/15/91  GAMEN   Default owner group code to IN for screens
//                   and blanks/interims.
// 08/12/91  GAMEN   Don't clear ETS on map3 when more than one
//                   row is selected.
// 10/08/91  GAMEN   Init fb-lat-bk-fl to 'N'. Footwear field.
//                   October DB2 changes.
// 12/12/91  lsutto  Default ship via field to 'CALL DANZAS'
//                   in pc0v361.
// 11/15/91  GAMEN   Make changes to handle xowcd in vabsty and
//                   vbplan tables. Added as part of the key.
// 03/03/92  GAMEN   Allow rtn cd of 1021 from in9040
// 03/10/92  GAMEN   add s.o. to dprodc.vpoasz01 for db2 chgs
// 02/03/92  GAMEN   add s.o. to VPOITM02 as key
// 05/20/92  GAMEN   add s.o. to screened processing
// 06/24/92  GAMEN   Add seasone and buy month to map 1 and
//                   don't pull from control table anymore.
// 10/23/92  GAMEN   Add TS5REC to balance of ship routine.
// 11/05/92  lsutto  'L' stat to vbplan when all styles on a
//                   sreener or blank po have been loaded
// 12/16/92  GAMEN   Add code for Uncrested Apparel.
// 06/16/93  GAMEN   Add zfc-crcy-cd for db2 changes.
// 08/10/93  lsutto  made csp4 changes (same as for EAO)
// *                 alone with aug93 db2 chng regen.
// 09/23/93  dhales  change xspcs05 requires appl regen
// 10/15/93  GAMEN   Add changes for whse 60 and 61.
// 10/20/93  DHALES  FIXED SO WOULDN'T ABEND FOR MORE THAN
//                   10 SIZES - PUT OUT ERROR INSTEAD
// 01/14/94  gamen   change the default for mode logic. if orig
//                   and dest ctry are the same, default to
//                   'vl' unlesss the from ctry is usa and the
//                   dest ctry is mexico or canada, then
//                   default to 'tr'.samples(ss,sx) set to 'af'
// 01/24/94  dhales  set the nissho sent flag to 'y' if the
//                   fcty is not foreign and the field office
//                   is 'EU'
// 08/08/94  SLEWIS  CHANGE FROM XSN TABLE TO YSN TABLE
// 11/04/94  chaert  change forwarder to airborne. pc0v361
// 01/20/95  gamen   change etal calc for aprl (xspcs07).
// 02/07/96  gamen   change ship via to call airborne for
//                   warehouse 42 and p.o. type XI if U.S. fcty
// 02/12/96  KGRAHA  POPULATE MANUFACTURING COUNTRY OF ORIGIN
//                   FIELD FROM DFCTY.Vfcty002 IN PC0V361.
// 03/04/96  jniese  PCA297 - Create PO's at Color level.
//                   Changed autoload to not set 'alarm' when
//                   a new po is created.  also modified to
//                   allow po's to be created at the color lvl.
//                   changed to allow autoload to occur when
//                   combination of sizes for a selection will
//                   exceed the 10 displayable sizes.
// 04/08/96  jniese  PCA297 - Corrected temp storage length.
// 04/24/96  jniese  PCA329 - change ship via for direct ship
// 06/07/96  kgraha  PCA310 - Default mode of transporttion to
//                   'AF' for PO's with a PO type of 'MP'.
// 06/19/96  jniese  PCA324 - change promo po and direct ship
//                   po types to use scheduler code entered.
// 07/23/96  jniese  PCY199 - Air Freight Percents
// 10/09/96  jniese  PCA999 - Change to create PO's when owner
//                   group changes.
// 11/26/96  jniese  PCA351 - Default mode of transportation to
//                   'tr' for pos from Canada to the USA.
// 12/06/96  jniese  PCA355 - Change own grp and sched cd for
//                   po type 'sd'
// 01/06/97  kgraha  PCA999 - Increase table space to 3000 in
//                   PC0V210.
// 03/24/97  GAMEN   PC0010 - Remove code for Stock Transfers
//                   which calls IN9040.
// 04/29/97  asunda  recompiled to get the new xspcs05
// 06/03/97  PHARWO  PCA367 - PPR PROJECT, PO VIEWS
// 07/06/97  jniese  PCA367 - ppr corrections
// 09/16/97  jniese  pca999-  convert to fcty002 view
// 11/05/97  kgraha  PCA415 - Add 'MX' po type.
// 12/11/97  vramac  PCA399 - Change 'DIRECT SHIP' to
//                   'DIRECT DELIVERY' in VPOHDR02.PC3SHVIA for
//                   po type 'MM' 'MD' 'DS' 'DC' or 'MP'
// 01/08/98  jniese  PCA399 - correct Ship Via logic for MX po
// 01/21/98  TTHAN1  Y2KFIX - CHANGE FOR NEW SIZE OF ABBUYMO.
// 02/10/98  DRAMSe  PCF146 - Changed to use VPRDCU03 instead
//                            of PC2REC. Also changed to call
//                            VPRDCU03 instead of IO3340.
//                            Changed occurs clause to 3000
//                            from 2000 in record PC0VW01.
//                            Changed: PC0V001,PC0V210,PC0V321
//                            PC0V350,PC0V362,PC0V363,PC0V365
//                            PC0V366,Pc0VS05,PC0VS18,PC0VS41,
//                            Pc0VS25,PC0VS47,PC0VS31
// 02/13/98 ORICHA  Y2KPROJ:  PC0V150, PC0VS42 FIX.
// 02/16/98 DRAMSE  PCF146    Generated for XSPCS05 and XSPCS07
// 02/20/98 DRAMSE  PCA408    Modified PC0V321,PC0V362,PC0V363,
//                            PC0V364 to call Nike both program
//                            to find mode of transportation
// 06/10/98 drammo  PCF147    Regen appln to get new XSPCS05
//                            & XSPCS06 which are changed to
//                            include ST po type in ETAL calc.
// 06/16/98 dramse  pca999    fix bug in mode of transportation
//                            pc0v364 is not used by this
//                            application.
// 08/24/98 dramse  PCA451    changed to use vpohdr03
// 10/08/98 KGRAHA  PCA999    add 'ps' code to PC0VS47.
// 10/20/98 MHUYNH  TS1512    Generated due to changes XPPC030
// 04/23/99 KGRAHA  PCA999    Regen to get new XSPCS05 which
//                            now does not include 'BA' in
//                            ETAL calculation.
// 04/30/99 vkumar  TS1512    Generated to move XSPCS31
// 09/13/99 KGRAHA            Change to use VPOITM04.
// 02/07/00 SBUNGO  PCA999    CHANGED TO USE VIEW VFCTY003
// 03/24/00 SBUNGO  PCF210J   CHANGED TO USE VIEW VPOITM05
// 04/03/00 KGRAHA  PCA485    CHANGED SHIP VIA IN PC0V361
// 04/10/00 KGRAHA  PCA486    DEFAULT NIKE AIR FREIGHT TO 100%
//                            WHEN PO'S ARE AF.
// 05/10/00 SBUNGO  PCF210    MODIFY PC0V210, PC0V350 PROCESS
//                            TO PREVENT PO CREATION FOR
//                            SAP COUNTRIES
//                            (NOTE: WHEN SAP GOES LIVE FOR ANY
//                             CTRY, ADD ENTRIES TO PCCTTBL
//                             INTERNAL TABLE)
// 08/02/00 RSELVA            Modified XSPCS05 for zeroing
//                            out of MADD from 20001012 onwards
// 09/11/00 KGRAHA            CHG SHIP VIA FOR MEXICO IN
//                            PC0V361.
// 12/21/00 RMURTH          Compiled for change in SGRP XSPCS07
// *                   XSPCS07 modified to have hardcoded PADD
// *                   for WHSE '51' and Origin USA for GPC 03
// 02/01/02 RSELVA          FIX 4038 ABEND BY INCREASING LIMIT
//                          OF PC0VW02 FROM 500 TO 800.INCREASE
//                          PC0VW00.PC0VWIX2 FROM 500 TO 800 IN
//                          PC0VS08, PC0VS12, PC0VS13.
// 03/04/02 spitch          changed to view vpoctl02. change in
//                          pc0vs27, pc0v001, pc0v361
// 03/18/02 RSELVA          MODIFIED TO USE VPOVFY02.
// 07/10/02 SPITCH          Compiled due to chnages in XSPCS07
//  and date
//          translations
// 05/23/03 AVERMA  Changed for OCt '03 go-live  PC0V210 7
//  PC0V350.
// 08/20/03  AVERMA       added mex40 ,par21 , urg21 , arg21
//  for oct '03 changes
// ************************************************************
// *********************
Program PC0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB2REC AB2REC; // record
  AB3REC AB3REC; // record
  AB4REC AB4REC; // record
  AB6REC AB6REC; // record
  COMMAREA COMMAREA ; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  FYTREC FYTREC; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  OP1REC OP1REC; // record
  PC0VW00 PC0VW00; // record
  PC0VW01 PC0VW01; // record
  PC0VW02 PC0VW02; // record
  PC0VW03 PC0VW03; // record
  PC0VW04 PC0VW04; // record
  PC0VW05 PC0VW05; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PCNREC PCNREC; // record
  PCOREC PCOREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TABREC TABREC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOCTL02 VPOCTL02; // record
  VPOHDR03 VPOHDR03; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  VPOVFY02 VPOVFY02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use PCCTTBL {deleteAfterUse = yes}; // table
  use PC0VM.PC0VM001,  // forms
      PC0VM.PC0VM002, 
      PC0VM.PC0VM003, 
      PC0VM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/

    goto PC0V001; /* Special Initialization*/

    PC0V001: PC0V001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/

    goto PC0V002; /* Converse main process*/
    PC0V002: PC0V002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0V002; /* Converse Detail Schedule List*/

  end // end main
end // end PC0V

// Special Initialization
Function PC0V001()
   /* ------------------------------------------------------------*/
   /* Check the GPC code.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.XGPCD != "03") /* If not apparel GPC*/
    PCWREC.XXXMSGNO = 138; /* User not authorized message*/
    COMMAREA.CATOAP = "PC0A"; /* Transfer to menu*/
    XSPCS01(); /* Transfer*/
  end

   /* ------------------------------------------------------------*/
   /* Check the users security.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CACLVL[3] != "Y") /* If user not authorized*/
    PCWREC.XXXMSGNO = 29; /* User not authorized message*/
    COMMAREA.CATOAP = "PC0A"; /* Transfer to menu*/
    XSPCS01(); /* Transfer*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* ------------------------------------------------------------*/
  set AB2REC empty;
  set AB6REC empty;
  set AB3REC empty;
  set FYCREC empty;
  set VFCTY003 empty;
  set FY4REC empty;
  set IN7REC empty;
  set IN8REC empty;
  set VPOVFY02 empty;
  set VPOAIT02 empty;
  set VPOASZ02 empty;
  set VFYPO002 empty;
  set PCNREC empty;
  set PCOREC empty;
  set PCPREC empty;
  set PCYREC empty;
  set PC0VM001 initial;
  set PC0VM002 initial;
  set PC0VM003 initial;
  set PC0VW00 empty;
  set PC0VW01 empty;
  set PC0VW02 empty;
  set PC0VW03 empty;
  set PC0VW04 empty;
  set PC0VW05 empty;
   /* SET PC1REC EMPTY;*/
  set VPOCTL02 empty;
  set VPRDCU03 empty;
  set VPOHDR03 empty;
  set PC4REC empty;
  set PC5REC empty;
  set VPOITM05 empty;
  set VPOSIZ02 empty;
  set PG1REC empty;
  set PG2REC empty;
  set PG3REC empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TSCREC empty;
  set TSEREC empty;
  set TSHREC empty;
  set TSOREC empty;
  set TSTREC empty;
  set XX0XW01 empty;
  set XX0XW02 empty;

   /* ------------------------------------------------------------*/
   /* Initialize working storage values.*/
   /* ------------------------------------------------------------*/
  PC0VW00.XXXPRCNM = "PC0V"; /* Module identification*/
  PC0VW00.PCWMAP = 1; /* First map requested*/
  PC0VW00.PO-REG-CD = "01"; /* PO region*/
  PC0VW00.XXXTSLEN = 2196; /* Detail map record length*/

   /* ------------------------------------------------------------*/
   /* Use the user ID to get the scheduler & control information.*/
   /* ------------------------------------------------------------*/
  PG1REC.XXXUSER = COMMAREA.CAUSERID; /* User ID*/
  PG1REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG1REC.PG1FCTCD = "**"; /* Forecaster code*/
  PG1REC.PG1SC4CD = "**"; /* Sched/avail-specialist*/
  PC0VS01(); /* Validate scheduler DPRODG.VSUSER01*/
  SQLCA.VAGen_SQLCODE = 0;
  if (SQLCA.VAGen_SQLCODE == 0) /* If scheduler found*/
    set AB3REC empty;
    AB3REC.PG1SC4CD = PG1REC.PG1SC4CD; /* sched/avail-specialist*/
    PC0VS02(); /* Get DABUY.VSCTL001*/
    PC0VM001.XSECD = AB3REC.XSECD; /* Default season code*/
    PC0VW00.PC0VSNYR = AB3REC.XSNYR;
    PC0VM001.XSNYR = PC0VW00.PC0VSNYY; /* Default season year*/
  /* MOVE AB3REC.XSNYR TO PC0VM001.XSNYR; /* Default season year*/
    PC0VW00.PC0VWDT1 = AB3REC.AB3BUYMO;
    PC0VM001.AB3BUYMO = PC0VW00.PC0VWBM; /* Default buy month*/
  /* MOVE AB3REC.AB3BUYMO TO PC0VM001.AB3BUYMO; /* Default buy month*/
    PC0VW00.PC0VWBUY = PC0VW00.PC0VWBM; /* Save in working storage*/
  /* MOVE AB3REC.AB3BUYMO TO PC0VW00.PC0VWBUY; /* Save in working storage*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* If not coming from PC0Q*/
    COMMAREA.CATOAP = "PC0A"; /* Load for transfer*/
    PCWREC.XXXMSGNO = 210; /* Cannot fastpath to here*/
    XSPCS01(); /* Transfer to P.O. menu*/
    exit stack; /* Display message if error in transfer*/
  end

   /* ------------------------------------------------------------*/
   /* If user has authority then allow change of userid.*/
   /* ------------------------------------------------------------*/

  PC0VM001.XXXUSER = COMMAREA.CAUSERID; /* User ID*/
  if (COMMAREA.CACLVL[9] == "Y") /* ===> If user has authority*/
    set PC0VM001.XXXUSER initialAttributes; /* ===> allow update of userid*/
  else
    set PC0VM001.XXXUSER skip;
  end

end // end PC0V001

// Main process to display a map
Function PC0V002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PCWMAP == 1) /* Map 1 was requested*/

    PC0V100(); /* Display map 1*/

  else

    if (PC0VW00.PCWMAP == 2) /* Map 2 was requested*/

      PC0V200(); /* Display map 2*/

    else

      PC0V300(); /* Display map 3*/

    end
  end

end // end PC0V002

// Converse entry screen
Function PC0V100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0V120(); /* Format and display the map*/

  PC0V130(); /* Check attention identifier*/

  PC0V140(); /* Reset highlighted fields*/

  PC0V150(); /* Verify the entered data*/

end // end PC0V100

// Converse initial entry map
Function PC0V120()
   /* ------------------------------------------------------------*/
   /* Format the map fields*/
   /* ------------------------------------------------------------*/

  if (PC0VM001.XXXUSER == " ")
    PC0VM001.XXXUSER = COMMAREA.CAUSERID; /* User ID*/
  end

  if (PC0VM001.PC0VMOPT == " ")
    PC0VM001.PC0VMOPT = "R"; /* Selection type*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0VM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0VM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0VM001.XXXPRCNM = PC0VW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0VM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0VM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0VW00.XXXPRCNM = "PC0V"; /* Module identification*/
  COMMAREA.CATOAP = PC0VM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0VM001.CAITEM; /* Application data*/

end // end PC0V120

// Check attention identifiers
Function PC0V130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC0VM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0VW00.XXXPRCNM = "PC0V130"; /* Module identification*/
      set PC0VM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf18) /* If PF18 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAFROMAP = "PC0VM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf18) /* If PF18 was pressed*/
      COMMAREA.CATOAP = "AB0J"; /* transfer to apparel buy size*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC0VW00.XXXPRCNM = "PC0V130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0V130

// Reset highlighted fields
Function PC0V140()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[9] == "Y") /* If user has authority*/
    set PC0VM001.XXXUSER initialAttributes; /* allow update of userid*/
  else
    set PC0VM001.XXXUSER skip;
  end

  set PC0VM001.PC0VMOPT initialAttributes; /* Option*/
  set PC0VM001.FY1FCTYC initialAttributes; /* Factory*/
  set PC0VM001.AB3BUYMO initialAttributes; /* Buy month*/
  set PC0VM001.XSECD initialAttributes; /* Season code*/
  set PC0VM001.XSNYR initialAttributes; /* Season year*/
  set PC0VM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0VM001.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0V140

// Verify the entered data
Function PC0V150()
   /* ------------------------------------------------------------*/
   /* Validate the factory code.*/
   /* ------------------------------------------------------------*/

  if (PC0VM001.FY1FCTYC != " ") /* Factory code entered*/
    set VFCTY003 empty; /* Clear record*/
    VFCTY003.FY1FCTYC = PC0VM001.FY1FCTYC;
    PC0VS46(); /* Select unique factory record*/
    if (VAGen_SQLCODE == 100) /* Row not found*/
      PC0VW00.XXXPRCNM = "PC0V150"; /* Module identification*/
      set PC0VM001.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Invalid factory code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* BUY MONTH CHECK*/
   /* ------------------------------------------------------------*/

  if (PC0VM001.AB3BUYMO == 0) /* Not entered*/
    set PC0VM001.AB3BUYMO cursor, bold; /* Highlight Buy Month*/
    PC0VM001.XXXPRCNM = "PC0V150"; /* Process name*/
    converseLib.validationFailed(31); /* Buy month missing*/
  else
    PC0VW00.PC0VWBUY = PC0VM001.AB3BUYMO; /* Save in working storage*/
    if (PC0VW00.PC0VWPMO < 1
     || PC0VW00.PC0VWPMO > 12)
      set PC0VM001.AB3BUYMO cursor, bold; /* Highlight Buy Month*/
      PC0VM001.XXXPRCNM = "PC0V150"; /* Process name*/
      converseLib.validationFailed(31); /* Buy month missing*/
    end
  end

   /* ------------------------------------------------------------*/
   /* SEASON CODE CHECK*/
   /* ------------------------------------------------------------*/

  /* *********************Y2K OUT BEGIN************************/
   /* MOVE PC0VM001.XSECD TO PC0VW00.XSECD;*/
   /* MOVE PC0VM001.XSNYR TO PC0VW00.XSNYR;*/
   /* MOVE 0 TO PC0VW00.XSNYR;         /* Clear out season year*/
  /* IF PC0VM001.XSNYR GT 0;          /* If something in SEASON YEAR*/
  /* *********************Y2K OUT END**************************/
  /* *********************Y2K IN BEGIN*************************/
  /* *********************Y2K OUT BEGIN************************/
  PC0VW00.XSECD = PC0VM001.XSECD;
  PC0VW00.XSNYR = 0; /* Clear out season year*/
  PC0VW00.XSNYR = PC0VM001.XSNYR;
  if (PC0VM001.XSNYR >= 0) /* If something in SEASON YEAR*/
  /* *********************Y2K IN END***************************/
    if (PC0VM001.XSNYR > 85) /* If something in SEASON YEAR*/
      PC0VW00.XSNYR = PC0VM001.XSNYR + 1900; /* Full season year*/
    else
      PC0VW00.XSNYR = PC0VM001.XSNYR + 2000; /* Full season year*/
    end
  end

  PC0VS52(); /* Select THEATER-LOCATION*/
  if (TAB-RTN-CD == 0)
    sysVar.arrayIndex = 1;
    PC0VW00.PC0VWXSF = "N";
    while (PC0VW00.PC0VWXSF == "N")
      if (YSNTBL.XGPCD[sysVar.arrayIndex] == PCWREC.XGPCD && 
      YSNTBL.XDR-PROD-REG-CD[sysVar.arrayIndex] == TABREC.XDR-PROD-REG-CD && 
      YSNTBL.XSECD[sysVar.arrayIndex] == PC0VW00.XSECD
       && YSNTBL.XSNYR[sysVar.arrayIndex] == PC0VW00.XSNYR)
        PC0VW00.PC0VWXSF = "Y"; /* End of season flag.*/
      else
        if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
          PC0VW00.PC0VWXSF = "Y"; /* End of season flag.*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    end
  end

  if (YSNTBL.XSECD[sysVar.arrayIndex] == "99")
    set PC0VM001.XSECD cursor, bold; /* Highlight SEASON code*/
    set PC0VM001.XSNYR bold; /* Highlight SEASON YEAR*/
    PC0VM001.XXXPRCNM = "PC0V150"; /* Process name*/
    converseLib.validationFailed(129); /* Must have valid SEASON YEAR*/
  end

   /* ------------------------------------------------------------*/
   /* Validate selection request.*/
   /* ------------------------------------------------------------*/

  if (PC0VM001.PC0VMOPT != "R" /* Regular apparel*/
   && PC0VM001.PC0VMOPT != "B" /* Blank T-shirts*/
   && PC0VM001.PC0VMOPT != "S" /* Screened T-shirts*/
   && PC0VM001.PC0VMOPT != "U") /* Uncrested apparel*/
    PC0VW00.XXXPRCNM = "PC0V150"; /* Module identification*/
    set PC0VM001.PC0VMOPT cursor, bold; /* Highlight*/
    converseLib.validationFailed(209); /* Invalid selection type*/
  end

   /* ------------------------------------------------------------*/
   /* Validate the user id*/
   /* ------------------------------------------------------------*/

  PG1REC.XXXUSER = PC0VM001.XXXUSER; /* User ID*/
  PG1REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG1REC.PG1FCTCD = "**"; /* Forecaster code*/
  PG1REC.PG1SC4CD = "**"; /* Sched/avail-specialist*/
  PC0VS01(); /* Validate scheduler DPRODG.VSUSER01*/
  if (SQLCA.VAGen_SQLCODE == 100) /* If not a valid user id*/
    converseLib.validationFailed(210); /* invalid user id*/
    PC0VW00.XXXPRCNM = "PC0V150"; /* Module identification*/
    set PC0VM001.XXXUSER cursor, bold; /* Highlight userid*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0VW00.XXXPRCNM = "PC0V150"; /* Module identification*/
    set PC0VM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors found then request selection screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors found*/
    set PC0VW01 empty; /* Initialize style array*/
    set PC0VW02 empty; /* Initialize size/quantity array*/
    PC0VW00.PCWMAP = 2; /* Request selection screen*/
    PC0VW00.PC0VWSWR = "Y"; /* Request for data*/
    PC0VW00.XXXTSPAG = 1; /* Request page 1*/
  end

   /* ============================================================*/
   /* =======================END CHECK============================*/

end // end PC0V150

// Converse selection screen
Function PC0V200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0V210(); /* Obtain data to display*/

  PC0V220(); /* Format and display the map*/

  PC0V230(); /* Check attention identifier*/

  PC0V240(); /* Reset highlighted fields*/

  PC0V250(); /* Verify the entered data*/

  PC0V260(); /* Process valid input request*/

end // end PC0V200

// Obtain data to display
Function PC0V210()
   /* ------------------------------------------------------------*/
                    /* - INDEX USAGE -*/
   /* ------------------------------------------------------------*/
   /* VABSTY01 data is kept in an array in PC0VW01.*/
   /* PC0VWIX1 is used for building this array and*/
   /* PC0vWIXA is used for accessing the array.*/

   /* VBSIZE01 data is kept in an array in PC0VW02.*/
     /* Only enough of the array is loaded to fill the requested*/
     /* pages to limit the database access occurring per converse*/
   /* PC0VWIX2 is used for building this array and*/
   /* PC0VWIXL is used for accessing the array.*/

   /* PC0VWIX3 is used as a temporary work index*/

   /* PC0VWIXM is used as an index to the map detail lines.*/

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0VW00.PC0VWSWR = "N"; /* display data switch*/

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VABSTY01*/
   /* ------------------------------------------------------------*/

  AB2REC.AB6BKFNI = PC0VM001.PC0VMOPT; /* Blank/Finish ind*/

  PC0VS03(); /* Open cursor for VABSTY01*/

  PC0VS04(); /* Get FIRST VABSTY01 row*/

   /* ------------------------------------------------------------*/
   /* Fetch each VABSTY01 row & load array with key values*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIX1 = 1; /* Initialize array index*/
  while (PC0VW00.PC0VWDC1 == "N" /* While more rows*/
   && PC0VW00.PC0VWIX1 <= 3000) /* and not end of array*/
    /**/
      /* ------------------------------------------------------------*/
       /* Get the division code from the warehouse or customer.*/
       /* and also check to see if any SAP countries exist.  If SAP*/
       /* countries found, then discard those styles and proceed*/
      /* ------------------------------------------------------------*/
    if (AB2REC.PC2CUXID > " ")
      set VPRDCU03 empty; /* Init cust rec*/
      VPRDCU03.XGPCD = "03"; /* GPC code*/
      VPRDCU03.PC2CUXID = AB2REC.PC2CUXID; /* Customer*/
      PC0VS05(); /* Get customer*/
      if (VPRDCU03.XCTCD in PCCTTBL.XCTCD)
        if (VPRDCU03.XGPCD == "03"                                    
         && ((VPRDCU03.KUCCOID == 694638 && VPRDCU03.KUMSTRID == 272) /* CHL21*/
         || (VPRDCU03.KUCCOID == 694633 && VPRDCU03.KUMSTRID == 553)  /* MEX12*/
         || (VPRDCU03.KUCCOID == 694633 && VPRDCU03.KUMSTRID == 837)  /* MEX18*/
         || (VPRDCU03.KUCCOID == 694633 && VPRDCU03.KUMSTRID == 301)  /* MEX40*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 822)  /* ARG21*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 331)  /* PAR21*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 664))) /* URG21*/

  /* Oct '03 GO-LIVE CHANGES*/
          PC0VW01.SY1STNBR[PC0VWIX1] = AB2REC.SY1STNBR; /* Style*/
          PC0VW01.XDMCD[PC0VWIX1] = AB2REC.XDMCD; /* Dimension*/
          PC0VW01.XOWCD[PC0VWIX1] = AB2REC.XOWCD; /* Owner grp*/
          PC0VW01.XWHCD[PC0VWIX1] = AB2REC.XWHCD; /* Warehouse*/
          PC0VW01.FY1FCTYC[PC0VWIX1] = AB2REC.FY1FCTYC; /* Factory*/
          PC0VW01.PC4ORTYP[PC0VWIX1] = AB2REC.PC4ORTYP; /* PO type*/
          PC0VW01.PC2CUXID[PC0VWIX1] = AB2REC.PC2CUXID; /* Customer*/
          PC0VW01.XDVCD[PC0VWIX1] = AB2REC.XDVCD; /* Customer*/
          PC0VW01.YSMXDV[PC0VWIX1] = VPRDCU03.YSMXDV; /* Division*/
          /**/
          PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* Incremnt array index*/
        end /* next sentence*/
      else
        PC0VW01.SY1STNBR[PC0VWIX1] = AB2REC.SY1STNBR; /* Style*/
        PC0VW01.XDMCD[PC0VWIX1] = AB2REC.XDMCD; /* Dimension*/
        PC0VW01.XOWCD[PC0VWIX1] = AB2REC.XOWCD; /* Owner grp*/
        PC0VW01.XWHCD[PC0VWIX1] = AB2REC.XWHCD; /* Warehouse*/
        PC0VW01.FY1FCTYC[PC0VWIX1] = AB2REC.FY1FCTYC; /* Factory*/
        PC0VW01.PC4ORTYP[PC0VWIX1] = AB2REC.PC4ORTYP; /* PO type*/
        PC0VW01.PC2CUXID[PC0VWIX1] = AB2REC.PC2CUXID; /* Customer*/
        PC0VW01.XDVCD[PC0VWIX1] = AB2REC.XDVCD; /* Customer*/
        PC0VW01.YSMXDV[PC0VWIX1] = VPRDCU03.YSMXDV; /* Division*/
        /**/
        PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* Incremnt array index*/
      end
    else /* ===>*/
      if (AB2REC.XWHCD in PCCTTBL.XWHCD)
            /* next sentence*/
      else
        /**/
        if (AB2REC.XWHCD == "12"
         || AB2REC.XWHCD == "60"
         || AB2REC.XWHCD == "61")
          PC0VW01.YSMXDV[PC0VWIX1] = "20"; /* Div code frgn*/
        else
          PC0VW01.YSMXDV[PC0VWIX1] = "10"; /* Div code dom*/
        end
        /**/
        PC0VW01.SY1STNBR[PC0VWIX1] = AB2REC.SY1STNBR; /* Style*/
        PC0VW01.XDMCD[PC0VWIX1] = AB2REC.XDMCD; /* Dimension*/
        PC0VW01.XOWCD[PC0VWIX1] = AB2REC.XOWCD; /* Owner grp*/
        PC0VW01.XWHCD[PC0VWIX1] = AB2REC.XWHCD; /* Warehouse*/
        PC0VW01.FY1FCTYC[PC0VWIX1] = AB2REC.FY1FCTYC; /* Factory*/
        PC0VW01.PC4ORTYP[PC0VWIX1] = AB2REC.PC4ORTYP; /* PO type*/
        PC0VW01.PC2CUXID[PC0VWIX1] = AB2REC.PC2CUXID; /* Customer*/
        PC0VW01.XDVCD[PC0VWIX1] = AB2REC.XDVCD; /* Customer*/
        /**/
        PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* Incremnt array index*/
      end
    end /* ===> customer check*/
    /**/
    PC0VS04(); /* Get next VABSTY01 row*/
    /**/
  end
   /* ------------------------------------------------------------*/
   /* IO to close VABSTY01 set*/
   /* ------------------------------------------------------------*/

  PC0VS07(); /* Close cursor VABSTY01 row*/

   /* ------------------------------------------------------------*/
   /* If no data was retrieved, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWIX1 == 1) /* No data retrieved*/
    PCWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    PC0VW00.PCWMAP = 1; /* transfer to selection map*/
    PC0VW00.XXXPRCNM = "PC0V210"; /* Module identification*/
    exit stack; /* Exit to display map*/
  else
    if (PC0VW00.PC0VWIX1 > 3000) /* No data retrieved*/
      PC0VW00.XXXPRCNM = "PC0V210"; /* Module identification*/
      converseLib.validationFailed(527); /* Table reached limit message*/
      PC0VW00.PCWMAP = 1; /* transfer to selection map*/
      exit stack;
    end
    PC0VW00.PC0VWIX1 = 1; /* Set style index to first*/
    PC0VW00.PC0VWIX2 = 1; /* Set size index to first*/
  end

end // end PC0V210

// Converse selection map
Function PC0V220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0V221(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0VM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0VM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0VM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0VM002.XXXPRCNM = PC0VW00.XXXPRCNM; /* Module identification*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0VM002 alarm; /* Indicate sound alarm*/
  end
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end

  converse PC0VM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0VW00.XXXPRCNM = "PC0V"; /* Module identification*/
  COMMAREA.CATOAP = PC0VM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0VM002.CAITEM; /* Application data*/

end // end PC0V220

// Format Selection screen data
Function PC0V221()
   /* ------------------------------------------------------------*/
                    /* - INDEX USAGE -*/
   /* ------------------------------------------------------------*/
   /* VABSTY01 data is kept in an array in PC0VW01.*/
   /* PC0VWIX1 is used for building this array and*/
   /* PC0vWIXA is used for accessing the array.*/

   /* VBSIZE01 data is kept in an array in PC0VW02.*/
     /* Only enough of the array is loaded to fill the requested*/
     /* pages to limit the database access occurring per converse*/
   /* PC0VWIX2 is used for building this array and*/
   /* PC0VWIXL is used for accessing the array.*/

   /* PC0VWIX3 is used as a temporary work index*/

   /* PC0VWIXM is used as an index to the map detail lines.*/
   /* ------------------------------------------------------------*/
  set PC0VM002 initial; /* M002 input/output area*/

  PC0VM002.XXXUSER = PC0VM001.XXXUSER; /* User ID*/
  PC0VM002.PC0VMOPT = PC0VM001.PC0VMOPT; /* Request type*/
  PC0VM002.PC0VMMO = PC0VW00.PC0VWPMO; /* Buy month month*/
  PC0VM002.PC0VMYR = PC0VW00.PC0VWPYR; /* Buy month year*/
  PC0VM002.XXXTSPAG = PC0VW00.XXXTSPAG; /* Page number*/

   /* ------------------------------------------------------------*/
   /* Display appropriate headings.*/
   /* ------------------------------------------------------------*/
  if (PC0VM002.PC0VMOPT == "B") /* If blanks*/
    set PC0VM002.PC0VMHD1 skip; /* Display heading*/
    PC0VM002.PC0VMHD2 = "BLANK";
    set PC0VM002.PC0VMHD2 skip; /* Display heading*/
    set PC0VM002.PC0VMHD3 skip; /* Display heading*/
    PC0VM002.PC0VMHD5 = "CLR";
    set PC0VM002.PC0VMHD5 skip; /* Display heading*/
    PC0VM002.PC0VMHD7 = "ACTION";
    set PC0VM002.PC0VMHD7 skip; /* Display heading*/
  end
  if (PC0VM002.PC0VMOPT == "S") /* If screen*/
    set PC0VM002.PC0VMHD4 skip; /* Display heading*/
    PC0VM002.PC0VMHD2 = "   ";
    PC0VM002.PC0VMHD5 = "CLR";
    set PC0VM002.PC0VMHD5 skip; /* Display heading*/
    set PC0VM002.PC0VMHD6 skip; /* Display heading*/
    set PC0VM002.PC0VMHD7 skip; /* Display heading*/
    set PC0VM002.PC0VMHD8 skip; /* Display heading*/
    set PC0VM002.PC0VMHD9 skip; /* Display heading*/
    set PC0VM002.PC0VMHD0 skip; /* Display heading*/
  end

   /* ------------------------------------------------------------*/
   /* If the requested page is not in the page array then load it*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIXL = PC0VW00.XXXTSPAG * 16; /* Line index = last line*/
  while (PC0VW00.PC0VWIX2 <= PC0VW00.PC0VWIXL /* While requested lines*/
   && PC0VW01.SY1STNBR[PC0VWIX1] != " ") /* and more data exists*/
    PC0VW00.PC0VWIXA = PC0VW00.PC0VWIX1;
                                   /* Style index for select set*/
    if (PC0VM001.PC0VMOPT == "R" /* If regular apparel*/
     || PC0VM001.PC0VMOPT == "U") /* Or Uncrested apparel*/
      PC0VS08(); /* Access VBSIZE accordingly*/
    else
      if (PC0VM001.PC0VMOPT == "B") /* If blank T-shirts*/
        PC0VS12(); /* Access VBSIZE accordingly*/
      else /* If screened T-shirts*/
        PC0VS13(); /* Access VBSIZE accordingly*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If no data was retrieved, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWIX2 == 1) /* No data retrieved*/
    PCWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    PC0VW00.PCWMAP = 1; /* transfer to selection map*/
    PC0VW00.XXXPRCNM = "PC0V221"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Load the map detail lines.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIXL = PC0VW00.PC0VWIXL - 15; /* Line index = first line*/
  PC0VW00.PC0VWIXM = 1; /* Initialize map index*/
  while (PC0VW00.PC0VWIXM <= 16 /* Until screen is full*/
   && PC0VW02.PC0VWAIX[PC0VWIXL] != 0) /* or end of data*/

    if (PC0VW02.PC0VWSEL[PC0VWIXL] != "V") /* If selectable line*/
      set PC0VM002.PC0VMSEL[PC0VWIXM] normal; /* Unprotect select field*/
    end

    PC0VW00.PC0VWIXA = PC0VW02.PC0VWAIX[PC0VWIXL]; /* Index to style*/
    PC0VM002.PC0VMSEL[PC0VWIXM] = PC0VW02.PC0VWSEL[PC0VWIXL];
    PC0VM002.FY1FCTYC[PC0VWIXM] = PC0VW01.FY1FCTYC[PC0VWIXA];

    if (PC0VW01.XDVCD[PC0VWIXA] == "05" /* ====> means this is a "Side 1"*/
     || PC0VW01.XDVCD[PC0VWIXA] == "06" /* ====> means this is a "Side 1"*/
     || PC0VW01.XDVCD[PC0VWIXA] == "07") /* ====> means this is a "Side 1"*/
      PC0VM002.PC4ORTYP[PC0VWIXM] = "S1";
    else
      PC0VM002.PC4ORTYP[PC0VWIXM] = PC0VW01.PC4ORTYP[PC0VWIXA];
    end

    PC0VM002.SY1STNBR[PC0VWIXM] = PC0VW01.SY1STNBR[PC0VWIXA];
    PC0VM002.PC0VMQTY[PC0VWIXM] = PC0VW02.SY2CLRID[PC0VWIXL];
    PC0VM002.XOWCD[PC0VWIXM] = PC0VW02.XOWCD[PC0VWIXL];
    PC0VM002.PC2CUXID[PC0VWIXM] = PC0VW01.PC2CUXID[PC0VWIXA];
    PC0VM002.XWHCD[PC0VWIXM] = PC0VW01.XWHCD[PC0VWIXA];

    if (PC0VM002.PC0VMOPT == "B") /* If blank*/

      if (PC0VW02.AB6XFCTY[PC0VWIXL] > " ")
        PC0VM002.PC2CUXID[PC0VWIXM] = PC0VW02.AB6XFCTY[PC0VWIXL];
        PC0VM002.XWHCD[PC0VWIXM] = " ";
      end

      if (PC0VW02.AB6BYTYP[PC0VWIXL] == "B")
        PC0VM002.AB6XSTYN[PC0VWIXM] = "BUY"; /* Action = buy*/
      else
        if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P")
          PC0VM002.XWHCD[PC0VWIXM] = PC0VW02.AB6XWHCD[PC0VWIXL];
          PC0VM002.AB6XSTYN[PC0VWIXM] = "PFS"; /* Action = pfs*/
        else
          PC0VM002.AB6XSTYN[PC0VWIXM] = "REDIR"; /* Action = redir*/
        end
      end
    end

    if (PC0VM002.PC0VMOPT == "S") /* If screened*/
      PC0VM002.AB6XFCTY[PC0VWIXM] = PC0VW02.AB6XFCTY[PC0VWIXL];
      PC0VM002.AB6XSTYN[PC0VWIXM] = PC0VW02.AB6XSTYN[PC0VWIXL];
      PC0VM002.AB6XCOLR[PC0VWIXM] = PC0VW02.AB6XCOLR[PC0VWIXL];
      PC0VM002.PC0VMACT[PC0VWIXM] = PC0VW02.AB6BYTYP[PC0VWIXL];
    end

    PC0VM002.AB6PACKQ[PC0VWIXM] = PC0VW02.AB6PACKQ[PC0VWIXL];

    /* ------------------------------------------------------------*/
     /* Get the first style's description.*/
    /* ------------------------------------------------------------*/

    set PG2REC empty; /* Initialize record*/
    PG2REC.XGPCD = "03"; /* GPC code*/
    PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
    TA1REC.TA1PGMNM = "PC0V221"; /* Module ident*/

    XSPG201(); /* Retrieve style*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0VM002.SY1SSTNM[PC0VWIXM] = PG2REC.SY1SSTNM;
    else /* Row not found*/
      PC0VM002.SY1SSTNM[PC0VWIXM] = "** NOT FOUND";
    end

    if (PC0VW02.AB6XSTYN[PC0VWIXL] != " " /* If style present*/
     && PC0VM002.PC0VMOPT == "S")         /* and screened*/
      /* ------------------------------------------------------------*/
       /* Get the second style's description.*/
      /* ------------------------------------------------------------*/
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = "03"; /* GPC code*/
      PG2REC.SY1STNBR = PC0VW02.AB6XSTYN[PC0VWIXL]; /* Style*/
      XSPG201(); /* Retrieve style*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        PC0VM002.PC0VMDSC[PC0VWIXM] = PG2REC.SY1SSTNM;
      else /* Row not found*/
        PC0VM002.PC0VMDSC[PC0VWIXM] = "** NOT FOUND";
      end
    end

    PC0VW00.PC0VWIXL = PC0VW00.PC0VWIXL + 1; /* Increment vbsize index*/
    PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Set the cursor at the first enterable field*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIXM = 16; /* Initialize line index*/
  while (PC0VW00.PC0VWIXM >= 1) /* For each detail line*/

    if (PC0VM002.SY1STNBR[PC0VWIXM] == " ") /* If empty line*/
      set PC0VM002.PC0VMSEL[PC0VWIXM] skip, invisible; /* Darken & protect*/
    else
      if (PC0VM002.PC0VMSEL[PC0VWIXM] == "V") /* If processed line*/
        set PC0VM002.PC0VMSEL[PC0VWIXM] skip; /* Protect*/
      else
        set PC0VM002.PC0VMSEL[PC0VWIXM] cursor; /* Position cursor*/
      end
    end

    PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM - 1; /* Decrement line index*/

  end

   /* display informative message about options available*/
   /* a 'C'creates po's at style/color level, 'S' at style level*/
  if (PC0VM001.PC0VMOPT == "R" /* If regular apparel*/
   || PC0VM001.PC0VMOPT == "U") /* Or Uncrested apparel*/
    PC0VW00.XXXPRCNM = "PC0V221"; /* MODULE ID*/
    PCWREC.XXXMSGNO = 518; /* info msg for option c or s*/
  end
end // end PC0V221

// Check attention identifiers
Function PC0V230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Reset map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PCWREC*/
      XSPCS01(); /* transfer*/
      PC0VW00.PCWMAP = 1; /* Return to selection screen*/
      set PC0VM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0VW00.XXXPRCNM = "PC0V230"; /* Module identification*/
      set PC0VM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* If PF1 was pressed*/
   || converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf18 /* If PF12 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAFROMAP = "PC0VM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to factory menu*/
    end

    if (converseVar.eventKey is pf18) /* If PF18 was pressed*/
      COMMAREA.CATOAP = "AB0J"; /* transfer to apparel buy size*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    XSPCS01(); /* transfer*/
    PC0VW00.PCWMAP = 1; /* Return to selection screen*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8) 
    PC0VW00.XXXPRCNM = "PC0V230"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for selection map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0VW00.PCWMAP = 1; /* Request selection map*/
  end

end // end PC0V230

// Reset highlighted fields
Function PC0V240()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0VM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0VM002.CAITEM initialAttributes; /* Commarea application data*/

  PC0VW00.PC0VWIXM = 1; /* Initialize map index*/
  while (PC0VW00.PC0VWIXM <= 16) /* For each map line*/
    if (PC0VM002.PC0VMSEL[PC0VWIXM] == "V") /* If processed field*/
      set PC0VM002.PC0VMSEL[PC0VWIXM] protect; /* Protect & display*/
    else
      if (PC0VM002.SY1STNBR[PC0VWIXM] == " ") /* If empty line*/
        set PC0VM002.PC0VMSEL[PC0VWIXM] skip, invisible; /* Darken & protect*/
      else
        set PC0VM002.PC0VMSEL[PC0VWIXM] normal; /* Unprotect & display*/
      end
    end
    PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment map index*/
  end
end // end PC0V240

// Verify the entered data
Function PC0V250()
   /* ------------------------------------------------------------*/
   /* PF7 - Verify the page backward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0VW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
      converseLib.validationFailed(2); /* No previous pages to display*/
    else
      PC0VW00.XXXTSPAG = PC0VW00.XXXTSPAG - 1; /* Decrement page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF8 - Verify the page forward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* If page forward*/
    PC0VW00.PC0VWIXL = PC0VW00.XXXTSPAG * 16 + 1; /* Line index to first*/
    if (PC0VW02.PC0VWAIX[PC0VWIXL] == 0 /* If line not loaded*/
     && PC0VW01.SY1STNBR[PC0VWIX1] == " ") /* and no more data to load*/
      PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      PC0VW00.XXXTSPAG = PC0VW00.XXXTSPAG + 1; /* Increment page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate selections.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIXM = 16; /* Initialize map index*/
  while (PC0VW00.PC0VWIXM >= 1) /* For each map detail line*/
    if (PC0VM001.PC0VMOPT == "R" /* regular*/
     || PC0VM001.PC0VMOPT == "U") /* regular*/
      if (PC0VM002.PC0VMSEL[PC0VWIXM] != " " /* If other than ' '*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "S" /* and other than 'S'*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "C" /* and other than 'C'*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "D" /* and other than 'D'*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "V") /* and other than 'V'*/
        converseLib.validationFailed(13); /* Only 'S' can be used for select*/
        PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
        set PC0VM002.PC0VMSEL[PC0VWIXM] cursor, bold; /* Highlight*/
      else
        /* ------------------------------------------------------------*/
        /* Locate line in index and move selection value in if valid*/
        /* ------------------------------------------------------------*/
        PC0VW00.PC0VWIXL = PC0VM002.XXXTSPAG * 16 - 16 + PC0VW00.PC0VWIXM;
        if (PC0VM002.PC0VMSEL[PC0VWIXM] == "V"
         && PC0VW02.PC0VWSEL[PC0VWIXL] != "V")
          converseLib.validationFailed(13); /* Only 'S' can be used for select*/
          PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
          set PC0VM002.PC0VMSEL[PC0VWIXM] cursor, bold; /* Highlight*/
        else
          PC0VW02.PC0VWSEL[PC0VWIXL] = PC0VM002.PC0VMSEL[PC0VWIXM];
        end
      end
    else
      if (PC0VM002.PC0VMSEL[PC0VWIXM] != " " /* If other than ' '*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "S" /* and other than 'S'*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "D" /* and other than 'D'*/
       && PC0VM002.PC0VMSEL[PC0VWIXM] != "V") /* and other than 'V'*/
        converseLib.validationFailed(13); /* Only 'S' can be used for select*/
        PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
        set PC0VM002.PC0VMSEL[PC0VWIXM] cursor, bold; /* Highlight*/
      else
        /* ------------------------------------------------------------*/
        /* Locate line in index and move selection value in if valid*/
        /* ------------------------------------------------------------*/
        PC0VW00.PC0VWIXL = PC0VM002.XXXTSPAG * 16 - 16 + PC0VW00.PC0VWIXM;
        if (PC0VM002.PC0VMSEL[PC0VWIXM] == "V"
         && PC0VW02.PC0VWSEL[PC0VWIXL] != "V")
          converseLib.validationFailed(13); /* Only 'S' can be used for select*/
          PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
          set PC0VM002.PC0VMSEL[PC0VWIXM] cursor, bold; /* Highlight*/
        else
          PC0VW02.PC0VWSEL[PC0VWIXL] = PC0VM002.PC0VMSEL[PC0VWIXM];
        end
      end
    end
    PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM - 1; /* Decrement map line index*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0VW00.XXXPRCNM = "PC0V250"; /* Module identification*/
    set PC0VM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER - Validate that a selection was made.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* If process POs requested*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PC0VW00.PC0VWIXL = 1; /* Initialize page index*/
    PC0VW00.PCWMAP = 3; /* Request detail screen*/
    PC0VW00.PC0VWSWR = "Y"; /* Request for data*/
    PC0VW00.XXXTSPAG = 1; /* Request page 1*/
  end

end // end PC0V250

// Process valid input request
Function PC0V260()
   /* ------------------------------------------------------------*/
   /* If 'D' was entered then update VBSIZE as autoloaded*/
   /* without actually autoloading.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PC0VW00.PC0VWIXM = 1; /* Initialize map index*/
    while (PC0VW00.PC0VWIXM <= 16) /* For each map detail line*/
      if (PC0VM002.PC0VMSEL[PC0VWIXM] == "D") /* If update requested*/
        /* ------------------------------------------------------------*/
         /* Locate line in index and move selection value in if valid*/
        /* ------------------------------------------------------------*/
        PC0VW00.PC0VWIXL = PC0VM002.XXXTSPAG * 16 - 16 + PC0VW00.PC0VWIXM;
        PC0VW00.PC0VWIXA = PC0VW02.PC0VWAIX[PC0VWIXL];
        VPOHDR03.PO-REG-CD = PC0VW00.PO-REG-CD; /* Init po region*/
        VPOHDR03.PC3PONBR = 0; /* Init PO number*/
        PC0VM003.IN7STNBR = 0; /* Init stock transfer number*/
        XX0XS01(); /* Get date and time*/

        PC0VS14(); /* Update VBSIZE records*/

        PC0VW02.PC0VWSEL[PC0VWIXL] = "V";
        PC0VM002.PC0VMSEL[PC0VWIXM] = "V";
      end
      PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment map line index*/
    end
  end
  PC0VW00.PC0VWIXL = 1; /* Initialize selection index*/

end // end PC0V260

// Converse detail screen
Function PC0V300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0V310(); /* Obtain data to display*/

  PC0V320(); /* Format and display the map*/

  PC0V330(); /* Check attention identifier*/

  PC0V340(); /* Reset highlighted fields*/

  PC0V350(); /* Verify the entered data*/

  PC0V360(); /* Process valid input request*/

end // end PC0V300

// Obtain data to display
Function PC0V310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0VW00.PC0VWSWR = "N"; /* display data switch*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage*/
   /* ------------------------------------------------------------*/

  PC0VS17(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Find next selected line*/
   /* ------------------------------------------------------------*/

  while (PC0VW02.PC0VWSEL[PC0VWIXL] != "S" /* While line not selected*/
   && PC0VW02.PC0VWSEL[PC0VWIXL] != "C" /**/
   && PC0VW00.PC0VWIXL <= 500) /* and more rows*/
    if (PC0VW02.PC0VWAIX[PC0VWIXL] == 0) /* If row not formatted*/
      if (PC0VW01.SY1STNBR[PC0VWIX1] != " ") /* If more data to format*/
        PC0VW00.PC0VWIXA = PC0VW00.PC0VWIX1;
                                   /* Style index for select set*/
        if (PC0VM001.PC0VMOPT == "R" /* If regular apparrel*/
         || PC0VM001.PC0VMOPT == "U") /* Or uncrested apparrel*/
          PC0VS08(); /* Access VBSIZE accordingly*/
        else
          if (PC0VM001.PC0VMOPT == "B") /* If blank T-shirts*/
            PC0VS12(); /* Access VBSIZE accordingly*/
          else /* If screened T-shirts*/
            PC0VS13(); /* Access VBSIZE accordingly*/
          end
        end
      else
        PC0VW00.PCWMAP = 1; /* Request selection screen*/
        converseLib.validationFailed(90); /* No more P.O.s selected*/
        PC0VW00.PC0VWETS = " "; /* Clear ets date*/
        PC0VW00.XXXPRCNM = "PC0V310"; /* Module identification*/
        exit stack; /* Display map*/
      end
    else
      PC0VW00.PC0VWIXL = PC0VW00.PC0VWIXL + 1; /* Increment select index*/
    end
  end

  PC0VW00.PC0VWIXA = PC0VW02.PC0VWAIX[PC0VWIXL]; /* Style index*/
  PC0VW00.PC0VWIXM = 0; /* Initialize map index*/
  PC0VW00.XOWCD = PC0VW02.XOWCD[PC0VWIXL]; /* Init ownr grp cd*/
  PC0VW00.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL];
  PC0VW00.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL];
  PC0VW00.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL];
  PC0VW00.PC0VWSZA = " "; /* Init size desc array*/
  if (PC0VM001.PC0VMOPT == "R" /* If regular apparel*/
   || PC0VM001.PC0VMOPT == "U") /* Or uncrested apparel*/
    PC0V311(); /* Access VBSIZE accordingly*/
  else
    if (PC0VM001.PC0VMOPT == "B") /* If blank T-shirts*/
      PC0V312(); /* Access VBSIZE accordingly*/
    else /* If screened T-shirts*/
      PC0V313(); /* Access VBSIZE accordingly*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWIXM > 1) /* Page was formatted*/
    PC0VS19(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Any size index not supplied by the buy system must*/
   /* be defaulted to an unused size for subscript integrity.*/
   /* ------------------------------------------------------------*/

  PC0V314(); /* Default unused size indices*/

end // end PC0V310

// Format detail lines - Regular
Function PC0V311()
   /* ------------------------------------------------------------*/
   /* Initial load of index cross reference*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "Z"; /* Buy status*/
  AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL];
  AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL];
  AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL];
  PC0VW04.PC0VWFNC = "S3"; /* Function*/
  PC0V315(); /* Fetch VBSIZEs and load*/

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "Z"; /* Buy status*/
  PC0VW04.PC0VWFNC = "S6"; /* Function*/
  AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL];
  AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL];
  AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL];
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW04.PC0VWFNC = "N6"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/

  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
       /* If new color then load detail line data.*/
      /* ------------------------------------------------------------*/
      if (AB6REC.SY2CLRID != PC0VW00.SY2CLRID) /* If different color*/

        PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment map index*/

        PC0VW00.SY2CLRID = AB6REC.SY2CLRID; /* ===> Save color*/
        PC0VW03.SY2CLRID[PC0VWIXM] = AB6REC.SY2CLRID; /* Color*/
        PC0VW03.OP1PARTN[PC0VWIXM] = AB6REC.OP1PARTN; /* Sales ord*/
        PC0VW03.OP1CUOID[PC0VWIXM] = AB6REC.OP1CUOID; /**/
        PC0VW03.OP1NORID[PC0VWIXM] = AB6REC.OP1NORID; /**/

      end
      /* ------------------------------------------------------------*/
       /* Accumulate quantities for each size of the detail line.*/
      /* ------------------------------------------------------------*/
      PC0V316();

      /* ------------------------------------------------------------*/
       /* Accumulate total quantity for the detail line.*/
      /* ------------------------------------------------------------*/
      PC0VW00.AB6PACKQ = 0; /* Initialize working total*/
      PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
      while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
        PC0VW00.AB6PACKQ = PC0VW00.AB6PACKQ + AB6REC.AB6PACKQ[PC0VWIX3];
        PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment size index*/
      end
      PC0VW03.PC0VWST[PC0VWIXM] = PC0VW00.AB6PACKQ +       PC0VW03.PC0VWST[PC0VWIXM];

      PC0VS18(); /* Load size array & get FOB price*/

      if (PC0VW00.PC0VWIXM >= 12)
        PC0VS19(); /* Add page to temp storage*/
      end
    end

    PC0VW04.PC0VWFNC = "N6"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end
   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C6"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted page to storage*/
   /* ------------------------------------------------------------*/
  if (PC0VW00.PC0VWIXM > 0)
    PC0VS19(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
end // end PC0V311

// Format detail lines - Blank
Function PC0V312()
   /* ------------------------------------------------------------*/
   /* Initial load of the index cross reference*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "T"; /* Buy status*/
  PC0VW04.PC0VWFNC = "S3"; /* Function*/
  AB6REC.OP1PARTN = "*"; /* Set up sales order*/
  AB6REC.OP1CUOID = -1;
  AB6REC.OP1NORID = -1;
  PC0V315(); /* Fetch VBSIZEs and load xref*/

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "T"; /* Buy status*/
  AB6REC.SY2CLRID = "***"; /* color code*/

  PC0VW04.PC0VWFNC = "S1"; /* Function*/
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/
  PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment map index*/
  PC0VW04.PC0VWFNC = "N1"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/

  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
       /* If color matches the selected color then load detail line.*/
      /* ------------------------------------------------------------*/

      if (AB6REC.SY2CLRID == PC0VW02.SY2CLRID[PC0VWIXL] 
       /* If selected color*/
       && AB6REC.AB6XFCTY == PC0VW02.AB6XFCTY[PC0VWIXL] /* & xfcty*/
       && AB6REC.AB6BYTYP == PC0VW02.AB6BYTYP[PC0VWIXL] /* & buy action*/
       && AB6REC.AB6XWHCD == PC0VW02.AB6XWHCD[PC0VWIXL] /* & pfs whse*/
       && AB6REC.XOWCD == PC0VW02.XOWCD[PC0VWIXL]       /* & own grp match*/
       && AB6REC.PC3PONBR == PC0VW02.PC3BLPO[PC0VWIXL]) /* & blnk po*/

        PC0VW03.SY2CLRID[PC0VWIXM] = AB6REC.SY2CLRID; /* Color*/

        /* ------------------------------------------------------------*/
         /* Accumulate quantities for each size of the detail line.*/
        /* ------------------------------------------------------------*/
        PC0V316();

        PC0VW03.PC0VWST[PC0VWIXM] = PC0VW02.AB6PACKQ[PC0VWIXL];

        PC0VS18(); /* Load size array & get FOB price*/

      end
    end

    PC0VW04.PC0VWFNC = "N1"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end
   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C1"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* Add partially formatted page to storage*/
   /* ------------------------------------------------------------*/
  PC0VS19(); /* Add page to temp storage*/

end // end PC0V312

// Format detail lines -Screened
Function PC0V313()
   /* ------------------------------------------------------------*/
   /* Initial load of index cross reference*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "K"; /* Buy status*/
  PC0VW04.PC0VWFNC = "S3"; /* Function*/
  AB6REC.OP1PARTN = "*";
  AB6REC.OP1CUOID = -1;
  AB6REC.OP1NORID = -1;
  PC0V315(); /* Fetch VBSIZEs and load xref*/

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "K"; /* Buy status*/
  AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL];
  AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL];
  AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL];

  PC0VW04.PC0VWFNC = "S2"; /* Function*/
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW04.PC0VWFNC = "N2"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/

  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
       /* If match on selected xref fields then process*/
      /* ------------------------------------------------------------*/
      if (AB6REC.AB6XFCTY == PC0VW02.AB6XFCTY[PC0VWIXL] 
       && AB6REC.AB6XSTYN == PC0VW02.AB6XSTYN[PC0VWIXL] 
       && AB6REC.AB6XCOLR == PC0VW02.AB6XCOLR[PC0VWIXL] 
       && AB6REC.AB6BYTYP == PC0VW02.AB6BYTYP[PC0VWIXL] 
       && AB6REC.AB6XWHCD == PC0VW02.AB6XWHCD[PC0VWIXL] 
       && AB6REC.PC3PONBR == PC0VW02.PC3BLPO[PC0VWIXL]  
       && AB6REC.SY2CLRID == PC0VW02.SY2CLRID[PC0VWIXL] 
       && AB6REC.OP1PARTN == PC0VW02.OP1PARTN[PC0VWIXL] /* s.o.*/
       && AB6REC.OP1CUOID == PC0VW02.OP1CUOID[PC0VWIXL] 
       && AB6REC.OP1NORID == PC0VW02.OP1NORID[PC0VWIXL])

        PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment map index*/

        PC0VW00.SY2CLRID = AB6REC.SY2CLRID; /* Save color*/
        PC0VW03.SY2CLRID[PC0VWIXM] = AB6REC.SY2CLRID; /* Color*/
        PC0VW03.OP1PARTN[PC0VWIXM] = AB6REC.OP1PARTN; /* s.o.*/
        PC0VW03.OP1CUOID[PC0VWIXM] = AB6REC.OP1CUOID;
        PC0VW03.OP1NORID[PC0VWIXM] = AB6REC.OP1NORID;

        /* ------------------------------------------------------------*/
         /* Accumulate quantities for each size of the detail line.*/
        /* ------------------------------------------------------------*/
        PC0V316();

        /* ------------------------------------------------------------*/
         /* Accumulate total quantity for the detail line.*/
        /* ------------------------------------------------------------*/
        PC0VW00.AB6PACKQ = 0; /* Initialize working total*/
        PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
        while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
          PC0VW00.AB6PACKQ = PC0VW00.AB6PACKQ + AB6REC.AB6PACKQ[PC0VWIX3];
          PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment size index*/
        end
        PC0VW03.PC0VWST[PC0VWIXM] = PC0VW00.AB6PACKQ +         PC0VW03.PC0VWST[PC0VWIXM];

        PC0VS18(); /* Load size array & get FOB price*/

        if (PC0VW00.PC0VWIXM >= 12)
          PC0VS19(); /* Add page to temp storage*/
        end

      end
    end

    PC0VW04.PC0VWFNC = "N2"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end
   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C2"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted page to storage*/
   /* ------------------------------------------------------------*/
  if (PC0VW00.PC0VWIXM > 0)
    PC0VS19(); /* Add page to temp storage*/
  end

end // end PC0V313

// Default unused size indices
Function PC0V314()
   /* ------------------------------------------------------------*/
   /* SIZE INDEXS*/
   /* -----------*/
     /* Quantities retrieved form the VBSIZE01 record (AB6REC)*/
     /* are in an array of 10 occurrences, and can correspond*/
     /* to any of the 40 sizes in the PO system. The size index*/
     /* (AB6REC.SY5SZID) tells which size bucket the quantity is*/
     /* for.  Example: AB6REC.AB6PACQ(1) = 10*/
                    /* AB6REC.SY5SZID(1) = 3*/
           /* means a quantity of 10 for size bucket 3*/
     /* All of the VBSIZE01 quantities for a P.O. are stored in*/
     /* PC0VWQ01 through PC0VWQ40 of PC0VW03 indexed by PC0VWIXM*/
     /* PC0VWSID is used for a temporary size index within a loop*/
   /* ------------------------------------------------------------*/
   /* Any size index not supplied by the buy system must*/
   /* be defaulted to an unused size for subscript integrity.*/
   /* Display an error for a missing size index.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWSID = 1; /* Init default size index*/
  PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
  while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
    if (PC0VW00.PC0VWSZS[PC0VWIX3] == PC0VW00.PC0VWSID) /* If ndx used*/
      PC0VW00.PC0VWSID = PC0VW00.PC0VWSID + 1; /* Increment index*/
    end
    PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
  end

  PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
  while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
    if (PC0VW00.PC0VWSZS[PC0VWIX3] == 0) /* If no index is supplied*/
      PC0VW00.PC0VWSZS[PC0VWIX3] = PC0VW00.PC0VWSID;
                                   /* use unused index*/
    end
    PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
  end

  PC0VW00.PC0VW-AB6SZGRP = PC0VW00.PC0VWSZZ;

end // end PC0V314

// Format detail lines - Regular
Function PC0V315()
   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & flag the sizes with quantity*/
   /* ------------------------------------------------------------*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW04.PC0VWFNC = "N3"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* Initialize the index arrays*/
   /* ------------------------------------------------------------*/
  move 0 to PC0VW00.SY5SZID[1] for all; /* ; Size index cross reference*/
  move 0 to PC0VW00.PC0VWSZS[1] for all; /* ; Size index storage array*/

  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Flag sizes for quantities that exist for the VBSIZE fetched*/
    /* ------------------------------------------------------------*/
    PC0VW00.PC0VWIX3 = 1;
    while (PC0VW00.PC0VWIX3 <= 10)

      if (AB6REC.AB6PACKQ[PC0VWIX3] != 0)
        if (AB6REC.SY5SZID[PC0VWIX3] == 0) /* If no index found*/
          PCWREC.XXXMSGNO = 311; /* Missing index*/
          PC0VW00.XXXPRCNM = "PC0V315"; /* Module id*/
          PC0VW00.PCWMAP = 2; /* Request selection screen*/
          PC0VW00.XXXTSPAG = 1; /* Request page 1*/
          exit stack; /* Display message*/
        end
        PC0VW00.PC0VWSID = AB6REC.SY5SZID[PC0VWIX3]; /* Get index*/
        PC0VW00.SY5SZID[PC0VWSID] = 99; /* Flag qty for this size*/
      end
      PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1;

    end

    PC0VW04.PC0VWFNC = "N3"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end

   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C3"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

  PC0VW00.PC0VWIX3 = 1; /* Index to the 40 bucket xref*/
  PC0VW00.PC0VWIX4 = 1; /* Index to the 40 bucket storage array*/

  while (PC0VW00.PC0VWIX3 <= 40)

    if (PC0VW00.SY5SZID[PC0VWIX3] == 99) /* If quantity for this size*/
      PC0VW00.PC0VWSZS[PC0VWIX4] = PC0VW00.PC0VWIX3;
                                   /* Sz ID to array*/
      PC0VW00.SY5SZID[PC0VWIX3] = PC0VW00.PC0VWIX4; /* ID to xref*/
      PC0VW00.PC0VWSIZ[PC0VWIX4] = "Y"; /* Flag display size desc*/
      PC0VW00.PC0VWIX4 = PC0VW00.PC0VWIX4 + 1;
    end

    if (PC0VW00.PC0VWIX4 > 11)
      PC0VW00.XXXPRCNM = "PC0V315"; /* MODULE ID*/
      PCWREC.XXXMSGNO = 508; /* warning msg of over 10 sizes*/
    end

    PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1;

  end

  PC0VW00.PC0VW-AB6SZGRP = PC0VW00.PC0VWSZZ;

end // end PC0V315

// Accumulate quantities
Function PC0V316()
   /* ------------------------------------------------------------*/
   /* Accumulate quantities for each size of the detail line.*/
   /* after finding the index in the index cross reference*/
   /* ------------------------------------------------------------*/
  PC0VW00.PC0VWORG = PC0VW03.PC0VWORG[PC0VWIXM]; /* Reformat qty*/
  PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
  while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
    if (AB6REC.AB6PACKQ[PC0VWIX3] != 0) /* If quantity exists*/
      PC0VW00.PC0VWSID = AB6REC.SY5SZID[PC0VWIX3]; /* Get index;*/
      PC0VW00.PC0VWIX4 = PC0VW00.SY5SZID[PC0VWSID]; /* Indx xref*/
      PC0VWORD[PC0VWIX4] = AB6REC.AB6PACKQ[PC0VWIX3] + PC0VWORD[PC0VWIX4];
    end
    PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1;
  end
  PC0VW03.PC0VWORG[PC0VWIXM] = PC0VW00.PC0VWORG; /* Reformat qty*/
end // end PC0V316

// Converse detail map
Function PC0V320()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0V321(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0VM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* Sound alarm only if there was an error.*/
   /* ------------------------------------------------------------*/

  PC0VM003.XXXPRCNM = PC0VW00.XXXPRCNM; /* Module identification*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0VM003 alarm; /* Indicate sound alarm*/
  end

  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end

  converse PC0VM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0VW00.XXXPRCNM = "PC0V"; /* Module identification*/

  PC0V322(); /* Converse popups*/

end // end PC0V320

// Format map detail lines
Function PC0V321()
   /* ------------------------------------------------------------*/
                    /* - INDEX USAGE -*/
   /* ------------------------------------------------------------*/
   /* VABSTY01 data is kept in an array in PC0VW01.*/
   /* PC0VWIX1 is used for building this array and*/
   /* PC0VWIXA is used for accessing the array.*/

   /* VBSIZE01 data is kept in an array in PC0VW02.*/
     /* Only enough of the array is loaded to fill the requested*/
     /* pages to limit the database access occurring per converse*/
   /* PC0VWIX2 is used for building this array and*/
   /* PC0VWIXL is used for accessing the array.*/

   /* PC0VWIX3 is used as a temporary work index*/

   /* PC0VWIXM is used as an index to the map detail lines.*/

   /* SIZE INDEXS*/
   /* -----------*/
     /* Quantities retrieved form the VBSIZE01 record (AB6REC)*/
     /* are in an array of 10 occurrences, and can correspond*/
     /* to any of the 40 sizes in the PO system. The size index*/
     /* (AB6REC.SY5SZID) tells which size bucket the quantity is*/
     /* for.  Example: AB6REC.AB6PACQ(1) = 10*/
                    /* AB6REC.SY5SZID(1) = 3*/
           /* means a quantity of 10 for size bucket 3*/
     /* All of the VBSIZE01 quantities for a P.O. are stored in*/
     /* PC0VWQ01 through PC0VWQ40 of PC0VW03 indexed by PC0VWIXM*/
     /* PC0VWSID is used for a temporary size index within a loop*/
   /* ------------------------------------------------------------*/

  set PC0VM003 initial; /* M003 input/output area*/

   /* ------------------------------------------------------------*/
   /* Format map header fields*/
   /* ------------------------------------------------------------*/

  PC0VM003.XXXUSER = PC0VM001.XXXUSER; /* User ID*/
  PC0VM003.PC0VMOPT = PC0VM001.PC0VMOPT; /* Request type*/
  PC0VM003.PC0VMMO = PC0VW00.PC0VWPMO; /* Buy month month*/
  PC0VM003.PC0VMYR = PC0VW00.PC0VWPYR; /* Buy month year*/
  PC0VM003.XXXTSPAG = PC0VW00.XXXTSPAG; /* Current page*/
  PC0VM003.TA5TSQIX = PC0VW00.TA5TSQIX; /* Total pages*/

  PC0VS53(); /* Get PO ID season*/
  PC0VW00.PC0VWSEC = VPOVFY02.PCFSECD; /* Season Year Code*/

  PC0VW00.PC0VWD1 = "-"; /* PO ID dash 1*/
  PC0VW00.PC0VWMM1 = PC0VW00.PC0VWPMO; /* PO ID buy month*/
  PC0VW00.PC0VWD2 = "-"; /* PO ID dash 2*/
  PC0VW00.PC0VWD3 = "-"; /* PO ID dash 3*/
  PC0VW00.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/

  VFCTY003.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
  PC0VS20();
                                   /* Get factory descr*/
  PC0VM003.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory descr*/

  PC0VW00.PC0VWIXA = PC0VW02.PC0VWAIX[PC0VWIXL]; /* Index to style*/
  PC0VM003.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  PC0VM003.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/

  PC0VM003.XOWCD = PC0VW00.XOWCD; /* Owner Group*/

  PC0VM003.PC0VMTQT = PC0VW02.AB6PACKQ[PC0VWIXL]; /* Quantity*/
   /* ------------------------------------------------------------*/
   /* Get the style description.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Init record*/
  PG2REC.XGPCD = "03"; /* GPC code*/
  PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  XSPG201(); /* Retrieve style*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0VM003.SY1SSTNM = PG2REC.SY1SSTNM; /* Style desc*/
  else /* Row not found*/
    PC0VM003.SY1SSTNM = "** NOT FOUND"; /* No style desc*/
  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0VW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0VW00.XXXTSPAG > PC0VW00.TA5TSQIX) /* Desired greater highest*/
        PC0VW00.XXXTSPAG = PC0VW00.TA5TSQIX; /* Default to highest*/
      end

      PC0VS21(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWIXM = 1; /* Initialize line index*/

  while (PC0VW00.PC0VWIXM <= 12 /* Until screen is full*/
   && PC0VW03.SY2CLRID[PC0VWIXM] > " ") /* or end of data*/

    PC0VM003.SY2CLRID[PC0VWIXM] = PC0VW03.SY2CLRID[PC0VWIXM];
    PC0VM003.PC0VMSQ1[PC0VWIXM] = PC0VW03.PC0VWQ01[PC0VWIXM];
    PC0VM003.PC0VMSQ2[PC0VWIXM] = PC0VW03.PC0VWQ02[PC0VWIXM];
    PC0VM003.PC0VMSQ3[PC0VWIXM] = PC0VW03.PC0VWQ03[PC0VWIXM];
    PC0VM003.PC0VMSQ4[PC0VWIXM] = PC0VW03.PC0VWQ04[PC0VWIXM];
    PC0VM003.PC0VMSQ5[PC0VWIXM] = PC0VW03.PC0VWQ05[PC0VWIXM];
    PC0VM003.PC0VMSQ6[PC0VWIXM] = PC0VW03.PC0VWQ06[PC0VWIXM];
    PC0VM003.PC0VMSQ7[PC0VWIXM] = PC0VW03.PC0VWQ07[PC0VWIXM];
    PC0VM003.PC0VMSQ8[PC0VWIXM] = PC0VW03.PC0VWQ08[PC0VWIXM];
    PC0VM003.PC0VMSQ9[PC0VWIXM] = PC0VW03.PC0VWQ09[PC0VWIXM];
    PC0VM003.PC0VMSQ0[PC0VWIXM] = PC0VW03.PC0VWQ10[PC0VWIXM];
    PC0VM003.PC0VMST[PC0VWIXM] = PC0VW03.PC0VWST[PC0VWIXM];
    PC0VM003.PC0VMPRC[PC0VWIXM] = PC0VW03.PC0VWPRC[PC0VWIXM];

    PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If redisplay of processed selection then protect fields*/
   /* and display processed values.*/
   /* ------------------------------------------------------------*/

  if (PC0VW02.PC0VWSEL[PC0VWIXL] == "V")
                                   /* If selection already processed*/

    set PC0VM003.PC0VMPF6 skip, invisible; /* Darken PF6:SKIP literal*/
    set PC0VM003.PC6ETSDT skip; /* Protect ETS date*/
    set PC0VM003.PC4ORTYP skip; /* Protect PO type*/
    set PC0VM003.PC2CUXID skip; /* Protect Customer*/
    set PC0VM003.XWHCD skip; /* Protect Warehouse*/
    set PC0VM003.PC0VMLT1 protect; /* Display ETAL literal*/
    set PC0VM003.PC0VMETL protect; /* Display ETAL*/
    PC0VM003.PC6ETSDT = PC0VW00.PC0VWETS; /* ETS date*/
    PC0VW00.PC0VWMM2 = PC0VW00.PC0VWMO; /* PO ID dlvry mnth*/
    PC0VM003.PC0VWPID = PC0VW00.PC0VWPID; /* PO ID reformat*/
    PC0VM003.PC4ORTYP = PC0VW00.PC4ORTYP; /* PO type*/
    PC0VM003.PC2CUXID = PC0VW00.PC2CUXID; /* Customer*/
    PC0VM003.XWHCD = PC0VW00.XWHCD; /* Warehouse*/

    if (PC0VM001.PC0VMOPT == "B" /* blank style*/
     && PC0VW02.AB6BYTYP[PC0VWIXL] == "P") /* pull from stock*/
       /* do not show po number field*/
    else
      set PC0VM003.PC3PONBR skip, bold; /* Display PO number*/
      PC0VM003.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
      set PC0VM003.PC0VMLT2 protect; /* Display PO number literal*/
    end

    set PCPREC empty; /* Init date rec*/
    set FYTREC empty; /**/

     /* ----------------------------------------------------------------*/
                  /* FINDING THE MODE OF TRANSPORTATION*/
     /* ----------------------------------------------------------------*/

    FYTREC.XGPCD = "03"; /* Gpc code*/
    FYTREC.PO-REG-CD = "01"; /* Region code*/
    FYTREC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
    FYTREC.PC4ORTYP = PC0VW00.PC4ORTYP; /* PO type*/
    if (PC0VM003.XWHCD > "  ")
      FYTREC.PC2CUXID = "     ";
      if (PC0VW00.XWHCD in XWHTBL.XWHCD) /* Warehouse in table*/
        FYTREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* destination ctry*/
      else
        FYTREC.XCTCD = "    ";
      end
    else
      VPRDCU03.PC2CUXID = PC0VW00.PC2CUXID;
      VPRDCU03.XGPCD = "03";
      try
        call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
      if (sysVar.errorCode == "00000000")
        if (SQLCA.VAGen_SQLCODE == 0)
          FYTREC.PC2CUXID = VPRDCU03.PC2CUXID;
          FYTREC.XCTCD = VPRDCU03.XCTCD; /* destination country*/
        else
          converseLib.validationFailed(10);
          TA1REC.TA1FUNC = "POST";
        end
      else
        converseLib.validationFailed(10);
        TA1REC.TA1FUNC = "RETN";
      end
      if ((sysVar.errorCode != "00000000") || 
      (SQLCA.VAGen_SQLCODE != 0))
        PC0VW00.XXXPRCNM = "PC0V321";
        TAEREC.SQLCAREC = SQLCA.SQLCAREC;
        TA1REC.TA1MAP = sysVar.errorCode;
        PC0VW00.PCWMAP = 1;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1LOC = "SELECT DPRODC.VPRDCU03";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1PGMAP = PC0VW00.XXXPRCNM;
        TA1REC.TA1DBASE = "DPRODC";
        TA1REC.TA1TBLVU = "VPRDCU03";
        PC0VW00.TA1TBLKE = " ";
        PC0VW00.PC0VWKA1 = VPRDCU03.XGPCD;
        PC0VW00.PC0VWKA2 = VPRDCU03.PC2CUXID;
        TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE;
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
        exit stack;
      end
    end
  /* ************************/
  /* GET MODE OF TRANSPORTATION*/
  /* ************************/
    call "FY146D" (FYTREC) {isNoRefresh = yes, isExternal = yes}; /* Get the mode of transportation*/
    if (FYTREC-RETURN-CODE == "0")
      PCPREC.YMTCD = FYTREC.YMTCD;
    else
      if (FYTREC-RETURN-CODE == "1")
        PC0VW00.XXXPRCNM = "PC0V321"; /* Module identification*/
        converseLib.validationFailed(545); /* Enter must be used for fast pat*/
      else
        PC0VW00.XXXPRCNM = "PC0V321"; /* Module identification*/
        converseLib.validationFailed(546); /* Enter must be used for fast pat*/
      end
      PC0VW00.XXXPRCNM = "PC0V321";
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      TA1REC.TA1MAP = sysVar.errorCode;
      PC0VW00.PCWMAP = 1;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1LOC = "CALL TO FY146D        ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
      TA1REC.TA1PGMAP = PC0VW00.XXXPRCNM;
      TA1REC.TA1DBASE = "      ";
      TA1REC.TA1TBLVU = "        ";
      PC0VW00.TA1TBLKE = " ";
      PC0VW00.PC0VWKA1 = FYTREC.FY1FCTYC;
      PC0VW00.PC0VWKA2 = FYTREC.XCTCD;
      PC0VW00.PC0VWKA3 = FYTREC.PC4ORTYP;
      PC0VW00.PC0VWKA4 = FYTREC.PC2CUXID;
      TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE;
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
      exit stack;
    end

    PCPREC.XGPCD = "03"; /* GPC code*/
    PCPREC.XWHCD = PC0VW00.XWHCD; /* Warehouse*/
    PCPREC.PC2CUXID = PC0VW00.PC2CUXID; /* Customer*/
    PCPREC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
    PCPREC.PC6ETSDT = TA2REC.TA2GRGGN; /* ETS date*/

    XSPCS05(); /* Get ETAL date*/
    PC0VM003.PC0VMETL = PCPREC.PCPMETAL; /* ETAL DATE*/

  else /* ===> selection not yet processed*/

    if (converseVar.eventKey is enter /* If enter*/
     || converseVar.eventKey is pf6)  /* or PF6 (skip)*/
      if (PC0VM001.PC0VMOPT == "S") /* Screened tee shirt*/
        PC0VM003.PC4ORTYP = "SD"; /* PO type*/
        PC0VM003.XOWCD = PC0VW00.XOWCD; /* Owner Group*/
      else
        if (PC0VM001.PC0VMOPT == "B" /* Blank tee shirt*/
         && PG2REC.PG2SCRFL == "I")  /* Interim style*/
          PC0VM003.PC4ORTYP = "SD"; /* PO type*/
          PC0VM003.XOWCD = PC0VW00.XOWCD; /* Owner Group*/
        else
          PC0VM003.XOWCD = PC0VW00.XOWCD; /* Owner Group*/
          PC0VM003.PC4ORTYP = PC0VW01.PC4ORTYP[PC0VWIXA]; /* PO typ*/
        end
      end

      if (PC0VM001.PC0VMOPT == "B" /* blank tee shirt*/
       && PC0VW02.AB6XFCTY[PC0VWIXL] != " ")
        PC0VM003.PC2CUXID = PC0VW02.AB6XFCTY[PC0VWIXL];
        PC0VM003.XWHCD = " ";
      else
        PC0VM003.PC2CUXID = PC0VW01.PC2CUXID[PC0VWIXA];
        PC0VM003.XWHCD = PC0VW01.XWHCD[PC0VWIXA];
      end

    else /* ===> not <PF6> or <enter>*/
      PC0VM003.PC4ORTYP = PC0VW00.PC4ORTYP; /* PO type*/
      PC0VM003.PC2CUXID = PC0VW00.PC2CUXID; /* Customer*/
      PC0VM003.XWHCD = PC0VW00.XWHCD; /* Warehouse*/
      PC0VM003.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/

    end /* ===> <PF6> or <enter> check*/

    PC0VM003.PC6ETSDT = PC0VW00.PC0VWETS; /* ETS date*/
    set PC0VM003.PC6ETSDT cursor; /* Position cursor at ETS*/

    if (PC0VW00.PC0VWMO != 0)
      PC0VW00.PC0VWMM2 = PC0VW00.PC0VWMO; /* PO ID dlvry mnth*/
    else
      PC0VW00.PC0VWMM2 = " "; /* PO ID dlvry mnth*/
    end

    PC0VM003.PC0VWPID = PC0VW00.PC0VWPID; /* PO ID reformat*/

  end /* ===>  "V" check?*/

  PC0VS22();
                                   /* Get PO description*/
  PC0VM003.PC4SDESC = PC4REC.PC4SDESC; /* PO description*/

   /* ------------------------------------------------------------*/
   /* Display appropriate fields for screened t-shirts.*/
   /* ------------------------------------------------------------*/
  if (PC0VM001.PC0VMOPT == "S")

    if (PC0VW02.IN7STNBR[PC0VWIXL] > 0) /* Stock transfer # exists*/
      PC0VM003.IN7STNBR = PC0VW02.IN7STNBR[PC0VWIXL]; /* Stk trn #*/
      set PC0VM003.PC0VMLT3 protect; /* Stock xfer literal*/
      set PC0VM003.IN7STNBR protect; /* Stock xfer number*/
    end

    set PC0VM003.PC0VMLT5 protect; /* Blank style/color literal*/
    set PC0VM003.PC3BLPO protect; /* Display blank PO number*/
    PC0VM003.PC3BLPO = PC0VW02.PC3BLPO[PC0VWIXL]; /* Blank PO nbr*/

    set PC0VM003.PC0VMLT6 protect; /* Blank style/color literal*/
    set PC0VM003.AB6XSTYN protect; /* Blank style*/
    set PC0VM003.AB6XCOLR protect; /* Blank color*/
    PC0VM003.AB6XSTYN = PC0VW02.AB6XSTYN[PC0VWIXL]; /* Blank style*/
    PC0VM003.AB6XCOLR = PC0VW02.AB6XCOLR[PC0VWIXL]; /* Blank color*/
  end

   /* ------------------------------------------------------------*/
   /* Display appropriate fields for blank t-shirts.*/
   /* ------------------------------------------------------------*/
  if (PC0VM001.PC0VMOPT == "B")
    set PC0VM003.PC0VMLT4 protect; /* Action literal*/
    set PC0VM003.PC0VMACT protect; /* Action*/
    if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P") /* If pull from stock action*/
      PC0VM003.PC0VMACT = "PFS"; /* Action*/
      PC0VM003.PC0VMLT8 = "SCREENER:"; /* Change cust literal*/
      set PC0VM003.PC0VMLT0 skip, invisible; /* Darken warehouse literal*/
      set PC0VM003.XWHCD skip, invisible; /* Darken warehouse*/
      set PC0VM003.PC0VMLT3 protect; /* Stock xfer literal*/
      set PC0VM003.PC0VMLT9 protect; /* PFS warehouse literal*/
      set PC0VM003.AB6XWHCD normal; /* PFS warehouse*/
      PC0VM003.AB6XWHCD = PC0VW02.AB6XWHCD[PC0VWIXL]; /* PFS whse*/
      if (PC0VW02.PC0VWSEL[PC0VWIXL] == "V") /* If selection processed*/
        PC0VM003.IN7STNBR = IN7REC.IN7STNBR; /* Stk trn #*/
        set PC0VM003.IN7STNBR protect; /* Stock xfer number*/
      else
        set PC0VM003.IN7STNBR normal; /* Stock xfer number*/
      end
    else
      if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* If action is redirect*/
        set PC0VM003.XXXPRCNM cursor; /* Cursor in upper left*/
        PC0VM003.PC0VMACT = "REDIR"; /* Action*/
        set PC0VM003.PC0VMLT5 protect; /* Blank PO literal*/
        set PC0VM003.PC4ORTYP protect; /* Protect PO type*/
        set PC0VM003.XWHCD protect; /* Protect warehouse*/
        set PC0VM003.PC2CUXID protect; /* Protect customer*/
        set PC0VM003.PC3BLPO protect; /* Display blank PO number*/
        PC0VM003.PC0VMLT8 = "SCREENER:"; /* Change cust literal*/
        PC0VM003.PC2CUXID = PC0VW02.AB6XFCTY[PC0VWIXL]; /* Customer*/
        PC0VM003.PC3BLPO = PC0VW02.PC3BLPO[PC0VWIXL]; /* Blank PO #*/
        if (PC0VW02.PC0VWSEL[PC0VWIXL] == "V") /* If selection processed*/
          if (PC0VW02.AB6BYTYP[PC0VWIXL] != "P") /* if pull from stock*/
            PC0VM003.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* PO #*/
          end
        else
          set PC0VM003.PC0VMLT7 skip, invisible; /* Darken ETS literal*/
          set PC0VM003.PC6ETSDT skip, invisible; /* Darken ETS date*/
        end
      else
        PC0VM003.PC0VMACT = "BUY"; /* Action*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Get the size descriptions.*/
   /* ------------------------------------------------------------*/

  PC0VS23(); /* Get the size descriptions*/

  PC0VW00.PC0VWIX3 = 1; /* Initialize map index*/
  while (PC0VW00.PC0VWIX3 <= 10) /* While more detail lines*/
    if (PC0VW00.PC0VWSIZ[PC0VWIX3] == "Y") /* If quantities for size*/
      PC0VW00.PC0VWSID = PC0VW00.PC0VWSZS[PC0VWIX3]; /* Size index*/
      PC0VM003.PC0VMSIZ[PC0VWIX3] = SY4REC.SY4IDDSC[PC0VWSID];
    else
      set PC0VM003.PC0VMSIZ[PC0VWIX3] skip, invisible; /* Darken description*/
    end
    PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment map line index*/
  end

end // end PC0V321

// Converse pop-up windows
Function PC0V322()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0VM003.XWHCD == " ")
    PC0VW00.XWHCD = "51";
  else
    PC0VW00.XWHCD = PC0VM003.XWHCD;
  end

  if (PC0VW00.XWHCD in XWHTBL.XWHCD) /* Warehouse in table*/
    PC0VW00.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex]; /* save it*/
  else
    PC0VW00.XWHOWNGF = "N"; /* save it*/
  end

  if (PC0VM003.XOWCD == "?" /* If owner grp list requested*/
   && PC0VW00.XWHCD != " "  /* and warehouse entered*/
   && PC0VW00.XWHOWNGF == "N") /* Own grp not valid for whse*/
    PC0VW00.XXXPRCNM = "PC0V322"; /* Module identification*/
    set PC0VM003.XOWCD cursor, bold; /* Highlight*/
    PC0VM003.XOWCD = "00"; /* Set to default of zero zero*/
    converseLib.validationFailed(404); /* Pop-up window not valid*/
    exit stack; /* Exit to display map*/
  end

  if (PC0VM003.XWHCD == "?" /* If warehouse list requested*/
   || PC0VM003.XOWCD == "?") /* If owner grp list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0VW00.XXXPRCNM = "PC0V322"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouses.*/
   /* ------------------------------------------------------------*/

  if (PC0VM003.XWHCD == "?") /* List requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0VM003.XWHCD = PC0VW01.XWHCD[PC0VWIXA];
    else
      PC0VM003.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0VM003.XWHCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner groups*/
   /* ------------------------------------------------------------*/

  if (PC0VM003.XOWCD == "?") /* List requested*/
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = " OWNER GROUP"; /* Heading*/
    XX0XW02.XWHCD = PC0VW00.XWHCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0VM003.XOWCD = "00";
    else
      PC0VM003.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0VM003.XOWCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0VW00.XXXPRCNM = "PC0V322"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0V322

// Check attention identifiers
Function PC0V330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Reset map*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf6   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8) 
    PC0VW00.XXXPRCNM = "PC0V330"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for selection map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0VS17(); /* purge temporary storage*/
    PC0VW00.PCWMAP = 2; /* Request list map*/
    exit stack; /* Display map*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for redisplay*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6 /* If PF6*/
   && PC0VW02.PC0VWSEL[PC0VWIXL] == "V") /* If this is a redisplay*/
    PC0VW00.XXXPRCNM = "PC0V330"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid PF key*/
  end

end // end PC0V330

// Reset highlighted fields
Function PC0V340()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0VM003.PC6ETSDT cursor, initialAttributes; /* ETS date*/
  set PC0VM003.PC4ORTYP initialAttributes; /* Type*/
  if (PC0VM001.PC0VMOPT == "B" /* If blank T-shirts*/
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "P") /* and pull from stock action*/
    set PC0VM003.AB6XWHCD normal; /* PFS Warehouse*/
    set PC0VM003.IN7STNBR normal; /* Stock transfer number*/
  else
    set PC0VM003.XWHCD initialAttributes; /* Warehouse*/
  end

  set PC0VM003.XOWCD initialAttributes; /* Owner Group*/
  set PC0VM003.PC2CUXID initialAttributes; /* Customer*/

  if (PC0VM003.PC0VMOPT == "B") /* If option = 'B'*/
    if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R" /* If action = 'R'*/
     || PC0VW02.AB6BYTYP[PC0VWIXL] == "P") /* or action = 'P'*/
      set PC0VM003.XWHCD skip, invisible; /* Warehouse*/
    end
  end

end // end PC0V340

// Verify the entered data
Function PC0V350()
   /* ------------------------------------------------------------*/
   /* PF7 - Verify the page backward scroll request*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0VW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      converseLib.validationFailed(2); /* No previous pages to display*/
      exit stack; /* Flow to converse map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF8 - Verify the page forward scroll request*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0VW00.XXXTSPAG >= PC0VW00.TA5TSQIX) /* if no more pages*/
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      converseLib.validationFailed(3); /* No more pages to display*/
      exit stack; /* Flow to converse map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If selection was already processed or skip requested*/
   /* then get next selection*/
   /* ------------------------------------------------------------*/
  if (PC0VW02.PC0VWSEL[PC0VWIXL] == "V" /* If already processed*/
   || converseVar.eventKey is pf6)      /* or skip requested*/
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Determine if warehouse in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0VM003.AB6XWHCD != " ") /* If warehouse entered*/
    /**/
    if (PC0VM003.AB6XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      /**/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "03") /* IF valid for apparrel*/
        PC0VW02.AB6XWHCD[PC0VWIXL] = PC0VM003.AB6XWHCD; /* Save*/
      else
        PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
        set PC0VM003.AB6XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Warehouse invalid*/
      end /* ===> in table and valid check*/
      /**/
    else
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      set PC0VM003.AB6XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse invalid*/
    end /* ===> in table check*/
    /**/
  else
    /**/
    if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P" /* If action = pull from stock*/
     && PC0VM001.PC0VMOPT == "B")         /* and blank T-shirt*/
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      set PC0VM003.AB6XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse required*/
    end
    /**/
  end /* ===> xwhse entered check*/

   /* ------------------------------------------------------------*/
   /* Determine if warehouse in table & status is active.*/
   /* ------------------------------------------------------------*/
  if (PC0VM003.XWHCD != " ") /* If warehouse entered*/
    /**/
    if (PC0VM003.XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      PC0VW00.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      /**/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03" /* IF valid for apparrel*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "03") /* IF valid for apparrel*/
         /* =========== Next Sentence ==================>*/
      else /* ===> in table but not valid*/
        PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
        set PC0VM003.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Warehouse invalid*/
      end
      /**/
    else /* ===> not in table*/
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      set PC0VM003.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine that cust xref is entered and valid.*/
   /* ------------------------------------------------------------*/
  if (PC0VM003.PC2CUXID == " ") /* Cust xref is blank*/
    if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R" /* If action = redirect*/
     || PC0VW02.AB6BYTYP[PC0VWIXL] == "P") /* or action = pull form stock*/
      if (PC0VM003.PC0VMOPT == "B") /* If option = blank T-shirts*/
        PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
        set PC0VM003.PC2CUXID cursor, bold; /* Highlight*/
        converseLib.validationFailed(45); /* Cust xref is missing*/
      end
    end
  else
    set VPRDCU03 empty; /* Init cust rec*/
    VPRDCU03.XGPCD = "03"; /* GPC code*/
    VPRDCU03.PC2CUXID = PC0VM003.PC2CUXID; /* Customer*/
    PC0VS41(); /* Validate cust xref*/
  end

   /* -----------------------------------------------------------*/
   /* Validate for SAP countries*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PC0VM003.PC2CUXID != " ")
      if (VPRDCU03.XCTCD in PCCTTBL.XCTCD)
        if (VPRDCU03.XGPCD == "03"                                    
         && ((VPRDCU03.KUCCOID == 694638 && VPRDCU03.KUMSTRID == 272) /*   CHL21*/
         || (VPRDCU03.KUCCOID == 694633 && VPRDCU03.KUMSTRID == 553)  /*MEX12*/
         || (VPRDCU03.KUCCOID == 694633 && VPRDCU03.KUMSTRID == 301)  /*MEX18*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 822)  /*ARG21*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 331)  /*PAR21*/
         || (VPRDCU03.KUCCOID == 694644 && VPRDCU03.KUMSTRID == 664))) /*URG21*/
   /* Oct '03 GO-LIVE CHANGES*/
          /**/
        else
          PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
          set PC0VM003.PC2CUXID cursor, bold; /* Highlight*/
          converseLib.validationFailed(579); /* cannot create po's*/
          exit stack;
        end
      end
    else
      if (PC0VM003.XWHCD in PCCTTBL.XWHCD)
        PC0VW00.XXXPRCNM = "PC0V350"; /* module identification*/
        set PC0VM003.XWHCD cursor, bold;
        converseLib.validationFailed(579);
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine that P.O. type is entered and valid.*/
   /* ------------------------------------------------------------*/
  if (PC0VM003.PC4ORTYP == " ") /* If PO type is blank*/
    PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
    set PC0VM003.PC4ORTYP cursor, bold; /* Highlight*/
    converseLib.validationFailed(33); /* P.O. type missing*/
  else
    PC0VS22(); /* Validate P.O. type*/
  end

   /* ------------------------------------------------------------*/
   /* Determine that stock xfer number is valid.*/
   /* ------------------------------------------------------------*/
  /* IF PC0VM003.PC0VMOPT EQ 'B';     /* If option = blank T-shirts*/
  /* IF PC0VM003.IN7STNBR GT 0      /* If stock xfer number*/
   /* AND EZEMNO EQ 0;             /* and no errors*/
   /* SET IN7REC EMPTY;            /* Initialize record*/
  /* MOVE PC0VM003.IN7STNBR TO IN7REC.IN7STNBR; /* Stock xfer number*/
  /* ;*/
   /* PC0VS24();                   /* Call Stock xfer Table*/

  /* IF SQLCA.SQLCODE EQ 0;       /* If Stock xfer found*/
  /* IF IN7REC.XGPCD NE '03';   /* If GPC codes not match*/
  /* SET PC0VM003.IN7STNBR CURSOR,BRIGHT; /* Highlight error*/
  /* MOVE 212 TO EZEMNO;      /* Stock xfer invalid for gpc*/
  /* MOVE 'PC0V350' TO PC0VW00.XXXPRCNM; /* Module identification*/
  /* ELSE;*/
  /* IF IN7REC.KUCCOID NE VPRDCU03.KUCCOID /* Company ID*/
  /* OR IN7REC.KUMSTRID NE VPRDCU03.KUMSTRID /* Store ID*/
  /* OR IN7REC.XNXCD NE VPRDCU03.XNXCD /* Dept code*/
  /* OR IN7REC.IN7STFWH NE PC0VM003.AB6XWHCD;*/
  /* /* Pull from stock whse*/
  /* SET PC0VM003.IN7STNBR CURSOR,BRIGHT; /* Highlight error*/
  /* MOVE 231 TO EZEMNO;    /* Xfer invalid for whse*/
  /* MOVE 'PC0V350' PC0VW00.XXXPRCNM; /* Module identification*/
  /* ELSE;*/
  /* PC0VS25();             /* DINVNT.VTFITM01 exist ?*/
  /* IF SQLCA.SQLCODE EQ 0; /* If item already exists*/
  /* SET PC0VM003.IN7STNBR CURSOR,BRIGHT; /* Highlight error*/
  /* MOVE 232 TO EZEMNO;  /* Item already exists*/
  /* MOVE 'PC0V350' TO PC0VW00.XXXPRCNM; /* Module identification*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* ELSE;*/
  /* SET PC0VM003.IN7STNBR CURSOR,BRIGHT; /* Highlight error*/
  /* MOVE 40 TO EZEMNO;         /* Stock xfer invalid*/
  /* MOVE 'PC0V350' TO PC0VW00.XXXPRCNM; /* Module identification*/
  /* END;*/
  /* END;*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Validate ETS date.*/
   /* ------------------------------------------------------------*/
  if (PC0VW02.AB6BYTYP[PC0VWIXL] != "R" /* If not a redirect*/
   || PC0VM001.PC0VMOPT != "B")         /* or not blank T shirt*/
    set TA2REC empty; /* Initialize date record*/
    TA2REC.TA2GRGAN = PC0VM003.PC6ETSDT; /* To change date*/
    TA2REC.TA2GRTYP = "A"; /* Type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
    PC0VS26(); /* Validate date*/
    if (TA2REC.TA2RTNCD != 0)
      PC0VW00.PC0VWMM2 = " "; /* Space to PO ID dlvy mo*/
      PC0VM003.PC0VWPID = PC0VW00.PC0VWPID; /* PO ID*/
      PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
      set PC0VM003.PC6ETSDT cursor, bold; /* Highlight*/
      converseLib.validationFailed(230); /* Invalid date*/
    else
      PC0VW00.PC0VWMM2 = TA2REC.TA2GRBMM; /* Move month to PO ID*/
      PC0VM003.PC0VWPID = PC0VW00.PC0VWPID; /* PO ID*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate customer/warehouse and direct ship combination.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* If no errors found*/
    PC0VS47();
    /**/
  end

   /* ------------------------------------------------------------*/
   /* Fields are not modifiable for blank redirect so any errors*/
   /* are in data from buy system. Exit to the selection screen.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0 /* If errors*/
   && PC0VM003.PC0VMOPT == "B"          /* and blank T-shirts*/
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* and redirect*/
    PC0VW00.PCWMAP = 2; /* Request selection screen*/
    PC0VW00.XXXTSPAG = 1; /* Request page 1*/
    PC0VW00.XXXPRCNM = "PC0V350"; /* Module identification*/
    exit stack; /* Display message*/
  end

  PC0VW00.PC0VWETS = PC0VM003.PC6ETSDT; /* Save ETS date*/
  PC0VW00.PC4ORTYP = PC0VM003.PC4ORTYP; /* Save PO type*/
  PC0VW00.PC2CUXID = PC0VM003.PC2CUXID; /* Save Customer*/
  PC0VW00.XWHCD = PC0VM003.XWHCD; /* Save warehouse*/
  PC0VW00.XOWCD = PC0VM003.XOWCD; /* Save owner group*/

end // end PC0V350

// Process valid input request
Function PC0V360()
  PC0VW00.PC0VWIXM = 1; /* Init map index*/
   /* ------------------------------------------------------------*/
   /* If skip requested then deselect this row and get the next.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf6) /* If skip requested*/
    PC0VW02.PC0VWSEL[PC0VWIXL] = " "; /* Deselet this row*/
    PC0VW00.PC0VWSWR = "Y"; /* Request for data*/
  end

   /* ------------------------------------------------------------*/
   /* Do not process if errors exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* If errors exist*/
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* PF7 - page backward scroll request*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* If page backward*/
    PC0VW00.XXXTSPAG = PC0VW00.XXXTSPAG - 1; /* Decrement page number*/
  end

   /* ------------------------------------------------------------*/
   /* PF8 - page forward scroll request*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* If page forward*/
    PC0VW00.XXXTSPAG = PC0VW00.XXXTSPAG + 1; /* Increment page number*/
  end

   /* ------------------------------------------------------------*/
   /* ENTER - autoload the PO request*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* If process requested*/

    XX0XS01(); /* ===>           Get date and time*/

    /* ------------------------------------------------------------*/
     /* Process screened T-shirts and regular apparel.*/
    /* ------------------------------------------------------------*/
    if (PC0VW02.PC0VWSEL[PC0VWIXL] == "S" /* build po by style*/
     || PC0VW02.PC0VWSEL[PC0VWIXL] == "C") /* build po's by color*/
      if (PC0VM003.PC0VMOPT == "R" /* If regular buy*/
       || PC0VM003.PC0VMOPT == "U" /* or uncrested*/
       || PC0VM003.PC0VMOPT == "S") /* or screened T-shirts*/
        PC0V361(); /* Create PO*/

        set VPOITM05 empty; /* Initialize item record*/
        VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD; /* PO REGION CODE*/
        VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR; /* PO number*/
        VPOITM05.PC6PLAN = 1; /* Plan number*/
        PC0V362(); /* Create PO item and Size*/

        if (PC0VW02.PC0VWSEL[PC0VWIXL] != "C") /* PO AT COLOR LEVEL*/
          PC0VS14(); /* Update Vbsize record*/
        end

        if (PC0VM003.PC0VMOPT == "R" /* If regular buy*/
         || PC0VM003.PC0VMOPT == "U") /* or uncrested*/
          PC0VS42(); /* Select unique VBPLAN*/
          if (VAGen_SQLCODE == 100)
             /* next sentence*/
          else
            PC0VS43(); /* Delete VBPLAN*/
            PC0VS44(); /* Add VBPLAN with 'L'*/
          end
        else
          PC0VS51(); /* if all vbsize updated: update vbplan*/
        end
        if (PCWREC.XXXMSGNO == 0) /* No previous msg set*/
          if (PC0VW02.PC0VWSEL[PC0VWIXL] == "C") /* build po's by color*/
            PCWREC.XXXMSGNO = 519; /* Multiple PO load complete*/
          else
            PCWREC.XXXMSGNO = 308; /* PO load complete*/
          end
        end
      else
        /* ------------------------------------------------------------*/
         /* Process blank T-shirts.*/
        /* ------------------------------------------------------------*/
        if (PC0VM003.PC0VMOPT == "B") /* If blank T-shirt*/
          /* ------------------------------------------------------------*/
           /* Process buy action for blank T-shirts*/
          /* ------------------------------------------------------------*/
          if (PC0VW02.AB6BYTYP[PC0VWIXL] == "B") /* If action is buy*/
            PC0V361(); /* Create PO*/

            set VPOITM05 empty; /* Initialize item record*/
            VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD; /* PO REGION CODE*/
            VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR; /* PO number*/
            VPOITM05.PC6PLAN = 1; /* Plan number*/
            PC0V362(); /* Create PO item and sixe*/

            PC0VS14(); /* Update VBSIZE*/
            PCWREC.XXXMSGNO = 308; /* PO load complete*/
          else
              /* --------------------------------------------------------*/
               /* Process redirect action for blank T-shirts*/
              /* --------------------------------------------------------*/
            if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* If action redirect*/
              PC0V363(); /* Update PO*/
              PC0VS14(); /* Update VBSIZE*/
              PCWREC.XXXMSGNO = 309; /* Redirect complete*/
            end
          end
          PC0VS51(); /* if all vbsize updated: update vbplan*/
        end
      end
      PC0VW02.PC0VWSEL[PC0VWIXL] = "V"; /* Deselet this row*/
      PC0VW00.PC0VWETS = PC0VM003.PC6ETSDT; /* Save ETS date*/
      if (AB3REC.AB3BUYST != "L")
                                   /* If status not updated*/
        AB3REC.AB3BUYST = "L"; /* Status = autoloaded*/
        PC0VS40(); /* Update the status*/
      end

    else /* If already redisplayed*/
      PC0VW00.PC0VWSWR = "Y"; /* Request for data*/
    end
    if (converseVar.validationMsgNum > 0) /* Serious Errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback updates*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all UPDATES*/
    end
  end
end // end PC0V360

// ADD NEW P.O. ROW
Function PC0V361()
   /* ------------------------------------------------------------*/
   /* Load the VPOHDR03 with PO data.*/
   /* ------------------------------------------------------------*/

  set VPOHDR03 empty; /* Init PO record*/

  VPOHDR03.PO-REG-CD = PC0VW00.PO-REG-CD;
  VPOHDR03.PC3BUYMO = PC0VW00.PC0VWBUY; /* Buy month*/

  if (VPOHDR03.PC3BUYMO < 8001) /* If year < 80*/
    VPOHDR03.PC3BUYMO = VPOHDR03.PC3BUYMO + 200000; /* 21st century*/
  else /* else*/
    VPOHDR03.PC3BUYMO = VPOHDR03.PC3BUYMO + 190000; /* 20th century*/
  end

  PC0VW00.PC0VWBMO = VPOHDR03.PC3BUYMO;
                                   /* ===> re-formated PO ID (CCYY)*/

  VPOHDR03.XGPCD = "03"; /* GPC code*/
  PC0VW00.PC0VWSYR = PC0VW00.PC0VWPCY;
                                   /* Season year  (CCYY)*/
  PC0VW00.PC0VWM1 = PC0VM003.PC0VMMO; /* Buy month*/
  PC0VW00.PC0VWETS = PC0VM003.PC6ETSDT; /* ETS date*/
  PC0VW00.PC0VWM2 = PC0VW00.PC0VWMO; /* Delivery month*/
  VPOHDR03.PC3POIDT = PC0VW00.PC0VWPOD; /* PO id date*/
  VPOHDR03.PCFSECD = PC0VW00.PC0VWSEC; /* Season code*/
  VPOHDR03.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory code*/

  VFCTY003.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory code*/
  PC0VS20();
                                  /* Get factory country*/

  VPOHDR03.XCTCD = VFCTY003.XCTCD; /* Country*/

  if (VFCTY003.PC-XCT-ORIG-CD == " ")
    VPOHDR03.PC-XCT-ORIG-CD = VFCTY003.XCTCD; /* mco = factory*/
  else
    VPOHDR03.PC-XCT-ORIG-CD = VFCTY003.PC-XCT-ORIG-CD; /* mco*/
  end

   /* ------------------------------------------------------------*/
   /* Request made to move factory country to shipping point*/
   /* on 04/30/91*/
   /* ------------------------------------------------------------*/
  VPOHDR03.TSEOXCC = VFCTY003.XCTCD; /* Ship point*/

  VPOHDR03.PCFSEYR = PC0VW00.XSNYR; /* Season year*/

  if (PC0VW01.XDVCD[PC0VWIXA] == "05" /* ====> means this is a "Side 1"*/
   || PC0VW01.XDVCD[PC0VWIXA] == "06" /* ====> means this is a "Side 1"*/
   || PC0VW01.XDVCD[PC0VWIXA] == "07") /* ====> means this is a "Side 1"*/
    VPOHDR03.PC4ORTYP = "S1";
  else
    VPOHDR03.PC4ORTYP = PC0VM003.PC4ORTYP; /* P.O. type*/
  end

  VPOHDR03.XSECD = PC0VW00.XSECD; /* Season code*/
  VPOHDR03.YPUCD = "OP"; /* Status*/
  VPOHDR03.PC3ENTBY = PC0VM001.XXXUSER; /* Entered by*/

  VPOHDR03.PC3STADT = XX0XW01.XX0XWDAT; /* Status date*/
  VPOHDR03.PC3CRDT = XX0XW01.XX0XWDAT; /* Creation date*/
  VPOHDR03.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOHDR03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOHDR03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOHDR03.ZZZCHGCT = 0; /* Change count*/

  if (VFCTY003.FY1FRGN == "Y") /* If offshore flag = 'y'*/
    VPOHDR03.PC3NISFL = "N"; /* Nissho flag*/
    VPOHDR03.PC3LCDSF = "N"; /* L/C det sum flag*/
    VPOHDR03.PC3LCDIN = "N"; /* L/C det flag*/
  else
    if (VFCTY003.FY1FRGN == "N" /* If offshore flag = 'n'*/
     && VFCTY003.FY6FOCD == "EU") /* If field office is europe*/
      VPOHDR03.PC3NISFL = "N"; /* Nissho flag*/
      VPOHDR03.PC3LCDSF = "N"; /* L/C det sum flag*/
      VPOHDR03.PC3LCDIN = "N"; /* L/C det flag*/
    else
      VPOHDR03.PC3NISFL = " "; /* Nissho flag*/
      VPOHDR03.PC3LCDSF = " "; /* L/C det sum flag*/
      VPOHDR03.PC3LCDIN = " "; /* L/C det flag*/
    end
  end

  VPOHDR03.PC3RCRFL = "N"; /* Rev credit flag*/
  VPOHDR03.PC3SIFL = "N"; /* Special inst flag*/
  VPOHDR03.PO-LOCR-PMT-IND = "L";
  VPOHDR03.PC3BLPO = PC0VM003.PC3BLPO; /* Blank p.o. number*/
  VPOHDR03.IN7STNBR = PC0VM003.IN7STNBR; /* Stock xfer number*/

   /* ------------------------------------------------------------*/
   /* Determine if the po type is 'xd' 'xi' 's8' 's9'*/
     /* if so move the country of origin to the FOB location*/
   /* ------------------------------------------------------------*/
   /* Request made to do for all p.o. types on 04/30/91*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.PC4ORTYP == "XD" /* ===> po type is xd xi s8 or s9*/
   || VPOHDR03.PC4ORTYP == "XI" /* ===> po type is xd xi s8 or s9*/
   || VPOHDR03.PC4ORTYP == "S8" /* ===> po type is xd xi s8 or s9*/
   || VPOHDR03.PC4ORTYP == "S9" /* ===> po type is xd xi s8 or s9*/
   || VPOHDR03.PC4ORTYP == "AD" /* ===> po type is xd xi s8 s9 or AD*/
   || VPOHDR03.PC4ORTYP == "MX")

    if (VPOHDR03.XCTCD in XCTTBL.XCTCD) /* xct country in table*/
      VPOHDR03.PC3FOBLC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

  else /* non-nil po type*/
     /* IF VPOHDR03.XCTCD = 'USA'       ; domestic*/
       /* ;next sentence*/
     /* ELSE                          ;foreign origin country*/

    if (VPOHDR03.XCTCD in XCTTBL.XCTCD) /* xct country in table*/
      VPOHDR03.PC3FOBLC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

  end

   /* ------------------------------------------------------------*/
   /* Request made to move literal to ship via field on 04/30/91*/
   /* ------------------------------------------------------------*/
  if (VPOHDR03.PC4ORTYP == "SX" /* check sx/usa combo first*/
   && VPOHDR03.XCTCD == "USA") 
    VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* ship via*/
  else
    if (VPOHDR03.PC4ORTYP == "SS" /* If salesman samples*/
     || VPOHDR03.PC4ORTYP == "SX") /* check sx/other next*/
      VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* ship via*/
    else
      if (VPOHDR03.PC4ORTYP == "XD"
       && VPOHDR03.XCTCD == "MEXI")
        VPOHDR03.PC3SHVIA = "CALL ACS MEXICO CITY"; /* ship via*/
      else
        if (VPOHDR03.PC4ORTYP == "XD"
         && VPOHDR03.XCTCD == "USA")
          VPOHDR03.PC3SHVIA = "CALL ACS ATLANTA"; /* ship via*/
        else
          if ((VPOHDR03.PC4ORTYP == "XI"
           || VPOHDR03.PC4ORTYP == "MX")
           && PC0VM003.XWHCD == "42"
           && (VPOHDR03.XCTCD == "USA"
           || VPOHDR03.XCTCD == "MEXI"))
            VPOHDR03.PC3SHVIA = "DIRECT SHIP"; /* ship via*/
          else
            if (VPOHDR03.PC4ORTYP == "AD"
             && VPOHDR03.XCTCD == "USA")
              VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* ship via*/
            else
              if (VPOHDR03.PC4ORTYP == "SD"
               && PC0VW01.XDVCD[PC0VWIXA] == "02")
                VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* ship via*/
              else
                if (VPOHDR03.PC4ORTYP == "MP") /* direct deliv*/
                  VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* SHIP VIA*/
                else
                  if (VPOHDR03.PC4ORTYP == "MD" /* direct deliv - makeup*/
                   || VPOHDR03.PC4ORTYP == "MM" 
                   /* direct deliv - makeup mult*/
                   || VPOHDR03.PC4ORTYP == "DS" /* direct deliv*/
                   || VPOHDR03.PC4ORTYP == "DC") /* direct deliv - case lot*/
                    VPOHDR03.PC3SHVIA = "DIRECT DELIVERY"; /* SHIP VIA*/
                  else
                    VPOHDR03.PC3SHVIA = "STAND. SHIP. INSTR.";
                                   /* ship via*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Get the new PO number.*/
   /* ------------------------------------------------------------*/

  PC0VS27(); /* Get the next available PO #*/
   /* MOVE PC1REC.PC1PONBR TO VPOHDR03.PC3PONBR;/* P.O. number*/
  VPOHDR03.PC3PONBR = VPOCTL02.PC1PONBR; /* P.O. number*/

   /* ------------------------------------------------------------*/
   /* Add the new P.O.*/
   /* ------------------------------------------------------------*/

  PC0VS28(); /* Add the PO*/

end // end PC0V361

// Create P.O. item
Function PC0V362()
   /* ------------------------------------------------------------*/
   /* For each page in storage, and each line per page*/
   /* create DPRODC.VPOITM05 and DPRODC.VPOSIZ02 records.*/
   /* ------------------------------------------------------------*/
  VPOITM05.XGPCD = "03"; /* GPC code*/

  VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD; /* po REGION CODE*/
  VPOITM05.PC3POIDT = VPOHDR03.PC3POIDT; /* po id date*/
  VPOITM05.PCFSECD = VPOHDR03.PCFSECD; /* season code*/
  VPOITM05.FY1FCTYC = VPOHDR03.FY1FCTYC; /* factory*/

  VFCTY003.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory code*/
  PC0VS20();
                                   /* Get factory country*/

  VPOITM05.XCTCD = VFCTY003.XCTCD; /* Country*/
  VPOITM05.PC4ORTYP = PC0VM003.PC4ORTYP; /* P.O. type*/
  VPOITM05.PC6ETALF = "N"; /* init ETAL default flag*/
  VPOITM05.PC6PREFL = "N"; /* init prebuild flag*/
  VPOITM05.FB-LATE-BK-FL = "N"; /* late booking flag*/
  VPOITM05.PC6STAT = "OP"; /* Item status*/

  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Item status date*/
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOITM05.ZZZCHGCT = 0; /* Change count*/

  VPOITM05.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  VPOITM05.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/

   /* load xowcd directly*/
   /* from buy system.*/

  if (PC0VW00.XOWCD != " ") /* Owner group code*/
    VPOITM05.XOWCD = PC0VW00.XOWCD; /* Owner group code*/
  else
    VPOITM05.XOWCD = "00";
  end

  VPOITM05.PC2CUXID = PC0VM003.PC2CUXID; /* Customer*/

   /* ------------------------------------------------------------*/
   /* calc and Load DEST CTRY to W.S.*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC2CUXID > " ")
    VPOITM05.PC6XCTCD = VPRDCU03.XCTCD;
    VPOITM05.YSMXDV = VPRDCU03.YSMXDV;
  else
    if (PC0VW01.XWHCD[PC0VWIXA] == "12")
      VPOITM05.PC6XCTCD = "USA";
      VPOITM05.YSMXDV = "20";
    else
      if (PC0VW01.XWHCD[PC0VWIXA] == "60")
        VPOITM05.PC6XCTCD = "BELG";
        VPOITM05.YSMXDV = "20";
      else
        if (PC0VW01.XWHCD[PC0VWIXA] == "61")
          VPOITM05.PC6XCTCD = "NETH";
          VPOITM05.YSMXDV = "20";
        else
          VPOITM05.PC6XCTCD = "USA";
          VPOITM05.YSMXDV = "10";
        end
      end
    end
  end /* ===>*/

  if (VPOITM05.PC2CUXID == " ") /* If no customer*/
    VPOITM05.PC2INSEG = "000"; /* ISEG*/
  else
    VPOITM05.PC2INSEG = VPRDCU03.PC2INSEG; /* ISEG*/
  end

  VPOITM05.XPGCD = "00"; /* Package code*/
  VPOITM05.PC6ETSDT = TA2REC.TA2GRGGN; /* ETS date*/
  VPOITM05.PC6OETS = TA2REC.TA2GRGGN; /* OETS date*/
  set FYTREC empty;

   /* ------------------------------------------------------------*/
   /* Determine the default mode code*/
   /* ------------------------------------------------------------*/
  FYTREC.XGPCD = "03"; /* GPC*/
  FYTREC.PO-REG-CD = "01"; /* region*/
  FYTREC.FY1FCTYC = VPOITM05.FY1FCTYC; /* factory*/
  FYTREC.PC4ORTYP = VPOITM05.PC4ORTYP; /* PO type*/
  FYTREC.PC2CUXID = VPOITM05.PC2CUXID; /* CUSTOMER XREF*/
  FYTREC.XCTCD = VPOITM05.PC6XCTCD; /* destination ctry*/
  call "FY146D" (FYTREC) {isNoRefresh = yes, isExternal = yes}; /* Get the mode of transportation*/
  if (FYTREC-RETURN-CODE == "0")
    VPOITM05.YMTCD = FYTREC.YMTCD;
  else
    if (FYTREC-RETURN-CODE == "1")
      PC0VW00.XXXPRCNM = "PC0V362"; /* Module identification*/
      converseLib.validationFailed(545); /* Enter must be used for fast path*/
    else
      PC0VW00.XXXPRCNM = "PC0V362"; /* Module identification*/
      converseLib.validationFailed(546); /* Enter must be used for fast path*/
    end
    PC0VW00.XXXPRCNM = "PC0V362";
    TA1REC.TA1MAP = sysVar.errorCode;
    PC0VW00.PCWMAP = 1;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "CALL TO FY146D";
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    PC0VW00.TA1TBLKE = " ";
    PC0VW00.PC0VWKA1 = FYTREC.FY1FCTYC;
    PC0VW00.PC0VWKA2 = FYTREC.XCTCD;
    PC0VW00.PC0VWKA3 = FYTREC.PC4ORTYP;
    PC0VW00.PC0VWKA4 = FYTREC.PC2CUXID;
    TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    exit stack;
  end

  if (PC0VM003.PC0VMOPT == "B" /* if blank t-shirt*/
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* and redirect*/
    VPOITM05.XWHCD = " ";
  else
    VPOITM05.XWHCD = PC0VM003.XWHCD;
  end

  if (PC0VM003.PC0VMOPT == "S"       /* if blank t-shirt*/
   && PC0VW03.OP1CUOID[PC0VWIXM] > 0 /* and sales order exists*/
   && VPOITM05.PC2CUXID > " "        /* and customer exists*/
   && VPOITM05.XWHCD == " ")         /* and no whse*/
    VPOITM05.XDSCD = "1"; /* ===> ; set to direct ship*/
  else
    VPOITM05.XDSCD = PC4REC.XDSCD; /* ===> ; load verifed D.S. code*/
  end

  if (VPOITM05.YMTCD == "AF") /* Mode of transport is air freight*/
    VPOITM05.PC-NIKE-AFRGT-PCT = 100; /* Set Nike Air Frgt pct to 100*/
  end

  VPOITM05.PC61TMSH = "N"; /* Ship to override flag*/
  VPOITM05.PC3SIFL = "N"; /* PC_SINST_FL*/

  PC0VW00.XXXTSPAG = 1; /* Init requested page*/
  while (PC0VW00.XXXTSPAG <= PC0VW00.TA5TSQIX) /* For each page of data*/

    PC0VS21(); /* Obtain temp storage page*/

    PC0VW00.PC0VWIXM = 1; /* Initialize line index*/

    while (PC0VW00.PC0VWIXM <= 12 /* Until last page line*/
     && PC0VW03.SY2CLRID[PC0VWIXM] > " ") /* or end of data*/

      if (PC0VM001.PC0VMOPT == "R" /* If Regular*/
       || PC0VM001.PC0VMOPT == "U") /* or Uncrested*/
        if (PC0VW02.PC0VWSEL[PC0VWIXL] == "C" /* po at color level*/
         && PC0VW00.PC0VWIXM > 1)             /* Not the first time through*/
          PC0V361(); /* create new po*/
          VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD; /* PO region*/
          VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR; /* PO number*/
          VPOITM05.PC6PLAN = 1; /* Plan number*/
        else
          /* next sentence*/
        end
      else
        /* next sentence*/
      end
      /* ------------------------------------------------------------*/
       /* Get the next item sequence number*/
      /* ------------------------------------------------------------*/
      PCYREC.PCYFUNC = "M2"; /* Function = count seq#*/
      PC0VS29(); /* Select count item seq*/
      VPOITM05.PC6ITMNB = PCYREC.PCYCOUNT + 1; /* Seq # = count + 1*/

      VPOITM05.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM];
      /* ------------------------------------------------------------*/
       /* Get the style information.*/
      /* ------------------------------------------------------------*/
      set PG2REC empty; /* Init record*/
      PG2REC.XGPCD = "03"; /* GPC code*/
      PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
      PG2REC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
      PG2REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
      XSPG202(); /* Retrieve style*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        VPOITM05.XPCCD = PG2REC.XPCCD; /* Prod category*/
        VPOITM05.XPLCD = PG2REC.XPLCD; /* Product line*/
        VPOITM05.XPRCD = PG2REC.XPRCD; /* Product type*/
        VPOITM05.XQACD = "01"; /* Quality code*/
        VPOITM05.XUMCD = PG2REC.XUMCD;
                                   /* Unit of measure*/
        VPOITM05.XGACD = PG2REC.XGACD; /* Gender age*/
        if (VPOITM05.YSMXDV == "20"   /* international division*/
         || VPOITM05.PC4ORTYP == "PS" /* or promo*/
         || VPOITM05.PC4ORTYP == "PX" /* or promo export*/
         || VPOITM05.PC4ORTYP == "MI" /**/
         || VPOITM05.PC4ORTYP == "MP" /**/
         || VPOITM05.PC4ORTYP == "MD" /* or direct ship*/
         || VPOITM05.PC4ORTYP == "DC" /* or direct ship*/
         || VPOITM05.PC4ORTYP == "DS" /* or direct ship*/
         || VPOITM05.PC4ORTYP == "MM" /* or direct ship*/
         || VPOITM05.PC4ORTYP == "SS" /* or salesman sample*/
         || VPOITM05.PC4ORTYP == "SD" /* or screener dummy*/
         || VPOITM05.PC4ORTYP == "SX")
          VPOITM05.PG1SC4CD = PG1REC.PG1SC4CD; /* sched from sched tbl*/
        else
          VPOITM05.PG1SC4CD = PG2REC.PG1SC4CD;
                                   /* scheduler on prod master*/
        end
        VPOITM05.SYBSTGNB = PG2REC.SYBSTGNB; /* Style group*/
      else /* Row not found*/
        converseLib.validationFailed(10); /* Error - notify programming*/
        PC0VW00.XXXPRCNM = "PC0V362";
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Rollback all database updates*/
        PC0VW00.XXXTSPAG = 1; /* Request page 1*/
        PC0VW00.PCWMAP = 2; /* Request selection screen*/
      end
      VPOITM05.PC6TORIG = PC0VW03.PC0VWST[PC0VWIXM]; /* Original qty*/
      VPOITM05.PC6TORDE = PC0VW03.PC0VWST[PC0VWIXM]; /* On order qty*/
      VPOITM05.OP1PARTN = PC0VW03.OP1PARTN[PC0VWIXM]; /* part char*/
      VPOITM05.OP1CUOID = PC0VW03.OP1CUOID[PC0VWIXM]; /* sales order*/
      VPOITM05.OP1NORID = PC0VW03.OP1NORID[PC0VWIXM]; /* nike order*/

      /* ----------------------------------------------------------*/
       /* If sales order is present, get the customer p.o.*/
      /* ----------------------------------------------------------*/

      if (PC0VW03.OP1PARTN[PC0VWIXM] > " " /* part char*/
       && PC0VW03.OP1CUOID[PC0VWIXM] > 0   /* sales order*/
       && PC0VW03.OP1NORID[PC0VWIXM] > 0)  /* nike order*/

        set OP1REC empty; /* Initialize record*/

        OP1REC.OP1PARTN = PC0VW03.OP1PARTN[PC0VWIXM]; /* part char*/
        OP1REC.OP1CUOID = PC0VW03.OP1CUOID[PC0VWIXM]; /* sales order*/
        OP1REC.OP1NORID = PC0VW03.OP1NORID[PC0VWIXM]; /* nike order*/

        PC0VS48(); /* select DPRODC.VPOITM05 row*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          VPOITM05.OP1CUPO = OP1REC.OP1CUPO; /* Customer p.o.*/
        else
          PCWREC.XXXMSGNO = 459; /* Warning message*/
        end

      end

      PC0VS30(); /* Create DPRODC.VPOITM05 row*/

      PC0VS31(); /* Create DPRODC.VPOSIZ02 row*/

      if (PC0VM001.PC0VMOPT == "R" /* If Regular*/
       || PC0VM001.PC0VMOPT == "U") /* or Uncrested*/
        if (PC0VW02.PC0VWSEL[PC0VWIXL] == "C") /* PO AT COLOR LEVEL*/
          PC0VS14(); /* Update Vbsize record*/
        end
      end

      /* ----------------------------------------------------------*/
       /* If redirect blank T-shirts and no fields changed*/
       /* then create item & size audits*/
      /* ----------------------------------------------------------*/

      if (PC0VM003.PC0VMOPT == "B" /* If blank T-shirt*/
       && PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* and action is redirect*/

        /* ----------------------------------------------------------*/
         /* Create item audit*/
        /* ----------------------------------------------------------*/
        set VPOAIT02 empty; /* Init item size audit record*/
        PC0VS37(); /* Get audit seq # max*/
        VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
        VPOAIT02.PCJNETQT = PC0VW03.PC0VWST[PC0VWIXM]; /* Total qty*/
        VPOAIT02.PCIAFTN = PC0VW03.PC0VWST[PC0VWIXM]; /* After qty*/
        VPOAIT02.YOACD = "60"; /* Audit type code*/

        PC0VS32(); /* Create DPRODC.VPOAIT02 row*/

        /* ----------------------------------------------------------*/
         /* Create size audit*/
        /* ----------------------------------------------------------*/
        set VPOASZ02 empty; /* Init item size audit record*/

        PC0VW00.PC0VWIX3 = 1; /* Init size position index*/
        while (PC0VW00.PC0VWIX3 <= 40)
                                   /* For each size move qty & price*/

          VPOASZ02.PCIAFTN[PC0VWIX3] = VPOSIZ02.PC7ORDEQ[PC0VWIX3];
          VPOASZ02.PCKBFRPR[PC0VWIX3] = VPOSIZ02.FY4FOBPR[PC0VWIX3];
          VPOASZ02.PCKAFTPR[PC0VWIX3] = VPOSIZ02.FY4FOBPR[PC0VWIX3];

          PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
        end

        PC0VS33(); /* Create DPRODC.VPOASZ02*/

      end

      PC0VW00.PC0VWIXM = PC0VW00.PC0VWIXM + 1; /* Increment line index*/

    end

    PC0VW00.XXXTSPAG = PC0VW00.XXXTSPAG + 1; /* Increment request page*/
  end

  PC0VW00.XXXTSPAG = 1; /* Init requested page*/

end // end PC0V362

// Update P.O.
Function PC0V363()
   /* ------------------------------------------------------------*/
                    /* - INDEX USAGE -*/
   /* ------------------------------------------------------------*/
   /* VABSTY01 data is kept in an array in PC0VW01.*/
   /* PC0VWIX1 is used for building this array and*/
   /* PC0vWIXA is used for accessing the array.*/

   /* VBSIZE01 data is kept in an array in PC0VW02.*/
     /* Only enough of the array is loaded to fill the requested*/
     /* pages to limit the database access occurring per converse*/
   /* PC0VWIX2 is used for building this array and*/
   /* PC0VWIXL is used for accessing the array.*/

   /* PC0VWIX3 is used as a temporary work index*/

   /* PC0VWIXM is used as an index to the map detail lines.*/

   /* SIZE INDEXS*/
   /* -----------*/
     /* Quantities retrieved form the VBSIZE01 record (AB6REC)*/
     /* are in an array of 10 occurrences, and can correspond*/
     /* to any of the 40 sizes in the PO system. The size index*/
     /* (AB6REC.SY5SZID) tells which size bucket the quantity is*/
     /* for.  Example: AB6REC.AB6PACQ(1) = 10*/
                    /* AB6REC.SY5SZID(1) = 3*/
           /* means a quantity of 10 for size bucket 3*/
     /* All of the VBSIZE01 quantities for a P.O. are stored in*/
     /* PC0VWQ01 through PC0VWQ40 of PC0VW03 indexed by PC0VWIXM*/
     /* PC0VWSID is used for a temporary size index within a loop*/

   /* ------------------------------------------------------------*/
   /* Get the unit of measure from the style/color table.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Init record*/
  PG2REC.XGPCD = "03"; /* GPC code*/
  PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  PG2REC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
  PG2REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
  XSPG202(); /* Retrieve style*/

   /* ------------------------------------------------------------*/
   /* Get the balance to ship*/
   /* ------------------------------------------------------------*/

  set PC5REC empty; /* Init balance rec*/

   /* ------------------------------------------------------------*/
   /* Get the factory.*/
   /* ------------------------------------------------------------*/

  set VFCTY003 empty; /* Init record*/
  VFCTY003.FY1FCTYC = "03"; /* GPC code*/
  VFCTY003.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
  PC0VS20(); /* Retrieve factory*/
  set FYTREC empty;

   /* ------------------------------------------------------------*/
   /* Determine the default mode code*/
   /* ------------------------------------------------------------*/
  FYTREC.XGPCD = "03"; /* GPC CODE*/
  FYTREC.PO-REG-CD = "01"; /* REGION CODE*/
  FYTREC.FY1FCTYC = VFCTY003.FY1FCTYC; /* factory code*/
  FYTREC.PC4ORTYP = PC0VW00.PC4ORTYP; /* order type*/
  if (PC0VW01.XWHCD[PC0VWIXA] > "  ")
    FYTREC.PC2CUXID = "     "; /* customer Xref*/
    if (PC0VW01.XWHCD[PC0VWIXA] in XWHTBL.XWHCD)
      FYTREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* destination ctry*/
    else
      FYTREC.XCTCD = "    "; /* destination country*/
    end
  else
    FYTREC.PC2CUXID = VPRDCU03.PC2CUXID; /* customer Xref*/
    FYTREC.XCTCD = VPRDCU03.XCTCD; /* destination country*/
  end
  call "FY146D" (FYTREC) {isNoRefresh = yes, isExternal = yes}; /* Get the mode of transportatio*/
  if (FYTREC-RETURN-CODE == "0")
    PC5REC.YMTCD = FYTREC.YMTCD;
  else
    if (FYTREC-RETURN-CODE == "1")
      PC0VW00.XXXPRCNM = "PC0V363"; /* Module identification*/
      converseLib.validationFailed(545); /* Enter must be used for fast path*/
    else
      PC0VW00.XXXPRCNM = "PC0V363"; /* Module identification*/
      converseLib.validationFailed(546); /* Enter must be used for fast path*/
    end
    TAEREC.SQLCAREC = SQLCA.SQLCAREC;
    TA1REC.TA1MAP = sysVar.errorCode;
    PC0VW00.PCWMAP = 1;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    TA1REC.TA1TYPE = "CALL TO FY146D";
    TA1REC.TA1LOC = "PC0V363";
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    PC0VW00.TA1TBLKE = " ";
    PC0VW00.PC0VWKA1 = FYTREC.FY1FCTYC;
    PC0VW00.PC0VWKA2 = FYTREC.XCTCD;
    PC0VW00.PC0VWKA3 = FYTREC.PC4ORTYP;
    PC0VW00.PC0VWKA4 = FYTREC.PC2CUXID;
    TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    exit stack;
  end

  PC5REC.XGPCD = "03"; /* GPC code*/
  PC5REC.PO-REG-CD = PC0VW00.PO-REG-CD; /* P.O. region*/
  PC5REC.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* P.O. number*/
  PC5REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style number*/
  PC5REC.SY2CLRID = PC0VW02.SY2CLRID[PC0VWIXL]; /* Identifying color*/
  PC5REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension code*/
  PC5REC.PC2CUXID = " "; /* Customer xref ID*/
  PC5REC.XWHCD = PC0VW01.XWHCD[PC0VWIXA]; /* Warehouse code*/
  PC5REC.PC5ERFL = "N"; /* HARD ERROR FLAG*/

  PC5REC.XQACD = "01"; /* Quality*/

  if (PC0VW00.XOWCD != " ")
    PC5REC.XOWCD = PC0VW00.XOWCD;
  else
    PC5REC.XOWCD = PC0VW02.XOWCD[PC0VWIXL];
  end

  PC5REC.PC2INSEG = "000"; /* Spec difference*/
  PC5REC.XPGCD = "00"; /* Package*/
  PC5REC.XUMCD = PG2REC.XUMCD; /* Unit of measure*/

  XPPC020(); /* Get balance to ship quantities for*/
                                   /* the item*/

   /* ------------------------------------------------------------*/
   /* If all balance to ship quantities are large enough to debit*/
   /* ------------------------------------------------------------*/
  if (PC0VW03.PC0VWQ01[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ01]
   && PC0VW03.PC0VWQ02[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ02]
   && PC0VW03.PC0VWQ03[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ03]
   && PC0VW03.PC0VWQ04[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ04]
   && PC0VW03.PC0VWQ05[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ05]
   && PC0VW03.PC0VWQ06[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ06]
   && PC0VW03.PC0VWQ07[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ07]
   && PC0VW03.PC0VWQ08[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ08]
   && PC0VW03.PC0VWQ09[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ09]
   && PC0VW03.PC0VWQ10[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ10]
   && PC0VW03.PC0VWQ11[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ11]
   && PC0VW03.PC0VWQ12[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ12]
   && PC0VW03.PC0VWQ13[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ13]
   && PC0VW03.PC0VWQ14[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ14]
   && PC0VW03.PC0VWQ15[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ15]
   && PC0VW03.PC0VWQ16[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ16]
   && PC0VW03.PC0VWQ17[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ17]
   && PC0VW03.PC0VWQ18[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ18]
   && PC0VW03.PC0VWQ19[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ19]
   && PC0VW03.PC0VWQ20[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ20]
   && PC0VW03.PC0VWQ21[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ21]
   && PC0VW03.PC0VWQ22[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ22]
   && PC0VW03.PC0VWQ23[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ23]
   && PC0VW03.PC0VWQ24[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ24]
   && PC0VW03.PC0VWQ25[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ25]
   && PC0VW03.PC0VWQ26[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ26]
   && PC0VW03.PC0VWQ27[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ27]
   && PC0VW03.PC0VWQ28[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ28]
   && PC0VW03.PC0VWQ29[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ29]
   && PC0VW03.PC0VWQ30[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ30]
   && PC0VW03.PC0VWQ31[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ31]
   && PC0VW03.PC0VWQ32[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ32]
   && PC0VW03.PC0VWQ33[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ33]
   && PC0VW03.PC0VWQ34[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ34]
   && PC0VW03.PC0VWQ35[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ35]
   && PC0VW03.PC0VWQ36[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ36]
   && PC0VW03.PC0VWQ37[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ37]
   && PC0VW03.PC0VWQ38[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ38]
   && PC0VW03.PC0VWQ39[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ39]
   && PC0VW03.PC0VWQ40[PC0VWIXM] <= PC5REC.PC5BALC[PC0VW-AB6SZ40])

    /* ------------------------------------------------------------*/
     /* IO to select and open VPOITM05 ( P.O. ITEM TABLE )*/
    /* ------------------------------------------------------------*/
    PC0VS34(); /* Open cursor for VPOITM05*/

    /* ------------------------------------------------------------*/
     /* Fetch first VPOITM05 row.*/
    /* ------------------------------------------------------------*/
    PC0VS35(); /* Get first VPOITM05 row*/

    /* ------------------------------------------------------------*/
     /* Use highest(first) ETS date as ETS for new item created.*/
    /* ------------------------------------------------------------*/
    set TA2REC empty; /* Init date record*/
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* ETS date*/
    TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* All greg formats*/
    PC0VS26(); /* Convert date*/
    PC0VM003.PC6ETSDT = TA2REC.TA2GRGAN; /* ETS date for map*/

    PC0VW00.PC3POIDT = VPOITM05.PC3POIDT; /* Save PO ID date*/
    set PC0VW05 empty; /* Init copy of VPOSIZ01 rec*/
    PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
    while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
      PC0VW05.PC7FOBFL[PC0VWIX3] = "N"; /* Init override flag*/
      PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
    end
    /* ------------------------------------------------------------*/
     /* Fetch each VPOITM05 row till sufficient quantities found*/
    /* ------------------------------------------------------------*/
    PC0VW00.PC0VWORG = PC0VW03.PC0VWORG[PC0VWIXM]; /* Quantity group*/
    while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

      set VPOSIZ02 empty; /* Init size item rec*/
      VPOSIZ02.XGPCD = "03"; /* GPC code*/
      VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
      VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
      PC0VW04.PC0VWFNC = "S "; /* Function = select unique*/
      PC0VS36(); /* Obtain item size*/

      /* ------------------------------------------------------------*/
       /* Load audit record before values and*/
       /* decrement any required quantities.*/
      /* ------------------------------------------------------------*/

      PC0VW00.PC0VWUPD = "N"; /* Item update flag = no*/
      set VPOAIT02 empty; /* Init item audit rec*/
      set VPOASZ02 empty; /* Init size audit rec*/
      VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
      PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
      while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
        PC0VW00.PC0VWSID = PC0VW00.PC0VWSZS[PC0VWIX3]; /* Size ndx*/
        if (VPOSIZ02.PC7ORDEQ[PC0VWSID] > 0 /* If quantity available*/
         && PC0VW00.PC0VWORD[PC0VWIX3] > 0) /* and quantity needed*/
          PC0VW00.PC0VWUPD = "Y"; /* Item update flag = yes*/
          /* ------------------------------------------------------------*/
           /* Save the price and override flag in the copy of VPOSIZ01*/
           /* and load the audit record before values.*/
          /* ------------------------------------------------------------*/
          PC0VW05.PC7FOBFL[PC0VWSID] = VPOSIZ02.PC7FOBFL[PC0VWSID];
          PC0VW05.FY4FOBPR[PC0VWSID] = VPOSIZ02.FY4FOBPR[PC0VWSID];
          VPOASZ02.PCIBFRN[PC0VWSID] = VPOSIZ02.PC7ORDEQ[PC0VWSID];
          VPOASZ02.PCKBFRPR[PC0VWSID] = VPOSIZ02.FY4FOBPR[PC0VWSID];
          VPOASZ02.PCKAFTPR[PC0VWSID] = VPOSIZ02.FY4FOBPR[PC0VWSID];
          /* ------------------------------------------------------------*/
           /* Debit the size quantities of the PC7REC.*/
          /* ----------------------------------------------------------*/
           /* If available is greater than or equal to requested qty.*/
          /* ----------------------------------------------------------*/
          if (VPOSIZ02.PC7ORDEQ[PC0VWSID] >= PC0VW00.PC0VWORD[PC0VWIX3])
            PC7ORDEQ[PC0VWSID] = PC7ORDEQ[PC0VWSID] - PC0VWORD[PC0VWIX3];
            VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - PC0VWORD[PC0VWIX3];
            VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PC0VWORD[PC0VWIX3];
            PC0VW00.PC0VWORD[PC0VWIX3] = 0;
          else
            /* ----------------------------------------------------------*/
             /* Else if available is less than requested quantity.*/
            /* ----------------------------------------------------------*/
            PC0VWORD[PC0VWIX3] = PC0VWORD[PC0VWIX3] - PC7ORDEQ[PC0VWSID];
            VPOITM05.PC6TORDE = VPOITM05.PC6TORDE -             VPOSIZ02.PC7ORDEQ[PC0VWSID];
            VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL +             VPOSIZ02.PC7ORDEQ[PC0VWSID];
            VPOSIZ02.PC7ORDEQ[PC0VWSID] = 0;
          end
          VPOASZ02.PCIAFTN[PC0VWSID] = VPOSIZ02.PC7ORDEQ[PC0VWSID];
        end
        PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
      end /* ===> while < 40 QTY Buckets to*/
                                   /* process*/

      if (PC0VW00.PC0VWUPD == "Y") /* If item update required*/
        PC0VW04.PC0VWFNC = "U "; /* Function = update*/
        VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
        VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
        PC0VS36(); /* Update item size*/
        PC0VS37(); /* Get audit seq # max*/
        VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
        VPOAIT02.YOACD = "61"; /* Audit type = item cancel*/
        if (VPOITM05.PC6TORDE <= 0) /* If total quantity is zero*/
          VPOITM05.PC6STAT = "CX"; /* Cancel status*/
          VPOITM05.PC6MICHG = 0; /* Misc. chg's*/
          VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status change date*/
          VPOITM05.PC6CXNBR = 1; /* ===> cancel Version NBR*/
        end
        VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
        VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;
                                   /* Net change*/
        PC0VS32(); /* Item audit*/
        PC0VS33(); /* Item size audit*/
        PCYREC.PCYFUNC = "UA"; /* Function = update*/
        VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
        VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
        PC0VS38(); /* Update item*/
      end

      /* ------------------------------------------------------------*/
       /* Fetch next VPOITM05*/
      /* ------------------------------------------------------------*/
      PC0VS35(); /* Get next VPOITM05 row*/
    end /* ===> while more items to process*/

    /* ------------------------------------------------------------*/
     /* IO to close VPOITM05 set*/
    /* ------------------------------------------------------------*/
    PC0VS39(); /* Close cursor VPOITM05*/

    /* ------------------------------------------------------------*/
     /* build FOB override prices for Create new PO item*/
    /* ------------------------------------------------------------*/

    PC0V365(); /* ===> get Factory FOB Prices*/

    PC0V366(); /* ===> get override prices for related*/
                                   /* items*/

    /* ------------------------------------------------------------*/
     /* Create new PO item*/
    /* ------------------------------------------------------------*/
    set VPOITM05 empty; /* Initialize item record*/

    /* ------------------------------------------------------------*/
     /* Get the next plan number*/
    /* ------------------------------------------------------------*/
    VPOITM05.XGPCD = "03"; /* GPC code*/
    VPOITM05.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* PO number*/
    VPOITM05.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
    VPOITM05.SY2CLRID = "*"; /* Wildcard color*/
    PCYREC.PCYFUNC = "M1"; /* Function = count plan #*/
    PC0VS29(); /* Select count plan #*/

    VPOITM05.PC6PLAN = PCYREC.PCYCOUNT + 1; /* Seq # = count + 1*/
    VPOITM05.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* PO number*/

    PC0V362(); /* Create PO item*/

  else
    PCWREC.XXXMSGNO = 298; /* No item found to update*/
    PC0VW00.XXXPRCNM = "PC0V363"; /* Module identification*/
    exit stack; /* Display message*/
  end

end // end PC0V363

// Set-up to get (FOB data)
Function PC0V365()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  PC0VS45(); /* ===> get P.O. Header to obtain FOB*/
                                   /* data*/

  set PCOREC empty; /* Init record*/
  PCOREC.XGPCD = "03"; /* GPC code*/
  PCOREC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
  PCOREC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  PCOREC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
  PCOREC.XDMCD = PG2REC.XDMCD; /* Dimension*/
  PCOREC.XQACD = "01"; /* Quality*/
  if (VPOITM05.PC2CUXID == " ") /* ===> no customer*/
    PCOREC.PC2INSEG = "000"; /* ISEG*/
  else /* else*/
    PCOREC.PC2INSEG = VPRDCU03.PC2INSEG; /* ISEG*/
  end
  PCOREC.XUMCD = PG2REC.XUMCD; /* Unit of measure*/
  PCOREC.XPGCD = "00"; /* Package*/
  PCOREC.XSECD = VPOHDR03.XSECD; /* Season code*/
  PCOREC.PCFSEYR = VPOHDR03.PCFSEYR; /* Season year*/
  PCOREC.PC3CRDT = VPOHDR03.PC3CRDT; /* Creation date*/

  XSPCS04(); /* =======> Get fob prices*/

   /* **                                                        ***/
   /* ********************** End of PC0V365 ***********************/
end // end PC0V365

// Get FOB ovrd templete
Function PC0V366()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0VW00.PC0VWDC1 = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = "03"; /* ===>*/
  VPOITM05.PO-REG-CD = PC0VW00.PO-REG-CD; /* P.O. region*/
  VPOITM05.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* P.O. number*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  VPOITM05.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM];
  VPOITM05.XDMCD = PG2REC.XDMCD; /* ===>*/
  VPOITM05.XQACD = "01"; /* ===>*/
  VPOITM05.PC2INSEG = VPRDCU03.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = "00"; /* ===>*/
  VPOITM05.XUMCD = PG2REC.XUMCD; /* ===>*/

  VPOITM05.YSMXDV = VPRDCU03.YSMXDV; /* ===> division*/

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.PC2CUXID = "*"; /* ===>*/
  VPOITM05.XWHCD = "*"; /* ===>*/

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

  PC0VSB1(); /* ========> select set and open cursor*/

  PC0VSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate FOB ovrd data asso. with each row.*/
     /* Load the FOB price tempelete with flag and price*/
     /* for the 40 size bucket associated with each item.*/
   /* Fetch and accumulate the total QTYs asso. with each row.*/

   /* ------------------------------------------------------------*/

  while (PC0VW00.PC0VWDC1 == "N") /* Until end of temp. item cursor*/

    if (VPOITM05.PC6STAT == "OP" /* ===> item status code*/
     || VPOITM05.PC6STAT == "FC") /* ===> item status code*/

      PC0VSB6(); /* ==========> get size record row*/

      PC0VW00.PC0VWIXT = 1; /* ===> initialize temp. index*/

      while (PC0VW00.PC0VWIXT <= 40) /* Until all sizes read*/

        /* ------------------------------------------------------------*/
         /* accumulate FOB ovrd data asso. with each row.*/
        /* ------------------------------------------------------------*/

        if (VPOSIZ02.PC7FOBFL[PC0VWIXT] == "Y")
                                   /* ===> load FOB override data*/

          PC0VW05.FY4FOBPR[PC0VWIXT] = VPOSIZ02.FY4FOBPR[PC0VWIXT];
          PC0VW05.PC7FOBFL[PC0VWIXT] = VPOSIZ02.PC7FOBFL[PC0VWIXT];

        else

          PC0VW05.FY4FOBPR[PC0VWIXT] = PCOREC.FY4FOBPR[PC0VWIXT];
          PC0VW05.PC7FOBFL[PC0VWIXT] = "N";

        end

        PC0VW00.PC0VWIXT = PC0VW00.PC0VWIXT + 1;
                                   /* ===> increment temp. index*/

      end /* ===> while more sizes*/

    end /* ===> status check*/

    PC0VSB2(); /* ==========> Fetch next item row*/
    /* ========================================> driving read*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0VSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0V366 ***********************/
end // end PC0V366

// Select unique DPRODG.VSUSER01
Function PC0VS01()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or scheduler not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DPRODG.VSUSER01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = PG1REC.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = PG1REC.XXXUSER; /* Key field 2*/
  PC0VW00.PC0VWKA3 = PG1REC.PG1FCTCD; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS01

// Select unique DABUY.VSCTL001
Function PC0VS02()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  /* ***************************Y2K OUT BEGIN***********************/
  /* CALL IO3600 'S ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Select table set*/
  /* ***************************Y2K OUT END*************************/
  /* ***************************Y2K IN BEGIN************************/
  try
    call "VSCTL002" ("S ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  /* ***************************Y2K IN END**************************/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or control table not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DABUY.VSCTL001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = AB3REC.XSECD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = AB3REC.XSNYR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = AB3REC.PG1SC4CD; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS02

// Select set DABUY.VABSTY01
Function PC0VS03()
  PC0VW00.PC0VWDC1 = "N"; /* End of VABSTY01 flag*/

   /* ------------------------------------------------------------*/
   /* Format ab2rec with key values for select set*/
   /* ------------------------------------------------------------*/

  AB2REC.XSECD = PC0VW00.XSECD; /* Season code*/
  AB2REC.XSNYR = PC0VW00.XSNYR; /* Season year range*/
  AB2REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Sched code*/
  AB2REC.SY1STNBR = "******"; /* Style*/
  AB2REC.XWHCD = "**"; /* Warehouse*/
  if (PC0VM001.FY1FCTYC != " ") /* If factory entered*/
    AB2REC.FY1FCTYC = PC0VM001.FY1FCTYC; /* Move in factory code*/
  else
    AB2REC.FY1FCTYC = "****"; /* Wild card factory*/
  end
  AB2REC.PC4ORTYP = "**"; /* PO type*/
  AB2REC.PC2CUXID = "*****"; /* Customer*/
  AB2REC.XGACD = "**"; /* Gender age group*/
  AB2REC.XPCCD = "**"; /* Product category code*/
  AB2REC.XSUCD = "**"; /* Silhouette code*/
  AB2REC.XQTCD[1] = "***"; /* Quota category code 1*/
  AB2REC.XQTCD[2] = "***"; /* Quota category code 2*/
  AB2REC.FY1FRGN = "*"; /* Factory frgn flag*/
  AB2REC.FY6FOCD = "**"; /* Field office code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("S1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DABUY.VABSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS03"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB2REC.AB2KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS03

// Fetch next DABUY.VABSTY01
Function PC0VS04()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VABSTY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("N1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0VW00.PC0VWDC1 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS04"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS04

// Validate customer - VPRDCU01
Function PC0VS05()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found or inactive, indicate cust xref invalid.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        VPRDCU03.YSMXDV = 10; /* Default division to domestic*/
      end

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS05"; /* Module identification*/
  PC0VW00.PCWMAP = 1; /* Request map 1*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODC.VPRDCU03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = VPRDCU03.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS05

// Close cursor DABUY.VABSTY01
Function PC0VS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3560" ("C1", SQLCA, AB2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS07"; /* Module identification*/
  PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VABSTY01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0VS07"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS07

// Obtain list detail for Regular
Function PC0VS08()
   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "Z"; /* Buy status*/
  PC0VW04.PC0VWFNC = "S6"; /* Function*/
  AB6REC.OP1PARTN = "*"; /* Wild card s.o.*/
  AB6REC.OP1CUOID = -1;
  AB6REC.OP1NORID = -1;
  PC0VS09(); /* Open cursor for VBSIZE01*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW00.AB6PACKQ = 0; /* Init work quantity*/
  PC0VW04.PC0VWFNC = "N6"; /* Function*/

  PC0VS10(); /* Get first VBSIZE01 row*/

  PC0VW00.OP1PARTN = AB6REC.OP1PARTN; /* Save first s.o.*/
  PC0VW00.OP1CUOID = AB6REC.OP1CUOID;
  PC0VW00.OP1NORID = AB6REC.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/

  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/

    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
      /* Accumulate size quantities.*/
      /* ------------------------------------------------------------*/
      PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
      while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
        PC0VW00.AB6PACKQ = PC0VW00.AB6PACKQ + AB6REC.AB6PACKQ[PC0VWIX3];
        PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment size index*/
      end

       /* ------------------------------------------------------------*/
        /* Accumulate number of colors.*/
       /* ------------------------------------------------------------*/
      if (AB6REC.SY2CLRID != PC0VW00.SY2CLRID) /* If different color*/
        if (AB6REC.OP1PARTN == PC0VW00.OP1PARTN /* Diff s.o.*/
         || AB6REC.OP1CUOID == PC0VW00.OP1CUOID 
         || AB6REC.OP1NORID == PC0VW00.OP1NORID)
          PC0VW00.SY2CLRID = AB6REC.SY2CLRID; /* Save color*/
          PC0VW02.OP1PARTN[PC0VWIX2] = AB6REC.OP1PARTN;
          PC0VW02.OP1CUOID[PC0VWIX2] = AB6REC.OP1CUOID;
          PC0VW02.OP1NORID[PC0VWIX2] = AB6REC.OP1NORID;

          PC0VW00.XOWCD = AB6REC.XOWCD; /* Save owner group code*/
          PC0VW02.XOWCD[PC0VWIX2] = AB6REC.XOWCD;
          PC0VW02.PC0VWQTY[PC0VWIX2] = PC0VW02.PC0VWQTY[PC0VWIX2] + 1;

        end
      end
    end

    PC0VW04.PC0VWFNC = "N6"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

    if (AB6REC.OP1PARTN != PC0VW00.OP1PARTN /* Diff s.o.*/
     || AB6REC.OP1CUOID != PC0VW00.OP1CUOID 
     || AB6REC.OP1NORID != PC0VW00.OP1NORID 
     || PC0VW00.PC0VWDC1 != "N")            /* End of cursor*/
      PC0VW00.OP1PARTN = AB6REC.OP1PARTN;
      PC0VW00.OP1CUOID = AB6REC.OP1CUOID;
      PC0VW00.OP1NORID = AB6REC.OP1NORID;

      if (PC0VW02.PC0VWQTY[PC0VWIX2] != 0) /* If VBSIZE found*/
        PC0VW02.AB6BYTYP[PC0VWIX2] = AB6REC.AB6BYTYP;
        PC0VW02.PC0VWAIX[PC0VWIX2] = PC0VW00.PC0VWIX1;
        PC0VW02.AB6PACKQ[PC0VWIX2] = PC0VW00.AB6PACKQ;
        PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment index*/
      end
      PC0VW00.SY2CLRID = " "; /* Initialize save color*/
      PC0VW00.AB6PACKQ = 0; /* Init work quantity*/
    end
  end

   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C6"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* Set the style index to next style in the array.*/
   /* ------------------------------------------------------------*/
  PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* increment index*/

   /* ------------------------------------------------------------*/
   /* If line array exceeded stop the style array with message.*/
   /* ------------------------------------------------------------*/
  if (PC0VW00.PC0VWIX2 >= 800)
    PC0VW01.SY1STNBR[PC0VWIX1] = " ";
    PC0VW00.XXXPRCNM = "PC0VS08"; /* Module identification*/
    converseLib.validationFailed(272);
  end

end // end PC0VS08

// Select set DABUY.VBSIZE01
Function PC0VS09()
  PC0VW00.PC0VWDC1 = "N"; /* End of VBSIZE01 flag*/

   /* ------------------------------------------------------------*/
   /* Setup key fields*/
   /* ------------------------------------------------------------*/

  AB6REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  AB6REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
  AB6REC.XOWCD = PC0VW01.XOWCD[PC0VWIXA]; /* Owner group*/
  AB6REC.XWHCD = PC0VW01.XWHCD[PC0VWIXA]; /* Warehouse*/
  AB6REC.XDVCD = PC0VW01.XDVCD[PC0VWIXA]; /* Division*/
  AB6REC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
  AB6REC.PC4ORTYP = PC0VW01.PC4ORTYP[PC0VWIXA]; /* PO type*/
  AB6REC.PC2CUXID = PC0VW01.PC2CUXID[PC0VWIXA]; /* Customer*/
  AB6REC.XSECD = PC0VW00.XSECD; /* Season code*/
  AB6REC.XSNYR = PC0VW00.XSNYR; /* Season year range*/
  AB6REC.AB3BUYMO = PC0VW00.PC0VWBUY; /* Buy month*/
  /* ***********************Y2K IN BEGIN***************************/
  if (PC0VW00.PC0VWBUY < 8001)
    AB6REC.AB3BUYMO = AB6REC.AB3BUYMO + 200000;
  else
    AB6REC.AB3BUYMO = AB6REC.AB3BUYMO + 190000;
  end
  /* ***********************Y2K IN END*****************************/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3590" (PC0VW04, SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DABUY.VBSIZE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS09"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBSIZE01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB6REC.AB6KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS09

// Fetch next DABUY.VBSIZE01
Function PC0VS10()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VBSIZE01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3590" (PC0VW04, SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0VW00.PC0VWDC1 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS10"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBSIZE01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB6REC.AB6KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS10

// Close cursor DABUY.VBSIZE01
Function PC0VS11()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3590" (PC0VW04, SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS11"; /* Module identification*/
  PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VBSIZE01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS11"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBSIZE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS11

// Obtain list detail for Blank
Function PC0VS12()
   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "T"; /* Buy status*/
  AB6REC.SY2CLRID = "***"; /* Color code*/

  PC0VW04.PC0VWFNC = "S1"; /* Function*/
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW00.AB6PACKQ = 0; /* Init work quantity*/
  PC0VW04.PC0VWFNC = "N1"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/
  PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 - 1; /* Decrement line index*/
  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that we have a valid action code to autoload*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6BYTYP == "B"
     || AB6REC.AB6BYTYP == "P"
     || AB6REC.AB6BYTYP == "R")

      /* ------------------------------------------------------------*/
       /* Verify that quantities exist for the VBSIZE fetched.*/
      /* ------------------------------------------------------------*/
      if (AB6REC.AB6PACKQ[1] != 0
       || AB6REC.AB6PACKQ[2] != 0
       || AB6REC.AB6PACKQ[3] != 0
       || AB6REC.AB6PACKQ[4] != 0
       || AB6REC.AB6PACKQ[5] != 0
       || AB6REC.AB6PACKQ[6] != 0
       || AB6REC.AB6PACKQ[7] != 0
       || AB6REC.AB6PACKQ[8] != 0
       || AB6REC.AB6PACKQ[9] != 0
       || AB6REC.AB6PACKQ[10] != 0)

        /* ------------------------------------------------------------*/
         /* For each change in color/xowcd format a selection line.*/
        /* ------------------------------------------------------------*/

        if (AB6REC.SY2CLRID != PC0VW00.SY2CLRID /* If different color*/
         || AB6REC.XOWCD != PC0VW00.XOWCD       /* or different owngrp*/
         || AB6REC.AB6XFCTY != PC0VW00.AB6XFCTY /* or different xfcty*/
         || AB6REC.AB6BYTYP != PC0VW00.AB6BYTYP /* or different actn*/
         || AB6REC.AB6XWHCD != PC0VW00.AB6XWHCD 
         /* or different pfs wh*/
         || AB6REC.PC3PONBR != PC0VW00.PC3PONBR)
                                   /* or different po nbr*/

          PC0VW00.SY2CLRID = AB6REC.SY2CLRID; /* Save color*/
          PC0VW00.XOWCD = AB6REC.XOWCD; /* Save owner group code*/
          PC0VW00.AB6XFCTY = AB6REC.AB6XFCTY; /* Save xfcty*/
          PC0VW00.AB6BYTYP = AB6REC.AB6BYTYP; /* Save action*/
          PC0VW00.AB6XWHCD = AB6REC.AB6XWHCD; /* Save pfs whse*/
          PC0VW00.PC3PONBR = AB6REC.PC3PONBR; /* Save p.o.#*/
          PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/
          PC0VW02.SY2CLRID[PC0VWIX2] = AB6REC.SY2CLRID; /* Color*/
          PC0VW02.XOWCD[PC0VWIX2] = AB6REC.XOWCD; /* Owner groupcode*/
          PC0VW02.AB6XFCTY[PC0VWIX2] = AB6REC.AB6XFCTY; /* Xref fcty*/
          PC0VW02.AB6XSTYN[PC0VWIX2] = AB6REC.AB6XSTYN;
                                   /* Xref style*/
          PC0VW02.AB6XCOLR[PC0VWIX2] = AB6REC.AB6XCOLR;
                                   /* Xref color*/

          if (AB6REC.AB6BYTYP == " ")
            PC0VW02.AB6BYTYP[PC0VWIX2] = "B"; /* Regular Buy type*/
          else
            PC0VW02.AB6BYTYP[PC0VWIX2] = AB6REC.AB6BYTYP; /* Buy type*/
          end

          PC0VW02.AB6XWHCD[PC0VWIX2] = AB6REC.AB6XWHCD; /* PFS whse*/
          PC0VW02.PC3BLPO[PC0VWIX2] = AB6REC.PC3PONBR;
                                   /* Blank PO #*/
          PC0VW02.IN7STNBR[PC0VWIX2] = AB6REC.IN7STNBR; /* Stk Trn #*/
          PC0VW02.PC0VWAIX[PC0VWIX2] = PC0VW00.PC0VWIX1; /* indx sty*/
          PC0VW00.AB6PACKQ = 0; /* Init work quantity*/

        end

        /* ------------------------------------------------------------*/
         /* Accumulate the size quantities.*/
        /* ------------------------------------------------------------*/
        PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
        while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
          PC0VW00.AB6PACKQ = PC0VW00.AB6PACKQ + AB6REC.AB6PACKQ[PC0VWIX3];
          PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment size index*/
        end

        PC0VW02.AB6PACKQ[PC0VWIX2] = PC0VW00.AB6PACKQ; /* Quantity*/
      end /* quantity check*/
    end /* action code check*/

    PC0VW04.PC0VWFNC = "N1"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end

   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C1"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* If line array exceeded remove references to last style.*/
   /* ------------------------------------------------------------*/

  if (PC0VW00.PC0VWIX2 >= 800) /* If end of array*/

    converseLib.validationFailed(272); /* End of array message*/
    PC0VW00.XXXPRCNM = "PC0VS12"; /* ==> process id*/
    PC0VW01.SY1STNBR[PC0VWIX1] = " "; /* Prevent further access*/

    while (PC0VW02.PC0VWAIX[PC0VWIX2] == PC0VW00.PC0VWIX1)
      PC0VW02.PC0VWAIX[PC0VWIX2] = 0; /* Init style index*/
      PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 - 1; /* Increment index*/
    end

    PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/

  else

    /* ------------------------------------------------------------*/
     /* Set the line & style indices to next in their arrays.*/
    /* ------------------------------------------------------------*/

    PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* Increment style index*/
    PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/

  end

end // end PC0VS12

// Obtain list detail for Screend
Function PC0VS13()
   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Initialize VBSIZE record*/
  AB6REC.AB3BUYST = "K"; /* Buy status*/
  AB6REC.SY2CLRID = "***"; /* Buy status*/
  AB6REC.OP1PARTN = "*"; /* Wild card s.o.*/
  AB6REC.OP1CUOID = -1;
  AB6REC.OP1NORID = -1;

  PC0VW04.PC0VWFNC = "S2"; /* Function*/
  PC0VS09(); /* Open cursor for VBSIZE01*/

   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & format the detail line*/
   /* ------------------------------------------------------------*/
  PC0VW00.AB6XFCTY = " "; /* Initialize save xref factory*/
  PC0VW00.AB6XSTYN = " "; /* Initialize save xref style*/
  PC0VW00.AB6XCOLR = " "; /* Initialize save xref color*/
  PC0VW00.SY2CLRID = " "; /* Initialize save color*/
  PC0VW00.PC3PONBR = 0; /* Init save p.o. nbr*/
  PC0VW00.AB6PACKQ = 0; /* Init work quantity*/
  PC0VW00.OP1PARTN = " "; /* Initialize s.o.*/
  PC0VW00.OP1CUOID = 0;
  PC0VW00.OP1NORID = 0;
  PC0VW04.PC0VWFNC = "N2"; /* Function*/
  PC0VS10(); /* Get first VBSIZE01 row*/
  PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 - 1; /* Decrement line index*/
  while (PC0VW00.PC0VWDC1 == "N" /* While more rows*/
   && PC0VW00.PC0VWIX2 < 800) /* and not end of array*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
       /* For each new xref factory format a line in VBSIZE array.*/
      /* ------------------------------------------------------------*/
      if (AB6REC.AB6XFCTY != PC0VW00.AB6XFCTY /* If different xref fcty*/
       || AB6REC.AB6XSTYN != PC0VW00.AB6XSTYN 
       /* or different xref style*/
       || AB6REC.AB6XCOLR != PC0VW00.AB6XCOLR 
       /* or different xref color*/
       || AB6REC.AB6XWHCD != PC0VW00.AB6XWHCD /* or different pfs whse*/
       || AB6REC.AB6BYTYP != PC0VW00.AB6BYTYP /* or different act cd*/
       || AB6REC.PC3PONBR != PC0VW00.PC3PONBR /* or different po nbr*/
       || AB6REC.SY2CLRID != PC0VW00.SY2CLRID /* or different color*/
       || AB6REC.XOWCD != PC0VW00.XOWCD       /* or different own grp cd*/
       || AB6REC.OP1PARTN != PC0VW00.OP1PARTN /* or s.o.*/
       || AB6REC.OP1CUOID != PC0VW00.OP1CUOID 
       || AB6REC.OP1NORID != PC0VW00.OP1NORID)
        PC0VW00.AB6XFCTY = AB6REC.AB6XFCTY; /* Save xref fcty*/
        PC0VW00.AB6XSTYN = AB6REC.AB6XSTYN; /* Save xref style*/
        PC0VW00.AB6XCOLR = AB6REC.AB6XCOLR; /* Save xref color*/
        PC0VW00.AB6XWHCD = AB6REC.AB6XWHCD; /* Save pfs whse*/
        PC0VW00.AB6BYTYP = AB6REC.AB6BYTYP; /* Save action code*/
        PC0VW00.PC3PONBR = AB6REC.PC3PONBR; /* Save p.o. nbr*/
        PC0VW00.SY2CLRID = AB6REC.SY2CLRID; /* Save color*/
        PC0VW00.OP1PARTN = AB6REC.OP1PARTN; /* Save s.o.*/
        PC0VW00.OP1CUOID = AB6REC.OP1CUOID;
        PC0VW00.OP1NORID = AB6REC.OP1NORID;
        PC0VW00.XOWCD = AB6REC.XOWCD; /* Save own grp cd*/
        PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/
        PC0VW02.PC3BLPO[PC0VWIX2] = AB6REC.PC3PONBR; /* Xref PO #*/
        PC0VW02.IN7STNBR[PC0VWIX2] = AB6REC.IN7STNBR; /* Stk Trn #*/
        PC0VW02.AB6XFCTY[PC0VWIX2] = AB6REC.AB6XFCTY;
                                   /* Xref factory*/
        PC0VW02.AB6XSTYN[PC0VWIX2] = AB6REC.AB6XSTYN; /* Xref style*/
        PC0VW02.AB6XCOLR[PC0VWIX2] = AB6REC.AB6XCOLR; /* Xref color*/
        PC0VW02.AB6XWHCD[PC0VWIX2] = AB6REC.AB6XWHCD; /* pfs whse*/
        PC0VW02.SY2CLRID[PC0VWIX2] = AB6REC.SY2CLRID; /* Color*/
        PC0VW02.OP1PARTN[PC0VWIX2] = AB6REC.OP1PARTN; /* s.o.*/
        PC0VW02.OP1CUOID[PC0VWIX2] = AB6REC.OP1CUOID;
        PC0VW02.OP1NORID[PC0VWIX2] = AB6REC.OP1NORID;
        PC0VW02.XOWCD[PC0VWIX2] = AB6REC.XOWCD; /* own grp cd*/
        if (AB6REC.AB6BYTYP == " ")
          PC0VW02.AB6BYTYP[PC0VWIX2] = "B"; /* Regular Buy action*/
        else
          PC0VW02.AB6BYTYP[PC0VWIX2] = AB6REC.AB6BYTYP; /* Buy action*/
        end
        PC0VW02.PC0VWAIX[PC0VWIX2] = PC0VW00.PC0VWIX1; /* Index style*/
        PC0VW00.AB6PACKQ = 0; /* Init work quantity*/
      end

      /* ------------------------------------------------------------*/
       /* Accumulate the quantities into the total quantities.*/
      /* ------------------------------------------------------------*/
      PC0VW00.PC0VWIX3 = 1; /* Initialize size index*/
      while (PC0VW00.PC0VWIX3 <= 10) /* For each size*/
        PC0VW00.AB6PACKQ = PC0VW00.AB6PACKQ + AB6REC.AB6PACKQ[PC0VWIX3];
        PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment size index*/
      end

      PC0VW02.AB6PACKQ[PC0VWIX2] = PC0VW00.AB6PACKQ; /* Quantity*/

    end

    PC0VW04.PC0VWFNC = "N2"; /* Function*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end

   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFNC = "C2"; /* Function*/
  PC0VS11(); /* Close cursor VBSIZE01 row*/

   /* ------------------------------------------------------------*/
   /* If line array exceeded remove references to last style.*/
   /* ------------------------------------------------------------*/
  if (PC0VW00.PC0VWIX2 >= 800) /* If end of array*/
    PC0VW00.XXXPRCNM = "PC0VS13";
    converseLib.validationFailed(272); /* End of array message*/
    PC0VW01.SY1STNBR[PC0VWIX1] = " "; /* Prevent further access*/
    while (PC0VW02.PC0VWAIX[PC0VWIX2] == PC0VW00.PC0VWIX1)
      PC0VW02.PC0VWAIX[PC0VWIX2] = 0; /* Init style index*/
      PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 - 1; /* Increment index*/
    end
    PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/
  else
    /* ------------------------------------------------------------*/
     /* Set the line & style indices to next in their arrays.*/
    /* ------------------------------------------------------------*/
    PC0VW00.PC0VWIX1 = PC0VW00.PC0VWIX1 + 1; /* Increment style index*/
    PC0VW00.PC0VWIX2 = PC0VW00.PC0VWIX2 + 1; /* Increment line index*/
  end

end // end PC0VS13

// Update VBSIZE as autoloaded
Function PC0VS14()
   /* ------------------------------------------------------------*/
   /* Determine buy status and type of select for VBSIZE.*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Init VBSIZE record*/
  if (PC0VM001.PC0VMOPT == "R" /* If regular buy*/
   || PC0VM001.PC0VMOPT == "U") /* or uncrested*/
    AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL]; /* s.o.*/
    AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL]; /**/
    AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL]; /**/
    AB6REC.AB3BUYST = "Z"; /* Ready to autoload*/
    PC0VW04.PC0VWFN2 = "6"; /* Type of select for IO*/
  else
    if (PC0VM001.PC0VMOPT == "B") /* If blank T-shirts*/
      AB6REC.AB3BUYST = "T"; /* Ready to autoload*/
      PC0VW04.PC0VWFN2 = "3"; /* Type of select for IO*/
    else
      if (PC0VM001.PC0VMOPT == "S") /* If screened shirts*/
        AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL]; /* s.o.*/
        AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL]; /**/
        AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL]; /**/
        AB6REC.AB3BUYST = "K"; /* Ready to autoload*/
        PC0VW04.PC0VWFN2 = "2"; /* Type of select for IO*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFN1 = "S"; /* Type of select for IO*/
  PC0VS09(); /* Open cursor VBSIZE01*/

  PC0VW04.PC0VWFN1 = "N"; /* Type of select for IO*/
  PC0VS10(); /* Get first VBSIZE01 row*/
   /* ------------------------------------------------------------*/
   /* Fetch each VBSIZE01 row & update it with buy status*/
   /* ------------------------------------------------------------*/
  while (PC0VW00.PC0VWDC1 == "N") /* While more rows*/

    /* ------------------------------------------------------------*/
     /* Verify that quantities exist for the VBSIZE fetched.*/
    /* ------------------------------------------------------------*/
    if (AB6REC.AB6PACKQ[1] != 0
     || AB6REC.AB6PACKQ[2] != 0
     || AB6REC.AB6PACKQ[3] != 0
     || AB6REC.AB6PACKQ[4] != 0
     || AB6REC.AB6PACKQ[5] != 0
     || AB6REC.AB6PACKQ[6] != 0
     || AB6REC.AB6PACKQ[7] != 0
     || AB6REC.AB6PACKQ[8] != 0
     || AB6REC.AB6PACKQ[9] != 0
     || AB6REC.AB6PACKQ[10] != 0)

      /* ------------------------------------------------------------*/
       /* Update the status of VBSIZE for blank T-shirts.*/
      /* ------------------------------------------------------------*/

      if (PC0VM001.PC0VMOPT == "B"                      /* If blank T-shirts*/
       && PC0VW02.SY2CLRID[PC0VWIXL] == AB6REC.SY2CLRID /* & color match*/
       && PC0VW02.AB6XFCTY[PC0VWIXL] == AB6REC.AB6XFCTY /* & xfcty match*/
       && PC0VW02.AB6BYTYP[PC0VWIXL] == AB6REC.AB6BYTYP /* & bytyp match*/
       && PC0VW02.XOWCD[PC0VWIXL] == AB6REC.XOWCD       /* & owner grp match*/
       && PC0VW02.AB6XWHCD[PC0VWIXL] == AB6REC.AB6XWHCD /* & whse mtch*/
       && PC0VW02.PC3BLPO[PC0VWIXL] == AB6REC.PC3PONBR) /* & po mtch*/

        AB6REC.AB3BUYST = "K"; /* Buy status*/
        AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/

        if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P")
          AB6REC.IN7STNBR = PC0VM003.IN7STNBR; /* Stock transfer #*/
        else
          if (PC0VM002.PC0VMSEL[PC0VWIXM] != "D") /* Not a delete request;*/
            AB6REC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. nbr*/
          end
        end

        PC0VS15(); /* Update VBSIZE01 blank*/

        if (AB6REC.AB6XSTYN > " ") /* if xref exists*/
          /* ------------------------------------------------------------*/
           /* Update the screened VBSIZE found by cross reference fields*/
          /* ------------------------------------------------------------*/
          AB6REC.AB6BYTYP = PC0VW02.AB6BYTYP[PC0VWIXL];
                                   /* actn typ ind*/
          PC0VW00.AB6XSTYN = AB6REC.AB6XSTYN; /* Save xref style*/
          PC0VW00.AB6XCOLR = AB6REC.AB6XCOLR; /* Save xref color*/
          PC0VW00.AB6XFCTY = AB6REC.AB6XFCTY;
                                   /* Save screen xref fcty*/
          AB6REC.AB6XSTYN = AB6REC.SY1STNBR; /* Style to xref style*/
          AB6REC.AB6XCOLR = AB6REC.SY2CLRID; /* Style to xref style*/
          AB6REC.AB6XFCTY = AB6REC.FY1FCTYC;
                                   /* Style to xref factory*/
          AB6REC.SY1STNBR = PC0VW00.AB6XSTYN; /* Xref style to style*/
          AB6REC.SY2CLRID = PC0VW00.AB6XCOLR; /* Xref color to color*/
          AB6REC.XOWCD = PC0VW00.XOWCD; /* ownere grp code*/
          AB6REC.FY1FCTYC = PC0VW00.AB6XFCTY; /* Xref fcty to fcty*/

          PC0VS16(); /* ===> Select unique VBSIZE01*/

          if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P")
            AB6REC.IN7STNBR = PC0VM003.IN7STNBR; /* Stock transfer #*/
          else
            if (PC0VM002.PC0VMSEL[PC0VWIXM] != "D") /* Not a delete request;*/
              AB6REC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. nbr*/
            end
          end

          AB6REC.AB3BUYST = "K"; /* Buy status*/
          AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/

          PC0VS15(); /* ===> Update VBSIZE01 screened*/

        end /* ===> blank T-shirts, color match,*/
                                   /* xfcty match check*/

      else
        /* ------------------------------------------------------------*/
         /* Update the status of VBSIZE for regular apparel.*/
        /* ------------------------------------------------------------*/
        if (PC0VM001.PC0VMOPT == "R"                      /* If regular buy*/
         && PC0VW02.OP1PARTN[PC0VWIXL] == AB6REC.OP1PARTN /* s.o.*/
         && PC0VW02.OP1CUOID[PC0VWIXL] == AB6REC.OP1CUOID /* s.o.*/
         && PC0VW02.OP1NORID[PC0VWIXL] == AB6REC.OP1NORID) /* s.o.*/
          if (PC0VW02.PC0VWSEL[PC0VWIXL] == "C") /* PO AT COLOR LEVEL*/
            if (PC0VW03.SY2CLRID[PC0VWIXM] == AB6REC.SY2CLRID) /* clr*/
              AB6REC.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/
              AB6REC.AB3BUYST = "L"; /* Buy status*/
              AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/
              PC0VS15(); /* Update VBSIZE01 row*/
            end
          else
            AB6REC.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/
            AB6REC.AB3BUYST = "L"; /* Buy status*/
            AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/
            PC0VS15(); /* Update VBSIZE01 row*/
          end
        else
          if (PC0VM001.PC0VMOPT == "U"                      /* If uncrested*/
           && PC0VW02.OP1PARTN[PC0VWIXL] == AB6REC.OP1PARTN /* s.o.*/
           && PC0VW02.OP1CUOID[PC0VWIXL] == AB6REC.OP1CUOID /* s.o.*/
           && PC0VW02.OP1NORID[PC0VWIXL] == AB6REC.OP1NORID) /* s.o.*/
            if (PC0VW02.PC0VWSEL[PC0VWIXL] == "C") /* PO AT COLOR LEVEL*/
              if (PC0VW03.SY2CLRID[PC0VWIXM] == AB6REC.SY2CLRID) /* clr*/
                AB6REC.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/
                AB6REC.AB3BUYST = "L"; /* Buy status*/
                AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/
                PC0VS15(); /* Update VBSIZE01 row*/
              end
            else
              AB6REC.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/
              AB6REC.AB3BUYST = "L"; /* Buy status*/
              AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/
              PC0VS15(); /* Update VBSIZE01 row*/
            end
          else

            /* ------------------------------------------------------------*/
            /* Update the status of VBSIZE for screened T-shirts.*/

            /* ------------------------------------------------------------*/
            if (PC0VM001.PC0VMOPT == "S"                      /* If screened T-shirts*/
             && PC0VW02.AB6XFCTY[PC0VWIXL] == AB6REC.AB6XFCTY 
             /* Xref fcty*/
             && PC0VW02.AB6XSTYN[PC0VWIXL] == AB6REC.AB6XSTYN 
             /* Xref style*/
             && PC0VW02.AB6XCOLR[PC0VWIXL] == AB6REC.AB6XCOLR 
             /* Xref color*/
             && PC0VW02.AB6XWHCD[PC0VWIXL] == AB6REC.AB6XWHCD /* & pfs wh*/
             && PC0VW02.SY2CLRID[PC0VWIXL] == AB6REC.SY2CLRID /* & color*/
             && PC0VW02.XOWCD[PC0VWIXL] == AB6REC.XOWCD       /* & own grp mtch*/
             && PC0VW02.PC3BLPO[PC0VWIXL] == AB6REC.PC3PONBR  /* & po mtch*/
             && PC0VW02.OP1PARTN[PC0VWIXL] == AB6REC.OP1PARTN /* s.o.*/
             && PC0VW02.OP1CUOID[PC0VWIXL] == AB6REC.OP1CUOID /* s.o.*/
             && PC0VW02.OP1NORID[PC0VWIXL] == AB6REC.OP1NORID) /* s.o.*/
              AB6REC.AB3BUYST = "L"; /* Buy status*/
              AB6REC.AB3BYSDT = XX0XW01.XX0XWDAT; /* Buy status date*/
              PC0VS15();
                                   /* Update VBSIZE01 row*/
            end
          end
        end
      end
    end

    PC0VW04.PC0VWFN1 = "N"; /* Type of select for IO*/
    PC0VS10(); /* Get next VBSIZE01 row*/

  end
   /* ------------------------------------------------------------*/
   /* IO to close VBSIZE01 set*/
   /* ------------------------------------------------------------*/

  PC0VW04.PC0VWFN1 = "C"; /* Type of select for IO*/
  PC0VS11();
                                   /* Close cursor VBSIZE01 row*/

end // end PC0VS14

// Update row DABUY.VBSIZE01
Function PC0VS15()
   /* ------------------------------------------------------------*/
   /* Update row for VBSIZE01.*/
   /* ------------------------------------------------------------*/

  AB6REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB6REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* and re-direct*/

    try
      call "IO3590" ("UB", SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Update row*/

  else

    try
      call "IO3590" ("UA", SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Update row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS15"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBSIZE01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB6REC.AB6KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS15

// Select unique - DABUY.VBSIZE01
Function PC0VS16()
   /* ------------------------------------------------------------*/
   /* Select unique row for VBSIZE01.*/
   /* ------------------------------------------------------------*/

  if (PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* and re-direct*/
    try
      call "IO3590" ("SB", SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
  else
    try
      call "IO3590" ("SA", SQLCA, AB6REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS16"; /* Program number*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBSIZE01"; /* Table view name*/
  TA1REC.TA1TBLKE = AB6REC.AB6KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS16

// Purge any temporary storage
Function PC0VS17()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0VW03 empty; /* Map display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0VW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0VW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0VW00.XXXPRCNM = "PC0VS17"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMNM = "PC0VS17"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS17

// Load size array & FOB prices
Function PC0VS18()
   /* ------------------------------------------------------------*/
   /* Get the unit of measure from the style/color table.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty; /* Init record*/
  PG2REC.XGPCD = "03"; /* GPC code*/
  PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  PG2REC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
  PG2REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
  XSPG202(); /* Retrieve style*/

   /* ------------------------------------------------------------*/
   /* Get customer data*/
   /* ------------------------------------------------------------*/
  set VPRDCU03 empty; /* Init record*/

  if (PC0VW01.PC2CUXID[PC0VWIXA] > " ")
    VPRDCU03.XGPCD = "03"; /* GPC code*/
    VPRDCU03.PC2CUXID = PC0VW01.PC2CUXID[PC0VWIXA]; /* customer*/
    PC0VS41(); /* ===> Retrieve customer*/
  end

  if (PC0VM001.PC0VMOPT == "B"
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* If action is redirect*/
    VPRDCU03.XGPCD = "03"; /* GPC code*/
    VPRDCU03.PC2CUXID = PC0VW02.AB6XFCTY[PC0VWIXL]; /* Customer*/
    PC0VS41(); /* ===> Retrieve customer screener*/
  end

   /* ------------------------------------------------------------*/
   /* Get the FOB price.*/
   /* ------------------------------------------------------------*/
  set PCOREC empty; /* Init record*/
  PCOREC.XGPCD = "03"; /* GPC code*/
  PCOREC.FY1FCTYC = AB6REC.FY1FCTYC; /* Factory*/
  PCOREC.SY1STNBR = AB6REC.SY1STNBR; /* Style*/
  PCOREC.SY2CLRID = AB6REC.SY2CLRID; /* Color*/
  PCOREC.XDMCD = PG2REC.XDMCD; /* Dimension*/
  PCOREC.XQACD = "01"; /* Quality*/

  if (PC0VW01.PC2CUXID[PC0VWIXA] == " ")
    PCOREC.PC2INSEG = "000"; /* ISEG*/
  else
    PCOREC.PC2INSEG = VPRDCU03.PC2INSEG; /* ISEG*/
  end

  PCOREC.XUMCD = PG2REC.XUMCD; /* Unit of measure*/
  PCOREC.XPGCD = "00"; /* Package*/
  PCOREC.XSECD = AB6REC.XSECD; /* Season code*/
  PCOREC.PCFSEYR = AB6REC.XSNYR; /* Season year*/
  PCOREC.PC3CRDT = VGVar.currentShortGregorianDate; /* Create date*/
  if (PCOREC.PC3CRDT < 800101) /* If year < 80*/
    PCOREC.PC3CRDT = PCOREC.PC3CRDT + 20000000; /* 21st century*/
  else /* else*/
    PCOREC.PC3CRDT = PCOREC.PC3CRDT + 19000000; /* 20th century*/
  end
  XSPCS04(); /* Obtain FOB price*/
  if (PCOREC.PCORECPF == "Y") /* If prices found*/
    PC0VW00.PC0VWIX3 = 1; /* Init index*/
    while (AB6REC.AB6PACKQ[PC0VWIX3] == 0 /* While no qty for size*/
     && PC0VW00.PC0VWIX3 <= 10) /* and index <= 10*/
      PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
    end
    if (AB6REC.SY5SZID[PC0VWIX3] == 0) /* If no index found*/
      PCWREC.XXXMSGNO = 311; /* Missing index*/
      PC0VW00.XXXPRCNM = "PC0V314"; /* Module id*/
      PC0VW00.PCWMAP = 2; /* Request selection screen*/
      PC0VW00.XXXTSPAG = 1; /* Request page 1*/
      exit stack; /* Display message*/
    end
    PC0VW00.PC0VWSID = AB6REC.SY5SZID[PC0VWIX3]; /* Size index*/
    PC0VW03.PC0VWPRC[PC0VWIXM] = PCOREC.FY4FOBPR[PC0VWSID];
  end

   /* ------------------------------------------------------------*/
   /* SIZE INDEXS*/
   /* -----------*/
     /* Quantities retrieved form the VBSIZE01 record (AB6REC)*/
     /* are in an array of 10 occurrences, and can correspond*/
     /* to any of the 40 sizes in the PO system. The size index*/
     /* (AB6REC.SY5SZID) tells which size bucket the quantity is*/
     /* for.  Example: AB6REC.AB6PACQ(1) = 10*/
                    /* AB6REC.SY5SZID(1) = 3*/
           /* means a quantity of 10 for size bucket 3*/
     /* All of the VBSIZE01 quantities for a P.O. are stored in*/
     /* PC0VWSQ1 through PC0VWSQ0 of PC0VW03 indexed by PC0VWIXM*/
     /* To use the size indexs they are moved to the unindexed*/
     /* fields PC0VWSD1 through PC0VWSD0 of PC0VW00.*/
     /* PC0VWSID is used for a temporary size index within a loop*/
   /* ------------------------------------------------------------*/
end // end PC0VS18

// Add page to temporary storage
Function PC0VS19()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0VW03.XXXTSLEN = PC0VW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0VW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0VW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0VW03 empty; /* M003 display storage*/

    PC0VW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0VW00.PC0VWIXM = 0; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0VW00.XXXPRCNM = "PC0VS19"; /* Module identification*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS19"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Exit to display map*/

end // end PC0VS19

// Select unique   DFCTY.VFCTY003
Function PC0VS20()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  VFCTY003.XGPCD = "03"; /* GPC code*/
   /* MOVE PC0VW01.FY1FCTYC(PC0VWIXA) FY1REC.FY1FCTYC;Factory code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return; /* Return to previous process*/
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS20"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VFCTY003.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = VFCTY003.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.XXXPRCNM = "PC0VS20";
  exit stack;

end // end PC0VS20

// Read page from temp storage
Function PC0VS21()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0VW03.XXXTSLEN = PC0VW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0VW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0VW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0VW00.XXXPRCNM = "PC0VS21"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMNM = "PC0VS21"; /* Module identification*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Exit to display map*/

end // end PC0VS21

// Validate PO type - VPOTYP01
Function PC0VS22()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format PC4REC with key values for select set*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = "03"; /* GPC code*/
  PC4REC.PC4ORTYP = PC0VM003.PC4ORTYP; /* P.O. type code*/

   /* ------------------------------------------------------------*/
   /* Check the PO type matches the request*/
   /* ------------------------------------------------------------*/
  if (PC0VM003.PC0VMOPT == "S"  /* If finish good load*/
   && PC0VM003.PC4ORTYP != "SD" /* po type must be sd or cd*/
   && PC0VM003.PC4ORTYP != "CD")
    converseLib.validationFailed(403); /* po type invalid for finished good*/
    PC0VW00.XXXPRCNM = "PC0VS22"; /* module identification*/
    set PC0VM003.PC4ORTYP cursor, bold; /* highlight*/
    exit stack;
  end

  if (PC0VM003.PC0VMOPT == "B"  /* If blank load*/
   && PG2REC.PG2SCRFL == "I"    /* and it's an interim style*/
   && PC0VM003.PC4ORTYP != "SD" /* po type must be sd or cd*/
   && PC0VM003.PC4ORTYP != "CD")
    converseLib.validationFailed(403); /* po type invalid for finished good*/
    PC0VW00.XXXPRCNM = "PC0VS22"; /* module identification*/
    set PC0VM003.PC4ORTYP cursor, bold; /* highlight*/
    exit stack;
  end

  if (PC0VM003.PC4ORTYP == "SD" /* po type CANNOT be sd or cd*/
   || PC0VM003.PC4ORTYP == "CD")

    if (PC0VM003.PC0VMOPT == "B") /* If blank load*/
      if (PG2REC.PG2SCRFL != "I") /* and it's NOT an interim style*/
        converseLib.validationFailed(414); /* po type invalid for this style*/
        PC0VW00.XXXPRCNM = "PC0VS22"; /* module identification*/
        set PC0VM003.PC4ORTYP cursor, bold; /* highlight*/
        exit stack;
      end
    else
      if (PC0VM003.PC0VMOPT != "S") /* If not a screened good*/
        converseLib.validationFailed(414); /* po type invalid for this style*/
        PC0VW00.XXXPRCNM = "PC0VS22"; /* module identification*/
        set PC0VM003.PC4ORTYP cursor, bold; /* highlight*/
        exit stack;
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* P.O. type not found*/

      if (SQLCA.VAGen_SQLCODE == 100 /* P.O. type not found*/
       || PC4REC.XXXSTAT != "A")     /* or status not active*/
        converseLib.validationFailed(33); /* P.O. type is invalid*/
        PC0VW00.XXXPRCNM = "PC0VS22"; /* Module identification*/
        set PC0VM003.PC4ORTYP cursor, bold; /* Highlight*/
      end

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO GET DPRODC.VPOTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = PC4REC.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = PC4REC.PC4ORTYP; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS22

// Size descriptions  -  VSCALE01
Function PC0VS23()
   /* ------------------------------------------------------------*/
   /* Select unique for VSCALE01.*/
   /* ------------------------------------------------------------*/
  set SY4REC empty; /* Init scale record*/
  SY4REC.SY4SZSCL = PG2REC.SY4SZSCL; /* Size scale code*/

  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS23"; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCALE01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS23

// Add days to calculate date
Function PC0VS26()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    PC0VW00.PCWMAP = 1; /* Return to entry screen*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback all database updates*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0VW00.XXXPRCNM = "PC0VS26"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = PC0VW00.PCWMAP; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0VS26

// GET NEXT P.O. NUMBER
Function PC0VS27()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the p.o. nbr table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

   /* MOVE '03' TO PC1REC.XGPCD;*/
  VPOCTL02.XGPCD = "03";
  VPOCTL02.PO-REG-CD = "01";
   /* MOVE XX0XW01.XX0XWDAT TO PC1REC.ZZZCHGDT; /* Change date*/
  VPOCTL02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
   /* MOVE XX0XW01.XX0XWTIM TO PC1REC.ZZZCHGTM; /* Change time*/
  VPOCTL02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOCTL02" ("SU", SQLCA, VPOCTL02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS27"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. NUMBER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOCTL02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0VM002.XXXPRCNM = "PC0VS27"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end PC0VS27

// Insert row - VPOHDR03
Function PC0VS28()
   /* ------------------------------------------------------------*/
   /* Insert a row for the PC3REC*/
   /* If any error, indicate system error.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "A "; /* Function is add*/
  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database updates*/

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS28"; /* Process name*/
  TA1REC.TA1LOC = "INSERT P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOHDR03.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOHDR03.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKN3 = VPOHDR03.PC3POIDT; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOHDR03.FY1FCTYC; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0VM002.XXXPRCNM = "PC0VS28"; /* Process name*/
  converseLib.clearScreen();
   /* Reset map 2*/
  PC0VW00.PCWMAP = 1; /* Request entry screen*/

  exit stack; /* Exit to redisplay map*/

end // end PC0VS28

// Select count    - VPOITM05
Function PC0VS29()
   /* ------------------------------------------------------------*/
   /* Select count for vPOITM05.*/

   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Null return*/

      PCYREC.PCYCOUNT = 0; /* Zero to count*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS29"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS29

// Insert row      - VPOITM05
Function PC0VS30()
   /* ------------------------------------------------------------*/
   /* Select unique for vPOITM05.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SE"; /* Function = select unique*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for vPOITM05.*/
    /* ------------------------------------------------------------*/

    PCYREC.PCYFUNC = "A "; /* Function = insert*/
    try
      call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
      return;
    end

  else
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0       /* Normal return code*/
     && PC0VM003.PC0VMOPT == "B"       /* blank*/
     && PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* redirect*/
      converseLib.validationFailed(62); /* item already exists*/
      PC0VM003.XXXPRCNM = "PC0VS30";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS30"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS30

// Insert row  - VPOSIZ01
Function PC0VS31()
   /* ------------------------------------------------------------*/
   /* This process creates the po size row.*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* Initialize PO size rec*/

  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* PO item sequence number*/

   /* ------------------------------------------------------------*/
   /* Move quantities to proper size quantities.*/
   /* ------------------------------------------------------------*/
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ01] = PC0VW03.PC0VWQ01[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ01] = PC0VW03.PC0VWQ01[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ02] = PC0VW03.PC0VWQ02[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ02] = PC0VW03.PC0VWQ02[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ03] = PC0VW03.PC0VWQ03[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ03] = PC0VW03.PC0VWQ03[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ04] = PC0VW03.PC0VWQ04[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ04] = PC0VW03.PC0VWQ04[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ05] = PC0VW03.PC0VWQ05[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ05] = PC0VW03.PC0VWQ05[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ06] = PC0VW03.PC0VWQ06[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ06] = PC0VW03.PC0VWQ06[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ07] = PC0VW03.PC0VWQ07[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ07] = PC0VW03.PC0VWQ07[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ08] = PC0VW03.PC0VWQ08[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ08] = PC0VW03.PC0VWQ08[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ09] = PC0VW03.PC0VWQ09[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ09] = PC0VW03.PC0VWQ09[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ10] = PC0VW03.PC0VWQ10[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ10] = PC0VW03.PC0VWQ10[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ11] = PC0VW03.PC0VWQ11[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ11] = PC0VW03.PC0VWQ11[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ12] = PC0VW03.PC0VWQ12[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ12] = PC0VW03.PC0VWQ12[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ13] = PC0VW03.PC0VWQ13[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ13] = PC0VW03.PC0VWQ13[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ14] = PC0VW03.PC0VWQ14[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ14] = PC0VW03.PC0VWQ14[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ15] = PC0VW03.PC0VWQ15[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ15] = PC0VW03.PC0VWQ15[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ16] = PC0VW03.PC0VWQ16[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ16] = PC0VW03.PC0VWQ16[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ17] = PC0VW03.PC0VWQ17[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ17] = PC0VW03.PC0VWQ17[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ18] = PC0VW03.PC0VWQ18[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ18] = PC0VW03.PC0VWQ18[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ19] = PC0VW03.PC0VWQ19[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ19] = PC0VW03.PC0VWQ19[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ20] = PC0VW03.PC0VWQ20[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ20] = PC0VW03.PC0VWQ20[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ21] = PC0VW03.PC0VWQ21[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ21] = PC0VW03.PC0VWQ21[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ22] = PC0VW03.PC0VWQ22[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ22] = PC0VW03.PC0VWQ22[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ23] = PC0VW03.PC0VWQ23[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ23] = PC0VW03.PC0VWQ23[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ24] = PC0VW03.PC0VWQ24[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ24] = PC0VW03.PC0VWQ24[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ25] = PC0VW03.PC0VWQ25[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ25] = PC0VW03.PC0VWQ25[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ26] = PC0VW03.PC0VWQ26[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ26] = PC0VW03.PC0VWQ26[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ27] = PC0VW03.PC0VWQ27[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ27] = PC0VW03.PC0VWQ27[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ28] = PC0VW03.PC0VWQ28[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ28] = PC0VW03.PC0VWQ28[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ29] = PC0VW03.PC0VWQ29[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ29] = PC0VW03.PC0VWQ29[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ30] = PC0VW03.PC0VWQ30[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ30] = PC0VW03.PC0VWQ30[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ31] = PC0VW03.PC0VWQ31[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ31] = PC0VW03.PC0VWQ31[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ32] = PC0VW03.PC0VWQ32[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ32] = PC0VW03.PC0VWQ32[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ33] = PC0VW03.PC0VWQ33[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ33] = PC0VW03.PC0VWQ33[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ34] = PC0VW03.PC0VWQ34[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ34] = PC0VW03.PC0VWQ34[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ35] = PC0VW03.PC0VWQ35[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ35] = PC0VW03.PC0VWQ35[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ36] = PC0VW03.PC0VWQ36[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ36] = PC0VW03.PC0VWQ36[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ37] = PC0VW03.PC0VWQ37[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ37] = PC0VW03.PC0VWQ37[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ38] = PC0VW03.PC0VWQ38[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ38] = PC0VW03.PC0VWQ38[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ39] = PC0VW03.PC0VWQ39[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ39] = PC0VW03.PC0VWQ39[PC0VWIXM];
  VPOSIZ02.PC7ORIGQ[PC0VW-AB6SZ40] = PC0VW03.PC0VWQ40[PC0VWIXM];
  VPOSIZ02.PC7ORDEQ[PC0VW-AB6SZ40] = PC0VW03.PC0VWQ40[PC0VWIXM];

  VPOSIZ02.ZFC-CRCY-CD = " ";

   /* ------------------------------------------------------------*/
   /* Now get the FOB data loaded to the size update record.*/
   /* Note:*/
    /* If blank redirect the pc0vw05 holds the FOB price templete*/
      /* which could contain override prices from other items.*/
    /* If not blank redirect the FOB prices will be obtained from*/
      /* the factory system. No override prices from other items*/
      /* since this is a new P.O. being created.*/
   /* ------------------------------------------------------------*/

  if (PC0VM003.PC0VMOPT == "B" /* If blank redirect*/
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "R")
    PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
    while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
      if (VPOSIZ02.PC7ORDEQ[PC0VWIX3] != 0) /* If quantity for size*/
        VPOSIZ02.PC7FOBFL[PC0VWIX3] = PC0VW05.PC7FOBFL[PC0VWIX3];
        VPOSIZ02.FY4FOBPR[PC0VWIX3] = PC0VW05.FY4FOBPR[PC0VWIX3];
      else
        VPOSIZ02.PC7FOBFL[PC0VWIX3] = "N";
      end
      PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
    end

  else /* ==>                         If not*/
                                   /* blank redirect*/
    /* ------------------------------------------------------------*/
     /* Get the unit of measure from the style/color table.*/
    /* ------------------------------------------------------------*/
    set PG2REC empty; /* Init record*/
    PG2REC.XGPCD = "03"; /* GPC code*/
    PG2REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
    PG2REC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
    PG2REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
    XSPG202(); /* Retrieve style*/

    /* ------------------------------------------------------------*/
     /* Get the FOB price., for new P.O.'s Item size record.*/
    /* ------------------------------------------------------------*/
    set PCOREC empty; /* Init record*/
    PCOREC.XGPCD = "03"; /* GPC code*/
    PCOREC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
    PCOREC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
    PCOREC.SY2CLRID = PC0VW03.SY2CLRID[PC0VWIXM]; /* Color*/
    PCOREC.XDMCD = PG2REC.XDMCD; /* Dimension*/
    PCOREC.XQACD = "01"; /* Quality*/
    if (VPOITM05.PC2CUXID == " ") /* ===> no customer*/
      PCOREC.PC2INSEG = "000"; /* ISEG*/
    else /* else*/
      PCOREC.PC2INSEG = VPRDCU03.PC2INSEG; /* ISEG*/
    end
    PCOREC.XUMCD = PG2REC.XUMCD; /* Unit of measure*/
    PCOREC.XPGCD = "00"; /* Package*/
    PCOREC.XSECD = PC0VW00.XSECD; /* Season code*/
    PCOREC.PCFSEYR = PC0VW00.XSNYR; /* Season year*/
    PCOREC.PC3CRDT = VGVar.currentShortGregorianDate; /* Create date*/
    if (PCOREC.PC3CRDT < 800101) /* If year < 80*/
      PCOREC.PC3CRDT = PCOREC.PC3CRDT + 20000000; /* 21st century*/
    else /* else*/
      PCOREC.PC3CRDT = PCOREC.PC3CRDT + 19000000; /* 20th century*/
    end

    XSPCS04(); /* Obtain FOB price*/

    PC0VW00.PC0VWIX3 = 1; /* Initialize index*/
    while (PC0VW00.PC0VWIX3 <= 40) /* While index <= 40*/
      VPOSIZ02.PC7FOBFL[PC0VWIX3] = "N"; /* FOB price override flag*/
      if (VPOSIZ02.PC7ORDEQ[PC0VWIX3] != 0) /* If quantity for size*/
        VPOSIZ02.FY4FOBPR[PC0VWIX3] = PCOREC.FY4FOBPR[PC0VWIX3];
      end
      PC0VW00.PC0VWIX3 = PC0VW00.PC0VWIX3 + 1; /* Increment index*/
    end
  end /* ===>    If blank redirect check*/

  VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOSIZ02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOSIZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT ROW "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS31"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOSIZ02.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOSIZ02.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKN3 = VPOSIZ02.PC6ITMNB; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS31

// Insert item audit row
Function PC0VS32()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = "03"; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID; /* Cust order nbr*/
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID; /* Nike order nbr*/
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN; /* Part char*/
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD; /* dest ctry*/
  VPOAIT02.XPRCD = VPOITM05.XPRCD; /* Product type code*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP; /* PO type*/
  VPOAIT02.PA1OANBR = 0; /* PA_ORD_ADJ_NBR*/

  PC0VSA8(); /* set o/a and c/m flags*/

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
       /* See PROG.PC.SPECS($COMMON)*/
   /* ------------------------------------------------------------*/
  if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y"
   && PC0VW02.AB6BYTYP[PC0VWIXL] == "R")
    if (VPOHDR03.PC3NISFL == "Y")
      VPOAIT02.PCJAMEND = "1";
    else
      if (VPOHDR03.PC3NISFL == "N")
        VPOAIT02.PCJAMEND = "2";
      else
        VPOAIT02.PCJAMEND = "3";
      end
    end
  else
    if (VPOHDR03.PC3NISFL == "Y")
      VPOAIT02.PCJAMEND = "5";
    else
      if (VPOHDR03.PC3NISFL == "N")
        VPOAIT02.PCJAMEND = "5";
      else
        VPOAIT02.PCJAMEND = "3";
      end
    end
  end

  VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  VPOAIT02.XDSCD = VPOITM05.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD; /* Scheduler code*/

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS32"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  PC0VM003.XXXPRCNM = "PC0VS32"; /* Module identification*/
  exit stack;

end // end PC0VS32

// Insert size audit row
Function PC0VS33()
   /* ------------------------------------------------------------*/
   /* Move values to size audit record.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.XGPCD = "03"; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO; /* Item audit sequence number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOASZ02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOASZ02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOASZ02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOASZ02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOASZ02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOASZ02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOASZ02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOASZ02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN; /* Sales order*/
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOASZ02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOSIZ01.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS33"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOASZ02.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOASZ02.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKN3 = VPOASZ02.PCJSEQNO; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VM003.XXXPRCNM = "PC0VS33"; /* Module identification*/
  PC0VW00.PCWMAP = 1; /* Request entry screen*/

  exit stack;

end // end PC0VS33

// Select item cursor - VPOITM05
Function PC0VS34()
  PC0VW00.PC0VWDC1 = "N"; /* End of VPOITM05 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOITM05 with key values or wildcards for select set*/
   /* ------------------------------------------------------------*/

  VPOITM05.XGPCD = "03"; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0VW00.PO-REG-CD; /* P.O. region*/
  VPOITM05.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* P.O. number*/
  VPOITM05.YSMXDV = PC0VW01.YSMXDV[PC0VWIXA]; /* Division code*/
  VPOITM05.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style number*/
  VPOITM05.SY2CLRID = PC0VW02.SY2CLRID[PC0VWIXL]; /* Identifying color*/
  VPOITM05.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension code*/
  VPOITM05.XWHCD = PC0VW01.XWHCD[PC0VWIXA]; /* Warehouse code*/
  VPOITM05.PC2CUXID = " "; /* Customer xref ID*/
  VPOITM05.PC6STAT = "OP"; /* Item status code*/
  VPOITM05.XQACD = "01"; /* Quality*/

  if (PC0VW00.XOWCD != " ")
    VPOITM05.XOWCD = PC0VW00.XOWCD;
  else
    VPOITM05.XOWCD = PC0VW02.XOWCD[PC0VWIXL];
  end

  VPOITM05.PC2INSEG = "000"; /* Spec difference*/
  VPOITM05.XPGCD = "00"; /* Package*/
  VPOITM05.XUMCD = PG2REC.XUMCD; /* Unit of measure*/
  VPOITM05.YMTCD = "*"; /* Transport mode*/

  PCYREC.PCYFUNC = "S9"; /* Select function*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry map*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS34"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS34"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS34

// Fetch next item - VPOITM05
Function PC0VS35()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N9"; /* Fetch function*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0VW00.PC0VWDC1 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS35"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS35

// Get,add,or upd DPRODC.VPOSIZ01
Function PC0VS36()
   /* ------------------------------------------------------------*/
   /* Fetch, add, or update the VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" (PC0VW04, SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS36"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Return to show error message*/

end // end PC0VS36

// Select max - VPOAIT01
Function PC0VS37()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = "03"; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/

   /* ------------------------------------------------------------*/
   /* Select max on sequence number for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "M1"; /* Function is max for seq #*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PCYREC.PCYCOUNT = VPOAIT02.PCJSEQNO; /* Sequence # max*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -305) /* No audit sequence # max*/
        PCYREC.PCYCOUNT = 0; /* Max = 0*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS37"; /* Process name*/
  TA1REC.TA1LOC = "SELECT MAX SEQUENCE #";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request selection screen*/
  PC0VM003.XXXPRCNM = "PC0VS37";
  exit stack;

end // end PC0VS37

// Update row      - VPOITM05
Function PC0VS38()
   /* ------------------------------------------------------------*/
   /* Update row for VPOITM05.*/

   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS38"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS38"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0VW00.PC0VWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS38

// Close item cursor - VPOITM05
Function PC0VS39()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C9"; /* Close function*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0VW00.PCWMAP = 1; /* Return to entry screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS39"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0VS39"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS39

// Update control  DABUY.VSCTL001
Function PC0VS40()
   /* ------------------------------------------------------------*/
   /* Update the requested row of the table.*/
   /* ------------------------------------------------------------*/

  AB3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  /* ***************************Y2K OUT BEGIN***********************/
  /* CALL IO3600 'U ',SQLCA,AB3REC (NOMAPS,NONCSP,REPLY; /* Update table row*/
  /* ***************************Y2K OUT END*************************/
  /* ***************************Y2K IN BEGIN************************/
  try
    call "VSCTL002" ("U ", SQLCA, AB3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update table*/
  /* ***************************Y2K IN END**************************/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW DABUY.VSCTL001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCTL001"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = AB3REC.XSECD; /* Key field 1*/
  PC0VW00.PC0VWKN2 = AB3REC.XSNYR; /* Key field 2*/
  PC0VW00.PC0VWKA3 = AB3REC.PG1SC4CD; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.PCWMAP = 1; /* Request entry screen*/
  exit stack; /* Exit to display map*/

end // end PC0VS40

// Validate customer - VPRDCU01
Function PC0VS41()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* If row not found or inactive, indicate cust xref invalid.*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
       || VPRDCU03.XXXSTAT != "A")   /* or status not active*/
        converseLib.validationFailed(45); /* Cust xref invalid*/
        PC0VW00.XXXPRCNM = "PC0VS41"; /* Module identification*/
        set PC0VM003.PC2CUXID cursor, bold; /* highlight*/
      end

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VS41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODC.VPRDCU03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = VPRDCU03.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0VS41

// Select (S ) Unique    VBPLAN01
Function PC0VS42()
   /* ------------------------------------------------------------*/
   /* Select the Buy Plan table row*/
   /* ------------------------------------------------------------*/

  set AB4REC empty; /* Init buy plan rec*/
  AB4REC.SY1STNBR = PC0VW01.SY1STNBR[PC0VWIXA]; /* Style*/
  AB4REC.XDMCD = PC0VW01.XDMCD[PC0VWIXA]; /* Dimension*/
  AB4REC.XOWCD = PC0VW01.XOWCD[PC0VWIXA]; /* Owner Group*/
  AB4REC.XWHCD = PC0VW01.XWHCD[PC0VWIXA]; /* Warehouse*/
  AB4REC.XDVCD = PC0VW01.XDVCD[PC0VWIXA]; /* Division*/
  AB4REC.XSECD = PC0VW00.XSECD; /* Season code*/
  AB4REC.XSNYR = PC0VW00.XSNYR; /* Season year*/
  AB4REC.FY1FCTYC = PC0VW01.FY1FCTYC[PC0VWIXA]; /* Factory*/
  AB4REC.PC4ORTYP = PC0VW01.PC4ORTYP[PC0VWIXA]; /* PO type*/
  AB4REC.PC2CUXID = PC0VW01.PC2CUXID[PC0VWIXA]; /* Customer*/
   /* -----Y2K OUT BEGIN -----*/
   /* MOVE PC0VW00.PC0VWBUY TO AB4REC.AB3BUYMO;/* Buy month*/
   /* -----Y2K OUT END -------*/
  /* ***********************Y2K IN BEGIN***************************/
  if (PC0VW00.PC0VWBUY < 8001)
    AB4REC.AB3BUYMO = PC0VW00.PC0VWBUY + 200000;
  else
    AB4REC.AB3BUYMO = PC0VW00.PC0VWBUY + 190000;
  end
  /* ***********************Y2K IN END*****************************/
  if (PC0VM003.PC0VMOPT == "S") /* screener*/
    AB4REC.AB3BUYST = "K"; /* Status*/
  else
    if (PC0VM003.PC0VMOPT == "B") /* screener*/
      AB4REC.AB3BUYST = "T"; /* Status*/
    else
      AB4REC.AB3BUYST = "Z"; /* Status*/
    end
  end

  try
    call "IO3570" ("S ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        return; /* Return to previous process*/
      end
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC0VW00.XXXPRCNM = "PC0VS42"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS42"; /* Process name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE BUY PLAN ROW";
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = AB4REC.SY1STNBR; /* Key field 1*/
  PC0VW00.PC0VWKA2 = AB4REC.XDMCD; /* Key field 2*/
  PC0VW00.PC0VWKA3 = AB4REC.XWHCD; /* Key field 3*/
  PC0VW00.PC0VWKA4 = AB4REC.XDVCD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0VS42 ***********************/
end // end PC0VS42

// Delete the BUY PLAN  VBPLAN01
Function PC0VS43()
   /* ------------------------------------------------------------*/
   /* Delete the Buy Plan table row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3570" ("D ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC0VW00.XXXPRCNM = "PC0VS43"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS43"; /* Process name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1LOC = "DELETE BUY PLAN ROW";
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = AB4REC.SY1STNBR; /* Key field 1*/
  PC0VW00.PC0VWKA2 = AB4REC.XDMCD; /* Key field 2*/
  PC0VW00.PC0VWKA3 = AB4REC.XWHCD; /* Key field 3*/
  PC0VW00.PC0VWKA4 = AB4REC.XDVCD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0VS43 ***********************/
end // end PC0VS43

// Add the BUY PLAN     VBPLAN01
Function PC0VS44()
   /* ------------------------------------------------------------*/
   /* Add DABUY VBPLAN01 table row*/
   /* ------------------------------------------------------------*/

  AB4REC.AB3BUYST = "L"; /* Buy status of loaded*/
  AB4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AB4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3570" ("A ", SQLCA, AB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC0VW00.XXXPRCNM = "PC0VS43"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS43"; /* Process name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBPLAN01"; /* Table view name*/
  TA1REC.TA1LOC = "INSERT BUY PLAN ROW";
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = AB4REC.SY1STNBR; /* Key field 1*/
  PC0VW00.PC0VWKA2 = AB4REC.XDMCD; /* Key field 2*/
  PC0VW00.PC0VWKA3 = AB4REC.XWHCD; /* Key field 3*/
  PC0VW00.PC0VWKA4 = AB4REC.XDVCD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0VS43 ***********************/
end // end PC0VS44

// Select (S ) Unique    VPOHDR03
Function PC0VS45()
   /* ------------------------------------------------------------*/
   /* Select the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  set VPOHDR03 empty;

  VPOHDR03.XGPCD = "03"; /* ===> GPC code*/
  VPOHDR03.PO-REG-CD = PC0VW00.PO-REG-CD; /* P.O. region*/
  VPOHDR03.PC3PONBR = PC0VW02.PC3BLPO[PC0VWIXL]; /* P.O. number*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PC0VW00.XXXPRCNM = "PC0VS45"; /* Process name*/
      converseLib.validationFailed(12); /* Updated by Another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      return; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC0VW00.XXXPRCNM = "PC0VS45"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS45"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW";
  TA1REC.TA1TBLKE = VPOHDR03.VPOHDR03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0VS45 ***********************/
end // end PC0VS45

// Select unique DFCTY.VFCTY003
Function PC0VS46()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  VFCTY003.XGPCD = "03"; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS46"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0VW00.PC0VWKA1 = VFCTY003.XGPCD; /* Key field 1*/
  PC0VW00.PC0VWKA2 = VFCTY003.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.XXXPRCNM = "PC0VS46";
  exit stack;

end // end PC0VS46

// Cust/whse dir ship combination
Function PC0VS47()

   /* ------------------------------------------------------------*/
   /* Validate customer/warehouse and direct ship combination.*/
   /* ------------------------------------------------------------*/
  if (PC0VW02.AB6BYTYP[PC0VWIXL] == "P" /* pull from stock*/
   || PC0VW02.AB6BYTYP[PC0VWIXL] == "R") /* redirect*/
    return;
  end

  if (PC0VM003.PC4ORTYP == "SD" /* If screener dummy*/
   || PC0VM003.PC4ORTYP == "CD") /* or custom dummy*/
    if (PC0VM003.XWHCD == " " /* If whse not entered*/
     && PC0VM003.PC2CUXID == " ") /* and cust not entered*/
      PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
      set PC0VM003.PC2CUXID cursor, bold; /* Set cursor and highlight*/
      set PC0VM003.XWHCD bold; /* Highlight*/
      converseLib.validationFailed(134); /* Enter either whse/cust or both*/
      return;
    end
    return;
  end

  if (PC4REC.XDSCD == "1" /* If direct ship*/
   || PC4REC.XDSCD == "3") /* or direct ship/pull from stock*/

    if (PC0VM003.XWHCD != " ") /* If warehouse entered*/
      PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
      set PC0VM003.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(132); /* Warehouse not allowed*/
      return;
    end

    if (PC0VM003.PC2CUXID != " " /* If cust entered*/
     && VPRDCU03.YPCCD != "C"    /* If cust type ne 'C'*/
     && VPRDCU03.YPCCD != "S")   /* and cust type ne 'S'*/
      PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
      set PC0VM003.PC2CUXID cursor, bold; /* Highlight*/
      converseLib.validationFailed(114); /* Invalid customer type*/
      return;
    end

  end

  if (PC4REC.XDSCD == "2") /* If indirect/pitstop*/

    if (PC0VM003.XWHCD == " ") /* If no warehouse*/
      PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
      set PC0VM003.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse missing*/
    end

    if (PC0VM003.PC2CUXID == " ") /* If no customer*/
      PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
      set PC0VM003.PC2CUXID cursor, bold; /* Highlight*/
      converseLib.validationFailed(45); /* Customer missing*/
    end

  end

  if (PC4REC.XDSCD == " ") /* If ship from warehouse*/

    if (PC4REC.PC4ORTYP == "PS"  /* ; po type = 'PS'*/
     && PC0VM003.PC2CUXID != " " /* Customer xref entered*/
     && VPRDCU03.YPCCD == "C")  
      /* next sentence*/
    else

      if (PC0VM003.XWHCD == " ") /* If no warehouse*/
        PC0VW00.XXXPRCNM = "PC0VS47"; /* Module identification*/
        set PC0VM003.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Warehouse missing*/
      end

      if (PC0VM003.PC2CUXID != " " /* If customer entered*/
       && VPRDCU03.YPCCD != "N")   /* and cust type ne 'N'*/
        PC0VW00.XXXPRCNM = "PC0VS47"; /* Module id*/
        set PC0VM003.PC2CUXID cursor, bold; /* Highlight*/
        converseLib.validationFailed(114); /* Cust type invalid*/
      end

    end
  end
end // end PC0VS47

// Select unique DORDER.VORHDR01
Function PC0VS48()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0VW00.XXXPRCNM = "PC0VS48";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0VS48"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pc0vs48 ***********************/
end // end PC0VS48

// Update VBSIZE as autoloaded
Function PC0VS51()
   /* ------------------------------------------------------------*/
   /* Determine buy status and type of select for VBSIZE.*/
   /* ------------------------------------------------------------*/
  set AB6REC empty; /* Init VBSIZE record*/
  if (PC0VM001.PC0VMOPT == "B") /* If blank T-shirts*/
    AB6REC.AB3BUYST = "T"; /* Ready to autoload*/
    PC0VW04.PC0VWFN2 = "3"; /* Type of select for IO*/
  else
    if (PC0VM001.PC0VMOPT == "S") /* If screened shirts*/
      AB6REC.OP1PARTN = PC0VW02.OP1PARTN[PC0VWIXL]; /* s.o.*/
      AB6REC.OP1CUOID = PC0VW02.OP1CUOID[PC0VWIXL]; /**/
      AB6REC.OP1NORID = PC0VW02.OP1NORID[PC0VWIXL]; /**/
      AB6REC.AB3BUYST = "K"; /* Ready to autoload*/
      PC0VW04.PC0VWFN2 = "2"; /* Type of select for IO*/
    end
  end

   /* ------------------------------------------------------------*/
   /* IO to select and open DABUY.VBSIZE01*/
   /* we are trying to see if there are any rows left in*/
   /* vbsize that still need to be "loaded", but we will*/
   /* skip any that have no quantity.*/
   /* ------------------------------------------------------------*/
  PC0VW04.PC0VWFN1 = "S"; /* Type of select for IO*/
  PC0VS09(); /* Open cursor VBSIZE01*/

  PC0VW04.PC0VWFN1 = "N"; /* Type of select for IO*/
  PC0VS10(); /* Get first VBSIZE01 row*/

  while (AB6REC.AB6BUYSQ[1] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[2] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[3] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[4] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[5] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[6] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[7] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[8] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[9] == 0  /* no quantities on this row*/
   && AB6REC.AB6BUYSQ[10] == 0 /* no quantities on this row*/
   && VAGen_SQLCODE == 0) /* still more rows*/
    PC0VS10(); /* Get next VBSIZE01 row*/
  end

  if (VAGen_SQLCODE == 100)
    PC0VS42(); /* Select unique VBPLAN*/
    if (VAGen_SQLCODE == 100)
              /* next sentence*/
    else
      PC0VS43(); /* Delete VBPLAN*/
      PC0VS44(); /* Add VBPLAN with 'L'*/
    end
  end

  PC0VW04.PC0VWFN1 = "C"; /* Type of select for IO*/
  PC0VS11();
                                   /* Close cursor VBSIZE01 row*/
end // end PC0VS51

// obtain product region
Function PC0VS52()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  set TABREC empty;
  set SQLCA empty;
  TABREC.SQLCAREC = SQLCA.SQLCAREC;

  call "TA0800" (TABREC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/
  SQLCA.SQLCAREC = TABREC.SQLCAREC;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    return; /* Return to previous process*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear map*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0 &&  /* Row found*/
  TAB-RTN-CD != 0)                
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TABREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  if (SQLCA.VAGen_SQLCODE == 0)
    TA1REC.TA1TYPE = "DA  "; /* Type of error*/
  else
    TA1REC.TA1TYPE = TAB-RTN-CD;
  end
  TA1REC.TA1PGMNM = "PC0VS52"; /* Process name*/
  TA1REC.TA1LOC = "SELECT THEATER OF OPER  ";
  TA1REC.TA1DBASE = "TA0800  "; /* Data base name*/
  TA1REC.TA1TBLVU = "        "; /* Table view name*/
  PC0VW00.TA1TBLKE = " "; /* Initialize work key*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0VW00.XXXPRCNM = "PC0VS52";
  exit stack;

end // end PC0VS52

// Select unique Dprodc.vpovfy01
Function PC0VS53()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOVFY02 empty; /* Row storage area*/

  VPOVFY02.PCFBUYMO = PC0VW00.PC0VWPMO; /* buy month*/
  VPOVFY02.XSECD = PC0VW00.XSECD; /* sesn code*/
  VPOVFY02.PCFSEYR = PC0VW00.XSNYR; /* sesn year*/
  VPOVFY02.PO-REG-CD = "01";
  VPOVFY02.XXXSTAT = "A"; /* rec status*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOVFY02" ("SA", SQLCA, VPOVFY02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PC0VM003 initial;
      set PC0VM003.PC0VWPID cursor, bold;
      PC0VW00.XXXPRCNM = "PC0VS53"; /* Module identification*/
      PCWREC.XXXMSGNO = 482; /* Indicate updated by another*/

      return; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0VW00.XXXPRCNM = "PC0VS53"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY02"; /* Table view name*/
  PC0VW00.PC0VWKA1 = PC0VW00.PC0VWPMO; /* key field 1*/
  PC0VW00.PC0VWKA2 = PC0VW00.XSECD; /* key field 2*/
  PC0VW00.PC0VWKN3 = PC0VW00.XSNYR; /* sesn year*/
  TA1REC.TA1TBLKE = PC0VW00.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0VS53 ***********************/
end // end PC0VS53

// load chg memo and oa memo flag
Function PC0VSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0VM001.XXXPRCNM = "PC0VSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0vSA8 ***********************/
end // end PC0VSA8

// Select (S7) Set/Open  VPOITM05
Function PC0VSB1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0VW00.XXXPRCNM = "PC0VSB1"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0VM002 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0VSB1 ***********************/
end // end PC0VSB1

// Fetch  (N7) Next row  VPOITM05
Function PC0VSB2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0VW00.PC0VWDC1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0VW00.XXXPRCNM = "PC0VSB2"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0VSB2 ***********************/
end // end PC0VSB2

// Close  (N7) Set       VPOITM05
Function PC0VSB3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM05" ("C7", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC0VW00.XXXPRCNM = "PC0VSB3"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0VSB3 ***********************/
end // end PC0VSB3

// Select (S ) Unique    VPOSIZ01
Function PC0VSB6()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0VW00.XXXPRCNM = "PC0VSB6"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0VM002 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0VW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0VSB6 ***********************/
end // end PC0VSB6

// Calc. "Balance To Ship"
Function XPPC020()
   /* ------------------------------------------------------------*/

                        /* X P P C 0 2 0*/
                       /* ---------------*/

       /* This process group will be called to obtain the*/
    /* remaining balance to ship for a given item.  The*/
    /* values returned to the calling program will contain*/
    /* accumulated values down to a size array level, in PC5REC.*/
    /* ----->(ie: Size( 1 - 40 ).*/

      /* The Balance To Ship array fields are calculated from*/
   /* three accummulated size(i) array totals by accessing the*/
   /* Transportation and Product Order D.B. systems.*/

    /* If successful, the PC5REC will contain 7 array and 7 total*/
    /* fields which are related to " Balance to Ship "*/

    /* Note: 1. Each array field has an occurance of 40.*/
    /* Note: 2. The "Balance To Ship" will never be negative.*/
             /* This subroutine forces zeros in negative cases.*/

   /* changed 9/22/92 chaert.  Add mode of transportation to PC5REC*/
   /* and use in all selects.*/

   /* **** ---------------   --------   -------------------- *****/
   /* **** Balance to Ship = On Order - (Shipped + Received) *****/
   /* **** ---------------   --------   -------------------- *****/

    /* PC5REC.PC5TBALC      =  Total "Balance to Ship"*/
    /* PC5REC.PC5BALC array =  "Balance to Ship"*/

    /* PC5REC.PC5TORDR      =  Total "On Order QTYs"*/
    /* PC5REC.PC5ORDR array =  "On Order QTYs"*/
                            /* w/ status in ("OP","CL","FC","NC")*/

    /* PC5REC.PC5TSHIP      =  Total "Shipped QTYs"*/
    /* PC5REC.PC5SHIP array =  "Shipped QTYs"*/
                            /* w/ status in ("IT","CC")*/
                            /* -- includes 'er' & 'cr' if*/
                               /* pc5erfl set to 'y'*/
    /* PC5REC.PC5erfl       =  move a 'y' if you want  the*/
                            /* shipment total to include*/
                            /* status of ('er','cr')*/
    /* PC5REC.PC5yerfl      =  set to 'y' if shipments found*/
                            /* w/ status in ("er","cr")*/

    /* PC5REC.PC5TRV10      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV10 array=  "Received QTYs"*/
                            /* w/ status in ("10")*/

   /* **** ------------------------------------------------- *****/
   /* **** the following fields are also available for use:*****/
   /* **** ------------------------------------------------- *****/

    /* PC5REC.PC5TSRCV      =  Total "Shipped and Received QTYs"*/
    /* PC5REC.PC5SRCV array =  "Shipped and recieved QTYs"*/
                            /* w/ status in ("RC")*/

    /* PC5REC.PC5TRECV      =  Total "Received QTYs"*/
    /* PC5REC.PC5RECV array =  "Received QTYs"*/
                            /* w/ status in ("10","11","13")*/

    /* PC5REC.PC5TRV12      =  Total "Received QTYs"*/
    /* PC5REC.PC5RCV12 array=  "Received QTYs"*/
                            /* w/ status in ("12")*/
                                          /* --> receiving error*/

   /* ***                                                     ****/
   /* ******************* REQUIRED PASS DATA *********************/
   /* ***                                                     ****/

   /* ** The following records must be added to your*/
      /* application record list:*/

    /* PC5REC, VPOITM04, VPOSIZ02, VFYPO002, VCPLHDJ4, TSOREC, and TSHREC*/
    /* and TS5REC*/

   /* ** The following fields must be moved to the PC5REC:*/
      /* use a "%GET" command to get/copy these fields.*/


   /* SET PC5REC EMPTY    ;===>initialize record*/

   /* MOVE PC??W??.XGPCD TO PC5REC.XGPCD     ;===>GPC Code*/
   /* MOVE PC??W??.PC3PONBR TO PC5REC.PC3PONBR;===>P.O. Number*/
   /* MOVE PC??W??.PC-ITM-SEQ-NBR TO PC5REC.PC-ITM-SEQ-NBR;===>Seq Nbr*/
   /* MOVE 'y'           TO PC5REC.pc5erfl    ;==> incl. hard errs*/
                                           /* ==> default to 'n'*/

   /* ----------------------------------------------------------*/
   /* PERFORM XPPC020;===> subroutine to calc. "Balance to Ship"*/
   /* ----------------------------------------------------------*/

    /* Any bad DB2 return codes will be handled by the*/
    /* executed statement groups.*/

    /* - If a  negative SQL Code is incountered, an EZEFLO*/
        /* will be performed and the process name where*/
        /* it occurred will be placed in PC5REC.XXXPRCNM.*/


                        /* X P P C 0 2 0*/
                       /* ---------------*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC5REC.PC5TSHIP = 0; /* ===> Init Shipped  QTYs Total*/
  PC5REC.PC5TSRCV = 0; /* ===> Init Shipped & Received QTY*/
                                   /* Total*/
  PC5REC.PC5TRECV = 0; /* ===> Init Receipt Total status 10,12*/
  PC5REC.PC5TRV10 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 10*/
  PC5REC.PC5TRV12 = 0; /* ===> Init Receipt QTYs Total status*/
                                   /* 12*/
  PC5REC.PC5TORDR = 0; /* ===> Init On-order QTYs Total*/
  PC5REC.PC5TBALC = 0; /* ===> Init Balance to Ship QTY Total*/

  move 0 to PC5REC.PC5SHIP[1] for all; /* ===> Init Shipped QTYs array*/
  move 0 to PC5REC.PC5SRCV[1] for all; /* ===> Init Shipped & Received QTYs*/
                                   /* array*/
  move 0 to PC5REC.PC5RECV[1] for all; /* ===> Init Receipt QTYs array status 10,12*/
  move 0 to PC5REC.PC5RCV10[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 10*/
  move 0 to PC5REC.PC5RCV12[1] for all; /* ===> Init Receipt QTYs array status*/
                                   /* 12*/
  move 0 to PC5REC.PC5ORDR[1] for all; /* ===> Init On-order QTYs array*/
  move 0 to PC5REC.PC5BALC[1] for all; /* ===> Init Balance to Ship QTY array*/

  PC5REC.PC5YERFL = "N"; /* ===> init hard ship error flag*/

   /* ------------------------------------------------------------*/
   /* Set up to calculate all the quantities necessary to*/
   /* Calculate the remaining balance of QTYs still left to ship.*/
   /* These three calls will use the Transportation access key*/
   /* of (GPC, Product Key, and Destination Key) and accumulate*/
   /* QTY totals on a size level.*/
   /* ------------------------------------------------------------*/

  XPPC021(); /* ===> get Shipment QTYs from VCPLIT01*/

  XPPC022(); /* ===> get Receipt QTYs  from VFYPO002*/

  XPPC023(); /* ===> get On Order QTYs from VPOSIZ02*/


   /* ------------------------------------------------------------*/
   /* Calc. the remaining balance of QTYs still left to ship*/
   /* on a size level.*/

   /* Note:  Balance To Ship = On Order - (Shipped + Received)*/

   /* ------------------------------------------------------------*/

  PC5REC.PC5WIXT = 1;

  while (PC5REC.PC5WIXT <= 40)


    /* ------------------------------------------------------------*/
    /* ==> On Order  size QTYs  (on size level w/ status "OP")*/
    /* ==> Shipped   size QTYs  (on size level w/ status "IT","CC")*/
    /* ==> Received size QTYs  (on size level w/ status "10")*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5WORD = PC5REC.PC5ORDR[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WSHP = PC5REC.PC5SHIP[PC5WIXT]; /* ==> W.S*/
    PC5REC.PC5WRCV = PC5REC.PC5RCV10[PC5WIXT]; /* ==> W.S*/

    PC5REC.PC5WSUM = PC5REC.PC5WSHP + PC5REC.PC5WRCV;

    /* ------------------------------------------------------------*/
    /* ===> Balance To Ship = On Order - (Shipped + Received)*/
    /* ------------------------------------------------------------*/

    PC5REC.PC5BALC[PC5WIXT] = PC5REC.PC5WORD - PC5REC.PC5WSUM;

    if (PC5REC.PC5BALC[PC5WIXT] < 0) /* ==> balance is negative*/
      PC5REC.PC5BALC[PC5WIXT] = 0; /* ===> force to zero*/
    end

    PC5REC.PC5TBALC = PC5REC.PC5TBALC + PC5REC.PC5BALC[PC5WIXT];

    PC5REC.PC5WIXT = PC5REC.PC5WIXT + 1;

  end

   /* **                                                        ***/
   /* ********************** End of XPPC020 ***********************/
end // end XPPC020

//*** RECORD=FYTREC ****
// ************************************************************
// *
// * passing record for fy146d - Default Mode of transportation
// *
// *   This record must have a total record length of 2500 and
// *   will require modification when Wfy146d is changed.
// *
// *   Functions: determine the ymt mode code
// *
// *           Send   : XGP-GPC-CD
// *                    fy-fcty-cd
// *                    country code
// *           Receive: fy146d-RETURN-CODE
// *                    ymt-mode-code
// *
// *   RETURN CODE values:
// *
// *                    Function Successful           0
// *                    bad pass info                 1
// *                    factory not found             2
// *                    Other db2 error               3
// *
// *
// * PCA408   GREDDY 02/10/98  Added fields Po type, customer
// *                           xref and po region code
// ***********************************************************
// *
// **********************
Record FYTREC type basicRecord
  5 FYTREC-PASS-RECORD FYTREC-PASS-RECORD ; 
    10 XGPCD XGPCD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 YMTCD YMTCD ; 
    10 FYTREC-RETURN-CODE FYTREC-RETURN-CODE ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC2CUXID PC2CUXID ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 * char(2478) ; 
end // end FYTREC

//*** RECORD=PC0VW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0VW00 type basicRecord
  3 XXXPRCNM XXXPRCNM ; 
  3 XXXTSLEN XXXTSLEN ; 
  3 TA5TSQIX TA5TSQIX ; 
  3 XXXTSPAG XXXTSPAG ; 
  3 PCWMAP PCWMAP ; 
  3 PO-REG-CD PO-REG-CD ; 
  3 PC0VWSWR PC0VWSWR ; 
  3 PC0VWSEL PC0VWSEL ; 
  3 PC0VWDC1 PC0VWDC1 ; 
  3 PC0VWDC2 PC0VWDC2 ; 
  3 PC0VWUPD PC0VWUPD ; 
  3 PC0VWIX1 PC0VWIX1 ; 
  3 PC0VWIX2 PC0VWIX2 ; 
  3 PC0VWIX3 PC0VWIX3 ; 
  3 PC0VWIX4 PC0VWIX4 ; 
  3 PC0VWIXT PC0VWIXT ; 
  3 PC0VWIXA PC0VWIXA ; 
  3 PC0VWIXL PC0VWIXL ; 
  3 PC0VWIXM PC0VWIXM ; 
  3 PC0VWSID PC0VWSID ; 
  3 PC0VWSZZ PC0VWSZZ ; 
    4 PC0VWSZS PC0VWSZS [40] ; 
  3 SY5SZID SY5SZID [40] ; 
  3 PC0VW-AB6SZGRP PC0VW-AB6SZGRP ; 
    4 PC0VW-AB6SZ01 PC0VW-AB6SZ01 ; 
    4 PC0VW-AB6SZ02 PC0VW-AB6SZ02 ; 
    4 PC0VW-AB6SZ03 PC0VW-AB6SZ03 ; 
    4 PC0VW-AB6SZ04 PC0VW-AB6SZ04 ; 
    4 PC0VW-AB6SZ05 PC0VW-AB6SZ05 ; 
    4 PC0VW-AB6SZ06 PC0VW-AB6SZ06 ; 
    4 PC0VW-AB6SZ07 PC0VW-AB6SZ07 ; 
    4 PC0VW-AB6SZ08 PC0VW-AB6SZ08 ; 
    4 PC0VW-AB6SZ09 PC0VW-AB6SZ09 ; 
    4 PC0VW-AB6SZ10 PC0VW-AB6SZ10 ; 
    4 PC0VW-AB6SZ11 PC0VW-AB6SZ11 ; 
    4 PC0VW-AB6SZ12 PC0VW-AB6SZ12 ; 
    4 PC0VW-AB6SZ13 PC0VW-AB6SZ13 ; 
    4 PC0VW-AB6SZ14 PC0VW-AB6SZ14 ; 
    4 PC0VW-AB6SZ15 PC0VW-AB6SZ15 ; 
    4 PC0VW-AB6SZ16 PC0VW-AB6SZ16 ; 
    4 PC0VW-AB6SZ17 PC0VW-AB6SZ17 ; 
    4 PC0VW-AB6SZ18 PC0VW-AB6SZ18 ; 
    4 PC0VW-AB6SZ19 PC0VW-AB6SZ19 ; 
    4 PC0VW-AB6SZ20 PC0VW-AB6SZ20 ; 
    4 PC0VW-AB6SZ21 PC0VW-AB6SZ21 ; 
    4 PC0VW-AB6SZ22 PC0VW-AB6SZ22 ; 
    4 PC0VW-AB6SZ23 PC0VW-AB6SZ23 ; 
    4 PC0VW-AB6SZ24 PC0VW-AB6SZ24 ; 
    4 PC0VW-AB6SZ25 PC0VW-AB6SZ25 ; 
    4 PC0VW-AB6SZ26 PC0VW-AB6SZ26 ; 
    4 PC0VW-AB6SZ27 PC0VW-AB6SZ27 ; 
    4 PC0VW-AB6SZ28 PC0VW-AB6SZ28 ; 
    4 PC0VW-AB6SZ29 PC0VW-AB6SZ29 ; 
    4 PC0VW-AB6SZ30 PC0VW-AB6SZ30 ; 
    4 PC0VW-AB6SZ31 PC0VW-AB6SZ31 ; 
    4 PC0VW-AB6SZ32 PC0VW-AB6SZ32 ; 
    4 PC0VW-AB6SZ33 PC0VW-AB6SZ33 ; 
    4 PC0VW-AB6SZ34 PC0VW-AB6SZ34 ; 
    4 PC0VW-AB6SZ35 PC0VW-AB6SZ35 ; 
    4 PC0VW-AB6SZ36 PC0VW-AB6SZ36 ; 
    4 PC0VW-AB6SZ37 PC0VW-AB6SZ37 ; 
    4 PC0VW-AB6SZ38 PC0VW-AB6SZ38 ; 
    4 PC0VW-AB6SZ39 PC0VW-AB6SZ39 ; 
    4 PC0VW-AB6SZ40 PC0VW-AB6SZ40 ; 
  3 PC0VWSZA PC0VWSZA ; 
    4 PC0VWSIZ PC0VWSIZ [40] ; 
  3 PC0VWBMO PC0VWBMO ; 
    4 * num(3) ; 
    4 PC0VWPCY PC0VWPCY ; 
    4 * num(2) ; 
  3 PC0VWBUY PC0VWBUY ; 
    4 PC0VWPYR PC0VWPYR ; 
    4 PC0VWPMO PC0VWPMO ; 
  3 PC0VWETS PC0VWETS ; 
    4 PC0VWMO PC0VWMO ; 
    4 PC0VWDA PC0VWDA ; 
    4 PC0VWYR PC0VWYR ; 
  3 PC0VWCTM PC0VWCTM ; 
    4 PC0VWWHH PC0VWWHH ; 
    4 PC0VWMM PC0VWMM ; 
  3 PC0VWPOD PC0VWPOD ; 
    4 PC0VWSYR PC0VWSYR ; 
      5 PC0VWCC PC0VWCC ; 
      5 PC0VWYY PC0VWYY ; 
    4 PC0VWM1 PC0VWM1 ; 
    4 PC0VWM2 PC0VWM2 ; 
  3 PC0VWPID PC0VWPID ; 
    4 PC0VWSEC PC0VWSEC ; 
    4 PC0VWD1 PC0VWD1 ; 
    4 PC0VWMM1 PC0VWMM1 ; 
    4 PC0VWD2 PC0VWD2 ; 
    4 PC0VWMM2 PC0VWMM2 ; 
    4 PC0VWD3 PC0VWD3 ; 
    4 FY1FCTYC FY1FCTYC ; 
  3 PC3POIDT PC3POIDT ; 
  3 PC4ORTYP PC4ORTYP ; 
  3 PC2CUXID PC2CUXID ; 
  3 XWHCD XWHCD ; 
  3 AB6PACKQ AB6PACKQ ; 
  3 SY2CLRID SY2CLRID ; 
  3 AB6XSTYN AB6XSTYN ; 
  3 AB6XCOLR AB6XCOLR ; 
  3 AB6XFCTY AB6XFCTY ; 
  3 AB6BYTYP AB6BYTYP ; 
  3 AB6XWHCD AB6XWHCD ; 
  3 PC3PONBR PC3PONBR ; 
  3 OP1PARTN OP1PARTN ; 
  3 OP1CUOID OP1CUOID ; 
  3 OP1NORID OP1NORID ; 
  3 XSECD XSECD ; 
  3 XSNYR XSNYR ; 
  3 PC0VWXSF PC0VWXSF ; 
  3 PC0VWORG PC0VWORG ; 
    4 PC0VWORD PC0VWORD [40] ; 
  3 XOWKEY XOWKEY ; 
    4 PC0VWXWH PC0VWXWH ; 
    4 PC0VWXOW PC0VWXOW ; 
  3 XOWCD XOWCD ; 
  3 XWHOWNGF XWHOWNGF ; 
  3 PC0VWKEY PC0VWKEY ; 
    4 PC0VWKY1 PC0VWKY1 ; 
    4 PC0VWKY2 PC0VWKY2 ; 
  3 TA1TBLKE TA1TBLKE ; 
    4 PC0VWKA1 PC0VWKA1 ; 
      5 PC0VWKN1 PC0VWKN1 ; 
      5 * char(1) ; 
    4 PC0VWKA2 PC0VWKA2 ; 
      5 PC0VWKN2 PC0VWKN2 ; 
      5 * char(1) ; 
    4 PC0VWKA3 PC0VWKA3 ; 
      5 PC0VWKN3 PC0VWKN3 ; 
      5 * char(1) ; 
    4 PC0VWKA4 PC0VWKA4 ; 
      5 PC0VWKN4 PC0VWKN4 ; 
      5 * char(1) ; 
  3 PC0VWDT1 PC0VWDT1 ; 
    4 PC0VWDD PC0VWDD ; 
    4 PC0VWCC1 PC0VWCC1 ; 
    4 PC0VWBM PC0VWBM ; 
      5 PC0VWYY1 PC0VWYY1 ; 
      5 PC0VWBMM1 PC0VWBMM1 ; 
  3 PC0VSNYR PC0VSNYR ; 
    4 PC0VSESN PC0VSESN ; 
    4 PC0VSNCC PC0VSNCC ; 
    4 PC0VSNYY PC0VSNYY ; 
end // end PC0VW00

//*** RECORD=PC0VW01 ****
// ********************* STYLE ARRAY **************************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/25/89   JNEWMA   NEW RECORD.
// 02/10/98   DRAMSe   Changed occurs clause to 3000 from 2000
// ***********************
Record PC0VW01 type basicRecord
  10 PC0VW1GP PC0VW1GP [3000] ; 
    15 SY1STNBR SY1STNBR ; 
    15 XDMCD XDMCD ; 
    15 XOWCD XOWCD ; 
    15 XWHCD XWHCD ; 
    15 XDVCD XDVCD ; 
    15 YSMXDV YSMXDV ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC2CUXID PC2CUXID ; 
end // end PC0VW01

//*** RECORD=PC0VW02 ****
// ********************* Size ARRAY **************************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/25/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0VW02 type basicRecord
  5 PC0VW2GP PC0VW2GP [800] ; 
    10 PC0VWSEL PC0VWSEL ; 
    10 SY2CLRID SY2CLRID ; 
      15 PC0VWQTY PC0VWQTY ; 
    10 XOWCD XOWCD ; 
    10 PC3BLPO PC3BLPO ; 
    10 AB6XFCTY AB6XFCTY ; 
    10 AB6XSTYN AB6XSTYN ; 
    10 AB6XCOLR AB6XCOLR ; 
    10 IN7STNBR IN7STNBR ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 AB6BYTYP AB6BYTYP ; 
    10 AB6XWHCD AB6XWHCD ; 
    10 AB6PACKQ AB6PACKQ ; 
    10 PC0VWAIX PC0VWAIX ; 
end // end PC0VW02

//*** RECORD=PC0VW03 ****
// ********** MAP PAGE STORAGE FOR PC0VM003 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/25/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0VW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0VW3GP PC0VW3GP [12] ; 
    10 PC0VWSEL PC0VWSEL ; 
    10 SY2CLRID SY2CLRID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 PC0VWORG PC0VWORG ; 
      15 PC0VWQ01 PC0VWQ01 ; 
      15 PC0VWQ02 PC0VWQ02 ; 
      15 PC0VWQ03 PC0VWQ03 ; 
      15 PC0VWQ04 PC0VWQ04 ; 
      15 PC0VWQ05 PC0VWQ05 ; 
      15 PC0VWQ06 PC0VWQ06 ; 
      15 PC0VWQ07 PC0VWQ07 ; 
      15 PC0VWQ08 PC0VWQ08 ; 
      15 PC0VWQ09 PC0VWQ09 ; 
      15 PC0VWQ10 PC0VWQ10 ; 
      15 PC0VWQ11 PC0VWQ11 ; 
      15 PC0VWQ12 PC0VWQ12 ; 
      15 PC0VWQ13 PC0VWQ13 ; 
      15 PC0VWQ14 PC0VWQ14 ; 
      15 PC0VWQ15 PC0VWQ15 ; 
      15 PC0VWQ16 PC0VWQ16 ; 
      15 PC0VWQ17 PC0VWQ17 ; 
      15 PC0VWQ18 PC0VWQ18 ; 
      15 PC0VWQ19 PC0VWQ19 ; 
      15 PC0VWQ20 PC0VWQ20 ; 
      15 PC0VWQ21 PC0VWQ21 ; 
      15 PC0VWQ22 PC0VWQ22 ; 
      15 PC0VWQ23 PC0VWQ23 ; 
      15 PC0VWQ24 PC0VWQ24 ; 
      15 PC0VWQ25 PC0VWQ25 ; 
      15 PC0VWQ26 PC0VWQ26 ; 
      15 PC0VWQ27 PC0VWQ27 ; 
      15 PC0VWQ28 PC0VWQ28 ; 
      15 PC0VWQ29 PC0VWQ29 ; 
      15 PC0VWQ30 PC0VWQ30 ; 
      15 PC0VWQ31 PC0VWQ31 ; 
      15 PC0VWQ32 PC0VWQ32 ; 
      15 PC0VWQ33 PC0VWQ33 ; 
      15 PC0VWQ34 PC0VWQ34 ; 
      15 PC0VWQ35 PC0VWQ35 ; 
      15 PC0VWQ36 PC0VWQ36 ; 
      15 PC0VWQ37 PC0VWQ37 ; 
      15 PC0VWQ38 PC0VWQ38 ; 
      15 PC0VWQ39 PC0VWQ39 ; 
      15 PC0VWQ40 PC0VWQ40 ; 
    10 PC0VWST PC0VWST ; 
    10 PC0VWPRC PC0VWPRC ; 
end // end PC0VW03

//*** RECORD=PC0VW04 ****
// ********** FUNCTION VARIABLE FOR CALL TO IO MODS ***********
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/25/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0VW04 type basicRecord
  5 PC0VWFNC PC0VWFNC ; 
    10 PC0VWFN1 PC0VWFN1 ; 
    10 PC0VWFN2 PC0VWFN2 ; 
end // end PC0VW04

//*** RECORD=PC0VW05 ****
// ** COPY OF PRODUCTION ORDER DESTINATION SIZE PLAN TABLE ****
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 10/20/88   jnewma   New record.
// ***********************
Record PC0VW05 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC0VWFIL PC0VWFIL [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0VW05

//*** RECORD=PCNREC ****
// Return code for call to in9040 from pc0v
//   in9040 create stock xfers for blank-tee shirts
// **********************
Record PCNREC type basicRecord
  10 PCNRETCD PCNRETCD ; 
end // end PCNREC

// 01 group level
DataItem FYTREC-PASS-RECORD char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem FYTREC-RETURN-CODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0VSESN num(2)  {
  sign = none
}
end

DataItem PC0VSNCC num(2)  {
  sign = none
}
end

DataItem PC0VSNYR num(6)  {
  sign = none
}
end

DataItem PC0VSNYY num(2)  {
  sign = none
}
end

// Size index 1
DataItem PC0VW-AB6SZ01 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 2
DataItem PC0VW-AB6SZ02 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 3
DataItem PC0VW-AB6SZ03 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 4
DataItem PC0VW-AB6SZ04 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 5
DataItem PC0VW-AB6SZ05 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 6
DataItem PC0VW-AB6SZ06 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 7
DataItem PC0VW-AB6SZ07 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 8
DataItem PC0VW-AB6SZ08 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 9
DataItem PC0VW-AB6SZ09 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ10 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ11 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ12 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ13 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ14 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ15 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ16 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ17 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ18 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ19 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ20 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ21 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ22 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ23 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ24 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ25 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ26 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ27 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ28 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ29 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ30 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ31 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ32 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ33 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ34 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ35 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ36 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ37 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ38 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ39 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index 10
DataItem PC0VW-AB6SZ40 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Group of sizes
DataItem PC0VW-AB6SZGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style array row
DataItem PC0VW1GP char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page array line
DataItem PC0VW2GP char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page array line
DataItem PC0VW3GP char(183)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index reference to style array
DataItem PC0VWAIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0VWBM num(4)  {
  sign = none
}
end

DataItem PC0VWBMM1 num(2)  {
  sign = none
}
end

// PC_BUY_MO       "Re-formatted"
DataItem PC0VWBMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy Month, Format YYMM
DataItem PC0VWBUY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PC0VWCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0VWCC1 num(2)  {
  sign = none
}
end

// Change time
DataItem PC0VWCTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID dash 1
DataItem PC0VWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 2
DataItem PC0VWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 3
DataItem PC0VWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS day
DataItem PC0VWDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of first cursor flag
DataItem PC0VWDC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of second cursor flag
DataItem PC0VWDC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0VWDD num(2)  {
  sign = none
}
end

DataItem PC0VWDT1 num(8)  {
  sign = none
}
end

// PC_EST_HDT
DataItem PC0VWETS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_ON_ORD_QTY
DataItem PC0VWFIL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type of function
DataItem PC0VWFN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of function
DataItem PC0VWFN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function for IO mod to perform
DataItem PC0VWFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array index 1
DataItem PC0VWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index 2
DataItem PC0VWIX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index 3
DataItem PC0VWIX3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index 4
DataItem PC0VWIX4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style array index
DataItem PC0VWIXA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map page/line index
DataItem PC0VWIXL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map line index
DataItem PC0VWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for temp index
DataItem PC0VWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key char
DataItem PC0VWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0VWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0VWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0VWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for CSP table access
DataItem PC0VWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0VWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0VWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0VWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0VWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First field of key
DataItem PC0VWKY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second field of key
DataItem PC0VWKY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0VWM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0VWM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minutes
DataItem PC0VWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0VWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0VWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS month
DataItem PC0VWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// On order qty to process
DataItem PC0VWORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Group for on order qty
DataItem PC0VWORG char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month century & year
DataItem PC0VWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted for map
DataItem PC0VWPID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buy month month
DataItem PC0VWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID from DB
DataItem PC0VWPOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fob price
DataItem PC0VWPRC num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// buy month year
DataItem PC0VWPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st size quantity
DataItem PC0VWQ01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 2nd size quantity
DataItem PC0VWQ02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 3rd size quantity
DataItem PC0VWQ03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 4th size quantity
DataItem PC0VWQ04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 5th size quantity
DataItem PC0VWQ05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 6th size quantity
DataItem PC0VWQ06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 7th size quantity
DataItem PC0VWQ07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 8th size quantity
DataItem PC0VWQ08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 9th size quantity
DataItem PC0VWQ09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ14 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ15 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ16 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ17 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ18 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ19 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ20 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ21 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ22 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ23 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ24 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ25 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ26 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ27 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ28 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ29 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ30 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ31 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ32 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ33 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ34 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ35 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ36 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ37 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ38 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ39 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// 10th size quantity
DataItem PC0VWQ40 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// number of colors - numeric
DataItem PC0VWQTY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO season code
DataItem PC0VWSEC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map selection field
DataItem PC0VWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size index
DataItem PC0VWSID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size description display flag
DataItem PC0VWSIZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total color quantity
DataItem PC0VWST num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Request for data flag
DataItem PC0VWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID season year
DataItem PC0VWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size desc display array
DataItem PC0VWSZA char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage size index
DataItem PC0VWSZS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size index storage array
DataItem PC0VWSZZ char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item updated flag
DataItem PC0VWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours
DataItem PC0VWWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Owner Group code
DataItem PC0VWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of season table flag
DataItem PC0VWXSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse code
DataItem PC0VWXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS year
DataItem PC0VWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year
DataItem PC0VWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0VWYY1 num(2)  {
  sign = none
}
end

// Return code
DataItem PCNRETCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

