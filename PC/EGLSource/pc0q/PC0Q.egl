package pc0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0Q ****
//   This application will allow the user to enter selection
// criteria for inquiry on either P.O. header or P.O. item
// audits.
// 
//   The user may inquire on P.O. item audits by entering an
// 'I' in the selection field along with the selection
// criteria.  After the edits have been passed, they will be
// transferred to PC0Y where they can view the selected rows.
// 
//   The user may inquire on P.O. header audits by entering an
// 'H' in the selection field along with the selection
// criteria.  After the edits have been passed, they will be
// transferred to PC0W where they can view the selected rows.
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
// 06/30/89   JNEWMA         New application.
// 08/25/89   JNEWMA         Security now checks CAILVL(GPC)
// 08/29/90   CHAERT         Add Dimension to ftwr selections.
// 09/27/90   lsutto         allow gpc 07 access
// 12/26/90   lsutto         add owner group to screens
// 02/22/93   GAMEN          Move map nbr to caitem for pf1
// 06/03/97   PHARWO         PCA367 - PPR PROJECT, PO VIEWS
// 07/07/97   jniese         PCA367 - PPR corrections
// 11/13/97   oricha         Y2K modifications:  ezedtel now
//                           replaces ezedte in pc0q500. added
//                           century level to pc0qw00.pc0qwdte
//                           for year calc.
// 03/16/98   jniese         PCA999 - Change to use DRDA
// *********************
Program PC0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  PC0QW00 PC0QW00; // record
  PC0QW01 PC0QW01; // record
  PC4REC PC4REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOREG01 VPOREG01; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YOATBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL; // table
  use XDMTBL; // table
  use PC0QM.PC0QM001,  // forms
      PC0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC0Q001; /* Special Initialization*/

    PC0Q001: PC0Q001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC0Q002; /* Converse main process*/
    PC0Q002: PC0Q002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0Q002; /* Converse Detail Schedule List*/


  end // end main
end // end PC0Q

// Special Initialization
Function PC0Q001()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "01"
   && COMMAREA.CAILVL[1] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0QM001.XXXPRCNM = "PC0Q001";
  end

  if (PCWREC.XGPCD == "02"
   && COMMAREA.CAILVL[2] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0QM001.XXXPRCNM = "PC0Q001";
  end

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CAILVL[3] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0QM001.XXXPRCNM = "PC0Q001";
  end

  if (PCWREC.XGPCD == "07"
   && COMMAREA.CAILVL[7] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0QM001.XXXPRCNM = "PC0Q001";
  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  set PC0QW00 empty; /* Initialize working storage*/
  set PC0QW01 empty; /* Initialize map 001 storage area*/
  set PC0QM001 initial; /* M001 input/output*/
  set PC0QM001.PC0QMLIT invisible; /* Darken PO TYPE literal*/
  set PCYREC empty; /* Function,count,& date range for IO*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/

  PC0QW01.XDSCD = "*"; /* Direct ship code*/
  PC0QW00.XXXPRCNM = "PC0Q"; /* Module identification*/
  if (PCWREC.CAFROMAP[1] == "PC0Q") /* If selection data exists*/
    PC0QW01.PC0QW1GP = PCWREC.PCWUSER1; /* Selection data*/
  else
    PC0QW01.XGPCD = PCWREC.XGPCD; /* Move GPC code to screen*/
    if (PCWREC.XGPCD in XGPTBL.XGPCD)
      PC0QW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end /* Description*/
    if (PCWREC.XGPCD == "02") /* If footwear*/
      PC0QW01.SY2CLRID = "00 "; /* Default color to '00 '*/
    end

    /* ------------------------------------------------------------*/
     /* Initialize change dates.*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Initialize date record*/
    TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate; /* Current date*/
    TA2REC.TA2GRTYP = "E"; /* Type is YYMMDD*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg frmats*/
    PC0QS01(); /* Convert date*/
    PC0QW01.ZZZCHGDT[2] = TA2REC.TA2GRGAN; /* TO date for map MMDDYY*/
    PC0QW01.ZZZSDT[2] = TA2REC.TA2GRGGN; /* Save CCYYMMDD date*/
    TA2REC.TA2DYAOD = -31; /* Subtract 31 from TO date*/
    PC0QS01(); /* Convert date*/
    PC0QW01.ZZZCHGDT[1] = TA2REC.TA2GRGAN; /* FROM date for map*/
    PC0QW01.ZZZSDT[1] = TA2REC.TA2GRGGN; /* Save CCYYMMDD date*/

  end
  PCWREC.CAFROMAP[1] = " "; /* Init application ID 1*/
  PCWREC.PCWUSER1 = " "; /* Init application user area 1*/
end // end PC0Q001

// Audit inquiry selection
Function PC0Q002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Q200(); /* Format and display the map*/

  PC0Q300(); /* Check attention identifier*/

  PC0Q400(); /* Reset fields to normal intensity*/

  PC0Q500(); /* Verify the entered data*/

  PC0Q600(); /* Process valid input request*/


end // end PC0Q002

// Converse selection map 001
Function PC0Q200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/
    if (converseVar.eventKey is pa2) /* If PA2*/
      converseLib.clearScreen();
       /* Reset field values*/
    else
      PC0Q210(); /* Format selection data*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0QM001.XXXPRCNM = PC0QW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0QM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0QM001.XXXPRCNM = PC0QW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0QM001 alarm; /* Indicate sound alarm*/
  end
  if (PC0QM001.XGPCD == "03")
    set PC0QM001.PC0QMDML invisible;
    set PC0QM001.XDMCD skip, invisible;
  end

  converse PC0QM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0QW00.XXXPRCNM = "PC0Q"; /* Module identification*/
  COMMAREA.CATOAP = PC0QM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0QM001.CAITEM; /* Application data*/

  PC0Q220(); /* Converse popup windows*/

end // end PC0Q200

// Format selection data of 001
Function PC0Q210()
   /* ------------------------------------------------------------*/
   /* Format the item data for map 001 display.*/
   /* ------------------------------------------------------------*/
  set PC0QM001 initial; /* Initialize map*/


  PC0QM001.PC0QMYR = PC0QW01.PC0QMYR; /* PO ID year*/
  PC0QM001.PC0QMM1 = PC0QW01.PC0QMM1; /* PO ID buy month*/
  PC0QM001.PC0QMM2 = PC0QW01.PC0QMM2; /* PO ID dlv month*/
  PC0QM001.FY1FCTYC = PC0QW01.FY1FCTYC; /* Factory code*/
  PC0QM001.PC4ORTYP = PC0QW01.PC4ORTYP; /* PO type*/
  PC0QM001.PC3PONBR = PC0QW01.PC3PONBR; /* PO number*/
  if (PC0QW01.PC0QMHIF == " ") /* If hdr/itm flag blank*/
    PC0QM001.PC0QMHIF = "I"; /* Move 'I' to flag*/
  else
    PC0QM001.PC0QMHIF = PC0QW01.PC0QMHIF; /* Hdr/itm flag*/
  end
  PC0QM001.YOACD = PC0QW01.YOACD; /* Audit type*/
  PC0QM001.SY1STNBR = PC0QW01.SY1STNBR; /* Style number*/
  PC0QM001.SY2CLRID = PC0QW01.SY2CLRID; /* Color*/
  PC0QM001.XOWCD = PC0QW01.XOWCD; /* Owner group code*/
  PC0QM001.XWHCD = PC0QW01.XWHCD; /* Warehouse code*/
  PC0QM001.PC2CUXID = PC0QW01.PC2CUXID; /* Cust xref*/
  PC0QM001.XDSCD = PC0QW01.XDSCD; /* Direct ship code*/
  PC0QM001.ZZZCHGDT[1] = PC0QW01.ZZZCHGDT[1]; /* From change date*/
  PC0QM001.ZZZCHGDT[2] = PC0QW01.ZZZCHGDT[2]; /* To change date*/

  if (PC0QW01.XGPCD == " ") /* If blank GPC code*/
    set PC0QM001.XGPCD cursor; /* Set cursor to GPC code*/
  else
    PC0QM001.XGPCD = PC0QW01.XGPCD; /* Move GPC code to screen*/
    PC0QM001.XGPDESC = PC0QW01.XGPDESC; /* Move GPC code to screen*/
    if (PCWREC.XGPCD == "02" /* If footwear*/
     && PC0QW01.PC3PONBR == 0) /* and no PO number*/
      set PC0QM001.PC0QMYR cursor; /* Set cursor to PO ID*/
    else
      set PC0QM001.PC3PONBR cursor; /* Set cursor to PO number*/
    end
  end

  if (PC0QW01.PO-REG-CD == " ") /* If blank region*/
    PC0QW01.PO-REG-CD = "01"; /* po region cd*/
  end

  if (PC0QW01.XGPCD == " ") /* If blank GPC code*/
    PC0QM001.PO-REG-CD = PC0QW01.PO-REG-CD; /* po region cd*/
  else
    PC0QS02(); /* get region desc*/
    PC0QM001.PO-REG-CD = VPOREG01.PO-REG-CD; /* po region cd*/
    PC0QM001.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po region desc*/
  end

  if (PCWREC.CAFROMAP[2] != " ") /* If AP returned from PC0W*/
    COMMAREA.CATOAP = PCWREC.CAFROMAP[2]; /* Show AP from PC0W*/
    set PC0QM001.CATOAP cursor, bold; /* Highlight*/
  end
end // end PC0Q210

// Converse pop-up windows
Function PC0Q220()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XWHCD == "?" /* IF warehouse list requested*/
   || PC0QM001.XDSCD == "?" /* or direct ship code list requested*/
   || PC0QM001.XGPCD == "?" /* or GPC code list requested*/
   || PC0QM001.YOACD == "?" /* or audit code list requested*/
   || PC0QM001.XDMCD == "?") /* or dimension code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0QW00.XXXPRCNM = "PC0Q400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XGPCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " GPC"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0QM001.XGPCD = PC0QW01.XGPCD; /* Restore prior code*/
    else
      PC0QM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0QM001.XGPCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of audit types.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.YOACD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XGPCD = PC0QM001.XGPCD; /* GPC code*/
    XX0XW02.XX0XWHDR = " AUDIT TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYOA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0QM001.YOACD = PC0QW01.YOACD; /* Restore prior code*/
    else
      PC0QM001.YOACD = YOATBL.YOACD[XX0XWPIX]; /* Selected code*/
    end

    set PC0QM001.YOACD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XDMCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XGPCD = PC0QM001.XGPCD; /* GPC code*/
    XX0XW02.XX0XWHDR = " DIMENSION "; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0QM001.XDMCD = PC0QW01.XDMCD; /* Restore prior code*/
    else
      PC0QM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0QM001.XDMCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouses.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XWHCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0QM001.XWHCD = PC0QW01.XWHCD; /* Restore prior code*/
    else
      PC0QM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0QM001.XWHCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of direct ships.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XDSCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIRECT SHIP"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDS01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0QM001.XDSCD = PC0QW01.XDSCD; /* Restore prior code*/
    else
      PC0QM001.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0QM001.XDSCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0QW00.XXXPRCNM = "PC0Q400"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0Q220

// Check attention identifiers
Function PC0Q300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC0QM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0QW00.XXXPRCNM = "PC0Q300"; /* Module identification*/
      set PC0QM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0QM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC0QW00.XXXPRCNM = "PC0Q300"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0Q300

// Reset highlighted fields
Function PC0Q400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0QM001.XGPCD initialAttributes; /* GPC code*/
  set PC0QM001.PO-REG-CD initialAttributes; /* po region*/
  set PC0QM001.PC0QMYR initialAttributes; /* PO ID year*/
  set PC0QM001.PC0QMM1 initialAttributes; /* PO ID buy month*/
  set PC0QM001.PC0QMM2 initialAttributes; /* PO ID delivery month*/
  set PC0QM001.FY1FCTYC initialAttributes; /* Factory*/
  set PC0QM001.PC4ORTYP initialAttributes; /* PO order type*/
  set PC0QM001.PC3PONBR initialAttributes; /* PO number*/
  set PC0QM001.PC0QMHIF initialAttributes; /* Hdr/itm flag*/
  set PC0QM001.YOACD initialAttributes; /* Audit type*/
  set PC0QM001.SY1STNBR initialAttributes; /* Style*/
  set PC0QM001.SY2CLRID initialAttributes; /* Color*/
  set PC0QM001.XDMCD initialAttributes; /* Dimension*/
  set PC0QM001.XOWCD initialAttributes; /* Owner group*/
  set PC0QM001.XWHCD initialAttributes; /* Warehouse*/
  set PC0QM001.PC2CUXID initialAttributes; /* Customer*/
  set PC0QM001.XDSCD initialAttributes; /* Direct ship code*/
  set PC0QM001.ZZZCHGDT[1] initialAttributes; /* From change date*/
  set PC0QM001.ZZZCHGDT[2] initialAttributes; /* To change date*/
  set PC0QM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0QM001.CAITEM initialAttributes; /* Commarea application data*/

  if (PC0QM001.XGPCD == "02") /* If footwear*/
    set PC0QM001.PC0QMYR cursor; /* Set cursor to PO ID*/
  else /* Else*/
    set PC0QM001.PC3PONBR cursor; /* Set cursor to PO number*/
  end

end // end PC0Q400

// Verify the entered data
Function PC0Q500()
   /* ------------------------------------------------------------*/
   /* Determine if GPC code active in table & user has authority.*/
   /* ------------------------------------------------------------*/

  if (PC0QM001.XGPCD in XGPTBL.XGPCD /* GPC code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    if (PC0QM001.XGPCD == "01"
     && COMMAREA.CAILVL[1] != "Y")
      PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
      set PC0QM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(159); /* Security violation*/
    else
      if (PC0QM001.XGPCD == "02"
       && COMMAREA.CAILVL[2] != "Y")
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.XGPCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(159); /* Security violation*/
      else
        if (PC0QM001.XGPCD == "03"
         && COMMAREA.CAILVL[3] != "Y")
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.XGPCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(159); /* Security violation*/
        else
          if (PC0QM001.XGPCD == "07"
           && COMMAREA.CAILVL[7] != "Y")
            PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
            set PC0QM001.XGPCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(159); /* Security violation*/
          else
            COMMAREA.XGPCD = PC0QM001.XGPCD; /* GPC code to commarea*/
          end
        end
      end
    end
  else
    PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
    set PC0QM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* GPC code invalid*/
  end

  if (converseVar.validationMsgNum == 0) /* If no GPC code errors*/
    /* ------------------------------------------------------------*/
     /* Validate TO change date.*/
    /* ------------------------------------------------------------*/

    set TA2REC empty; /* Initialize date record*/
    TA2REC.TA2GRGAN = PC0QM001.ZZZCHGDT[2]; /* To change date*/
    TA2REC.TA2GRTYP = "A"; /* Type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
    PC0QS01(); /* Validate date*/
    if (TA2REC.TA2RTNCD != 0)
      PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
      set PC0QM001.ZZZCHGDT[2] cursor, bold; /* Highlight*/
      converseLib.validationFailed(38); /* Invalid date*/
    else
      PC0QW01.ZZZSDT[2] = TA2REC.TA2GRGGN; /* Save formatted date*/
   /* ------------ Y2K OUT BEGIN -------------*/
     /* MOVE EZEDTE TO PC0QW00.PC0QWDTE;         /* Current date*/
     /* IF TA2REC.TA2GRGEN GT PC0QW00.PC0QWDTE;  /* If To date > current*/
   /* ------------ Y2K OUT END ---------------*/
   /* ------------ Y2K IN  BEGIN -------------*/
      PC0QW00.PC0QWDCY = VGVar.currentGregorianDate; /* Current date*/
      if (TA2REC.TA2GRGGN > PC0QW00.PC0QWDCY) /* If To date > current*/
   /* ------------ Y2K IN END -- -------------*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.ZZZCHGDT[2] cursor, bold; /* Highlight*/
        converseLib.validationFailed(141); /* Date cannot be > current*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate FROM change date.*/
    /* ------------------------------------------------------------*/

   /* ------------ Y2K IN begin --------------*/
    set TA2REC empty; /* Initialize date record*/
   /* ------------ Y2K IN END -- -------------*/

    TA2REC.TA2GRGA = PC0QM001.ZZZCHGDT[1]; /* From change date*/
    TA2REC.TA2GRTYP = "A"; /* Type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
    PC0QS01(); /* Validate date*/
    if (TA2REC.TA2RTNCD != 0)
      PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
      set PC0QM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
      converseLib.validationFailed(38); /* Invalid date*/
    else
      PC0QW01.ZZZSDT[1] = TA2REC.TA2GRGGN; /* Save formatted date*/
   /* ------------ Y2K OUT BEGIN -------------*/
     /* MOVE EZEDTE TO PC0QW00.PC0QWDTE;         /* Current date*/
     /* IF TA2REC.TA2GRGEN GT PC0QW00.PC0QWDTE;  /* If To date > current*/
   /* ------------ Y2K OUT BEGIN -------------*/
   /* ------------ Y2K IN  BEGIN -------------*/
      PC0QW00.PC0QWDCY = VGVar.currentGregorianDate; /* Current date*/
      if (TA2REC.TA2GRGGN > PC0QW00.PC0QWDCY) /* If To date > current*/
   /* ------------ Y2K IN END ----------------*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(141); /* Date cannot be > current*/
      else
        if (converseVar.validationMsgNum != 38) /* If TO date valid*/
          if (PC0QW01.ZZZSDT[1] > PC0QW01.ZZZSDT[2]) /* If From > To*/
            PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
            set PC0QM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
            converseLib.validationFailed(136); /* From > To date*/
          else
            TA2REC.TA2GRGAN = PC0QM001.ZZZCHGDT[2]; /* Fr change date*/
            TA2REC.TA2GRTYP = "A"; /* Type*/
            TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg*/
            TA2REC.TA2DYAOD = -180; /* Sub 180 from To*/
            PC0QS01(); /* Validate date*/
            if (TA2REC.TA2GRGGN > PC0QW01.ZZZSDT[1]) /* If Fr < To - 180*/
              PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
              set PC0QM001.ZZZCHGDT[1] cursor, bold; /* Highlight*/
              converseLib.validationFailed(135); /* From < To - 180*/
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if direct ship in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.XDSCD != "*") /* If direct ship entered*/
      if (PC0QM001.PC0QMHIF == "H") /* If H was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.XDSCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(170); /* Direct ship invalid with H*/
      else
        if (PC0QM001.XDSCD in XDSTBL.XDSCD /* Direct ship in table*/
         && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        else
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.XDSCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(208); /* Direct ship invalid*/
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* Determine that cust xref is entered and valid.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.PC2CUXID != " " /* Cust xref is entered*/
     && PC0QM001.PC0QMHIF == "H") /* and H was selected*/
      PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
      set PC0QM001.PC2CUXID cursor, bold; /* Highlight*/
      converseLib.validationFailed(170); /* Cust xref invalid with H*/
    else
      if (PC0QM001.PC2CUXID != " ") /* Cust xref is entered*/
        PC0Q520(); /* Validate customer*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if owner grp in table*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.XOWCD != " ") /* If owner grp entered*/
      if (PC0QM001.PC0QMHIF == "H") /* if H was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
        set PC0QM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(170); /* owner grp invalid with H*/
      else
        if (PC0QM001.XOWCD in XOWTBL.XOWCD) /* Owner grp in table*/
           /* do nuthin'*/
        else
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.XOWCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(59); /* owner grp invalid*/
        end
      end
    end



    /* ------------------------------------------------------------*/
     /* Determine if warehouse in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.XWHCD != " ") /* If warehouse entered*/
      if (PC0QM001.PC0QMHIF == "H") /* if H was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
        set PC0QM001.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(170); /* Warehouse invalid with H*/
      else
        if (PC0QM001.XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
         && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        else
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.XWHCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(59); /* Warehouse invalid*/
        end
      end
    end



    /* ------------------------------------------------------------*/
     /* Validate color.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.SY2CLRID != " ") /* If color is entered*/
      if (PC0QM001.SY1STNBR == " ") /* If style not entered*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.SY2CLRID cursor, bold; /* Highlight*/
        converseLib.validationFailed(148); /* Cannot enter without style*/
      else
        if (PC0QM001.PC0QMHIF == "H") /* If H was selected*/
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
          set PC0QM001.SY2CLRID cursor, bold; /* Highlight*/
          converseLib.validationFailed(170); /* Color invalid with H*/
        else
          set PG2REC empty; /* Initialize record*/
          PG2REC.XGPCD = PC0QM001.XGPCD; /* GPC code*/
          PG2REC.SY1STNBR = PC0QM001.SY1STNBR; /* Style*/
          PG2REC.SY2CLRID = PC0QM001.SY2CLRID; /* Color*/
          if (PC0QM001.XDMCD == " ")
            PG2REC.XDMCD = "00"; /* Dimension*/
          else
            PG2REC.XDMCD = PC0QM001.XDMCD; /* Dimension*/
          end
          XSPG202(); /* Validate style/color*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            if (PC0QM001.XGPCD == "03")
              converseLib.validationFailed(52); /* Invalid style/color*/
            else
              converseLib.validationFailed(197); /* Invalid style/color/dim*/
              set PC0QM001.XDMCD cursor, bold; /* Highlight*/
            end
            PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
            set PC0QM001.SY2CLRID cursor, bold; /* Highlight color*/
          end
        end
      end
    else
      if (PC0QM001.XGPCD == "02" /* If apparrel*/
       && PC0QM001.PC0QMHIF == "I") /* and I was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.SY2CLRID cursor, bold; /* Highlight*/
        converseLib.validationFailed(52); /* Must be entered for 02*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if dimension in table.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.XDMCD != " ") /* If dimension entered*/
      if (PC0QM001.PC0QMHIF == "H") /* if H was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module ident*/
        set PC0QM001.XDMCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(170); /* Dimension invalid with H*/
      else
        if (PC0QM001.XDMCD in XDMTBL.XDMCD) /* Dimension in table*/

        else
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.XDMCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(53); /* Dimension invalid*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate style.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.SY1STNBR == " ") /* If style not entered*/
      if (PC0QM001.XGPCD == "02" /* If footwear*/
       && PC0QM001.PC0QMHIF == "I") /* If I was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.SY1STNBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(52); /* Must be entered for 02*/
      end
    else
      if (PC0QM001.PC0QMHIF == "H") /* If H was selected*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module idententification*/
        set PC0QM001.SY1STNBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(170); /* Style invalid with H*/
      else
        PG2REC.XGPCD = PC0QM001.XGPCD; /* GPC code*/
        PG2REC.SY1STNBR = PC0QM001.SY1STNBR; /* Style*/
        XSPG201(); /* Validate style*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(52); /* Invalid style*/
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.SY1STNBR cursor, bold; /* Highlight style*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate audit type.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.YOACD != " ") /* If audit type entered*/
      if (PC0QM001.YOACD in YOATBL.YOACD /* Audit type in table*/
       && YOATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.YOACD cursor, bold; /* Highlight*/
        converseLib.validationFailed(139); /* Audit type invalid*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate hdr/item flag.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.PC0QMHIF != "I" /* If hdr/itm ne I*/
     && PC0QM001.PC0QMHIF != "H") /* & hdr/itm ne H*/
      converseLib.validationFailed(128); /* Invalid selection*/
      PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
      set PC0QM001.PC0QMHIF cursor, bold; /* Highlight style*/
    end

    /* ------------------------------------------------------------*/
     /* Validate PO number.*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.PC3PONBR == 0) /* IF PO number not entered*/

      if (PC0QM001.XGPCD != "02") /* and not footwear*/
        converseLib.validationFailed(35); /* PO number must be entered*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC3PONBR cursor, bold; /* Highlight*/
      end

    else /* ===> validate P.O. ID fields and P.O. number not entered*/

      if (PC0QM001.PC0QMM1 != " "  /* If PO ID entered*/
       || PC0QM001.PC4ORTYP != " " /* or If Order type*/
       || PC0QM001.FY1FCTYC != " ") /* or If factory entered*/
        converseLib.validationFailed(158); /* Cannot enter both PO ID & #*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        set PC0QM001.PC0QMM1 bold; /* Highlight*/
        set PC0QM001.PC0QMM2 bold; /* Highlight*/
        set PC0QM001.PC4ORTYP bold; /* Highlight*/
        set PC0QM001.FY1FCTYC bold; /* Highlight*/
        set PC0QM001.PC3PONBR bold; /* Highlight*/
      end
    end /* ===> P.O. number entered? check*/

    if (PC0QM001.PC0QMM1 != " " /* If PO ID entered*/
     && PC0QM001.PC4ORTYP != " "
     && PC0QM001.FY1FCTYC != " ")

      PC0Q505(); /* select po header*/

      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(111); /* po doesn't exist*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        set PC0QM001.PC0QMM1 bold; /* Highlight*/
        set PC0QM001.PC0QMM2 bold; /* Highlight*/
        set PC0QM001.PC4ORTYP bold; /* Highlight*/
        set PC0QM001.FY1FCTYC bold; /* Highlight*/
      end

      if (SQLCA.VAGen_SQLCODE == -811)
        converseLib.validationFailed(112); /* multiple po's entered*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        set PC0QM001.PC0QMM1 bold; /* Highlight*/
        set PC0QM001.PC0QMM2 bold; /* Highlight*/
        set PC0QM001.PC4ORTYP bold; /* Highlight*/
        set PC0QM001.FY1FCTYC bold; /* Highlight*/
      end

    end /* ===> P.O. Number entered*/


    /* ------------------------------------------------------------*/
     /* Validate the P.O. ID*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.PC0QMYR > " "  /* If year > 0*/
     || PC0QM001.PC0QMM1 > " "  /* or buy month > 0*/
     || PC0QM001.PC0QMM2 > " "  /* or buy month > 0*/
     || PC0QM001.PC4ORTYP > " " /* or Order Type*/
     || PC0QM001.FY1FCTYC != " ") /* or Factory entered*/

      if (PC0QM001.XGPCD != "02") /* If not Footwear*/
        converseLib.validationFailed(162); /* PO ID not allowed for GPC*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        set PC0QM001.PC0QMM1 bold; /* Highlight*/
        set PC0QM001.PC0QMM2 bold; /* Highlight*/
        set PC0QM001.FY1FCTYC bold; /* Highlight*/
        set PC0QM001.PC4ORTYP bold; /* Highlight*/
      else

        /* ------------------------------------------------------------*/
         /* Determine that Order type   is entered and valid.*/
        /* ------------------------------------------------------------*/

        if (PC0QM001.PC4ORTYP == " ") /* or Order Type*/
          converseLib.validationFailed(110); /* PO ID or PO # required*/
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          set PC0QM001.PC4ORTYP cursor, bold; /* Highlight*/
        else

          PC0Q530(); /* ===> get order type description*/
                                   /* (abrv)*/

        end

        /* ------------------------------------------------------------*/
         /* Determine that factory code is entered and valid.*/
        /* ------------------------------------------------------------*/

        if (PC0QM001.XGPCD == "02") /* If footwear*/
          if (PC0QM001.FY1FCTYC == " ")
                                   /* If factory is blank*/
                                  /* IF PC0QM001.PC0QMM1 NE ' '       ;*/
                                   /* If PO ID entered*/
            PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
            set PC0QM001.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Factory missing*/
                 /* END ;*/
          else
            PC0Q540(); /* Validate factory*/
          end
        end

        /* ------------------------------------------------------------*/
         /* now validate the Date portion*/
        /* ------------------------------------------------------------*/

        PC0QW00.PC0QWNUM = PC0QM001.PC0QMM2; /* Redefine month*/
        if (PC0QW00.PC0QWNM1 < "0" /* If month not numeric*/
         || PC0QW00.PC0QWNM1 > "1" 
         || PC0QW00.PC0QWNM2 < "0" 
         || PC0QW00.PC0QWNM2 > "9" 
         || PC0QW00.PC0QWNUM < "01"
         || PC0QW00.PC0QWNUM > "12")
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          converseLib.validationFailed(31); /* Invalid month*/
          set PC0QM001.PC0QMM2 cursor, bold; /* Highlight*/
        end

        PC0QW00.PC0QWNUM = PC0QM001.PC0QMM1; /* Redefine month*/
        if (PC0QW00.PC0QWNM1 < "0" /* If month not numeric*/
         || PC0QW00.PC0QWNM1 > "1" 
         || PC0QW00.PC0QWNM2 < "0" 
         || PC0QW00.PC0QWNM2 > "9" 
         || PC0QW00.PC0QWNUM < "01"
         || PC0QW00.PC0QWNUM > "12")
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          converseLib.validationFailed(31); /* Invalid month*/
          set PC0QM001.PC0QMM1 cursor, bold; /* Highlight*/
        end

        PC0QW00.PC0QWNUM = PC0QM001.PC0QMYR; /* Redefine year*/
        if (PC0QW00.PC0QWNM1 < "0" /* If year not numeric*/
         || PC0QW00.PC0QWNM1 > "9" 
         || PC0QW00.PC0QWNM2 < "0" 
         || PC0QW00.PC0QWNM2 > "9")
          PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
          converseLib.validationFailed(80); /* Invalid year*/
          set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        end

      end /* ===> GPC ^= '02' check*/

    else /* ===> No P.O. ID fields entered*/
      PC0QW01.PC4ORTYP = " "; /* Blank save type*/
      PC0QM001.PC4ORTYP = " "; /* Blank map type*/
      PC0QM001.PC4ABRV = " "; /* Blank map type abbreviation*/
      if (PC0QM001.PC3PONBR == 0 /* If PO # not entered*/
       && PC0QM001.XGPCD == "02") /* and footwear*/
        converseLib.validationFailed(110); /* PO ID or PO # required*/
        PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
        set PC0QM001.PC0QMYR cursor, bold; /* Highlight*/
        set PC0QM001.PC0QMM1 bold; /* Highlight*/
        set PC0QM001.PC0QMM2 bold; /* Highlight*/
        set PC0QM001.PC4ORTYP bold; /* Highlight*/
        set PC0QM001.FY1FCTYC bold; /* Highlight*/
      end

    end /* ===> P.O. ID Fields entered check*/

  end /* If no  errors*/

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data entered*/
    PC0QW00.XXXPRCNM = "PC0Q500"; /* Module identification*/
    set PC0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PC0Q510(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC0Q500

// Select Alternate Dprodc.vpohdr
Function PC0Q505()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty;
  VPOHDR02.XGPCD = PC0QM001.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0QM001.PO-REG-CD; /* po region*/
  VPOHDR02.PC4ORTYP = PC0QM001.PC4ORTYP; /* PO type*/
  VPOHDR02.FY1FCTYC = PC0QM001.FY1FCTYC; /* factory code*/
  PC0QW00.PC0QMYR = PC0QM001.PC0QMYR; /* From year*/
  PC0QW00.PC0QMM1 = PC0QM001.PC0QMM1; /* From buy date*/
  PC0QW00.PC0QMM2 = PC0QM001.PC0QMM2; /* From delivery date*/
  PC0QW00.PC3POIDT = PC0QW00.PC0QWPOD; /* PO ID*/
  if (PC0QW00.PC0QMYR < "80") /* If year < 80*/
    PC0QW00.PC3POIDT = PC0QW00.PC3POIDT + 20000000; /* 21st century*/
  else /* Else*/
    PC0QW00.PC3POIDT = PC0QW00.PC3POIDT + 19000000; /* 20th century*/
  end
  VPOHDR02.PC3POIDT = PC0QW00.PC3POIDT;

   /* ------------------------------------------------------------*/
   /* Select unique PO ID row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("ZA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* or row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or duplicate rows*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0QW00.XXXPRCNM = "PC0Q505"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO ID DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0QW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKN2 = VPOHDR02.PC3POIDT; /* Key field 2*/
  PC0QW00.PC0QWKA3 = VPOHDR02.FY1FCTYC; /* Key field 3*/
  PC0QW00.PC0QWKA4 = VPOHDR02.PC4ORTYP; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Q505

// Save map data before converse
Function PC0Q510()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0QW01.XGPCD = PC0QM001.XGPCD; /* GPC code*/
  if (PC0QW01.XGPCD in XGPTBL.XGPCD)
    PC0QW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* Description*/
  PC0QM001.XGPDESC = PC0QW01.XGPDESC; /* GPC description*/
  PC0QW01.PO-REG-CD = PC0QM001.PO-REG-CD; /* po-reg-cd*/
  PC0QS02(); /* get region desc*/
  PC0QM001.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  PC0QW01.PC0QMYR = PC0QM001.PC0QMYR; /* From year*/
  PC0QW01.PC0QMM1 = PC0QM001.PC0QMM1; /* From buy date*/
  PC0QW01.PC0QMM2 = PC0QM001.PC0QMM2; /* From delivery date*/
  PC0QW01.FY1FCTYC = PC0QM001.FY1FCTYC; /* From factory*/
  PC0QW01.PC4ORTYP = PC0QM001.PC4ORTYP; /* PO type*/
  PC0QW01.PC3PONBR = PC0QM001.PC3PONBR; /* PO number*/
  PC0QW01.PC0QMHIF = PC0QM001.PC0QMHIF; /* HDR/ITM flag*/
  PC0QW01.YOACD = PC0QM001.YOACD; /* Audit type*/
  PC0QW01.SY1STNBR = PC0QM001.SY1STNBR; /* Style number*/
  PC0QW01.SY2CLRID = PC0QM001.SY2CLRID; /* Color*/
  PC0QW01.XDMCD = PC0QM001.XDMCD; /* dimension*/
  PC0QW01.XOWCD = PC0QM001.XOWCD; /* Owner group*/
  PC0QW01.XWHCD = PC0QM001.XWHCD; /* Warehouse*/
  PC0QW01.PC2CUXID = PC0QM001.PC2CUXID; /* Cust xref*/
  PC0QW01.XDSCD = PC0QM001.XDSCD; /* Direct ship code*/
  PC0QW01.ZZZCHGDT[1] = PC0QM001.ZZZCHGDT[1]; /* From change date*/
  PC0QW01.ZZZCHGDT[2] = PC0QM001.ZZZCHGDT[2]; /* To change date*/

  if (PC0QW01.PC0QMYR > " "
   /* If PO ID entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    PC0QW01.PC3POIDT = PC0QW01.PC0QWPOD; /* PO ID*/
    if (PC0QW01.PC0QMYR < "80") /* If year < 80*/
      PC0QW01.PC3POIDT = PC0QW01.PC3POIDT + 20000000; /* 21st century*/
    else /* Else*/
      PC0QW01.PC3POIDT = PC0QW01.PC3POIDT + 19000000; /* 20th century*/
    end
  end
end // end PC0Q510

// Validate cust xref  - tPRDCU00
Function PC0Q520()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  VPRDCU03.XGPCD = PC0QM001.XGPCD; /* GPC code*/
  VPRDCU03.PC2CUXID = PC0QM001.PC2CUXID; /* Customer ID*/

   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate cust xref invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(45); /* Cust xref invalid*/
      PC0QW00.XXXPRCNM = "PC0Q520"; /* Module identification*/
      set PC0QM001.PC2CUXID cursor, bold; /* highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0QW00.XXXPRCNM = "PC0Q520"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0QW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKA2 = VPRDCU03.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Q520

// Validate order type - VPOTYP01
Function PC0Q530()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = PC0QM001.XGPCD; /* GPC code*/
  PC4REC.PC4ORTYP = PC0QM001.PC4ORTYP; /* Order Type*/

   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PC0QM001.PC4ABRV = PC4REC.PC4ABRV;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate p.o. type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(33); /* P.O. Type invalid*/
      PC0QW00.XXXPRCNM = "PC0Q530"; /* Module identification*/
      set PC0QM001.PC4ORTYP cursor, bold; /* highlight*/
      PC0QM001.PC4ABRV = " ";
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0QW00.XXXPRCNM = "PC0Q530"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0QW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = PC4REC.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKA2 = PC4REC.PC4ORTYP; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Q530

// Validate factory code
Function PC0Q540()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  FY1REC.XGPCD = PC0QM001.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = PC0QM001.FY1FCTYC; /* Factory code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        converseLib.validationFailed(32); /* Invalid factory*/
        set PC0QM001.FY1FCTYC cursor, bold; /* Highlight*/
        PC0QM001.XXXPRCNM = "PC0Q540"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Q540"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = FY1REC.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKA2 = FY1REC.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0QW00.XXXPRCNM = "PC0Q540";
  exit stack;

end // end PC0Q540

// Process valid input request
Function PC0Q600()
   /* ------------------------------------------------------------*/
   /* Format the vpohdr02 for PO header selection*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Initialize HDR rec*/

  VPOHDR02.XGPCD = PC0QW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0QW01.PO-REG-CD; /* PO REGION CODE*/
  if (PC0QW01.PC3PONBR != 0) /* If PO number entered*/
    VPOHDR02.PC3PONBR = PC0QW01.PC3PONBR; /* PO number*/
    PCYREC.PCYFUNC = "Z"; /* Select unique*/
  else /* Else*/
    VPOHDR02.PC3POIDT = PC0QW01.PC3POIDT; /* PO ID date*/
    VPOHDR02.FY1FCTYC = PC0QW01.FY1FCTYC; /* Factory code*/
    VPOHDR02.PC4ORTYP = PC0QW01.PC4ORTYP; /* PO type*/
    PCYREC.PCYFUNC = "ZA"; /* Select alternate*/
  end

   /* ------------------------------------------------------------*/
   /* Select PO header & display error if not found or duplicate*/
   /* ------------------------------------------------------------*/

  PC0Q610(); /* Select PO header*/

   /* ------------------------------------------------------------*/
   /* Select count on audit records & display error if count = 0*/
   /* ------------------------------------------------------------*/

  if (PC0QW01.PC0QMHIF == "H") /* If header audit selected*/

    /* ------------------------------------------------------------*/
     /* Format the PCYREC and PCIREC for PO header audit count*/
    /* ------------------------------------------------------------*/

    set VPOAHD02 empty; /* Initialize AHD rec*/

    VPOAHD02.XGPCD = PC0QW01.XGPCD; /* GPC code*/
    VPOAHD02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
    VPOAHD02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
    PCYREC.PCYFRDT = PC0QW01.ZZZSDT[1]; /* From change date*/
    PCYREC.PCYTODT = PC0QW01.ZZZSDT[2]; /* To change date*/
    PCYREC.PCYFUNC = "ZC"; /* Select count*/

    /* ------------------------------------------------------------*/
     /* Select count on header audit & display error if count = 0*/
    /* ------------------------------------------------------------*/

    PC0Q620(); /* Select PO header audit count*/

    COMMAREA.CATOAP = "PC0W"; /* Transfer to PC0W*/

  else

    /* ------------------------------------------------------------*/
     /* Format the PCYREC and PCJREC for PO item audit count*/
    /* ------------------------------------------------------------*/

    if (PC0QM001.SY1STNBR == " ") /* If style not entered*/
      set VPOAIT02 empty; /* Initialize AIT rec*/

      VPOAIT02.XGPCD = PC0QW01.XGPCD; /* GPC code*/
      VPOAIT02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
      VPOAIT02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
      PCYREC.PCYFRDT = PC0QW01.ZZZSDT[1]; /* From change date*/
      PCYREC.PCYTODT = PC0QW01.ZZZSDT[2]; /* To change date*/
      PCYREC.PCYFUNC = "QD"; /* Select count*/

      /* ------------------------------------------------------------*/
       /* Select count item audit & display error if count = 0 or > 1*/
      /* ------------------------------------------------------------*/

      PC0Q630(); /* Select PO item audit count*/

    end

    COMMAREA.CATOAP = "PC0Y"; /* Transfer to PC0Y*/

  end

   /* ------------------------------------------------------------*/
   /* Format the PCWREC for transfer to requested application*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0QW01.XGPCD; /* GPC code*/
  COMMAREA.XGPCD = PC0QW01.XGPCD; /* GPC code*/
  PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  PCWREC.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  PCWREC.PCFSECD = VPOHDR02.PCFSECD; /* Season code*/
  PCWREC.PC3POIDT = VPOHDR02.PC3POIDT; /* PO ID*/
  PCWREC.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory code*/
  PCWREC.PC4ORTYP = VPOHDR02.PC4ORTYP; /* PO type*/

  if (PC0QW01.YOACD == " ") /* If blank*/
    PCWREC.YOACD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.YOACD = PC0QW01.YOACD; /* Audit type*/
  end

  if (PC0QW01.SY1STNBR == " ") /* If blank*/
    PCWREC.SY1STNBR = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.SY1STNBR = PC0QW01.SY1STNBR; /* Style*/
  end

  if (PC0QW01.SY2CLRID == " ") /* If blank*/
    PCWREC.SY2CLRID = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.SY2CLRID = PC0QW01.SY2CLRID; /* Color*/
  end

  if (PC0QW01.XDMCD == " ") /* If blank*/
    PCWREC.XDMCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XDMCD = PC0QW01.XDMCD; /* dimension*/
  end

  if (PC0QW01.XOWCD == " ") /* If blank*/
    PCWREC.XOWCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XOWCD = PC0QW01.XOWCD; /* Owner group*/
  end

  if (PC0QW01.XWHCD == " ") /* If blank*/
    PCWREC.XWHCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XWHCD = PC0QW01.XWHCD; /* Warehouse*/
  end

  if (PC0QW01.PC2CUXID == " ") /* If blank*/
    PCWREC.PC2CUXID = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.PC2CUXID = PC0QW01.PC2CUXID; /* Customer*/
  end

  PCWREC.XDSCD = PC0QW01.XDSCD; /* Direct ship code*/

  PCWREC.PCWFRDT = PC0QW01.ZZZSDT[1]; /* From change date*/
  PCWREC.PCWTODT = PC0QW01.ZZZSDT[2]; /* To change date*/

  PCWREC.CAFROMAP[1] = "PC0Q"; /* Application ID*/
  PCWREC.PCWUSER1 = PC0QW01.PC0QW1GP; /* Selection data*/

  XSPCS01(); /* Transfer*/

   /* ----------------------------------------------------------*/
    /* (per users 06-19-90) if user did not have access to pc0w*/
    /* then send message but dont fill in catoap on the screen.*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 6)
    COMMAREA.CATOAP = " ";
    PC0QM001.CATOAP = " ";
    set PC0QM001.CATOAP initialAttributes;
  end

end // end PC0Q600

// Select PO header    - VPOHDR01
Function PC0Q610()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        if (PC0QM001.PC3PONBR != 0) /* If PO number used*/
          converseLib.validationFailed(69); /* PO header not found*/
          set PC0QM001.PC3PONBR cursor, bold; /* Cursor at PO number*/
        else
          converseLib.validationFailed(111); /* PO header not found for PO ID*/
        end
        PC0QW00.XXXPRCNM = "PC0Q610"; /* Module identification*/
        exit stack; /* Display error*/
      else
        if (SQLCA.VAGen_SQLCODE == -811) /* Duplicate rows*/
          converseLib.validationFailed(112); /* Duplicate PO headers found*/
          PC0QW00.XXXPRCNM = "PC0Q610"; /* Module identification*/
          exit stack; /* Display error*/
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Q610"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKN2 = VPOHDR02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0QW00.XXXPRCNM = "PC0Q610";
  exit stack;

end // end PC0Q610

// Select count    -     VPOAHD01
Function PC0Q620()
   /* ------------------------------------------------------------*/
   /* Select count on PO header audit.*/
   /* If count = 0 return a message to the user.*/
   /* If any other error, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAHD02" (PCYREC, SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (PCYREC.PCYCOUNT == 0) /* No rows found*/
        converseLib.validationFailed(18); /* No data found*/
        PC0QW00.XXXPRCNM = "PC0Q620"; /* Module identification*/
        if (PC0QW01.PC3PONBR != 0) /* If PO number enterec*/
          set PC0QM001.PC3PONBR cursor; /* Cursor at PO number*/
        else
          set PC0QM001.PC0QMYR cursor; /* Cursor at PO ID*/
        end
        exit stack; /* Display error*/
      else
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Q620"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = VPOAHD02.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKN2 = VPOAHD02.PC3PONBR; /* Key field 2*/
  PC0QW00.PC0QWKN3 = PCYREC.PCYFRDT; /* Key field 3*/
  PC0QW00.PC0QWKN4 = PCYREC.PCYTODT; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0QW00.XXXPRCNM = "PC0Q620";
  exit stack;

end // end PC0Q620

// Select count    -     VPOAIT01
Function PC0Q630()
   /* ------------------------------------------------------------*/
   /* Select count on PO item audit.*/
   /* If count = 0  or > 1 return a message to the user.*/
   /* If any other error, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (PC0QW01.PC3PONBR != 0) /* If PO number entered*/
        set PC0QM001.PC3PONBR cursor; /* Cursor at PO number*/
      else
        set PC0QM001.PC0QMYR cursor; /* Cursor at PO ID*/
      end
      if (PCYREC.PCYCOUNT == 0) /* No rows found*/
        converseLib.validationFailed(18); /* No data found*/
        PC0QW00.XXXPRCNM = "PC0Q630"; /* Module identification*/
        exit stack; /* Display error*/
      else
        if (PCYREC.PCYCOUNT > 1) /* More than 1 row found*/
          converseLib.validationFailed(140); /* Multiples found*/
          PC0QW00.XXXPRCNM = "PC0Q630"; /* Module identification*/
          set PC0QM001.SY1STNBR cursor, bold; /* Highlight*/
          exit stack; /* Display error*/
        else
          return; /* Return to previous process*/
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Q630"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0QW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0QW00.PC0QWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0QW00.PC0QWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PC0QW00.PC0QWKN3 = PCYREC.PCYFRDT; /* Key field 3*/
  PC0QW00.PC0QWKN4 = PCYREC.PCYTODT; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0QW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0QW00.XXXPRCNM = "PC0Q630";
  exit stack;

end // end PC0Q630

// Date validation & conversion
Function PC0QS01()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0QW00.XXXPRCNM = "PC0QS01"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PC0QW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0QS01

// Select unique from VPOREG01
Function PC0QS02()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PC0QW01.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = PC0QW01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to get desc.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      set PC0QM001.PO-REG-CD normal;
      set PC0QM001.PO-REG-DESC normal;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PC0QM001.PO-REG-CD cursor, bold;
        set PC0QM001.PO-REG-DESC bold;
        PC0QM001.XXXPRCNM = "PC0QS02"; /* Module name*/
        converseLib.validationFailed(528); /* Send error msg*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0QM001.XXXPRCNM = "PC0QS02"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0QM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PC0QS02"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0QS02

// converse pop up window
Function XPYOA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YOATBL.YOACD[XX0XWCT1] != "99") /* Or end of data*/
        if (YOATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (YOATBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = YOATBL.YOACD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YOATBL.YOADESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YOATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (YOATBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD)
            XX0XM001.XX0XMCD[XX0XWCT2] = YOATBL.YOACD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = YOATBL.YOADESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YOATBL.YOACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYOA01

//*** RECORD=PC0QW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// 
// ***********************
Record PC0QW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 PC0QWNUM PC0QWNUM ; 
    15 PC0QWNM1 PC0QWNM1 ; 
    15 PC0QWNM2 PC0QWNM2 ; 
  10 PC0QWSWR PC0QWSWR ; 
  10 PC0QWDCY PC0QWDCY ; 
    15 PC0QWDCC PC0QWDCC ; 
    15 PC0QWDTE PC0QWDTE ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC0QWPOD PC0QWPOD ; 
    15 PC0QMYR PC0QMYR ; 
    15 PC0QMM1 PC0QMM1 ; 
    15 PC0QMM2 PC0QMM2 ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0QWKA1 PC0QWKA1 ; 
      20 PC0QWKN1 PC0QWKN1 ; 
      20 * char(1) ; 
    15 PC0QWKA2 PC0QWKA2 ; 
      20 PC0QWKN2 PC0QWKN2 ; 
      20 * char(1) ; 
    15 PC0QWKA3 PC0QWKA3 ; 
      20 PC0QWKN3 PC0QWKN3 ; 
      20 * char(1) ; 
    15 PC0QWKA4 PC0QWKA4 ; 
      20 PC0QWKN4 PC0QWKN4 ; 
      20 * char(1) ; 
end // end PC0QW00

//*** RECORD=PC0QW01 ****
// ******* MAP ADDRESS STORAGE FOR PC05M010 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0QW01 type basicRecord
  5 PC0QW1GP PC0QW1GP ; 
    10 PC3POIDT PC3POIDT ; 
    10 XGPCD XGPCD ; 
    10 XGPDESC XGPDESC ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PO-REG-DESC PO-REG-DESC ; 
    10 PC0QWPOD PC0QWPOD ; 
      15 PC0QMYR PC0QMYR ; 
      15 PC0QMM1 PC0QMM1 ; 
      15 PC0QMM2 PC0QMM2 ; 
    10 FY1FCTYC FY1FCTYC [2] ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC0QMHIF PC0QMHIF ; 
    10 YOACD YOACD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 XDSCD XDSCD ; 
    10 ZZZCHGDT ZZZCHGDT [2] ; 
    10 ZZZSDT ZZZSDT [2] ; 
end // end PC0QW01

DataItem PC0QMHIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID buy month
DataItem PC0QMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID delivery month
DataItem PC0QMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID year
DataItem PC0QMYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group of selection fields
DataItem PC0QW1GP char(123)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PC0QWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PC0QWDCY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work save date
DataItem PC0QWDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0QWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0QWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0QWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0QWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0QWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0QWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0QWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0QWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric byte 1 as char
DataItem PC0QWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric byte 2 as char
DataItem PC0QWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric redefine as char
DataItem PC0QWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID date
DataItem PC0QWPOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data flag
DataItem PC0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

