package pc03;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC03 ****
// ************************************************************
// *  THIS PROGRAM IS USED TO CREATE THE LETTER OF CREDIT
// *  DETAIL REPORT, LETTER OF CREDIT DETAIL SUMMARY REPORT,
// *  AND THE PRODUCTS WITH NO PRICE REPORT.
// *
// *  THE GPC CODE WILL DEFAULT ON THE TOP OF THIS SCREEN BASED
// *  UPON THE GPC ENTERED ON THE PC0A MENU. ONLY FOOTWARE AND
// *  APPAREL ARE TO BE ALLOWED AND THE USER WILL HAVE TO BE
// *  ABLE TO ADD/CHANGE FOR THAT GPC CODE.
// *
// *  THE REPORTS THAT THE USER WILL REQUEST DEPEND UPON THE
// *  PO TYPE ENTERED. FOR FOOTWARE PO TYPE "FT" IS THE ONLY
// *  TYPE THAT CAN REQUEST PRODUCTS WITH NO PRICE.  FOR
// *  APPAREL PO TYPES IN, ID, IP, IT, MD, ME, MM, AND MP ARE
// *  THE ONLY VALID TYPES.   THE DEFAULTING PO TYPES ARE
// *  "FT" FOR FOOTWEAR.
// *
// *  THE USER MUST SELECT AT LEAST ONE REPORT.
// *
// *  AFTER IT IS DETERMINED THAT THERE ARE NO ERRORS PROTECT
// *  THE FOLLOWING FIELDS      PO ID DATE
// *                            PO TYPE
// *                            EACH REPORT FLAG
// *
// *  THE USER CAN SAVE UP TO FIFTY (50) PARMS, NO TWO THE
// *  SAME.
// *
// *  IN ORDER TO SUBMIT THE REPORT THE USER WILL HIT PF9 AND
// *  TRANSFER TO TA0P TO SEND THE JCL TO THE INTERNAL READER.
// *
// *  AFTER THE JCL IS SUBMITTED CONTROL RETURNS TO THIS
// *  PROGRAM AND ALL THE ENTERABLE FIELDS WILL BE OPENED.
// *
// ************************************************************
// *   DATE           USERID          COMMENTS
// * ________        ________        ___________________
// * 09/27/89        gwitzi          new application
// * 12/05/89        JWOOD           REMOVED TARREC FROM LIST
// * 12/05/89        JWOOD           REPLACED TA0PM001
// * 07/17/90        JWOOD           REMOVED UT2REC FROM LIST
// * 08/10/90        CHAERT          change to PC03519,l/c proc
// *
// * 12/12/90        CHAERT          ADD new l/c detail program
// *                                 for apparel, PC420D. Split
// *                                 off of PC150D.
// * 10/09/91        lsutto          change implicits allowed
// *                                 to = no on appl
// * 09/07/92        lsutto          move pc03 to new L/C menu
// * 12/29/93        gamen           add theater of ops code
// *
// * 02/08/94        DHALES          EXCLUDE PO NBRS LESS THAN
// *                                 300000 FROM COUNT OF POHDR
// *
// * 03/10/94        DHALES          allow lc on 'eu' field
// *                                 office factories
// * 05/29/97        PHARWO          PCA367 - PO VIEW NAME
// *                                 CHANGES
// * 07/09/97        jniese          PCA367 - ppr corrections
// *
// * 10/16/97        GREDDY          ADDED LOGIC TO ISSUE
// *                                 LC FOR A SINGLE FACTORY
// *                                 ( FOOT WEAR ONLY )
// * 11/15/97        TTHAN1          Y2KFIX - ADD NEW ITEM
// *                                 PC03CCYY, CHANGE SIZE OF
// *                                 PC03WCY1 AND PC03WCY2
// *                                 FROM 2 TO 4, ADD NEW
// *                                 GROUP PC03WCY.  CHANGE
// *                                 PC03510.
// * 01/13/98        DRAMSE          FIX JCL SUBMISSION BUGS
// * 06/10/98        nreddy          Creating separate jcl
// *                                 tables for ftwr,apprl& eq
// * 07/21/98 PCF137 DRAMSE          Changed to use VFCTY003
// * 07/06/99 PCF198 DRAMMO          Modified to exclude FTWR
// *                                 POs of 'LP' type.
// * 01/17/01        VMATT           To exclude cancel headers
// *                                 in PC03519
// ************************************************************
// *********************
Program PC03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC03W01 PC03W01; // record
  PC03W02 PC03W02; // record
  PC03W03 PC03W03; // record
  PC03W04 PC03W04; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  VFCTY003 VFCTY003; // record
  VPOHDR02 VPOHDR02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PC03T01 {deleteAfterUse = yes}; // table
  use PC03T02 {deleteAfterUse = yes}; // table
  use PC03T03 {deleteAfterUse = yes}; // table
  use PC03T11; // table
  use PC03T22 {deleteAfterUse = yes}; // table
  use PC03T33 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use PC03M.PC03M010,  // forms
      PC03M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
       /* INITIALIZE RECORDS AND THE MAP*/
     /* ------------------------------------------------------------*/

    set PC03W01 empty; /* Clear working storage*/
    set PC03W02 empty; /* Clear jcl passing record*/
    set PCFREC empty; /* Clear p.o. verification record*/
    set PCYREC empty; /* Clear p.o. function passing record*/
    set PC2REC empty; /* Clear cust. xfer record*/
    set VPOHDR02 empty; /* Clear p.o. header record*/
    set PC4REC empty; /* Clear p.o. type record*/

    set PC03W03 empty; /* Clear Array no. one*/
    set PC03W04 empty; /* Clear Array no. two*/

    set VFCTY003 empty; /* Clear factory record*/

    set ERRSQLCA empty; /* Clear error sqlca record*/
    set SQLCA empty;

    set TA1REC empty;
    set TA2REC empty; /* Clear date record*/
    set XCTHREC empty; /* Clear user record*/
    set TA6REC empty; /* Clear jcl record*/
    set TAEREC empty; /* Clear user record*/

    set PC03M010 initial; /* Clear map*/

    set XX0XW01 empty;

     /* ----------------------------------------------------------*/
       /* INITIALIZE VALUES ON INDEXIES ETC.*/
     /* ----------------------------------------------------------*/

    PC03M010.XGPCD = PCWREC.XGPCD; /* Gpc code field*/
    if (PCWREC.XGPCD == "02") /* Footwear*/
      PC03M010.PC4ORTYP = "FT"; /* Default type*/
    end

    PC03M010.FY1FCTYC = "ALL"; /* Map factory field*/
    PC03M010.PC03MFTF = "N"; /* all ftwr fact flag*/
    PC03M010.PC03MEQF = "N"; /* all equip fact flag*/
    PC03M010.PC03MCDR = "N"; /* L/C detail flag*/
    PC03M010.PC03MDSR = "N"; /* L/C detail summ. flag*/
    PC03M010.PC03MNPR = "N"; /* Product no prices flag*/
    PC03M010.PC03MLCF = "N"; /* Issue LC Flag*/
    PC03M010.PC03MAMD = "N"; /* Start Generating Amendments "?"*/
     /* ---------> Initialize Amendment "?" map display*/
    PC03M010.PC03MASK = " "; /* Mask to ID whether Amend "?"*/
                                     /* displayed*/
    set PC03M010.PC03MAML skip, invisible; /* Hide amendment literal*/
    set PC03M010.PC03MAMD skip, invisible, noHighLight; /* Hide amendment field "?"*/

    PC03W01.PC03WLIX = 0;
    PC03W01.PC03WAIX = 0;
    PC03W01.PC03WMAX = 50;
    PC03W01.PO-REG-CD = "01";


    PC03000: PC03000();
     /* NO FLOW*/
    PC03050: PC03050();
    goto PC03050; /* program flow*/
  end // end main
end // end PC03

// CURRENT DATE
Function PC03000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC03W01.PC03WCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC03"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC03M010.XXXPRCNM = "PC03000"; /* Process name*/

    end
  end


end // end PC03000

// MAIN PROCESS TO DISPAY MAP
Function PC03050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02") /* Footware*/
    if (COMMAREA.CACLVL[2] == "Y") /* User can enter*/

      PC03080(); /* Report generation pcocess*/

    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  else
    if (PCWREC.XGPCD == "03") /* Apparel*/
      if (COMMAREA.CACLVL[3] == "Y") /* User can enter*/

        PC03080(); /* Report generation pcocess*/

      else
        PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* To application*/
        XSPCS01(); /* Exit to another application*/
        PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "MN0M"; /* To application*/
        XSPCS01(); /* Exit to another application*/
      end
    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  end


   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    PC03M010.XXXPRCNM = "PC03050"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end


end // end PC03050

// PROGRAM PROCESS CONTROL
Function PC03080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PC03200(); /* Format and display the map*/

  PC03300(); /* Check attention identifier*/

  PC03400(); /* Reset fields to normal intensity*/

  PC03500(); /* Verify the entered data*/

  PC03600(); /* Process the entered data*/


end // end PC03080

// FORMAT AND DISPLAY MAP
Function PC03200()

  if (converseVar.validationMsgNum == 0)

    /* ============== Next Sentence ============>*/

  else


    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC03M010.XXXPRCNM = "PC03200"; /* Process name*/
      PC03M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
      /* ===>*/
      PC03210(); /* ===> reset fields*/
      /* ===>*/
    end

    set PC03M010 alarm; /* Sound alarm*/

  end

  PC03M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC03W01.PC03WAIX >= 1) /* A parm. has been entered*/
    set PC03M010.PC03MCDR skip; /* Lock up*/
    set PC03M010.PC03MDSR skip; /* Lock up*/
    set PC03M010.PC03MNPR skip; /* Lock up*/
    set PC03M010.PC4ORTYP skip; /* Protect type*/
    set PC03M010.PC03MMYY skip;
    set PC03M010.PC03MDMO skip;
    set PC03M010.PC03MBMO skip;
    if (converseVar.validationMsgNum == 253) /* ===> parm entered, enter another*/
      set PC03M010.FY1FCTYC cursor; /* Factory*/
    end
  end


  if (PC03M010.XGPCD != "02")
    set PC03M010.PC03MVLC skip, invisible;
    set PC03M010.PC03MLCF skip, invisible, noHighLight;
    set PC03M010.PC03MVFT skip, invisible;
    set PC03M010.PC03MFTF skip, invisible, noHighLight;
    set PC03M010.PC03MVEQ skip, invisible;
    set PC03M010.PC03MEQF skip, invisible, noHighLight;
  end
  converse PC03M010 ;

end // end PC03200

// Format P.O. ID fields
Function PC03210()
   /* ------------------------------------------------------------*/
     /* Clear the P.O. ID fields for next round of processing*/
   /* ------------------------------------------------------------*/
   /* --*/
  PC03M010.PC4ORTYP = " ";
  PC03M010.PC4SDESC = " ";
  PC03M010.PC03MMYY = " ";
  PC03M010.PC03MDMO = " ";
  PC03M010.PC03MBMO = " ";
  PC03M010.FY1FCTYC = " ";
  PC03M010.FY1FCTSN = " ";
  PC03M010.PC03MAMD = " "; /* ===> amendment question Y/N*/
  set PC03M010.PC03MAMD skip, invisible, noHighLight; /* =>amendment question Y/N*/
  set PC03M010.PC03MAML skip, invisible; /* ===> amendment literal*/
  set PC03M010.PC03MMYY cursor;
   /* --*/
end // end PC03210

// CHECK ATTENTION IDENTIFIERS
Function PC03300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC03M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC03M010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC03M010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC03M010.XXXPRCNM = "PC03300"; /* Process name*/
    end

    set PC03M010.CATOAP cursor, bold; /* Highlight*/
    PC03M010.XXXPRCNM = "PC03300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "LC0A";
    XSPCS01();

    PC03M010.XXXPRCNM = "PC03300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC03M010.XXXPRCNM = "PC03300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC03M010.XXXPRCNM = "PC03300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PC03M010.XXXPRCNM = "PC0330A"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC03300

// RESET HIGHLIGHTED FIELDS
Function PC03400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC03M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC03M010.CAITEM initialAttributes; /* Commarea application data*/

  set PC03M010.XGPCD initialAttributes; /* Gpc code*/
  set PC03M010.FY1FCTYC initialAttributes; /* Factory code*/
  set PC03M010.PC4ORTYP initialAttributes; /* P.O. type*/
  set PC03M010.PC03MMYY initialAttributes; /* P.O. id production year*/
  set PC03M010.PC03MDMO initialAttributes; /* P.O. id del month*/
  set PC03M010.PC03MBMO initialAttributes; /* P.O. id buy month*/


  set PC03M010.PC03MCDR initialAttributes; /* L/C detail report flag*/
  set PC03M010.PC03MDSR initialAttributes; /* L/C detail summary report flag*/
  set PC03M010.PC03MNPR initialAttributes; /* Product with no prices report flag*/

  if (PC03M010.PC03MAMD == "*") /* L/C Amendment "?" Displayed*/
    set PC03M010.PC03MAMD initialAttributes; /* L/C Amendment flag "?"*/
  end


end // end PC03400

// VERIFY THE INPUT REQUEST
Function PC03500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC03M010.CAITEM > " ") /* Application data was entered*/

    set PC03M010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC03M010.XXXPRCNM = "PC03500"; /* Process name*/

  else

    if (converseVar.eventKey is enter) /* Enter key is pressed*/
      PC03510(); /* Process detail edits*/
      PC03512(); /* Process more detail edits*/
      PC03520(); /* Process parm. edits*/
    end
  end


end // end PC03500

// DO THE DETAIL EDITS
Function PC03510()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

  if (PC03M010.PC03MASK == "*") /* amendment request displayed*/

    if (PC03M010.PC03MAMD == "Y" /* Prod. no prices report requested*/
     || PC03M010.PC03MAMD == "N")
      /* ============= Next Sentence ===============>*/
    else
      set PC03M010.PC03MAMD cursor, bold; /* Highlight error*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      converseLib.validationFailed(42); /* Only y or n valid*/
    end

  end
   /* ----------------------------------------------------------*/
   /* P.O. TYPE*/
   /* ----------------------------------------------------------*/

  if (PC03M010.PC4ORTYP > " ") /* Something there*/

    if (PC03M010.XGPCD != "02"
     || PC03M010.PC4ORTYP != "LP") /* Not of Local Production type*/

      set PC4REC empty; /* Clear record*/
      PC4REC.PC4ORTYP = PC03M010.PC4ORTYP;
      PC4REC.XGPCD = PC03M010.XGPCD;


      PC03S04(); /* Call Production Order Type Table*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (PC4REC.XXXSTAT == "A") /* Active status*/
          PC03W01.PC4ORTYP = PC4REC.PC4ORTYP;
          PC03M010.PC4SDESC = PC4REC.PC4SDESC; /* Move short desc.*/
        else
          set PC03M010.PC4ORTYP cursor, bold; /* Highlight error*/
          PC03M010.PC4SDESC = " "; /* Move short desc.*/
          converseLib.validationFailed(33); /* P.O. type invalid*/
          PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
        end
      else
        set PC03M010.PC4ORTYP cursor, bold; /* Highlight error*/
        PC03M010.PC4SDESC = " "; /* Move short desc.*/
        converseLib.validationFailed(33); /* P.O. type invalid*/
        PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      end
    else /* Local Production type*/
      set PC03M010.PC4ORTYP cursor, bold; /* Highlight error*/
      PC03M010.PC4SDESC = " "; /* Move short desc.*/
      converseLib.validationFailed(33); /* P.O. type invalid*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    end
  else
    set PC03M010.PC4ORTYP cursor, bold; /* Highlight error*/
    PC03M010.PC4SDESC = " "; /* Move short desc.*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
    /* CHECK THE REPORT REQUEST FLAGS*/
   /* ------------------------------------------------------------*/

  if (PC03M010.PC03MNPR == "Y" /* Prod. no prices report requested*/
   || PC03M010.PC03MNPR == "N")
    PC03W01.PC03WNPR = PC03M010.PC03MNPR;
  else
    set PC03M010.PC03MNPR cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC03M010.PC03MDSR == "Y" /* L/C detail summ. report requested*/
   || PC03M010.PC03MDSR == "N")
    PC03W01.PC03WDSR = PC03M010.PC03MDSR;
  else
    set PC03M010.PC03MDSR cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC03M010.PC03MCDR == "Y" /* L/C detail report requested*/
   || PC03M010.PC03MCDR == "N")
    PC03W01.PC03WCDR = PC03M010.PC03MCDR;
  else
    set PC03M010.PC03MCDR cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC03M010.PC03MLCF != "Y" /* Issue LC reportfor given factory*/
   && PC03M010.PC03MLCF != "N" 
   && PC03M010.XGPCD == "02") 
    PC03W01.PC03WCDR = PC03M010.PC03MCDR;
    set PC03M010.PC03MLCF cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC03M010.PC03MCDR == "N" /* L/C detail report requested*/
   && PC03M010.PC03MDSR == "N" 
   /* L/C detail summ. report not requested*/
   && PC03M010.PC03MNPR == "N") /* Prod. no price report requested*/
    set PC03M010.PC03MCDR cursor, bold; /* Highlight error*/
    set PC03M010.PC03MDSR bold; /* Highlight error*/
    set PC03M010.PC03MNPR bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(257); /* Only y or n valid*/
  end

   /* ------------------------------------------------------------*/
   /* EQUIP/FTWR FACTORY FLAG CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC03M010.XGPCD == "02"
   && PC03M010.FY1FCTYC != "ALL")

    if (PC03M010.PC03MFTF == "N"
     && PC03M010.PC03MEQF == "N")
    else
      set PC03M010.PC03MEQF cursor, bold; /* Highlight error*/
      set PC03M010.PC03MFTF cursor, bold; /* Highlight error*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      converseLib.validationFailed(552); /* must be 'n'*/
    end
  end

  if (PC03M010.XGPCD == "02"
   && PC03M010.FY1FCTYC == "ALL")

    if (((PC03M010.PC03MFTF == "Y"
     && PC03M010.PC03MEQF == "N")
     || (PC03M010.PC03MFTF == "N"
     && PC03M010.PC03MEQF == "Y")))
    else
      set PC03M010.PC03MFTF cursor, bold; /* Highlight error*/
      set PC03M010.PC03MEQF cursor, bold; /* Highlight error*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      converseLib.validationFailed(553); /* Any one flag should be 'y'.*/
    end
  end

  if (PC03M010.PC03MFTF != "Y"
   && PC03M010.PC03MFTF != "N"
   && PC03M010.XGPCD == "02")
    set PC03M010.PC03MFTF cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

  if (PC03M010.PC03MEQF != "Y"
   && PC03M010.PC03MEQF != "N"
   && PC03M010.XGPCD == "02")
    set PC03M010.PC03MEQF cursor, bold; /* Highlight error*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    converseLib.validationFailed(42); /* Only y or n valid*/
  end

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC03M010.PC03MMYY == "  " /* Nothing there*/
   && PC03M010.PC03MBMO == "  " /* Nothing there*/
   && PC03M010.PC03MDMO == "  ") /* Nothing there*/
    set PC03M010.PC03MMYY cursor, bold; /* Highlight error*/
    converseLib.validationFailed(177); /* Date is missing*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC03M010.FY1FCTYC == " ") /* Nothing there*/

    converseLib.validationFailed(252); /* Must enter*/
    PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
    set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
    PC03W01.FY1FCTYC = " "; /* Factory code*/
    PC03W01.FY1FCTSN = " "; /* Factory name*/
    PC03M010.FY1FCTSN = " "; /* Factory name*/

  else
    if (PC03M010.FY1FCTYC == "ALL")
      PC03W01.FY1FCTYC = "ALL"; /* Factory code*/
      PC03W01.FY1FCTSN = " "; /* Factory name*/
      PC03M010.FY1FCTSN = " "; /* Factory name*/
    else
      set VFCTY003 empty; /* Clear record*/
      VFCTY003.FY1FCTYC = PC03M010.FY1FCTYC; /* Search key*/
      VFCTY003.XGPCD = PC03M010.XGPCD; /* Search key*/


      PC03S01(); /* Call factory check routine*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        if (VFCTY003.XXXSTAT == "A") /* Everything OK*/
          PC03513(); /* ===> check validity of active factory*/
        else
          converseLib.validationFailed(32); /* Invalid factory*/
          PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
          set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
          PC03W01.FY1FCTYC = " "; /* Factory code*/
          PC03W01.FY1FCTSN = " "; /* Factory name*/
          PC03M010.FY1FCTSN = " "; /* Factory name*/
        end
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
        set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC03W01.FY1FCTYC = " "; /* Factory code*/
        PC03W01.FY1FCTSN = " "; /* Factory name*/
        PC03M010.FY1FCTSN = " "; /* Factory name*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIREDFOR FOOTWEAR*/
   /* ------------------------------------------------------------*/

  if (PC03M010.XGPCD == "02") /* FOOTWEAR*/

    PC03W01.PCFSECD = " "; /* Blank out season code*/


    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC03M010.PC03MDMO == "01" /* Something there*/
     || PC03M010.PC03MDMO == "02" /* Something there*/
     || PC03M010.PC03MDMO == "03" /* Something there*/
     || PC03M010.PC03MDMO == "04" /* Something there*/
     || PC03M010.PC03MDMO == "05" /* Something there*/
     || PC03M010.PC03MDMO == "06" /* Something there*/
     || PC03M010.PC03MDMO == "07" /* Something there*/
     || PC03M010.PC03MDMO == "08" /* Something there*/
     || PC03M010.PC03MDMO == "09" /* Something there*/
     || PC03M010.PC03MDMO == "10" /* Something there*/
     || PC03M010.PC03MDMO == "11" /* Something there*/
     || PC03M010.PC03MDMO == "12") /* Something there*/

      PC03W01.PC03WDMO = PC03M010.PC03MDMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      set PC03M010.PC03MDMO cursor, bold; /* Highlight*/
      PC03W01.PC03WDMO = 00;
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC03M010.PC03MBMO == "01" /* Something there*/
     || PC03M010.PC03MBMO == "02" /* Something there*/
     || PC03M010.PC03MBMO == "03" /* Something there*/
     || PC03M010.PC03MBMO == "04" /* Something there*/
     || PC03M010.PC03MBMO == "05" /* Something there*/
     || PC03M010.PC03MBMO == "06" /* Something there*/
     || PC03M010.PC03MBMO == "07" /* Something there*/
     || PC03M010.PC03MBMO == "08" /* Something there*/
     || PC03M010.PC03MBMO == "09" /* Something there*/
     || PC03M010.PC03MBMO == "10" /* Something there*/
     || PC03M010.PC03MBMO == "11" /* Something there*/
     || PC03M010.PC03MBMO == "12") /* Something there*/

      PC03W01.PC03WBMO = PC03M010.PC03MBMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
      set PC03M010.PC03MBMO cursor, bold; /* Highlight*/
      PC03W01.PC03WBMO = 00;
    end

    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF ALL POID FIELDS ARE NUMERIC*/
      /* IF THE DATE IS VALID THE FIELDS ARE NUMERIC*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No message*/

      PC03W01.PC03WBCO = PC03M010.PC03MBMO; /* Buy month*/
      PC03W01.PC03WDCO = PC03M010.PC03MDMO; /* Del. month*/
      PC03W01.PC03WYCO = PC03M010.PC03MMYY; /* Year*/

      set TA2REC empty; /* Clear date record*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
      TA2REC.TA2GRTYP = "E"; /* Move in type*/
      TA2REC.TA2GRGE = PC03W01.PC03WCAT;

      PC03S02(); /* Set up p.o. id date*/

      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/

        PC03W01.PC03WPDT = TA2REC.TA2GRGGN; /* P.O. id date*/

      end

      if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
        converseLib.validationFailed(313); /* Invalid POID*/
        PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
        PC03W01.PC03WPDT = 0; /* P.O. id date*/
        set PC03M010.PC03MMYY cursor, bold; /* Highlight*/
        set PC03M010.PC03MBMO bold; /* Highlight*/
        set PC03M010.PC03MDMO bold; /* Highlight*/
      end
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC03M010.PC03MMYY >= "00"
       && PC03M010.PC03MMYY <= "99")
        PC03W01.PC03WMYY = PC03M010.PC03MMYY;

        /* ----------Y2K OUT BEGIN----------*/
        /* PC03W01.PC03WCY1 = PC03W01.PC03WYYY + 1;/* One year greater*/
        /* PC03W01.PC03WCY2 = PC03W01.PC03WYYY - 1;/* One year less*/
                                  /* IF PC03W01.PC03WMYY GE*/
                                   /* PC03W01.PC03WCY2/* One year less or*/
                                   /* equal*/
        /* AND PC03W01.PC03WMYY LE PC03W01.PC03WCY1;/* One yr gt or eq*/
          /* ----------Y2K OUT END------------*/
          /* ----------Y2K IN BEGIN----------*/
        PC03W01.PC03CCYY = PC03M010.PC03MMYY;
        if (PC03M010.PC03MMYY > 60)
          PC03W01.PC03CCYY = PC03W01.PC03CCYY + 1900;
        else
          PC03W01.PC03CCYY = PC03W01.PC03CCYY + 2000;
        end
        PC03W01.PC03WCY1 = PC03W01.PC03WCY + 1; /* One year greater*/
        PC03W01.PC03WCY2 = PC03W01.PC03WCY - 1; /* One year less*/
        if (PC03W01.PC03CCYY >= PC03W01.PC03WCY2 /* One year less or equal*/
         && PC03W01.PC03CCYY <= PC03W01.PC03WCY1) /* One yr gt or eq*/
          /* ----------Y2K IN END------------*/

           /* NEXT SENTENCE*/

        else
          converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
          PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
          set PC03M010.PC03MMYY cursor, bold; /* Highlight*/
          PC03W01.PC03WMYY = 00;
        end
      else
        converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
        PC03M010.XXXPRCNM = "PC03510"; /* Process name*/
        set PC03M010.PC03MMYY cursor, bold; /* Highlight*/
        PC03W01.PC03WMYY = 00;
      end
    end
  end


  if (PC03M010.XGPCD == "03") /* Apparel*/

    PC03511(); /* Apparel po id edit*/

  end


end // end PC03510

// APPAREL PO ID EDIT
Function PC03511()

   /* ----------------------------------------------------------*/
   /* P.O. ID FOR APPAREL*/
   /* ----------------------------------------------------------*/

  if (PC03M010.PC03MMYY > " " /* Something in po id year*/
   || PC03M010.PC03MBMO > " " /* Something in po id buy month*/
   || PC03M010.PC03MDMO > " " /* Something in po id delivery month*/
   || PC03M010.FY1FCTYC > " ") /* Something in po id fcty. code*/

    if (PC03M010.FY1FCTYC == "ALL") /* Default value*/

         /* NEXT SENTENCE*/

    else

      set VFCTY003 empty; /* Clear factory record*/
      VFCTY003.XGPCD = PC03M010.XGPCD; /* Gpc code*/
      VFCTY003.FY1FCTYC = PC03M010.FY1FCTYC; /* Factory code*/


      PC03S01(); /* Validate the factory code*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (VFCTY003.XXXSTAT == "A") /* Active factory*/
          PC03W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
          PC03W01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
          PC03M010.FY1FCTSN = VFCTY003.FY1FCTSN;
        end
      else
        set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC03M010.FY1FCTSN = " "; /* Factory short name*/
        converseLib.validationFailed(32); /* Factory code invalid or missimg*/
        PC03M010.XXXPRCNM = "PC03511"; /* Process name*/
      end
    end

    /* ------------------------------------------------------------*/
     /* DATE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC03M010.PC03MDMO == "01" /* Something there*/
     || PC03M010.PC03MDMO == "02" /* Something there*/
     || PC03M010.PC03MDMO == "03" /* Something there*/
     || PC03M010.PC03MDMO == "04" /* Something there*/
     || PC03M010.PC03MDMO == "05" /* Something there*/
     || PC03M010.PC03MDMO == "06" /* Something there*/
     || PC03M010.PC03MDMO == "07" /* Something there*/
     || PC03M010.PC03MDMO == "08" /* Something there*/
     || PC03M010.PC03MDMO == "09" /* Something there*/
     || PC03M010.PC03MDMO == "10" /* Something there*/
     || PC03M010.PC03MDMO == "11" /* Something there*/
     || PC03M010.PC03MDMO == "12") /* Something there*/

      PC03W01.PC03WDLM = PC03M010.PC03MDMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC03M010.XXXPRCNM = "PC03511"; /* Process name*/
      set PC03M010.PC03MDMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* BUY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC03M010.PC03MBMO == "01" /* Something there*/
     || PC03M010.PC03MBMO == "02" /* Something there*/
     || PC03M010.PC03MBMO == "03" /* Something there*/
     || PC03M010.PC03MBMO == "04" /* Something there*/
     || PC03M010.PC03MBMO == "05" /* Something there*/
     || PC03M010.PC03MBMO == "06" /* Something there*/
     || PC03M010.PC03MBMO == "07" /* Something there*/
     || PC03M010.PC03MBMO == "08" /* Something there*/
     || PC03M010.PC03MBMO == "09" /* Something there*/
     || PC03M010.PC03MBMO == "10" /* Something there*/
     || PC03M010.PC03MBMO == "11" /* Something there*/
     || PC03M010.PC03MBMO == "12") /* Something there*/

      PC03W01.PC03WBYM = PC03M010.PC03MBMO;

    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC03M010.XXXPRCNM = "PC03511"; /* Process name*/
      set PC03M010.PC03MBMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
      /* CHECK P.O. ID FOR APPAREL YEAR CODE, BUY MONTH, DEL. MONTH*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No message*/

      set PCFREC empty; /* Clear record*/
      PCFREC.PCFSECD = PC03M010.PC03MMYY; /* P.O. id season cd*/
      PC03W01.PC03WBMO = PC03M010.PC03MBMO; /* Buy month*/
      PCFREC.PCFBUYMO = PC03W01.PC03WBMO; /* Season buy month*/


      PC03S06(); /* P.O. id edit routine for apparel*/


      if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
       && PCFREC.XXXSTAT == "A")   /* Active status*/
        PC03W01.PC03WAYR = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
        PC03W01.PC03WOWY = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
        PC03W01.PCFSECD = PCFREC.PCFSECD; /* P.O. season code*/
        PC03W01.PCFSEYR = PCFREC.PCFSEYR; /* P.O. season year*/
        PC03W01.XSECD = PCFREC.XSECD; /* Season code*/
        PC03W01.PC03WPCC = PC03W01.PC03WACY; /* P.O. ID cent.*/
        PC03W01.PC03WPYR = PC03W01.PC03WAYE; /* P.O. ID year*/

        /* ------------------------------------------------------------*/
         /* DATE VALIDATION*/
        /* ------------------------------------------------------------*/

        set TA2REC empty; /* Clear date record*/
        TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
        TA2REC.TA2GRTYP = "G"; /* Move in date type*/
        TA2REC.TA2GRGGN = PC03W01.PC03WODT; /* Move in date*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

        if (TA2REC.TA2RTNCD == "0000") /* Valid date*/
          PC03W01.PC03WPDT = TA2REC.TA2GRGGN; /* PO ID date*/
        else
          set PC03M010.PC03MMYY cursor, bold; /* Highlight error*/
          set PC03M010.PC03MBMO bold; /* Highlight error*/
          set PC03M010.PC03MDMO bold; /* Highlight error*/
          converseLib.validationFailed(80); /* Invalid date*/
          PC03M010.XXXPRCNM = "PC03511"; /* Process name*/
        end
      else
        set PC03M010.PC03MMYY cursor, bold; /* Season year*/
        set PC03M010.PC03MBMO bold; /* buy month*/
        converseLib.validationFailed(192); /* P.O. ID season year/or buy month*/
                                   /* invalid*/
        PC03M010.XXXPRCNM = "PC03511"; /* Process name*/
      end
    end
  end


end // end PC03511

// process more detail edits
Function PC03512()
   /* ------------------------------------------------------------*/
   /* CHECK AND SEE IF PO ID DATE HAS A PO.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/

    set VPOHDR02 empty; /* Clear record*/
    set PCYREC empty; /* Clear record*/

    PCYREC.PCYFUNC = "SE";
    PCYREC.PCYFRDT = PC03W01.PC03WPDT; /* PO ID from date*/
    PCYREC.PCYTODT = PC03W01.PC03WPDT; /* PO ID to date*/

    if (PC03M010.FY1FCTYC == "ALL") /* Factory code*/
      VPOHDR02.FY1FCTYC = "*";
    else
      VPOHDR02.FY1FCTYC = PC03M010.FY1FCTYC;
    end

    VPOHDR02.XGPCD = PC03M010.XGPCD; /* Gpc code*/
    VPOHDR02.PO-REG-CD = PC03W01.PO-REG-CD; /* PO REGION code*/
    VPOHDR02.PCFSECD = PC03W01.PCFSECD; /* Season code*/
    VPOHDR02.PC4ORTYP = PC03M010.PC4ORTYP; /* PO type code*/
    VPOHDR02.PC3POIDT = PC03W01.PC03WPDT; /* PO ID date*/


    PC03S05(); /* Call po header*/

    if (PCYREC.PCYCOUNT == 0)
      converseLib.validationFailed(111);
      set PC03M010.PC03MMYY cursor, bold; /* Highlight*/
      set PC03M010.PC03MBMO bold; /* Highlight*/
      set PC03M010.PC03MDMO bold; /* Highlight*/
      set PC03M010.FY1FCTYC bold; /* Highlight*/
      PC03M010.XXXPRCNM = "PC03512"; /* Process name*/
    else

      PC03W01.PC03WSWT = "N";

      PC03515(); /* ====> Select set from VPOHDR02*/

      PC03516(); /* ====> Fetch from VPOHDR02*/

      while (PC03W01.PC03WSWT == "N")

        PC03519(); /* ====> Determine if L/C msg needed*/

        PC03516(); /* ====> Fetch from VPOHDR02*/

      end

      PC03517(); /* ====> Close from VPOHDR02*/

    end

  end



end // end PC03512

// validate active factory
Function PC03513()
   /* ------------------------------------------------------------*/
    /* validate the active factory entered*/
   /* ------------------------------------------------------------*/

  if (PC03M010.PC03MDSR == "Y" /* L/C detail summ. report request*/
   || PC03M010.PC03MCDR == "Y") /* L/C detail report requested*/

    if (VFCTY003.FY1FRGN == "Y")
      PC03W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
      PC03M010.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory name*/
    else /* ===> factory is a foreign factory,*/
                                   /* thus "Valid"*/
      if (VFCTY003.FY6FOCD == "EU")
        PC03W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
        PC03M010.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory name*/
      else /* ===> factory is european fcty, thus*/
                                   /* "Valid"*/
        converseLib.validationFailed(32); /* Invalid factory*/
        PC03M010.XXXPRCNM = "PC03513"; /* Process name*/
        set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC03W01.FY1FCTYC = " "; /* Factory code*/
        PC03W01.FY1FCTSN = " "; /* Factory name*/
        PC03M010.FY1FCTSN = " "; /* Factory name*/
      end
    end

  else /* ===============> L/C reports not*/
                                   /* requested*/
    PC03W01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
    PC03M010.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory name*/
  end

end // end PC03513

// Select (S2) Set       VPOHDR01
Function PC03515()
   /* ------------------------------------------------------------*/
   /* Select Set of row from the po header set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  PCYREC.PCYFUNC = "S2";

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03515 SELECT SET  P.O. HEADER ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC03M010.XXXPRCNM = "PC03515"; /* Process name*/

  exit stack;



end // end PC03515

// Fetch  (N2) Next row  VPOHDR01
Function PC03516()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the PO header set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  PCYREC.PCYFUNC = "N2";

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* EOF*/

      PC03W01.PC03WSWT = "Y"; /* ===> temp switch/cursor flag*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03516 FETCH NEXT  P.O. HEADER ROW ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC03M010.XXXPRCNM = "PC03516"; /* Process name*/

  exit stack;



end // end PC03516

// Close (C2) Set        VPOHDR01
Function PC03517()
   /* ------------------------------------------------------------*/
   /* Close Select Set of row from the PO Header set.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  PCYREC.PCYFUNC = "C2";

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03517 CLOSE  SET  P.O. HEADER ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC03M010.XXXPRCNM = "PC03517"; /* Process name*/

  exit stack;



end // end PC03517

// Validate factory, nissho flag
Function PC03519()
   /* ------------------------------------------------------------*/
   /* Select a  row from the factory table.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC03M010.FY1FCTYC == "ALL" /* if all factories selected*/
   || VPOHDR02.PC3PONBR < 300000) /* OUT OF RANGE*/
    return;
                                   /* skip this whole paragraph*/
  end

  set VFCTY003 empty; /* Clear record*/
  VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Search key*/
  VFCTY003.XGPCD = VPOHDR02.XGPCD; /* Search key*/

  PC03S01(); /* Call factory check routine*/

  if (PC03M010.PC03MDSR == "Y" /* L/C detail summ. report request*/
   || PC03M010.PC03MCDR == "Y") /* L/C detail report requested*/

    /* ------------------------------------------------------------*/
     /* check for foreign factory, if so check nissho sent flag*/
                                  /* and PO Types*/
    /* ------------------------------------------------------------*/

    if (VFCTY003.FY1FRGN == "N" /* Foreign Factory flag*/
     && VFCTY003.FY6FOCD != "EU") /* not european*/
      set PC03M010.FY1FCTYC cursor, bold; /* Highlight error*/
      converseLib.validationFailed(286); /* ===> Can't print L/C for "USA"*/
                                   /* factory*/
      PC03M010.XXXPRCNM = "PC03519"; /* Process name*/
      PC03W01.PC03WSWT = "Y"; /* ===> force EOF Cursor header*/
    else /* ==> we have a foreign factory*/


      if (VPOHDR02.PC4ORTYP != "FT" /* Order Type*/
       && VPOHDR02.PC4ORTYP != "S1" /* Order Type*/
       && VPOHDR02.PC3NISFL != "Y"  /* Nissho sent flag*/
       && VPOHDR02.YPUCD != "CX"    /* STATUS*/
       && PC03M010.PC03MASK != "*"  /* ===> Identifier for highlight logic*/
       && PC03M010.PC03MCDR == "Y") /* L/C detail report requested*/

        PC03M010.PC03MASK = "*";
                                   /* ===> Identifier for highlight logic*/
        set PC03M010.PC03MAML skip; /* show question*/
        set PC03M010.PC03MAMD cursor, initialAttributes; /* show question field*/
        converseLib.validationFailed(383); /* ===> P.O. not sent to nissho yet.*/
        PC03M010.XXXPRCNM = "PC03519"; /* Process name*/

      end

    end

  end /* L/C request check*/
  if (PC03W01.PC03WLCF != "Y"
   && PC03M010.XGPCD == "02"
   && PC03M010.PC03MLCF == "Y"
   && converseVar.eventKey is enter)
    converseLib.validationFailed(533);
    PC03W01.PC03WLCF = "Y";
    PC03M010.XXXPRCNM = "PC03519";
    exit stack;
  end


end // end PC03519

// DO THE PARM. EDIT
Function PC03520()

  if (converseVar.eventKey is enter)

    PC03W03.XGPCD = PC03M010.XGPCD; /* Gpc code*/
    PC03W03.PC03WIDT = PC03W01.PC03WPDT; /* PO ID*/
    PC03W03.PC4ORTYP = PC03W01.PC4ORTYP; /* PO type*/
    PC03W03.PCFSECD = PC03W01.PCFSECD; /* PO season code*/
    PC03W03.FY1FCTYC = PC03W01.FY1FCTYC; /* Factory*/
    PC03W03.PC03WAFL = "3"; /* Application req. flag*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS ARE ALREADY SET*/
    /* ------------------------------------------------------------*/


    if (PC03W03.PC03WGRP in PC03W04.PC03WTBG) /* Parm in table*/
      set PC03M010.FY1FCTYC cursor, bold; /* Highlight*/
      converseLib.validationFailed(241); /* Parm already in table*/
      PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
      return; /* Return to previous process*/
    else
      if (PC03W03.PC03WIDT in PC03W04.PC03WIDT) /* PO ID*/
        PC03W01.PC03WLIX = sysVar.arrayIndex; /* Set index*/
        while (PC03W01.PC03WLIX != PC03W01.PC03WMAX
         && PC03W04.XGPCD[PC03WLIX] > " ") /* Something in row*/
          if (PC03W04.FY1FCTYC[PC03WLIX] == "ALL"
           && PC03M010.FY1FCTYC == "ALL")
            converseLib.validationFailed(254); /* cannot be country specific*/
            PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
            exit stack; /* Return to previous process*/
          end
          if (PC03M010.FY1FCTYC != "ALL"
           && PC03W04.FY1FCTYC[PC03WLIX] == "ALL")
            set PC03M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting all factories*/
            PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
            exit stack; /* Return to previous process*/
          end
          if (PC03M010.FY1FCTYC == "ALL"
           && PC03W04.FY1FCTYC[PC03WLIX] > " "
           && PC03W04.FY1FCTYC[PC03WLIX] != "ALL")
            set PC03M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(260); /* Already getting factory*/
            PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
            exit stack; /* Return to previous process*/
          end
          if (PC03M010.FY1FCTYC != "ALL"
           && PC03W04.FY1FCTYC[PC03WLIX] == "ALL")
            set PC03M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(255); /* Already getting factory*/
            PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
            exit stack; /* Return to previous process*/
          end
          PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment index*/
        end
      end
    end
  end

  if (PC03M010.XGPCD != "02"
   && PC03M010.PC03MLCF == "Y")
    converseLib.validationFailed(534);
    set PC03M010.PC03MLCF cursor, bold; /* Highlight*/
    set PC03M010.XGPCD bold; /* Highlight*/
    PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
  end

  if (PC03M010.FY1FCTYC == "ALL"
   && PC03M010.PC03MLCF == "Y")
    converseLib.validationFailed(532);
    set PC03M010.PC03MLCF cursor, bold; /* Highlight*/
    set PC03M010.FY1FCTYC bold; /* Highlight*/
    PC03M010.XXXPRCNM = "PC03520"; /* Process name*/
  end


end // end PC03520

// PROCESS THE INPUT REQUEST
Function PC03600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/

    PC03610(); /* Save parms.*/

  else

    if (converseVar.eventKey is pf9 /* PF9 pressed*/
     && PC03W04.XGPCD[1] > " ")    

      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        if (PC03M010.XGPCD == "03")
          PC03619(); /* format production jclfor apprl*/
        else
          if ((PC03M010.XGPCD == "02"
           && (VFCTY003.FY-FCTY-TYP-CD == "E"
           || PC03M010.PC03MEQF == "Y")))
            PC03623(); /* format production jclfor equip*/
          else
            PC03620(); /* format production jclfor ftwr*/
          end
        end
      else
        if (PC03M010.XGPCD == "03")
          PC03622(); /* format development jcl for apprl*/
        else
          if ((PC03M010.XGPCD == "02"
           && (VFCTY003.FY-FCTY-TYP-CD == "E"
           || PC03M010.PC03MEQF == "Y")))
            PC03624(); /* format development jclfor equip*/
          else
            PC03621(); /* format development jclfor ftwr*/
          end
        end
      end

      PC03W01.PC03WLIX = 0;
      PC03W01.PC03WAIX = 0;
      PC03W01.PC03WMAX = 50;

      set PC03W03 empty;
      set PC03W04 empty;

      if (PC03M010.XGPCD == "02") /* Footwear*/
        PC03M010.PC4ORTYP = "FT";
      else
        if (PC03M010.XGPCD == "03") /* Apparel*/
          PC03M010.PC4ORTYP = "IL";
        end
      end

      set PC03M010.PC4ORTYP initialAttributes;
      set PC03M010.PC03MMYY cursor; /* PO ID year*/
      PC03M010.PC03MMYY = " "; /* PO ID year*/
      PC03M010.PC03MBMO = " "; /* PO ID buy month*/
      PC03M010.PC03MDMO = " "; /* PO ID del. month*/
      PC03M010.PC4SDESC = " "; /* PO type description*/
      PC03M010.FY1FCTYC = "ALL"; /* Factory code*/
      PC03M010.FY1FCTSN = " "; /* Factory short name*/
      PC03M010.PC03MFTF = "N"; /* All ftwr  Fact flag*/
      PC03M010.PC03MEQF = "N"; /* All Equip Fact flag*/
      PC03M010.PC03MCDR = "N"; /* L/C detail flag*/
      PC03M010.PC03MDSR = "N"; /* L/C detail summ. flag*/
      PC03M010.PC03MNPR = "N"; /* Products with no price flag*/
      /* ------> Init the Amend. "?" map display*/
      PC03M010.PC03MAMD = "N"; /* Start Amendments "?"*/
      PC03M010.PC03MASK = " "; /* Mask for Amend. "?" displayed*/
      set PC03M010.PC03MAML skip, invisible;
      set PC03M010.PC03MAMD skip, invisible, noHighLight;


    else
      converseLib.validationFailed(17); /* Must have some parms. to pass*/
      PC03M010.XXXPRCNM = "PC03600"; /* Process name*/
    end
  end


end // end PC03600

// MOVE THE PARMS.
Function PC03610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC03W01.PC03WAIX = PC03W01.PC03WAIX + 1; /* Add 1 to index*/
    PC03W04.XGPCD[PC03WAIX] = PC03M010.XGPCD; /* Gpc code*/
    PC03W04.PC03WIDT[PC03WAIX] = PC03W01.PC03WPDT; /* PO ID*/

    if (PC03M010.XGPCD == "03") /* Gpc code = apparel*/
      PC03W04.PCFSECD[PC03WAIX] = PC03W01.PCFSECD; /* Season code*/
    else
      PC03W04.PCFSECD[PC03WAIX] = " "; /* Season code*/
    end

    if (PC03M010.PC03MASK == "*") /* Amendment "?" Displayed*/
      PC03W04.PC03MAMD[PC03WAIX] = PC03M010.PC03MAMD; /* Amend. (Y/N)*/
    else
      PC03W04.PC03MAMD[PC03WAIX] = " "; /* Amend.*/
    end
    if (PC03M010.XGPCD == "02"
     && PC03M010.PC03MLCF == "Y")
      PC03W04.PC03MAMD[PC03WAIX] = "Y"; /* Amend. (Y/N)*/
    end

    PC03W04.PC4ORTYP[PC03WAIX] = PC03W01.PC4ORTYP; /* P.O. type*/
    PC03W04.FY1FCTYC[PC03WAIX] = PC03W01.FY1FCTYC; /* Factory*/
    PC03W04.PC03WAFL[PC03WAIX] = "3"; /* Application req. flag*/
    converseLib.validationFailed(253); /* Parm. Entered*/
    PC03M010.XXXPRCNM = "PC03610"; /* Process name*/

    set PC03M010.PC4ORTYP skip; /* Protect*/
    set PC03M010.XGPCD skip; /* Protect*/
    set PC03M010.PC03MAML skip, invisible; /* Protect*/
    set PC03M010.PC03MAMD skip, invisible, noHighLight; /* Protect*/
    PC03M010.PC03MASK = " "; /* Reset mask indicator map display*/
    PC03M010.PC03MAMD = "N"; /* Reset Amend "?"*/

    if (PC03W01.PC03WAIX == 10) /* Max amount for table*/
      converseLib.validationFailed(240); /* Max amount reached*/
      PC03M010.XXXPRCNM = "PC03610"; /* Process name*/
    end

  end


end // end PC03610

// SET UP THE JCL
Function PC03619()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03640();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T02.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T02.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T02.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T02.TARTYPE[PC03WLIX] == "C" /* condition statment*/
           && PC03M010.XGPCD == "03"           
           && PC03M010.PC03MDSR == "Y")       
                 /* next sentence*/
          else
            if (PC03T02.TARTYPE[PC03WLIX] == "F"
             && PC03M010.XGPCD == "03"
             && PC03M010.PC03MNPR == "Y")
                     /* next sentence*/
            else
              if (PC03T02.TARTYPE[PC03WLIX] == "G"
               && PC03M010.XGPCD == "03"
               && PC03M010.PC03MCDR == "Y")
                       /* next sentence*/
              else

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

                if (PC03T02.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T02.TARJCL[PC03WLIX]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T02.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T02.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX) /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03619

// SET UP THE JCL
Function PC03620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T01.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T01.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T01.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T01.TARTYPE[PC03WLIX] == "A" /* condition statment*/
           && PC03M010.XGPCD == "02"           
           && PC03M010.PC03MCDR == "Y")       
             /* next sentence*/
          else
            if (PC03T01.TARTYPE[PC03WLIX] == "B" /* condition statment*/
             && PC03M010.XGPCD == "02"           
             && PC03M010.PC03MDSR == "Y")       
               /* next sentence*/
            else
              if (PC03T01.TARTYPE[PC03WLIX] == "D" /* condition statment*/
               && PC03M010.XGPCD == "02"           
               && PC03M010.PC03MNPR == "Y")       
                   /* next sentence*/
              else

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

                if (PC03T01.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T01.TARJCL[PC03WLIX]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T01.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T01.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX) /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03620

// SET UP THE JCL
Function PC03621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T11.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T11.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T11.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T11.TARTYPE[PC03WLIX] == "A" /* condition statment*/
           && PC03M010.XGPCD == "02"           
           && PC03M010.PC03MCDR == "Y")       
             /* next sentence*/
          else
            if (PC03T11.TARTYPE[PC03WLIX] == "B" /* condition statment*/
             && PC03M010.XGPCD == "02"           
             && PC03M010.PC03MDSR == "Y")       
               /* next sentence*/
            else
              if (PC03T11.TARTYPE[PC03WLIX] == "D" /* condition statment*/
               && PC03M010.XGPCD == "02"           
               && PC03M010.PC03MNPR == "Y")       
                   /* next sentence*/
              else

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

                if (PC03T11.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T11.TARJCL[PC03WLIX]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T11.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T11.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX) /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03621

// SET UP THE JCL
Function PC03622()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03640();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T22.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T22.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T22.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T22.TARTYPE[PC03WLIX] == "C" /* condition statment*/
           && PC03M010.XGPCD == "03"           
           && PC03M010.PC03MDSR == "Y")       
                 /* next sentence*/
          else
            if (PC03T22.TARTYPE[PC03WLIX] == "F"
             && PC03M010.XGPCD == "03"
             && PC03M010.PC03MNPR == "Y")
                     /* next sentence*/
            else
              if (PC03T22.TARTYPE[PC03WLIX] == "G"
               && PC03M010.XGPCD == "03"
               && PC03M010.PC03MCDR == "Y")
                       /* next sentence*/
              else

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

                if (PC03T22.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T22.TARJCL[PC03WLIX]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T22.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T22.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX) /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03622

// SET UP THE JCL
Function PC03623()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03650();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T03.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T03.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T03.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T03.TARTYPE[PC03WLIX] == "A" /* condition statment*/
           && PC03M010.XGPCD == "02"           
           && PC03M010.PC03MCDR == "Y")       
             /* next sentence*/
          else
            if (PC03T03.TARTYPE[PC03WLIX] == "B" /* condition statment*/
             && PC03M010.XGPCD == "02"           
             && PC03M010.PC03MDSR == "Y")       
               /* next sentence*/
            else
              if (PC03T03.TARTYPE[PC03WLIX] == "D" /* condition statment*/
               && PC03M010.XGPCD == "02"           
               && PC03M010.PC03MNPR == "Y")       
                   /* next sentence*/
              else


            /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/

            /* ------------------------------------------------------------*/

                if (PC03T03.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1;
                                   /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T03.TARJCL[PC03WLIX];
                                   /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T03.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T03.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX)
                                   /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03623

// SET UP THE JCL
Function PC03624()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/

  if (PC03W04.PC03WTBG[1] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC03650();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC03W01.PC03WLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC03W01.PC03WAIX = 0; /* Initialize index*/
    PC03W01.PC03WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC03W01.PC03WLIX > 0) /* Until end of table*/

      if (PC03T33.TARTYPE[PC03WLIX] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC03W02.PC03WTYP = "P"; /* Type*/

        PC03W01.PC03WIX3 = 1;

        while (PC03W01.PC03WIX3 <= PC03W01.PC03WMAX) /* LE max for table*/
          if (PC03W04.PC03WTBG[PC03WIX3] > "0")
            TA6REC.TA6ROW[TA6INDEX] = PC03W04.PC03WTBG[PC03WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
          else
            PC03W01.PC03WIX3 = PC03W01.PC03WMAX; /* Set index to 10*/
          end
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end

      else

        if (PC03T33.TARTYPE[PC03WLIX] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC03W02.PC03WTYP = "X"; /* type*/
          PC03W01.PC03WIX3 = PC03W01.PC03WIX3 + 1; /* increment index*/
          PC03W02.PC03WJCC[PC03WIX3] = " "; /* clear working strg*/
          PC03W02.PC03WJCC[PC03WIX3] = PC03T33.TARJCL[PC03WLIX];

          if (PC03W02.PC03WOVR[PC03WIX3] > " ") /* Something there*/
            PC03W02.PC03WCLG[PC03WIX3] = PC03W02.PC03WOVR[PC03WIX3];
          end

          TA6REC.TARJCL[TA6INDEX] = PC03W02.PC03WJCC[PC03WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC03W02.PC03WTYP;
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/

        else
          if (PC03T33.TARTYPE[PC03WLIX] == "A" /* condition statment*/
           && PC03M010.XGPCD == "02"           
           && PC03M010.PC03MCDR == "Y")       
             /* next sentence*/
          else
            if (PC03T33.TARTYPE[PC03WLIX] == "B" /* condition statment*/
             && PC03M010.XGPCD == "02"           
             && PC03M010.PC03MDSR == "Y")       
               /* next sentence*/
            else
              if (PC03T33.TARTYPE[PC03WLIX] == "D" /* condition statment*/
               && PC03M010.XGPCD == "02"           
               && PC03M010.PC03MNPR == "Y")       
                   /* next sentence*/
              else

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

                if (PC03T33.TARJCL[PC03WLIX] == "            /*EOF" /* End of table*/
                 && PC03W01.PC03WLIX == PC03W01.PC03WMAX)   

                  PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* increment index*/

                else
                  TA6REC.TARJCL[TA6INDEX] = PC03T33.TARJCL[PC03WLIX]; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = PC03T33.TARTYPE[PC03WLIX];

                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

                end

              end
            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC03T33.TARJCL[PC03WLIX] == "/*EOF") /* End of table*/

        if (PC03W01.PC03WLIX == PC03W01.PC03WMAX) /* max JCL lines primary rpts*/

           /* next sentence*/

        else
          PC03W01.PC03WLIX = 0; /* Indicate end of table*/
        end

      else

        PC03W01.PC03WLIX = PC03W01.PC03WLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC03S03(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     
      set PC03W04 empty; /* Clear parameter table*/
      return;

    else

      set PC03W04 empty; /* Clear parameter table*/
      return;

    end
  end


end // end PC03624

// DO ANY EXCEPTIONS
Function PC03630()

   /* ------------------------------------------------------------*/
     /* Determine the overrides*/
   /* ------------------------------------------------------------*/

  PC03W01.PC03WLTC = "LE)',"; /* Less than cond. ove*/
  move " " to PC03W02.PC03WOVR[1] for all; /* Clear array*/


  if (PC03M010.XGPCD == "02") /* Footware*/
    if (PC03M010.PC03MCDR == "Y") /* L/C detail report*/
      PC03W02.PC03WOVR[1] = "NE,S0010.P0010)',"; /* execute step*/
    end

    if (PC03M010.PC03MDSR == "Y") /* L/C detail summary report*/
      PC03W02.PC03WOVR[2] = "NE,S0010.P0010)',"; /* execute step*/
    end

    if (PC03M010.PC03MNPR == "Y") /* Products with no prices report*/
      PC03W02.PC03WOVR[3] = "NE,S0010.P0010)'"; /* execute step*/
    end
  end


end // end PC03630

// DO ANY EXCEPTIONS
Function PC03640()

   /* ------------------------------------------------------------*/
     /* Determine the overrides*/
   /* ------------------------------------------------------------*/

  PC03W01.PC03WLTC = "LE)',"; /* Less than cond. ove*/
  move " " to PC03W02.PC03WOVR[1] for all; /* Clear array*/


  if (PC03M010.XGPCD == "03") /* Apparel*/
    if (PC03M010.PC03MCDR == "Y") /* L/C detail report*/
      PC03W02.PC03WOVR[3] = "NE,S0010.P0010)'"; /* execute step*/
    end

    if (PC03M010.PC03MDSR == "Y") /* L/C detail summary report*/
      PC03W02.PC03WOVR[1] = "NE,S0010.P0010)',"; /* execute step*/
    end

    if (PC03M010.PC03MNPR == "Y") /* Products with no prices report*/
      PC03W02.PC03WOVR[2] = "NE,S0010.P0010)',"; /* execute step*/
    end
  end


end // end PC03640

// DO ANY EXCEPTIONS
Function PC03650()

   /* ------------------------------------------------------------*/
     /* Determine the overrides*/
   /* ------------------------------------------------------------*/

  PC03W01.PC03WLTC = "LE)',"; /* Less than cond. ove*/
  move " " to PC03W02.PC03WOVR[1] for all; /* Clear array*/


  if (PC03M010.XGPCD == "02") /* equipment*/
    if (PC03M010.PC03MCDR == "Y") /* L/C detail report*/
      PC03W02.PC03WOVR[1] = "NE,S0010.P0010)',"; /* execute step*/
    end

    if (PC03M010.PC03MDSR == "Y") /* L/C detail summary report*/
      PC03W02.PC03WOVR[2] = "NE,S0010.P0010)',"; /* execute step*/
    end

    if (PC03M010.PC03MNPR == "Y") /* Products with no prices report*/
      PC03W02.PC03WOVR[3] = "NE,S0010.P0010)'"; /* execute step*/
    end
  end


end // end PC03650

// CALL THE FACTORY RECORD
Function PC03S01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03S01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC03M010.XXXPRCNM = "PC03S01"; /* Process name*/

  exit stack;


end // end PC03S01

// CALL THE DATE ROUTINE
Function PC03S02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000 /* Valid date*/
     || TA2REC.TA2RTNCD == 0222) /* Invalid date*/

      return; /* Return to previous process*/

    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC03S02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC03M010.XXXPRCNM = "PC03S02"; /* Process name*/

  end


end // end PC03S02

// SUBMIT THE JOB
Function PC03S03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    set PC03W04 empty;
    converseLib.validationFailed(190); /* Job submitted to reader*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    set PC03W04 empty;
    PC03M010.XXXPRCNM = "PC03S03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    PC03M010.XXXPRCNM = "PC03S03"; /* Process name*/
    exit stack;

  end


end // end PC03S03

// Call P.O. type routine
Function PC03S04()

   /* ------------------------------------------------------------*/
   /* Select a unique p.o. type row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Program name*/
  TA1REC.TA1LOC = "PC03S04 SELECT UNIQUE P.O. TYPE ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC03M010.XXXPRCNM = "PC03S04"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC03S04

// Call P.O. header routine
Function PC03S05()

   /* ------------------------------------------------------------*/
   /* P.O. ID date CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the po header set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03S05 SELECT COUNT P.O. HEADER ROWS";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC03M010.XXXPRCNM = "PC03S05"; /* Process name*/

  exit stack;


end // end PC03S05

// CALL PO ID EDIT FOR APPAREL
Function PC03S06()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC03"; /* Process name*/
  TA1REC.TA1LOC = "PC03S06 P.O. ID EDIT FOR APPAREL  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC03M010.XXXPRCNM = "PC03S06"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC03S06

//*** RECORD=PC03W01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC03
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// *  9/25/89   GWITZI        NEW RECORD
// * 01/13/98   DRAMSE        increased the size by 1 byte
// *                          for the following variables:
// *                          PC03WAIX, PC03WIX3, PC03WMAX
// *                          and pc03WLIX
// ************************************************************
// ***********************
Record PC03W01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCFSECD PCFSECD ; 
  10 PCFSEYR PCFSEYR ; 
  10 XSECD XSECD ; 
  10 PC03WODT PC03WODT ; 
    15 PC03WOWY PC03WOWY ; 
      20 PC03WPCC PC03WPCC ; 
      20 PC03WPYR PC03WPYR ; 
    15 PC03WBYM PC03WBYM ; 
    15 PC03WDLM PC03WDLM ; 
  10 PC03WAYR PC03WAYR ; 
    15 PC03WACY PC03WACY ; 
    15 PC03WAYE PC03WAYE ; 
  10 PC03WPDT PC03WPDT ; 
  10 PC03WDAT PC03WDAT ; 
    15 PC03WMYY PC03WMYY ; 
    15 PC03WBMO PC03WBMO ; 
    15 PC03WDMO PC03WDMO ; 
  10 PC03WCAT PC03WCAT ; 
    15 PC03WYCO PC03WYCO ; 
    15 PC03WBCO PC03WBCO ; 
    15 PC03WDCO PC03WDCO ; 
  10 PC03WCY1 PC03WCY1 ; 
  10 PC03WCY2 PC03WCY2 ; 
  10 PC03WCDT PC03WCDT ; 
    15 PC03WCY PC03WCY ; 
      20 PC03WCCC PC03WCCC ; 
      20 PC03WYYY PC03WYYY ; 
    15 PC03WMMM PC03WMMM ; 
    15 PC03WDDD PC03WDDD ; 
  10 PC03WCDR PC03WCDR ; 
  10 PC03WDSR PC03WDSR ; 
  10 PC03WNPR PC03WNPR ; 
  10 PC03WSWT PC03WSWT ; 
  10 PC03WLIX PC03WLIX ; 
  10 PC03WAIX PC03WAIX ; 
  10 PC03WIX3 PC03WIX3 ; 
  10 PC03WMAX PC03WMAX ; 
  10 PC03WLTC PC03WLTC ; 
  10 PC03WLCF PC03WLCF ; 
  10 PC03CCYY PC03CCYY ; 
end // end PC03W01

Record PC03W02 type basicRecord
  10 PC03WJCE PC03WJCE ; 
    15 PC03WEX1 PC03WEX1 ; 
    15 PC03WPNM PC03WPNM ; 
    15 * char(58) ; 
  10 PC03WJCP PC03WJCP ; 
  10 PC03WTYP PC03WTYP ; 
  10 PC03WOVR PC03WOVR [7] ; 
    15 * char(4) ; 
    15 PC03WCMM PC03WCMM ; 
    15 * char(12) ; 
  10 PC03WJCC PC03WJCC [7] ; 
    15 * char(22) ; 
    15 PC03WCLG PC03WCLG ; 
    15 * char(41) ; 
end // end PC03W02

Record PC03W03 type basicRecord
  10 PC03WGRP PC03WGRP ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PC03WIDT PC03WIDT ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(4) ; 
    15 PC03WAFL PC03WAFL ; 
    15 * char(50) ; 
end // end PC03W03

//*** RECORD=PC03W04 ****
// This record is the same a COPYLIB member WPC1001
// ***********************
Record PC03W04 type basicRecord
  10 PC03WTBG PC03WTBG [50] ; 
    15 XGPCD XGPCD ; 
    15 * num(6) ; 
    15 PC03WIDT PC03WIDT ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 * char(4) ; 
    15 PC03WAFL PC03WAFL ; 
    15 PC03MAMD PC03MAMD ; 
    15 * char(49) ; 
end // end PC03W04

// Confirmation flag for LC
DataItem PC03CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Amendment ? (Y/N)
DataItem PC03MAMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem PC03WACY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application flag
DataItem PC03WAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PC03WAIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC03WAYE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apparel buy yr
DataItem PC03WAYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id buy month
DataItem PC03WBCO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month
DataItem PC03WBMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC03WBYM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working date character
DataItem PC03WCAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          centry
DataItem PC03WCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LC DETAIL FLAG
DataItem PC03WCDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date
DataItem PC03WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition logic
DataItem PC03WCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comma
DataItem PC03WCMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC03WCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date +1
DataItem PC03WCY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PC03WCY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC03WDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id delivery month
DataItem PC03WDCO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          day
DataItem PC03WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delivery mo
DataItem PC03WDLM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month
DataItem PC03WDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// LC DET. SUMM. FLAG
DataItem PC03WDSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute stat. constants
DataItem PC03WEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table group
DataItem PC03WGRP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po date range
DataItem PC03WIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PC03WIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement
DataItem PC03WJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PC03WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PC03WJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirmation flag for LC
DataItem PC03WLCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem PC03WLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Less than condidition override
DataItem PC03WLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Both rpt. max.
DataItem PC03WMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC03WMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id year
DataItem PC03WMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PROD. NO PRICE FLAG
DataItem PC03WNPR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC PO date
DataItem PC03WODT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// override statement
DataItem PC03WOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC centry/year
DataItem PC03WOWY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//       centry
DataItem PC03WPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id date
DataItem PC03WPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program name
DataItem PC03WPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC03WPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC03WSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table row
DataItem PC03WTBG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl type
DataItem PC03WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id year
DataItem PC03WYCO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC03WYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

