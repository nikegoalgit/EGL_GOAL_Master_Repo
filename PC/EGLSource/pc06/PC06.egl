package pc06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC06 ****
//   This application will allow the user to enter selection
// criteria for inquiring on a P.O. style.
// 
//   After the user has entered the selection criteria,
// pressed enter, and passed the edits, they will be
// transferred to one of two programs for viewing the style
// information, PC0U for apparel and PC0R for all other GPCs.
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
// 07/11/89   JNEWMA         New application.
// 08/25/89   JNEWMA         Security now checks CAILVL(GPC)
// 09/11/90   Gamen          Add owner group (OG) to map
// 09/27/90   lsutto         Allow gpc 07 access
// 10/10/91   Gamen          Modify so only open p.o. info is
//                           moved to pcwrec for gpc 03.
// 02/22/93   Gamen          Move map nbr to caitem on PF3.
// 06/10/97   PHARWO         PCA367 - PPR PROJECT - P.O. VIEWS
// 06/27/97   jniese         PPR fix.
// 10/21/97   DRAMSE         Generated for the changed XPPC001
// 01/20/00   DRAMSE         Changed the length of PO # in the
//                           screen to 9 digits
// *********************
Program PC06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC06W00 PC06W00; // record
  PC06W01 PC06W01; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use PC06M.PC06M001,  // forms
      PC06M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC06001; /* Special Initialization*/

    PC06001: PC06001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC06002; /* Converse main process*/
    PC06002: PC06002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC06002; /* Converse Detail Schedule List*/


  end // end main
end // end PC06

// Special Initialization
Function PC06001()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "01"
   && COMMAREA.CAILVL[1] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC06M001.XXXPRCNM = "PC06001";
  end

  if (PCWREC.XGPCD == "07"
   && COMMAREA.CAILVL[7] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC06M001.XXXPRCNM = "PC06001";
  end

  if (PCWREC.XGPCD == "02"
   && COMMAREA.CAILVL[2] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC06M001.XXXPRCNM = "PC06001";
  end

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CAILVL[3] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC06M001.XXXPRCNM = "PC06001";
  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  set PC06W00 empty; /* Initialize working storage*/
  set PC06W01 empty; /* Initialize map 001 storage area*/
  set PC06M001 initial; /* M001 input/output*/
  set PCYREC empty; /* Function,count,& date range for IO*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/

  PC06W00.XXXPRCNM = "PC06"; /* Module identification*/

  if (COMMAREA.CAFROMAP == "TS0P" /* If coming from transportation*/
   || COMMAREA.CAFROMAP == "PT0A") /* If coming from wip*/
    if (PCWREC.XGPCD == "03")
      PC06W01.XGPCD = PCWREC.XGPCD; /* GPC code*/
      PC06W01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
      PC06W01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. Number*/
    else
      move PCWREC to PC06W01 withV60Compat; /* load selection fields*/
    end
  else
    if (PCWREC.CAFROMAP[1] == "PC06") /* If returning from subordinate appl*/
      if (PCWREC.XGPCD == "03")
        PC06W01.XGPCD = PCWREC.XGPCD; /* GPC code*/
        PC06W01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
        PC06W01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. Number*/
      else
        PC06W01.PC06W1GP = PCWREC.PCWUSER1; /* Restore sel fields*/
      end
    else
      PC06W01.XGPCD = PCWREC.XGPCD; /* GPC code*/
      PC06W01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
    end
  end

  PCWREC.PCWUSER1 = " "; /* Init user area 1*/
  PCWREC.PCWUSER2 = " "; /* Init user area 2*/
  PCWREC.PCWUSER3 = " "; /* Init user area 3*/
  PCWREC.PCWUSER4 = " "; /* Init user area 4*/
  PCWREC.CAFROMAP[1] = " "; /* Init From application 1*/
  PCWREC.CAFROMAP[2] = " "; /* Init From application 2*/
  PCWREC.CAFROMAP[3] = " "; /* Init From application 3*/
  PCWREC.CAFROMAP[4] = " "; /* Init From application 4*/

end // end PC06001

// po inquiry selection
Function PC06002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC06200(); /* Format and display the map*/

  PC06300(); /* Check attention identifier*/

  PC06400(); /* Reset fields to normal intensity*/

  PC06500(); /* Verify the entered data*/

  PC06600(); /* Process valid input request*/


end // end PC06002

// Converse selection map 001
Function PC06200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not a PA key pressed*/
    PC06210(); /* Format selection data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC06M001.XXXPRCNM = PC06W00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC06M001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC06M001.XXXPRCNM = PC06W00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC06M001 alarm; /* Indicate sound alarm*/
  end

  converse PC06M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC06W00.XXXPRCNM = "PC06"; /* Module identification*/
  COMMAREA.CATOAP = PC06M001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC06M001.CAITEM; /* Application data*/

  PC06220(); /* Converse popup windows*/

end // end PC06200

// Format selection data of 001
Function PC06210()
   /* ------------------------------------------------------------*/
   /* Format the item data for map 001 display.*/
   /* ------------------------------------------------------------*/
  set PC06M001 initial; /* Initialize map*/

  PC06M001.PC3PONBR = PC06W01.PC3PONBR; /* PO number*/
  PC06M001.XGPCD = PC06W01.XGPCD; /* GPC code*/
   /* MOVE PC06W01.PO-REG-CD TO PC06M001.PO-REG-CD;     /* reg-cd*/
  PC06M001.SY1STNBR = PC06W01.SY1STNBR; /* Style number*/
  PC06M001.SY2CLRID = PC06W01.SY2CLRID; /* Color*/
  PC06M001.XQACD = PC06W01.XQACD; /* Quality code*/
  PC06M001.PC2INSEG = PC06W01.PC2INSEG; /* Spec difference code*/
  PC06M001.XPGCD = PC06W01.XPGCD; /* Package code*/
  PC06M001.XDMCD = PC06W01.XDMCD; /* Dimension code*/
  PC06M001.XOWCD = PC06W01.XOWCD; /* Owner Group code*/

  if (PC06W01.XGPCD == " ") /* If blank GPC code*/
    set PC06M001.XGPCD cursor; /* Set cursor to GPC code*/
  else
    set PC06M001.PC3PONBR cursor; /* Set cursor to PO number*/
  end

end // end PC06210

// Check for ? inquiry
Function PC06220()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XGPCD == "?" /* IF GPC code list requested*/
   || PC06M001.XQACD == "?" /* or quality code list requested*/
   || PC06M001.XPGCD == "?" /* or package code list requested*/
   || PC06M001.XDMCD == "?" /* or dimension code list requested*/
   || PC06M001.XOWCD == "?") /* or owner group code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC06W00.XXXPRCNM = "PC06220"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XGPCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " GPC"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC06M001.XGPCD = PC06W01.XGPCD; /* Restore prior code*/
    else
      PC06M001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
    end

    set PC06M001.XGPCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XQACD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " QUALITY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC06M001.XQACD = PC06W01.XQACD; /* Restore prior code*/
    else
      PC06M001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
    end

    set PC06M001.XQACD cursor; /* Establish cursor position*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of packages.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XPGCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " PACKAGE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC06M001.XPGCD = PC06W01.XPGCD; /* Restore prior code*/
    else
      PC06M001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set PC06M001.XPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimensions.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XDMCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC06M001.XDMCD = PC06W01.XDMCD; /* Restore prior code*/
    else
      PC06M001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC06M001.XDMCD cursor; /* Establish cursor position*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner groups*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XOWCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP"; /* Heading*/
     /* MOVE COMMAREA.XWHCD TO XX0XW02.XWHCD ; Warehouse*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC06M001.XOWCD = PC06W01.XOWCD; /* Restore prior code*/
    else
      PC06M001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
    end

    set PC06M001.XOWCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC06W00.XXXPRCNM = "PC06220"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC06220

// Check attention identifiers
Function PC06300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC06M001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC06W00.XXXPRCNM = "PC06300"; /* Module identification*/
      set PC06M001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* If PF1 was pressed*/
   || converseVar.eventKey is pf3  /* If PF3 was pressed*/
   || converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf16 /* If PF16 was pressed*/
   || converseVar.eventKey is pf17) /* If PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC06M001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf16) /* If PF16 (wip) pressed*/
      COMMAREA.CATOAP = "PT0A"; /* transfer to production menu*/
      PCWREC.PC3PONBR = PC06M001.PC3PONBR;
      PCWREC.SY1STNBR = PC06M001.SY1STNBR;
      PCWREC.SY2CLRID = PC06M001.SY2CLRID;
      PCWREC.XDMCD = PC06M001.XDMCD;
    end

    if (converseVar.eventKey is pf17) /* If PF17 (transportation) pressed*/
      COMMAREA.CATOAP = "TS0P"; /* transfer to production menu*/
      PCWREC.PC3PONBR = PC06M001.PC3PONBR;
      PCWREC.SY1STNBR = PC06M001.SY1STNBR;
      PCWREC.SY2CLRID = PC06M001.SY2CLRID;
      PCWREC.PC2INSEG = PC06M001.PC2INSEG;
      PCWREC.XQACD = PC06M001.XQACD;
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC06W00.XXXPRCNM = "PC06300"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC06300

// Reset highlighted fields
Function PC06400()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC06M001.XGPCD initialAttributes; /* GPC code*/
   /* SET PC06M001.PO-REG-CD DEFINED;    /* PO region*/
  set PC06M001.PC3PONBR initialAttributes; /* PO number*/
  set PC06M001.SY1STNBR initialAttributes; /* Style*/
  set PC06M001.SY2CLRID initialAttributes; /* Color*/
  set PC06M001.XQACD initialAttributes; /* Quality code*/
  set PC06M001.PC2INSEG initialAttributes; /* Spec difference*/
  set PC06M001.XPGCD initialAttributes; /* Package code*/
  set PC06M001.XDMCD initialAttributes; /* Dimension*/
  set PC06M001.XOWCD initialAttributes; /* Owner Group code*/
  set PC06M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC06M001.CAITEM initialAttributes; /* Commarea application data*/

end // end PC06400

// Verify the entered data
Function PC06500()
   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PC06510(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* Determine if GPC code active in table & user has authority.*/
   /* ------------------------------------------------------------*/

  if (PC06M001.XGPCD in XGPTBL.XGPCD /* GPC code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    if (PC06M001.XGPCD == "01"
     || PC06M001.XGPCD == "02"
     || PC06M001.XGPCD == "03"
     || PC06M001.XGPCD == "07")
      if (PC06M001.XGPCD == "01"
       && COMMAREA.CAILVL[1] != "Y")
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.XGPCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(159); /* Security violation*/
      else
        if (PC06M001.XGPCD == "02"
         && COMMAREA.CAILVL[2] != "Y")
          PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
          set PC06M001.XGPCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(159); /* Security violation*/
        else
          if (PC06M001.XGPCD == "03"
           && COMMAREA.CAILVL[3] != "Y")
            PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
            set PC06M001.XGPCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(159); /* Security violation*/
          else
            if (PC06M001.XGPCD == "07"
             && COMMAREA.CAILVL[7] != "Y")
              PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
              set PC06M001.XGPCD cursor, bold; /* Highlight*/
              converseLib.validationFailed(159); /* Security violation*/
            else
              COMMAREA.XGPCD = PC06M001.XGPCD;
                                   /* GPC code to commarea*/
            end
          end
        end
      end
    end
  else
    PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
    set PC06M001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* GPC code invalid*/
  end

  if (converseVar.validationMsgNum == 0) /* If no GPC errors*/
    /* ------------------------------------------------------------*/
     /* Determine if dimension in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.XDMCD != " ") /* If dimension entered*/
      if (PC06M001.XDMCD in XDMTBL.XDMCD /* Dimension in table*/
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.XDMCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(53); /* Dimension invalid*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if package in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.XPGCD != " ") /* If package entered*/
      if (PC06M001.XPGCD in XPGTBL.XPGCD /* Package in table*/
       && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.XPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(55); /* Package invalid*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if spec difference in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.PC2INSEG != " ") /* If spec difference entered*/
    end

    /* ------------------------------------------------------------*/
     /* Determine if quality in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.XQACD != " ") /* If quality entered*/
      if (PC06M001.XQACD in XQATBL.XQACD /* Quality in table*/
       && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.XQACD cursor, bold; /* Highlight*/
        converseLib.validationFailed(54); /* Quality invalid*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine that style/color is valid.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.SY2CLRID != " ") /* If color is entered*/
      if (PC06M001.SY1STNBR == " ") /* If style not entered*/
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.SY2CLRID cursor, bold; /* Highlight*/
        converseLib.validationFailed(148); /* Cannot enter without style*/
      else
        set PG2REC empty; /* Initialize record*/
        PG2REC.XGPCD = PC06M001.XGPCD; /* GPC code*/
        PG2REC.SY1STNBR = PC06M001.SY1STNBR; /* Style*/
        PG2REC.SY2CLRID = PC06M001.SY2CLRID; /* Color*/
        if (PC06M001.XDMCD == " ")
          PG2REC.XDMCD = "00"; /* Dimension*/
        else
          PG2REC.XDMCD = PC06M001.XDMCD; /* Dimension*/
        end
        XSPG202(); /* Validate style/color*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          converseLib.validationFailed(197); /* Invalid style/color*/
          PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
          set PC06M001.SY2CLRID cursor, bold; /* Highlight color*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate style.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.SY1STNBR == " ") /* IF style not entered*/
      if (PC06M001.XGPCD != "03") /* IF not apparrel*/
        converseLib.validationFailed(196); /* Style must be entered*/
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.SY1STNBR cursor, bold; /* Highlight style*/
      end
    else
      PG2REC.XGPCD = PC06M001.XGPCD; /* GPC code*/
      PG2REC.SY1STNBR = PC06M001.SY1STNBR; /* Style*/
      XSPG201(); /* Validate style*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(196); /* Invalid style*/
        PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
        set PC06M001.SY1STNBR cursor, bold; /* Highlight style*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Validate PO number.*/
    /* ------------------------------------------------------------*/

    if (PC06M001.PC3PONBR == 0) /* IF PO number not entered*/
      converseLib.validationFailed(35); /* PO number must be entered*/
      PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
      set PC06M001.PC3PONBR cursor, bold; /* Highlight style*/
    else
      PC06530(); /* Validate P.O. number*/
      PC06W01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* save header region*/
      PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD; /* save header region*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data entered*/
    PC06W00.XXXPRCNM = "PC06500"; /* Module identification*/
    set PC06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC06500

// Save map data before converse
Function PC06510()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC06W01.PC3PONBR = PC06M001.PC3PONBR; /* PO number*/
   /* move 01 to region until it is added to the screen.*/
   /* MOVE PC06M001.Po-reg-cd TO PC06W01.po-reg-cd;      /* PO region*/
  PC06W01.PO-REG-CD = "01"; /* PO region*/
  PC06W01.XGPCD = PC06M001.XGPCD; /* GPC code*/
  PC06W01.SY1STNBR = PC06M001.SY1STNBR; /* Style number*/
  PC06W01.SY2CLRID = PC06M001.SY2CLRID; /* Color*/
  PC06W01.XQACD = PC06M001.XQACD; /* Quality*/
  PC06W01.PC2INSEG = PC06M001.PC2INSEG; /* Spec difference*/
  PC06W01.XPGCD = PC06M001.XPGCD; /* Package*/
  PC06W01.XDMCD = PC06M001.XDMCD; /* Dimension*/
  PC06W01.XOWCD = PC06M001.XOWCD; /* Owner Group code*/

end // end PC06510

// Validate PO number  - VPOHDR01
Function PC06530()
   /* ------------------------------------------------------------*/
   /* Format the PCYREC and PC3REC for PO header selection*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Initialize HDR rec*/

  VPOHDR02.XGPCD = PC06W01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC06W01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC06W01.PC3PONBR; /* PO number*/
  PCYREC.PCYFUNC = "S"; /* Select unique*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(69); /* PO header not found*/
        set PC06M001.PC3PONBR cursor, bold; /* Highlight*/
        PC06W00.XXXPRCNM = "PC06530"; /* Module identification*/
        return; /* Display error*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC06530"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC06W00.TA1TBLKE = " "; /* Initialize work key*/
  PC06W00.PC06WKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC06W00.PC06WKA2 = VPOHDR02.PO-REG-CD; /* Key field 2*/
  PC06W00.PC06WKN3 = VPOHDR02.PC3PONBR; /* Key field 3*/
  TA1REC.TA1TBLKE = PC06W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC06W00.XXXPRCNM = "PC06530";
  exit stack;

end // end PC06530

// Process valid input request
Function PC06600()
  set PC06M001.PC3PONBR cursor; /* Position cursor on PO number*/
   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM03 (P.O. item table)*/
   /* ------------------------------------------------------------*/

  PC06610(); /* Open cursor VPOITM03*/

   /* ------------------------------------------------------------*/
   /* Fetch first VPOITM03 row*/
   /* ------------------------------------------------------------*/

  VPOITM03.PC6STAT = "CX"; /* initialize item status field*/
  while (PC06W00.PC06WDCF == "N"
   && VPOITM03.PC6STAT == "CX")
    PC06620(); /* Fetch first VPOITM03 row*/
  end /* - must not be a 'cx' status*/

  if (PC06W00.PC06WDCF == "Y") /* If no rows found*/
    converseLib.validationFailed(18); /* No data found to display*/
    PC06W00.XXXPRCNM = "PC06600"; /* Module identification*/
    exit stack; /* Display error*/
  end

  set PCWREC empty; /* Initialize PC communications rec*/

  if (PC06W01.XGPCD == "03") /* If apparrel*/
    /* ------------------------------------------------------------*/
     /* Check for multiple styles if no style entered for apparrel*/
    /* ------------------------------------------------------------*/
    if (PC06W01.SY1STNBR == " ") /* If style not entered*/
      PC06W00.SY1STNBR = VPOITM03.SY1STNBR; /* Save first style*/
      while (PC06W00.PC06WDCF == "N") /* While more rows*/
        if (VPOITM03.PC6STAT != "CX") /* If row not cancelled*/
          if (VPOITM03.SY1STNBR != PC06W00.SY1STNBR) /* If > 1 styles*/
            converseLib.validationFailed(113); /* Multiple styles*/
            PC06W00.XXXPRCNM = "PC06600"; /* Module identification*/
            PC06M001.SY1STNBR = PC06W00.SY1STNBR; /* Style*/
            set PC06M001.SY1STNBR cursor; /* Cursor at style*/
            exit stack; /* Display message*/
          end
          PCWREC.YSMXDV = VPOITM03.YSMXDV; /* Division*/
        end
        PC06620(); /* Fetch next item row*/
      end
    else
      PCWREC.YSMXDV = VPOITM03.YSMXDV; /* Division*/
    end
    COMMAREA.CATOAP = "PC0U"; /* Transfer to PC0U*/
  else
    /* ------------------------------------------------------------*/
     /* Save item info in PCWREC to compare to next item*/
    /* ------------------------------------------------------------*/

    PCWREC.SY1STNBR = VPOITM03.SY1STNBR; /* Style number*/
    PCWREC.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
    PCWREC.XDMCD = VPOITM03.XDMCD; /* Dimension*/
    PCWREC.XQACD = VPOITM03.XQACD; /* Quality*/
    PCWREC.XOWCD = VPOITM03.XOWCD; /* Owner grp*/
    PCWREC.PC2INSEG = VPOITM03.PC2INSEG; /* Spec dif*/
    PCWREC.XPGCD = VPOITM03.XPGCD; /* Package*/
    PCWREC.XUMCD = VPOITM03.XUMCD; /* Unit meas*/

    while (PC06W00.PC06WDCF == "N") /* While more rows*/
      /* ------------------------------------------------------------*/
       /* Check that product is unique.*/
      /* ------------------------------------------------------------*/
      if (VPOITM03.SY1STNBR != PCWREC.SY1STNBR /* If different style*/
       || VPOITM03.SY2CLRID != PCWREC.SY2CLRID /* or different color*/
       || VPOITM03.XDMCD != PCWREC.XDMCD       /* or dif dimension*/
       || VPOITM03.XQACD != PCWREC.XQACD       /* or dif quality*/
       || VPOITM03.XOWCD != PCWREC.XOWCD       /* or dif owner grp*/
       || VPOITM03.PC2INSEG != PCWREC.PC2INSEG /* or dif spec dif*/
       || VPOITM03.XPGCD != PCWREC.XPGCD       /* or dif package*/
       || VPOITM03.XUMCD != PCWREC.XUMCD)      /* or dif unit meas*/
        converseLib.validationFailed(193); /* Cannot request multiple products*/
        PC06W00.XXXPRCNM = "PC06600"; /* Module identification*/
        exit stack; /* Display error*/
      end
      /* ------------------------------------------------------------*/
       /* Load destinations for the product to the array in PCWREC.*/
      /* ------------------------------------------------------------*/
      PC06W00.PC06WIX1 = 1; /* Initialize index*/
      while (VPOITM03.XWHCD != PCWREC.PCWWHSE[PC06WIX1] /* Warehouse not =*/
       || VPOITM03.PC2CUXID != PCWREC.PCWCUST[PC06WIX1]) /* Customer not =*/
        if (PCWREC.PCWWHSE[PC06WIX1] == " " /* Warehouse blank*/
         && PCWREC.PCWCUST[PC06WIX1] == " ") /* Customer blank*/
          PCWREC.PCWWHSE[PC06WIX1] = VPOITM03.XWHCD; /* Warehouse*/
          PCWREC.PCWCUST[PC06WIX1] = VPOITM03.PC2CUXID; /* Customer*/
        else
          PC06W00.PC06WIX1 = PC06W00.PC06WIX1 + 1; /* Increment index*/
        end
      end
      VPOITM03.PC6STAT = "CX"; /* initialize item status field*/
      while (PC06W00.PC06WDCF == "N"
       && VPOITM03.PC6STAT == "CX")
        PC06620(); /* Fetch next item row*/
      end
    end

    PCWREC.YSMXDV = "*"; /* Division*/
    COMMAREA.CATOAP = "PC0R"; /* Transfer to PC0R*/
  end

   /* ------------------------------------------------------------*/
   /* Close cursor VPOITM03*/
   /* ------------------------------------------------------------*/

  PC06630(); /* Close cursor VPOITM03*/

   /* ------------------------------------------------------------*/
   /* Format the PCWREC for transfer to requested application*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC06W01.XGPCD; /* GPC code*/
  PCWREC.PC3PONBR = PC06W01.PC3PONBR; /* PO number*/
  PCWREC.PO-REG-CD = PC06W01.PO-REG-CD; /* PO REGION CODE*/
  PCWREC.PC3POIDT = VPOITM03.PC3POIDT; /* PO ID*/
  PCWREC.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory*/
  PCWREC.PCFSECD = "*"; /* PO ID Season code*/
  PCWREC.PC4ORTYP = VPOITM03.PC4ORTYP; /* PO type*/

  if (PC06W01.SY1STNBR == " ") /* If blank*/
    PCWREC.SY1STNBR = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.SY1STNBR = PC06W01.SY1STNBR; /* Style*/
  end

  if (PC06W01.SY2CLRID == " ") /* If blank*/
    PCWREC.SY2CLRID = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.SY2CLRID = PC06W01.SY2CLRID; /* Color*/
  end

  if (PC06W01.XOWCD == " ") /* If blank*/
    PCWREC.XOWCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XOWCD = PC06W01.XOWCD; /* Owner Group code*/
  end

  if (PC06W01.XDMCD == " ") /* If blank*/
    PCWREC.XDMCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XDMCD = PC06W01.XDMCD; /* Dimension*/
  end

  if (PC06W01.XQACD == " ") /* If blank*/
    PCWREC.XQACD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XQACD = PC06W01.XQACD; /* Quality*/
  end

  if (PC06W01.PC2INSEG == " ") /* If blank*/
    PCWREC.PC2INSEG = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.PC2INSEG = PC06W01.PC2INSEG; /* Spec difference*/
  end

  if (PC06W01.XPGCD == " ") /* If blank*/
    PCWREC.XPGCD = "*"; /* Wildcard*/
  else /* Else*/
    PCWREC.XPGCD = PC06W01.XPGCD; /* Package type*/
  end

  PCWREC.XUMCD = "*"; /* YMT mode code*/
  PCWREC.PC6ETSDT = -1; /* ETS date*/
  PCWREC.YMTCD = "*"; /* YMT mode code*/
  PCWREC.XWHCD = "*"; /* Warehouse*/
  PCWREC.PC2CUXID = "*"; /* Cust xref*/
  PCWREC.XSECD = "*"; /* Season code*/
  PCWREC.XDSCD = "*"; /* Direct ship code*/
  PCWREC.PC6PLAN = -1; /* Product plan number*/
  PCWREC.PC6ITMNB = -1; /* Item sequence number*/

  PCWREC.CAFROMAP[1] = "PC06"; /* Identify From application*/
  PCWREC.PCWUSER1 = PC06W01.PC06W1GP; /* Save selection data*/

  XSPCS01(); /* Transfer*/

end // end PC06600

// Select set PO item  - VPOITM01
Function PC06610()
  PC06W00.PC06WDCF = "N"; /* End of VPOITM03 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOITM03 with key values or wildcards for select set*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC06W01.XGPCD; /* GPC code*/
  VPOITM03.PO-REG-CD = PC06W01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM03.PC3PONBR = PC06W01.PC3PONBR; /* PO number*/
  if (PC06W01.SY1STNBR == " ")
    VPOITM03.SY1STNBR = "*"; /* Style number*/
  else
    VPOITM03.SY1STNBR = PC06W01.SY1STNBR; /* Style number*/
  end
  if (PC06W01.SY2CLRID == " ")
    VPOITM03.SY2CLRID = "*"; /* Identifying color*/
  else
    VPOITM03.SY2CLRID = PC06W01.SY2CLRID; /* Identifying color*/
  end
  if (PC06W01.XOWCD == " ")
    VPOITM03.XOWCD = "*"; /* Owner Group code*/
  else
    VPOITM03.XOWCD = PC06W01.XOWCD; /* Owner Grouup code*/
  end
  if (PC06W01.XDMCD == " ")
    VPOITM03.XDMCD = "*"; /* Dimension code*/
  else
    VPOITM03.XDMCD = PC06W01.XDMCD; /* Dimension code*/
  end
  if (PC06W01.XQACD == " ")
    VPOITM03.XQACD = "*"; /* Quality code*/
  else
    VPOITM03.XQACD = PC06W01.XQACD; /* Quality code*/
  end
  if (PC06W01.PC2INSEG == " ")
    VPOITM03.PC2INSEG = "*"; /* Spec difference code*/
  else
    VPOITM03.PC2INSEG = PC06W01.PC2INSEG; /* Spec difference code*/
  end
  if (PC06W01.XPGCD == " ")
    VPOITM03.XPGCD = "*"; /* Packaging type code*/
  else
    VPOITM03.XPGCD = PC06W01.XPGCD; /* Packaging type code*/
  end
  VPOITM03.XUMCD = "*"; /* Unit of measure*/
  VPOITM03.XWHCD = "*"; /* Warehouse code*/
  VPOITM03.PC2CUXID = "*"; /* Customer xref ID*/
  VPOITM03.PC6ETSDT = -1; /* ETS date*/
  VPOITM03.YMTCD = "*"; /* YMT mode code*/
  VPOITM03.PC6PLAN = -1; /* Plan number*/
  VPOITM03.XDSCD = "*"; /* Direct ship code*/
  VPOITM03.YSMXDV = "*"; /* Division code*/
  VPOITM03.PC6OETS = -1; /* Orig est hdt*/
  VPOITM03.PC6RTADT = -1; /* Rqt est hdt*/
  VPOITM03.PC6CXNBR = -1; /* Cancel version number*/

  PCYREC.PCYFUNC = "S7"; /* Select set*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC06W00.XXXPRCNM = "PC06610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC06610"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  PC06W00.TA1TBLKE = " "; /* Initialize work key*/
  PC06W00.PC06WKA1 = VPOITM03.XGPCD; /* Key field 1*/
  PC06W00.PC06WKN2 = VPOITM03.PC3PONBR; /* Key field 2*/
  PC06W00.PC06WKA3 = VPOITM03.PC4ORTYP; /* Key field 3*/
  PC06W00.PC06WKA4 = VPOITM03.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC06W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC06610

// Fetch next row  -     VPOITM01
Function PC06620()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOITM03.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N7"; /* Function*/
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC06W00.PC06WDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC06W00.XXXPRCNM = "PC06620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC06620"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  PC06W00.TA1TBLKE = " "; /* Initialize work key*/
  PC06W00.PC06WKA1 = VPOITM03.XGPCD; /* Key field 1*/
  PC06W00.PC06WKN2 = VPOITM03.PC3PONBR; /* Key field 2*/
  PC06W00.PC06WKA3 = VPOITM03.PC4ORTYP; /* Key field 3*/
  PC06W00.PC06WKA4 = VPOITM03.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC06W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC06620

// Close cursor    -     VPOITM01
Function PC06630()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C7"; /* Function*/
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC06W00.XXXPRCNM = "PC06630"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM03 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC06630"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC06630

//*** RECORD=PC06W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC06W00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 PC06WSWR PC06WSWR ; 
  10 PC06WDCF PC06WDCF ; 
  10 PC06WIX1 PC06WIX1 ; 
  10 SY1STNBR SY1STNBR ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC06WKA1 PC06WKA1 ; 
      20 PC06WKN1 PC06WKN1 ; 
      20 * char(1) ; 
    15 PC06WKA2 PC06WKA2 ; 
      20 PC06WKN2 PC06WKN2 ; 
      20 * char(1) ; 
    15 PC06WKA3 PC06WKA3 ; 
      20 PC06WKN3 PC06WKN3 ; 
      20 * char(1) ; 
    15 PC06WKA4 PC06WKA4 ; 
      20 PC06WKN4 PC06WKN4 ; 
      20 * char(1) ; 
end // end PC06W00

//*** RECORD=PC06W01 ****
// ******* MAP ADDRESS STORAGE FOR PC06M001 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// 09/12/90   Gamen    Added xowcd
// ***********************
Record PC06W01 type basicRecord
  5 PC06W1GP PC06W1GP ; 
    10 PC3PONBR PC3PONBR ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XDMCD XDMCD ; 
    10 XOWCD XOWCD ; 
end // end PC06W01

// Group of selection fields
DataItem PC06W1GP char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC06WDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index 1
DataItem PC06WIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC06WKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC06WKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC06WKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC06WKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC06WKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC06WKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC06WKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC06WKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data flag
DataItem PC06WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

