package pc0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0J ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//          P.O. PRODUCT INQUIRY/MAINTENANCE SELECTION
// 
//    This program will allow the user to inquire/maintain
// P.O. Item information.  The user will be accessing an entry
// screen by entering option 31 from the P.O. Order Menu
// screen.  In doing so, the user has the ability to enter
// desired criteria on a particular P.O. Item and be transfered
// to an application according to the entered data.
// 
//    The user may inquire, change, or split up to 20 item
// database rows in one pass to the appropriate application by
// means of a pass record, PCWREC.CAUSERA via COMMAREA.CAUSERA.
// 
//    Curtain fields will be protected and thus can not be
// changed dependent on security and GPC code.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 06/01/89   SFORD    New Application
// 09/14/90   mpisto   reduce p.o. field to 9 digits
// 09/26/90   lsutto   allow gpc 07 access
// 01/25/91   ZLefko   A77B - Modify status cd 'CX' to display
//                     only user cancelled items and allow for
//                     status cd '*X' to display all cancelled
//                     items, for GPC '03' only.
// 02/11/91   ZLefko   Re-gen for table changes.
// 05/07/92   lsutto   fix blank fcty verify bug in pc0j517
// 02/18/94   dhales   limit access to pc0k and pc0n to po
//                     nbrs greater than 300000 (domestic)
// 02/24/94   chaert   limit access to pc0k and pc0n to po
//                     nbrs less than 100000 or greater than
//                     300000.  pc0j630
// 11/01/94   jjuch    Change pc0j630 to exclude apao po nbrs.
// 06/13/97   PHARWO   PCA367 - PPR PROJECT - P.O. VIEWS
// 07/03/97   jniese   PCA367 - ppr fixes
// 07/27/99   drammo   PCF198 - Invalidate Split option for
//                     FTWR POs of LP type.
// 02/13/03   MNADEL   Remove range check for footwear po's
//                     in PC0J630.
// 10/27/03    AVERMA  Removed  the check for PO number range .
// *********************
Program PC0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC0JW00 PC0JW00; // record
  PC0JW01 PC0JW01; // record
  PC0JW02 PC0JW02; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PC0JM.PC0JM001,  // forms
      PC0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ****************** Start of XPPC001 FLOW ********************/
     /* **                                                        ***/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0JM001 initial;
    set PC0JW00 empty;
    set PC0JW01 empty;
    set PC0JW02 empty;
    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM03 empty;
    set FY1REC empty;
    set PG2REC empty;
    set PCYREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    PC0JW00.PC0JWSWF = "Y"; /* ===>format map switch*/
    PC0JW00.PC0JWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PC0JW00.PC0JWMOD = "N"; /* ===>MODified data flag*/
    PC0JW00.PC0JWMLT = "N"; /* ===>Multiple styes flag*/
    PCWREC.PCWMAP = 1;
    PC0JW01.PC0JMSEL = "I";

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        PC0JW01.PC0JMSEL = "C";
      else
        if (COMMAREA.CAILVL[1] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0JW00.PC0JWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        PC0JW01.PC0JMSEL = "C";
      else
        if (COMMAREA.CAILVL[2] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0JW00.PC0JWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        PC0JW01.PC0JMSEL = "C";
      else
        if (COMMAREA.CAILVL[3] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0JW00.PC0JWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        PC0JW01.PC0JMSEL = "C";
      else
        if (COMMAREA.CAILVL[7] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0JW00.PC0JWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07"
     && PCWREC.XGPCD != "  ")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PC0JW00.PC0JWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end

    if (COMMAREA.CAFROMAP == "PC0E"
     || COMMAREA.CAFROMAP == "PC0L")

      PC0JW01.PO-REG-CD = PCWREC.PO-REG-CD;
      PC0JW01.PC3PONBR = PCWREC.PC3PONBR; /* ===> move to record*/
      PC0JM001.PC3PONBR = PCWREC.PC3PONBR;
      PC0JW00.PC3POIDT = PCWREC.PC3POIDT;
      PC0JW00.PC4ORTYP = PCWREC.PC4ORTYP;
      PC0JW00.FY1FCTYC = PCWREC.FY1FCTYC;
      PC0JW01.SY1STNBR = PCWREC.SY1STNBR;
      PC0JM001.SY1STNBR = PCWREC.SY1STNBR;

    end

    if (COMMAREA.CAFROMAP == "PC0K"
     || COMMAREA.CAFROMAP == "PC0N")
      /* -------*/

      PC0JW01.PO-REG-CD = PCWREC.PO-REG-CD;
      PC0JW00.PC3POIDT = PCWREC.PC3POIDT;
      PC0JW00.PC4ORTYP = PCWREC.PC4ORTYP;
      PC0JW00.FY1FCTYC = PCWREC.FY1FCTYC;

      /* -------*/
      if (PCWREC.CAFROMAP[1] == "PC0J")
        PC0JW02.PC0JWUSR = PCWREC.PCWUSER1;
        PC0JW01.PC0JMSEL = PCWREC.PCWFNC[1];
        PCWREC.CAFROMAP[1] = " ";
        PCWREC.PCWUSER1 = " ";
        PCWREC.PCWFNC[1] = " ";

      else
        if (PCWREC.CAFROMAP[2] == "PC0J")
          PC0JW02.PC0JWUSR = PCWREC.PCWUSER2;
          PC0JW01.PC0JMSEL = PCWREC.PCWFNC[2];
          PCWREC.CAFROMAP[2] = " ";
          PCWREC.PCWUSER2 = " ";
          PCWREC.PCWFNC[2] = " ";

        else
          if (PCWREC.CAFROMAP[3] == "PC0J")
            PC0JW02.PC0JWUSR = PCWREC.PCWUSER3;
            PC0JW01.PC0JMSEL = PCWREC.PCWFNC[3];
            PCWREC.CAFROMAP[3] = " ";
            PCWREC.PCWUSER3 = " ";
            PCWREC.PCWFNC[3] = " ";

          else
            if (PCWREC.CAFROMAP[4] == "PC0J")
              PC0JW02.PC0JWUSR = PCWREC.PCWUSER4;
              PC0JW01.PC0JMSEL = PCWREC.PCWFNC[4];
              PCWREC.CAFROMAP[4] = " ";
              PCWREC.PCWUSER4 = " ";
              PCWREC.PCWFNC[4] = " ";

            end
          end
        end
      end

      /* MOVE PC0JW02 TO PC0JM001      ;===> move corr. data to map*/
      PC0JM001.XGPCD = PC0JW02.XGPCD; /* GPC code*/
      /* MOVE PC0JW02.po-reg-cd TO PC0JM001.po-reg-cd;/* PO region*/
      PC0JM001.PC3PONBR = PC0JW02.PC3PONBR; /* PO number*/
      PC0JM001.FY1FCTYC = PC0JW02.FY1FCTYC;
      PC0JM001.SY1STNBR = PC0JW02.SY1STNBR;
      PC0JM001.SY2CLRID = PC0JW02.SY2CLRID;
      PC0JM001.XDMCD = PC0JW02.XDMCD;
      PC0JM001.XQACD = PC0JW02.XQACD;
      PC0JM001.XOWCD = PC0JW02.XOWCD;
      PC0JM001.XPGCD = PC0JW02.XPGCD;
      PC0JM001.XUMCD = PC0JW02.XUMCD;
      PC0JM001.XWHCD = PC0JW02.XWHCD;
      PC0JM001.YSMXDV = PC0JW02.YSMXDV;
      PC0JM001.XDSCD = PC0JW02.XDSCD;
      PC0JM001.PC2INSEG = PC0JW02.PC2INSEG;
      PC0JM001.YMTCD = PC0JW02.YMTCD;
      PC0JM001.PC6PLAN = PC0JW02.PC6PLAN;
      PC0JM001.PC6STAT = PC0JW02.PC6STAT;
      PC0JM001.PC2CUXID = PC0JW02.PC2CUXID;
      PC0JM001.PC4ORTYP = PC0JW02.PC4ORTYP;

      /* MOVE PC0JW02 TO PC0JW01       ;===> move corr. data to map*/
      PC0JW01.XGPCD = PC0JW02.XGPCD; /* GPC code*/
      PC0JW01.PO-REG-CD = PC0JW02.PO-REG-CD;
      PC0JW01.PC3PONBR = PC0JW02.PC3PONBR; /* PO number*/
      PC0JW01.PC3POIDT = PC0JW02.PC3POIDT;
      PC0JW01.PCFSECD = PC0JW02.PCFSECD;
      PC0JW01.FY1FCTYC = PC0JW02.FY1FCTYC;
      PC0JW01.SY1STNBR = PC0JW02.SY1STNBR;
      PC0JW01.SY2CLRID = PC0JW02.SY2CLRID;
      PC0JW01.XDMCD = PC0JW02.XDMCD;
      PC0JW01.XQACD = PC0JW02.XQACD;
      PC0JW01.XOWCD = PC0JW02.XOWCD;
      PC0JW01.XPGCD = PC0JW02.XPGCD;
      PC0JW01.XUMCD = PC0JW02.XUMCD;
      PC0JW01.XWHCD = PC0JW02.XWHCD;
      PC0JW01.YSMXDV = PC0JW02.YSMXDV;
      PC0JW01.XDSCD = PC0JW02.XDSCD;
      PC0JW01.PC2INSEG = PC0JW02.PC2INSEG;
      PC0JW01.YMTCD = PC0JW02.YMTCD;
      PC0JW01.PC6ETSDT = PC0JW02.PC6ETSDT;
      PC0JW01.PC6PLAN = PC0JW02.PC6PLAN;
      if (PC0JW02.PC6STAT == "UX"
       || PC0JW02.PC6STAT == "*X")
        PC0JW01.PC6STAT = "CX";
      else
        PC0JW01.PC6STAT = PC0JW02.PC6STAT;
      end
      PC0JW01.PC2CUXID = PC0JW02.PC2CUXID;
      PC0JW01.PC4ORTYP = PC0JW02.PC4ORTYP;
    end /* ===> from appl is PC0K*/

    if (COMMAREA.XGPCD > " ")

      PC0JM001.XGPCD = COMMAREA.XGPCD;
      PC0JW01.XGPCD = COMMAREA.XGPCD;
        /* ;*/
    else
        /* ;*/
      set PC0JM001.XGPCD cursor;

    end
     /* --                                                        --*/
    set PCWREC empty; /* ===> since this is a level (1) application*/
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0J001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PC0J001: PC0J001();
    goto PC0J001;
  end // end main
end // end PC0J

// application main line
Function PC0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0JW00.PC0JWXIT == "Y")
    XSPCS01(); /* =====>Exit to PC0A application*/
  end

  PC0J200(); /* Format and display the map*/

  PC0J300(); /* Check attention identifier*/

  PC0J400(); /* Reset fields to normal intensity*/

  PC0J500(); /* Verify the entered data*/

  PC0J600(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0J001 ***********************/
end // end PC0J001

// -->Format and converse the map
Function PC0J200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

   /* IF EZEMNO EQ 0                  ; No error found*/

  if (PC0JW00.PC0JWSWF == "Y") /* Map must be formatted*/

    PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

    PC0JM001.XGPCD = PC0JW01.XGPCD; /* GPC code*/

    if (COMMAREA.CAFROMAP != "PC0K"
     && COMMAREA.CAFROMAP != "PC0N"
     && COMMAREA.CAFROMAP != "PC0L"
     && COMMAREA.CAFROMAP != "PC0E")

      PC0JM001.PC0JMSEL = "I"; /* function selection*/
      PC0JW01.PC0JMSEL = "I"; /* function selection*/

      if (COMMAREA.CAILVL[5] == "Y") /* =======> not Authorized to change*/
        PC0JM001.YSMXDV = "20"; /* division code*/
        PC0JW01.YSMXDV = "20"; /* division code*/
      else
        PC0JM001.YSMXDV = "10"; /* division code*/
        PC0JW01.YSMXDV = "10"; /* division code*/
      end
      PC0JM001.XDSCD = "*"; /* distribution method*/
      PC0JW01.XDSCD = "*"; /* distribution method*/
      PC0JM001.PC6STAT = "OP"; /* Item Status Code*/
      PC0JW01.PC6STAT = "OP"; /* Item Status Code*/

    else
      PC0JM001.PC0JMSEL = PC0JW01.PC0JMSEL; /* function selection*/
    end

    if (COMMAREA.CAFROMAP == "PC0L"
     || COMMAREA.CAFROMAP == "PC0E")

      if (COMMAREA.CAILVL[5] == "Y") /* =======> not Authorized to change*/
        PC0JM001.YSMXDV = "20"; /* division code*/
        PC0JW01.YSMXDV = "20"; /* division code*/
      else
        PC0JM001.YSMXDV = "10"; /* division code*/
        PC0JW01.YSMXDV = "10"; /* division code*/
      end
      PC0JM001.XDSCD = "*"; /* distribution method*/
      PC0JW01.XDSCD = "*"; /* distribution method*/
      PC0JM001.PC6STAT = "OP"; /* Item Status Code*/
      PC0JW01.PC6STAT = "OP"; /* Item Status Code*/

    end

    if (PC0JW01.XGPCD == "03"
     && PC0JW01.PC3POIDT != 0
     && COMMAREA.CAFROMAP != "PC0L"
     && COMMAREA.CAFROMAP != "PC0E")
      PC0JW00.TA2GRGGN = PC0JW01.PC3POIDT; /* ===> numeric date*/
      PC0JW00.TA2GRGG = PC0JW00.PC0JWDT; /* ===> character date*/
      PC0JM001.PC0JMPYR = PC0JW01.PCFSECD;
      /* MOVE PC0JW00.PC0JMPYR TO PC0JM001.PC0JMPYR;*/
      PC0JM001.PC0JMPMO = PC0JW00.PC0JMPMO;
      PC0JM001.PC0JMPDM = PC0JW00.PC0JMPDM;
    else
      PC0JM001.PC0JMPYR = " ";
      PC0JM001.PC0JMPMO = " ";
      PC0JM001.PC0JMPDM = " ";
      PC0JM001.FY1FCTYC = " ";
      PC0JM001.PC4ORTYP = " ";

    end

    PC0J220(); /* ===> check security and format*/

  end

  if (converseVar.validationMsgNum != 0) /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0JM001.XXXPRCNM = PC0JW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0JM001 alarm; /* Indicate sound alarm*/

  end

  converse PC0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0JW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0J210(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0JM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0J200 ***********************/
end // end PC0J200

// Check for ? inquiry by user
Function PC0J210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0JM001.PC6STAT == "?" /* ===> if any ? entered*/
   || PC0JM001.XWHCD == "?"   
   || PC0JM001.YMTCD == "?"   
   || PC0JM001.XDSCD == "?"   
   || PC0JM001.XGPCD == "?"   
   || PC0JM001.XDMCD == "?"   
   || PC0JM001.XQACD == "?"   
   || PC0JM001.XOWCD == "?"   
   || PC0JM001.PC2INSEG == "?"
   || PC0JM001.XPGCD == "?"   
   || PC0JM001.XUMCD == "?") 

    /* ------------------------------------------------------------*/
                 /* STATUS TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC6STAT == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      STATUS TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPU01(); /* =======> perform statud code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.PC6STAT = PC0JW01.PC6STAT; /* ===> reset map field*/
      end
      set PC0JM001.PC6STAT cursor;
    end

    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XWHCD = PC0JW01.XWHCD; /* ===> reset map field*/
      end
      set PC0JM001.XWHCD cursor;
    end

    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.YMTCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.YMTCD = PC0JW01.YMTCD; /* ===> reset map field*/
      end
      set PC0JM001.YMTCD cursor;
    end

    /* ------------------------------------------------------------*/
               /* DIRECT SHIP TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XDSCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIRECT SHIP TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDS01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XDSCD = PC0JW01.XDSCD; /* ===> reset map field*/
      end
      set PC0JM001.XDSCD cursor;
    end

    /* ------------------------------------------------------------*/
             /* GPC CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XGPCD == "?") /* if ? in  code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  GPC CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform GPC Code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XGPCD = PC0JW01.XGPCD; /* ===> reset map field*/
      end
      set PC0JM001.XGPCD cursor;
    end

    /* ------------------------------------------------------------*/
               /* DIMENSION TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIMENSION TABLE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XDMCD = PC0JW01.XDMCD; /* ===> reset map field*/
      end
      set PC0JM001.XDMCD cursor;
    end

    /* ------------------------------------------------------------*/
               /* QUALITY TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XQACD = PC0JW01.XQACD; /* ===> reset map field*/
      end
      set PC0JM001.XQACD cursor;
    end

    /* ------------------------------------------------------------*/
            /* OWNER GROUP CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XOWCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " OWNER GROUP CODE TABLE "; /* heading*/
      XX0XW02.XWHCD = PC0JM001.XWHCD;
      XX0XW02.XGPCD = PC0JM001.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XOWCD = PC0JW01.XOWCD; /* ===> reset map field*/
      end
      set PC0JM001.XOWCD cursor;
    end

    /* ------------------------------------------------------------*/
             /* PACKAGE TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XPGCD == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  PACKAGE TYPE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XPGCD = PC0JW01.XPGCD; /* ===> reset map field*/
      end
      set PC0JM001.XPGCD cursor;
    end

    /* ------------------------------------------------------------*/
            /* UNIT OF MEASURE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XUMCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " UNIT OF MEASURE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform unit of measure window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0JM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* move code*/
      else
        PC0JM001.XUMCD = PC0JW01.XUMCD; /* ===> reset map field*/
      end
      set PC0JM001.XUMCD cursor;
    end

    converseLib.clearScreen();
     /* restore the original map*/

    converseLib.validationFailed(84); /* ===> press same key to process data*/

    exit stack; /* =====> exit to  display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J223 ***********************/
end // end PC0J210

// Check authorization & format
Function PC0J220()
   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAILVL[5] == "Y") /* =======> not Authorized to change*/
    set PC0JM001.YSMXDV skip; /* ====> add literal*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0J220 ***********************/
end // end PC0J220

// -->Check attention identifier
Function PC0J300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PC0JW00.PC0JWSWF = "Y"; /* Format the map switch*/
      set PC0JM001 initial;
      set PC0JM001.CATOAP cursor, bold; /* Highlight*/
      set PC0JW01 empty; /* ==>reset map display record*/
      PC0JW01.XGPCD = COMMAREA.XGPCD;

    else

      PC0JW00.XXXPRCNM = "PC0J300"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1  was pressed*/
   || converseVar.eventKey is pf3  /* or PF3  was pressed*/
   || converseVar.eventKey is pf4  /* or PF4  was pressed*/
   || converseVar.eventKey is pf5  /* or PF5  was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18) /* or PF18 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0JM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* set to application P.O. Menu*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PC0E"; /* set to application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* set to application*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* set to application*/
    end

    if (converseVar.eventKey is pf13 /* PF13 was pressed*/
     || converseVar.eventKey is pf17 /* PF17 was pressed*/
     || converseVar.eventKey is pf18) /* PF18 was pressed*/

      PC0J631(); /* ===> load pass data to pcwrec*/

      COMMAREA.CAUSERA = PCWREC.CAUSERA;
    else
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
    end

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PC0JW00.PC0JWSWF = "Y"; /* Format the map switch*/

    set PC0JM001 initial;
    set PC0JM001.CATOAP cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PC0JW00.XXXPRCNM = "PC0J300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J300 ***********************/
end // end PC0J300

// -->Reset highlighted fields
Function PC0J400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0JM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
   /* ==========>protect P.O. ID*/
  set PC0JM001.PC0JMPYR initialAttributes; /* ====> production year*/
  set PC0JM001.PC0JMPMO initialAttributes; /* ====> production month*/
  set PC0JM001.PC0JMPDM initialAttributes; /* ====> delivery month*/
  set PC0JM001.FY1FCTYC initialAttributes; /* ====> factory code*/

  set PC0JM001.XWHCD initialAttributes; /* warehouse code*/
  set PC0JM001.YMTCD initialAttributes; /* transportation mode*/
  set PC0JM001.PC2INSEG initialAttributes; /* spec diff code*/
  set PC0JM001.XQACD initialAttributes; /* quality code*/
  set PC0JM001.XOWCD initialAttributes; /* owner group code*/
  set PC0JM001.XPGCD initialAttributes; /* package type code*/
  set PC0JM001.XDMCD initialAttributes; /* dimension code*/
  set PC0JM001.XDSCD initialAttributes; /* direct ship code*/
  set PC0JM001.XUMCD initialAttributes; /* unit of measure code*/
  set PC0JM001.XGPCD initialAttributes; /* GPC Code*/

  set PC0JM001.PC3PONBR initialAttributes; /* P.O. Number*/
  set PC0JM001.PC0JMSEL initialAttributes; /* Function Selection*/
  set PC0JM001.SY1STNBR initialAttributes; /* style number*/
  set PC0JM001.SY2CLRID initialAttributes; /* color code*/
  set PC0JM001.PC6PLAN initialAttributes; /* plan code*/
  set PC0JM001.PC6STAT initialAttributes; /* Status code*/
  set PC0JM001.PC0JMETS initialAttributes; /* Est time of shipment display*/
  set PC0JM001.PC2CUXID initialAttributes; /* customer xref id*/

  set PC0JM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0JM001.CAITEM initialAttributes; /* Commarea application data*/

  if (COMMAREA.CAILVL[5] == "Y") /* =======> Authorized for DIV 20 only*/
    /* ============ Next sentence =======>*/
  else
    set PC0JM001.YSMXDV initialAttributes; /* ====> Division Code*/
  end
   /* **                                                        ***/
   /* ********************** End of PC0J140 ***********************/
end // end PC0J400

// -->Verify the entered data
Function PC0J500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0JW00.XXXPRCNM = "PC0J500"; /* Module identification*/
    set PC0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If unit of measure code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/
    if (PC0JM001.XUMCD != PC0JW01.XUMCD)
      PC0J501(); /* =========> package type code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If package type code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XPGCD != PC0JW01.XPGCD)
      PC0J502(); /* =========> package type code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If spec diff code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC2INSEG != PC0JW01.PC2INSEG)
      PC0J503(); /* =========> Verify spec diff code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If owner group changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XOWCD != PC0JW01.XOWCD
     || PC0JM001.XWHCD != PC0JW01.XWHCD
     || PC0JM001.XOWCD > " ")

      PC0J504(); /* =========> Verify owner group code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If quality was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XQACD != PC0JW01.XQACD) /* quality code*/
      PC0J505(); /* ===========> Verify quality code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XDMCD != PC0JW01.XDMCD) /* dimension code*/
      PC0J506(); /* ===========> Verify dimension code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.YSMXDV != PC0JW01.YSMXDV) /* division code*/
      PC0J507(); /* ===========> Verify division code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dist method changed, verify the entered code.*/
     /* If estimated time of shipment entered.*/
     /* If customer xref changed, verify the entered code.*/

      /* note: formated/grouped this way for map edit logic reasons*/

    /* ------------------------------------------------------------*/

    if (PC0JM001.XDSCD != PC0JW01.XDSCD       
     || PC0JM001.PC2CUXID != PC0JW01.PC2CUXID /* customer xref id*/
     || PC0JM001.PC0JMETS != PC0JW01.PC0JMETS) /* est time of shipment*/

      PC0J508(); /* ===========> Verify xref-id on table*/

      PC0J509(); /* ===========> Verify date*/

      PC0J510(); /* =========> Verify dist method code*/

      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If trans mode changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.YMTCD != PC0JW01.YMTCD)
      PC0J511(); /* =========> Verify trans mode*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If warehouse was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XWHCD != PC0JW01.XWHCD)
      PC0J512(); /* =========> Verify warehouse code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC6STAT != PC0JW01.PC6STAT)
      PC0J513(); /* =========> Verify status code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Plan was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC6PLAN != PC0JW01.PC6PLAN)
      PC0JW01.PC6PLAN = PC0JM001.PC6PLAN; /* ===>save in display rec*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If color code changed, verify the entered code.*/
     /* or related required fields changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.SY2CLRID != PC0JW01.SY2CLRID
     || PC0JM001.SY1STNBR != PC0JW01.SY1STNBR)
      PC0J514(); /* =========> Verify color code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.SY1STNBR != PC0JW01.SY1STNBR
     || PC0JM001.SY1STNBR == " ")

      PC0J515(); /* =========> Verify style code*/

    end

    /* ------------------------------------------------------------*/
     /* If P.O. Number is not entered and GPC = '02'*/
     /* --->  verify P.O. TYPE and P.O. ID*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC3PONBR == 0)

      PC0J516(); /* =========> Verify P.O. Type code*/

      PC0J517(); /* =========> verify P.O. ID*/

    else

      /* ------------------------------------------------------------*/
      /* ====> verify  secondary key info not entered*/
      /* ------------------------------------------------------------*/

      if (PC0JM001.PC4ORTYP > " "
       || PC0JM001.PC0JMPYR > " "
       || PC0JM001.PC0JMPMO > " "
       || PC0JM001.PC0JMPDM > " "
       || PC0JM001.FY1FCTYC > " ")

        set PC0JM001.PC3PONBR cursor, bold;
        set PC0JM001.PC4ORTYP bold;
        set PC0JM001.PC0JMPYR bold;
        set PC0JM001.PC0JMPMO bold;
        set PC0JM001.PC0JMPDM bold;
        set PC0JM001.FY1FCTYC bold;
        PC0JW00.XXXPRCNM = "PC0J500"; /* Module identification*/
        converseLib.validationFailed(158); /* ===> cannot both primary and*/
                                   /* secondary key*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If selection was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC0JMSEL != PC0JW01.PC0JMSEL
     || PC0JM001.XGPCD != PC0JW01.XGPCD)
      PC0J520(); /* =========> selection code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If GPC was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XGPCD != PC0JW01.XGPCD
     || PC0JM001.XGPCD == " ")
      PC0J521(); /* =========> Verify GPC code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

    /* ------------------------------------------------------------*/
     /* If P.O. Number was changed, verify the entered code.*/
     /* or is not entered, verify the data request.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC3PONBR != PC0JW01.PC3PONBR
     || PC0JM001.PC3PONBR == 0)

      PC0J522(); /* =========> Verify P.O. Number code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> data modified*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Invalidate Split option for FTWR POs of LP type*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XGPCD == "02" && 
  PC0JW00.PC4ORTYP == "LP" && 
  PC0JM001.PC0JMSEL == "S")
    PC0JW00.XXXPRCNM = "PC0J500"; /* Module identification*/
    set PC0JM001.PC0JMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(568); /* Cannot split LP POs*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors occured above & P.O. Number = 0,*/
   /* then verify & obtain an unique P.O. Number from P.O. Header*/
   /* by use of the secondary key: ---> P.O.Type & P.O.ID/Factory*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC3PONBR == 0)

    PC0J523(); /* verify unique P.O. number*/

    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0J500 ***********************/
end // end PC0J500

// Verify Unit of Measure
Function PC0J501()
  if (PC0JM001.XUMCD == " ")
    PC0JW01.XUMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.XUMCD = PC0JM001.XUMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J501"; /* Module identification*/
    set PC0JM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J501 ***********************/
end // end PC0J501

// Verify Package type
Function PC0J502()
  if (PC0JM001.XPGCD == " ")
    PC0JW01.XPGCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.XPGCD = PC0JM001.XPGCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J502"; /* Module identification*/
    set PC0JM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(55); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J502 ***********************/
end // end PC0J502

// Verify ISEG code
Function PC0J503()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC2INSEG == " ")
    PC0JW01.PC2INSEG = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
  PC2REC.PC2INSEG = PC0JM001.PC2INSEG; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT == "A")  

      PC0JW01.PC2INSEG = PC0JM001.PC2INSEG;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row found and not active status.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT != "A")  

      set PC0JM001.PC2INSEG cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J503"; /* Module identification*/
      converseLib.validationFailed(51);

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0JM001.PC2INSEG cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J503"; /* Module identification*/
      converseLib.validationFailed(51);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J503"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J503 ***********************/
end // end PC0J503

// Verify Owner Group code
Function PC0J504()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XOWCD == " ")
    PC0JW01.XOWCD = " ";
    return;
  end

  if (PC0JM001.XOWCD == "00")
    PC0JW01.XOWCD = "00";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "N") /* and owner group flag set*/
      if (PC0JM001.XOWCD == "00")

        PC0JW01.XOWCD = "00";

      else

        PC0JW00.XXXPRCNM = "PC0J504"; /* Module identification*/
        set PC0JM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end

    end

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* and owner group flag set*/

      PC0JW00.XWHCD = PC0JM001.XWHCD;
      PC0JW00.XOWCD = PC0JM001.XOWCD;

      if (PC0JW00.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PC0JW01.XOWCD = PC0JM001.XOWCD;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0JW00.XXXPRCNM = "PC0J504"; /* Module identification*/
        set PC0JM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end

    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J504"; /* Module identification*/
    set PC0JM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(119); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J504 ***********************/
end // end PC0J504

// Verify Quality code
Function PC0J505()
  if (PC0JM001.XQACD == " ")
    PC0JW01.XQACD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.XQACD = PC0JM001.XQACD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J505"; /* Module identification*/
    set PC0JM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J505 ***********************/
end // end PC0J505

// Verify Dimension code
Function PC0J506()
  if (PC0JM001.XDMCD == " ")
    PC0JW01.XDMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.XDMCD = PC0JM001.XDMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J506"; /* Module identification*/
    set PC0JM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J506 ***********************/
end // end PC0J506

// Verify Division code
Function PC0J507()
  if (PC0JM001.YSMXDV == " ")
    PC0JW01.YSMXDV = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PC0JM001.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PC0J507";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine to verify division group*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PC0JW01.YSMXDV = PC0JM001.YSMXDV;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J507"; /* Module identification*/
    set PC0JM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J507 ***********************/
end // end PC0J507

// Verify Cust Xref ID
Function PC0J508()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC2CUXID == " ")
    PC0JW01.PC2CUXID = " "; /* ==>save cust xref id moved*/
    return;
  else

    if (PC0JM001.PC2INSEG > " "
     && PC0JM001.PC2CUXID != PC2REC.PC2CUXID)
      set PC0JM001.PC2INSEG bold;
      set PC0JM001.PC2CUXID cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/
      PC0JW00.XXXPRCNM = "PC0J508"; /* Module identification*/
      converseLib.validationFailed(289); /* ===> Cust Xref does not match ISEG*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PC0JM001.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT == "A")  

      PC0JW01.PC2CUXID = PC0JM001.PC2CUXID;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row found and not active status.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     && PC2REC.XXXSTAT != "A")  

      converseLib.clearScreen();
      
      set PC0JM001.PC2CUXID cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J508"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0JM001.PC2CUXID cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J508"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J508"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J508 ***********************/
end // end PC0J508

// Verify ETS 'date'
Function PC0J509()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested.*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC0JMETS == " "
   || PC0JM001.PC0JMETS == "000000")
    PC0JW01.PC0JMETS = "000000";
                                   /* ===> clear ETS Date map display*/
    PC0JW01.PC6ETSDT = 0; /* ===> clear ETS Date display record*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "C"; /* ===>     move date type to record*/
                                   /* -->(mmddccyy)*/

  PC0JW01.PC0JMETS = PC0JM001.PC0JMETS; /* ===> save ETS Date display*/
  PC0JW00.PC0JWMM = PC0JW01.PC0JWMM; /* ===> ETS Date Month display*/
  PC0JW00.PC0JWDD = PC0JW01.PC0JWDD; /* ===> ETS Date Day   display*/
  PC0JW00.PC0JWYY = PC0JW01.PC0JWYY; /* ===> ETS Date Year  display*/
  if (PC0JW01.PC0JWYY > 85) /* ===> set up ETS Century*/
    PC0JW00.PC0JWCC = 19;
  else
    PC0JW00.PC0JWCC = 20;
  end

  TA2REC.TA2GRECN = PC0JW00.TA2GRECN; /* ===> move date -->(mmddccyy)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PC0JW01.PC6ETSDT = TA2REC.TA2GRGGN; /* ===> save ETS Date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW01.PC0JMETS = "000000";
                                   /* ===> clear ETS Date map display*/
    PC0JW00.XXXPRCNM = "PC0J509"; /* Module identification*/
    set PC0JM001.PC0JMETS cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J509 ***********************/
end // end PC0J509

// Verify Direct Ship code
Function PC0J510()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested/entered*/
      /* and both related codes are not entered*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XDSCD == "*")
    PC0JW01.XDSCD = "*";
    return;
  end

  if (PC0JM001.XWHCD > " " /* Code entered*/
   && PC0JM001.PC2CUXID > " ") /* Code entered*/

    PC0JW00.XXXPRCNM = "PC0J510"; /* Module identification*/
    set PC0JM001.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(74); /* invalid cannot enter when both*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XDSCD in XDSTBL.XDSCD /* Code in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    /* ------------------------------------------------------------*/
     /* check user's authority for direct ship request*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/

      if (PC0JM001.XDSCD != "1"
       && PC0JM001.XDSCD != "2")
        PC0JW00.XXXPRCNM = "PC0J510"; /* Module identification*/
        set PC0JM001.XDSCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(163); /* not authorized*/
        return;
      end

    end

    PC0JW01.XDSCD = PC0JM001.XDSCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J510"; /* Module identification*/
    set PC0JM001.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(60); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J510 ***********************/
end // end PC0J510

// Verify Trans Mode
Function PC0J511()
   /* ------------------------------------------------------------*/
   /* Determine is reguested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.YMTCD == " ")
    PC0JW01.YMTCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.YMTCD in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.YMTCD = PC0JM001.YMTCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J511"; /* Module identification*/
    set PC0JM001.YMTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J511 ***********************/
end // end PC0J511

// Verify Product Warehouse
Function PC0J512()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XWHCD == " ")
    PC0JW01.XWHCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0JW01.XWHCD = PC0JM001.XWHCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J512"; /* Module identification*/
    set PC0JM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J512 ***********************/
end // end PC0J512

// Verify Status Code
Function PC0J513()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC6STAT == " ")
    PC0JW01.PC6STAT = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if request is for cancelled status and GPC '03'*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC6STAT == "*X") /* User cancelled only*/
    if (PC0JM001.XGPCD == "03") /* Apparell only*/
      PC0JM001.PC6STAT = "CX"; /* Set to status in the table*/

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table and status is active.*/
      /* ------------------------------------------------------------*/

      if (PC0JM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
       && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PC0JW01.PC6STAT = PC0JM001.PC6STAT;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0JW00.XXXPRCNM = "PC0J513"; /* Module identification*/
        set PC0JM001.PC6STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Indicate missing or invalid*/

      end

      PC0JM001.PC6STAT = "*X"; /* Set back to entered status*/

    else

      /* ------------------------------------------------------------*/
       /* If not GPC '03'*/
      /* ------------------------------------------------------------*/
      PC0JW00.XXXPRCNM = "PC0J513"; /* Module identification*/
      set PC0JM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PC0JW01.PC6STAT = PC0JM001.PC6STAT;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0JW00.XXXPRCNM = "PC0J513"; /* Module identification*/
      set PC0JM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0J513 ***********************/
end // end PC0J513

// Verify Color Code
Function PC0J514()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.SY2CLRID == " ")

    PC0JW01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.SY1STNBR == " ")

    PC0JW00.XXXPRCNM = "PC0J514"; /* Module identification*/
    set PC0JM001.SY1STNBR cursor, bold; /* Highlight*/
    set PC0JM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PC0JM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PC0JM001.SY1STNBR; /* ===> style code*/

  if (PC0JM001.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PC0JM001.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0JW01.SY2CLRID = PC0JM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0JM001.SY2CLRID cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J514"; /* Module identification*/
      converseLib.validationFailed(197);
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PC0JM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0J514 ***********************/
end // end PC0J514

// Verify Style Code
Function PC0J515()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.SY1STNBR != PC0JW01.SY1STNBR)
    PC0JW00.PC0JWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.SY1STNBR == " ")

    if (PC0JM001.XGPCD == "01" /* ====> style number is required*/
     || PC0JM001.XGPCD == "02" /* ====> style number is required*/
     || PC0JM001.XGPCD == "07") /* ====> style number is required*/

      PC0JW00.XXXPRCNM = "PC0J515"; /* Module identification*/
      set PC0JM001.SY1STNBR cursor, bold;
      set PC0JM001.SY2CLRID bold;
      converseLib.validationFailed(52);
    else
      PC0JW01.SY1STNBR = PC0JM001.SY1STNBR;

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PC0JM001.SY1STNBR; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC0JW01.SY1STNBR = PC0JM001.SY1STNBR; /* ===> color code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the color code invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PC0JM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PC0JM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PC0J515 ***********************/
end // end PC0J515

// Verify P.O.Type    (footwear)
Function PC0J516()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type modified.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC4ORTYP != PC0JW01.PC4ORTYP
   || PC0JM001.XGPCD != PC0JW01.XGPCD)

    if (PC0JM001.XGPCD != "02"
     && PC0JM001.PC4ORTYP != " ")

      set PC0JM001.PC4ORTYP cursor, bold; /* Highlight*/
      PC0JW00.XXXPRCNM = "PC0J516"; /* Module identification*/
      converseLib.validationFailed(162); /* ===> can not be entered with GPC*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC4ORTYP == " ")

    if (PC0JM001.XGPCD != "02")
      set PC0JM001.PC4ORTYP cursor, bold; /* Highlight*/
      converseLib.validationFailed(110); /* data entry required*/
    else
      PC0JW01.PC4ORTYP = " ";
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0JM001.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0JW01.PC4ORTYP = PC0JM001.PC4ORTYP; /* ===> p.o. type code*/
      PC0JW00.PC0JWMOD = "Y"; /* ===> modified data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0JM001.PC4ORTYP cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J516"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J516"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J516 ***********************/
end // end PC0J516

// Verify the P.O. ID (footwear)
Function PC0J517()
   /* ------------------------------------------------------------*/
    /* if any P.O. ID fields  modified*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC0JMPYR != PC0JW01.PC0JMPYR /* ====> production year*/
   || PC0JM001.PC0JMPMO != PC0JW01.PC0JMPMO /* ====> production month*/
   || PC0JM001.PC0JMPDM != PC0JW01.PC0JMPDM /* ====> delivery month*/
   || PC0JM001.FY1FCTYC != PC0JW01.FY1FCTYC /* ====> factory code*/
   || PC0JM001.PC4ORTYP != PC0JW01.PC4ORTYP /* ====> order type*/
   || PC0JM001.XGPCD != PC0JW01.XGPCD)      /* ====> GPC code*/

    if (PC0JM001.XGPCD != "02")

      if (PC0JM001.FY1FCTYC != " ") /* ====> factory code*/
        set PC0JM001.FY1FCTYC cursor, bold; /* Highlight*/
      end

      if (PC0JM001.PC0JMPDM != " ") /* ====> delivery month*/
        set PC0JM001.PC0JMPDM cursor, bold; /* Highlight*/
      end

      if (PC0JM001.PC0JMPMO != " ") /* ====> production month*/
        set PC0JM001.PC0JMPMO cursor, bold; /* Highlight*/
      end

      if (PC0JM001.PC0JMPYR != " ") /* ====> production year*/
        set PC0JM001.PC0JMPYR cursor, bold; /* Highlight*/
      end

      PC0JW01.PC0JMPYR = " ";
      PC0JW01.PC0JMPMO = " ";
      PC0JW01.PC0JMPDM = " ";
      PC0JW01.FY1FCTYC = " ";

      PC0JW00.XXXPRCNM = "PC0J517"; /* Module identification*/
      converseLib.validationFailed(162); /* can not be entered with GPC*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
    /* if any P.O. ID fields are left blank then error*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC0JMPYR == " " /* ====> production year*/
   || PC0JM001.PC0JMPMO == " " /* ====> production month*/
   || PC0JM001.PC0JMPDM == " " /* ====> delivery month*/
   || PC0JM001.FY1FCTYC == " " /* ====> factory code*/
   || PC0JM001.PC4ORTYP == " ") /* ====> order type*/

    if (PC0JM001.XGPCD == "02")

      if (PC0JM001.PC4ORTYP == " ") /* ====> order type*/
        set PC0JM001.PC4ORTYP cursor, bold;
      end

      if (PC0JM001.FY1FCTYC > " ") /* =====>if fcty was entered*/
        PC0J518(); /* =====>verify factory code*/
        PC0J519(); /* =====>verify date*/
      else
        set PC0JM001.FY1FCTYC cursor, bold;
      end

      PC0JW00.XXXPRCNM = "PC0J517"; /* Module identification*/
      converseLib.validationFailed(110); /* invalid*/
      return;

    else

      set PC0JM001.PC3PONBR cursor, bold; /* Highlight*/
      set PC0JM001.PC4ORTYP initialAttributes; /* reset field*/
      PC0JW00.XXXPRCNM = "PC0J517"; /* Module identification*/
      converseLib.validationFailed(35); /* P.O. Number must be entered*/
      return;

    end

  else

    PC0J518(); /* =====>verify factory code*/

    PC0J519(); /* =====>verify date*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J517 ***********************/
end // end PC0J517

// P.O. ID, factory   (footwear)
Function PC0J518()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PC0JW01.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PC0JM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0JW01.FY1FCTYC = PC0JM001.FY1FCTYC; /* ===> factory code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0JM001.FY1FCTYC cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J518"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J518"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* **                                                        ***/
   /* ********************** End of PC0J518 ***********************/
end // end PC0J518

// P.O. ID, date      (footwear)
Function PC0J519()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Verify that the date yy & mm is valid and convert it to*/
      /* numeric form using TA0040*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC0JMPDM < "01" /* ====> production delivery month*/
   || PC0JM001.PC0JMPDM > "12") /* ====> production delevery month*/

    set PC0JM001.PC0JMPDM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate missing or invalid*/

  end

  if (PC0JM001.PC0JMPMO < "01" /* ====> production month*/
   || PC0JM001.PC0JMPMO > "12") /* ====> production month*/

    set PC0JM001.PC0JMPMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate missing or invalid*/

  end

  if (PC0JM001.PC0JMPYR > "99" /* ====> production year month*/
   || PC0JM001.PC0JMPYR < "00") /* ====> production year month*/

    set PC0JM001.PC0JMPYR cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum == 38 /* date error in P.O. ID*/
   || converseVar.validationMsgNum == 31) /* date error in P.O. ID*/
    PC0JW00.XXXPRCNM = "PC0J519"; /* Module identification*/
    return;
  end

   /* ===>set-up gregorian date in working storage*/

  PC0JW00.PC0JMPYR = PC0JM001.PC0JMPYR; /* ====> production year*/
  PC0JW00.PC0JMPMO = PC0JM001.PC0JMPMO; /* ====> production month*/
  PC0JW00.PC0JMPDM = PC0JM001.PC0JMPDM; /* ====> delivery month*/

  if (PC0JW00.PC0JMPYR > "85")
    PC0JW00.PC0JMPCC = "19"; /* ===>century*/
  else
    PC0JW00.PC0JMPCC = "20"; /* ===>century*/
  end

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ====> move date type to record-->(ccyymmdd)*/
  TA2REC.TA2GRGG = PC0JW00.TA2GRGG; /* ==> move production date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PC0JW01.PC0JMPYR = PC0JM001.PC0JMPYR; /* ====> production year*/
    PC0JW01.PC0JMPMO = PC0JM001.PC0JMPMO; /* ====> production month*/
    PC0JW01.PC0JMPDM = PC0JM001.PC0JMPDM; /* ====> delivery month*/
    PC0JW01.PC3POIDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J519"; /* Module identification*/
    set PC0JM001.PC0JMPYR cursor, bold; /* Highlight*/
    set PC0JM001.PC0JMPMO bold; /* Highlight*/
    set PC0JM001.PC0JMPDM bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J519 ***********************/
end // end PC0J519

// Verify the selection field
Function PC0J520()
   /* ------------------------------------------------------------*/
   /* If selection field changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC0JMSEL == "I"
   || PC0JM001.PC0JMSEL == "C"
   || PC0JM001.PC0JMSEL == "S")

    if (PC0JM001.XGPCD == "01"
     || PC0JM001.XGPCD == "02"
     || PC0JM001.XGPCD == "03"
     || PC0JM001.XGPCD == "07")

      PC0JW01.PC0JMSEL = PC0JM001.PC0JMSEL;

    end

  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0JW00.XXXPRCNM = "PC0J520"; /* Module identification*/
    set PC0JM001.PC0JMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(71);
  end

   /* **                                                        ***/
   /* ********************** End of PC0J520 ***********************/
end // end PC0J520

// Verify GPC Code & security
Function PC0J521()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PC0JM001.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0JW00.XXXPRCNM = "PC0J521";
        return;
      end
    end
  end

  if (PC0JM001.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0JW00.XXXPRCNM = "PC0J521";
        return;
      end
    end
  end

  if (PC0JM001.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0JW00.XXXPRCNM = "PC0J521";
        return;
      end
    end
  end

  if (PC0JM001.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0JW00.XXXPRCNM = "PC0J521";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.XGPCD == "01"
   || PC0JM001.XGPCD == "02"
   || PC0JM001.XGPCD == "03"
   || PC0JM001.XGPCD == "07")

    PC0JW01.XGPCD = PC0JM001.XGPCD;
    COMMAREA.XGPCD = PC0JM001.XGPCD;

  else /* ===> not valid for this application*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0JM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end /* ===> GPC in Table*/

    PC0JW00.XXXPRCNM = "PC0J521"; /* Module identification*/

  end /* ===> GPC in ('01','02','03') & valid*/

   /* **                                                        ***/
   /* ********************** End of PC0J521 ***********************/
end // end PC0J521

// Verify the P.O. Number
Function PC0J522()
   /* ------------------------------------------------------------*/
   /* check if P.O. number  field modified*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC3PONBR != PC0JW01.PC3PONBR)

    PC0JW00.PC0JWMOD = "Y";

  end

   /* ------------------------------------------------------------*/
   /* check if P.O. number  0  and if it is required.*/
   /* P.O. Number is not required if P.O. Type & P.O. ID entered*/
   /* ------------------------------------------------------------*/

  if (PC0JM001.PC3PONBR == 0)

    PC0JW01.PC3PONBR = 0;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = PC0JM001.XGPCD; /* ===> GPC*/
   /* MOVE PC0JM001.po-reg-cd TO VPOHDR02.po-reg-cd;/* ===> p.o. region*/
  VPOHDR02.PC3PONBR = PC0JM001.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0JW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* ===> p.o. region*/
      PC0JW01.PC3PONBR = VPOHDR02.PC3PONBR; /* ===> p.o. number*/
      PC0JW00.PC3POIDT = VPOHDR02.PC3POIDT; /* ===> p.o. id date*/
      PC0JW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* ===> order type*/
      PC0JW00.FY1FCTYC = VPOHDR02.FY1FCTYC; /* ===> factory code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0JM001.PC3PONBR cursor, bold;
      PC0JW00.PC0JWSWF = "N"; /* Format the map switch*/

      PC0JW00.XXXPRCNM = "PC0J522"; /* Module identification*/
      converseLib.validationFailed(69);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J522 ***********************/
end // end PC0J522

// Verify unique P.O. NBR 2nd key
Function PC0J523()
   /* ------------------------------------------------------------*/
   /* Initialize the secondary key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC0JW01.XGPCD;
  VPOHDR02.PC3POIDT = PC0JW01.PC3POIDT;
  VPOHDR02.FY1FCTYC = PC0JW01.FY1FCTYC;
  VPOHDR02.PC4ORTYP = PC0JW01.PC4ORTYP;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SA";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0JW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC0JW01.PC3PONBR = VPOHDR02.PC3PONBR;
    PC0JW00.PC3POIDT = VPOHDR02.PC3POIDT;
    PC0JW00.FY1FCTYC = VPOHDR02.FY1FCTYC;
    PC0JW00.PC4ORTYP = VPOHDR02.PC4ORTYP;

    return; /* Return to previous process*/

  end

  PC0JW00.XXXPRCNM = "PC0J523"; /* Module identification*/
  set PC0JM001.PC0JMPYR cursor, bold; /* Highlight*/
  set PC0JM001.PC0JMPMO bold; /* Highlight*/
  set PC0JM001.PC0JMPDM bold; /* Highlight*/
  set PC0JM001.FY1FCTYC bold; /* Highlight*/
  set PC0JM001.PC4ORTYP bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -811)   /* and not unique*/

    converseLib.validationFailed(112); /* =======> mulituple P.O.'s*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0JM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J523 ***********************/
end // end PC0J523

// -->Process valid input request
Function PC0J600()
   /* ------------------------------------------------------------*/
   /* This if statement process the first of multiple styles*/
     /* if user elected to proceed with display style on map*/
      /* and they did not modify any of the data.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter
   && PC0JW00.PC0JWMOD == "N" /* ===> field modifed flag*/
   && PC0JW00.PC0JWMLT == "Y") /* ===> multiple styles flag*/

    PC0J630(); /* =======>process  set up transfer to appl*/

  end

   /* ------------------------------------------------------------*/
   /* load the select row*/
   /* ------------------------------------------------------------*/

  PC0J610(); /* =======> load/process select count*/

   /* ------------------------------------------------------------*/
    /* if count > 0 and < 21 process load PCWREC*/
   /* ------------------------------------------------------------*/

  if (PCYREC.PCYCOUNT == 0)

    if (PC0JM001.PC3PONBR == 0)
      PC0JM001.PC3PONBR = VPOITM03.PC3PONBR;
    end

    set PC0JM001.PC0JMSEL cursor;
    PC0JW00.XXXPRCNM = "PC0J600"; /* Module identification*/
    converseLib.validationFailed(18); /* ===> Indicate no data found*/
    exit stack;

  end

  if (PCYREC.PCYCOUNT > 20)

    if (PC0JM001.PC3PONBR == 0)
      PC0JM001.PC3PONBR = VPOITM03.PC3PONBR;
    end

    set PC0JM001.PC0JMSEL cursor;
    PC0JW00.XXXPRCNM = "PC0J600"; /* Module identification*/
    converseLib.validationFailed(82); /* ===> Indicate row max exceeded*/
    exit stack;

  end

  PC0J620(); /* =======> process select set and load to PCWREC*/

  if (PC0JW00.PC0JWMLT == "Y") /* ===>multiple styles flag*/

    return; /* ===>exit to display map*/

  end

   /* ------------------------------------------------------------*/
    /* if successful, transfer to appropriate application*/
   /* ------------------------------------------------------------*/

  PC0J630(); /* =======>process transfer to*/
                                   /* application*/
   /* **                                                        ***/
   /* ********************** End of PC0J600 ***********************/
end // end PC0J600

// Set-up  Select Count  VPOITM03
Function PC0J610()
   /* ------------------------------------------------------------*/
   /* Load the IO MODE call record and make a select count call*/
   /* to the P.O. Item Data Base.*/
   /* ------------------------------------------------------------*/

  set VPOITM03 empty; /* ===>initialize record before loading*/
                                   /* it*/
  set PCYREC empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM03.XGPCD = PC0JW01.XGPCD;
  VPOITM03.PO-REG-CD = PC0JW01.PO-REG-CD;
  VPOITM03.PC3PONBR = PC0JW01.PC3PONBR;
  VPOITM03.PC6RTADT = -1;
  VPOITM03.PC6OETS = -1;
  VPOITM03.PC6CXNBR = -1;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XUMCD > " ")
    VPOITM03.XUMCD = PC0JW01.XUMCD;
  else
    VPOITM03.XUMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XPGCD > " ")
    VPOITM03.XPGCD = PC0JW01.XPGCD;
  else
    VPOITM03.XPGCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2INSEG > " ")
    VPOITM03.PC2INSEG = PC0JW01.PC2INSEG;
  else
    VPOITM03.PC2INSEG = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XOWCD > " ") /* owner group code*/
    VPOITM03.XOWCD = PC0JW01.XOWCD;
  else
    VPOITM03.XOWCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If quality, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XQACD > " ") /* quality code*/
    VPOITM03.XQACD = PC0JW01.XQACD;
  else
    VPOITM03.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If dimension, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XDMCD > " ") /* dimension code*/
    VPOITM03.XDMCD = PC0JW01.XDMCD;
  else
    VPOITM03.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If division, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YSMXDV > " ") /* division code*/
    VPOITM03.YSMXDV = PC0JW01.YSMXDV;
  else
    VPOITM03.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer xref, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2CUXID > " ") /* customer xref id*/
    VPOITM03.PC2CUXID = PC0JW01.PC2CUXID;
  else
    VPOITM03.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If estemated time of shipment, load select record*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6ETSDT > 0) /* est time of shipment*/
    VPOITM03.PC6ETSDT = PC0JW01.PC6ETSDT;
  else
    VPOITM03.PC6ETSDT = -1;
  end

   /* ------------------------------------------------------------*/
      /* dist method, load select record.*/
   /* ------------------------------------------------------------*/

  VPOITM03.XDSCD = PC0JW01.XDSCD;

   /* ------------------------------------------------------------*/
   /* If trans mode, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YMTCD > " ")
    VPOITM03.YMTCD = PC0JW01.YMTCD;
  else
    VPOITM03.YMTCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XWHCD > " ")
    VPOITM03.XWHCD = PC0JW01.XWHCD;
  else
    VPOITM03.XWHCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If Status code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6STAT > " ")
    VPOITM03.PC6STAT = PC0JW01.PC6STAT;
  else
    VPOITM03.PC6STAT = "*";
  end

   /* ------------------------------------------------------------*/
   /* If plan code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6PLAN > 0)
    VPOITM03.PC6PLAN = PC0JW01.PC6PLAN;
  else
    VPOITM03.PC6PLAN = -1;
  end

   /* ------------------------------------------------------------*/
   /* If color code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY2CLRID > " ")
    VPOITM03.SY2CLRID = PC0JW01.SY2CLRID;
  else
    if (PC0JW01.XGPCD == "01"
     || PC0JW01.XGPCD == "02"
     || PC0JW01.XGPCD == "07")
      VPOITM03.SY2CLRID = "00 ";
    else
      VPOITM03.SY2CLRID = "*";
    end
  end

   /* ------------------------------------------------------------*/
   /* If style code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY1STNBR > " ")
    VPOITM03.SY1STNBR = PC0JW01.SY1STNBR;
  else
    VPOITM03.SY1STNBR = "*";
  end

  if (COMMAREA.CAILVL[4] == "Y" /* ===> direct ship security*/
   && VPOITM03.XDSCD == "*")   

    PC0JW00.PC0JWCNT = 0; /* ===> init saved I.O. mode count*/
    VPOITM03.XDSCD = "1";
    PC0J611(); /* ===> Select (T1) Count    VPOITM03*/
    PC0JW00.PC0JWCNT = PCYREC.PCYCOUNT; /* ===> save I.O. mode count*/

    VPOITM03.XDSCD = "2";
    PC0J611(); /* ===> Select (T1) Count    VPOITM03*/
    PCYREC.PCYCOUNT = PCYREC.PCYCOUNT + PC0JW00.PC0JWCNT; /* ===> sum count*/

    VPOITM03.XDSCD = "*"; /* ===> load back orig value*/

  else

    PC0J611(); /* ===> Select (T1) Count    VPOITM03*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0J610 ***********************/
end // end PC0J610

// Select (T1) Count     VPOITM03
Function PC0J611()
   /* *************************************************************/
   /* Select the count of rows returned with the above criteria*/
   /* *************************************************************/

  PCYREC.PCYFUNC = "T1";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0JW00.XXXPRCNM = "PC0J611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT OF ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIMT03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J611 ***********************/
end // end PC0J611

// Process select set/load PCWREC
Function PC0J620()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PC0J621(); /* ========> select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into PCWREC until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC0JW00.PC0JWSWC == "N") /* Until end of cursor*/

    PC0J622(); /* ==========> Fetch selected rows*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0J623(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* if not data was loaded to transfer/display*/
           /* exit to display map*/
   /* ------------------------------------------------------------*/

  if (PC0JW00.PC0JWIXR == 0) /* increment record index*/
    converseLib.validationFailed(18); /* ===> no data was found to display*/
    PC0JW00.XXXPRCNM = "PC0J620"; /* Module identification*/
    exit stack;
  end

   /* **                                                        ***/
   /* ********************** End of PC0J620 ***********************/
end // end PC0J620

// Select the data
Function PC0J621()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* note: PC6REC has been loaded from select count process.*/
   /* ------------------------------------------------------------*/

  PC0JW00.PC0JWIXR = 0; /* ===> record line index*/
  PC0JW00.PC0JWSWC = "N"; /* ===> End of cursor switch*/
  PC0JW00.PC0JWMLT = "N"; /* ===> multiple styles flag*/
  PC0JW00.PC0JWMOD = "N"; /* ===> modified data flag*/
  move 0 to PCWREC.PC6ITMNB[1] for 20; /* ===> P.O. Item sequence number*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S7";

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0JW00.XXXPRCNM = "PC0J621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0JM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIMT03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J621 ***********************/
end // end PC0J621

// Fetch next row/load the PCWREC
Function PC0J622()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (VPOITM03.SY1STNBR == PC0JW00.PC0JWSTY /* ==> no change in style*/
       || PC0JW00.PC0JWIXR == 0)                /* ===> record index*/

        if (VPOITM03.PC6STAT == PC0JW01.PC6STAT
         /* ==> status criteria entered*/
         || PC0JW01.PC6STAT == " ")
                                   /* ==> status criteria not entered*/

          /* ------------------------------------------------------------*/
           /* screen out direct ship request for security flag*/
          /* ------------------------------------------------------------*/

          if (COMMAREA.CAILVL[4] == "Y" /* ===> direct ship security*/
           && PC0JM001.XDSCD == "*")   

            if (VPOITM03.XDSCD != "1"
             && VPOITM03.XDSCD != "2")
              return;
            end

          end

          /* ------------------------------------------------------------*/
           /* Further qualify if Cancelled status request*/
          /* ------------------------------------------------------------*/

          if (PC0JM001.XGPCD == "03") /* Apparell only*/
            if (PC0JM001.PC6STAT == " ") /* All statuses requested*/
              if (VPOITM03.PC6STAT == "CX" /* Cancelled status*/
               && VPOITM03.XXXUSRID > " ") /* User cancelled*/

                PC0JW00.PC0JWIXR = PC0JW00.PC0JWIXR + 1; /* increment record index*/
                PCWREC.PC6ITMNB[PC0JWIXR] = VPOITM03.PC6ITMNB;
                PC0JW00.PC0JWSTY = VPOITM03.SY1STNBR; /* ==> save current style*/

              else
                if (VPOITM03.PC6STAT != "CX") /* Not cancelled*/

                  PC0JW00.PC0JWIXR = PC0JW00.PC0JWIXR + 1; /* increment record index*/
                  PCWREC.PC6ITMNB[PC0JWIXR] = VPOITM03.PC6ITMNB;
                  PC0JW00.PC0JWSTY = VPOITM03.SY1STNBR; /* ==> save current style*/

                end
              end
            else
              if (PC0JM001.PC6STAT == "CX" /* Cancelled status requested*/
               && VPOITM03.XXXUSRID > " ") /* User cancelled*/

                PC0JW00.PC0JWIXR = PC0JW00.PC0JWIXR + 1; /* increment record index*/
                PCWREC.PC6ITMNB[PC0JWIXR] = VPOITM03.PC6ITMNB;
                PC0JW00.PC0JWSTY = VPOITM03.SY1STNBR; /* ==> save current style*/

              else

                if (PC0JM001.PC6STAT != "CX") /* Request non-cancelled items*/
                  PC0JW00.PC0JWIXR = PC0JW00.PC0JWIXR + 1; /* increment record index*/
                  PCWREC.PC6ITMNB[PC0JWIXR] = VPOITM03.PC6ITMNB;
                  PC0JW00.PC0JWSTY = VPOITM03.SY1STNBR; /* ==> save current style*/

                end
              end
            end
          else

            PC0JW00.PC0JWIXR = PC0JW00.PC0JWIXR + 1; /* increment record index*/
            PCWREC.PC6ITMNB[PC0JWIXR] = VPOITM03.PC6ITMNB;
            PC0JW00.PC0JWSTY = VPOITM03.SY1STNBR; /* ==> save current style*/

          end
        end

        return; /* Return to previous process*/

      else /* ==>control break for mult styles*/

        converseLib.validationFailed(113); /* ===> multiple styles (press enter to except)*/
        PC0JW00.XXXPRCNM = "PC0J622"; /* Module identification*/
        PC0JM001.SY1STNBR = PC0JW00.PC0JWSTY; /* ==> load style to map*/
        PC0JW01.SY1STNBR = PC0JW00.PC0JWSTY; /* ==>  to display record*/
        set PC0JM001.SY1STNBR cursor; /* ==>positon cursor for style entry*/
        PC0JW00.PC0JWSWC = "Y"; /* Indicate end of cursor*/
        PC0JW00.PC0JWMLT = "Y"; /* multiple styles flag*/
        return; /* Exit to display map*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0JW00.PC0JWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0JW00.XXXPRCNM = "PC0J622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOIMT03"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J622 ***********************/
end // end PC0J622

// Close selected set cursor
Function PC0J623()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0JW00.XXXPRCNM = "PC0J623"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0JW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIMT03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0J623 ***********************/
end // end PC0J623

// Set-up and transfer to appl.
Function PC0J630()
   /* ------------------------------------------------------------*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC0JMSEL == "I")
    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC[1] = "I";
  end

  if (PC0JW01.PC0JMSEL == "C")
    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC[1] = "C";
  end

  if (PC0JW01.PC0JMSEL == "S")
    COMMAREA.CATOAP = "PC0N";
  end

  PC0J631(); /* ===> load pass data to pcwrec*/

  if (COMMAREA.XGPCD == "03")
  /*  IF PC0JW01.PC3PONBR GT 299999  /* verify it must be domestic po*/
  /*    AND PC0JW01.PC3PONBR LT 700000; /* exclude eao po's 100000-300000*/
  /*;      /* next sentence           /* and apao po's 700000-999999*/
  /*  ELSE;*/
  /*    IF COMMAREA.CATOAP EQ 'PC0N'*/
  /*      OR (COMMAREA.CATOAP EQ 'PC0K'*/
  /*      AND PCWREC.PCWFNC[1] EQ 'C');*/
  /*      MOVE '    ' TO COMMAREA.CATOAP;*/
  /*      MOVE 'PC0J630' TO PC0JW00.XXXPRCNM;*/
  /*      MOVE 509 TO EZEMNO;        /* out of range message*/
  /*      SET PC0JM001.PC3PONBR CURSOR,BRIGHT;*/
  /*      EZEFLO;*/
  /*    END;*/
  /*  END;*/
  end

  PC0J632(); /* ===> load save selection pass data*/
                                   /* for return*/

  COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

  XSPCS01(); /* Exit to another application*/

   /* ===>*/
   /* ===>if exit failed, reset and return to selection map*/
   /* ===>*/

  PC0JW00.PC0JWSWF = "Y"; /* ===>format the data*/
  set PC0JM001 initial; /* set map clear*/
  set PC0JM001.CATOAP cursor, bold; /* Highlight*/
  set PC0JW01 empty; /* reset map display record*/
  PC0JW01.XGPCD = COMMAREA.XGPCD;

  exit stack; /* =================> Exit to display*/
                                   /* map*/

   /* **                                                        ***/
   /* ********************** End of PC0J630 ***********************/
end // end PC0J630

// load "PCWREC" w/ Sel pass data
Function PC0J631()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0JW01.XGPCD;
  PCWREC.PO-REG-CD = PC0JW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0JW01.PC3PONBR;

  if (COMMAREA.CATOAP == "PC0K"
   || COMMAREA.CATOAP == "PC0N"
   || COMMAREA.CATOAP == "PC0L"
   || COMMAREA.CATOAP == "PC0E")
    PCWREC.PC3POIDT = PC0JW00.PC3POIDT;
    PCWREC.PC4ORTYP = PC0JW00.PC4ORTYP;
    PCWREC.FY1FCTYC = PC0JW00.FY1FCTYC;
  end

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PC0JW01.XUMCD > " ")
    PCWREC.XUMCD = PC0JW01.XUMCD;
  else
    PCWREC.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XPGCD > " ")
    PCWREC.XPGCD = PC0JW01.XPGCD;
  else
    PCWREC.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2INSEG > " ")
    PCWREC.PC2INSEG = PC0JW01.PC2INSEG;
  else
    PCWREC.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XOWCD > " ") /* owner group code*/
    PCWREC.XOWCD = PC0JW01.XOWCD;
  else
    PCWREC.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XQACD > " ") /* quality code*/
    PCWREC.XQACD = PC0JW01.XQACD;
  else
    PCWREC.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XDMCD > " ")
    PCWREC.XDMCD = PC0JW01.XDMCD;
  else
    PCWREC.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YSMXDV > " ")
    PCWREC.YSMXDV = PC0JW01.YSMXDV;
  else
    PCWREC.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2CUXID > " ")
    PCWREC.PC2CUXID = PC0JW01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6STAT > " ")
    if (PC0JW01.PC6STAT == "CX")
      if (PC0JM001.PC6STAT == "CX")
        PCWREC.PC6STAT = PC0JW01.PC6STAT;
      else
        PCWREC.PC6STAT = "*X";
      end
    else
      PCWREC.PC6STAT = PC0JW01.PC6STAT;
    end
  else
    PCWREC.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
    /* IF ESTEMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6ETSDT > 0)
    PCWREC.PC6ETSDT = PC0JW01.PC6ETSDT;
  else
    PCWREC.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF DIST METHOD, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XDSCD > " ")
    PCWREC.XDSCD = PC0JW01.XDSCD;
  else
    PCWREC.XDSCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YMTCD > " ")
    PCWREC.YMTCD = PC0JW01.YMTCD;
  else
    PCWREC.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XWHCD > " ")
    PCWREC.XWHCD = PC0JW01.XWHCD;
  else
    PCWREC.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6PLAN > 0)
    PCWREC.PC6PLAN = PC0JW01.PC6PLAN;
  else
    PCWREC.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY2CLRID > " ")
    PCWREC.SY2CLRID = PC0JW01.SY2CLRID;
  else
    PCWREC.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY1STNBR > " ")
    PCWREC.SY1STNBR = PC0JW01.SY1STNBR;
  else
    PC0JW02.SY1STNBR = " ";
  end

   /* ********************** End of PC0J631 ***********************/
end // end PC0J631

// load/save pass data for return
Function PC0J632()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/

  PC0JW02.XGPCD = PC0JW01.XGPCD;
  PC0JW02.PO-REG-CD = PC0JW01.PO-REG-CD;
  PC0JW02.PC3PONBR = PC0JW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PC0JW01.XUMCD > " ")
    PC0JW02.XUMCD = PC0JW01.XUMCD;
  else
    PC0JW02.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XPGCD > " ")
    PC0JW02.XPGCD = PC0JW01.XPGCD;
  else
    PC0JW02.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2INSEG > " ")
    PC0JW02.PC2INSEG = PC0JW01.PC2INSEG;
  else
    PC0JW02.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XOWCD > " ") /* owner group code*/
    PC0JW02.XOWCD = PC0JW01.XOWCD;
  else
    PC0JW02.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XQACD > " ") /* quality code*/
    PC0JW02.XQACD = PC0JW01.XQACD;
  else
    PC0JW02.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XDMCD > " ")
    PC0JW02.XDMCD = PC0JW01.XDMCD;
  else
    PC0JW02.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YSMXDV > " ")
    PC0JW02.YSMXDV = PC0JW01.YSMXDV;
  else
    PC0JW02.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC2CUXID > " ")
    PC0JW02.PC2CUXID = PC0JW01.PC2CUXID;
  else
    PC0JW02.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6STAT > " ")
    if (PC0JW01.PC6STAT == "CX")
      if (PC0JM001.PC6STAT == "CX")
        PC0JW02.PC6STAT = PC0JW01.PC6STAT;
      else
        PC0JW02.PC6STAT = "*X";
      end
    else
      PC0JW02.PC6STAT = PC0JW01.PC6STAT;
    end
  else
    PC0JW02.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
    /* IF ESTEMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6ETSDT > 0)
    PC0JW02.PC6ETSDT = PC0JW01.PC6ETSDT;
  else
    PC0JW02.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF DIST METHOD, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XDSCD > " ")
    PC0JW02.XDSCD = PC0JW01.XDSCD;
  else
    PC0JW02.XDSCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.YMTCD > " ")
    PC0JW02.YMTCD = PC0JW01.YMTCD;
  else
    PC0JW02.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.XWHCD > " ")
    PC0JW02.XWHCD = PC0JW01.XWHCD;
  else
    PC0JW02.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.PC6PLAN > 0)
    PC0JW02.PC6PLAN = PC0JW01.PC6PLAN;
  else
    PC0JW02.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY2CLRID > " ")
    PC0JW02.SY2CLRID = PC0JW01.SY2CLRID;
  else
    PC0JW02.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0JW01.SY1STNBR > " ")
    PC0JW02.SY1STNBR = PC0JW01.SY1STNBR;
  else
    PC0JW02.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PC0J"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PC0JW02.PC0JWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PC0J"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PC0JW02.PC0JWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PC0J"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PC0JW02.PC0JWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PC0J"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PC0JW02.PC0JWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0J632 ***********************/
end // end PC0J632

//*** RECORD=PC0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PC0JW00 type basicRecord
  10 PC0JWSWR PC0JWSWR ; 
  10 PC0JWSWF PC0JWSWF ; 
  10 PC0JWSWC PC0JWSWC ; 
  10 PC0JWIXR PC0JWIXR ; 
  10 PC0JWXIT PC0JWXIT ; 
  10 PC0JWMOD PC0JWMOD ; 
  10 PC0JWMLT PC0JWMLT ; 
  10 PC0JWCNT PC0JWCNT ; 
  10 * char(3) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PC0JWSTY PC0JWSTY ; 
  10 * char(3) ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 * char(3) ; 
  10 PC0JWDT PC0JWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC0JMPCC PC0JMPCC ; 
    15 PC0JMPYR PC0JMPYR ; 
    15 PC0JMPMO PC0JMPMO ; 
    15 PC0JMPDM PC0JMPDM ; 
  10 * char(3) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC0JWMM PC0JWMM ; 
    15 PC0JWDD PC0JWDD ; 
    15 PC0JWCC PC0JWCC ; 
    15 PC0JWYY PC0JWYY ; 
  10 * char(3) ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
end // end PC0JW00

//*** RECORD=PC0JW01 ****
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PC0JM.PC0JM001
// 
//    RECORD NAME:      PC0JW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information  that relates to a P.O. Item.
//    This record information is processed in a (Select Set)
//    to retrieve rows for subsequent applications.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// ***********************
Record PC0JW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 TA2GRGE TA2GRGE ; 
    15 PC0JMPYR PC0JMPYR ; 
    15 PC0JMPMO PC0JMPMO ; 
    15 PC0JMPDM PC0JMPDM ; 
  10 PCFSECD PCFSECD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XSECD XSECD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XWHCD XWHCD ; 
  10 YSMXDV YSMXDV ; 
  10 XDSCD XDSCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 YMTCD YMTCD ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PC0JMETS PC0JMETS ; 
    15 PC0JWMM PC0JWMM ; 
    15 PC0JWDD PC0JWDD ; 
    15 PC0JWYY PC0JWYY ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC6STAT PC6STAT ; 
  10 PC2CUXID PC2CUXID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC0JMSEL PC0JMSEL ; 
end // end PC0JW01

//*** RECORD=PC0JW02 ****
// **************** PRODUCTION ORDER ITEM  RECORD *************
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      PC0JM.PC0JM001
// 
//    RECORD NAME:      PC0JW02
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the data that was entered
//    the user at the start of this application.  Also, map and
//    temp storage pages are saved for the return from a lower
//    level application.
// 
//       The desired saved data is loaded to this record when
//    when a transfer to PC0K or PC0N is requested
//    and then loaded to the first available user area in the
//    PCWREC.
// 
//      On the return from one of the above applications, the
//    appropraite user area is laoded to this record and
//    processed accordingly.
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER ITEM  RECORD *************
// ***********************
Record PC0JW02 type basicRecord
  5 PC0JWUSR PC0JWUSR ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XSECD XSECD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XWHCD XWHCD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YMTCD YMTCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6STAT PC6STAT ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(436) ; 
end // end PC0JW02

// PC_EST_HDT map display
DataItem PC0JMETS char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production century
DataItem PC0JMPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Delevery Month
DataItem PC0JMPDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production Month
DataItem PC0JMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production Year
DataItem PC0JMPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. menu selection/maint
DataItem PC0JMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC0JWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count saved for D.S. security
DataItem PC0JWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ETS date day map display
DataItem PC0JWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHAR data form
DataItem PC0JWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PC0JWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// multiple styles flag
DataItem PC0JWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PC0JWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PC0JWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved/previous style number
DataItem PC0JWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PC0JWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PC0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PC0JWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PC0JWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PC0JWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end