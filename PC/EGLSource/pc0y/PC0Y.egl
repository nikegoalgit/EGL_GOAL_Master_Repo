package pc0y;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=PC0Y ****
//   This application brings up a list of P.O. item audits.
// The database will return 0 to N rows based upon the
// selection criteria passed in.  The application will format
// the screen with the information returned from the database.
// and will be displayed one plan within one color within one
// product/destination at a time.
// 
//   The user will enter this program by pressing enter from
// P.O. audit inquiry selection (PC0Q) with a selection type
// of 'I'.  After pressing PF3 the user will return to that
// program.
// 
//   The user may scroll through the data by pressing either
// PF7(backward) of PF8 (forward) if more than one page exists.
// the next plan may be viewed by pressing pf19. The next color
// may be viewed by pressing enter. The next product/dest may
// be viewed by pressing pf18. Size changes may be viewed by
// pressing pf9 with a selection.
// 
// 
//   DATE     NAME   DESCRIPTION OF CHANGE
// --------  ------  ------------------------------------------
// 08/07/89  JNEWMA  New application.
// 
// 08/25/89  JNEWMA  Use 'S3' for select of VPOAIT01
// 
// 06/13/90  SFORD   Div 20 screen out for security flag(5)
//                   (PC0Y110)
// 
// 09/11/90  CHAERT  Add ETS Date and Mode of Trans to if stmt
//                   in PC0Y116.  Sets up correct page numbers
//                   for Product/Dest.
// 
// 10/19/90  CHAERT  On PC0YM003, before and after QTY not
//                   displaying correctly.  See PC0Y173.
// 
// 11/28/90  kdenne  changed change memo nbr to be oa memo nbr
//                   for gpc '02' and this area is darken for
//                   gpc '03'.  changes made in the following:
//                     pc0yw01, pc0yw02, pc0ym001, pc0ym002,
//                     pc0ym003, pc0ym004, pc0y121, pc0y163,
//                     pc0y173, pc0y221, pc0ys11, pc0ys12,
//                     pc0ys13, pc0ys14.
// 
// 12/26/90  lsutto  add owner group to screens
// 12/30/91  chaert  add op1 fields to screens, w01,w02,all map
//                     121,163,173,221
// 02/12/92  lsutto  increase occurs in pc0yw03 from 100 to 200
//                   pc0ym001,2 product/dest page # now 3 char.
// 10/07/93  chaert  pc0y160, if no audit size record, display
//                   message, do not abend.
// 06/03/97  PHARWO  PCA367 - PPR PROJECT, PO VIEWS
// 07/07/97  jniese  PCA367 - PPR corrections
// 08/21/98  dsinha  PCF163 - To use DRDA and to display
//                            Reg code description.
// *********************
Program PC0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC0YW00 PC0YW00; // record
  PC0YW01 PC0YW01; // record
  PC0YW02 PC0YW02; // record
  PC0YW03 PC0YW03; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOREG01 VPOREG01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YACTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PC0YM.PC0YM001,  // forms
      PC0YM.PC0YM002, 
      PC0YM.PC0YM003, 
      PC0YM.PC0YM004
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC0Y001; /* Special Initialization*/

    PC0Y001: PC0Y001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC0Y002; /* Converse main process*/
    PC0Y002: PC0Y002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0Y002; /* Converse Detail Schedule List*/


  end // end main
end // end PC0Y

// Special Initialization
Function PC0Y001()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] != "PC0Q" /* If not coming from PC0Q*/
   || COMMAREA.CAFROMAP != "PC0Q")
    COMMAREA.CATOAP = "PC0A"; /* Load for transfer*/
    PCWREC.XXXMSGNO = 191; /* Cannot fastpath to here*/
    XSPCS01(); /* Transfer to P.O. menu*/
    exit stack; /* Display message if error in transfer*/
  end
  PCWREC.CAFROMAP[2] = " "; /* Init from ap 2 for error transfer*/

  set PC0YW00 empty; /* Initialize working storage*/
  set PC0YW01 empty; /* Initialize map 001 detail format*/
  set PC0YW02 empty; /* Initialize map 001 storage area*/
  set PC0YW03 empty; /* Initialize page nuber array*/
  set PC0YM001 initial; /* M001 input/output*/
  set PC0YM002 initial; /* M001 input/output*/
  set PC0YM003 initial; /* M001 input/output*/
  set PC0YM004 initial; /* M001 input/output*/
  set VPOAIT02 empty; /* PO dest item plan audit table*/
  set VPOASZ02 empty; /* PO item size audit table*/
  set PCYREC empty; /* PO date pass record*/
  set PG2REC empty; /* Production style/color table*/
  set PG3REC empty; /* Size description translation record*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA2REC empty;
                                   /* Date conversion and validation record*/
  set TA5REC empty; /* Temporary storage*/

  PC0YW00.XXXPRCNM = "PC0Y"; /* Module identification*/
  PC0YW00.XXXTSLEN = 1557; /* Page length*/
  PC0YW00.XXXTSPAG = 1; /* First page requested*/
  PC0YW00.PCWMAP = 1; /* First map requested*/

end // end PC0Y001

// Main process to display a map
Function PC0Y002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.PCWMAP == 1) /* Map 1 was requested*/

    PC0Y100(); /* Display map 1*/

  else

    PC0Y200(); /* Display map 2*/

  end

end // end PC0Y002

// Audit inquiry selection
Function PC0Y100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Y110(); /* Obtain data to display*/

  PC0Y120(); /* Format and display the map*/

  PC0Y130(); /* Check attention identifier*/

  PC0Y140(); /* Reset fields to normal intensity*/

  PC0Y150(); /* Verify the entered data*/

  PC0Y160(); /* Process valid input request*/

end // end PC0Y100

// Obtain data to display
Function PC0Y110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.PC0YWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0YW00.PC0YWSWR = "N"; /* display data switch*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage*/
   /* ------------------------------------------------------------*/

  PC0YS01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* IO to select and open VPOAIT02 ( P.O. AUDIT ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC0Y111(); /* Open cursor for VPOAIT02*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOAIT02 row, format & store data*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 1; /* Initialize map index*/

  while (PC0YW00.PC0YWDCF == "N") /* While more rows*/

    PC0Y112(); /* Get next VPOITD01 row*/

    if (PC0YW00.PC0YWDCF == "N") /* If more data obtained*/

      if (COMMAREA.CAILVL[5] == "Y" /* =======>Authorized for DIV 20 only*/
       && VPOAIT02.YSMXDV == "10")  /* ===> div=domestic*/

        /* ======= Next Sentence ==========>*/

      else

        if (VPOAIT02.YOACD in YOATBL.YOACD /* If audit type in table*/
         && YOATBL.YOAINQFL[sysVar.arrayIndex] == "Y") /* and online flag is yes*/

          if (VPOAIT02.YOACD == PCWREC.YOACD /* If codes match*/
           || PCWREC.YOACD == "*")           /* or wildcard*/

            if (PC0YW00.PC0YWIXM > 13                 /* If page is full*/
             || VPOAIT02.SY1STNBR != PC0YW01.SY1STNBR /* Style changed*/
             || VPOAIT02.XDMCD != PC0YW01.XDMCD       /* Dimension changed*/
             || VPOAIT02.XQACD != PC0YW01.XQACD       /* Quality changed*/
             || VPOAIT02.XOWCD != PC0YW01.XOWCD       
             /* Owner group changed*/
             || VPOAIT02.PC2INSEG != PC0YW01.PC2INSEG /* ISEG changed*/
             || VPOAIT02.XPGCD != PC0YW01.XPGCD       /* Package changed*/
             || VPOAIT02.XUMCD != PC0YW01.XUMCD       /* Unit of meas chgd*/
             || VPOAIT02.XDSCD != PC0YW01.XDSCD       
             /* Direct ship changed*/
             || VPOAIT02.XWHCD != PC0YW01.XWHCD       /* Warehouse changed*/
             || VPOAIT02.PC2CUXID != PC0YW01.PC2CUXID /* Customer changed*/
             || VPOAIT02.SY2CLRID != PC0YW01.SY2CLRID /* Color changed*/
             || VPOAIT02.PC6PLAN != PC0YW01.PC6PLAN   /* Plan changed*/
             || VPOAIT02.PC6ETSDT != PC0YW01.PC6ETSDT /* ETS Date*/
             || VPOAIT02.YMTCD != PC0YW01.YMTCD       /* Mode of Trans*/
             || VPOAIT02.OP1CUOID != PC0YW01.OP1CUOID /* sales order*/
             || VPOAIT02.OP1NORID != PC0YW01.OP1NORID) /* sales order*/

              if (PC0YW01.SY1STNBR != " ") /* If not first time in*/
                PC0Y116(); /* Load the page number array*/
                PC0Y114(); /* Add page to temporary storage*/
              end
   /* ------------------------------------------------------------*/
               /* Save the product/destination, color, and plan data*/
   /* ------------------------------------------------------------*/
              PC0YW01.SY1STNBR = VPOAIT02.SY1STNBR; /* Style*/
              PC0YW01.XDMCD = VPOAIT02.XDMCD; /* Dimension*/
              PC0YW01.XQACD = VPOAIT02.XQACD; /* Quality*/
              PC0YW01.XOWCD = VPOAIT02.XOWCD; /* Owner group*/
              PC0YW01.PC2INSEG = VPOAIT02.PC2INSEG; /* Spec diff*/
              PC0YW01.XPGCD = VPOAIT02.XPGCD; /* Package*/
              PC0YW01.XUMCD = VPOAIT02.XUMCD; /* Unit of meas*/
              PC0YW01.XDSCD = VPOAIT02.XDSCD; /* Direct ship*/
              PC0YW01.XWHCD = VPOAIT02.XWHCD; /* Warehouse*/
              PC0YW01.PC2CUXID = VPOAIT02.PC2CUXID; /* Customer*/
              PC0YW01.SY2CLRID = VPOAIT02.SY2CLRID; /* Color*/
              PC0YW01.PC6PLAN = VPOAIT02.PC6PLAN; /* Plan*/
              PC0YW01.PC6ETSDT = VPOAIT02.PC6ETSDT; /* ETS Date*/
              PC0YW01.YMTCD = VPOAIT02.YMTCD; /* Mode of Trans*/
              PC0YW01.OP1PARTN = VPOAIT02.OP1PARTN; /* Sales Order #*/
              PC0YW01.OP1CUOID = VPOAIT02.OP1CUOID; /* Sales Order #*/
              PC0YW01.OP1NORID = VPOAIT02.OP1NORID; /* Sales Order #*/
            end /* ===>      If page is full*/

            PC0Y115(); /* Format a detail line*/
            PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment map index*/

          end /* ===> If codes match*/
        end /* ===> if in table*/
      end /* ===> div 20 by-pass logic*/
    end /* ===> If more data obtained*/
  end /* ===> While more rows*/
   /* ------------------------------------------------------------*/
   /* IO to close VPOAIT02 set*/
   /* ------------------------------------------------------------*/

  PC0Y113(); /* Close cursor VPOAIT02 row*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.PC0YWIXM > 1) /* Page was formatted*/
    PC0Y116(); /* Load the page number array*/
    PC0Y114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.TA5TSQIX == 0) /* No pages formatted*/

    PCWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    PC0YS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PC0YW00.XXXPRCNM = "PC0Y110"; /* Module identification*/
    exit stack; /* Exit to display map*/

  else

    PC0Y117(); /* Finish loading the page number array*/

  end
end // end PC0Y110

// Select cursor - VPOAIT01
Function PC0Y111()
  PC0YW00.PC0YWDCF = "N"; /* End of VPOAIT02 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOAIT02 with key values for select set*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* Initialize VPOAIT02*/
  VPOAIT02.XGPCD = PCWREC.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAIT02.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  VPOAIT02.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
  VPOAIT02.XOWCD = PCWREC.XOWCD; /* Owner group*/
  VPOAIT02.XWHCD = PCWREC.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = PCWREC.PC2CUXID; /* Customer*/
  VPOAIT02.YOACD = PCWREC.YOACD; /* Audit type code*/
  VPOAIT02.XDSCD = PCWREC.XDSCD; /* Direct ship code*/
  PCYREC.PCYFUNC = "Z3"; /* Function*/
  PCYREC.PCYFRDT = PCWREC.PCWFRDT; /* From PO ID*/
  PCYREC.PCYTODT = PCWREC.PCWTODT; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0YW00.XXXPRCNM = "PC0Y111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOAIT02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Y111"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0YW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0YW00.PC0YWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0YW00.PC0YWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PC0YW00.PC0YWKA3 = VPOAIT02.SY1STNBR; /* Key field 3*/
  PC0YW00.PC0YWKA4 = VPOAIT02.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0YW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0YS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/

end // end PC0Y111

// Fetch next row - VPOAIT01
Function PC0Y112()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "G3"; /* Function*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0YW00.PC0YWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0YW00.XXXPRCNM = "PC0Y112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Y112"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0YW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0YW00.PC0YWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0YW00.PC0YWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  PC0YW00.PC0YWKA3 = VPOAIT02.SY1STNBR; /* Key field 3*/
  PC0YW00.PC0YWKA4 = VPOAIT02.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0YW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0YS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/

end // end PC0Y112

// Close cursor - VPOAIT01
Function PC0Y113()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "Q3"; /* Close cursor*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0YW00.XXXPRCNM = "PC0Y113"; /* Module identification*/
  PCWREC.XXXMSGNO = 10; /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOAIT02 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Y113"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
  PC0YS01(); /* Purge temporary storage*/
  XSPCS01(); /* Transfer*/
  exit stack; /* Return to show error message*/


end // end PC0Y113

// Add page to temp storage
Function PC0Y114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0YW02.XXXTSLEN = PC0YW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0YW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0YW02 empty; /* M001 display storage*/
    PC0YW02.PC0YWSAV = PC0YW01.PC0YWSAV; /* Save key fields*/

    PC0YW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0YW00.PC0YWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0YW00.XXXPRCNM = "PC0Y114"; /* Module identification*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Y114"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Y114

// Move data to map page storage
Function PC0Y115()
  PC0YW01.PCJSEQNO = VPOAIT02.PCJSEQNO; /* Sequence number*/
  set TA2REC empty; /* Initialize date rec*/
  TA2REC.TA2GRGGN = VPOAIT02.ZZZSDT; /* Setup date*/
  PC0YS02(); /* Convert date*/
  PC0YW01.PC0YMDTE = TA2REC.TA2GRGA; /* Reformatted date*/
  PC0YW00.PC0YWCTM = VPOAIT02.ZZHHMMSS; /* Complete Setup Time*/
  PC0YW01.PC0YWWHH = PC0YW00.PC0YWWHH; /* Hours*/
  PC0YW01.PC0YWCLN = ":"; /* Colon*/
  PC0YW01.PC0YWMM = PC0YW00.PC0YWMM; /* Minutes*/
  if (VPOAIT02.YOACD in YOATBL.YOACD)
    PC0YW01.YOASDESC = YOATBL.YOASDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* If not in table*/
    PC0YW01.YOASDESC = "* NOT FOUND"; /* Desc not found*/
  end
  PC0YW01.XXXPGUID = VPOAIT02.XXXPGUID; /* User ID*/

  PC0YW01.PA1OANBR = VPOAIT02.PA1OANBR; /* oa order adj nbr*/

  if (VPOAIT02.PCIBFRN == 0 /* IF zero before num*/
   && VPOAIT02.PCIAFTN == 0) /* & zero after num*/

    PC0YW00.PC0YWTXT = VPOAIT02.PCIBFRA; /* Before image*/
    PC0YS20(); /* ===> driver to strip off FOB price*/
                                   /* leading zeros*/
    PC0YW01.PC0YMBFR = PC0YW00.PC0YWTXT; /* ===> load value*/

    PC0YW00.PC0YWTXT = VPOAIT02.PCIAFTA; /* After image*/
    PC0YS20(); /* ===> driver to strip off FOB price*/
                                   /* leading zeros*/
    PC0YW01.PC0YMAFT = PC0YW00.PC0YWTXT; /* ===> load value*/

  else

    PC0YW01.PC0YMBFR = " "; /* Init before*/
    PC0YW01.PC0YMAFT = " "; /* Init after*/
    /* ===> before image load process*/
    PC0YW01.PC0YWBFN = VPOAIT02.PCIBFRN; /* Before image*/
    if (PC0YW01.PC0YWBFN < 0) /* If negative*/
      PC0YW01.PC0YWBFN = PC0YW01.PC0YWBFN * -1; /* Make positive*/
      PC0YW00.PC0YWTXT = PC0YW01.PC0YMBFR; /* ===> W.S. for pc0ys22*/
      PC0YS22(); /* ===>   strip off leading zeros*/
      PC0YW01.PC0YMBFR = PC0YW00.PC0YWTXT; /* ===> load value*/
      PC0YW01.PC0YWBFS = "-"; /* Sign*/
    else
      PC0YW00.PC0YWTXT = PC0YW01.PC0YMBFR; /* ===> W.S. for pc0ys22*/
      PC0YS22(); /* ===>   strip off leading zeros*/
      PC0YW01.PC0YMBFR = PC0YW00.PC0YWTXT; /* ===> load value*/
      PC0YW01.PC0YWBFS = " "; /* Sign*/
    end
    /* ===> after image load process*/
    PC0YW01.PC0YWAFN = VPOAIT02.PCIAFTN; /* After image*/
    if (PC0YW01.PC0YWAFN < 0) /* If negative*/
      PC0YW01.PC0YWAFN = PC0YW01.PC0YWAFN * -1; /* Make positive*/
      PC0YW00.PC0YWTXT = PC0YW01.PC0YMAFT; /* ===> W.S. for pc0ys22*/
      PC0YS22(); /* ===>   strip off leading zeros*/
      PC0YW01.PC0YMAFT = PC0YW00.PC0YWTXT; /* ===> load value*/
      PC0YW01.PC0YWAFS = "-"; /* Sign*/
    else
      PC0YW00.PC0YWTXT = PC0YW01.PC0YMAFT; /* ===> W.S. for pc0ys22*/
      PC0YS22(); /* ===>   strip off leading zeros*/
      PC0YW01.PC0YMAFT = PC0YW00.PC0YWTXT; /* ===> load value*/
      PC0YW01.PC0YWAFS = " "; /* Sign*/
    end
  end

  PC0YW01.PCJNETQT = VPOAIT02.PCJNETQT; /* Audit net change*/

  if (VPOAIT02.YACCD in YACTBL.YACCD)
    PC0YW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* If not in table*/
    PC0YW01.YACDESC = " "; /* Desc not found*/
  end

  set TA2REC empty; /* Initialize date record*/
  TA2REC.TA2GRGGN = VPOAIT02.PC6ETSDT; /* ETS date*/
  PC0YS02(); /* Convert date*/
  PC0YW01.PC0YMETS = TA2REC.TA2GRGA; /* Reformatted date*/
  PC0YW01.YMTCD = VPOAIT02.YMTCD; /* Mode code*/
  PC0YW01.PC6ETSDT = VPOAIT02.PC6ETSDT; /* ETS date*/
  PC0YW01.PC6OETS = VPOAIT02.PC6OETS; /* Original ETS date*/
  PC0YW01.PC6RTADT = VPOAIT02.PC6RTADT; /* ETS date*/
  PC0YW01.YSMXDV = VPOAIT02.YSMXDV; /* Division group*/
  PC0YW01.PC6CXNBR = VPOAIT02.PC6CXNBR; /* Cancel Vers Nbr*/

  PC0YW02.PC0YWLIN[PC0YWIXM] = PC0YW01.PC0YWLIN; /* Map detail line*/
  if (VPOAIT02.PCJSEQNO != 0) /* If audit seq # exists*/
    PC0YW02.PC0YWSEL[PC0YWIXM] = "Y"; /* Flag as a selectable line*/
  else
    PC0YW02.PC0YWSEL[PC0YWIXM] = "N"; /* Flag as not selectable*/
  end


end // end PC0Y115

// Initial load of page nbr array
Function PC0Y116()
   /* ------------------------------------------------------------*/
   /* This loads sequence numbers into the page number array.*/
   /* The array has one row for each map page in temp storage.*/
   /* Each row contains the following fields:*/

     /* PC0YWPA1 - a sequence number for this unique product and*/
                /* destination combination within the array*/
     /* PC0YWPA2 - a total of all the the unique product and*/
                /* destination combinations within the array*/
                /* (always same value, but here for consistency)*/
     /* PC0YWPA3 - the page number for the next unique product*/
                /* and destination combination within the array*/
     /* PC0YWPB1 - a sequence number for this unique color*/
                /* within the product/destination*/
     /* PC0YWPB2 - a total of all the the unique colors*/
                /* within the product destination*/
     /* PC0YWPB3 - the page number for the next unique color*/
                /* within the product destination*/
     /* PC0YWPC1 - a sequence number for this unique plan*/
                /* within the color*/
     /* PC0YWPC2 - a total of all the the unique plans*/
                /* within the color*/
     /* PC0YWPC3 - the page number for the next unique plan*/
                /* within the color*/

   /* The sequence numbers are calculated as each page is*/
   /* stored.  Another routine uses the sequence numbers to*/
   /* calculate the totals and the next page values.*/
   /* ------------------------------------------------------------*/
  if (PC0YW02.SY1STNBR == " ") /* IF FIRST PAGE NUMBER TO STORE*/
    /* ------------------------------------------------------------*/
     /* First time in set up first row of array & init indices*/
    /* ------------------------------------------------------------*/
    PC0YW03.PC0YWPA1[1] = 1; /* First product/destination*/
    PC0YW03.PC0YWPB1[1] = 1; /* First color*/
    PC0YW03.PC0YWPC1[1] = 1; /* First plan*/
    PC0YW00.PC0YWIX1 = 1; /* Initialize row index 1*/
    PC0YW00.PC0YWIX2 = 2; /* Initialize row index 2*/
  else
    /* ------------------------------------------------------------*/
     /* Copy prior row to current row*/
    /* ------------------------------------------------------------*/
    PC0YW03.PC0YW3GP[PC0YWIX2] = PC0YW03.PC0YW3GP[PC0YWIX1];
    /* ------------------------------------------------------------*/
     /* If any of the product or destination fields have changed*/
     /* then increment the prod/dest number & set color & plan = 1*/
    /* ------------------------------------------------------------*/
    if (PC0YW01.SY1STNBR != PC0YW02.SY1STNBR /* Style has changed*/
     || PC0YW01.XDMCD != PC0YW02.XDMCD       /* Dimension has changed*/
     || PC0YW01.XQACD != PC0YW02.XQACD       /* Quality has changed*/
     || PC0YW01.XOWCD != PC0YW02.XOWCD       /* Owner group has changed*/
     || PC0YW01.PC2INSEG != PC0YW02.PC2INSEG /* Spec diff has changed*/
     || PC0YW01.XPGCD != PC0YW02.XPGCD       /* Package has changed*/
     || PC0YW01.XUMCD != PC0YW02.XUMCD       /* Unit of meas has changed*/
     || PC0YW01.XDSCD != PC0YW02.XDSCD       /* Direct ship has changed*/
     || PC0YW01.XWHCD != PC0YW02.XWHCD       /* Warehouse has changed*/
     || PC0YW01.PC2CUXID != PC0YW02.PC2CUXID /* Customer has changed*/
     || PC0YW01.PC6ETSDT != PC0YW02.PC6ETSDT /* ETS date changed*/
     || PC0YW01.YMTCD != PC0YW02.YMTCD       /* Mode of Trans*/
     || PC0YW01.OP1CUOID != PC0YW02.OP1CUOID /* sales order changed*/
     || PC0YW01.OP1NORID != PC0YW02.OP1NORID)

      PC0YW03.PC0YWPA1[PC0YWIX2] = PC0YW03.PC0YWPA1[PC0YWIX2] + 1;
      PC0YW03.PC0YWPB1[PC0YWIX2] = 1; /* First color*/
      PC0YW03.PC0YWPC1[PC0YWIX2] = 1; /* First plan*/

    else
      /* ------------------------------------------------------------*/
       /* If the color has changed then increment the color number*/
       /* and set the plan number to 1*/
      /* ------------------------------------------------------------*/
      if (PC0YW01.SY2CLRID != PC0YW02.SY2CLRID) /* Color has changed*/
        PC0YW03.PC0YWPB1[PC0YWIX2] = PC0YW03.PC0YWPB1[PC0YWIX2] + 1;
        PC0YW03.PC0YWPC1[PC0YWIX2] = 1; /* First plan*/
      else
        /* ------------------------------------------------------------*/
         /* If the plan has changed then increment the plan number*/
        /* ------------------------------------------------------------*/
        if (PC0YW01.PC6PLAN != PC0YW02.PC6PLAN) /* Plan has changed*/
          PC0YW03.PC0YWPC1[PC0YWIX2] = PC0YW03.PC0YWPC1[PC0YWIX2] + 1;
        end
      end
    end
    /* ------------------------------------------------------------*/
     /* Increment the indices*/
    /* ------------------------------------------------------------*/
    PC0YW00.PC0YWIX1 = PC0YW00.PC0YWIX1 + 1; /* Increment row index 1*/
    PC0YW00.PC0YWIX2 = PC0YW00.PC0YWIX2 + 1; /* Increment row index 2*/
  end

  PC0YW02.PC0YWSAV = PC0YW01.PC0YWSAV; /* Save key fields*/
end // end PC0Y116

// Finish load of page nbr array
Function PC0Y117()
   /* ------------------------------------------------------------*/
   /* This routine completes loading of the page number array.*/
   /* The array has one row for each map page in temp storage.*/
   /* Each row contains the following fields:*/

     /* PC0YWPA1 - a sequence number for this unique product and*/
                /* destination combination within the array*/
     /* PC0YWPA2 - a total of all the the unique product and*/
                /* destination combinations within the array*/
                /* (always same value, but here for consistency)*/
     /* PC0YWPA3 - the page number for the next unique product*/
                /* and destination combination within the array*/
     /* PC0YWPB1 - a sequence number for this unique color*/
                /* within the product/destination*/
     /* PC0YWPB2 - a total of all the the unique colors*/
                /* within the product destination*/
     /* PC0YWPB3 - the page number for the next unique color*/
                /* within the product destination*/
     /* PC0YWPC1 - a sequence number for this unique plan*/
                /* within the color*/
     /* PC0YWPC2 - a total of all the the unique plans*/
                /* within the color*/
     /* PC0YWPC3 - the page number for the next unique plan*/
                /* within the color*/

   /* The sequence numbers where calculated as each page was*/
   /* stored.  This routine uses the sequence numbers to*/
   /* calculate the totals and the next page values.*/
   /* ------------------------------------------------------------*/
   /* Set the indices to point to the last 2 loaded rows of array*/
   /* ------------------------------------------------------------*/
  PC0YW00.PC0YWIX1 = PC0YW00.TA5TSQIX; /* Index 1 = last*/
  PC0YW00.PC0YWIX2 = PC0YW00.PC0YWIX1 - 1; /* Index 2 = last - 1*/
   /* ------------------------------------------------------------*/
   /* On last row all of the totals equal the sequence numbers*/
   /* ------------------------------------------------------------*/
  PC0YW03.PC0YWPA2[PC0YWIX1] = PC0YW03.PC0YWPA1[PC0YWIX1];
  PC0YW03.PC0YWPB2[PC0YWIX1] = PC0YW03.PC0YWPB1[PC0YWIX1];
  PC0YW03.PC0YWPC2[PC0YWIX1] = PC0YW03.PC0YWPC1[PC0YWIX1];
   /* ------------------------------------------------------------*/
   /* Traverse the array backwards comparing adjoining rows*/
   /* ------------------------------------------------------------*/
  while (PC0YW00.PC0YWIX2 > 0) /* While more rows to compare*/
    /* ------------------------------------------------------------*/
     /* Copy total from prior row to current row for prod/dest*/
    /* ------------------------------------------------------------*/
    PC0YW03.PC0YWPA2[PC0YWIX2] = PC0YW03.PC0YWPA2[PC0YWIX1];
    /* ------------------------------------------------------------*/
     /* If the product/destination has changed:*/
       /* Identify prior page as next page for prod/dest*/
       /* Set next page to 0 for color and plan*/
       /* Copy sequence numbers to totals for color and plan*/
       /* Leave next page = 0 for color and plan*/
    /* ------------------------------------------------------------*/
    if (PC0YW03.PC0YWPA1[PC0YWIX1] != PC0YW03.PC0YWPA1[PC0YWIX2])
      PC0YW03.PC0YWPA3[PC0YWIX2] = PC0YWIX1;
      PC0YW03.PC0YWPB2[PC0YWIX2] = PC0YW03.PC0YWPB1[PC0YWIX2];
      PC0YW03.PC0YWPC2[PC0YWIX2] = PC0YW03.PC0YWPC1[PC0YWIX2];
    else
      /* ------------------------------------------------------------*/
       /* Copy next page from prior row to current row for prod/dest*/
       /* Copy total from prior row to current row for color*/
      /* ------------------------------------------------------------*/
      PC0YW03.PC0YWPA3[PC0YWIX2] = PC0YW03.PC0YWPA3[PC0YWIX1];
      PC0YW03.PC0YWPB2[PC0YWIX2] = PC0YW03.PC0YWPB2[PC0YWIX1];
      /* ------------------------------------------------------------*/
       /* If the color has changed:*/
         /* Identify prior page as next page for color*/
         /* Copy sequence number to total for plan*/
         /* Leave next page = 0 for plan*/
      /* ------------------------------------------------------------*/
      if (PC0YW03.PC0YWPB1[PC0YWIX1] != PC0YW03.PC0YWPB1[PC0YWIX2])
        PC0YW03.PC0YWPB3[PC0YWIX2] = PC0YWIX1;
        PC0YW03.PC0YWPC2[PC0YWIX2] = PC0YW03.PC0YWPC1[PC0YWIX2];
      else
        /* ------------------------------------------------------------*/
         /* Copy next page from prior row to current row for color*/
         /* Copy total from prior row to current row for plan*/
        /* ------------------------------------------------------------*/
        PC0YW03.PC0YWPB3[PC0YWIX2] = PC0YW03.PC0YWPB3[PC0YWIX1];
        PC0YW03.PC0YWPC2[PC0YWIX2] = PC0YW03.PC0YWPC2[PC0YWIX1];
        /* ------------------------------------------------------------*/
         /* If the plan has changed:*/
           /* Identify prior page as next page for plan*/
        /* ------------------------------------------------------------*/
        if (PC0YW03.PC0YWPC1[PC0YWIX1] != PC0YW03.PC0YWPC1[PC0YWIX2])
          PC0YW03.PC0YWPC3[PC0YWIX2] = PC0YWIX1;
        else
          /* ------------------------------------------------------------*/
           /* Copy next page from prior row to current row for plan*/
          /* ------------------------------------------------------------*/
          PC0YW03.PC0YWPC3[PC0YWIX2] = PC0YW03.PC0YWPC3[PC0YWIX1];
        end
      end
    end
    /* ------------------------------------------------------------*/
     /* Decrement the indices*/
    /* ------------------------------------------------------------*/
    PC0YW00.PC0YWIX1 = PC0YW00.PC0YWIX1 - 1; /* Decrement row index 1*/
    PC0YW00.PC0YWIX2 = PC0YW00.PC0YWIX2 - 1; /* Decrement row index 2*/
  end

end // end PC0Y117

// Converse PO audit item map
Function PC0Y120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0Y121(); /* Format the map*/
    PC0YS11(); /* Highlight the pass data (header)*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0YM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0YM001.XXXPRCNM = PC0YW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0YM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0YM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0YW00.XXXPRCNM = "PC0Y"; /* Module identification*/
  COMMAREA.CATOAP = PC0YM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0YM001.CAITEM; /* Application data*/

end // end PC0Y120

// Format detail lines of 001
Function PC0Y121()
  set PC0YM001 initial; /* M001 input/output area*/

  PC0YW00.PC0YWIX1 = PC0YW00.XXXTSPAG;
                                   /* Set index to requested page*/
  PC0YM001.PC0YWPA1 = PC0YW03.PC0YWPA1[PC0YWIX1]; /* Number of prod/d*/
  PC0YM001.PC0YWPA2 = PC0YW03.PC0YWPA2[PC0YWIX1]; /* Total prod/dest*/
  PC0YM001.PC0YWPB1 = PC0YW03.PC0YWPB1[PC0YWIX1]; /* Number of color*/
  PC0YM001.PC0YWPB2 = PC0YW03.PC0YWPB2[PC0YWIX1]; /* Total colors*/
  PC0YM001.PC0YWPC1 = PC0YW03.PC0YWPC1[PC0YWIX1]; /* Number of plan*/
  PC0YM001.PC0YWPC2 = PC0YW03.PC0YWPC2[PC0YWIX1]; /* Total plans*/
  PC0YW00.PC0YWPOD = PCWREC.PC3POIDT; /* PO ID*/
  if (PCWREC.XGPCD == "03") /* If apparel*/
    PC0YW00.PC0YMYY = PCWREC.PCFSECD; /* Season code*/
  else
    PC0YW00.PC0YMYY = PC0YW00.PC0YWYY; /* PO ID year*/
  end
  PC0YW00.PC0YMD1 = "-"; /* PO ID dash 1*/
  PC0YW00.PC0YMM1 = PC0YW00.PC0YWM1; /* PO ID buy month*/
  PC0YW00.PC0YMD2 = "-"; /* PO ID dash 2*/
  PC0YW00.PC0YMM2 = PC0YW00.PC0YWM2; /* PO ID deliver month*/
  PC0YW00.PC0YMD3 = "-"; /* PO ID dash 3*/
  PC0YW00.FY1FCTYC = PCWREC.FY1FCTYC; /* PO ID factory*/
  PC0YM001.PC0YMPOD = PC0YW00.PC0YMPOD; /* PO ID reformatted*/
  PC0YM001.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  PC0YM001.PC4ORTYP = PCWREC.PC4ORTYP; /* PO type*/
  PC0YM001.YSMXDV = PCWREC.YSMXDV; /* Division*/
  PC0YM001.XGPCD = PCWREC.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0YW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0YW00.XXXTSPAG > PC0YW00.TA5TSQIX) /* Desired greater highest*/
        PC0YW00.XXXTSPAG = PC0YW00.TA5TSQIX; /* Default to highest*/
      end

      PC0YS04(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0YM001.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PC0YM001.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PC0YS35(); /* get reg description*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM001.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  else /* Row not found*/
    PC0YM001.PO-REG-DESC = "*** NOT FOUND"; /* po-reg-desc*/
  end

  PC0YM001.XQACD = PC0YW02.XQACD; /* Quality*/
  PC0YM001.XOWCD = PC0YW02.XOWCD; /* Owner group*/
  PC0YM001.PC2INSEG = PC0YW02.PC2INSEG; /* Spec difference*/
  PC0YM001.XPGCD = PC0YW02.XPGCD; /* Package*/
  PC0YM001.XUMCD = PC0YW02.XUMCD; /* Unit of measure*/
  PC0YM001.PC6PLAN = PC0YW02.PC6PLAN; /* Plan*/
  PC0YM001.PC0YMETS = PC0YW02.PC0YMETS; /* ETS date*/
  PC0YM001.YMTCD = PC0YW02.YMTCD; /* Mode code*/
  PC0YM001.XWHCD = PC0YW02.XWHCD; /* Warehouse*/
  PC0YM001.PC2CUXID = PC0YW02.PC2CUXID; /* Customer*/
  PC0YM001.XDSCD = PC0YW02.XDSCD; /* Direct ship*/
  PC0YM001.YSMXDV = PC0YW02.YSMXDV; /* Divison group*/
  if (PC0YW02.OP1CUOID > 0)
    PC0YM001.OP1CUOID = PC0YW02.OP1CUOID; /* Sales order*/
    PC0YM001.OP1NORID = PC0YW02.OP1NORID; /* Sales order*/
  else
    PC0YM001.OP1CUOID = " "; /* no sales order*/
    PC0YM001.OP1NORID = " "; /* no sales order*/
  end

   /* ------------------------------------------------------------*/
   /* Get the style and color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Initialize record*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  XSPG202(); /* Retrieve style/color*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Style description*/
    PC0YM001.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/
  else /* Row not found*/
    PC0YM001.SY1SSTNM = "** NOT FOUND"; /* Style description*/
    PC0YM001.SY2CLRAB = "** NOT FOUND"; /* Color description*/
  end

   /* ------------------------------------------------------------*/
   /* Load the map detail lines.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 1; /* Initialize line index*/
  while (PC0YW00.PC0YWIXM <= 13 /* Until screen is full*/
   && PC0YW02.PC0YWLIN[PC0YWIXM] > " ") /* or end of data*/

    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable line*/
      set PC0YM001.PC0YMSEL[PC0YWIXM] normal; /* Unprotect select field*/
    end

    PC0YM001.PC0YMDTE[PC0YWIXM] = PC0YW02.PC0YMDTE[PC0YWIXM];
    PC0YM001.PC0YMTME[PC0YWIXM] = PC0YW02.PC0YMTME[PC0YWIXM];
    PC0YM001.YOASDESC[PC0YWIXM] = PC0YW02.YOASDESC[PC0YWIXM];
    PC0YM001.XXXPGUID[PC0YWIXM] = PC0YW02.XXXPGUID[PC0YWIXM];
    PC0YM001.PC0YMBFR[PC0YWIXM] = PC0YW02.PC0YMBFR[PC0YWIXM];
    PC0YM001.PC0YMAFT[PC0YWIXM] = PC0YW02.PC0YMAFT[PC0YWIXM];
    PC0YM001.PCJNETQT[PC0YWIXM] = PC0YW02.PCJNETQT[PC0YWIXM];

    if (PCWREC.XGPCD == "02") /* only move oa nbr when footwear*/
      PC0YM001.PA1OANBR[PC0YWIXM] = PC0YW02.PA1OANBR[PC0YWIXM];
    end

    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Set the cursor at the first enterable field*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 13; /* Initialize line index*/
  while (PC0YW00.PC0YWIXM >= 1) /* For each detail line*/
    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable line*/
      set PC0YM001.PC0YMSEL[PC0YWIXM] cursor; /* Position cursor on line*/
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM - 1; /* Decrement line index*/
  end

end // end PC0Y121

// Check attention identifiers
Function PC0Y130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PC0YS01(); /* Purge temporary storage*/
      set PCWREC empty; /* Initialize PC communications record*/
      XSPCS01(); /* Transfer*/
      PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
      COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
      XSPCS01(); /* Transfer*/
    else
      PC0YW00.XXXPRCNM = "PC0Y130"; /* Module identification*/
      set PC0YM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/


    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    else
      PCWREC.CAFROMAP[1] = " "; /* Init from ap 1*/
      PCWREC.PCWUSER1 = " "; /* Init user 1*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0YS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
    COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
    XSPCS01(); /* Transfer*/

  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf9   
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf18  
   && converseVar.eventKey not pf19)
    PC0YW00.XXXPRCNM = "PC0Y130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0Y130

// Reset highlighted fields
Function PC0Y140()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0YM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0YM001.CAITEM initialAttributes; /* Commarea application data*/

  PC0YW00.PC0YWIXM = 1; /* Initialize map index*/
  while (PC0YW00.PC0YWIXM <= 13) /* For each map line*/
    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable field*/
      set PC0YM001.PC0YMSEL[PC0YWIXM] normal; /* Line selection field*/
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment map index*/
  end
end // end PC0Y140

// Verify the entered data
Function PC0Y150()
   /* ------------------------------------------------------------*/
   /* PF7 - Verify the page backward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0YW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      converseLib.validationFailed(2); /* No previous pages to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW00.XXXTSPAG - 1; /* Decrement page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF8 - Verify the page forward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0YW00.XXXTSPAG >= PC0YW00.TA5TSQIX) /* if no more pages*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW00.XXXTSPAG + 1; /* Increment page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF9 - Validate size selection.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* If size audit requested*/
    PC0YW00.PC0YWIXM = 13; /* Initialize map index*/
    PC0YW00.PC0YMSEL = "N"; /* Initialize selection flag*/
    while (PC0YW00.PC0YWIXM >= 1) /* For each map detail line*/
      if (PC0YM001.PC0YMSEL[PC0YWIXM] == "S") /* If line selected*/
        PC0YW00.PC0YMSEL = "Y"; /* Set selection flag*/
      else
        if (PC0YM001.PC0YMSEL[PC0YWIXM] != " ") /* If other than 'S'*/
          converseLib.validationFailed(13); /* Only 'S' can be used for select*/
          PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
          set PC0YM001.PC0YMSEL[PC0YWIXM] cursor, bold; /* Highlight*/
        end
      end
      PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM - 1; /* Decrement map line index*/
    end
    if (PC0YW00.PC0YMSEL == "N" /* If no lines selected*/
     && converseVar.validationMsgNum == 0) /* and no errors*/
      converseLib.validationFailed(25); /* No selection made*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      set PC0YM001.PC0YMSEL[1] cursor; /* Position cursor at first line*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF11 - Verify the scroll right request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* If scroll right request*/
    PC0YW00.PCWMAP = "2"; /* Request right map*/
  end

   /* ------------------------------------------------------------*/
   /* PF18 - Validate request for next product/destination*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIX1 = PC0YW00.XXXTSPAG; /* Current page = index*/
  if (converseVar.eventKey is pf18) /* If next product/dest requested*/
    if (PC0YW03.PC0YWPA3[PC0YWIX1] == 0) /* if no more product/dests*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      converseLib.validationFailed(224); /* No more product/dests to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPA3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF19 - Validate request for next plan within color*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* If next plan requested*/
    if (PC0YW03.PC0YWPC3[PC0YWIX1] == 0) /* if no more plans*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      converseLib.validationFailed(226); /* No more plans for this color*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPC3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* ENTER - Validate request for next color within product/dest*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If next color requested*/
    if (PC0YW03.PC0YWPB3[PC0YWIX1] == 0) /* if no more colors*/
      PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
      converseLib.validationFailed(225); /* No more colors for this prod/dest*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPB3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0YW00.XXXPRCNM = "PC0Y150"; /* Module identification*/
    set PC0YM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

end // end PC0Y150

// Process valid input request
Function PC0Y160()
   /* ------------------------------------------------------------*/
   /* If not a size audit inquiry request then return.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9 /* If not size audit request*/
   || converseVar.validationMsgNum != 0) /* or errors exist*/
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Get the size descriptions.*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Initialize record*/
  PG3REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG3REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG3REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  PG3REC.XQACD = "**"; /* Quality*/
  PG3REC.PG3FUNCD = "PC"; /* Function*/
  PG3REC.PG3DATFM = "N"; /* Data format no compress*/
  TA1REC.TA1PGMNM = "PC0Y160"; /* Module identification*/
  XSPG301(); /* Select size descriptions*/

   /* ------------------------------------------------------------*/
   /* Show size audit screens for each item aduit selected.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 1; /* Initialize map index*/
  while (PC0YW00.PC0YWIXM <= 13 /* While more detail lines*/
   && converseVar.eventKey not pf3) /* and not return to selection*/
    if (PC0YM001.PC0YMSEL[PC0YWIXM] == "S") /* If line selected*/
      PC0YS03(); /* Select size audit*/
      if (SQLCA.VAGen_SQLCODE == +100) /* no size row*/
        converseLib.validationFailed(505); /**/
        return;
      else
        if (PC0YM001.YOASDESC[PC0YWIXM] == "FOB PRICE"
         || PC0YM001.YOASDESC[PC0YWIXM] == "FOB CHANGE")
          PC0Y171(); /* Converse size price screen*/
          while (converseVar.validationMsgNum != 0 /* While errors*/
           || converseVar.eventKey is pa2) /* or cancel requested*/
            PC0Y171(); /* Converse size price screen*/
          end
        else
          PC0Y161(); /* Converse size quantity screen*/
          while (converseVar.validationMsgNum != 0 /* While errors*/
           || converseVar.eventKey is pa2) /* or cancel requested*/
            PC0Y161(); /* Converse size quantity screen*/
          end
        end
      end
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment map line index*/
  end

end // end PC0Y160

// Converse PO audit size prices
Function PC0Y161()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/

   /* ------------------------------------------------------------*/

  PC0Y162(); /* Format and display the map*/

  PC0Y164(); /* Check attention identifier*/

  PC0Y165(); /* Reset fields to normal intensity*/

end // end PC0Y161

// Format & display size qtys
Function PC0Y162()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0Y163(); /* Format the data on the map*/
    PC0YS14(); /* Highlight the pass data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0YM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0YM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0YM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0YM004.XXXPRCNM = PC0YW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0YM004 alarm; /* Indicate sound alarm*/
  end

  converse PC0YM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0YW00.XXXPRCNM = "PC0Y"; /* Module identification*/
  COMMAREA.CATOAP = PC0YM004.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0YM004.CAITEM; /* Application data*/

end // end PC0Y162

// Format detail lines of 003
Function PC0Y163()
  set PC0YM004 initial; /* m004 input/output area*/

  PC0YW00.PC0YWPOD = PCWREC.PC3POIDT; /* PO ID*/
  if (PCWREC.XGPCD == "03") /* If apparel*/
    PC0YW00.PC0YMYY = PCWREC.PCFSECD; /* Season code*/
  else
    PC0YW00.PC0YMYY = PC0YW00.PC0YWYY; /* PO ID year*/
  end
  PC0YW00.PC0YMD1 = "-"; /* PO ID dash 1*/
  PC0YW00.PC0YMM1 = PC0YW00.PC0YWM1; /* PO ID buy month*/
  PC0YW00.PC0YMD2 = "-"; /* PO ID dash 2*/
  PC0YW00.PC0YMM2 = PC0YW00.PC0YWM2; /* PO ID deliver month*/
  PC0YW00.PC0YMD3 = "-"; /* PO ID dash 3*/
  PC0YW00.FY1FCTYC = PCWREC.FY1FCTYC; /* PO ID factory*/
  PC0YM004.PC0YMPOD = PC0YW00.PC0YMPOD; /* PO ID reformatted*/
  PC0YM004.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  PC0YM004.PC4ORTYP = PCWREC.PC4ORTYP; /* PO type*/
  PC0YM004.YSMXDV = PCWREC.YSMXDV; /* Division*/
  PC0YM004.XGPCD = PCWREC.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0YM004.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PC0YM004.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PC0YS35(); /* get reg description*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM004.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  else /* Row not found*/
    PC0YM004.PO-REG-DESC = "*** NOT FOUND"; /* po-reg-desc*/
  end

  PC0YM004.XQACD = PC0YW02.XQACD; /* Quality*/
  PC0YM004.XOWCD = PC0YW02.XOWCD; /* Owner group*/
  PC0YM004.PC2INSEG = PC0YW02.PC2INSEG; /* Spec difference*/
  PC0YM004.XPGCD = PC0YW02.XPGCD; /* Package*/
  PC0YM004.XUMCD = PC0YW02.XUMCD; /* Unit of measure*/
  PC0YM004.PC6PLAN = PC0YW02.PC6PLAN; /* Plan*/
  PC0YM004.PC0YMETS = PC0YW02.PC0YMETS; /* ETS date*/
  PC0YM004.YMTCD = PC0YW02.YMTCD; /* Mode code*/
  PC0YM004.XWHCD = PC0YW02.XWHCD; /* Warehouse*/
  PC0YM004.PC2CUXID = PC0YW02.PC2CUXID; /* Customer*/
  PC0YM004.XDSCD = PC0YW02.XDSCD; /* Direct ship*/
  PC0YM004.YSMXDV = PC0YW02.YSMXDV; /* Divison group*/
  if (PC0YW02.OP1CUOID > 0)
    PC0YM004.OP1CUOID = PC0YW02.OP1CUOID; /* sales order format*/
    PC0YM004.OP1NORID = PC0YW02.OP1NORID; /* sales order format*/
  else
    PC0YM004.OP1CUOID = " "; /* no sales order*/
    PC0YM004.OP1NORID = " "; /* no sales order*/
  end

   /* ------------------------------------------------------------*/
   /* Format the selected detail line in the map from storage.*/
   /* ------------------------------------------------------------*/

  PC0YM004.PC0YMDTE = PC0YW02.PC0YMDTE[PC0YWIXM];
  PC0YM004.PC0YMTME = PC0YW02.PC0YMTME[PC0YWIXM];
  PC0YM004.YOASDESC = PC0YW02.YOASDESC[PC0YWIXM];
  PC0YM004.XXXPGUID = PC0YW02.XXXPGUID[PC0YWIXM];
  PC0YM004.PC0YMBFR = PC0YW02.PC0YMBFR[PC0YWIXM];
  PC0YM004.PC0YMAFT = PC0YW02.PC0YMAFT[PC0YWIXM];
  PC0YM004.PCJNETQT = PC0YW02.PCJNETQT[PC0YWIXM];

  if (PCWREC.XGPCD == "02") /* only move oa nbr when footwear*/
    PC0YM004.PA1OANBR = PC0YW02.PA1OANBR[PC0YWIXM];
  end

   /* ------------------------------------------------------------*/
   /* Get the style and color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Initialize record*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  XSPG202(); /* Retrieve style/color*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM004.SY1SSTNM = PG2REC.SY1SSTNM; /* Style description*/
    PC0YM004.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/
  else /* Row not found*/
    PC0YM004.SY1SSTNM = "** NOT FOUND"; /* Style description*/
    PC0YM004.SY2CLRAB = "** NOT FOUND"; /* Color description*/
  end

   /* ------------------------------------------------------------*/
   /* Load the size descriptions & before & after values.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIX1 = 1;
                                   /* Initialize index 1 for audit array*/
  PC0YW00.PC0YWIX2 = 0;
                                   /* Initialize index 2 for map fields*/
  while (PC0YW00.PC0YWIX1 <= 40) /* For each size audit field*/
    if (VPOASZ02.PCIBFRN[PC0YWIX1] != 0 /* If before price value exists*/
     || VPOASZ02.PCIAFTN[PC0YWIX1] != 0) /* or after price value exists*/
      PC0YW00.PC0YWIX3 = PC0YW00.PC0YWIX2; /* Save prior position*/
      PC0YW00.PC0YWIX2 = PC0YW00.PC0YWIX2 + 1; /* Increment map index*/
      PC0YM004.SY4IDDSC[PC0YWIX2] = PG3REC.SY4IDDSC[PC0YWIX1];
      set PC0YM004.SY4IDDSC[PC0YWIX2] protect; /* Display size description*/
      PC0YM004.PCIBFRN[PC0YWIX2] = VPOASZ02.PCIBFRN[PC0YWIX1];
      PC0YM004.PCIAFTN[PC0YWIX2] = VPOASZ02.PCIAFTN[PC0YWIX1];
      set PC0YM004.PCIBFRN[PC0YWIX2] protect; /* Display before quantity*/
      set PC0YM004.PCIAFTN[PC0YWIX2] protect; /* Display after quantity*/
    end
    PC0YW00.PC0YWIX1 = PC0YW00.PC0YWIX1 + 1; /* Increment size audit index*/
  end

   /* ------------------------------------------------------------*/
   /* Display the literals for each line having data.*/
   /* ------------------------------------------------------------*/

  set PC0YM004.PC0YMLT1[1] protect; /* Display first line literals*/
  set PC0YM004.PC0YMLT2[1] protect; /* Display first line literals*/
  set PC0YM004.PC0YMLT3[1] protect; /* Display first line literals*/
  if (PC0YW00.PC0YWIX2 > 10) /* If more than 1 line of prices*/
    set PC0YM004.PC0YMLT1[2] protect;
                                   /* Display second line literals*/
    set PC0YM004.PC0YMLT2[2] protect;
                                   /* Display second line literals*/
    set PC0YM004.PC0YMLT3[2] protect;
                                   /* Display second line literals*/
  end
  if (PC0YW00.PC0YWIX2 > 20)
                                   /* If more than 2 lines of prices*/
    set PC0YM004.PC0YMLT1[3] protect; /* Display third line literals*/
    set PC0YM004.PC0YMLT2[3] protect; /* Display third line literals*/
    set PC0YM004.PC0YMLT3[3] protect; /* Display third line literals*/
  end
  if (PC0YW00.PC0YWIX2 > 30)
                                   /* If more than 3 lines of prices*/
    set PC0YM004.PC0YMLT1[4] protect;
                                   /* Display fourth line literals*/
    set PC0YM004.PC0YMLT2[4] protect;
                                   /* Display fourth line literals*/
    set PC0YM004.PC0YMLT3[4] protect;
                                   /* Display fourth line literals*/
  end
end // end PC0Y163

// Check attention identifiers
Function PC0Y164()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PC0YS01(); /* Purge temporary storage*/
      set PCWREC empty; /* Initialize PC communications record*/
      XSPCS01(); /* Transfer*/
      PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
      COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
      XSPCS01(); /* Transfer*/
    else
      PC0YW00.XXXPRCNM = "PC0Y164"; /* Module identification*/
      set PC0YM004.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf19 /* If PF19 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/


    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf19) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    else
      PCWREC.CAFROMAP[1] = " "; /* Init from ap 1*/
      PCWREC.PCWUSER1 = " "; /* Init user 1*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0YS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
    COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
    XSPCS01(); /* Transfer*/

  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3) 
    PC0YW00.XXXPRCNM = "PC0Y164"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
  end

end // end PC0Y164

// Reset highlighted fields
Function PC0Y165()
   /* ------------------------------------------------------------*/
   /* Return to redisplay map if any errors found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If any errors found*/
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0YM004.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0YM004.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0YW00.XXXPRCNM = "PC0Y165"; /* Module identification*/
    set PC0YM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

end // end PC0Y165

// Converse PO audit size prices
Function PC0Y171()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/

   /* ------------------------------------------------------------*/

  PC0Y172(); /* Format and display the map*/

  PC0Y174(); /* Check attention identifier*/

  PC0Y175(); /* Reset fields to normal intensity*/

end // end PC0Y171

// Format & display size prices
Function PC0Y172()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0Y173(); /* Format the data on the map*/
    PC0YS13(); /* Highlight the pass data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0YM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0YM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0YM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0YM003.XXXPRCNM = PC0YW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0YM003 alarm; /* Indicate sound alarm*/
  end

  converse PC0YM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0YW00.XXXPRCNM = "PC0Y"; /* Module identification*/
  COMMAREA.CATOAP = PC0YM003.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0YM003.CAITEM; /* Application data*/

end // end PC0Y172

// Format detail lines of 003
Function PC0Y173()
  set PC0YM003 initial; /* M003 input/output area*/

  PC0YW00.PC0YWPOD = PCWREC.PC3POIDT; /* PO ID*/
  if (PCWREC.XGPCD == "03") /* If apparel*/
    PC0YW00.PC0YMYY = PCWREC.PCFSECD; /* Season code*/
  else
    PC0YW00.PC0YMYY = PC0YW00.PC0YWYY; /* PO ID year*/
  end
  PC0YW00.PC0YMD1 = "-"; /* PO ID dash 1*/
  PC0YW00.PC0YMM1 = PC0YW00.PC0YWM1; /* PO ID buy month*/
  PC0YW00.PC0YMD2 = "-"; /* PO ID dash 2*/
  PC0YW00.PC0YMM2 = PC0YW00.PC0YWM2; /* PO ID deliver month*/
  PC0YW00.PC0YMD3 = "-"; /* PO ID dash 3*/
  PC0YW00.FY1FCTYC = PCWREC.FY1FCTYC; /* PO ID factory*/
  PC0YM003.PC0YMPOD = PC0YW00.PC0YMPOD; /* PO ID reformatted*/
  PC0YM003.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  PC0YM003.PC4ORTYP = PCWREC.PC4ORTYP; /* PO type*/
  PC0YM003.YSMXDV = PCWREC.YSMXDV; /* Division*/
  PC0YM003.XGPCD = PCWREC.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0YM003.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PC0YM003.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PC0YS35(); /* get reg description*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM003.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  else /* Row not found*/
    PC0YM003.PO-REG-DESC = "*** NOT FOUND"; /* po-reg-desc*/
  end

  PC0YM003.XQACD = PC0YW02.XQACD; /* Quality*/
  PC0YM003.XOWCD = PC0YW02.XOWCD; /* Owner group*/
  PC0YM003.PC2INSEG = PC0YW02.PC2INSEG; /* Spec difference*/
  PC0YM003.XPGCD = PC0YW02.XPGCD; /* Package*/
  PC0YM003.XUMCD = PC0YW02.XUMCD; /* Unit of measure*/
  PC0YM003.PC6PLAN = PC0YW02.PC6PLAN; /* Plan*/
  PC0YM003.PC0YMETS = PC0YW02.PC0YMETS; /* ETS date*/
  PC0YM003.YMTCD = PC0YW02.YMTCD; /* Mode code*/
  PC0YM003.XWHCD = PC0YW02.XWHCD; /* Warehouse*/
  PC0YM003.PC2CUXID = PC0YW02.PC2CUXID; /* Customer*/
  PC0YM003.XDSCD = PC0YW02.XDSCD; /* Direct ship*/
  PC0YM003.YSMXDV = PC0YW02.YSMXDV; /* Divison group*/
  if (PC0YW02.OP1CUOID > 0)
    PC0YM003.OP1CUOID = PC0YW02.OP1CUOID; /* Format sales order*/
    PC0YM003.OP1NORID = PC0YW02.OP1NORID; /**/
  else
    PC0YM003.OP1CUOID = " "; /* no sales order*/
    PC0YM003.OP1NORID = " ";
  end

   /* ------------------------------------------------------------*/
   /* Get the style and color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Initialize record*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  XSPG202(); /* Retrieve style/color*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM003.SY1SSTNM = PG2REC.SY1SSTNM; /* Style description*/
    PC0YM003.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/
  else /* Row not found*/
    PC0YM003.SY1SSTNM = "** NOT FOUND"; /* Style description*/
    PC0YM003.SY2CLRAB = "** NOT FOUND"; /* Color description*/
  end

   /* ------------------------------------------------------------*/
   /* Format the selected detail line in the map from storage.*/
   /* ------------------------------------------------------------*/

  PC0YM003.PC0YMDTE = PC0YW02.PC0YMDTE[PC0YWIXM];
  PC0YM003.PC0YMTME = PC0YW02.PC0YMTME[PC0YWIXM];
  PC0YM003.YOASDESC = PC0YW02.YOASDESC[PC0YWIXM];
  PC0YM003.XXXPGUID = PC0YW02.XXXPGUID[PC0YWIXM];
  PC0YM003.PC0YMBFR = PC0YW02.PC0YMBFR[PC0YWIXM];
  PC0YM003.PC0YMAFT = PC0YW02.PC0YMAFT[PC0YWIXM];
  PC0YM003.PCJNETQT = PC0YW02.PCJNETQT[PC0YWIXM];

   /* ------------------------------------------------------------*/
   /* Load the size descriptions & before & after values.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIX1 = 1;
                                   /* Initialize index 1 for audit array*/
  PC0YW00.PC0YWIX2 = 0;
                                   /* Initialize index 2 for map fields*/
  while (PC0YW00.PC0YWIX1 <= 40) /* For each size audit field*/
    if (VPOASZ02.PCKBFRPR[PC0YWIX1] != 0 /* If before price value exists*/
     || VPOASZ02.PCKAFTPR[PC0YWIX1] != 0) /* or after price value exists*/
      PC0YW00.PC0YWIX3 = PC0YW00.PC0YWIX2; /* Save prior position*/
      PC0YW00.PC0YWIX2 = PC0YW00.PC0YWIX2 + 1; /* Increment map index*/
      PC0YM003.SY4IDDSC[PC0YWIX2] = PG3REC.SY4IDDSC[PC0YWIX1];
      set PC0YM003.SY4IDDSC[PC0YWIX2] protect; /* Display size description*/
      PC0YM003.PCKBFRPR[PC0YWIX2] = VPOASZ02.PCKBFRPR[PC0YWIX1];
      PC0YM003.PCKAFTPR[PC0YWIX2] = VPOASZ02.PCKAFTPR[PC0YWIX1];
      if (PC0YW00.PC0YWIX2 == 1) /* If this is the first field*/
        set PC0YM003.PCKBFRPR[PC0YWIX2] protect; /* Display before price*/
        set PC0YM003.PCKAFTPR[PC0YWIX2] protect; /* Display after price*/
      else /* If this value is different from prior*/
                  /* If the before price changes or*/
                   /* if the after price is not = to before price*/
        if (PC0YM003.PCKBFRPR[PC0YWIX2] == PC0YM003.PCKBFRPR[PC0YWIX3]
         && PC0YM003.PCKAFTPR[PC0YWIX2] == PC0YM003.PCKBFRPR[PC0YWIX2])
                      /* SKIP*/
        else
          if (PC0YM003.PCKAFTPR[PC0YWIX2] == PC0YM003.PCKAFTPR[PC0YWIX3])
                        /* SKIP*/
          else
            set PC0YM003.PCKBFRPR[PC0YWIX2] protect;
                                   /* Display before price*/
            set PC0YM003.PCKAFTPR[PC0YWIX2] protect; /* Display after price*/
          end
        end
      end
    end
    PC0YW00.PC0YWIX1 = PC0YW00.PC0YWIX1 + 1; /* Increment size audit index*/
  end

   /* ------------------------------------------------------------*/
   /* Display the literals for each line having data.*/
   /* ------------------------------------------------------------*/

  set PC0YM003.PC0YMLT1[1] protect; /* Display first line literals*/
  set PC0YM003.PC0YMLT2[1] protect; /* Display first line literals*/
  set PC0YM003.PC0YMLT3[1] protect; /* Display first line literals*/
  if (PC0YW00.PC0YWIX2 > 10) /* If more than 1 line of prices*/
    set PC0YM003.PC0YMLT1[2] protect;
                                   /* Display second line literals*/
    set PC0YM003.PC0YMLT2[2] protect;
                                   /* Display second line literals*/
    set PC0YM003.PC0YMLT3[2] protect;
                                   /* Display second line literals*/
  end
  if (PC0YW00.PC0YWIX2 > 20)
                                   /* If more than 2 lines of prices*/
    set PC0YM003.PC0YMLT1[3] protect; /* Display third line literals*/
    set PC0YM003.PC0YMLT2[3] protect; /* Display third line literals*/
    set PC0YM003.PC0YMLT3[3] protect; /* Display third line literals*/
  end
  if (PC0YW00.PC0YWIX2 > 30)
                                   /* If more than 3 lines of prices*/
    set PC0YM003.PC0YMLT1[4] protect;
                                   /* Display fourth line literals*/
    set PC0YM003.PC0YMLT2[4] protect;
                                   /* Display fourth line literals*/
    set PC0YM003.PC0YMLT3[4] protect;
                                   /* Display fourth line literals*/
  end
end // end PC0Y173

// Check attention identifiers
Function PC0Y174()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PC0YS01(); /* Purge temporary storage*/
      set PCWREC empty; /* Initialize PC communications record*/
      XSPCS01(); /* Transfer*/
      PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
      COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
      XSPCS01(); /* Transfer*/
    else
      PC0YW00.XXXPRCNM = "PC0Y174"; /* Module identification*/
      set PC0YM003.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4  /* If PF4 was pressed*/
   || converseVar.eventKey is pf5  /* If PF5 was pressed*/
   || converseVar.eventKey is pf19 /* If PF19 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/


    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf19) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    else
      PCWREC.CAFROMAP[1] = " "; /* Init from ap 1*/
      PCWREC.PCWUSER1 = " "; /* Init user 1*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0YS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
    COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
    XSPCS01(); /* Transfer*/

  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3) 
    PC0YW00.XXXPRCNM = "PC0Y174"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
  end

end // end PC0Y174

// Reset highlighted fields
Function PC0Y175()
   /* ------------------------------------------------------------*/
   /* Return to redisplay map if any errors found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If any errors*/
    return; /* ; Return*/
  end

   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0YM003.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0YM003.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0YW00.XXXPRCNM = "PC0Y175"; /* Module identification*/
    set PC0YM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

end // end PC0Y175

// Audit inquiry selection
Function PC0Y200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Y220(); /* Format and display the map*/

  PC0Y230(); /* Check attention identifier*/

  PC0Y240(); /* Reset fields to normal intensity*/

  PC0Y250(); /* Verify the entered data*/

  PC0Y260(); /* Process valid input request*/

end // end PC0Y200

// Converse PO audit item map
Function PC0Y220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not PA key pressed*/
    PC0Y221(); /* Format the data on the map*/
    PC0YS12(); /* Highlight the pass data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0YM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0YM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0YM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0YM002.XXXPRCNM = PC0YW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0YM002 alarm; /* Indicate sound alarm*/
  end

  converse PC0YM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0YW00.XXXPRCNM = "PC0Y"; /* Module identification*/
  COMMAREA.CATOAP = PC0YM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0YM002.CAITEM; /* Application data*/

end // end PC0Y220

// Format detail lines of 001
Function PC0Y221()
  set PC0YM002 initial; /* M003 input/output area*/

  PC0YW00.PC0YWIX1 = PC0YW00.XXXTSPAG;
                                   /* Set index to requested page*/
  PC0YM002.PC0YWPA1 = PC0YW03.PC0YWPA1[PC0YWIX1]; /* Number of prod/d*/
  PC0YM002.PC0YWPA2 = PC0YW03.PC0YWPA2[PC0YWIX1]; /* Total prod/dest*/
  PC0YM002.PC0YWPB1 = PC0YW03.PC0YWPB1[PC0YWIX1]; /* Number of color*/
  PC0YM002.PC0YWPB2 = PC0YW03.PC0YWPB2[PC0YWIX1]; /* Total colors*/
  PC0YM002.PC0YWPC1 = PC0YW03.PC0YWPC1[PC0YWIX1]; /* Number of plan*/
  PC0YM002.PC0YWPC2 = PC0YW03.PC0YWPC2[PC0YWIX1]; /* Total plans*/
  PC0YW00.PC0YWPOD = PCWREC.PC3POIDT; /* PO ID*/
  PC0YW00.PC0YMYY = PC0YW00.PC0YWYY; /* PO ID year*/
  PC0YW00.PC0YMD1 = "-"; /* PO ID dash 1*/
  PC0YW00.PC0YMM1 = PC0YW00.PC0YWM1; /* PO ID buy month*/
  PC0YW00.PC0YMD2 = "-"; /* PO ID dash 2*/
  PC0YW00.PC0YMM2 = PC0YW00.PC0YWM2; /* PO ID deliver month*/
  PC0YW00.PC0YMD3 = "-"; /* PO ID dash 3*/
  PC0YW00.FY1FCTYC = PCWREC.FY1FCTYC; /* PO ID factory*/
  PC0YM002.PC0YMPOD = PC0YW00.PC0YMPOD; /* PO ID reformatted*/
  PC0YM002.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  PC0YM002.PC4ORTYP = PCWREC.PC4ORTYP; /* PO type*/
  PC0YM002.YSMXDV = PCWREC.YSMXDV; /* Division*/
  PC0YM002.XGPCD = PCWREC.XGPCD; /* GPC code*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0YW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0YW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0YW00.XXXTSPAG > PC0YW00.TA5TSQIX) /* Desired greater highest*/
        PC0YW00.XXXTSPAG = PC0YW00.TA5TSQIX; /* Default to highest*/
      end

      PC0YS04(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0YM002.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PC0YM002.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PC0YS35(); /* get reg description*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM002.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* po-reg-desc*/
  else /* Row not found*/
    PC0YM002.PO-REG-DESC = "*** NOT FOUND"; /* po-reg-desc*/
  end

  PC0YM002.XQACD = PC0YW02.XQACD; /* Quality*/
  PC0YM002.XOWCD = PC0YW02.XOWCD; /* Owner group*/
  PC0YM002.PC2INSEG = PC0YW02.PC2INSEG; /* Spec difference*/
  PC0YM002.XPGCD = PC0YW02.XPGCD; /* Package*/
  PC0YM002.XUMCD = PC0YW02.XUMCD; /* Unit of measure*/
  PC0YM002.PC6PLAN = PC0YW02.PC6PLAN; /* Plan*/
  PC0YM002.PC0YMETS = PC0YW02.PC0YMETS; /* ETS date*/
  PC0YM002.YMTCD = PC0YW02.YMTCD; /* Mode code*/
  PC0YM002.XWHCD = PC0YW02.XWHCD; /* Warehouse*/
  PC0YM002.PC2CUXID = PC0YW02.PC2CUXID; /* Customer*/
  PC0YM002.XDSCD = PC0YW02.XDSCD; /* Direct ship*/
  PC0YM002.YSMXDV = PC0YW02.YSMXDV; /* Divison group*/
  if (PC0YW02.OP1CUOID > 0)
    PC0YM002.OP1CUOID = PC0YW02.OP1CUOID; /* sALES oRDER*/
    PC0YM002.OP1NORID = PC0YW02.OP1NORID; /* sALES oRDER*/
  else
    PC0YM002.OP1CUOID = " "; /* no Sales Order*/
    PC0YM002.OP1NORID = " ";
  end

   /* ------------------------------------------------------------*/
   /* Get the style and color descriptions.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Initialize record*/
  PG2REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG2REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG2REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG2REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  XSPG202(); /* Retrieve style/color*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0YM002.SY1SSTNM = PG2REC.SY1SSTNM; /* Style description*/
    PC0YM002.SY2CLRAB = PG2REC.SY2CLRAB; /* Color description*/
  else /* Row not found*/
    PC0YM002.SY1SSTNM = "** NOT FOUND"; /* Style description*/
    PC0YM002.SY2CLRAB = "** NOT FOUND"; /* Color description*/
  end

   /* ------------------------------------------------------------*/
   /* Load the map detail lines.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 1; /* Initialize line index*/
  while (PC0YW00.PC0YWIXM <= 13 /* Until screen is full*/
   && PC0YW02.PC0YWLIN[PC0YWIXM] > " ") /* or end of data*/

    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable line*/
      set PC0YM002.PC0YMSEL[PC0YWIXM] normal; /* Unprotect select field*/
    end

    PC0YM002.PC0YMDTE[PC0YWIXM] = PC0YW02.PC0YMDTE[PC0YWIXM];
    PC0YM002.PC0YMTME[PC0YWIXM] = PC0YW02.PC0YMTME[PC0YWIXM];
    PC0YM002.YOASDESC[PC0YWIXM] = PC0YW02.YOASDESC[PC0YWIXM];
    PC0YM002.XXXPGUID[PC0YWIXM] = PC0YW02.XXXPGUID[PC0YWIXM];
    PC0YM002.YACDESC[PC0YWIXM] = PC0YW02.YACDESC[PC0YWIXM];

    if (PCWREC.XGPCD == "02") /* only move oa nbr when footwear*/
      PC0YM002.PA1OANBR[PC0YWIXM] = PC0YW02.PA1OANBR[PC0YWIXM];
    end

    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Set the cursor at the first enterable field*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 13; /* Initialize line index*/
  while (PC0YW00.PC0YWIXM >= 1) /* For each detail line*/
    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable line*/
      set PC0YM002.PC0YMSEL[PC0YWIXM] cursor; /* Position cursor on line*/
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM - 1; /* Decrement line index*/
  end

end // end PC0Y221

// Check attention identifiers
Function PC0Y230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* M001 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PC0YS01(); /* Purge temporary storage*/
      XSPCS01(); /* Transfer*/
      PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
      COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
      XSPCS01(); /* Transfer*/
    else
      PC0YW00.XXXPRCNM = "PC0Y230"; /* Module identification*/
      set PC0YM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/


    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0Q"; /* transfer to selection map*/
    else
      PCWREC.CAFROMAP[1] = " "; /* Init from ap 1*/
      PCWREC.PCWUSER1 = " "; /* Init user 1*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0YS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PCWREC.CAFROMAP[2] = COMMAREA.CATOAP; /* Save AP entered*/
    COMMAREA.CATOAP = "PC0Q"; /* If error transfer to PC0Q*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Return message*/
    XSPCS01(); /* Transfer*/

  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf9   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf18  
   && converseVar.eventKey not pf19)
    PC0YW00.XXXPRCNM = "PC0Y230"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0Y230

// Reset highlighted fields
Function PC0Y240()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0YM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0YM002.CAITEM initialAttributes; /* Commarea application data*/

  PC0YW00.PC0YWIXM = 1; /* Initialize map index*/
  while (PC0YW00.PC0YWIXM <= 13) /* For each map line*/
    if (PC0YW02.PC0YWSEL[PC0YWIXM] == "Y") /* If selectable field*/
      set PC0YM002.PC0YMSEL[PC0YWIXM] normal; /* Line selection field*/
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment map index*/
  end
end // end PC0Y240

// Verify the entered data
Function PC0Y250()
   /* ------------------------------------------------------------*/
   /* PF7 - Verify the page backward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0YW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW00.XXXTSPAG - 1; /* Decrement page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF8 - Verify the page forward scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0YW00.XXXTSPAG >= PC0YW00.TA5TSQIX) /* if no more pages*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW00.XXXTSPAG + 1; /* Increment page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF9 - Validate size selection.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* If size audit requested*/
    PC0YW00.PC0YWIXM = 13; /* Initialize map index*/
    PC0YW00.PC0YMSEL = "N"; /* Initialize selection flag*/
    while (PC0YW00.PC0YWIXM >= 1) /* For each map detail line*/
      if (PC0YM002.PC0YMSEL[PC0YWIXM] == "S") /* If line selected*/
        PC0YW00.PC0YMSEL = "Y"; /* Set selection flag*/
      else
        if (PC0YM002.PC0YMSEL[PC0YWIXM] != " ") /* If other than 'S'*/
          converseLib.validationFailed(13); /* Only 'S' can be used for select*/
          PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
          set PC0YM002.PC0YMSEL[PC0YWIXM] cursor, bold; /* Highlight*/
        end
      end
      PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM - 1; /* Decrement map line index*/
    end
    if (PC0YW00.PC0YMSEL == "N" /* If no lines selected*/
     && converseVar.validationMsgNum == 0) /* and no errors*/
      converseLib.validationFailed(25); /* No selection made*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      set PC0YM002.PC0YMSEL[1] cursor; /* Position cursor at first line*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF10 - Verify the scroll left request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* If scroll left request*/
    PC0YW00.PCWMAP = 1; /* Request left map*/
  end

   /* ------------------------------------------------------------*/
   /* PF18 - Validate request for next product/destination*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIX1 = PC0YW00.XXXTSPAG; /* Current page = index*/
  if (converseVar.eventKey is pf18) /* If next product/dest requested*/
    if (PC0YW03.PC0YWPA3[PC0YWIX1] == 0) /* if no more product/dests*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      converseLib.validationFailed(224); /* No more product/dests to display*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPA3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* PF19 - Validate request for next plan within color*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* If next plan requested*/
    if (PC0YW03.PC0YWPC3[PC0YWIX1] == 0) /* if no more plans*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      converseLib.validationFailed(226); /* No more plans for this color*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPC3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* ENTER - Validate request for next color within product/dest*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If next color requested*/
    if (PC0YW03.PC0YWPB3[PC0YWIX1] == 0) /* if no more colors*/
      PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
      converseLib.validationFailed(225); /* No more colors for this prod/dest*/
    else
      PC0YW00.XXXTSPAG = PC0YW03.PC0YWPB3[PC0YWIX1]; /* Page number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0YW00.XXXPRCNM = "PC0Y250"; /* Module identification*/
    set PC0YM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

end // end PC0Y250

// Process valid input request
Function PC0Y260()
   /* ------------------------------------------------------------*/
   /* If not a size audit inquiry request then return.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9) /* If not size audit request*/
    return; /* Return*/
  end

   /* ------------------------------------------------------------*/
   /* Get size descriptions.*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Initialize record*/
  PG3REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  PG3REC.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  PG3REC.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  PG3REC.XQACD = PC0YW02.XQACD; /* Quality*/
  PG3REC.PG3FUNCD = "PC"; /* Function*/
  PG3REC.PG3DATFM = "N"; /* Data format no compress*/
  XSPG301(); /* Select size descriptions*/

   /* ------------------------------------------------------------*/
   /* Show size audit screens for each item aduit selected.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXM = 1; /* Initialize map index*/
  while (PC0YW00.PC0YWIXM <= 13 /* While more detail lines*/
   && converseVar.eventKey not pf3) /* and not return to selection*/
    if (PC0YM002.PC0YMSEL[PC0YWIXM] == "S") /* If line selected*/
      PC0YS03(); /* Select size audit*/
      if (SQLCA.VAGen_SQLCODE == +100) /* no audit size found*/
        converseLib.validationFailed(505);
        return;
      else
        if (PC0YM002.YOASDESC[PC0YWIXM] == "FOB PRICE"
         || PC0YM002.YOASDESC[PC0YWIXM] == "FOB CHANGE")
          PC0Y171(); /* Converse size price screen*/
          while (converseVar.validationMsgNum != 0 /* While errors*/
           || converseVar.eventKey is pa2) /* or cancel requested*/
            PC0Y171(); /* Converse size price screen*/
          end
        else
          PC0Y161(); /* Converse size quantity screen*/
          while (converseVar.validationMsgNum != 0 /* While errors*/
           || converseVar.eventKey is pa2) /* or cancel requested*/
            PC0Y161(); /* Converse size quantity screen*/
          end
        end
      end
    end
    PC0YW00.PC0YWIXM = PC0YW00.PC0YWIXM + 1; /* Increment map line index*/
  end

end // end PC0Y260

// Purge any temporary storage
Function PC0YS01()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0YW02 empty; /* Map display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0YW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0YW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0YW00.XXXPRCNM = "PC0YS01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMNM = "PC0YS01"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0YS01

// Convert date
Function PC0YS02()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to convert date.*/
   /* ------------------------------------------------------------*/
  TA2REC.TA2GRTYP = "G"; /* Type CCYYMMDD*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0YW00.XXXPRCNM = "PC0YS02"; /* MODULE IDENTIFICATION*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMNM = PC0YW00.XXXPRCNM; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0YS02

// Select unique - VPOASZ01
Function PC0YS03()
   /* ------------------------------------------------------------*/
   /* Format PCKREC with key values for select set*/
   /* ------------------------------------------------------------*/

  set VPOASZ02 empty; /* Initialize pckrec*/

  VPOASZ02.XGPCD = PCWREC.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = PC0YW02.PCJSEQNO[PC0YWIXM]; /* Sequence number*/
  VPOASZ02.SY1STNBR = PC0YW02.SY1STNBR; /* Style*/
  VPOASZ02.SY2CLRID = PC0YW02.SY2CLRID; /* Color*/
  VPOASZ02.XDMCD = PC0YW02.XDMCD; /* Dimension*/
  VPOASZ02.XQACD = PC0YW02.XQACD; /* Quality*/
  VPOASZ02.XOWCD = PC0YW02.XOWCD; /* Owner group*/
  VPOASZ02.PC2INSEG = PC0YW02.PC2INSEG; /* Spec difference*/
  VPOASZ02.XPGCD = PC0YW02.XPGCD; /* Package*/
  VPOASZ02.XUMCD = PC0YW02.XUMCD; /* Unit of measure*/
  VPOASZ02.PC6ETSDT = PC0YW02.PC6ETSDT; /* ETS date*/
  VPOASZ02.YMTCD = PC0YW02.YMTCD; /* Mode code*/
  VPOASZ02.XWHCD = PC0YW02.XWHCD; /* Warehouse*/
  VPOASZ02.PC2CUXID = PC0YW02.PC2CUXID; /* Customer*/
  VPOASZ02.PC6OETS = PC0YW02.PC6OETS; /* Original ETS*/
  VPOASZ02.PC6RTADT = PC0YW02.PC6RTADT; /* RTA date*/
  VPOASZ02.PC6CXNBR = PC0YW02.PC6CXNBR; /* Cancel Version Nbr*/
  VPOASZ02.OP1PARTN = PC0YW02.OP1PARTN; /* SALES ORDER FIELDS*/
  VPOASZ02.OP1CUOID = PC0YW02.OP1CUOID; /* SALES ORDER FIELDS*/
  VPOASZ02.OP1NORID = PC0YW02.OP1NORID; /* SALES ORDER FIELDS*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("Z ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0YW00.XXXPRCNM = "PC0YS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO SELECT DPRODC.VPOASZ02";
  TA1REC.TA1PGMNM = "PC0YS03"; /* Module identification*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  PC0YW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0YW00.PC0YWKA1 = VPOASZ02.XGPCD; /* Key field 1*/
  PC0YW00.PC0YWKN2 = VPOASZ02.PC3PONBR; /* Key field 2*/
  PC0YW00.PC0YWKA3 = VPOASZ02.SY1STNBR; /* Key field 3*/
  PC0YW00.PC0YWKA4 = VPOASZ02.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0YW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0YS03

// Read page from temp storage
Function PC0YS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0YW02.XXXTSLEN = PC0YW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0YW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0YW00.XXXPRCNM = "PC0YS04"; /* Module identification*/

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMNM = "PC0YS04"; /* Module identification*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0YS04

// highlight header data
Function PC0YS11()
   /* ------------------------------------------------------------*/
   /* Highlight the header data in the map from the pass record.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.FY1FCTYC > " ")
    set PC0YM001.PC0YMPOD skip, bold; /* PO ID reformatted*/
    set PC0YM001.PC4ORTYP skip, bold; /* PO type*/
  end

  set PC0YM001.XGPCD skip, bold; /* GPC code*/
  set PC0YM001.PC3PONBR skip, bold; /* PO number*/


  if (PCWREC.SY1STNBR != "*") /* If not wildcarded*/
    set PC0YM001.SY1STNBR skip, bold; /* Style*/
  end

  if (PCWREC.SY2CLRID != "*") /* If not wildcarded*/
    set PC0YM001.SY2CLRID skip, bold; /* Color*/
  end

  if (PCWREC.XWHCD != "*") /* If not wildcarded*/
    set PC0YM001.XWHCD skip, bold; /* Warehouse*/
  end

  if (PCWREC.PC2CUXID != "*") /* If not wildcarded*/
    set PC0YM001.PC2CUXID skip, bold; /* Customer*/
  end

  if (PCWREC.XDSCD != "*") /* If not wildcarded*/
    set PC0YM001.XDSCD skip, bold; /* Direct ship*/
  end

  if (PCWREC.XGPCD == "03") /* If gpc '03' (apparel)*/
    set PC0YM001.PC0YOANR protect, invisible; /* darken oa nbr column*/
  end


end // end PC0YS11

// highlight header data
Function PC0YS12()
   /* ------------------------------------------------------------*/
   /* Highlight the header data in the map from the pass record.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.FY1FCTYC > " ")
    set PC0YM002.PC0YMPOD skip, bold; /* PO ID reformatted*/
    set PC0YM002.PC4ORTYP skip, bold; /* PO type*/
  end

  set PC0YM002.XGPCD skip, bold; /* GPC code*/
  set PC0YM002.PC3PONBR skip, bold; /* PO number*/


  if (PCWREC.SY1STNBR != "*") /* If not wildcarded*/
    set PC0YM002.SY1STNBR skip, bold; /* Style*/
  end

  if (PCWREC.SY2CLRID != "*") /* If not wildcarded*/
    set PC0YM002.SY2CLRID skip, bold; /* Color*/
  end

  if (PCWREC.XWHCD != "*") /* If not wildcarded*/
    set PC0YM002.XWHCD skip, bold; /* Warehouse*/
  end

  if (PCWREC.PC2CUXID != "*") /* If not wildcarded*/
    set PC0YM002.PC2CUXID skip, bold; /* Customer*/
  end

  if (PCWREC.XDSCD != "*") /* If not wildcarded*/
    set PC0YM002.XDSCD skip, bold; /* Direct ship*/
  end

  if (PCWREC.XGPCD == "03") /* If gpc '03' (apparel)*/
    set PC0YM002.PC0YOANR protect, invisible; /* darken oa nbr column*/
  end


end // end PC0YS12

// highlight header data
Function PC0YS13()
   /* ------------------------------------------------------------*/
   /* Highlight the header data in the map from the pass record.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.FY1FCTYC > " ")
    set PC0YM003.PC0YMPOD skip, bold; /* PO ID reformatted*/
    set PC0YM003.PC4ORTYP skip, bold; /* PO type*/
  end

  set PC0YM003.XGPCD skip, bold; /* GPC code*/
  set PC0YM003.PC3PONBR skip, bold; /* PO number*/


  if (PCWREC.SY1STNBR != "*") /* If not wildcarded*/
    set PC0YM003.SY1STNBR skip, bold; /* Style*/
  end

  if (PCWREC.SY2CLRID != "*") /* If not wildcarded*/
    set PC0YM003.SY2CLRID skip, bold; /* Color*/
  end

  if (PCWREC.XWHCD != "*") /* If not wildcarded*/
    set PC0YM003.XWHCD skip, bold; /* Warehouse*/
  end

  if (PCWREC.PC2CUXID != "*") /* If not wildcarded*/
    set PC0YM003.PC2CUXID skip, bold; /* Customer*/
  end

  if (PCWREC.XDSCD != "*") /* If not wildcarded*/
    set PC0YM003.XDSCD skip, bold; /* Direct ship*/
  end


end // end PC0YS13

// highlight header data
Function PC0YS14()
   /* ------------------------------------------------------------*/
   /* Highlight the header data in the map from the pass record.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.FY1FCTYC > " ")
    set PC0YM004.PC0YMPOD skip, bold; /* PO ID reformatted*/
    set PC0YM004.PC4ORTYP skip, bold; /* PO type*/
  end

  set PC0YM004.XGPCD skip, bold; /* GPC code*/
  set PC0YM004.PC3PONBR skip, bold; /* PO number*/


  if (PCWREC.SY1STNBR != "*") /* If not wildcarded*/
    set PC0YM004.SY1STNBR skip, bold; /* Style*/
  end

  if (PCWREC.SY2CLRID != "*") /* If not wildcarded*/
    set PC0YM004.SY2CLRID skip, bold; /* Color*/
  end

  if (PCWREC.XWHCD != "*") /* If not wildcarded*/
    set PC0YM004.XWHCD skip, bold; /* Warehouse*/
  end

  if (PCWREC.PC2CUXID != "*") /* If not wildcarded*/
    set PC0YM004.PC2CUXID skip, bold; /* Customer*/
  end

  if (PCWREC.XDSCD != "*") /* If not wildcarded*/
    set PC0YM004.XDSCD skip, bold; /* Direct ship*/
  end

  if (PCWREC.XGPCD == "03") /* If gpc '03' (apparel)*/
    set PC0YM004.PC0YOANR protect, invisible; /* Darken oa nbr column*/
  end


end // end PC0YS14

// driver strip off leading zeros
Function PC0YS20()
   /* ------------------------------------------------------------*/
    /* This routine is a driver module to control which routine*/
    /* to perform dependent on GPC and Audit Type Code.*/
   /* ------------------------------------------------------------*/

  if (VPOAIT02.XGPCD == "02" /* ===> Footwear*/
   && VPOAIT02.YOACD == "03") /* ===> FOB Audit Type Code*/

    PC0YS21(); /* ====> do FOB type audit leading zero strip routine*/

  end


  if (VPOAIT02.XGPCD == "03" /* ===> Apparel*/
   && VPOAIT02.YOACD == "75") /* ===> FOB Audit Type Code*/

    PC0YS21(); /* ====> do FOB type audit leading zero strip routine*/

  end

end // end PC0YS20

// strip off leading zeros (FOB)
Function PC0YS21()
   /* ------------------------------------------------------------*/
    /* This routine will strip off leading zeros created from*/
    /* a numeric field being loaded/formatted to a character*/
    /* field.  The working storage field used in this process*/
    /* is identical to the length of the display fields on the*/
    /* map and is PC0YW00.PC0YWtxt. it will be indexed by*/
    /* PC0YW00.PC0YIXT on the positional field PC0YW00.PC0YWPOS*/
    /* this module uses a starting relative index for FOB type*/
    /* audits.*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXT = 7; /* ===> temp. text index*/

  while (PC0YW00.PC0YWIXT <= 9 /* ===> temp. text index*/
   && PC0YW00.PC0YWPOS[PC0YWIXT] == "0") /* ===> text position*/

    PC0YW00.PC0YWPOS[PC0YWIXT] = " "; /* ===> text position*/
    PC0YW00.PC0YWIXT = PC0YW00.PC0YWIXT + 1; /* ===> decrement index*/

  end

end // end PC0YS21

// strip off leading zeros(other)
Function PC0YS22()
   /* ------------------------------------------------------------*/
    /* This routine will strip off leading zeros created from*/
    /* a numeric field being loaded/formatted to a character*/
    /* field.  The working storage field used in this process*/
    /* is identical to the length of the display fields on the*/
    /* map and is PC0YW00.PC0YWtxt. it will be indexed by*/
    /* PC0YW00.PC0YIXT on the positional field PC0YW00.PC0YWPOS*/
   /* ------------------------------------------------------------*/

  PC0YW00.PC0YWIXT = 2; /* ===> temp. text index*/

  while (PC0YW00.PC0YWIXT <= 9 /* ===> temp. text index*/
   && PC0YW00.PC0YWPOS[PC0YWIXT] == "0") /* ===> text position*/

    PC0YW00.PC0YWPOS[PC0YWIXT] = " "; /* ===> text position*/
    PC0YW00.PC0YWIXT = PC0YW00.PC0YWIXT + 1; /* ===> decrement index*/

  end

  if (PC0YW00.PC0YWPOS[PC0YWIXT] == " ") /* ===> text position*/
    PC0YW00.PC0YWIXT = PC0YW00.PC0YWIXT - 1; /* ===> increment index*/
    PC0YW00.PC0YWPOS[PC0YWIXT] = "0"; /* ===> text position*/
  end

end // end PC0YS22

// Select unique from VPOREG01
Function PC0YS35()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PCWREC.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = PCWREC.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to get desc.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0YM001.XXXPRCNM = "PC0YS35"; /* Module name*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PC0YS35"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack; /* Exit to display map*/

end // end PC0YS35

//*** RECORD=PC0YW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0YW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PCWMAP PCWMAP ; 
  10 PC0YWSWR PC0YWSWR ; 
  10 PC0YMSEL PC0YMSEL ; 
  10 PC0YWDCF PC0YWDCF ; 
  10 PC0YWIX1 PC0YWIX1 ; 
  10 PC0YWIX2 PC0YWIX2 ; 
  10 PC0YWIX3 PC0YWIX3 ; 
  10 PC0YWIXT PC0YWIXT ; 
  10 PC0YWTXT PC0YWTXT ; 
    15 PC0YWPOS PC0YWPOS [40] ; 
  10 PC0YWIXM PC0YWIXM ; 
  10 PC0YWCTM PC0YWCTM ; 
    15 PC0YWSTM PC0YWSTM ; 
      20 PC0YWWHH PC0YWWHH ; 
      20 PC0YWMM PC0YWMM ; 
    15 PC0YWSS PC0YWSS ; 
  10 PC0YWPOD PC0YWPOD ; 
    15 PC0YWYY PC0YWYY ; 
    15 PC0YWM1 PC0YWM1 ; 
    15 PC0YWM2 PC0YWM2 ; 
  10 PC0YMPOD PC0YMPOD ; 
    15 PC0YMYY PC0YMYY ; 
    15 PC0YMD1 PC0YMD1 ; 
    15 PC0YMM1 PC0YMM1 ; 
    15 PC0YMD2 PC0YMD2 ; 
    15 PC0YMM2 PC0YMM2 ; 
    15 PC0YMD3 PC0YMD3 ; 
    15 FY1FCTYC FY1FCTYC ; 
  10 PC0YWKEY PC0YWKEY ; 
    15 PC0YWKY1 PC0YWKY1 ; 
    15 PC0YWKY2 PC0YWKY2 ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0YWKA1 PC0YWKA1 ; 
      20 PC0YWKN1 PC0YWKN1 ; 
      20 * char(1) ; 
    15 PC0YWKA2 PC0YWKA2 ; 
      20 PC0YWKN2 PC0YWKN2 ; 
      20 * char(1) ; 
    15 PC0YWKA3 PC0YWKA3 ; 
      20 PC0YWKN3 PC0YWKN3 ; 
      20 * char(1) ; 
    15 PC0YWKA4 PC0YWKA4 ; 
      20 PC0YWKN4 PC0YWKN4 ; 
      20 * char(1) ; 
end // end PC0YW00

//*** RECORD=PC0YW01 ****
// ************ MAP LINE STORAGE FOR PC0YM001 *****************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/04/89   JNEWMA   NEW RECORD.
// 11/28/90   kdenne   replaced pc_chng_memo_nbr with
//                              pa_ord_adj_nbr.
// ***********************
Record PC0YW01 type basicRecord
  10 PC0YWSAV PC0YWSAV ; 
    15 PC0YWPRD PC0YWPRD ; 
      20 SY1STNBR SY1STNBR ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XOWCD XOWCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XDSCD XDSCD ; 
      20 XWHCD XWHCD ; 
      20 PC2CUXID PC2CUXID ; 
    15 SY2CLRID SY2CLRID ; 
    15 PC6PLAN PC6PLAN ; 
    15 PC0YMETS PC0YMETS ; 
    15 YMTCD YMTCD ; 
    15 PC6ETSDT PC6ETSDT ; 
    15 PC6OETS PC6OETS ; 
    15 PC6RTADT PC6RTADT ; 
    15 YSMXDV YSMXDV ; 
    15 PC6CXNBR PC6CXNBR ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
  10 PC0YWLIN PC0YWLIN ; 
    15 PC0YWSEL PC0YWSEL ; 
    15 PCJSEQNO PCJSEQNO ; 
    15 PC0YMDTE PC0YMDTE ; 
    15 PC0YMTME PC0YMTME ; 
      20 PC0YWWHH PC0YWWHH ; 
      20 PC0YWCLN PC0YWCLN ; 
      20 PC0YWMM PC0YWMM ; 
    15 YOASDESC YOASDESC ; 
    15 XXXPGUID XXXPGUID ; 
    15 PA1OANBR PA1OANBR ; 
    15 PC0YMBFR PC0YMBFR ; 
      20 PC0YWBFS PC0YWBFS ; 
      20 PC0YWBFN PC0YWBFN ; 
      20 * char(10) ; 
    15 PC0YMAFT PC0YMAFT ; 
      20 PC0YWAFS PC0YWAFS ; 
      20 PC0YWAFN PC0YWAFN ; 
      20 * char(10) ; 
    15 PCJNETQT PCJNETQT ; 
    15 YACDESC YACDESC ; 
end // end PC0YW01

//*** RECORD=PC0YW02 ****
// ********** MAP page STORAGE FOR PC0yM001 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/04/89   JNEWMA   NEW RECORD.
// 11/28/90   kdenne   replaced pc_chng_memo_nbr with
//                              pa_ord_adj_nbr.
// ***********************
Record PC0YW02 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 PC0YWSAV PC0YWSAV ; 
    15 PC0YWPRD PC0YWPRD ; 
      20 SY1STNBR SY1STNBR ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XOWCD XOWCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XDSCD XDSCD ; 
      20 XWHCD XWHCD ; 
      20 PC2CUXID PC2CUXID ; 
    15 SY2CLRID SY2CLRID ; 
    15 PC6PLAN PC6PLAN ; 
    15 PC0YMETS PC0YMETS ; 
    15 YMTCD YMTCD ; 
    15 PC6ETSDT PC6ETSDT ; 
    15 PC6OETS PC6OETS ; 
    15 PC6RTADT PC6RTADT ; 
    15 YSMXDV YSMXDV ; 
    15 PC6CXNBR PC6CXNBR ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
  10 PC0YWLIN PC0YWLIN [13] ; 
    15 PC0YWSEL PC0YWSEL ; 
    15 PCJSEQNO PCJSEQNO ; 
    15 PC0YMDTE PC0YMDTE ; 
    15 PC0YMTME PC0YMTME ; 
      20 PC0YWWHH PC0YWWHH ; 
      20 PC0YWCLN PC0YWCLN ; 
      20 PC0YWMM PC0YWMM ; 
    15 YOASDESC YOASDESC ; 
    15 XXXPGUID XXXPGUID ; 
    15 PA1OANBR PA1OANBR ; 
    15 PC0YMBFR PC0YMBFR ; 
      20 PC0YWBFN PC0YWBFN ; 
      20 PC0YWBFS PC0YWBFS ; 
      20 * char(10) ; 
    15 PC0YMAFT PC0YMAFT ; 
      20 PC0YWAFN PC0YWAFN ; 
      20 PC0YWAFS PC0YWAFS ; 
      20 * char(10) ; 
    15 PCJNETQT PCJNETQT ; 
    15 YACDESC YACDESC ; 
end // end PC0YW02

//*** RECORD=PC0YW03 ****
// Page number array for finding next plan, color, or prod/dest
// ***********************
Record PC0YW03 type basicRecord
  5 PC0YW3GP PC0YW3GP [200] ; 
    10 PC0YWPA1 PC0YWPA1 ; 
    10 PC0YWPA2 PC0YWPA2 ; 
    10 PC0YWPA3 PC0YWPA3 ; 
    10 PC0YWPB1 PC0YWPB1 ; 
    10 PC0YWPB2 PC0YWPB2 ; 
    10 PC0YWPB3 PC0YWPB3 ; 
    10 PC0YWPC1 PC0YWPC1 ; 
    10 PC0YWPC2 PC0YWPC2 ; 
    10 PC0YWPC3 PC0YWPC3 ; 
end // end PC0YW03

// After image alpha
DataItem PC0YMAFT char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Before image alpha
DataItem PC0YMBFR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 1
DataItem PC0YMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 2
DataItem PC0YMD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID dash 3
DataItem PC0YMD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Setup date
DataItem PC0YMDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformatted PC_EST_HDT
DataItem PC0YMETS char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0YMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0YMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted for map
DataItem PC0YMPOD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map selection flag
DataItem PC0YMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Setup time
DataItem PC0YMTME char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0YMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page number array
DataItem PC0YW3GP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// After image numeric
DataItem PC0YWAFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// After numeric sign
DataItem PC0YWAFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Before image numeric
DataItem PC0YWBFN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Before numeric sign
DataItem PC0YWBFS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon
DataItem PC0YWCLN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete setup time
DataItem PC0YWCTM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor flag
DataItem PC0YWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array index 1
DataItem PC0YWIX1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index 2
DataItem PC0YWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index 3
DataItem PC0YWIX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map detail line index
DataItem PC0YWIXM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Text  index for leading zeros
DataItem PC0YWIXT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0YWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0YWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0YWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0YWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for CSP table access
DataItem PC0YWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0YWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0YWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0YWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0YWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First field of key
DataItem PC0YWKY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second field of key
DataItem PC0YWKY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map detail line
DataItem PC0YWLIN char(115)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0YWM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0YWM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minutes
DataItem PC0YWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of this product/dest
DataItem PC0YWPA1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total number of product/dests
DataItem PC0YWPA2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number of next prod/dest
DataItem PC0YWPA3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of this color in p/d
DataItem PC0YWPB1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total number of colors in p/d
DataItem PC0YWPB2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number of next color
DataItem PC0YWPB3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of this plan in color
DataItem PC0YWPC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total number of plans in color
DataItem PC0YWPC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page number of next plan in cl
DataItem PC0YWPC3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID from DB
DataItem PC0YWPOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// positional text field
DataItem PC0YWPOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save product/destination
DataItem PC0YWPRD char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save product,dest,color,plan
DataItem PC0YWSAV char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map selection flag
DataItem PC0YWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem PC0YWSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen setup time
DataItem PC0YWSTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data flag
DataItem PC0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text field (to remove zeros)
DataItem PC0YWTXT char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours
DataItem PC0YWWHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0YWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

