package pc04;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PC04 ****
// ************************************************************
// *                                                          *
// *   THIS SCREEN IS USED TO CREATE THE FACTORY SUMMARY      *
// *   REPORT AND THE FACTORY DETAIL REPORT.                  *
// *                                                          *
// *   ONLY FOOTWEAR CAN USE THIS SCREEN.                     *
// *                                                          *
// *   THE USER CAN ENTER THE POID RANGE FOR THE REPORTS THEY *
// *   WISH TO GENERATE.  ONLY THE FIRST SIX DIGITS OF THE    *
// *   POID IN THE FROM AND TO POID'S.  TO SPECIFY THE POID   *
// *   FACTORY THE USER WILL ENTER THE FACTORY CODE IN THE    *
// *   CORRECT MAP FIELD.  THE USER CAN ENTER AS MANY ?????   *
// *   FACTORIES AS THEY WANT.                                *
// *                                                          *
// *   IF THE USER WANTS A REPORT FOR A SPECIFIC COUNTRY THE  *
// *   USER WILL ENTER OR SELECT THE COUNTRY CODE THEY WISH   *
// *   IN THE CORRECT FIELD. IF THE COUNTRY FIELD IS LEFT     *
// *   BLANK ALL COUNTRIES WILL PRINT ON THE REPORT.          *
// *                                                          *
// *   IF A REPORT FOR A SPECIFIC QUALITY CODE IS WANTED THE  *
// *   USER WILL BE ABLE TO ENTER OR SELECT THE QUALITY CODE  *
// *   THEY WISH.  IF LEFT BLANK ALL QUALITY CODE WILL BE     *
// *   PRINTED.  THE PROGRAM WILL DEFAULT TO A QUALITY CODE   *
// *   OF 01.                                                 *
// *                                                          *
// *   THE USER MUST SPECIFY ONE REPORT IN ORDER TO DO ANY    *
// *   PROCESSING (TRANSFERING TO THE REPORT REQUESTER).      *
// *                                                          *
// *                                                          *
// *   12-05-89    JWOOD     REMOVED TARREC FROM LIST         *
// *   12-05-89    JWOOD     REPLACED TA0PM001                *
// *   07-17-90    JWOOD     REMOVED UT2REC FROM LIST         *
// *   09-27-90    MPISTO    allow request for ALL countries  *
// *   11-01-90    MPISTO    add mapper file                  *
// *   01-30-90    mpisto    allow any valid po date          *
// *   11-17-1997  TTHAN1    Y2KFIX - REGEN TO PICK UP NEW    *
// *                         XX0XS01.
// ************************************************************
// *********************
Program PC04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC04W01 PC04W01; // record
  PC04W02 PC04W02; // record
  PC04W03 PC04W03; // record
  PC04W04 PC04W04; // record
  PC3REC PC3REC; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use PC04T01 {deleteAfterUse = yes}; // table
  use PC04T11 {deleteAfterUse = yes}; // table
  use PC04M.PC04M010,  // forms
      PC04M.TA0PM001, 
      PC04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
       /* INITIALIZE RECORDS ETC.*/
     /* ------------------------------------------------------------*/

    set PC04W01 empty; /* Clear working storage*/
    set PC04W02 empty; /* Clear jcl working storage*/
    set PC04W03 empty; /* Clear Parm. check storage*/
    set PC04W04 empty; /* Clear Parm. storage*/

    set FY1REC empty; /* Clear factory record*/
    set TA1REC empty; /* Clear error passing record*/
    set TA2REC empty; /* Clear date record*/
    set XCTHREC empty; /* Clear CICS QUERRY record*/
    set TA6REC empty; /* Clear print request record*/
    set TAEREC empty; /* Clear error record*/

    set SQLCA empty; /* Clear sql record*/
    set ERRSQLCA empty; /* Clear errsql record*/

    set XX0XW01 empty; /* Clear record*/
    set XX0XW02 empty; /* Clear record*/

    set PC04M010 initial; /* Clear map*/
    set XX0XM001 initial; /* Clear pop-up map*/


     /* ------------------------------------------------------------*/
      /* INITIALIZE MAP FIELDS*/
     /* ------------------------------------------------------------*/

    PC04M010.XGPCD = PCWREC.XGPCD; /* Move in gpc code*/
    PC04M010.XGPDESC = "FOOTWEAR"; /* move in description*/

    PC04M010.PC04MFSR = "N"; /* Factory summary report*/
    PC04M010.PC04MFDR = "N"; /* Factory detail report*/
    PC04M010.PC04MEXP = "N"; /* Factory export flag*/
    PC04M010.XQACD = "01"; /* Quality code*/
    PC04M010.XQADESC = "FIRST QUALITY"; /* Quality code description*/

     /* ------------------------------------------------------------*/
      /* INITIALIZE WORKING STORAGE FIELDS*/
     /* ------------------------------------------------------------*/

    PC04W01.PC04WMAX = 10; /* Max amount of parms.*/
    PC04W01.PC04WAIX = 0; /* Array index*/
    PC04W01.PC04WLIX = 0; /* Line index*/


    PC04000: PC04000();
     /* no flow*/
    PC04050: PC04050();

    goto PC04050; /* Program flow*/

  end // end main
end // end PC04

// Special initialization
Function PC04000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC04W01.PC04WCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC04"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE CURRENT ROUTINE";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC04M010.XXXERRID = "PC04000"; /* Process name*/

    end
  end


end // end PC04000

// MAIN PROCESS TO DISPLAY MAP
Function PC04050()

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02") /* Footware*/
    if (COMMAREA.CACLVL[2] == "Y") /* User can enter*/

      PC04080(); /* Report generation pcocess*/

    else
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* To application*/
      XSPCS01(); /* Exit to another application*/
      PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "MN0M"; /* To application*/
      XSPCS01(); /* Exit to another application*/
    end
  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end


   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO get userid*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USERID ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    PC04W01.PC04WUSR = TA3REC.TA3USRID;
  else

    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

end // end PC04050

// PROGRAM PROCESS CONTROL
Function PC04080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.  N/A*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PC04200(); /* Format and display the map*/

  PC04300(); /* Check attention identifier*/

  PC04400(); /* Reset fields to normal intensity*/

  PC04500(); /* Verify the entered data*/

  PC04600(); /* Process the entered data*/


end // end PC04080

// FORMAT AND DISPLAY MAP
Function PC04200()

   /* ------------------------------------------------------------*/
     /* CHECK FOR ERRORS OR MESSAGES AND DISPLAY THE MAP*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   || converseVar.validationMsgNum == 253) /* Parm. has been entered*/

    if (converseVar.validationMsgNum == 253)
      if (PC04M010.FY1FCTYC > " ") /* Something there*/
        set PC04M010.FY1FCTYC cursor; /* Factory code*/
      end
      if (PC04M010.XCTCD > " ") /* Something there*/
        set PC04M010.XCTCD cursor; /* Country code*/
      end
    else
      set PC04M010.PC04MBYY cursor; /* P.O. ID year*/
    end

  else


    if (converseVar.validationMsgNum == 190 /* ===> Job submitted message*/
     && COMMAREA.CAMSG > " ")               /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC04M010.XXXERRID = "PC04200"; /* Process name*/
      PC04M010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PC04M010 alarm; /* Sound alarm*/

  end

  PC04M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/



  converse PC04M010 ;

  if (converseVar.eventKey is enter) /* Enter Key pressed*/
    PC04210(); /* Pop-up window*/
  end


end // end PC04200

// POP UP WINDOW
Function PC04210()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC04M010.XCTCD == "?" /* if ? in Country code field*/
   || PC04M010.XQACD == "?") /* if ? in Quality code field*/

      /* Next Sentence*/

  else

    return; /* Return to previous process*/

  end

  if (PC04M010.XCTCD == "?") /* if ? in Country code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               COUNTRY CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXCT01(); /* perform Country code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Country    **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC04M010.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      PC04M010.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move code*/
      set PC04M010.XCTCD cursor, modified;
    else
      PC04M010.XCTCD = PC04W01.XCTCD; /* clear fields*/
      PC04M010.XCTDESC = PC04W01.XCTDESC; /* move code*/
      set PC04M010.XCTCD cursor, modified;
    end
  end


  if (PC04M010.XQACD == "?") /* if ? in Quality code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               QUALITY CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXQA01(); /* perform quality code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Quality    **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC04M010.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      PC04M010.XQADESC = XQATBL.XQADESC[XX0XWPIX]; /* move code*/
      set PC04M010.XQACD cursor, modified;
    else
      PC04M010.XQACD = PC04W01.XQACD; /* clear fields*/
      PC04M010.XQADESC = PC04W01.XQADESC; /* move code*/
      set PC04M010.XQACD cursor, modified;
    end
  end


  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(84); /* Hit enter to process*/

  exit stack; /* Exit to redisplay map2*/


end // end PC04210

// CHECK ATTENTION INDENTIFIERS
Function PC04300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end


  if (PC04M010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC04M010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC04M010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC04M010.XXXERRID = "PC04300"; /* Process name*/
    end

    set PC04M010.CATOAP cursor, bold; /* Highlight*/
    PC04M010.XXXERRID = "PC04300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CAITEM = "PC04M010"; /* To item*/
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0X";
    XSPCS01();

    PC04M010.XXXERRID = "PC04300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC04M010.XXXERRID = "PC04300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end


  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC04M010.XXXERRID = "PC04300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* PF9 was not pressed*/

    PC04M010.XXXERRID = "PC0430A"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC04300

// RESET HIGHLIGHTED FIELDS
Function PC04400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC04M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC04M010.CAITEM initialAttributes; /* Commarea application data*/

  set PC04M010.PC04MBYY initialAttributes; /* P.O. id production year*/
  set PC04M010.PC04MBM1 initialAttributes; /* P.O. id production month*/
  set PC04M010.PC04MBM2 initialAttributes; /* P.O. id delivery month*/


  set PC04M010.FY1FCTYC initialAttributes; /* Factory code*/
  set PC04M010.XCTCD initialAttributes; /* Country code*/
  set PC04M010.XQACD initialAttributes; /* Quality code*/

  set PC04M010.PC04MFSR initialAttributes; /* Factory summ. report request*/
  set PC04M010.PC04MFDR initialAttributes; /* Factory details report request*/
  set PC04M010.PC04MEXP initialAttributes; /* Factory export to mapper flag*/


end // end PC04400

// PROCESS EDITS
Function PC04500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC04M010.CAITEM > " ") /* Application data was entered*/

    set PC04M010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC04M010.XXXERRID = "PC04500"; /* Process name*/

  else
    if (PC04W04.XGPCD[1] == " ") /* Nothing there*/
      PC04510(); /* Verify the entered data*/
      PC04521(); /* Process required poid*/
    end

    if (converseVar.validationMsgNum == 0) /* No message*/
      PC04540(); /* Process factory or country*/
      PC04530(); /* Process parm. edits*/
    end
  end


end // end PC04500

// EDIT THE REPORT REQUESTORS
Function PC04510()

   /* ------------------------------------------------------------*/
     /* EDIT THE FLAGS, QUALITY CODE, COUNTRY CODE, AND FACTORY*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* CHECK THE REPORT REQUEST FLAGS.*/
   /* ------------------------------------------------------------*/


  if (PC04M010.PC04MFDR == "Y"
   || PC04M010.PC04MFDR == "N")
  else
    set PC04M010.PC04MFDR cursor, bold; /* Highlight error*/
    converseLib.validationFailed(42); /* Only y or n valid*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  end


  if (PC04M010.PC04MFSR == "Y"
   || PC04M010.PC04MFSR == "N")
    PC04W01.PC04MFSR = PC04M010.PC04MFSR;
  else
    set PC04M010.PC04MFSR cursor, bold; /* Highlight error*/
    converseLib.validationFailed(42); /* Only y or n valid*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  end


  if (PC04M010.PC04MFSR == "N" /* Dest. report requested*/
   && PC04M010.PC04MFDR == "N" /* Summ. report not requested*/
   && PC04M010.PC04MEXP == "N") /* export to mapper flg*/
    set PC04M010.PC04MFSR cursor, bold; /* Highlight error*/
    set PC04M010.PC04MFDR bold; /* Highlight error*/
    set PC04M010.PC04MEXP bold; /* Highlight error*/
    converseLib.validationFailed(257); /* Only y or n valid*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  else
    if (PC04M010.PC04MEXP == "N" /* export to mapper flg*/
     || PC04M010.PC04MEXP == "Y")
      PC04W01.PC04MFDR = PC04M010.PC04MFDR;
    else
      set PC04M010.PC04MEXP cursor, bold; /* Highlight error*/
      converseLib.validationFailed(42); /* Only y or n valid*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
    end
  end


   /* ------------------------------------------------------------*/
   /* QUALITY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (PC04M010.XQACD > " ")
    if (PC04M010.XQACD in XQATBL.XQACD
     && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC04W01.XQACD = PC04M010.XQACD; /* Quality code*/
      PC04M010.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Quality desc.*/
      PC04W01.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Quality desc.*/
    else
      converseLib.validationFailed(54); /* Invalid country code*/
      set PC04M010.XQACD cursor, bold; /* Highlight error*/
      PC04M010.XQADESC = " "; /* Quality desc.*/
      PC04W01.XQACD = " "; /* Quality code*/
      PC04W01.XQADESC = " "; /* Quality desc.*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
    end
  else
    PC04W01.XQACD = " "; /* Quality code*/
    PC04M010.XQADESC = " "; /* Quality desc.*/
    PC04W01.XQADESC = " "; /* Quality desc.*/
  end

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC == " " /* Factory not entered*/
   && PC04M010.XCTCD == " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
    set PC04M010.XCTCD bold; /* Highlight error*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* COUNTRY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (PC04M010.XCTCD > " "
   && PC04M010.XCTCD != "ALL")
    if (PC04M010.XCTCD in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC04W01.XCTCD = PC04M010.XCTCD; /* Country code*/
      PC04M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
      PC04W01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
    else
      converseLib.validationFailed(49); /* Invalid country code*/
      set PC04M010.XCTCD cursor, bold; /* Highlight error*/
      PC04M010.XCTDESC = " "; /* Country desc.*/
      PC04W01.XCTCD = " "; /* Country code*/
      PC04W01.XCTDESC = " "; /* Country desc.*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
    end
  else
    PC04W01.XCTCD = " "; /* Country code*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
  end


   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC == " ") /* Nothing there*/

    PC04W01.FY1FCTYC = " "; /* Factory code*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
  else
    set FY1REC empty; /* Clear record*/
    FY1REC.FY1FCTYC = PC04M010.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = "02"; /* Search key*/


    PC04S01(); /* Call factory check routine*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      if (FY1REC.XXXSTAT == "A") /* Everything OK*/

        PC04W01.FY1FCTYC = FY1REC.FY1FCTYC; /* Factory code*/
        PC04W01.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
        PC04M010.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC04M010.XXXERRID = "PC04510"; /* Process name*/
        set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC04W01.FY1FCTYC = " "; /* Factory code*/
        PC04W01.FY1FCTNM = " "; /* Factory name*/
        PC04M010.FY1FCTNM = " "; /* Factory name*/
      end
    else
      converseLib.validationFailed(32); /* Invalid factory*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
      set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC04W01.FY1FCTYC = " "; /* Factory code*/
      PC04W01.FY1FCTNM = " "; /* Factory name*/
      PC04M010.FY1FCTNM = " "; /* Factory name*/
    end
  end

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC > " " /* Factory not entered*/
   && PC04M010.XCTCD > " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
    set PC04M010.XCTCD bold; /* Highlight error*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  end


end // end PC04510

// EDIT THE BEG. POID DATE
Function PC04521()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF P.O. ID ENTERED--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (PC04M010.PC04MBYY == " " /* Nothing there*/
   && PC04M010.PC04MBM1 == " " /* Nothing there*/
   && PC04M010.PC04MBM2 == " ") /* Nothing there*/

    set PC04M010.PC04MBYY cursor, bold; /* Highlight error*/
    set PC04M010.PC04MBM1 bold; /* Nothing there*/
    set PC04M010.PC04MBM2 bold; /* Nothing there*/
    converseLib.validationFailed(177); /* Date is missing*/
    PC04M010.XXXERRID = "PC04521"; /* Process name*/
  else

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/


    if (PC04M010.PC04MBM2 == "01" /* Something there*/
     || PC04M010.PC04MBM2 == "02" /* Something there*/
     || PC04M010.PC04MBM2 == "03" /* Something there*/
     || PC04M010.PC04MBM2 == "04" /* Something there*/
     || PC04M010.PC04MBM2 == "05" /* Something there*/
     || PC04M010.PC04MBM2 == "06" /* Something there*/
     || PC04M010.PC04MBM2 == "07" /* Something there*/
     || PC04M010.PC04MBM2 == "08" /* Something there*/
     || PC04M010.PC04MBM2 == "09" /* Something there*/
     || PC04M010.PC04MBM2 == "10" /* Something there*/
     || PC04M010.PC04MBM2 == "11" /* Something there*/
     || PC04M010.PC04MBM2 == "12") /* Something there*/

      PC04W01.PC04WBM2 = PC04M010.PC04MBM2;
    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC04M010.XXXERRID = "PC04521"; /* Process name*/
      set PC04M010.PC04MBM2 cursor, bold; /* Highlight*/
      PC04W01.PC04WBM2 = 00;
    end


    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (PC04M010.PC04MBM1 == "01" /* Something there*/
     || PC04M010.PC04MBM1 == "02" /* Something there*/
     || PC04M010.PC04MBM1 == "03" /* Something there*/
     || PC04M010.PC04MBM1 == "04" /* Something there*/
     || PC04M010.PC04MBM1 == "05" /* Something there*/
     || PC04M010.PC04MBM1 == "06" /* Something there*/
     || PC04M010.PC04MBM1 == "07" /* Something there*/
     || PC04M010.PC04MBM1 == "08" /* Something there*/
     || PC04M010.PC04MBM1 == "09" /* Something there*/
     || PC04M010.PC04MBM1 == "10" /* Something there*/
     || PC04M010.PC04MBM1 == "11" /* Something there*/
     || PC04M010.PC04MBM1 == "12") /* Something there*/

      PC04W01.PC04WBM1 = PC04M010.PC04MBM1;
    else
      converseLib.validationFailed(31); /* Must enter month*/
      PC04M010.XXXERRID = "PC04521"; /* Process name*/
      set PC04M010.PC04MBM1 cursor, bold; /* Highlight*/
      PC04W01.PC04WBM1 = 00;
    end

    /* ----------------------------------------------------------*/
      /* FORMAT THE POID DATE AND SEE IF ANY BAD DATA EXISTS*/
    /* ----------------------------------------------------------*/


    PC04W01.PC04WBC1 = PC04M010.PC04MBM1;
    PC04W01.PC04WBC2 = PC04M010.PC04MBM2;
    PC04W01.PC04WBCY = PC04M010.PC04MBYY;
    set TA2REC empty; /* Clear record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in type*/
    TA2REC.TA2GRGE = PC04W01.PC04WCAT; /* Move in poid date*/

    PC04S02(); /* Set up p.o. id date*/

    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/

      PC04W01.PC04WPDT = TA2REC.TA2GRGGN; /* Poid passing date*/

    end
    if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/

      converseLib.validationFailed(313); /* Invalid poid*/
      PC04M010.XXXERRID = "PC04521"; /* Process name*/
      set PC04M010.PC04MBYY cursor, bold; /* Highlight*/
      set PC04M010.PC04MBM1 bold; /* Highlight*/
      set PC04M010.PC04MBM2 bold; /* Highlight*/
      PC04W01.PC04WPDT = 0; /* Poid passing date*/

    end
  end


   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/

    if (PC04M010.PC04MBYY >= "00"
     && PC04M010.PC04MBYY <= "99")

      PC04W01.PC04WBYY = PC04M010.PC04MBYY;

      PC04W01.PC04WCY1 = PC04W01.PC04WYYY + 1; /* One year greater*/
      PC04W01.PC04WCY2 = PC04W01.PC04WYYY - 1; /* One year less*/

         /* IF PC04W01.PC04WBYY GE PC04W01.PC04WCY2; One year <=*/
           /* AND PC04W01.PC04WBYY LE PC04W01.PC04WCY1; One year >=*/

       /* NEXT SENTENCE*/

         /* ELSE ;*/
           /* MOVE 235 TO EZEMNO; Must enter current year +1 or -1*/
           /* MOVE 'PC04521' TO PC04M010.XXXERRID; Process name*/
           /* SET PC04M010.PC04MBYY CURSOR,BRIGHT; Highlight*/
           /* MOVE 00 TO PC04W01.PC04WBYY;*/
         /* END ;*/
    else
      converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
      PC04M010.XXXERRID = "PC04521"; /* Process name*/
      set PC04M010.PC04MBYY cursor, bold; /* Highlight*/
      PC04W01.PC04WBYY = 00;
    end



    if (converseVar.eventKey is enter
     && converseVar.validationMsgNum == 0) /* No message*/

      if (PC04M010.PC04MFSR == "Y"
       || PC04M010.PC04MFDR == "Y"
       || PC04M010.PC04MEXP == "Y")

        set PC04M010.PC04MEXP skip;
        set PC04M010.PC04MFSR skip;
        set PC04M010.PC04MFDR skip;
        set PC04M010.PC04MBYY skip;
        set PC04M010.PC04MBM1 skip;
        set PC04M010.PC04MBM2 skip;
        set PC04M010.XQACD skip;
        if (PC04M010.XCTCD > " ") /* Something there*/
          set PC04M010.FY1FCTYC skip; /* Factory code*/
        end
        if (PC04M010.FY1FCTYC > " ") /* Something there*/
          set PC04M010.XCTCD skip; /* Country code*/
        end
      end
    end
  end


end // end PC04521

// EDIT THE PARMS.
Function PC04530()

   /* ------------------------------------------------------------*/
    /* MOVE THE NEW PARAMETERS TO A TEMP. STORAGE RECORD AND*/
    /* THEN COMPARE WITH EXISTING PARMS.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    PC04W03.XGPCD = "02"; /* Gpc code*/
    PC04W03.PC04WFDT = PC04W01.PC04WPDT; /* PO ID*/
    PC04W03.PC04WTDT = PC04W01.PC04WEDT; /* PO ID*/
    PC04W03.FY1FCTYC = PC04W01.FY1FCTYC; /* Factory*/
    PC04W03.XCTCD = PC04W01.XCTCD; /* Country code*/
    PC04W03.XQACD = PC04W01.XQACD; /* Quality code*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS HAVE ALREADY BEEN ADDED*/
    /* ------------------------------------------------------------*/


    if (PC04W03.PC04WTBL in PC04W04.PC04WTBL) /* Parm in table*/

      set PC04M010.PC04MBYY skip, bold; /* Highlight*/
      set PC04M010.PC04MBM1 skip, bold; /* Highlight*/
      set PC04M010.PC04MBM2 skip, bold; /* Highlight*/
      if (PC04M010.FY1FCTYC > " ")
        set PC04M010.FY1FCTYC cursor, bold; /* Highlight*/
        set PC04M010.XCTCD skip, bold; /* Country code*/
      end
      if (PC04M010.XCTCD > " ")
        set PC04M010.FY1FCTYC skip, bold; /* Highlight*/
        set PC04M010.XCTCD cursor, bold; /* Country code*/
      end
      set PC04M010.XQACD skip, bold; /* Quality code*/
      set PC04M010.PC04MEXP skip, bold;
      set PC04M010.PC04MFSR skip, bold;
      set PC04M010.PC04MFDR skip, bold;
      converseLib.validationFailed(241); /* Parm already in table*/
      XXXERRID = "PC04530"; /* Process name*/
      return; /* Return to previous process*/
    else

      if (PC04W03.PC04WFDT in PC04W04.PC04WFDT) /* PO ID*/

        PC04W01.PC04WLIX = sysVar.arrayIndex; /* Set index*/

        while (PC04W01.PC04WLIX != PC04W01.PC04WMAX
         && PC04W04.XGPCD[PC04WLIX] > " ") /* Something in row*/

          if (PC04W04.FY1FCTYC[PC04WLIX] > " "
           && PC04W04.XCTCD[PC04WLIX] == " " /* Country code*/
           && PC04M010.XCTCD > " ")          /* Country code*/

            set PC04M010.XCTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(296); /* cannot be country specific*/
            XXXERRID = "PC04530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC04W04.FY1FCTYC[PC04WLIX] == "   "
           && PC04W04.XCTCD[PC04WLIX] > " " /* Country code*/
           && PC04M010.FY1FCTYC > "   "     
           && PC04M010.XCTCD == " ")        /* Country code*/

            set PC04M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(295); /* must be country specific*/
            XXXERRID = "PC04530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end

          if (PC04M010.FY1FCTYC != "   "
           && PC04W04.FY1FCTYC[PC04WLIX] == "   "
           && PC04W04.XCTCD[PC04WLIX] > " ")

            set PC04M010.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(296); /* Already getting all factories*/
            XXXERRID = "PC04530"; /* Process name*/
            exit stack; /* Return to previous process*/
          end
          PC04W01.PC04WLIX = PC04W01.PC04WLIX + 1; /* Increment index*/
        end
      end
    end
  end


end // end PC04530

// EDIT FCTY OR COUNTRY
Function PC04540()

   /* ------------------------------------------------------------*/
   /* COUNTRY CODE CHECK--REQUIRED*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC == " " /* Factory not entered*/
   && PC04M010.XCTCD == " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
    set PC04M010.XCTCD bold; /* Highlight error*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.XXXERRID = "PC04510"; /* Process name*/
  end

   /* ------------------------------------------------------------*/
   /* COUNTRY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


  if (PC04M010.XCTCD > " "
   && PC04M010.XCTCD != "ALL")
    if (PC04M010.XCTCD in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC04W01.XCTCD = PC04M010.XCTCD; /* Country code*/
      PC04M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
      PC04W01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
    else
      converseLib.validationFailed(49); /* Invalid country code*/
      set PC04M010.XCTCD cursor, bold; /* Highlight error*/
      PC04M010.XCTDESC = " "; /* Country desc.*/
      PC04W01.XCTCD = " "; /* Country code*/
      PC04W01.XCTDESC = " "; /* Country desc.*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
    end
  else
    PC04W01.XCTCD = " "; /* Country code*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
  end


   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC == " ") /* Nothing there*/

    PC04W01.FY1FCTYC = " "; /* Factory code*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
  else
    set FY1REC empty; /* Clear record*/
    FY1REC.FY1FCTYC = PC04M010.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = "02"; /* Search key*/


    PC04S01(); /* Call factory check routine*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      if (FY1REC.XXXSTAT == "A") /* Everything OK*/

        PC04W01.FY1FCTYC = FY1REC.FY1FCTYC; /* Factory code*/
        PC04W01.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
        PC04M010.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC04M010.XXXERRID = "PC04510"; /* Process name*/
        set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC04W01.FY1FCTYC = " "; /* Factory code*/
        PC04W01.FY1FCTNM = " "; /* Factory name*/
        PC04M010.FY1FCTNM = " "; /* Factory name*/
      end
    else
      converseLib.validationFailed(32); /* Invalid factory*/
      PC04M010.XXXERRID = "PC04510"; /* Process name*/
      set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC04W01.FY1FCTYC = " "; /* Factory code*/
      PC04W01.FY1FCTNM = " "; /* Factory name*/
      PC04M010.FY1FCTNM = " "; /* Factory name*/
    end
  end

   /* ------------------------------------------------------------*/
   /* SEE IF BOTH FACTORY AND COUNTRY CODE ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC > " " /* Factory not entered*/
   && PC04M010.XCTCD > " ")   /* Country not entered*/
    converseLib.validationFailed(236); /* Invalid country code*/
    set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
    set PC04M010.XCTCD bold; /* Highlight error*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.XXXERRID = "PC04540"; /* Process name*/
  end


  if (PC04M010.XCTCD > " "
   && PC04M010.XCTCD != "ALL")
    if (PC04M010.XCTCD in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC04W01.XCTCD = PC04M010.XCTCD; /* Country code*/
      PC04M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
      PC04W01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc.*/
    else
      converseLib.validationFailed(49); /* Invalid country code*/
      set PC04M010.XCTCD cursor, bold; /* Highlight error*/
      PC04M010.XCTDESC = " "; /* Country desc.*/
      PC04W01.XCTCD = " "; /* Country code*/
      PC04W01.XCTDESC = " "; /* Country desc.*/
      PC04M010.XXXERRID = "PC04540"; /* Process name*/
    end
  else
    PC04W01.XCTCD = " "; /* Country code*/
    PC04M010.XCTDESC = " "; /* Country desc.*/
    PC04W01.XCTDESC = " "; /* Country desc.*/
  end


   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC04M010.FY1FCTYC == " ") /* Nothing there*/

    PC04W01.FY1FCTYC = " "; /* Factory code*/
    PC04W01.FY1FCTNM = " "; /* Factory name*/
    PC04M010.FY1FCTNM = " "; /* Factory name*/
  else
    set FY1REC empty; /* Clear record*/
    FY1REC.FY1FCTYC = PC04M010.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = "02"; /* Search key*/


    PC04S01(); /* Call factory check routine*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      if (FY1REC.XXXSTAT == "A") /* Everything OK*/

        PC04W01.FY1FCTYC = FY1REC.FY1FCTYC; /* Factory code*/
        PC04W01.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
        PC04M010.FY1FCTNM = FY1REC.FY1FCTNM; /* Factory name*/
      else
        converseLib.validationFailed(32); /* Invalid factory*/
        PC04M010.XXXERRID = "PC04540"; /* Process name*/
        set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
        PC04W01.FY1FCTYC = " "; /* Factory code*/
        PC04W01.FY1FCTNM = " "; /* Factory name*/
        PC04M010.FY1FCTNM = " "; /* Factory name*/
      end
    else
      converseLib.validationFailed(32); /* Invalid factory*/
      PC04M010.XXXERRID = "PC04540"; /* Process name*/
      set PC04M010.FY1FCTYC cursor, bold; /* Highlight error*/
      PC04W01.FY1FCTYC = " "; /* Factory code*/
      PC04W01.FY1FCTNM = " "; /* Factory name*/
      PC04M010.FY1FCTNM = " "; /* Factory name*/
    end
  end

  set PC04M010.PC04MBYY skip; /* Protect*/
  set PC04M010.PC04MBM1 skip;
  set PC04M010.PC04MBM2 skip;
  if (PC04M010.FY1FCTYC > " ")
    set PC04M010.FY1FCTYC cursor;
    set PC04M010.XCTCD skip;
  end
  if (PC04M010.XCTCD > " ")
    set PC04M010.FY1FCTYC skip;
    set PC04M010.XCTCD cursor; /* Country code*/
  end
  set PC04M010.XQACD skip; /* Quality code*/
  set PC04M010.PC04MEXP skip;
  set PC04M010.PC04MFSR skip;
  set PC04M010.PC04MFDR skip;


end // end PC04540

// PROCESS VALID INPUT
Function PC04600()

   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is enter) /* Enter pressed*/

    PC04610(); /* Save parms.*/

  else

    if (converseVar.eventKey is pf9 /* PF9 pressed*/
     && converseVar.validationMsgNum == 0
     && PC04W04.PC04WTBL[1] > "0") 
      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        PC04620(); /* format production jcl*/
      else
        PC04621(); /* format development jcl*/
      end

      PC04W01.PC04WLIX = 0; /* Line index*/
      PC04W01.PC04WAIX = 0; /* Array index*/
      PC04W01.PC04WMAX = 10; /* Max no. of parms.*/

      set PC04M010 initial; /* Clear map*/
      set PC04W02 empty; /* JCL work area*/
      set PC04W03 empty; /* Parm. Comparision table*/
      set PC04W04 empty; /* Parm. table*/

      PC04M010.PC04MFSR = "N"; /* Summ. report flag*/
      PC04M010.PC04MFDR = "N"; /* Detl. report flag*/
      PC04M010.PC04MEXP = "N"; /* export to mapper flag*/
      PC04M010.XQACD = "01"; /* Quality code*/
      PC04M010.XQADESC = "FIRST QUALITY "; /* Quality desc.*/
      PC04M010.XGPCD = "02"; /* GPC code*/
      PC04M010.XGPDESC = "FOOTWEAR"; /* Gpc desc.*/



    else

      converseLib.validationFailed(17); /* Parms must be entered*/

    end
  end


end // end PC04600

// SAVE THE PARMS.
Function PC04610()

   /* ------------------------------------------------------------*/
    /* MOVE THE PARMS. TO THE PARM. TABLE*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0 /* No message*/
   && converseVar.eventKey is enter)   

    PC04W01.PC04WAIX = PC04W01.PC04WAIX + 1; /* Add 1 to index*/
    PC04W04.XGPCD[PC04WAIX] = "02"; /* Gpc code*/
    PC04W04.PC04WFDT[PC04WAIX] = PC04W01.PC04WPDT; /* PO ID*/
    PC04W04.PC04WTDT[PC04WAIX] = PC04W01.PC04WEDT; /* PO ID*/
    PC04W04.FY1FCTYC[PC04WAIX] = PC04W01.FY1FCTYC; /* Factory*/
    PC04W04.XCTCD[PC04WAIX] = PC04W01.XCTCD; /* Country code*/
    PC04W04.XQACD[PC04WAIX] = PC04W01.XQACD; /* Country code*/
    if (PC04M010.PC04MFSR == "Y" /* summary rpt requested*/
     && PC04M010.PC04MFDR == "Y") /* and detail rpt requested*/
      PC04W04.PC04WRGF[PC04WAIX] = "B";
      PC04W04.PC04WEXP[PC04WAIX] = "P";
    else
      if (PC04M010.PC04MFSR == "Y") /* summary rpt requested*/
        PC04W04.PC04WRGF[PC04WAIX] = "S";
        PC04W04.PC04WEXP[PC04WAIX] = "P";
      else
        if (PC04M010.PC04MFDR == "Y") /* detail  rpt requested*/
          PC04W04.PC04WRGF[PC04WAIX] = "D";
          PC04W04.PC04WEXP[PC04WAIX] = "P";
        end
      end
    end

    if (PC04M010.PC04MEXP == "Y") /* export to mapper*/
      if (PC04W04.PC04WEXP[PC04WAIX] == "P") /* print has been request too*/
        PC04W04.PC04WEXP[PC04WAIX] = "B";
      else
        PC04W04.PC04WEXP[PC04WAIX] = "M";
        PC04W04.PC04WRGF[PC04WAIX] = "D";
      end
    end

    PC04W04.PC04WUSR[PC04WAIX] = PC04W01.PC04WUSR;

    converseLib.validationFailed(253); /* Parm. Entered*/

    if (PC04W01.PC04WAIX == 50) /* Max amount for table*/

      set PC04M010.CAITEM cursor;
      converseLib.validationFailed(240); /* Max amount reached*/
      PC04M010.XXXERRID = "PC04610"; /* Process name*/
    end
  end


end // end PC04610

// SET UP THE JCL
Function PC04620()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/


  if (PC04W04.PC04WTBL[1] > " ") /* Something in the table*/


    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC04630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC04W01.PC04WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC04W01.PC04WIX2 = 0; /* Initialize index*/
    PC04W01.PC04WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/


    while (PC04W01.PC04WIXT > 0) /* Until end of table*/
      if (PC04T01.TARTYPE[PC04WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC04W01.PC04WIX3 = 1; /* Move 1 to array index*/

        while (PC04W01.PC04WIX3 <= PC04W01.PC04WMAX)
          if (PC04W04.PC04WTBL[PC04WIX3] > "0")

            TA6REC.TA6ROW[TA6INDEX] = PC04W04.PC04WTBL[PC04WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC04T01.TARTYPE[PC04WIXT];
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Add 1 to jcl index*/
          else
            PC04W01.PC04WIX3 = PC04W01.PC04WMAX; /* Set index to 10*/
          end
          PC04W01.PC04WIX3 = PC04W01.PC04WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end
      else
        if (PC04T01.TARTYPE[PC04WIXT] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC04W01.PC04WIX3 = PC04W01.PC04WIX3 + 1; /* increment index*/
          PC04W02.PC04WJCC[PC04WIX3] = " "; /* clear working strg*/
          PC04W02.PC04WJCC[PC04WIX3] = PC04T01.TARJCL[PC04WIXT];
          if (PC04W02.PC04WCND[PC04WIX3] > " ")
            PC04W02.PC04WCLG[PC04WIX3] = PC04W02.PC04WCND[PC04WIX3];
          end
          TA6REC.TARJCL[TA6INDEX] = PC04W02.PC04WJCC[PC04WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC04T01.TARTYPE[PC04WIXT];
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
        else
          if (PC04T01.TARTYPE[PC04WIXT] == "D" /* condition statment*/
           && PC04M010.PC04MFDR == "Y")        /* detail rpt requested*/
                      /* skip cond=only for det. rpt if rpt requestd*/
             /* next sentence*/
          else
            if (PC04T01.TARTYPE[PC04WIXT] == "S" /* condition statment*/
             && PC04M010.PC04MFSR == "Y")        /* detail rpt requested*/
                        /* skip cond=only for sum. rpt if rpt requestd*/
               /* next sentence*/
            else
              /* ---------------------------------------------*/
                 /* job pc3801 or pc3802*/
              /* ---------------------------------------------*/
              if (PC04T01.TARTYPE[PC04WIXT] == "J"
               || PC04T01.TARTYPE[PC04WIXT] == "E")
                if (PC04W04.PC04WEXP[1] == "P")
                     /* next sentence*/
                else
                  PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
                end
              end
   /* ------------------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/
   /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PC04T01.TARJCL[PC04WIXT];

              if (PC04T01.TARTYPE[PC04WIXT] == "E")
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARTYPE[TA6INDEX] = PC04T01.TARTYPE[PC04WIXT];
              end

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC04T01.TARJCL[PC04WIXT] == "/*EOF") /* End of table*/
        if (PC04W01.PC04WIXT == PC04W01.PC04WMAX) /* JCL lines primary*/

           /* NEXT SENTENCE*/

        else
          PC04W01.PC04WIXT = 0; /* Indicate end of table*/
        end
      else
        if (PC04T01.TARTYPE[PC04WIXT] == "J"
         || PC04T01.TARTYPE[PC04WIXT] == "E")
          if (PC04W04.PC04WEXP[1] == "P")
            PC04W01.PC04WIXT = PC04W01.PC04WIXT + 2; /* Increment*/
          else
            PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
          end
        else
          PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PC04S03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC04W04 empty; /* Clear parameter table*/
      return;
    else
      set PC04W04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC04620

// SET UP THE JCL
Function PC04621()

   /* ------------------------------------------------------------*/
     /* SUBMIT THE REPORT*/
   /* ------------------------------------------------------------*/


  if (PC04W04.PC04WTBL[1] > " ") /* Something in the table*/


    /* ------------------------------------------------------------*/
     /* Load product key into JCL statement*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
     /* Determine the overrides*/
    /* ------------------------------------------------------------*/

    PC04630();

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/
    PC04W01.PC04WIXT = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
    PC04W01.PC04WIX2 = 0; /* Initialize index*/
    PC04W01.PC04WIX3 = 0; /* Initialize index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/


    while (PC04W01.PC04WIXT > 0) /* Until end of table*/
      if (PC04T11.TARTYPE[PC04WIXT] == "P") /* Parameters statement*/

        /* ------------------------------------------------------------*/
         /* Format parameters*/
        /* ------------------------------------------------------------*/

        PC04W01.PC04WIX3 = 1; /* Move 1 to array index*/

        while (PC04W01.PC04WIX3 <= PC04W01.PC04WMAX)
          if (PC04W04.PC04WTBL[PC04WIX3] > "0")

            TA6REC.TA6ROW[TA6INDEX] = PC04W04.PC04WTBL[PC04WIX3];
            TA6REC.TARTYPE[TA6INDEX] = PC04T11.TARTYPE[PC04WIXT]; /* Type*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Add 1 to jcl index*/
          else
            PC04W01.PC04WIX3 = PC04W01.PC04WMAX; /* Set index to 10*/
          end
          PC04W01.PC04WIX3 = PC04W01.PC04WIX3 + 1;
                                /* ; Increment both tbl indx*/
        end
      else
        if (PC04T11.TARTYPE[PC04WIXT] == "X") /* condition statment*/

          /* ------------------------------------------------------------*/
           /* Format condition statements*/
          /* ------------------------------------------------------------*/

          PC04W01.PC04WIX3 = PC04W01.PC04WIX3 + 1; /* increment index*/
          PC04W02.PC04WJCC[PC04WIX3] = " "; /* clear working strg*/
          PC04W02.PC04WJCC[PC04WIX3] = PC04T11.TARJCL[PC04WIXT];
          if (PC04W02.PC04WCND[PC04WIX3] > " ")
            PC04W02.PC04WCLG[PC04WIX3] = PC04W02.PC04WCND[PC04WIX3];
          end
          TA6REC.TARJCL[TA6INDEX] = PC04W02.PC04WJCC[PC04WIX3];
          TA6REC.TARTYPE[TA6INDEX] = PC04T11.TARTYPE[PC04WIXT]; /* Type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* increment parms idx*/
        else
          if (PC04T11.TARTYPE[PC04WIXT] == "D" /* condition statment*/
           && PC04M010.PC04MFDR == "Y")        /* detail rpt requested*/
                      /* skip cond=only for det. rpt if rpt requestd*/
             /* next sentence*/
          else
            if (PC04T11.TARTYPE[PC04WIXT] == "S" /* condition statment*/
             && PC04M010.PC04MFSR == "Y")        /* detail rpt requested*/
                        /* skip cond=only for sum. rpt if rpt requestd*/
               /* next sentence*/
            else
              /* ---------------------------------------------*/
                 /* job pc3801 or pc3802*/
              /* ---------------------------------------------*/
              if (PC04T11.TARTYPE[PC04WIXT] == "J"
               || PC04T11.TARTYPE[PC04WIXT] == "E")
                if (PC04W04.PC04WEXP[1] == "P")
                     /* next sentence*/
                else
                  PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
                end
              end

              /* ------------------------------------------------*/
                                  /* Format the Job Control Language*/
                                   /* statement from the table.*/
              /* ------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PC04T11.TARJCL[PC04WIXT];

              if (PC04T11.TARTYPE[PC04WIXT] == "E")
                TA6REC.TARTYPE[TA6INDEX] = " ";
              else
                TA6REC.TARTYPE[TA6INDEX] = PC04T11.TARTYPE[PC04WIXT];
              end
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

            end
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
      /* ------------------------------------------------------------*/

      if (PC04T11.TARJCL[PC04WIXT] == "/*EOF") /* End of table*/
        if (PC04W01.PC04WIXT == PC04W01.PC04WMAX) /* JCL lines primary*/

           /* NEXT SENTENCE*/

        else
          PC04W01.PC04WIXT = 0; /* Indicate end of table*/
        end
      else
        if (PC04T11.TARTYPE[PC04WIXT] == "J"
         || PC04T11.TARTYPE[PC04WIXT] == "E")
          if (PC04W04.PC04WEXP[1] == "P")
            PC04W01.PC04WIXT = PC04W01.PC04WIXT + 2; /* Increment*/
          else
            PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
          end
        else
          PC04W01.PC04WIXT = PC04W01.PC04WIXT + 1; /* Increment*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/


    PC04S03(); /* Submit the JCL*/


    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      set PC04W04 empty; /* Clear parameter table*/
      return;
    else
      set PC04W04 empty; /* Clear parameter table*/
      return;
    end
  end


end // end PC04621

// DO ANY OVERRIDES
Function PC04630()

   /* ------------------------------------------------------------*/
     /* Determine the overrides*/
   /* ------------------------------------------------------------*/


  PC04W01.PC04WLTC = "LE)',"; /* Less than cond. ove*/
  PC04W02.PC04WCND = " "; /* Clear array*/


end // end PC04630

// VALIDATE FACTORY CODE
Function PC04S01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC04"; /* Process name*/
  TA1REC.TA1LOC = "PC04S01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC04M010.XXXERRID = "PC04S01"; /* Process name*/

  exit stack;


end // end PC04S01

// VALIDATE THE POID DATE
Function PC04S02()

   /* ----------------------------------------------------------*/
   /* SET UP P.O. ID DATE*/
   /* ----------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000 /* Valid date*/
     || TA2REC.TA2RTNCD == 0222) /* Invalid date*/

      return; /* Return to previous process*/

    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC04S02"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC04M010.XXXERRID = "PC04S02"; /* Process name*/

      exit stack; /* Exit to redisplay the map*/

    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC04S02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC04M010.XXXERRID = "PC04S02"; /* Process name*/

    exit stack; /* Exit to redisplay the map*/

  end


end // end PC04S02

// SUBMIT THE JCL
Function PC04S03()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/


  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Job submitted to reader*/
    PC04M010.XXXERRID = "PC04S03"; /* Process name*/
    set PC04M010.PC04MBYY cursor;
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    PC04M010.XXXERRID = "PC04S03"; /* Process name*/
    converseLib.validationFailed(86); /* Canceled by user*/
    set PC04M010.PC04MBYY cursor;
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC04M010.XXXERRID = "PC04S03"; /* Process name*/
    set PC04M010.PC04MBYY cursor;
    exit stack;
  end


end // end PC04S03

//*** RECORD=PC04W01 ****
// ************************************************************
// *
// *    WORKING STORAGE FOR PC04
// *
// *    DATE     USERID        COMMENTS
// *   ------   --------      ---------------------------
// * 10/12/89   GWITZI        NEW RECORD
// *
// ************************************************************
// ***********************
Record PC04W01 type basicRecord
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTNM FY1FCTNM ; 
  10 XGPCD XGPCD ; 
  10 XQACD XQACD ; 
  10 XQADESC XQADESC ; 
  10 XCTCD XCTCD ; 
  10 XCTDESC XCTDESC ; 
  10 PC04WPDT PC04WPDT ; 
  10 PC04WBAT PC04WBAT ; 
    15 PC04WBYY PC04WBYY ; 
    15 PC04WBM1 PC04WBM1 ; 
    15 PC04WBM2 PC04WBM2 ; 
  10 PC04WEDT PC04WEDT ; 
  10 PC04WEAT PC04WEAT ; 
    15 PC04WEYY PC04WEYY ; 
    15 PC04WEM1 PC04WEM1 ; 
    15 PC04WEM2 PC04WEM2 ; 
  10 PC04WCAT PC04WCAT ; 
    15 PC04WBCY PC04WBCY ; 
    15 PC04WBC1 PC04WBC1 ; 
    15 PC04WBC2 PC04WBC2 ; 
  10 PC04WMYY PC04WMYY ; 
  10 PC04WCY1 PC04WCY1 ; 
  10 PC04WCY2 PC04WCY2 ; 
  10 PC04WCDT PC04WCDT ; 
    15 PC04WCCC PC04WCCC ; 
    15 PC04WYYY PC04WYYY ; 
    15 PC04WMMM PC04WMMM ; 
    15 PC04WDDD PC04WDDD ; 
  10 PC04MFSR PC04MFSR ; 
  10 PC04MFDR PC04MFDR ; 
  10 PC04WIXT PC04WIXT ; 
  10 PC04WIX2 PC04WIX2 ; 
  10 PC04WIX3 PC04WIX3 ; 
  10 PC04WAIX PC04WAIX ; 
  10 PC04WLIX PC04WLIX ; 
  10 PC04WMAX PC04WMAX ; 
  10 PC04WLTC PC04WLTC ; 
  10 PC04WUSR PC04WUSR ; 
end // end PC04W01

//*** RECORD=PC04W02 ****
// ************************************************************
// *
// *    JCL RECORD AREA  (WORKING STORAGE
// *
// ************************************************************
// ***********************
Record PC04W02 type basicRecord
  10 PC04WJCP PC04WJCP ; 
  10 PC04WJCE PC04WJCE ; 
    15 PC04WEX1 PC04WEX1 ; 
    15 PC04WPNM PC04WPNM ; 
    15 * char(57) ; 
  10 PC04WJCC PC04WJCC [16] ; 
    15 * char(22) ; 
    15 PC04WCLG PC04WCLG ; 
    15 * char(41) ; 
  10 PC04WTYP PC04WTYP ; 
  10 PC04WCND PC04WCND [2] ; 
end // end PC04W02

//*** RECORD=PC04W03 ****
// ************************************************************
// *
// *   Screen table working storage
// *
// ************************************************************
// ***********************
Record PC04W03 type basicRecord
  10 PC04WTBL PC04WTBL ; 
    15 XGPCD XGPCD ; 
    15 PC04WFDT PC04WFDT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC04WTDT PC04WTDT ; 
    15 * char(15) ; 
    15 XQACD XQACD ; 
    15 * char(35) ; 
end // end PC04W03

//*** RECORD=PC04W04 ****
// ************************************************************
// *
// *  Report working storage for the array to pass to ta6rec
// *
// ************************************************************
// ***********************
Record PC04W04 type basicRecord
  10 PC04WTBL PC04WTBL [50] ; 
    15 XGPCD XGPCD ; 
    15 PC04WFDT PC04WFDT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC04WTDT PC04WTDT ; 
    15 * char(4) ; 
    15 PC04WUSR PC04WUSR ; 
    15 * char(5) ; 
    15 XQACD XQACD ; 
    15 * char(18) ; 
    15 PC04WRGF PC04WRGF ; 
    15 * char(1) ; 
    15 PC04WEXP PC04WEXP ; 
    15 * char(14) ; 
end // end PC04W04

DataItem PC04MFDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC04MFSR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array index
DataItem PC04WAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date beg.
DataItem PC04WBAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id buy month
DataItem PC04WBC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month
DataItem PC04WBC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id year
DataItem PC04WBCY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id buy month beg.
DataItem PC04WBM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month beg.
DataItem PC04WBM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id year beg.
DataItem PC04WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working date character
DataItem PC04WCAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          centry
DataItem PC04WCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC04WCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement logic
DataItem PC04WCLG char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// condition code work area
DataItem PC04WCND char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date +1
DataItem PC04WCY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date -1
DataItem PC04WCY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          day
DataItem PC04WDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date end.
DataItem PC04WEAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id date end.
DataItem PC04WEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id buy month end.
DataItem PC04WEM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id delivery month end.
DataItem PC04WEM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants
DataItem PC04WEX1 char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// export to mapper flag
DataItem PC04WEXP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map po id year end.
DataItem PC04WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID mo rng
DataItem PC04WFDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

//      index
DataItem PC04WIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      index
DataItem PC04WIX3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table index
DataItem PC04WIXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statment
DataItem PC04WJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement
DataItem PC04WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm JCL statement
DataItem PC04WJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LIne index
DataItem PC04WLIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Less than condidition override
DataItem PC04WLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max.index
DataItem PC04WMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//          month
DataItem PC04WMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id year
DataItem PC04WMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map po id date beg.
DataItem PC04WPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proc name
DataItem PC04WPNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// which rpt requested?
DataItem PC04WRGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dest. report tablerec.
DataItem PC04WTBL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID mo rng
DataItem PC04WTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem PC04WTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC04WUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//          year
DataItem PC04WYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

