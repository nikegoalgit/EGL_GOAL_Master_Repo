package pc0e;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0E ****
// This program will allow the user to add P.O item and size
// information to a new or existing P.O.
// This application can be entered two ways. By flowing here
// from the header entry (PC0L) or by entering option 32 from
// the main menu. After the user has entered data and passed
// all the edit criteria on map 1, they will be placed in the
// size screen where they can enter the quantities associated
// with each size.  The FOB price can also be overridden from
// this screen.
// 
// ************************************************************
// **                                                        **
//    DATE     NAME     DESCRIPTION OF CHANGE
// --------- ---------  --------------------------------------
// 07/01/89   WDISHM    New Application
// 
// 06/13/90   SFORD     Enhanced Appl. to allow the addition
//                      of product items to an incomplete P.O.
//                      Header. (PC0E140)
// 
// 07/31/90   GAMEN     Unprotect color and dimension fields
//                      for footwear.
// 
// 08/14/90   CHAERT    Add CT & CD to edit Apparel for
//                      multiple styles (PC0E140).
// 
// 08/16/90   CHAERT    Change error msg from 319 to 215
//                      in PC0E142, div 20 reqrd with po type
// 
// 08/21/90   CHAERT    Add scheduler user id.
//                      Allow new items to be added to po with
//                      status 'cx' for footwear.
// 
// 08/27/90   dmeier    Add warning messages for nil/b-grade
//                      products (Pc0em002).
// 
// 08/31/90   dmeier    comment out rta against po id's edit
//                      for footwear.
// 
// 09/04/90   dmeier    add po type check (not 'cd', 'sd', or
//                      'to') to gpc check for edit of ware-
//                      house based on cust xref data (PC0ES30)
// 
// 09/12/90   mchris    po type check from 09/04 chg was lookin
//                      at xdscd and was changed to po type
//                      code (pc4ortyp) - pc0es30.  also chged
//                      pc0e140 to allow apparel to open
//                      cancelled po's.
//                                                           **
// 09/14/90   mpisto    retain style/clor/dim on screen for  **
//                      multiples entries.                   **
// 
// 09/17/90   lsutto    allow gpc 07
// 09/27/90   mpisto    put 00 in dim for apparel            **
// 
// 10/04/90   JGLAZE    add po type check (not 'ss', 'ct') to
//                      GPC check for edit of warehouse based
//                      on customer xref data (PC0ES30)
// 
// 11/06/90   PPETER    DB2 changes- initialize pc6rec.pc6prefl
//                      to 'n' before insert. (PCOE263)
// 
// 11/12/90   PPETER    A51 - Add misc charges (PC6MICHG) for
//                      apparel to Map 1 & VPOITM01 processing.
// 
// 12/11/90   PPETER    A51 - Implementing program changes but
//                      with misc charges field always
//                      'autoskip,dark'. To enable, change only
//                      paragraph PC0E110 as noted in the code.
// 
// 12/21/90   lsutto    A97 - owner group changes
// 
//            mchris    f89 - default 'af' for ftwr ps po type
//                                                           **
//  1/9/9/1   lsutto    treat order-type cr same as ss
// 
// 01/28/91   kdenne    added logic to adjust Blank Avail. tbl
//                      when there is a valid finished good.
// 
//  2/21/91   lsutto    add warning msg if ets date < today
// 
//  4/04/91   lsutto    ALLOW BLANK CUST XREF IF SS PO-TYPE
//                      AND WAREHOUSE 09.
// 
//  5/17/91   gamen     Add code for interim styles and prevent
//                      them from being added to an "SD" or
//                      "CD" p.o. type.
// 
//  6/10/91   chaert    DB2 changes. pc0e267 poait record.
// 
//  7/17/91   chaert    FY60, use factory default FOB price
//                      when no price for style.
// 
//  9/30/91   chaert    FY60, use factory default FOB price
//                      when no price for SIZE .
// 10/09/91   gamen     default fb-late-bk-fl to 'N' for Oct91
//                      db2 changes.
// 11/01/91   lsutto    default rta to curr + 90 days for QQ
//                        ord-typ (b-grades)
//                      put cursor on total field (for QQ ot)
//                      allow multiple styles on QQ po(s)
// 11/21/91   chaert    pc0e269, use w01 cust xref in commarea
// 01/14/92   lsutto    pc0es10,s11,s12 sopo chng 's7' to 'sh'
// 03/25/92   ksanfo    added PC0E190, and additional SO/PO
//                      edits to PC0E140, 183.
//                      gpc '03' adds for 'XD', 'XI' must have
//                      same customer and SO as all other items
//                      for same PO nbr.
// 05/04/92   ksanfo    fix so/po problem for po type SS
// 05/07/92   ksanfo    - require SO# for ftwr type QQ
//                      - verify company when entered w/SO#
//                      - get cust xref when only company enter
// 05/11/92   ksanfo    additional cust xref edit for so/po
// 05/20/92   GAMEN     Insure that correct iseg/div is put
//                      on p.o. items and audits.
// 05/28/92   chaert    f164, default whse=15 on QQ PO's for
//                      factory in KORE.
// 06/15/92   ksanfo    BUG FIX - PC0E192 not moving part char
//                      to correct field for update
// 06/17/92   lsutto    BUG FIX - PC0E140 not verifying cust-
//                      xref correctly when S.O. not required
// 06/25/92   lsutto    round b-grade price in XSPCS04
// 06/26/92   gamen     Move spaces to part char in pc0e192
//                      and pc0e144 if op1cuoid is 0
// 08/17/92   lsutto    bypass screener blank inventory edits
//                      if foreign factory (PC0E260)
// 08/31/92   lsutto    DON'T EDIT FOR SO# IN PC0E140 UNLESS
//                      CUST > ' '.  (THAT'S QQ'S ONLY)
// 09/15/92   gamen     change pc0e260 to use xprcd, NOT xfmcd
// 09/30/92   ksanfo    allow maint. on new status code 'TN';
//                      modified pc0es24,pc0e140,pc0e211,
//                      pc0e260,pc0e263
// 10/20/92   sdifle    modified pc0e140.
//                      component ring po type requires only
//                      product line code = 11, not cat-code=11
// 11/02/92   sdifle    change was made to trans-mode = TR ( if
//                      QQ potype, and if factory-country is
//                      'KORE').  Otherwise it remains as
//                      default of 'VL' for foreign factories.
// 11/06/92   gamen     Fix garbage being passed in s.o. nbr.
// 11/16/92   LSUTTO    CHNG DIR-SHIP-CD LITERAL TO ' ' IN S30
// 11/24/92   LSUTTO    fix so# bug (qq po's were carrying so#
//                      frwd to scrn2 when wiped out on scrn1)
// 12/08/93   ksanfo    Allow adds for po types 'EM','CD','TS'.
//                      Modified PC0E001,113,140,141,142,144,
//                      182,190,192.
// 05/28/93   chaert    pc0e190, check for multiple destination
//                      or so on PO.  Do not check CX items.
// 06/11/93   KSANFO    Add po type = "AD".
// 06/18/93   KSANFO    DB2 Structure change - VPOIAD01,
//                      VPOSIZ01, VPOASZ01.
// 06/21/93   chaert    pc0ese2, use new select 'SE' for DORDER
// 06/25/93   chaert    pc0e140, PCF205, QQ PO edit
// 08/10/93   lsutto    made csp4 changes (same as we made for
//                      EAO) along with aug93 db2 regen
// 09/27/93   ksanfo    made csp4 changes to working storage
// 10/15/93   GAMEN     Add changes for whse 60 and 61.
// 01/19/94   GAMEN     Change default for mode code when
//                      the factory is NOT USA and the factory
//                      foreign flag is 'N'.
// 01/24/94   dhales    Change to prevent bridged eao po's
//                      from being modified
// 02/24/94   chaert    correct previous change. caused gpc 01
//                      not to be able to use system.
//                      pc0e140, 260
// 04/19/94   dhales    allow screen product to process through
//                      without decrementing alt inventory if
//                      factory not defined as screener fcty
// 06/06/94   dhuffm    Add PO order type 'PX'.
//                      pc0e001, 140, 141.
// 06/17/94   dhales    have golf/crested product adjust
//                      alt inventory
// 07/01/94   chaert    correct message #, 147 to 45 for cust
//                      xref-inactive or invalid
// 09/28/94   GAMEN     Allow multiple tyles on 'ID' p.o.'s.
// 10/31/94   jjuch     Disallow the po nbr which is > 699999.
// 08/15/95   KGRAHA    Move Confirm Nbr from W.S. to Map.
// 10/18/95   JNIESE    REMOVE BEEPS FOR MESSAGE 1 AND 382.
// 12/06/95   JNIESE    Change edit numbert 83, and the screen
//                      attributes for the S.O. field.
// 02/06/96   gamen     Change mode default for cana to TR.
// 02/19/96   JNIESE    open so field for apparel.
// 02/21/96   JNIESE    change po type 'to' to allow mult style
// 02/28/96   JNIESE    change decrementing of alt inv for
//                      'TO' type PO's.
// 06/07/96   KGRAHA    Default mode of transportation to 'AF'
//                      for all apparel PO's with a PO type of
//                      'MP'.
// 06/27/96   RMCAFE    PCA336 change to add po type 'rf' for
//                      multiple apparel styles to be created.
// 10/17/96   KGRAHA    PCA343 change to add po type 'BA' for
//                      multiple apparel styles to be created.
// 11/26/96   jniese    PCA310 change default transportation
//                      code for Canada factories.
// 11/20/96   rmcafe    PCY199 add air frieght % fields.
// 12/11/96   KGRAHA    PCA342 change to add po type 'PM' for
//                      multiple apparel styles to be created.
// 02/05/97   KGRAHA    Allow PO type 'PX' to pass Company
//                      Number error message in PC0E144.
// 06/10/97   PHARWO    PCA367 - PPR PROJECT - P.O. VIEWS
// 07/10/97   jniese    PCA367 - PPR corrections
// 11/05/97   kgraha    PCA415 - Add 'MX' po type.
// 11/12/97   nfield    Y2k compliance - changes to PC0E140,
//                      PC0E147,PC0E149,PC0E160,PC0E263
// 06/18/98   NREDDY    Allow multiple POs for footwear SS POs
//                      Changes in PC0E140.
// 09/01/98   jniese    pcf999 - correct rta date problem.
// 10/08/98   KGRAHA    PCA999 - add 'ps' logic in PC0ES30.
// 05/12/99   KGRAHA    PCA475 - Prevent b-grade t-shirts from
//                      adjusting alternate inventory in
//                      PC0E260.
// 05/17/99   sbungo    changed PC0E263 process for Japan goal
//                      and added new statement group PC0ES75
// 07/29/99   drammo    PCF-198 Modified to process POs of
//                      LP type.
// 09/27/99   drammo    PCF205-Changed to use new view VPOITM04
// 01/28/00   dramse    increased PO # to 9 digits in maps
// 02/03/00   SBUNGO    CHANGED TO USE VIEW VFCTY003 INSTEAD
//                      OF FY1REC
// 02/07/00   vsanka    pca479-spain exception changes.
// 03/24/00   SBUNGO    PCF210J-CHANGED TO USE VIEW VPOITM05
// 04/20/00   KGRAHA    When apparel transportation mode is AF
//                      default NAF to 100 in PC0K322.
// 05/04/00   SBUNGO    PCF210-MODIFY PC0E140 PROCESS TO
//                      PREVENT CREATION OF PO ITEMS FOR SAP
//                      COUNTRIES
//                      (NOTE:WHEN SAP GOES LIVE FOR ANY CTRY
//                       THE ONLY CHANGE TO THIS APPLN WOULD BE
//                       TO ADD ENTRIES FOR WAREHOUSE CODE AND
//                       CTRY CODE IN PCCTTBL INTERNAL TABLE)
// 05/25/00   SBUNGO    pcf210 - fixed a bug in process pc0e263
//                      To get dest ctry for itm table from
//                      xwhtbl table if a valid whse given
//                      and xref blank, instead of hardcoded
//                      values which was earlier given
// 06/08/00   MNADEL    Changed the code in PC0E001, so that
//                      the factories with xct_cntry_cd as
//                      mexico will have initial ymt code as
//                      TR.
// 06/15/00   KGRAHA    PCA490 - Allow multiple styles for po
//                      type RD.
// 11/05/00   VRAMAC    Chged to allow sap po# maintenance for
//                      gpc '01' ONLY - PC0E140
// 02/01/01   MNADEL    Chged to validate the po id getting
//                      created - PC0E140
// 03/15/01   SVANJA    Chged to autoskip the UOM code.
// 04/05/01   AVERMA    added msg for blank product validation
// 04/06/01   DRAMSE    changed PC0E001 NOT to default whse 15
//                      to 15 and mode to TR for footwear QQ
//                      POs from Korean factories
// 09/13/01   SPITCH    changed PC0E263 for sinst flag for
//                      item table
// 09/13/01   SPITCH    changed PC0E140 for aaorf
// ************************************************************
// *********************
Program PC0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVJREC AVJREC; // record
  AVKREC AVKREC; // record
  AVLREC AVLREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC0EW00 PC0EW00; // record
  PC0EW01 PC0EW01; // record
  PC0EW02 PC0EW02; // record
  PC0EW03 PC0EW03; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC9REC PC9REC; // record
  PCFREC PCFREC; // record
  PCGREC PCGREC; // record
  PCOREC PCOREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TSCREC TSCREC; // record
  VFCTY003 VFCTY003; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOATBL; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use PCCTTBL {deleteAfterUse = yes}; // table
  use PC0EM.PC0EM001,  // forms
      PC0EM.PC0EM002, 
      PC0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

    goto PC0E001; /* Special initialization*/

    PC0E001: PC0E001();
    goto PC0E002; /* P.O. modify*/
    PC0E002: PC0E002();
    goto PC0E002;
  end // end main
end // end PC0E

// Special initialization
Function PC0E001()

   /* ---------------------------------------------------------*/
   /* If fastpathed in with no GPC code go back to the menu*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == " ")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 28; /* GPC missing or invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0EM001.XXXPRCNM = "PC0E001";
    exit stack;
  end

   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "01"
   && COMMAREA.CACLVL[1] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0EM001.XXXPRCNM = "PC0E001";
  end

  if (PCWREC.XGPCD == "07"
   && COMMAREA.CACLVL[7] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0EM001.XXXPRCNM = "PC0E001";
  end

  if (PCWREC.XGPCD == "02"
   && COMMAREA.CACLVL[2] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0EM001.XXXPRCNM = "PC0E001";
  end

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CACLVL[3] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0EM001.XXXPRCNM = "PC0E001";
  end


  set PC0EW00 empty; /* Initialize working storage*/
  set PC0EW03 empty; /* Initialize map header storage*/
  set PC0EW01 empty; /* Initialize map 1 display storage*/
  set PC0EW02 empty; /* Initialize map 2 display storage*/
  set PC0EM001 initial; /* Initialize map 1*/
  set PC0EM002 initial; /* Initialize map 2*/

  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/
  set OP1REC empty; /* Order header*/
  set PCFREC empty; /* Season code translation record*/
  set TSCREC empty;
  set FY4REC empty;
  set PC2REC empty;
  set VPOHDR02 empty;
  set PC2REC empty;
  set PC4REC empty;
  set VPOITM05 empty;
  set VPOSIZ02 empty;
  set PCFREC empty;
  set PCGREC empty;
  set PC9REC empty;
  set VPOAHD02 empty;
  set VPOAIT02 empty;
  set VPOASZ02 empty;
  set PCYREC empty;
  set FYCREC empty;
  set FY4REC empty;
  set OP1REC empty;
  set PG3REC empty;
  set PG2REC empty;
  set TSCREC empty;
  set YSMREC empty;
  PC0EW00.PC0EWCFL = "N"; /* init confirm msg flag*/

   /* ------------------------------------------------------------*/
   /* Set flags depending upon the how the application was*/
   /* entered.*/
   /* If from pc0a the function is modify (no data passed).*/
   /* Now the function from pc0l can be add or modify with*/
   /* data passed. the function from pc0j is modify with data*/
   /* passed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0A")
    PC0EW00.PC0EWAFF = "M"; /* Modify(add to existing po)*/
  else
    if (COMMAREA.CAFROMAP == "PC0L")
      if (PCWREC.CAFROMAP[1] == "PC0L")
        if (PCWREC.PCWFNC[1] == "A")
          PC0EW00.PC0EWAFF = "A"; /* Add to new po*/
        else
          if (PCWREC.PCWFNC[1] == "I"
           || PCWREC.PCWFNC[1] == "C")
            PC0EW00.PC0EWAFF = "L"; /* Modify with passed data*/
          end
        end
      end
    else
      if (COMMAREA.CAFROMAP == "PC0J"
       || COMMAREA.CAFROMAP == "PC0K")
        PC0EW00.PC0EWAFF = "J"; /* modify with passed data*/
      end
    end
  end


  if (PC0EW00.PC0EWAFF == " ")
    if (PCWREC.CAFROMAP[1] == "PC0E")
      PC0EW00.PC0EWAFF = PCWREC.PCWFNC[1];
      PCWREC.CAFROMAP[2] = " ";

    else
      if (PCWREC.CAFROMAP[2] == "PC0E")
        PC0EW00.PC0EWAFF = PCWREC.PCWFNC[2];
        PCWREC.CAFROMAP[3] = " ";

      else
        if (PCWREC.CAFROMAP[3] == "PC0E ")
          PC0EW00.PC0EWAFF = PCWREC.PCWFNC[3];
          PCWREC.CAFROMAP[4] = " ";

        else
          if (PCWREC.CAFROMAP[4] == "PC0E ")
            PC0EW00.PC0EWAFF = PCWREC.PCWFNC[4];

          end
        end
      end
    end
  end

   /* -------------------------------------------------------*/
   /* Set the function code to 'm' if for some reason we*/
   /* don't have one or if the function passed to us was 'c'.*/
   /* The function of 'c' means we came from pc0i or pc05.*/
   /* -------------------------------------------------------*/
  if (PC0EW00.PC0EWAFF == " "
   || PC0EW00.PC0EWAFF == "C")
    PC0EW00.PC0EWAFF = "M";
  end

   /* ******************************************************/
    /* Set Default GPC Fields*/
   /* ******************************************************/

  PC0EW00.XGPCD = COMMAREA.XGPCD; /* To display storage*/
  PC0EW03.XGPCD = COMMAREA.XGPCD; /* General product class*/
  PC0EW02.XGPCD = COMMAREA.XGPCD; /* To working storage*/

  if (PC0EW00.XGPCD in XGPTBL.XGPCD /* Get description from table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    PC0EW03.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    PC0EW02.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    PC0EW03.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end


   /* ******************************************************/
     /* Move Commarea Fields To Map*/
      /* if Not the first time in*/
   /* ******************************************************/

  if (COMMAREA.CAFROMAP == "PC0E")
    PC0E010(); /* move commarea fields to map*/
  else
    if (COMMAREA.CAFROMAP == "PC0I"
     || COMMAREA.CAFROMAP == "PC05"
     || PC0EW00.PC0EWAFF == "A" /* Add function*/
     || PC0EW00.PC0EWAFF == "L" /* modify with data*/
     || PC0EW00.PC0EWAFF == "J") /* modify with data*/
      PC0E010(); /* move commarea fields to map*/
    end
    PC0EW01.XDMCD = "00";
    PC0EW02.XDMCD = "00";
    if (PC0EW00.XGPCD == "01"
     || PC0EW00.XGPCD == "02"
     || PC0EW00.XGPCD == "07")
      PC0EW01.SY2CLRID = "00 ";
      PC0EW02.SY2CLRID = "00 ";
    end
  end

   /* ******************************************************/
    /* Set Default Product Fields*/
   /* ******************************************************/

  PC0EW01.XOWCD = "00";
  PC0EM001.XOWCD = "00";
  PC0EW02.XOWCD = "00";
  PC0EW01.XPGCD = "00";
  PC0EW02.XPGCD = "00";
  PC0EW01.PC2INSEG = "000";
  PC0EW02.PC2INSEG = "000";

  if (PC0EW00.XGPCD == "03")
    PC0ES74(); /* ===> get Scheduler Code*/
  end

   /* ******************************************************/
   /* Initialize map request flag to screen one.*/
   /* ******************************************************/

  PC0EW00.PC0EWSSF = "1"; /* Move 1 to map request flag*/

   /* ******************************************************/
   /* Set PF3 and PF21 depending upon processing.*/
   /* ******************************************************/

  if (PC0EW00.PC0EWAFF == "A") /* From PC0L application*/
    PC0EM001.PC0EMPF3 = "3:NEW PO";
    set PC0EM001.PC0EMP14 skip, invisible;
    set PC0EM001.PC0EMP17 skip, invisible;
  else
    if (PC0EW00.PC0EWAFF == "M")
      PC0EM001.PC0EMPF3 = "3:PO MN"; /* From PC0A app*/
      set PC0EM001.PC0EMP21 skip, invisible;
      set PC0EM001.PC0EMPF6 skip, invisible;
    else
      if (PC0EW00.PC0EWAFF == "L")
        PC0EM001.PC0EMPF3 = "3:PO HDR"; /* From PC0l app*/
        set PC0EM001.PC0EMP21 skip, invisible;
        set PC0EM001.PC0EMPF6 skip, invisible;
      else
        if (PC0EW00.PC0EWAFF == "J")
          PC0EM001.PC0EMPF3 = "3:PO MENU"; /* From PC0j app*/
          set PC0EM001.PC0EMP21 skip, invisible;
          set PC0EM001.PC0EMPF6 skip, invisible;
        end
      end
    end
  end


   /* ******************************************************/
    /* Setup Darkened Fields Based on GPC*/
   /* ******************************************************/

  if (PC0EW00.XGPCD == "03")
    set PC0EM001.PC6RTADT skip, invisible;
    set PC0EM001.PC0EMRTL skip, invisible;
    set PC0EM001.PC0EMDSL skip, invisible;
    set PC0EM001.PC0EMRSL skip, invisible;
    set PC0EM001.PC0EMSZA skip, invisible;
    set PC0EM001.PC0EMCFN skip, invisible;
    set PC0EM001.PC6CONNO skip, invisible;
    set PC0EM001.PC6SZAVL skip, invisible;
    set PC0EM001.PC0EMSTN skip, invisible;
    set PC0EM001.PC0EMSDC skip, invisible;
  else
    set PC0EM001.PC6ETSDT skip, invisible;
    set PC0EM001.PC0EMETL skip, invisible;
    set PC0EM001.PG1SC4CD skip, invisible; /* ===> Sched. code*/
    set PC0EM001.PC0EMSCL skip, invisible; /* ===> Sched. code literal*/
  end

   /* ******************************************************/
    /* Read the po header table each time*/
   /* ******************************************************/

  set VPOHDR02 empty;
  VPOHDR02.XGPCD = PC0EW00.XGPCD;
  VPOHDR02.PO-REG-CD = PC0EW03.PO-REG-CD;
  VPOHDR02.PC3PONBR = PC0EW03.PC3PONBR;

  PC0E180(); /* Get production order header table*/
  PCWREC.PCFSECD = VPOHDR02.PCFSECD;
  PCWREC.PC4ORTYP = VPOHDR02.PC4ORTYP;

   /* ******************************************************/
    /* Read the po type table each time*/
   /* ******************************************************/

  set PC4REC empty; /* Initialize record*/
  PC4REC.XGPCD = PC0EW00.XGPCD;
  PC4REC.PC4ORTYP = PC0EW03.PC4ORTYP;

  PC0ES01(); /* Get production order type table*/


   /* ******************************************************/
    /* Setup Defaults for Warehouse, Division, Direct Ship Code*/
     /* Only on First Time in*/
   /* ******************************************************/

  if (PC0EW00.PC0EWAFF == "A" /* Add function*/
   || PC0EW00.PC0EWAFF == "L" /* modify with data*/
   || PC0EW00.PC0EWAFF == "J" /* modify with data*/
   || COMMAREA.CAFROMAP == "PC0I"
   || COMMAREA.CAFROMAP == "PC05"
   || COMMAREA.CAFROMAP == "PC0E")
    set VFCTY003 empty;
    VFCTY003.XGPCD = PC0EW03.XGPCD;
    VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

    PC0ES02(); /* Access factory table*/

    if (PC0EW03.YSMXDV == " ") /* first time in*/

      /* IF PC0EW03.PC4ORTYP = 'QQ';  /* for qq po types*/

        /* lsutto moved read of factory table up above the 2 if's*/
        /* above this so that we can read frgn-fac-fl each time thru*/

       /* IF SQLCA.SQLCODE EQ 0*/
         /* AND VFCTY003.XCTCD = 'KORE';/* if factory in korea*/
         /* ;*/
         /* MOVE '15' TO PC0EW01.XWHCD;/* default fcty to 15*/
         /* MOVE '15' TO PC0EW02.XWHCD;/* default fcty to 15*/
         /* MOVE '15' TO PC0EM001.XWHCD;/* default fcty to 15*/
       /* ELSE;*/
         /* MOVE PC4REC.XWHCD TO PC0EW01.XWHCD;*/
         /* MOVE PC4REC.XWHCD TO PC0EW02.XWHCD;*/
         /* MOVE PC4REC.XWHCD TO PC0EM001.XWHCD;*/
       /* END;*/
      /* ELSE;*/
      PC0EW01.XWHCD = PC4REC.XWHCD;
      PC0EW02.XWHCD = PC4REC.XWHCD;
      PC0EM001.XWHCD = PC4REC.XWHCD;
      /* END;*/
      if (PC0EW01.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        PC0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        if (PC0EW01.XWHCD == "12"
         || PC0EW01.XWHCD == "60"
         || PC0EW01.XWHCD == "61")
          PC0EW03.YSMXDV = "20";
          PC0EM001.YSMXDV = "20";
        else
          PC0EW03.YSMXDV = "10";
          PC0EM001.YSMXDV = "10";
        end
      end

      /* Note ----- if apparel get the distribution method from*/
                    /* the P.O. type record*/
      if (PC0EW03.XGPCD == "03")
        PC0EW03.XDSCD = PC4REC.XDSCD;
        PC0EM001.XDSCD = PC4REC.XDSCD;
      end
    end

  end

   /* ******************************************************/
    /* Setup Defaults for Mode of Transportation*/
     /* Only on First Time in*/
   /* ******************************************************/

  if (PC0EW00.PC0EWAFF == "A" /* Add function*/
   || PC0EW00.PC0EWAFF == "L" /* modify with data*/
   || PC0EW00.PC0EWAFF == "J" /* modify with data*/
   || COMMAREA.CAFROMAP == "PC0I"
   || COMMAREA.CAFROMAP == "PC05"
   || COMMAREA.CAFROMAP == "PC0E")
    if (PC0EW03.YMTCD == " ") /* first time in*/
      PC0EW03.YMTCD = "TR";
      PC0EW02.YMTCD = "TR";

      if (PC0EW03.XGPCD == "02")
        if (PC4REC.PC4ORTYP == "PS" /* promo*/
         || PC4REC.PC4ORTYP == "S2" /* promo*/
         || PC4REC.PC4ORTYP == "SS" /* salesman*/
         || PC4REC.PC4ORTYP == "CR" /* component rings*/
         || PC4REC.PC4ORTYP == "S3") /* sample*/
          PC0EW03.YMTCD = "AF";
          PC0EW02.YMTCD = "AF";
        end
      end

      if (PC0EW03.XGPCD == "03")
        if (PC4REC.PC4ORTYP == "SS" /* salesman sample*/
         || PC4REC.PC4ORTYP == "SX" /* salesman sample*/
         || PC4REC.PC4ORTYP == "S7" /* salesman sample*/
         || PC4REC.PC4ORTYP == "PX" /* NIL Promo*/
         || PC4REC.PC4ORTYP == "MP") /* makeup-indirect,diam-mkd,ppk*/
          PC0EW03.YMTCD = "AF";
          PC0EW02.YMTCD = "AF";
        else
          if (PC4REC.PC4ORTYP == "EM"
           || PC4REC.PC4ORTYP == "CD"
           || PC4REC.PC4ORTYP == "TS")
            PC0EW03.YMTCD = "TR";
            PC0EW02.YMTCD = "TR";
          end
        end
      end

      if (PC0EW03.YMTCD == "AF") /* air freight*/

        /* next sentence*/

      else

        set VFCTY003 empty;
        VFCTY003.XGPCD = PC0EW03.XGPCD;
        VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

        PC0ES02(); /* Access factory table*/

        if (SQLCA.VAGen_SQLCODE == 0)
          if (VFCTY003.FY1FRGN == "Y") /* OVerseas factory*/
            /* IF PC4REC.PC4ORTYP EQ 'QQ'/* QQ potype-B grade*/
             /* AND VFCTY003.XCTCD = 'KORE';/* factory in Korea*/
             /* MOVE 'TR' TO PC0EW03.YMTCD;*/
             /* MOVE 'TR' TO PC0EW02.YMTCD;*/
            /* ELSE;*/
            if (PC4REC.PC4ORTYP == "EM"
             || PC4REC.PC4ORTYP == "CD"
             || PC4REC.PC4ORTYP == "TS"
             || PC4REC.PC4ORTYP == "PX"
             || PC4REC.PC4ORTYP == "LP")
                /* next sentence*/
            else
              PC0EW03.YMTCD = "VL";
              PC0EW02.YMTCD = "VL";
            end
            /* END;*/
          else
            if (VFCTY003.XCTCD != "USA" /* factory not USA and not offshore*/
             && VFCTY003.XCTCD != "CANA"
             && VFCTY003.XCTCD != "MEXI"
             && PC0EW03.XGPCD == "03")  /* Apparel*/
              PC0EW03.YMTCD = "VL";
              PC0EW02.YMTCD = "VL";
            end
          end
        end
      end
      /* Note ----- Get the transporation mode description*/

      if (PC0EW03.YMTCD != " "          
       && PC0EW03.YMTCD in YMTTBL.YMTCD /* Get description from table*/
       && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW03.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];

      end
    end
  end

end // end PC0E001

// P.O. Product Entry
Function PC0E002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified display the first map*/
   /* 2) Otherwise, display the second map*/
   /* 3) Otherwise incidate an error and exit to menu*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWSSF == "1") /* Map one requested*/
    PC0E100(); /* Map one processing*/
  else
    if (PC0EW00.PC0EWSSF == "2") /* Map two requested*/
      PC0E200(); /* Map two processing*/
    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PC0EW00.XXXMSGNO = 10; /* Indicate system error*/
      PC0EM001.XXXPRCNM = "PC0E001"; /* Procedure name*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PC0EW00.PC0EWSSF; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PC0EM001.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end PC0E002

// move commarea fields to map
Function PC0E010()

   /* ---------------------------------------------------------*/
   /* move pcw rec (commarea) fields to screen upon re-entry*/
   /* ---------------------------------------------------------*/

  PC0EW03.YSMXDV = PCWREC.YSMXDV;

  if (PC0EW00.XGPCD == "03")

    if (PCWREC.SY1STNBR == "*")
      PC0EW01.SY1STNBR = " ";
      PC0EW02.SY1STNBR = " ";
    else
      PC0EW01.SY1STNBR = PCWREC.SY1STNBR;
      PC0EW02.SY1STNBR = PCWREC.SY1STNBR;
    end

    if (PCWREC.PC6ETSDT < 19000000)
      PC0EW01.PC6ETSDT = 0;
      PC0EW02.PC6ETSDT = 0;
    else
      PC0EW01.PC6ETSDT = PCWREC.PC6ETSDT;
      PC0EW02.PC6ETSDT = PCWREC.PC6ETSDT;
    end

    PC0EW01.XDMCD = "00";
    PC0EW02.XDMCD = "00";

  end

  if (PC0EW00.XGPCD != "03") /* gpc 02 and 01*/
    PC0EW01.PC6SZAVL = PCWREC.PC6SZAVL;
    PC0EW01.PC6RTADT = PCWREC.PC6RTADT;
    PC0EW01.PC0EWFSZ = PCWREC.PCWSIZE;
    PC0EW01.PC0EWSTN = PCWREC.PCWDEVCD;
    PC0EW01.SY1STNBR = PCWREC.SY1STNBR;
    PC0EW02.SY1STNBR = PCWREC.SY1STNBR;
    PC0EW01.SY2CLRID = PCWREC.SY2CLRID;
    PC0EW02.SY2CLRID = PCWREC.SY2CLRID;
    PC0EW01.XDMCD = PCWREC.XDMCD;
    PC0EW02.XDMCD = PCWREC.XDMCD;
  end


  if (PCWREC.XWHCD == "*")
    PC0EW01.XWHCD = " ";
    PC0EW02.XWHCD = " ";
  else
    PC0EW01.XWHCD = PCWREC.XWHCD;
    PC0EW02.XWHCD = PCWREC.XWHCD;
  end

  if (PCWREC.PC2CUXID == "*")
    PC0EW01.PC2CUXID = " ";
    PC0EW02.PC2CUXID = " ";
  else
    PC0EW01.PC2CUXID = PCWREC.PC2CUXID;
    PC0EW02.PC2CUXID = PCWREC.PC2CUXID;
  end

  if (PCWREC.YMTCD == "*")
    PC0EW03.YMTCD = " ";
  else
    PC0EW03.YMTCD = PCWREC.YMTCD;
  end
   /* ---------------------------------------------------------*/
   /* Setup the Po ID and PO Number Fields upon re-entry*/
   /* ---------------------------------------------------------*/
  PC0EW03.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. reg*/
  PC0EW02.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. reg*/
  PC0EW03.PC3PONBR = PCWREC.PC3PONBR; /* P.O. nbr*/
  PC0EW02.PC3PONBR = PCWREC.PC3PONBR;
  PC0EW00.PC0EWFDT = PCWREC.PC3POIDT; /* P.O. id to W.S.*/
  if (PC0EW00.XGPCD == "03")
    PC0EW02.PC0EWPYR = PCWREC.PCFSECD;
  else
    PC0EW02.PC0EWPYR = PC0EW00.PC0EWFYY; /* "   "*/
  end
  PC0EW03.PC0EWPYR = PC0EW00.PC0EWFYY; /* "   "*/
  PC0EW03.PC0EWPMO = PC0EW00.PC0EWFMM; /* "   "*/
  PC0EW02.PC0EWPMO = PC0EW00.PC0EWFMM; /* "   "*/
  PC0EW03.PC0EWDMO = PC0EW00.PC0EWFDD; /* "   "*/
  PC0EW02.PC0EWDMO = PC0EW00.PC0EWFDD; /* "   "*/
  PC0EW03.FY1FCTYC = PCWREC.FY1FCTYC; /* "   "*/
  PC0EW02.FY1FCTYC = PCWREC.FY1FCTYC; /* "   "*/
  PC0EW02.PC0EWDA1 = "-";
  PC0EW02.PC0EWDA2 = "-";
  PC0EW02.PC0EWDA3 = "-";
  PC0EW03.PC0EWPOI = PC0EW02.PC0EWPOI;
  PC0EW03.PC4ORTYP = PCWREC.PC4ORTYP; /* Order type*/
  PC0EW02.PC4ORTYP = PCWREC.PC4ORTYP; /* Order type*/
  if (PCWREC.PCWUSER4 > " ")
    PC0EW00.PCWUSER4 = PCWREC.PCWUSER4;
    PC0EW01.OP1CUOID = PC0EW00.PC0EWCSO;
    PC0EW01.OP1NORID = PC0EW00.PC0EWNSO;
    PC0EW02.OP1CUOID = PC0EW00.PC0EWCSO;
    PC0EW02.OP1NORID = PC0EW00.PC0EWNSO;
    PC0EW01.PC6CONNO = PC0EW00.PC0EW-CONFIRM-NO;
  end
end // end PC0E010

// Map 1 processing
Function PC0E100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  PC0E110(); /* Format and display the map*/

  PC0E120(); /* Check attention identifier*/

  PC0E130(); /* Reset fields to normal intensity*/

  PC0E140(); /* Verify the entered data*/

  PC0E160(); /* Process valid input request*/

end // end PC0E100

// Format and display map 1
Function PC0E110()


  if (converseVar.validationMsgNum != 0)
    set PC0EM001 alarm; /* Indicate sound alarm*/
  end


   /* -----------------------------------------------------------*/
   /* If map is not formatted, format the data to display*/
   /* -----------------------------------------------------------*/

  if (PC0EM001.XXXCURDT == 0)
    PC0E111(); /* Move header data to the map*/
  end

  if (converseVar.validationMsgNum == 0)
    if (PC0EW00.PC0EWPWF != "Y") /* Pop up windows displayed*/

      PC0E112(); /* Move from display storage to map*/

      PC0E113(); /* Position cursor-tailor map*/
      PC0EW00.PC0EWPWF = "N";
    end

  end

  PC0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC0EW00.XXXMSGNO != 0) /* Contains informational message*/
    if (PC0EW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PC0EW00.XXXMSGNO);
    end
  else

    if (PCWREC.XXXMSGNO == 1) /* Update successful message*/
      if (PCWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PCWREC.XXXMSGNO);
      end
      PCWREC.XXXMSGNO = 0;
   /* Removed bell sound per user request*/
   /* SET PC0EM001 ALARM;           /* Indicate sound alarm*/
    end

  end

   /* ======================================================*/
   /* 12/11/90  - A51 to implement misc charges, delete;*/
     /* the two lines below (and these comments). ppeter.;*/
  set PC0EM001.PC0EMMCH skip, invisible;
  set PC0EM001.PC6MICHG skip, invisible;
   /* =====================================================*/


  converse PC0EM001 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  PC0EW00.XXXMSGNO = 0; /* Message number*/
  PC0EM001.XXXPRCNM = "PC0E "; /* Process number*/
  PC0EW00.PC0EWPWF = "N"; /* Pop up windows displayed*/

end // end PC0E110

// Format map 1 data
Function PC0E111()

   /* ------------------------------------------------------------*/
   /* Move map 1 data from pc0ew0h and pc0ew01 display storage*/
   /* map fields.*/
   /* ------------------------------------------------------------*/


  PC0EM001.PC3PONBR = PC0EW03.PC3PONBR; /* Order number*/

  if (PC0EW00.XGPCD == "03") /* If apparel*/
    PC0EM001.PC0EMPYR = PC0EW03.PCFSECD; /* Season code*/
  else
    PC0EM001.PC0EMPYR = PC0EW03.PC0EWPYR;
  end

  if (PC0EW03.PC0EWPMO != "00")
    PC0EM001.PC0EMPMO = PC0EW03.PC0EWPMO;
  end
  if (PC0EW03.PC0EWDMO != "00")
    PC0EM001.PC0EMDMO = PC0EW03.PC0EWDMO;
  end
  PC0EM001.FY1FCTYC = PC0EW03.FY1FCTYC;
  PC0EM001.PC4ORTYP = PC0EW03.PC4ORTYP;
  PC0EM001.PC4SDESC = PC0EW03.PC4SDESC;
  PC0EM001.XGPCD = PC0EW03.XGPCD;
  PC0EM001.XGPABRV = PC0EW03.XGPABRV;
  PC0EM001.SY2CLRID = PC0EW01.SY2CLRID;
  PC0EM001.SY2CLRID = PC0EW01.SY2CLRID;
  PC0EM001.XDMCD = PC0EW01.XDMCD;
  PC0EM001.PC2INSEG = PC0EW01.PC2INSEG;
  PC0EM001.XPGCD = PC0EW01.XPGCD;
  PC0EM001.XQACD = PC0EW01.XQACD;
  PC0EM001.XQACD = PC0EW01.XQACD;
  PC0EM001.XWHCD = PC0EW01.XWHCD;
  PC0EM001.YMTCD = PC0EW03.YMTCD;
  PC0EM001.YMTABRV = PC0EW03.YMTABRV;
  PC0EM001.PG1SC4CD = PC0EW01.PG1SC4CD;
  PC0EM001.PC6CONNO = PC0EW01.PC6CONNO;



end // end PC0E111

// Move data from storage to map
Function PC0E112()

   /* ------------------------------------------------------------*/
   /* Move fields from display storage to map.*/
   /* ------------------------------------------------------------*/


  if (PC0EM001.PC4ORTYP == "QQ")
    PC0EW01.SY1STNBR = " ";
    PC0EW01.PC0EWSTN = " ";
    PC0EW01.PC0EWSTY = " ";
    PC0EW01.SY2CLRID = " ";
  end
  PC0EM001.SY1STNBR = PC0EW01.SY1STNBR; /* Style number*/
  PC0EM001.PC0EMSTN = PC0EW01.PC0EWSTN; /* Development style*/
  PC0EM001.PC0EMSTY = PC0EW01.PC0EWSTY; /* Ring style*/
  PC0EM001.SY2CLRID = PC0EW01.SY2CLRID; /* Color id*/
  PC0EM001.XDMCD = PC0EW01.XDMCD; /* Dimension  code*/
  PC0EM001.XOWCD = PC0EW01.XOWCD; /* owner group*/
  PC0EM001.PC2INSEG = PC0EW01.PC2INSEG; /* Spec code*/
  PC0EM001.XQACD = PC0EW01.XQACD; /* Quality code*/
  PC0EM001.XPGCD = PC0EW01.XPGCD; /* Package code*/
  PC0EM001.XUMCD = PC0EW01.XUMCD; /* Unit of measure*/
  PC0EM001.PC6TORIG = PC0EW01.PC6TORIG; /* Original quantity*/
  PC0EM001.PC0EMFSZ = PC0EW01.PC0EWFSZ; /* First size*/
  PC0EM001.PC0EMLSZ = PC0EW01.PC0EWLSZ; /* Last size*/
  PC0EM001.PC6SZAVL = PC0EW01.PC6SZAVL; /* Size available*/
  if (PC0EW01.PC6OETAL != 0)
    PC0EM001.PC6OETAL = PC0EW01.PC6OETAL; /* Override*/
  end
  if (PC0EW01.PC6ETSDT != 0)
    PC0EW00.PC0EWFDT = PC0EW01.PC6ETSDT;
    PC0EW00.PC0EWMYY = PC0EW00.PC0EWFYY;
    PC0EW00.PC0EWMMM = PC0EW00.PC0EWFMM;
    PC0EW00.PC0EWMDD = PC0EW00.PC0EWFDD;
    PC0EM001.PC6ETSDT = PC0EW00.PC0EWMDT;
  end
  if (PC0EW01.PC6RTADT != 0)
    PC0EW00.PC0EWFDT = PC0EW01.PC6RTADT;
    PC0EW00.PC0EWMYY = PC0EW00.PC0EWFYY;
    PC0EW00.PC0EWMMM = PC0EW00.PC0EWFMM;
    PC0EW00.PC0EWMDD = PC0EW00.PC0EWFDD;
    PC0EM001.PC6RTADT = PC0EW00.PC0EWMDT;
  end
  PC0EM001.PC2CUXID = PC0EW01.PC2CUXID; /* Customer xref nbr*/
  PC0EM001.OP1CUOID = PC0EW01.OP1CUOID; /* Cust order no*/
  PC0EM001.OP1NORID = PC0EW01.OP1NORID; /* Nike order no*/
  PC0EM001.XWHCD = PC0EW01.XWHCD; /* Warehouse code*/
  PC0EM001.XWHABRV = PC0EW01.XWHABRV; /* Warehouse abbrev*/
  PC0EM001.XDSCD = PC0EW03.XDSCD; /* Distribution code*/
  PC0EM001.XDSABRV = PC0EW03.XDSABRV; /* Distribution abbrev*/
  PC0EM001.YSMXDV = PC0EW03.YSMXDV; /* Division code*/
  PC0EM001.YSMSMDSC = PC0EW03.YSMSMDSC; /* Division abbrev*/
  PC0EM001.KUCCOID = PC0EW01.KUCCOID; /* Customer idetc*/
  PC0EM001.XNXCD = PC0EW01.XNXCD;
  PC0EM001.OP1CUPO = PC0EW01.OP1CUPO;
  PC0EM001.YMTCD = PC0EW03.YMTCD; /* Transportation mode*/
  PC0EM001.YMTABRV = PC0EW03.YMTABRV; /* Transportation desc*/
  PC0EM001.PC6AIRNB = PC0EW01.PC6AIRNB; /* Air reg nbr*/

  if (PC0EW03.XGPCD == "03" /* Apparel*/
   && PC0EW03.YMTCD == "AF" /* Transportation mode*/
   && PC0EW01.PC-NIKE-AFRGT-PCT == 0
   && PC0EW01.PC-FCTY-AFRGT-PCT == 0)
    PC0EM001.PC-NIKE-AFRGT-PCT = 100;
    PC0EW01.PC-NIKE-AFRGT-PCT = 100;
    PC0EM001.PC-FCTY-AFRGT-PCT = 0;
    PC0EW01.PC-FCTY-AFRGT-PCT = 0;
  else
    PC0EM001.PC-NIKE-AFRGT-PCT = PC0EW01.PC-NIKE-AFRGT-PCT;
    PC0EM001.PC-FCTY-AFRGT-PCT = PC0EW01.PC-FCTY-AFRGT-PCT;
  end

  PC0EM001.PC6NILRF = PC0EW01.PC6NILRF; /* Nil Ref Nbr*/
  PC0EM001.PC6CONNO = PC0EW01.PC6CONNO; /* Confirm nbr*/
  PC0EM001.PG1SC4CD = PC0EW01.PG1SC4CD; /* Scheduler Code*/
  PC0EM001.PC6MICHG = PC0EW01.PC6MICHG; /* Misc charges*/
end // end PC0E112

// position cursor etc.
Function PC0E113()

   /* ------------------------------------------------------------*/
   /* Protect non-enterable map fields on an add.  Darken fields*/
   /* depending upon if footwear or apparel are being entered.*/
   /* Position cursor.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWAFF == "A"
   || PC0EW00.PC0EWAFF == "L"
   || PC0EW00.PC0EWAFF == "J")
    set PC0EM001.PC3PONBR protect;
    set PC0EM001.PC0EMPYR protect;
    set PC0EM001.PC0EMPMO protect;
    set PC0EM001.PC0EMDMO protect;
    set PC0EM001.FY1FCTYC protect;
    set PC0EM001.PC4ORTYP protect;
  else /* Application functions as modify*/
    if (PC0EW00.PC0EWAFF == "M")
      set PC0EM001.PC3PONBR normal;
      if (PC0EW00.XGPCD == "02")
        set PC0EM001.PC0EMPYR normal;
        set PC0EM001.PC0EMPMO normal;
        set PC0EM001.PC0EMDMO normal;
        set PC0EM001.FY1FCTYC normal;
        set PC0EM001.PC4ORTYP normal;
      else
        set PC0EM001.PC0EMPYR protect;
        set PC0EM001.PC0EMPMO protect;
        set PC0EM001.PC0EMDMO protect;
        set PC0EM001.FY1FCTYC protect;
        set PC0EM001.PC4ORTYP protect;
      end
    end
  end

  if (PC0EW00.PC0EWAFF == "A")
    set PC0EM001.PC0EMP14 protect, invisible;
    set PC0EM001.PC0EMP17 protect, invisible;
  end

  if (PC0EW00.PC0EWAFF == "M"
   || PC0EW00.PC0EWAFF == "J"
   || PC0EW00.PC0EWAFF == "L")
    set PC0EM001.PC0EMP21 protect, invisible;
    set PC0EM001.PC0EMPF6 protect, invisible;
  end

  if (PC0EM001.PC3PONBR == 0) /* P.O. number not entered*/
    set PC0EM001.PC3PONBR cursor;
  else

    if (PC0EM001.SY1STNBR == " ")
      set PC0EM001.SY1STNBR cursor;

    else
      if (PC0EW00.XGPCD == "01"
       || PC0EW00.XGPCD == "07")
        PC0EM001.SY1STNBR = " ";
        PC0EM001.PC6RTADT = 0;
        set PC0EM001.SY1STNBR cursor;
      else
        if (PC0EW00.XGPCD == "02")
          set PC0EM001.PC6TORIG cursor;
        else
          set PC0EM001.SY2CLRID cursor;
        end
      end
    end
  end



  if (PC0EW00.XGPCD == "03")
    set PC0EM001.PC6RTADT skip, invisible;
    set PC0EM001.PC0EMRTL skip, invisible;
  else
    set PC0EM001.PC6ETSDT skip, invisible;
    set PC0EM001.PC0EMETL skip, invisible;
    set PC0EM001.PC6MICHG skip, invisible; /* Misc charges*/
    set PC0EM001.PC0EMMCH skip, invisible; /* Misc charges literal*/
  end


  if (PC0EW00.XGPCD == "02")
    set PC0EM001.PC0EMSTN normal; /* Style development*/
    set PC0EM001.PC0EMSDC normal; /* style development color*/
    set PC0EM001.PC0EMSCL skip, invisible; /* Scheduler Code Literal*/
    set PC0EM001.PG1SC4CD skip, invisible; /* Scheduler Code*/
  else
    set PC0EM001.PC0EMRSL skip, invisible;
    set PC0EM001.PC0EMDSL skip, invisible;
    set PC0EM001.PC0EMSTN skip, invisible;
    set PC0EM001.PC0EMSDC skip, invisible;
  end

  if (PC0EW03.XGPCD == "02")
    if (PC0EW03.PC4ORTYP != "FT"
     && PC0EW03.PC4ORTYP != "S1"
     && PC0EW03.PC4ORTYP != "QQ")
      set PC0EM001.OP1CUOID skip; /* CUST ORDER NO*/
      set PC0EM001.OP1NORID skip; /* NIKE ORDER NO*/
    else
      set PC0EM001.OP1CUOID initialAttributes; /* CUST ORDER NO*/
      set PC0EM001.OP1NORID initialAttributes; /* NIKE ORDER NO*/
    end
  else
    set PC0EM001.OP1CUOID initialAttributes; /* CUST ORDER NO*/
    set PC0EM001.OP1NORID initialAttributes; /* NIKE ORDER NO*/
  end


   /* --------------- End of PC0E113 -----------------------------*/
end // end PC0E113

// Check Attention identifier
Function PC0E120()



   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    PC0EM001.XXXPRCNM = "PC0E";
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* Continue to edits if enter was pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/
    return; /* Return to calling procedure*/
  end



   /* ------------------------------------------------------------*/
   /* Check for pf15 --cancel product*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* Cancel product*/
   && PC0EW00.PC0EWAFF != "M")    
    if (PCWREC.CAFROMAP[1] == " "
     || PCWREC.CAFROMAP[1] == "PC0E")

      PCWREC.CAFROMAP[1] = "PC0E"; /* From application id*/
      PCWREC.PCWFNC[1] = PC0EW00.PC0EWAFF;

    else
      if (PCWREC.CAFROMAP[2] == " "
       || PCWREC.CAFROMAP[2] == "PC0E")

        PCWREC.CAFROMAP[2] = "PC0E"; /* From application id*/
        PCWREC.PCWFNC[2] = PC0EW00.PC0EWAFF;
      else
        if (PCWREC.CAFROMAP[3] == " "
         || PCWREC.CAFROMAP[3] == "PC0E")
          PCWREC.CAFROMAP[3] = "PC0E"; /* From application id*/
          PCWREC.PCWFNC[3] = PC0EW00.PC0EWAFF;

        else
          if (PCWREC.CAFROMAP[4] == " "
           || PCWREC.CAFROMAP[4] == "PC0E")
            PCWREC.CAFROMAP[4] = "PC0E"; /* From application id*/
            PCWREC.PCWFNC[4] = PC0EW00.PC0EWAFF;

          end
        end
      end
    end
    COMMAREA.CAITEM = " "; /* application from data*/
    COMMAREA.CATOAP = "PC0E";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    XSPCS01();
    PC0EM001.XXXPRCNM = "PC0E120";
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Check for PF15--(cancel product)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* PF15 was pressed--cancel product*/
   && PC0EW00.PC0EWAFF == "M")    
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set PC0EM001 initial;
    set PC0EM002 initial;
    set PC0EW00 empty;
    set PC0EW01 empty;
    set PC0EW02 empty;
    set PC2REC empty;
    set FYCREC empty;
    set VFCTY003 empty;
    set FY4REC empty;
    set OP1REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set TSCREC empty;
    set YSMREC empty;
    PC0EM001.PC0EMPF3 = "3:PO MN";
    set PC0EM001.PC0EMP21 skip, invisible;
    set PC0EM001.PC0EMPF6 skip, invisible;
    PC0EW00.XGPCD = PC0EW03.XGPCD;
    PC0EW02.XGPDESC = PC0EW03.XGPDESC;
    PC0EW01.XDMCD = "00";
    PC0EW02.XDMCD = "00";
    PC0EW01.XPGCD = "00";
    PC0EW02.XPGCD = "00";
    PC0EW01.XUMCD = "00";
    PC0EW02.XUMCD = "00";
    PC0EW01.XOWCD = "00";
    PC0EW02.XOWCD = "00";
    PC0EW01.PC2INSEG = "000";
    PC0EW02.PC2INSEG = "000";
    PC0EW00.PC0EWSSF = "1";
    PC0EW00.PC0EWAFF = "M";
    if (PC0EW00.XGPCD == "03")
      set PC0EM001.PC0EMDSL skip, invisible;
      set PC0EM001.PC0EMRSL skip, invisible;
      set PC0EM001.PC6RTADT skip, invisible;
    else
      PC0EW03.YSMXDV = " ";
      PC0EW03.YSMSMDSC = " ";
      PC0EW03.XDSCD = " ";
      PC0EW03.XDSABRV = " ";
      PC0EW01.SY2CLRID = "00 ";
      PC0EW02.SY2CLRID = "00 ";
      set PC0EM001.PC6ETSDT skip, invisible;
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check for PF6--Hdr special instructions screen*/
   /* Only valid if no fields have been entered on the screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6
   && PC0EW00.PC0EWAFF == "A" /* Add function*/
   && PC0EW00.PC0EWDEF == " ") /* No data entered*/
    if (PCWREC.CAFROMAP[1] == " ")

      PCWREC.CAFROMAP[1] = "PC0E"; /* From application id*/
      PCWREC.PCWFNC[1] = PC0EW00.PC0EWAFF;

    else
      if (PCWREC.CAFROMAP[2] == " ")

        PCWREC.CAFROMAP[2] = "PC0E"; /* From application id*/
        PCWREC.PCWFNC[2] = PC0EW00.PC0EWAFF;
      else
        if (PCWREC.CAFROMAP[3] == " ")
          PCWREC.CAFROMAP[3] = "PC0E"; /* From application id*/
          PCWREC.PCWFNC[3] = PC0EW00.PC0EWAFF;

        else
          if (PCWREC.CAFROMAP[4] == " ")
            PCWREC.CAFROMAP[4] = "PC0E"; /* From application id*/
            PCWREC.PCWFNC[4] = PC0EW00.PC0EWAFF;

          end
        end
      end
    end
    COMMAREA.CAITEM = " "; /* Application data*/
    if (PC0EW00.PC0EWAFF == "A") /* in add mode*/
      PCWREC.PCWFNC[1] = "A"; /* let pc0h know which mode*/
    else /* in maintenance mode*/
      PCWREC.PCWFNC[1] = "C"; /* let pc0h know which mode*/
    end
    COMMAREA.CATOAP = "PC0H"; /* To application*/
    XSPCS01(); /* Exit to another application*/
    PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Check for PF3--transfer to PC0L or PC0A depending upon*/
   /* application function flag.(also pc0j)*/
   /* If from pc0l check to see if there are any PO items for*/
   /* the PO header--if there aren't the PO header should be*/
   /* deleted.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PCWREC.SY1STNBR = " "; /* Clear style*/
    PCWREC.PC6ETSDT = 0; /* Clear Ets date*/
    if (PC0EW00.PC0EWAFF == "A") /* From PC0L*/

      PC0E122(); /* Open cursor for PO item*/

        /* If no items exist delete the header*/
           /* process to perform delete is in PC0E123*/

      PC0E123(); /* Fetch one PO item row*/

      PC0E124(); /* Close cursor for PO item*/

      COMMAREA.CAITEM = " "; /* Application data*/
      set PCWREC empty;
      PCWREC.PCWFNC = "A"; /* Send add function to PC0L*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA; /* Move to commarea*/
      COMMAREA.CATOAP = "PC0L"; /* To application*/
      XSEXIT(); /* Exit to another application*/
      PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
      converseLib.validationFailed(10);
      exit stack; /* Exit to redisplay map*/
    else
      if (PC0EW00.PC0EWAFF == "L") /* From PC0l (modify mode)*/
        set PCWREC empty;
        /* MOVE pc0em001.po-reg-cd TO PCWREC.po-reg-cd;*/
        PCWREC.PO-REG-CD = PC0EW03.PO-REG-CD;
        PCWREC.PC3PONBR = PC0EM001.PC3PONBR;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CAITEM = " "; /* Application data*/
        COMMAREA.CATOAP = "PC0L"; /* To application*/
        XSEXIT(); /* Exit to another application*/
        PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
        converseLib.validationFailed(10);
        exit stack; /* Exit to redisplay map*/
      else
        if (PC0EW00.PC0EWAFF == "M" /* From PC0a*/
         || PC0EW00.PC0EWAFF == "J") /* from J (modify mode)*/
          set PCWREC empty;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CAITEM = " "; /* Application data*/
          COMMAREA.CATOAP = "PC0A"; /* To application*/
          XSEXIT(); /* Exit to another application*/
          PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
          converseLib.validationFailed(10);
          exit stack; /* Exit to redisplay map*/
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Check for PF21--transfer to PC0a if performing add*/
   /* function.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf21 /* PF21 was pressed*/
   && PC0EW00.PC0EWAFF == "A")    

    PC0E122(); /* Open cursor for PO item*/

      /* If no items exist delete the header*/
         /* process to perform delete is in PC0E123*/

    PC0E123(); /* Fetch one PO item row*/

    PC0E124(); /* Close cursor for PO item*/

    COMMAREA.CAITEM = " "; /* Application data*/
    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/
    PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end



   /* ------------------------------------------------------------*/
   /* Check for PF14--transfer to PC0J if performing modify*/
   /* function.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    if (PC0EW00.PC0EWAFF == "J"
     || PC0EW00.PC0EWAFF == "M")
      COMMAREA.CAITEM = " "; /* Application data*/
      COMMAREA.CATOAP = "PC0J"; /* To application*/
      /* MOVE pc0em001.po-reg-cd TO PCWREC.po-reg-cd;*/
      PCWREC.PO-REG-CD = PC0EW03.PO-REG-CD;
      PCWREC.PC3PONBR = PC0EM001.PC3PONBR;
      COMMAREA.CAUSERA = PCWREC.CAUSERA; /* Move to commarea*/
      XSPCS01(); /* Exit to another application*/
      PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end



   /* ------------------------------------------------------------*/
   /* Check for PF17--transfer to PC0L if performing modify*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (PC0EW00.PC0EWAFF == "L" /* Modify*/
     || PC0EW00.PC0EWAFF == "M") /* Modify*/
      set PCWREC empty;
      PCWREC.CAFROMAP[1] = "PC0E"; /* From application id*/
      PCWREC.PCWFNC[1] = " ";
      COMMAREA.CAITEM = " "; /* Application data*/
      COMMAREA.CATOAP = "PC0L"; /* To application*/
      /* MOVE pc0em001.po-reg-cd TO PCWREC.po-reg-cd;*/
      PCWREC.PO-REG-CD = PC0EW03.PO-REG-CD;
      PCWREC.PC3PONBR = PC0EM001.PC3PONBR;
      COMMAREA.CAUSERA = PCWREC.CAUSERA; /* Move to commarea*/
      XSPCS01(); /* Exit to another application*/
      PC0EM001.XXXPRCNM = "PC0E120"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set PC0EM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  converseLib.validationFailed(04); /* Invalid PA/PF key*/
  exit stack;



end // end PC0E120

// Check PO for items
Function PC0E122()
   /* ------------------------------------------------------------*/
   /* Open cursor for po items using gpc code and PO Nbr as key*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  VPOITM05.XGPCD = PCWREC.XGPCD;
  VPOITM05.PO-REG-CD = PCWREC.PO-REG-CD;
  VPOITM05.PC3PONBR = PCWREC.PC3PONBR;

  set PCYREC empty;
  PCYREC.PCYFUNC = "S2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E122"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E122";

  exit stack;

end // end PC0E122

// Fetch one PO item row
Function PC0E123()
   /* ------------------------------------------------------------*/
   /* Select a row.*/
   /* If row not found delete the header.  If row found return*/
   /* to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  set PCYREC empty;
  PCYREC.PCYFUNC = "N2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0ES14(); /* Delete header*/

      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E123"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E123";
  exit stack;

end // end PC0E123

// Close cursor for PO item table
Function PC0E124()
   /* ------------------------------------------------------------*/
   /* Close cursor for item*/
   /* ------------------------------------------------------------*/


  set PCYREC empty;
  PCYREC.PCYFUNC = "C2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E124"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES07";
  exit stack;


end // end PC0E124

// Reset fields to normal
Function PC0E130()

   /* ------------------------------------------------------------*/
   /* Protect non-enterable map fields on an add.  Darken fields*/
   /* depending upon if footwear or apparel are being entered.*/
   /* Position cursor.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWAFF == "A"
   || PC0EW00.PC0EWAFF == "L"
   || PC0EW00.PC0EWAFF == "J")
    set PC0EM001.PC3PONBR protect;
    set PC0EM001.PC0EMPYR protect;
    set PC0EM001.PC0EMPMO protect;
    set PC0EM001.PC0EMDMO protect;
    set PC0EM001.FY1FCTYC protect;
    set PC0EM001.PC4ORTYP protect;
  else
    set PC0EM001.PC3PONBR normal;
    if (PC0EW00.XGPCD == "02")
      set PC0EM001.PC0EMPYR normal;
      set PC0EM001.PC0EMPMO normal;
      set PC0EM001.PC0EMDMO normal;
      set PC0EM001.FY1FCTYC normal;
      set PC0EM001.PC4ORTYP normal;
      set PC0EM001.PC0EMP21 skip, invisible;
    else
      set PC0EM001.PC0EMPYR protect;
      set PC0EM001.PC0EMPMO protect;
      set PC0EM001.PC0EMDMO protect;
      set PC0EM001.FY1FCTYC protect;
      set PC0EM001.PC4ORTYP protect;
    end
  end


  if (PC0EW00.XGPCD == "03") /* apparel*/
    set PC0EM001.PC0EMSZA skip, invisible;
    set PC0EM001.PC0EMCFN skip, invisible;
    set PC0EM001.PC0EMRTL skip, invisible;
    set PC0EM001.PC6RTADT skip, invisible;
    set PC0EM001.PC0EMDSL skip, invisible;
    set PC0EM001.PC0EMRSL skip, invisible;
    set PC0EM001.PC6ETSDT normal;
    set PC0EM001.PG1SC4CD initialAttributes;
  else
    set PC0EM001.PC0EMETL skip, invisible;
    set PC0EM001.PC6RTADT normal;
    set PC0EM001.PC6ETSDT skip, invisible;
  end


  set PC0EM001.SY1STNBR normal;
  set PC0EM001.SY2CLRID normal;
  set PC0EM001.XDMCD normal;
  set PC0EM001.PC6TORIG normal;
  set PC0EM001.XQACD initialAttributes;
  set PC0EM001.XPGCD normal;
  set PC0EM001.XUMCD initialAttributes;
  set PC0EM001.XOWCD normal;
  set PC0EM001.PC0EMFSZ normal;
  set PC0EM001.PC0EMLSZ normal;
  if (PC0EW00.XGPCD == "03")
    set PC0EM001.PC6SZAVL skip, invisible;
  else
    set PC0EM001.PC6SZAVL normal;
  end
  set PC0EM001.XWHCD normal;
  set PC0EM001.PC2INSEG normal;
  set PC0EM001.YMTCD normal;
  set PC0EM001.PC2CUXID normal;
  set PC0EM001.KUCCOID normal;
  set PC0EM001.KUMSTRID normal;
  set PC0EM001.XNXCD normal;
  set PC0EM001.OP1CUPO normal;
  set PC0EM001.OP1CUOID normal;
  set PC0EM001.OP1NORID normal;

  if (PC0EM001.XGPCD == "02")
    set PC0EM001.PC0EMSTN normal; /* style development*/
  end


   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XDMCD == "?"    /* Dimension list requested*/
   || PC0EM001.PC2INSEG == "?" /* Spec list requested*/
   || PC0EM001.XOWCD == "?"    /* Owner group code list requested*/
   || PC0EM001.XPGCD == "?"    /* Package code list requested*/
   || PC0EM001.XUMCD == "?"    /* Unit of measure requested*/
   || PC0EM001.XWHCD == "?"    /* Warehouse list requested*/
   || PC0EM001.YMTCD == "?")   /* Trans mode codes*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PC0EM001.XXXPRCNM = "PC0E130"; /* Module identification*/
      converseLib.validationFailed(04); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

  PC0EW00.PC0EWPWF = "Y"; /* Display pop-up window flag*/

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XDMCD == "?") /* dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the dimension list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XDMCD = PC0EW01.XDMCD; /* Restore prior code*/
    else
      PC0EW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      PC0EW02.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      PC0EM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set PC0EM001.XDMCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group codes.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XOWCD == "?") /* Owner group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP"; /* Heading*/
    XX0XW02.XWHCD = PC0EM001.XWHCD;

    if (XX0XW02.XWHCD == " " /* if whse is blank*/
     && PC0EM001.XGPCD == "03") /* apparel only*/
      XX0XW02.XWHCD = "51"; /* use 51 as a default*/
    end

    PC0EW00.XWHOWNGF = "N";

    if (XX0XW02.XWHCD != " ") /* if whse entered*/
      if (XX0XW02.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW00.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      end
    end

    if (PC0EW00.XWHOWNGF == "N") /* whse doesn't allow owner grps*/
      set PC0EM001.XOWCD cursor, modified, bold;
      converseLib.validationFailed(404); /* whse only allows owner grp*/
      PC0EM001.XXXPRCNM = "PC0E130";
      exit stack; /* exit to redisplay map1*/
    else

      while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
        XPXOW01(); /* Display the owner group list*/
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XOWCD = PC0EW01.XOWCD; /* Restore prior code*/
    else
      PC0EW01.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
      PC0EM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
      PC0EW02.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

    end

    set PC0EM001.XOWCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of quality codes.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XQACD == "?") /* Quality list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "QUALITY CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the quality list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XQACD = PC0EW01.XQACD; /* Restore prior code*/
    else
      PC0EW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      PC0EW02.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      PC0EM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

    end

    set PC0EM001.XQACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of package codes.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XPGCD == "?") /* Package list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PACKAGE TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the package list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XPGCD = PC0EW01.XPGCD; /* Restore prior code*/
    else
      PC0EW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      PC0EW02.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      PC0EM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0EM001.XPGCD cursor; /* Establish cursor position*/


  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measure codes*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XUMCD == "?") /* Unit of measure requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XUMCD = PC0EW01.XUMCD; /* Restore prior code*/
    else
      PC0EM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      PC0EW01.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      PC0EW02.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

    end

    set PC0EM001.XUMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of warehouse codes*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XWHCD == "?") /* warehouse requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE      "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.XWHCD = PC0EW01.XWHCD; /* Restore prior code*/
    else
      PC0EM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      PC0EM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];
      PC0EW01.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX];

    end

    set PC0EM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of  dist method codes*/
   /* ------------------------------------------------------------*/

   /* IF PC0EM001.XDSCD EQ '?'        ; Direct ship requested*/

   /* PERFORM XPXX001               ; Window initialization*/
    /* MOVE 'DIST METHOD    ' TO XX0XW02.XX0XWHDR; Heading*/

    /* WHILE XX0XW02.XX0XWEND EQ 'N' ; Until end of request*/
      /* PERFORM XPXDS01             ; Display the list*/
    /* END ;*/

    /* IF XX0XW02.XX0XWPIX EQ 0      ; No selection made*/

      /* MOVE PC0EW0H.XDSCD TO PC0EM001.XDSCD; Restore prior code*/
    /* ELSE ;*/
      /* MOVE XDSTBL.XDSCD(XX0XWPIX) TO PC0EM001.XDSCD*/
     /* MOVE XDSTBL.XDSCD(XX0XWPIX) TO PC0EW0H.XDSCD*/
     /* MOVE XDSTBL.XDSABRV(XX0XWPIX) TO PC0EW0H.XDSABRV;*/

   /* END ;*/

   /* SET PC0EM001.XDSCD CURSOR     ; Establish cursor position*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* If requested, display the list of trans mode codes*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.YMTCD == "?") /* Trans mode codes*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "TRANS MODE     "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYMT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PC0EM001.YMTCD = PC0EW03.YMTCD; /* Restore prior code*/
    else
      PC0EM001.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* Selected code*/
      PC0EW03.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* Selected code*/
      PC0EW02.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* Selected code*/
      PC0EW03.YMTABRV = YMTTBL.YMTABRV[XX0XWPIX];

    end

    set PC0EM001.YMTCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0EM001.XXXPRCNM = "PC0E130"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end PC0E130

// Verify the entered data
Function PC0E140()
   /* ------------------------------------------------------------*/
   /* If the function is modify and the gpc code ne '03'*/
   /* validate the PO number or the PO ID and the PO type.*/
   /* If the function is modify and the gpc code is equal '03'*/
   /* validate the PO number.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWAFF == "M"
   && PC0EW00.XGPCD != "03")
    if (PC0EM001.PC3PONBR == 0   /* No PO number entered*/
     && PC0EM001.PC0EMPYR == " " /* No PO id entered*/
     && PC0EM001.PC0EMPMO == " " 
     && PC0EM001.PC0EMDMO == " " 
     && PC0EM001.FY1FCTYC == " " 
     && PC0EM001.PC4ORTYP == " ") /* No PO type entered*/

      set PC0EM001.PC3PONBR cursor, bold;
      set PC0EM001.PC0EMPYR bold;
      set PC0EM001.PC0EMPMO bold;
      set PC0EM001.PC0EMDMO bold;
      set PC0EM001.FY1FCTYC bold;
      set PC0EM001.PC4ORTYP bold;
      converseLib.validationFailed(21); /* Data must be entered to process*/
                                   /* request*/
      PC0EM001.XXXPRCNM = "PC0E140";
      exit stack; /* Exit to display map*/
    end
  end

  if (PC0EW00.PC0EWAFF == "M"
   && PC0EW00.XGPCD == "03")
    if (PC0EM001.PC3PONBR == 0) /* No PO number entered*/

      set PC0EM001.PC3PONBR cursor, bold;
      converseLib.validationFailed(21); /* Data must be entered to process*/
                                   /* request*/
      PC0EM001.XXXPRCNM = "PC0E140";
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If the function is modify validate the PO number or the*/
   /* PO ID and PO type.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWAFF == "M") /* Modify function*/

    PC0E141(); /* Validate PO etc.*/

  else

    PC0E184(); /* Fetch Po hdr/ po type rows*/

  end

   /* ------------------------------------------------------------*/
   /* Check the PO number to see if in a valid range*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.XGPCD != "01"
  )
    if (VPOHDR02.PO-REG-CD == "01") /* us po's*/
      /* next sentence*/
    else
      converseLib.validationFailed(509); /* Cannot add items in po # range.*/
      set PC0EM001.PC3PONBR cursor, bold;
      PC0EM001.XXXPRCNM = "PC0E140";
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* Check the PO header status code for  closed*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.YPUCD == "CL") /* Status is  closed*/
    converseLib.validationFailed(219); /* Cannot add items to this status*/
    set PC0EM001.PC3PONBR cursor, bold;
    PC0EM001.XXXPRCNM = "PC0E140";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check the PO header status codes for footwear not inline*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.XGPCD == "02")
    if (PC4REC.PC4ORTYP != "FT" /* Not inline*/
     && PC4REC.PC4ORTYP != "OR" /* Not overrun*/
     && PC4REC.PC4ORTYP != "S1" /* not inline side1*/
     && PC4REC.PC4ORTYP != "S4") /* not overrun side1*/
      if (VPOHDR02.YPUCD == "OP" /* Status is open*/
       || VPOHDR02.YPUCD == "NC" /* Status is nike close*/
       || VPOHDR02.YPUCD == "IN" /* Status is Incomplete*/
       || VPOHDR02.YPUCD == "CX" /* Status is cancel*/
       || VPOHDR02.YPUCD == "TN") /* Status is tentative*/
         /* next sentence*/
      else
        converseLib.validationFailed(219); /* Cannot add items to this status*/
        set PC0EM001.PC3PONBR cursor, bold;
        PC0EM001.XXXPRCNM = "PC0E140";
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check the PO header status codes for footwear inline*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.XGPCD == "02")
    if (PC4REC.PC4ORTYP == "FT"
     || PC4REC.PC4ORTYP == "OR"
     || PC4REC.PC4ORTYP == "S1"
     || PC4REC.PC4ORTYP == "S4")
      converseLib.validationFailed(73); /* Footwear 1st qty cannot maintain*/
                                   /* existing po*/
      PC0EM001.XXXPRCNM = "PC0E140";
      exit stack;
    end
  end
   /* ------------------------------------------------------------*/
   /* Check PO type for active status*/
   /* ------------------------------------------------------------*/

  if (PC4REC.XXXSTAT != "A")
    PC0EW03.PC4ORTYP = " ";
    set PC0EM001.PC4ORTYP cursor, bold;
    converseLib.validationFailed(33); /* PO type status not active*/
    PC0EM001.XXXPRCNM = "PC0E140";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Put out a warning message if the po has an acceptable*/
   /* status for adding--but is not open.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWKCH == "Y") /* Key has changed*/
    if (VPOHDR02.YPUCD == "IN") /* Status is incomplete*/
      converseLib.validationFailed(220); /* warning-adding items to po in in*/
                                   /* status*/
      PC0EM001.XXXPRCNM = "PC0E140";
      exit stack;
    else
      if (VPOHDR02.YPUCD == "FC") /* status is factory closed*/
        converseLib.validationFailed(221); /* warning-adding items to po in in*/
                                   /* status*/
        PC0EM001.XXXPRCNM = "PC0E140";
        exit stack;
      else
        if (VPOHDR02.YPUCD == "NC") /* Status is incomplete*/
          converseLib.validationFailed(222); /* warning-adding items to po in in*/
                                   /* status*/
          PC0EM001.XXXPRCNM = "PC0E140";
          exit stack;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the required fields starting at the bottom of the*/
   /* map.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Edit the customer number only if entered*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.KUCCOID != 0 /* Customer store/dept etc.*/
   || PC0EM001.KUMSTRID != 0
   || PC0EM001.XNXCD != 0) 
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    PC0E143();
  else
    PC0EW01.KUCCOID = 0;
    PC0EW01.KUMSTRID = 0;
    PC0EW01.XNXCD = 0;
  end

   /* ------------------------------------------------------------*/
   /* Edit the sales order number only FOR CERTAIN PO-TYPES*/
   /* ------------------------------------------------------------*/

  if (PC0EW03.XGPCD == "02")
    if (PC0EM001.PC4ORTYP == "QQ")
      if (PC0EM001.PC2CUXID != " ")
        if (VPOHDR02.PC3POIDT >= 19920709) /* if past so-req date*/

          PC0EW00.PC0EWDEF = "Y"; /* Data entered*/

          if (PC0EM001.OP1CUOID > 0) /* or S.O. entered anyway*/
            PC0E144(); /* Validate customer order nbr*/
          end
          PC0E142(); /* & Cust Xref*/

        end
      end
    else
      if (PC0EM001.PC2CUXID != " ")
        PC2REC.XGPCD = PC0EW00.XGPCD;
        PC2REC.PC2CUXID = PC0EM001.PC2CUXID;
        PC0E192(); /* validate cust xref*/
      end
    end
  end


  if (PC0EW03.XGPCD == "03") /* apparell*/
    if (PC0EM001.OP1CUOID > 0
     || PC0EM001.OP1NORID > 0
     || PC0EM001.PC2CUXID != " ")
      PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
      PC0E144(); /* Validate SO & Cust Xref*/
      if (converseVar.validationMsgNum != 0)
          /* NEXT SENTENCE*/
      else
        if (PC0EM001.OP1CUOID > 0
         || PC0EM001.OP1NORID > 0)
          PC0E190(); /* Validate single SO on this PO*/
        end
      end
    else
      if (PC0EM001.PC4ORTYP == "XD"
       || PC0EM001.PC4ORTYP == "XI"
       || PC0EM001.PC4ORTYP == "MM"
       || PC0EM001.PC4ORTYP == "MD"
       || PC0EM001.PC4ORTYP == "DS"
       || PC0EM001.PC4ORTYP == "DC"
       || PC0EM001.PC4ORTYP == "EM"
       || PC0EM001.PC4ORTYP == "TS"
       || PC0EM001.PC4ORTYP == "MX")
        if (PC0EM001.OP1CUOID == 0
         || PC0EM001.OP1NORID == 0)
          set PC0EM001.OP1CUOID cursor, bold;
          set PC0EM001.OP1NORID bold;
          converseLib.validationFailed(70); /* sales order missing*/
          PC0EM001.XXXPRCNM = "PC0E140";
        end
      end
    end
  end


  if (converseVar.validationMsgNum == 0)
    if (PC0EM001.OP1CUOID > 0
     || PC0EM001.OP1NORID > 0)
      if (PC0EM001.PC2CUXID == " ")
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(443);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the customer xref*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.PC2CUXID > " ") /* cust entered*/
    if (PC0EM001.PC4ORTYP == "CD"
     || PC0EM001.OP1CUOID == 0)
      PC0EW00.PC0EWDEF = "Y";
      PC0E142(); /* Validate customer xref*/
    end
  else
    if (PC0EW00.XGPCD == "02") /* customer must be entered for*/
      if (PC0EM001.PC4ORTYP == "SS" /* footwear saleman samples*/
       || PC0EM001.PC4ORTYP == "S3") /* ftwr side1 sales samples*/
        if (PC0EM001.XWHCD != "09")
          set PC0EM001.PC2CUXID cursor, bold;
          converseLib.validationFailed(213); /* cust & whse required msg*/
          PC0EM001.XXXPRCNM = "PC0E140";
        end
      else
        if (PC0EM001.PC4ORTYP == "CR") /* component rings*/
          set PC0EM001.PC2CUXID cursor, bold;
          converseLib.validationFailed(213); /* cust & whse required msg*/
          PC0EM001.XXXPRCNM = "PC0E140";
        end
      end
    else
      if (PC0EW00.XGPCD == "03")
        if (PC0EM001.PC2CUXID == " " /* custxref blank*/
         && PC0EW01.PC2CUXID == " "  /* custxref blank*/
         && PC0EM001.PC4ORTYP == "CD") /* apparel custom logo dummy*/
          set PC0EM001.PC2CUXID cursor, bold;
          converseLib.validationFailed(45); /* cust required msg*/
          PC0EM001.XXXPRCNM = "PC0E140";
        else
          if (PC0EM001.PC2CUXID != PC0EW01.PC2CUXID)
            PC0E142(); /* Validate customer xref*/
          end
        end
      end
    end
    PC0EW01.PC2CUXID = " ";
    PC0EW02.PC2CUXID = " ";
    PC0EW01.OP1PARTN = " ";
    PC0EW01.OP1CUOID = 0;
    PC0EW01.OP1NORID = 0;
    PC0EW02.OP1CUOID = 0;
    PC0EW02.OP1NORID = 0;
  end

   /* ------------------------------------------------------------*/
   /* Edit the transportation mode*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.YMTCD == " ") /* Trans mode not entered*/
    PC0EW03.YMTCD = " ";
    PC0EW02.YMTCD = " ";
    PC0EM001.YMTABRV = " ";
    set PC0EM001.YMTCD cursor, bold;
    converseLib.validationFailed(61);
    PC0EM001.XXXPRCNM = "PC0E140";
  else /* Trans mode entered*/
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.YMTCD != PC0EW03.YMTCD) /* and changed*/
      if (PC0EM001.YMTCD in YMTTBL.YMTCD
       && YMTTBL.XXXSTAT == "A")
        PC0EM001.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
        PC0EW03.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
        PC0EW03.YMTCD = PC0EM001.YMTCD;
        PC0EW02.YMTCD = PC0EM001.YMTCD;
      else
        PC0EM001.YMTABRV = " ";
        PC0EW03.YMTABRV = " ";
        set PC0EM001.YMTCD cursor, bold;
        converseLib.validationFailed(61);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  end

  if (PC0EM001.YMTCD == "AF"
   && PC0EM001.PC6AIRNB > 0
   && PC0EW03.XGPCD == "03")
    PC0E150();
  end

   /* ------------------------------------------------------------*/
   /* Edit the warehouse  and the warehouse/cust xref,*/
   /* distribution code combinations.*/
   /* ------------------------------------------------------------*/

  PC0ES30(); /* Warehouse/cust xref edits*/

   /* ------------------------------------------------------------*/
   /* if gpc = '03', additional edit if warehouse is blank, use*/
   /* '51' to find if valid for owner groups.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.XGPCD == "03")
    if (PC0EM001.XWHCD == " ") /* if blank, use '51'*/
      PC0EW00.XWHCD = "51";
      if (PC0EW00.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW00.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      else
        PC0EW00.XWHOWNGF = " "; /* owner group flag*/
        converseLib.validationFailed(59);
        PC0EM001.XXXPRCNM = "PC0E140";
        set PC0EM001.XWHCD cursor, bold;
        PC0EW01.XWHCD = " ";
        PC0EW01.XWHCD = " ";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If the Etal override date has been entered validate it*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.PC6OETAL != 0
   || PC0EM001.PC6OETAL != PC0EW01.PC6OETAL)

    set TA2REC empty; /* Initialize record*/
    TA2REC.TA2GRGA = PC0EM001.PC6OETAL;

    TA2REC.TA2GRTYP = "A"; /* Type*/

    TA2REC.TA2DTOPT = "GREGGREG";

    PC0E145(); /* Call to TA0040*/


    if (TA2REC.TA2RTNCD == 0)
      PC0EW01.PC6OETAL = PC0EM001.PC6OETAL;
    else
      PC0EW00.PC0EWEDT = PC0EM001.PC6OETAL;
      if (PC0EW00.PC0EWEMM > 12)
        set PC0EM001.PC6OETAL cursor, bold;
        converseLib.validationFailed(31);
        PC0EM001.XXXPRCNM = "PC0E140";
      else
        if (PC0EW00.PC0EWEDD > 31)
          set PC0EM001.PC6OETAL cursor, bold;
          converseLib.validationFailed(172);
          PC0EM001.XXXPRCNM = "PC0E140";
        else
          set PC0EM001.PC6OETAL cursor, bold;
          converseLib.validationFailed(38);
          PC0EM001.XXXPRCNM = "PC0E140";
        end
      end
    end
  else
    PC0EW01.PC6OETAL = 0;
  end

   /* ------------------------------------------------------------*/
   /* Edit the ETS date---- Required for apparel*/
   /* ------------------------------------------------------------*/


  if (PC0EM001.PC6ETSDT == 0)
    PC0EW01.PC6ETSDT = 0;
    PC0EW02.PC6ETSDT = 0;
    if (PC0EW00.XGPCD == "03") /* Apparel*/
      set PC0EM001.PC6ETSDT cursor, bold;
      converseLib.validationFailed(38);
      PC0EM001.XXXPRCNM = "PC0E140";
    end
  else
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.PC6ETSDT != PC0EW01.PC6ETSDT)

      PC0EW00.PC0EWCDT = PC0EM001.PC6ETSDT;
      set TA2REC empty; /* Initialize record*/
      TA2REC.TA2GRGA = PC0EM001.PC6ETSDT;

      TA2REC.TA2GRTYP = "A"; /* Type*/

      TA2REC.TA2DTOPT = "GREGGREG";

      PC0E145(); /* Call to TA0040*/

      if (TA2REC.TA2RTNCD == 0)
        PC0EW01.PC6ETSDT = PC0EM001.PC6ETSDT;
        PC0EW02.PC6ETSDT = PC0EM001.PC6ETSDT;
        PC0EW00.PC0EWMDT = PC0EM001.PC6ETSDT; /* Map date to WS*/

        if (PC0EW00.PC0EWAFF == "A" /* Function is add and*/
         && PC0EW00.XGPCD != "02"   /* not footwear and*/
         && PC0EW00.PC0EWMMM != PC0EW03.PC0EWDMO)
                                   /* mnth ne delivery mnth*/
          PC0EW01.PC6ETSDT = 0;
          PC0EW02.PC6ETSDT = 0;
          set PC0EM001.PC6ETSDT cursor, bold;
          converseLib.validationFailed(207);
          PC0EM001.XXXPRCNM = "PC0E140";
        else
          PC0EW00.PC0EWPDT = PCWREC.PC3POIDT;
          PC0EW00.PC0EWPCC = PC0EW00.PC0EWPCR;
          PC0EW00.PC0EWPYY = PC0EW00.PC0EWPYR;
          PC0EW00.PC0EWDMM = PC0EW00.PC0EWDMO;
          if (PC0EW00.PC0EWDMO < PC0EW00.PC0EWPMO)
            PC0EW00.PC0EWPCY = PC0EW00.PC0EWPCY + 1;
          end
          if (TA2REC.TA2GRCYM != PC0EW00.PC0EWPOC
           && PC0EW00.PC0EWAFF == "A")
            PC0EW01.PC6ETSDT = 0;
            PC0EW02.PC6ETSDT = 0;
            set PC0EM001.PC6ETSDT cursor, bold;
            converseLib.validationFailed(585);
            PC0EM001.XXXPRCNM = "PC0E140";
          else
            /* **********Y2K IN*****************************/
            PC0EW00.PC0EWFDT = VGVar.currentGregorianDate;
            if (PC0EW00.PC0EWFDT > TA2REC.TA2GRGG)
              set PC0EM001.PC6ETSDT cursor, bold;
              converseLib.validationFailed(409);
              PC0EM001.XXXPRCNM = "PC0E140";
            end
          end
          /* **********Y2K OUT****************************/
        end
      else
        PC0EW00.PC0EWEDT = PC0EM001.PC6ETSDT;
        if (PC0EW00.PC0EWEMM > 12)
          set PC0EM001.PC6ETSDT cursor, bold;
          converseLib.validationFailed(31);
          PC0EM001.XXXPRCNM = "PC0E140";
        else
          if (PC0EW00.PC0EWEDD > 31)
            set PC0EM001.PC6ETSDT cursor, bold;
            converseLib.validationFailed(172);
            PC0EM001.XXXPRCNM = "PC0E140";
          else
            set PC0EM001.PC6ETSDT cursor, bold;
            converseLib.validationFailed(38);
            PC0EM001.XXXPRCNM = "PC0E140";
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the RTA date--Required for footwear*/
   /* ------------------------------------------------------------*/


  if (PC0EM001.PC6RTADT == 0)
    PC0EW01.PC6RTADT = 0;
    if (PC0EW00.XGPCD == "01" /* whatever*/
     || PC0EW00.XGPCD == "07") /* footwear*/
      set PC0EM001.PC6RTADT cursor, bold;
      converseLib.validationFailed(38);
      PC0EM001.XXXPRCNM = "PC0E140";
    end
    if (PC0EW00.XGPCD == "02") /* footwear*/
      if (PC0EM001.PC4ORTYP == "QQ") /* B-grade*/
        PC0EW00.PC0EWYMD = VGVar.currentShortGregorianDate; /* today's date*/
        PC0EWFMM = PC0EWFMM + 3; /* add 3 months*/
        if (PC0EWFMM == 13)
          PC0EWFMM = 1; /* = january*/
          /* ***********Y2K IN*********************/
          if (PC0EWFYY == 99)
            PC0EWFYY = 00; /* for year 2000*/
          else
            PC0EWFYY = PC0EWFYY + 1; /* add 1 to year*/
          end
        else
          if (PC0EWFMM == 14)
            PC0EWFMM = 2; /* = february*/
            if (PC0EWFYY == 99)
              PC0EWFYY = 00; /* for year 2000*/
            else
              PC0EWFYY = PC0EWFYY + 1; /* add 1 to year*/
            end
          else
            if (PC0EWFMM == 15)
              PC0EWFMM = 3; /* = march*/
              if (PC0EWFYY == 99)
                PC0EWFYY = 00; /* for year 2000*/
              else
                PC0EWFYY = PC0EWFYY + 1; /* add 1 to year*/
              end
            end
          end
        end
        if (PC0EW00.PC0EWFMM == 02)
          if (PC0EW00.PC0EWFDD > 28)
            PC0EW00.PC0EWFDD = 28;
          end
        else
          if (PC0EW00.PC0EWFMM == 04
           || PC0EW00.PC0EWFMM == 06
           || PC0EW00.PC0EWFMM == 09
           || PC0EW00.PC0EWFMM == 11)
            if (PC0EW00.PC0EWFDD > 30)
              PC0EW00.PC0EWFDD = 30;
            end
          end
        end
        PC0EW00.PC0EWMYY = PC0EW00.PC0EWFYY;
        PC0EW00.PC0EWMMM = PC0EW00.PC0EWFMM;
        PC0EW00.PC0EWMDD = PC0EW00.PC0EWFDD;
        PC0EW01.PC6RTADT = PC0EW00.PC0EWMDT;
      else
        set PC0EM001.PC6RTADT cursor, bold;
        converseLib.validationFailed(38);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  else
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.PC6RTADT != PC0EW01.PC6RTADT)


      set TA2REC empty; /* Initialize record*/
      TA2REC.TA2GRGA = PC0EM001.PC6RTADT;

      TA2REC.TA2GRTYP = "A"; /* Type*/

      TA2REC.TA2DTOPT = "GREGGREG";

      PC0E145(); /* Call to TA0040*/

      if (TA2REC.TA2RTNCD == 0)
        PC0EW01.PC6RTADT = PC0EM001.PC6RTADT;
      else
        PC0EW00.PC0EWEDT = PC0EM001.PC6RTADT;
        if (PC0EW00.PC0EWEMM > 12)
          set PC0EM001.PC6RTADT cursor, bold;
          converseLib.validationFailed(31);
          PC0EM001.XXXPRCNM = "PC0E140";
        else
          if (PC0EW00.PC0EWEDD > 31)
            set PC0EM001.PC6RTADT cursor, bold;
            converseLib.validationFailed(172);
            PC0EM001.XXXPRCNM = "PC0E140";
          else
            set PC0EM001.PC6RTADT cursor, bold;
            converseLib.validationFailed(38);
            PC0EM001.XXXPRCNM = "PC0E140";
          end
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Edit unit of measure*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XUMCD == " ") /* Unit of measure entered*/
     /* Next sentence*/
  else /* UOM entered*/
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.XUMCD != PC0EW01.XUMCD) /* and changed*/
      if (PC0EM001.XUMCD in XUMTBL.XUMCD
       && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW01.XUMCD = PC0EM001.XUMCD;
        PC0EW02.XUMCD = PC0EM001.XUMCD;
      else
        set PC0EM001.XUMCD cursor, bold;
        converseLib.validationFailed(56);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  end





   /* ------------------------------------------------------------*/
   /* Edit the package type*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XPGCD == " ") /* Package type not entered*/
    PC0EW01.XPGCD = " ";
    PC0EW02.XPGCD = " ";
    set PC0EM001.XPGCD cursor, bold;
    converseLib.validationFailed(55);
    PC0EM001.XXXPRCNM = "PC0E140";
  else /* Package type entered*/
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.XPGCD != PC0EW01.XPGCD) /* and changed*/
      if (PC0EM001.XPGCD in XPGTBL.XPGCD
       && XPGTBL.XXXSTAT == "A")
        PC0EW01.XPGCD = PC0EM001.XPGCD;
        PC0EW02.XPGCD = PC0EM001.XPGCD;
      else
        set PC0EM001.XPGCD cursor, bold;
        converseLib.validationFailed(55);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the owner group code - everytime*/
   /* ------------------------------------------------------------*/


  if (PC0EM001.XOWCD != " ") /* Owner group code entered*/
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
  end

  if (PC0EM001.XOWCD == " " /* Owner group code not entered*/
   || PC0EM001.XOWCD == "00") /* default owner grp code*/
    PC0EM001.XOWCD = "00";
    PC0EW01.XOWCD = "00";
    PC0EW02.XOWCD = "00";
  end

  if (PC0EM001.XWHCD == " ") /* Warehouse not entered*/
    if (PC0EW00.XGPCD == "02") /* footwear only*/
      if (PC0EM001.XOWCD != PC0EW01.XOWCD) /* change occurred*/
        set PC0EM001.XOWCD cursor, bold;
        converseLib.validationFailed(119);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  else
    PC0EW00.XWHCD = PC0EM001.XWHCD;
  end

  if (converseVar.validationMsgNum == 0
   && PC0EM001.XOWCD != "00")
    PC0EW00.XOWCD = PC0EM001.XOWCD;
    if (PC0EW00.XOWKEY in XOWTBL.XOWKEY
     && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PC0EW01.XOWCD = PC0EM001.XOWCD;
      PC0EW02.XOWCD = PC0EM001.XOWCD;
    else
      set PC0EM001.XOWCD cursor, bold;
      converseLib.validationFailed(405);
      PC0EM001.XXXPRCNM = "PC0E140";
    end
  end

   /* ------------------------------------------------------------*/
   /* move in spec code*/
   /* ------------------------------------------------------------*/

  if (PC0EW01.PC2CUXID > " ") /* cust xref entered*/
    PC0EW01.PC2INSEG = PC2REC.PC2INSEG;
    PC0EW02.PC2INSEG = PC2REC.PC2INSEG;
  else
    PC0EW01.PC2INSEG = "000";
    PC0EW02.PC2INSEG = "000";
  end

   /* ------------------------------------------------------------*/
   /* Edit the dimension code*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XDMCD == " ") /* Dimension code not entered*/
    PC0EW01.XDMCD = " ";
    set PC0EM001.XDMCD cursor, bold;
    converseLib.validationFailed(53);
    PC0EM001.XXXPRCNM = "PC0E140";
  else
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    if (PC0EM001.XDMCD != PC0EW01.XDMCD) /* Changed*/
      if (PC0EM001.XDMCD in XDMTBL.XDMCD
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0EW01.XDMCD = PC0EM001.XDMCD;
        PC0EW02.XDMCD = PC0EM001.XDMCD;
      else
        set PC0EM001.XDMCD cursor, bold;
        converseLib.validationFailed(53);
        PC0EM001.XXXPRCNM = "PC0E140";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the Scheduler code field  for apparel*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.PG1SC4CD != PC0EW01.PG1SC4CD)
    PC0ES70(); /* ===> Verify Scheduler Code*/
  end

   /* ------------------------------------------------------------*/
   /* Edit the product style color and dimension.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.SY1STNBR == " ") /* Style not entered*/
    PC0EW01.SY1STNBR = " ";
    PC0EW01.SY2CLRID = "00 ";
    PC0EM001.SY2CLRID = "00 ";
    PC0EW01.XDMCD = "00 ";
    PC0EM001.SY2CLRID = "00";

    converseLib.validationFailed(52);
    PC0EM001.XXXPRCNM = "PC0E140";
    PC0EW00.PC0EWVPF = "N"; /* valid product flag*/
    set PC0EM001.SY1STNBR cursor, bold;
  else
    PC0EW00.PC0EWDEF = "Y"; /* Data entered*/
    PC0EW00.PC0EWVPF = "N"; /* Valid product flag*/
    set PG2REC empty;
    PG2REC.XGPCD = PC0EW00.XGPCD;
    PG2REC.SY1STNBR = PC0EM001.SY1STNBR;
    PG2REC.SY2CLRID = PC0EM001.SY2CLRID;
    PG2REC.XDMCD = PC0EM001.XDMCD;

    XSPG202();

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(52); /* Style/color is missing or invalid*/
      PC0EM001.XXXPRCNM = "PC0E140";
      set PC0EM001.SY1STNBR cursor, bold;
      set PC0EM001.SY2CLRID bold;
      set PC0EM001.XDMCD bold;
    else
      if (PC0EW00.XGPCD == "02"
       && PC4REC.PC4ORTYP == "CR") /* component ring po type*/
        if (PG2REC.XPLCD == "11") /* components product line code*/
          if (PG2REC.SY2RSTNB == "000000") /* root style*/
             /* the root style must have a valid product code*/
            converseLib.validationFailed(290); /* Style invalid for component ring po*/
                                   /* type*/
            PC0EM001.XXXPRCNM = "PC0E140";
            set PC0EM001.SY1STNBR cursor, bold;
            set PC0EM001.SY2CLRID bold;
            set PC0EM001.XDMCD bold;
          end
        else /* must have a component prod line code*/
          converseLib.validationFailed(290); /* Style invalid for component ring po*/
                                   /* type*/
          PC0EM001.XXXPRCNM = "PC0E140";
          set PC0EM001.SY1STNBR cursor, bold;
          set PC0EM001.SY2CLRID bold;
          set PC0EM001.XDMCD bold;
        end
      end

      if (PG2REC.XPRCD == "22" /* golf crested*/
       && PC4REC.PC4ORTYP != "EM") /* embroidered crested-t*/
        converseLib.validationFailed(470); /* Style invalid for the po type*/
        PC0EM001.XXXPRCNM = "PC0E140";
        set PC0EM001.SY1STNBR cursor, bold;
        set PC0EM001.SY2CLRID bold;
        set PC0EM001.XDMCD bold;
      end

      if (PC0EW00.XGPCD == "03")
        if (PC4REC.PC4ORTYP == "SD" /* Screener dummy*/
         || PC4REC.PC4ORTYP == "CD" /* Custom logo dummy*/
         || PC4REC.PC4ORTYP == "TS") /* tour screened*/
          if (PG2REC.PG2SCRFL != "S" /* Not a screened good*/
           && PG2REC.PG2SCRFL != "I") /* Not an interim product either*/
            converseLib.validationFailed(402); /* po type only valid for screened goods*/
            PC0EM001.XXXPRCNM = "PC0E140";
            set PC0EM001.SY1STNBR cursor, bold;
            set PC0EM001.SY2CLRID bold;
            set PC0EM001.XDMCD bold;
          end
        else
          if (PC4REC.PC4ORTYP == "EM" /* embroidered crested-t*/
           && PG2REC.XPRCD != "22")   /* golf crested*/
            converseLib.validationFailed(470); /* Style invalid for custom logo po type*/
            PC0EM001.XXXPRCNM = "PC0E140";
            set PC0EM001.SY1STNBR cursor, bold;
            set PC0EM001.SY2CLRID bold;
            set PC0EM001.XDMCD bold;
          end
        end
      end

                 /* edits for Spain*/

      if (VPOHDR02.XGPCD == "02"
       || VPOHDR02.XGPCD == "03")
        if (PC0EM001.PC4ORTYP != "SS"
         && PC0EM001.PC4ORTYP != "SX") /* exclude salesman sample*/
          if (PG2REC.XFCCD1 != "68"
           && PG2REC.XFCCD2 != "68"
           && PG2REC.XFCCD3 != "68"
           && PG2REC.XFCCD4 != "68"
           && PG2REC.XFCCD5 != "68"
           && PG2REC.XFCCD6 != "68")
            if (TSCREC.XCTCD == "SPAI"
             || TSCREC.XCTCD == "CNRY"
             || TSCREC.TSCLOCCD == "MO2"
             || TSCREC.TSCLOCCD == "MO3"
             || TSCREC.TSCLOCCD == "MO4") /* spain edits*/
              PC0EM001.XXXPRCNM = "PC0E140";
              set PC0EM001.PC2CUXID cursor, bold;
              set PC0EM001.SY1STNBR cursor, bold;
              set PC0EM001.SY2CLRID bold;
              set PC0EM001.XDMCD bold;
              converseLib.validationFailed(574);
              exit stack;
            end
          end
        end
      end
      if (converseVar.validationMsgNum != 52
       && converseVar.validationMsgNum != 290
       && converseVar.validationMsgNum != 402)
        PC0EW00.PC0EWVPF = "Y"; /* Valid product flag*/
        PC0EW01.SY1STNBR = PC0EM001.SY1STNBR;
        PC0EW02.SY1STNBR = PC0EM001.SY1STNBR;
        PC0EW02.SY1SSTNM = PG2REC.SY1SSTNM;
        PC0EW01.SY2CLRID = PC0EM001.SY2CLRID;
        PC0EW02.SY2CLRID = PC0EM001.SY2CLRID;
        PC0EW02.SY2CLRAB = PG2REC.SY2CLRAB;
      /* IF PC0EM001.XUMCD EQ ' ';*/
        PC0EM001.XUMCD = PG2REC.XUMCD;
        PC0EW01.XUMCD = PG2REC.XUMCD;
        PC0EW02.XUMCD = PG2REC.XUMCD;
      /* END;*/
        PC0EW01.XDMCD = PC0EM001.XDMCD;
        PC0EW02.XDMCD = PC0EM001.XDMCD;
      end


    end
  end


   /* ------------------------------------------------------------*/
   /* Edit the development style (only for footwear salesman*/
   /* samples.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 52) /* There is a valid style*/
    if (PC0EM001.PC0EMSTN != " "
     && PC0EM001.PC0EMSTN != PC0EW01.PC0EWSTN)
      if (PC0EW00.XGPCD == "02")
        if (VPOHDR02.PC4ORTYP == "SS"
         || VPOHDR02.PC4ORTYP == "S3")
          if (PC0EM001.PC0EMSTN != PG2REC.SY2RSTNB)
            converseLib.validationFailed(246); /* devel style not = root style*/
            set PC0EM001.PC0EMSTN cursor, bold;
          else
            PC0EW01.PC0EWSTN = PC0EM001.PC0EMSTN;
            PC0EW01.PC0EWSDC = PC0EM001.PC0EMSDC;
          end
        end
      else
        converseLib.validationFailed(248);
                                   /* Devel style invalid for gpc and ortyp*/
        PC0EM001.XXXPRCNM = "PC0E140";
        set PC0EM001.PC0EMSTN cursor, bold;
      end
    else
      PC0EW01.PC0EWSDC = 0;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that an apparel PO does not have multiple divisions.*/
   /* Verify that if the PO has not been printed the screen*/
   /* destination is the same as the other po destinations.*/

   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PC0EW00.XGPCD == "03")

      set VPOITM05 empty;
      VPOITM05.XGPCD = PC0EW00.XGPCD;
      VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD;
      VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR;

      PC0ES26(); /* Open cursor for VPOITM05*/

      PC0ES27(); /* Fetch first row*/

      if (converseVar.validationMsgNum == 0) /* No multiple division error*/
        if (SQLCA.VAGen_SQLCODE == 0) /* the fetch found a row*/
          if (VPOHDR02.PC3PRTIN != "P") /* PO has not been printed*/
            if (VPOITM05.PC2CUXID != PC0EM001.PC2CUXID)
              converseLib.validationFailed(245); /* Cannot have multiple destinations*/
              PC0EM001.XXXPRCNM = "PC0E140";
              set PC0EM001.PC2CUXID cursor, bold;
              /* ===> reset related data*/
              PC0EM001.OP1CUOID = 0;
              PC0EM001.OP1NORID = 0;
              PC0EM001.KUCCOID = 0;
              PC0EM001.KUMSTRID = 0;
              PC0EM001.XNXCD = 0;
            end
            if (VPOITM05.XWHCD != PC0EM001.XWHCD)
              converseLib.validationFailed(245);
              PC0EM001.XXXPRCNM = "PC0E140";
              set PC0EM001.XWHCD cursor, bold;
            end
          end
           /* allow only 1 style for certain apparel po types*/
          if (PC4REC.PC4ORTYP == "CO"
           || PC4REC.PC4ORTYP == "IR"
           || PC4REC.PC4ORTYP == "CT"
           || PC4REC.PC4ORTYP == "CD"
           || PC4REC.PC4ORTYP == "OR"
           || PC4REC.PC4ORTYP == "PS"
           || PC4REC.PC4ORTYP == "SS"
           || PC4REC.PC4ORTYP == "CR"
           || PC4REC.PC4ORTYP == "S6"
           || PC4REC.PC4ORTYP == "S7"
           || PC4REC.PC4ORTYP == "SX"
           || PC4REC.PC4ORTYP == "EM"
           || PC4REC.PC4ORTYP == "TS"
           || PC4REC.PC4ORTYP == "PX"
           || PC4REC.PC4ORTYP == "TO"
           || PC4REC.PC4ORTYP == "ID"
           || PC4REC.PC4ORTYP == "RF"
           || PC4REC.PC4ORTYP == "BA"
           || PC4REC.PC4ORTYP == "RD"
           || PC4REC.PC4ORTYP == "PM")
             /* next sentence-- these po types can have multiple styles*/
          else
            if (PC0EM001.SY1STNBR != VPOITM05.SY1STNBR)
              converseLib.validationFailed(319); /* Cannot have multiple styles*/
              PC0EM001.XXXPRCNM = "PC0E140";
              set PC0EM001.SY1STNBR cursor, bold;
            end
          end
        end
      end

      PC0ES28(); /* close cursor for VPOITM05*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify that a footwear salesman sample po has only one*/
   /* style per po.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PC0EW00.XGPCD == "02")
  /* *****************************************************/
  /* Removed SS PO from the following If clause*/
  /* PCF170 NREDDY 06/18/98*/
  /* *****************************************************/
      if (PC4REC.PC4ORTYP == "CR" /* component rings po type*/
       || PC4REC.PC4ORTYP == "S3") /* salesman sample po type(side1)*/

        set VPOITM05 empty;
        VPOITM05.XGPCD = PC0EW00.XGPCD;
        VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD;
        VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR;

        PC0ES26(); /* Open cursor for VPOITM05*/

        PC0ES27(); /* Fetch first row*/

        if (converseVar.validationMsgNum == 0) /* No sql error*/
          if (SQLCA.VAGen_SQLCODE == 0) /* the fetch found a row*/
            if (PC0EM001.SY1STNBR != VPOITM05.SY1STNBR
             || PC0EM001.SY2CLRID != VPOITM05.SY2CLRID)
              converseLib.validationFailed(319); /* Cannot have multiple styles*/
              PC0EM001.XXXPRCNM = "PC0E140";
              set PC0EM001.SY1STNBR cursor, bold;
              set PC0EM001.SY2CLRID bold;
            end
          end
        end
        PC0ES28(); /* close cursor for VPOITM05*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* For QQ PO's, edit that product is on PO only once*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.XGPCD == "02"
   && VPOHDR02.PC4ORTYP == "QQ")

    set VPOITM05 empty;
    VPOITM05.XGPCD = PC0EW00.XGPCD;
    VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD;
    VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR;
    VPOITM05.SY1STNBR = PC0EM001.SY1STNBR;
    VPOITM05.SY2CLRID = PC0EM001.SY2CLRID;
    VPOITM05.XDMCD = PC0EM001.XDMCD;
    VPOITM05.PC2CUXID = PC0EM001.PC2CUXID;
    VPOITM05.XQACD = PC0EM001.XQACD;

    PC0ES40(); /* read alternate  VPOITM05*/

    if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows found*/
      converseLib.validationFailed(504); /* Cannot have multiple styles*/
      PC0EM001.XXXPRCNM = "PC0E140";
      set PC0EM001.SY1STNBR cursor, bold;
    end
  end

   /* -----------------------------------------------------------*/
   /* Validate for SAP go live countries.*/
   /* check to see whether pc2rec.xctcd country is in pccttbl*/
   /* internal table (this table has entries of all ctry's*/
   /* where SAP has gone live and when each ctry sap goes live*/
   /* don't forget to add the entries to this internal table)*/
   /* if found then display the error message*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PC0EM001.PC2CUXID > " ")
      if (PC2REC.XCTCD in PCCTTBL.XCTCD
       && PC0EW00.XGPCD != "01" /* vramac*/
       && PC0EM001.PC2CUXID != "AAORF")
        converseLib.validationFailed(579);
        PC0EM001.XXXPRCNM = "PC0E140";
        set PC0EM001.PC2CUXID cursor, bold;
        exit stack;
      end
    else
      if (PC0EM001.XWHCD > " ")
        if (PC0EM001.XWHCD in PCCTTBL.XWHCD
         && PC0EW00.XGPCD != "01")
          converseLib.validationFailed(579);
          PC0EM001.XXXPRCNM = "PC0E140";
          set PC0EM001.XWHCD cursor, bold;
        end
      else
        converseLib.validationFailed(214);
        PC0EM001.XXXPRCNM = "PC0E140";
        set PC0EM001.XWHCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Edit the sizes*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWVPF == "Y" /* Valid product flag*/
   && PC0EW00.PC0EWVQF == "Y") /* Valid quality code*/

    PC0E146();

  end

   /* ------------------------------------------------------------*/
   /* If no errors--verify that a item row for this product*/
   /* does not exists (use the full key of the new item and*/
   /* a version number of 0.)*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)

    PC0E147(); /* Check for duplicate item*/

    PC0E149(); /* Check all item status codes*/

  end

   /* ------------------------------------------------------------*/
   /* Move non edited fields to display storage*/
   /* ------------------------------------------------------------*/

  PC0EW01.PC6TORIG = PC0EM001.PC6TORIG;
  PC0EW01.PC6AIRNB = PC0EM001.PC6AIRNB;
  PC0EW01.PC-NIKE-AFRGT-PCT = PC0EM001.PC-NIKE-AFRGT-PCT;
  PC0EW01.PC-FCTY-AFRGT-PCT = PC0EM001.PC-FCTY-AFRGT-PCT;
  PC0EW01.PC6NILRF = PC0EM001.PC6NILRF;
  PC0EW01.PC6CONNO = PC0EM001.PC6CONNO;
  PC0EW01.PC6MICHG = PC0EM001.PC6MICHG;
   /* MOVE PC0EM001.OP1CUPO TO PC0EW01.OP1CUPO;*/


  if (converseVar.validationMsgNum != 0)

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If the working storage size index fields are zero than no*/
   /* sizes were entered on the screen--so the second screen*/
   /* will display all the sizes. Obtain the size record at*/
   /* this point.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWFSI == 0
   && PC0EW00.PC0EWLSI == 0)

    PC0E148(); /* Get all sizes*/

  else
    if (PC0EW00.PC0EWFSI != 0
     && PC0EW00.PC0EWSEF == "N") /* Size edit flag*/
      PC0E146();
    end
  end

   /* ----------------- end of PC0E140 ---------------------------*/
end // end PC0E140

// validate PO
Function PC0E141()

   /* --------------------------------------------------------*/
   /* If the PO number has been entered validate it against*/
   /* the Database--load data to the map and obtain the*/
   /* PO type record.*/
   /* --------------------------------------------------------*/

  if (PC0EM001.PC3PONBR != 0 /* PO nbr entered*/
   && PC0EM001.PC3PONBR != PC0EW03.PC3PONBR)
    PC0EW00.PC0EWKCH = "Y"; /* key has changed*/
  else
    PC0EW00.PC0EWKCH = "N";
  end

  if (PC0EM001.PC3PONBR != 0) /* PO nbr entered*/

    set VPOHDR02 empty; /* Initialize record*/
    VPOHDR02.XGPCD = PC0EW00.XGPCD;
    /* MOVE PC0EM001.po-reg-cd TO VPOHDR02.po-reg-cd;*/
    VPOHDR02.PO-REG-CD = "01"; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0EM001.PC3PONBR;

    PC0E180(); /* Obtain PO header row*/

    set PC4REC empty;
    PC4REC.XGPCD = PC0EW00.XGPCD;
    PC4REC.PC4ORTYP = VPOHDR02.PC4ORTYP;

    PC0ES01(); /* Obtain the type record*/


    if (PC0EW00.PC0EWKCH == "Y") /* key has changed*/

      PC0EM001.YMTCD = "TR";

      if (PC0EW00.XGPCD == "02") /* footwear*/
        if (PC4REC.PC4ORTYP == "SS" /* salesman sample*/
         || PC4REC.PC4ORTYP == "CR" /* component rings*/
         || PC4REC.PC4ORTYP == "S3" /* salesman sample*/
         || PC4REC.PC4ORTYP == "PS" /* promo*/
         || PC4REC.PC4ORTYP == "S2") /* promo*/
          PC0EM001.YMTCD = "AF";
        end
      end

      if (PC0EW00.XGPCD == "03") /* apparel*/
        if (PC4REC.PC4ORTYP == "SS" /* salesman sample*/
         || PC4REC.PC4ORTYP == "SX" /* salesman sample*/
         || PC4REC.PC4ORTYP == "S7" /* salesman sample*/
         || PC4REC.PC4ORTYP == "PX" /* NIL Promo*/
         || PC4REC.PC4ORTYP == "MP") /* makeup-ind,diam-mkd,ppk*/
          PC0EM001.YMTCD = "AF";
        end
      end

      if (PC0EM001.YMTCD == "AF" /* air freight*/
       && PC0EM001.PC6AIRNB > 0  
       && PC0EW03.XGPCD == "03")
        PC0E150();

      else
        if (PC4REC.PC4ORTYP == "EM" /* embroidered crested-t*/
         || PC4REC.PC4ORTYP == "CD" /* custom logo dummy*/
         || PC4REC.PC4ORTYP == "TS" /* tour*/
         || PC4REC.PC4ORTYP == "LP") /* Local Product*/

         /* next sentence*/

        else
          set VFCTY003 empty;
          VFCTY003.XGPCD = PC0EW00.XGPCD;
          VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

          PC0ES02(); /* Access factory table*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (VFCTY003.FY1FRGN == "Y") /* OVerseas factory*/
              if (PC4REC.PC4ORTYP == "QQ" /* QQ potype-B grade*/
               && VFCTY003.XCTCD == "KORE") /* factory in Korea*/
                PC0EM001.YMTCD = "TR";
              else
                PC0EM001.YMTCD = "VL";
              end
            else
              if (VFCTY003.XCTCD != "USA" /* factory not USA and not offshore*/
               && PC0EW03.XGPCD == "03")  /* Apparel*/
                if (VFCTY003.XCTCD == "CANA") /* factory in Canada*/
                  PC0EM001.YMTCD = "TR";
                else
                  PC0EM001.YMTCD = "VL";
                end
              else
                /* next sentence*/
              end
            end
          end
        end
      end
      if (PC0EM001.YMTCD != " "
       && PC0EM001.YMTCD in YMTTBL.YMTCD)
        PC0EW03.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
        PC0EM001.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
      end

      if (PC0EM001.XWHCD == " ")
        if (PC4REC.PC4ORTYP == "QQ") /* for b-grade*/
          set VFCTY003 empty;
          VFCTY003.XGPCD = PC0EW00.XGPCD;
          VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

          PC0ES02(); /* Access factory table*/
          if (SQLCA.VAGen_SQLCODE == 0
           && VFCTY003.XCTCD == "KORE") /* korean factory*/
            PC0EM001.XWHCD = "15"; /* default whse to 15*/
          else
            PC0EM001.XWHCD = PC4REC.XWHCD;
          end
        end
      end
    end
    return;
  end

   /* --------------------------------------------------*/
   /* Validate that both the PO ID and the PO type*/
   /* have been entered (at this point no Po Number*/
   /* was entered. (Only apparel is not allowed to enter*/
   /* the PO ID and type)*/
   /* --------------------------------------------------*/

  if (PC0EW00.XGPCD == "03")
    converseLib.validationFailed(21); /* Data must be entered to process*/
                                   /* request*/
    PC0EM001.XXXPRCNM = "PC0E141";
    set PC0EM001.PC3PONBR cursor, bold;
    exit stack;
  end


  if (PC0EM001.PC4ORTYP == " ")
    converseLib.validationFailed(110); /* PO ID and PO type must be entered*/
    PC0EM001.XXXPRCNM = "PC0E141";
    set PC0EM001.PC4ORTYP cursor, bold;
  end

  if (PC0EM001.PC0EMPYR == " ")
    converseLib.validationFailed(110); /* PO ID and PO type must be entered*/
    PC0EM001.XXXPRCNM = "PC0E141";
    set PC0EM001.PC0EMPYR cursor, bold;
    set PC0EM001.PC0EMPMO bold;
    set PC0EM001.PC0EMDMO bold;
    set PC0EM001.FY1FCTYC bold;
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end

   /* ---------------------------------------------------*/
   /* Validate that the PO type exists. (At this point*/
   /* no PO has been entered and the PO type and*/
   /* PO ID will be validated.)*/
   /* --------------------------------------------------*/

  if (PC0EM001.PC4ORTYP != PC0EW03.PC4ORTYP
   || PC0EM001.PC0EMPMO != PC0EW03.PC0EWPMO
   || PC0EM001.PC0EMDMO != PC0EW03.PC0EWDMO
   || PC0EM001.PC0EMPYR != PC0EW03.PC0EWPYR
   || PC0EM001.FY1FCTYC != PC0EW03.FY1FCTYC)
    PC0EW00.PC0EWKCH = "Y"; /* key has changed*/
  else
    PC0EW00.PC0EWKCH = "N";
  end

  PC4REC.XGPCD = PC0EW00.XGPCD;
  PC4REC.PC4ORTYP = PC0EM001.PC4ORTYP;

  PC0ES01(); /* Obtain PO type row*/


   /* ------------------------------------------------------------*/
   /* validate the PO ID*/
   /* ------------------------------------------------------------*/



  PC0EW00.PC0EWAYR = PC0EM001.PC0EMPYR;
  PC0EW00.PC0EWYR1 = PC0EW00.PC0EWAY1;
  PC0EW00.PC0EWYR2 = PC0EW00.PC0EWAY2;

  PC0EW00.PC0EWPMO = PC0EM001.PC0EMPMO;
  PC0EW00.PC0EWDMO = PC0EM001.PC0EMDMO;

  PC0EW00.PC0EWPCR = 19;

  set VPOHDR02 empty; /* Initialize records*/

  VPOHDR02.XGPCD = PC0EW00.XGPCD;
  VPOHDR02.PO-REG-CD = "01";
  VPOHDR02.PC3POIDT = PC0EW00.PC0EWPDT;
  VPOHDR02.PC4ORTYP = PC4REC.PC4ORTYP;
  VPOHDR02.FY1FCTYC = PC0EM001.FY1FCTYC;

  PC0E181();

  if (SQLCA.VAGen_SQLCODE == -811)
    converseLib.validationFailed(21); /* Data must be entered to process*/
                                   /* request*/
    PC0EM001.XXXPRCNM = "PC0E141";
    set PC0EM001.PC3PONBR cursor, bold;
    exit stack;
  end

  if (PC0EW00.PC0EWKCH == "Y")
    if (PC0EW00.XGPCD == "02")
      if (PC4REC.PC4ORTYP == "SS" /* Salesman samples*/
       || PC4REC.PC4ORTYP == "CR" /* component rings*/
       || PC4REC.PC4ORTYP == "S3" /* ftwr side1 samples*/
       || PC4REC.PC4ORTYP == "S7" /* aprl side1 samples*/
       || PC4REC.PC4ORTYP == "SX") /* aprl samples*/
        PC0EM001.YMTCD = "AF";
      else
        set VFCTY003 empty;
        VFCTY003.XGPCD = PC0EW00.XGPCD;
        VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

        PC0ES02(); /* Access factory table*/

        if (SQLCA.VAGen_SQLCODE == 0
         && VFCTY003.FY1FRGN == "Y") /* Overseas factory*/
          if (PC4REC.PC4ORTYP == "QQ" /* QQ po type - B grade*/
           && VFCTY003.XCTCD == "KORE") /* factory in Korea*/
            PC0EM001.YMTCD = "TR"; /* set trans-mode to truck*/
          else
            if (PC4REC.PC4ORTYP == "LP") /* Local Product*/
              PC0EM001.YMTCD = "TR";
            else
              PC0EM001.YMTCD = "VL";
            end
          end
        end
      end
    end

    if (PC0EW03.YMTCD != " "
     && PC0EW03.YMTCD in YMTTBL.YMTCD)
      PC0EW03.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
      PC0EM001.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* Exit to display map*/
  end


end // end PC0E141

// Validate customer xref
Function PC0E142()
   /* ------------------------------------------------------------*/
   /* Only customer xref or order nbr or customer number can be*/
   /* entered.     Not true as of 03/04/92 sops chngs ,lsutto*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.KUCCOID != 0
   || PC0EM001.KUMSTRID != 0
   || PC0EM001.XNXCD != 0)
    if (PC0EM001.KUCCOID != PC0EW01.KUCCOID
     || PC0EM001.KUMSTRID != PC0EW01.KUMSTRID
     || PC0EM001.XNXCD != PC0EW01.XNXCD)
      converseLib.validationFailed(228);
      PC0EM001.XXXPRCNM = "PC0E142";
      set PC0EM001.KUCCOID cursor, bold;
      set PC0EM001.KUMSTRID bold;
      set PC0EM001.XNXCD bold;
    end
  end

  if (converseVar.validationMsgNum == 228)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Initialize record and format key*/

   /* ------------------------------------------------------------*/
  set PC2REC empty;

  PC2REC.XGPCD = PC0EW00.XGPCD;
  PC2REC.PC2CUXID = PC0EM001.PC2CUXID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (PC2REC.XXXSTAT != "A")
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(45); /* Customer xref status not active*/
        PC0EM001.XXXPRCNM = "PC0E142";
        exit stack;
      end
      if (PC0EM001.PC4ORTYP == "XI" /* international po types*/
       || PC0EM001.PC4ORTYP == "XD" /* division as a destination*/
       || PC0EM001.PC4ORTYP == "AD" /* asia pacific direct ship*/
       || PC0EM001.PC4ORTYP == "S8" /* division as a destination*/
       || PC0EM001.PC4ORTYP == "S9" /* division as a destination*/
       || PC0EM001.PC4ORTYP == "MX")
        if (PC2REC.YSMXDV != "20")
          set PC0EM001.PC2CUXID cursor, bold;
          converseLib.validationFailed(215); /* must have div 20 for this po type*/
          PC0EM001.XXXPRCNM = "PC0E142";
          exit stack;
        end
      end
      PC0EW01.PC2CUXID = PC0EM001.PC2CUXID;
      PC0EW02.PC2CUXID = PC0EM001.PC2CUXID;
      PC0EM001.KUCCOID = PC2REC.KUCCOID;
      PC0EW01.KUCCOID = PC2REC.KUCCOID;
      PC0EM001.KUMSTRID = PC2REC.KUMSTRID;
      PC0EW01.KUMSTRID = PC2REC.KUMSTRID;
      PC0EM001.XNXCD = PC2REC.XNXCD;
      PC0EW01.XNXCD = PC2REC.XNXCD;
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
      PC0EM001.PC2INSEG = PC2REC.PC2INSEG;
      PC0EW01.PC2INSEG = PC2REC.PC2INSEG;
      PC0EW02.PC2INSEG = PC2REC.PC2INSEG;

      XSPCS02();

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
        PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
      end

      PC0ES15(); /* Obtain Dtrans.vtsloc01*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.validationFailed(72); /* Cust xref missing or invalid*/
      PC0EM001.XXXPRCNM = "PC0E142";

      set PC0EM001.PC2CUXID cursor, bold;

      return; /* Return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E142"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2CUXID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E142";
  exit stack;
end // end PC0E142

// Validate customer/store/dept
Function PC0E143()

   /* ------------------------------------------------------------*/
   /* Initialize record and format key*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Intialize record*/

  PC2REC.XGPCD = PC0EW00.XGPCD;
  PC2REC.KUCCOID = PC0EM001.KUCCOID;
  PC2REC.KUMSTRID = PC0EM001.KUMSTRID;
  PC2REC.XNXCD = PC0EM001.XNXCD;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (PC2REC.XXXSTAT != "A")
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(45); /* Customer xref status not active*/
        PC0EM001.XXXPRCNM = "PC0E143";
        exit stack;
      end
      PC0EW01.KUCCOID = PC0EM001.KUCCOID;
      PC0EW01.KUMSTRID = PC0EM001.KUMSTRID;
      PC0EW01.XNXCD = PC0EM001.XNXCD;
      PC0EW01.PC2CUXID = PC2REC.PC2CUXID;
      PC0EW02.PC2CUXID = PC2REC.PC2CUXID;
      PC0EM001.PC2CUXID = PC2REC.PC2CUXID;
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      YSMREC.YSMSUMCD = PC2REC.YSMXDV;
      XSPCS02();
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
        PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
      end

      PC0ES15(); /* Obtain dtrans.vtsloc01*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(47); /* Co store/dept missing or invalid*/
      set PC0EM001.KUCCOID cursor, bold;
      set PC0EM001.KUMSTRID bold;
      set PC0EM001.XNXCD bold;
      return; /* Return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E143"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2CUXID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E143";
  exit stack;

end // end PC0E143

// Validate order number
Function PC0E144()

  if (PC0EM001.OP1CUOID == 0
   && PC0EM001.OP1NORID == 0
   && PC0EM001.PC2CUXID == " ")
    PC0EW01.PC2CUXID = " ";
    PC0EW02.PC2CUXID = " ";
    PC0EW01.OP1CUOID = 0;
    PC0EW02.OP1CUOID = 0;
    PC0EW01.OP1NORID = 0;
    PC0EW02.OP1NORID = 0;
    PC0EW00.PCWUSER4 = 0;
  end

   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Initialize record*/

  PC0EW00.PC0EWCID = PC0EM001.OP1CUOID;
  if (PC0EM001.OP1CUOID == 0)
    PC0EW00.OP1PARTN = " ";
  end
  OP1REC.OP1PARTN = PC0EW00.OP1PARTN;
  PC0EW00.OP1CUOID = PC0EM001.OP1CUOID;
  OP1REC.OP1CUOID = PC0EW00.OP1CUOID;
  PC0EW00.OP1NORID = PC0EM001.OP1NORID;
  OP1REC.OP1NORID = PC0EW00.OP1NORID;

  if (PC0EW03.XGPCD == "03")
    if (PC0EM001.PC4ORTYP == "XD"
     || PC0EM001.PC4ORTYP == "XI"
     || PC0EM001.PC4ORTYP == "MM"
     || PC0EM001.PC4ORTYP == "MD"
     || PC0EM001.PC4ORTYP == "DS"
     || PC0EM001.PC4ORTYP == "DC"
     || PC0EM001.PC4ORTYP == "EM"
     || PC0EM001.PC4ORTYP == "TS"
     || PC0EM001.PC4ORTYP == "MX")
      PC0E182(); /* Obtain order header row*/
    else
      if (PC0EM001.OP1CUOID > 0
       || PC0EM001.OP1NORID > 0)
        PC0E182(); /* Obtain order header row*/
      else
        /* next sentence - S.O. is not required.*/
      end
    end
  else
    PC0E182(); /* Obtain order header row*/
  end


   /* ------------------------------------------------------------*/
   /* Edit Co Id*/
   /* ------------------------------------------------------------*/
  if (PC0EM001.PC4ORTYP == "PX") /* Promo Exports*/
        /* next sentence - Because 'PX' doesn't require a S.O.*/
        /* - it can't get an order header row to*/
        /* - validate the customer number.  We'll*/
        /* - let it pass this error below.*/
  else
    if (PC0EM001.KUCCOID > 0)
      if (OP1REC.KUCCOID != PC0EM001.KUCCOID)
        set PC0EM001.KUCCOID cursor, bold;
        converseLib.validationFailed(47); /* invalid company/store msg*/
        PC0EM001.XXXPRCNM = "PC0E144";
        exit stack;
      end
    end
  end

  if (PC0EM001.KUMSTRID > 0)
    if (OP1REC.KUMSTRID != PC0EM001.KUMSTRID)
      set PC0EM001.KUMSTRID cursor, bold;
      converseLib.validationFailed(47); /* invalid company/store msg*/
      PC0EM001.XXXPRCNM = "PC0E144";
      exit stack;
    end
  end

  if (PC0EM001.XNXCD > 0)
    if (OP1REC.XNXCD != PC0EM001.XNXCD)
      set PC0EM001.XNXCD cursor, bold;
      converseLib.validationFailed(47);
      PC0EM001.XXXPRCNM = "PC0E144";
      exit stack;
    end
  end


   /* ------------------------------------------------------------*/
   /* Initialize the Customer xref record*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Intialize record*/

  PC2REC.XGPCD = PC0EW00.XGPCD;

  if (PC0EM001.PC2CUXID != " ")
    PC2REC.PC2CUXID = PC0EM001.PC2CUXID;
    PC0E183(); /* get co id from vprdcu*/
  else
    if (OP1REC.KUCCOID > 0)
      PC2REC.KUCCOID = OP1REC.KUCCOID;
      PC2REC.XNXCD = OP1REC.XNXCD;
      PC2REC.KUMSTRID = OP1REC.KUMSTRID;
      PC0E191(); /* get cust xref from vprdcu*/
    end
  end

end // end PC0E144

// Validate dates
Function PC0E145()


   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate the need dates.*/
   /* ------------------------------------------------------------*/


  TA2REC.TA2GRTYP = "A"; /* Type*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* Validate and get all greg formats*/

   /* ------------------------------------------------------------*/
   /* Call TA0040*/
   /* ------------------------------------------------------------*/


  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA2REC.TA2GRGA; /* date sent to validate*/

  PC0EM001.XXXPRCNM = "PC0E145"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0E145"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PC0E145

// Validate the entered sizes
Function PC0E146()
   /* ---------------------------------------------------------*/
   /* save anything entered in the size availability field*/
   /* ---------------------------------------------------------*/

  PC0EW01.PC6SZAVL = PC0EM001.PC6SZAVL;

   /* ---------------------------------------------------------*/
   /* If the sizes have changed set size indexes to zero.*/
   /* ---------------------------------------------------------*/

  if (PC0EM001.PC0EMFSZ != PC0EW01.PC0EWFSZ
   || PC0EM001.PC0EMLSZ != PC0EW01.PC0EWLSZ)
    PC0EW00.PC0EWFSI = 0; /* First size index save field*/
    PC0EW00.PC0EWLSI = 0; /* Last size index save field*/
  end


   /* ---------------------------------------------------------*/
   /* If no sizes have been entered exit procedure*/
   /* ---------------------------------------------------------*/

  if (PC0EM001.PC0EMLSZ == " "
   && PC0EM001.PC0EMFSZ == " ")
    return;
  end

   /* -----------------------------------------------------*/
   /* Check that if the last size is entered the first*/
   /* size has been also.*/
   /* -----------------------------------------------------*/

  if (PC0EM001.PC0EMLSZ != " "
   && PC0EM001.PC0EMFSZ == " ")
    converseLib.validationFailed(58); /* Size is missing or invalid*/
    PC0EM001.XXXPRCNM = "PC0E146";
    set PC0EM001.PC0EMFSZ cursor, bold;
    return;
  end

   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PC0EW00.XGPCD;
  PG3REC.SY1STNBR = PC0EW01.SY1STNBR;
  PG3REC.SY2CLRID = PC0EW01.SY2CLRID;
  PG3REC.XDMCD = PC0EW01.XDMCD;
  PG3REC.XQACD = "**"; /* Get either A or B grade sizes*/
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  PC0EW00.PC0EWFSI = 0; /* First size index save field*/
  PC0EW00.PC0EWIX1 = 1; /* Initialize index*/

  XSPG301(); /* Get valid sizes*/

   /* ---------------------------------------------------------*/
   /* Find the first size position in the table*/
   /* ---------------------------------------------------------*/

  while (PC0EW00.PC0EWIX1 <= 40 /* Check for all 40 sizes or*/
   && PC0EW00.PC0EWFSI == 0) /* first size index value found*/

    if (PC0EM001.PC0EMFSZ == PG3REC.SY4IDDSC[PC0EWIX1])
      PC0EW00.PC0EWFSI = PC0EW00.PC0EWIX1;
    else
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    end
  end

  if (PC0EW00.PC0EWIX1 > 40) /* First size was not found*/
    set PC0EM001.PC0EMFSZ cursor, bold;
    converseLib.validationFailed(58);
    PC0EM001.XXXPRCNM = "PC0E146";
    return;
  end
   /* ---------------------------------------------------------*/
   /* Find the second size position in the table (if a*/
   /* second size has been entered).*/
   /* ---------------------------------------------------------*/


  PC0EW00.PC0EWIX1 = 1; /* Initialize index*/
  PC0EW00.PC0EWLSI = 0; /* Last size index save field*/


  if (PC0EM001.PC0EMLSZ == " ") /* No last size entered*/
    PC0EW00.PC0EWLSI = PC0EW00.PC0EWFSI; /* Last size = first size*/
  else /* Last size entered*/
    while (PC0EW00.PC0EWIX1 <= 40
     && PC0EW00.PC0EWLSI == 0)

      if (PC0EM001.PC0EMLSZ == PG3REC.SY4IDDSC[PC0EWIX1])
        PC0EW00.PC0EWLSI = PC0EW00.PC0EWIX1;
      else
        PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
      end
    end
  end

  if (PC0EW00.PC0EWIX1 > 40) /* second size was not found*/
    set PC0EM001.PC0EMLSZ cursor, bold;
    converseLib.validationFailed(58);
    PC0EM001.XXXPRCNM = "PC0E146";
    return;
  end


  if (PC0EM001.PC0EMLSZ != " ")
    if (PC0EW00.PC0EWLSI <= PC0EW00.PC0EWFSI)
      converseLib.validationFailed(63); /* Last size < first size*/
      PC0EM001.XXXPRCNM = "PC0E146";
      set PC0EM001.PC0EMLSZ cursor, bold;
    end
  end

  PC0EW01.PC0EWFSZ = PC0EM001.PC0EMFSZ;
  PC0EW01.PC0EWLSZ = PC0EM001.PC0EMLSZ;

  if (converseVar.validationMsgNum != 0)
    PC0EW00.PC0EWSEF = "N"; /* Size edit flag*/
  else
    PC0EW00.PC0EWSEF = "Y";
  end

end // end PC0E146

// Check for Duplicate item
Function PC0E147()

   /* ------------------------------------------------------------*/
   /* Format the item key and select a row. If not found*/
   /* ezertn.  If a row exists--indicate a duplicate item and*/
   /* ezeflo to display error message.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  set VPOITM05 empty;


  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOITM05.SY1STNBR = PC0EW01.SY1STNBR;
  VPOITM05.SY2CLRID = PC0EW01.SY2CLRID;
  VPOITM05.XDMCD = PC0EW01.XDMCD;
  VPOITM05.XQACD = PC0EW01.XQACD;
  VPOITM05.PC2INSEG = PC0EW01.PC2INSEG;
  VPOITM05.XOWCD = PC0EW01.XOWCD;
  VPOITM05.XPGCD = PC0EW01.XPGCD;
  VPOITM05.XUMCD = PC0EW01.XUMCD;
  VPOITM05.YMTCD = PC0EW03.YMTCD;
  VPOITM05.XWHCD = PC0EW01.XWHCD;
  VPOITM05.PC2CUXID = PC0EW01.PC2CUXID;
  VPOITM05.YSMXDV = PC0EW03.YSMXDV;
  VPOITM05.PC6CXNBR = 0;

  PC0EW00.PC0EWFDT = 0;

   /* **********Y2K IN****************/
  if (PC0EW01.PC6ETSDT != 0)
   /* MOVE 19 TO PC0EW00.PC0EWFCT;*/
    PC0EW00.PC0EWMDT = PC0EW01.PC6ETSDT;
    if (PC0EW00.PC0EWMYY > 57)
      PC0EW00.PC0EWFCT = 19;
    else
      PC0EW00.PC0EWFCT = 20;
    end
    PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM;
    PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
    PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
    VPOITM05.PC6ETSDT = PC0EW00.PC0EWFDT;
    VPOITM05.PC6OETS = PC0EW00.PC0EWFDT;
  end
  PC0EW00.PC0EWFDT = 0;
  if (PC0EW01.PC6RTADT != 0)
   /* MOVE 19 TO PC0EW00.PC0EWFCT;*/
    PC0EW00.PC0EWMDT = PC0EW01.PC6RTADT;
    if (PC0EW00.PC0EWMYY > 57)
      PC0EW00.PC0EWFCT = 19;
    else
      PC0EW00.PC0EWFCT = 20;
    end
    PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM;
    PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
    PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
    VPOITM05.PC6RTADT = PC0EW00.PC0EWFDT;
  end
   /* **********Y2K OUT***************/



  set PCYREC empty;
  PCYREC.PCYFUNC = "S ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (VPOITM05.PC6STAT == "OP")
        converseLib.validationFailed(62); /* Item already exists*/
        PC0EM001.XXXPRCNM = "PC0E147";
        set PC0EM001.SY1STNBR cursor, bold;
      else
        converseLib.validationFailed(148); /* Item is closed etc.*/
        PC0EM001.XXXPRCNM = "PC0E147";
        set PC0EM001.SY1STNBR cursor, bold;
      end
      exit stack;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E147"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E147";
  exit stack;

end // end PC0E147

// Get all the sizes
Function PC0E148()

   /* ---------------------------------------------------------*/
   /* No sizes have been entered--get the full range*/
   /* ---------------------------------------------------------*/

   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty; /* Initialize record*/

  PG3REC.XGPCD = PC0EW00.XGPCD;
  PG3REC.SY1STNBR = PC0EW01.SY1STNBR;
  PG3REC.SY2CLRID = PC0EW01.SY2CLRID;
  PG3REC.XDMCD = PC0EW01.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301();


   /* ---------------------------------------------------------*/
   /* Find the first size position in the table*/
   /* ---------------------------------------------------------*/

  PC0EW00.PC0EWIX1 = 1; /* Initialize index*/
  PC0EW00.PC0EWFSI = 0; /* First size index save field*/

  while (PC0EW00.PC0EWIX1 <= 40
   && PC0EW00.PC0EWFSI == 0)

    if (PG3REC.SY4IDDSC[PC0EWIX1] != " ")
      PC0EW00.PC0EWFSI = PC0EW00.PC0EWIX1;
    else
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    end
  end


   /* ---------------------------------------------------------*/
   /* Set second size position to max.*/
   /* ---------------------------------------------------------*/

  PC0EW00.PC0EWLSI = 40;


end // end PC0E148

// Check all items status codes
Function PC0E149()

   /* ------------------------------------------------------------*/
   /* Select set on all the items using the GPC code, the PO*/
   /* number and the product key (exclude ets and mode)*/
   /* For each of the items fetched the following checks will*/
   /* be made.*/
   /* ------------------------------------------------------------*/
    /* if the items status code is = 'op'*/
       /* set the open flag  to 'y'*/
    /* else*/
    /* if the items status code is = 'cl'*/
       /* set the close flag  to 'n'*/
    /* else*/
    /* if the items status code is = 'nc'*/
       /* set the close flag  to 'y'*/
    /* else*/
    /* if the items status code is = 'fc'*/
       /* set the close flag  to 'y'*/
    /* else*/
    /* if the items status code is = 'cx'*/
       /* set the cancel flag  to 'y'*/
    /* end*/

    /* If the ETS and the MODE on any item from select set equal*/
        /* the ets and mode on the new item*/
      /* save the plan NUMBER (this will be used*/
      /* as the plan number for the new PO item.)*/
    /* end*/

   /* if the open flag is eq to 'n'*/
     /* and the close flag is equal to 'y'*/
       /* ERROR: ALL PLANS FOR THIS PRODUCT*/
              /* ARE CLOSED AND OR CANCELLED*/
   /* END*/
   /* ------------------------------------------------------------*/


  PC0EW00.PC6PLAN = 0;
                                   /* Init working storage plant # to zeros*/
  PC0EW00.PC0EWIOF = "N"; /* Item open flag*/
  PC0EW00.PC0EWICF = "N"; /* Item close flag*/
  PC0EW00.PC0EWICN = "N"; /* Item cancel flag*/
  PC0EW00.PC0EWCRF = "N"; /* Cursor flag*/

   /* ************Y2K IN******************/
   /* MOVE 19 TO PC0EW00.PC0EWFCT;      /* 19 to century*/

  PC0EW00.PC0EWMDT = PC0EW01.PC6ETSDT; /* ETS date to WS mmddyy*/
  if (PC0EW00.PC0EWMYY > 57)
    PC0EW00.PC0EWFCT = 19;
  else
    PC0EW00.PC0EWFCT = 20;
  end
   /* **********Y2K OUT********************/
  PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM; /* Format to ccyymmdd*/
  PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
  PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
  PC0EW00.PC6ETSDT = PC0EW00.PC0EWFDT;
  PC0EW00.PC0EWMDT = PC0EW01.PC6RTADT; /* RTA date to WS mmddyy*/
   /* **********Y2K IN*********************/
  if (PC0EW00.PC0EWMYY > 57)
    PC0EW00.PC0EWFCT = 19;
  else
    PC0EW00.PC0EWFCT = 20;
  end
   /* **********Y2K OUT********************/
  PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM; /* Format to ccyymmdd*/
  PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
  PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
  PC0EW00.PC6RTADT = PC0EW00.PC0EWFDT;


  set VPOITM05 empty;

  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOITM05.YSMXDV = PC0EW03.YSMXDV;
  VPOITM05.SY1STNBR = PC0EW01.SY1STNBR;
  VPOITM05.SY2CLRID = PC0EW01.SY2CLRID;
  VPOITM05.XDMCD = PC0EW01.XDMCD;
  VPOITM05.XQACD = PC0EW01.XQACD;
  VPOITM05.XOWCD = PC0EW01.XOWCD;
  VPOITM05.PC2INSEG = PC0EW01.PC2INSEG;
  VPOITM05.XPGCD = PC0EW01.XPGCD;
  VPOITM05.XUMCD = PC0EW01.XUMCD;
  VPOITM05.XPRCD = "*";
  VPOITM05.XPLCD = "*";
  VPOITM05.XPCCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XWHCD = "*";
  VPOITM05.PC6XCTCD = "*";
  VPOITM05.PC2CUXID = "*";
  VPOITM05.PC6STAT = "*";


  PC0ES22(); /* Open cursor for item*/

  PC0ES23(); /* Fetch first item*/

  while (PC0EW00.PC0EWCRF != "Y") /* If there are items*/

    PC0ES24(); /* Check item status*/

    PC0ES23(); /* Fetch next item*/

  end

  PC0ES25(); /* Close cursor for PO item*/

  if (PC0EW00.PC0EWIOF == "N" /* There is no open PO item*/
   && PC0EW00.PC0EWICF == "Y") /* The other PO items are closed*/
    converseLib.validationFailed(147); /* All plans for this product are closed or*/
     /* cancelled*/
  end

  if (PC0EW00.PC0EWFDT == VPOITM05.PC6ETSDT
   && PC0EM001.YMTCD == VPOITM05.YMTCD)
    PC0EW00.PC6PLAN = VPOITM05.PC6PLAN;
  end

end // end PC0E149

// verify air freight percents
Function PC0E150()
   /* ------------------------------------------------------------*/
    /* edit air freight percents.*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.PC-NIKE-AFRGT-PCT > 0
   || PC0EM001.PC-FCTY-AFRGT-PCT > 0)
                                   /* ====> NEXT STATEMENT*/
  else
    PC0EM001.XXXPRCNM = "PC0E150"; /* Module identification*/
    set PC0EM001.PC-NIKE-AFRGT-PCT cursor, bold; /* Highlight*/
    converseLib.validationFailed(510); /* Indicate missing or invalid*/
    return;
  end

   /* ------------------------------------------------------------*/
    /* Air Freight Percents are required.  If both are entered they*/
    /* must total 100.  If only one is entered the other value is*/
    /* calculated.*/
   /* ------------------------------------------------------------*/

  PC0EW-AFRGT-CALC-AREA = PC0EM001.PC-NIKE-AFRGT-PCT + PC0EM001.PC-FCTY-AFRGT-PCT;

  if (PC0EW-AFRGT-CALC-AREA == 100)
     /* continue*/
  else
    if (PC0EW-AFRGT-CALC-AREA > 100
     || (PC0EW-AFRGT-CALC-AREA < 100
     && PC0EM001.PC-NIKE-AFRGT-PCT > 0
     && PC0EM001.PC-FCTY-AFRGT-PCT > 0))
      PC0EM001.XXXPRCNM = "PC0E150"; /* Module identification*/
      set PC0EM001.PC-NIKE-AFRGT-PCT cursor, bold; /* Highlight*/
      converseLib.validationFailed(522); /* Indicate pcts do not add to 100*/
      return;
    else
      if (PC0EM001.PC-NIKE-AFRGT-PCT > 0)
        PC0EM001.PC-FCTY-AFRGT-PCT = 100 - PC0EM001.PC-NIKE-AFRGT-PCT;
      else
        PC0EM001.PC-NIKE-AFRGT-PCT = 100 - PC0EM001.PC-FCTY-AFRGT-PCT;
      end
    end
  end

  PC0EW01.PC-NIKE-AFRGT-PCT = PC0EM001.PC-NIKE-AFRGT-PCT;
  PC0EW01.PC-FCTY-AFRGT-PCT = PC0EM001.PC-FCTY-AFRGT-PCT;

   /* **                                                        ***/
   /* ********************** End of pc0e150************************/
end // end PC0E150

// Process valid input request
Function PC0E160()

   /* --------------------------------------------------------*/
   /* Format and move the ETS or RTA date to storage*/
   /* --------------------------------------------------------*/



  PC0EW00.PC0EWMDT = 0;

   /* **************Y2K IN***************************/
  if (PC0EW01.PC6ETSDT != 0)
   /* MOVE 19 TO PC0EW00.PC0EWFCT;    /* 19 to century*/
    PC0EW00.PC0EWMDT = PC0EW01.PC6ETSDT; /* ETS date to WS mmddyy*/
    if (PC0EW00.PC0EWMYY > 57)
      PC0EW00.PC0EWFCT = 19;
    else
      PC0EW00.PC0EWFCT = 20;
    end
   /* **********Y2K OUT******************/
    PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM; /* Format to ccyymmdd*/
    PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
    PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
    PC0EW00.PC6ETSDT = PC0EW00.PC0EWFDT;
    if (PC0EW00.XGPCD == "03")
      PC0EW00.PC6OETS = PC0EW00.PC0EWFDT;
      PC0EW00.PC6PETS = 0;
    else
      PC0EW00.PC6OETS = 0;
      PC0EW00.PC6PETS = 0;
    end
  else
    PC0EW00.PC6OETS = 0;
    PC0EW00.PC6PETS = 0;
    PC0EW00.PC6ETSDT = 0;
  end

  if (PC0EW01.PC6RTADT != 0)
    PC0EW00.PC0EWMDT = PC0EW01.PC6RTADT; /* RTA date to WS mmddyy*/
   /* **************Y2K IN*****************/
   /* MOVE 19 TO PC0EW00.PC0EWFCT;    /* 19 to century*/
    if (PC0EW00.PC0EWMYY > 57)
      PC0EW00.PC0EWFCT = 19;
    else
      PC0EW00.PC0EWFCT = 20;
    end
   /* **************Y2K OUT****************/
    PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM; /* Format to ccyymmdd*/
    PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
    PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
    PC0EW00.PC6RTADT = PC0EW00.PC0EWFDT;
  else
    PC0EW00.PC6RTADT = 0;
  end

   /* --------------------------------------------------------*/
   /* Set screen flag to display screen 2*/
   /* --------------------------------------------------------*/

  PC0EW00.PC0EWSSF = "2";

end // end PC0E160

// Obtain PO row with PO nbr
Function PC0E180()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PC0ES03(); /* Move Header data to map*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(69);
      PC0EM001.XXXPRCNM = "PC0E180";
      set PC0EM001.PC3PONBR cursor, bold;
      PC0EM001.PC4ORTYP = " ";
      PC0EM001.PC0EMPYR = " ";
      PC0EM001.PC0EMPMO = "  ";
      PC0EM001.PC0EMDMO = " ";
      PC0EM001.FY1FCTYC = " ";
      PC0EM001.PC4SDESC = " ";
      exit stack; /* Exit to display map*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0EM001.XXXPRCNM = "PC0E180";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0EM001.XXXPRCNM = "PC0E180";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E180"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E180";
  exit stack;

end // end PC0E180

// Obtain PO row with PO ID
Function PC0E181()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  set PCYREC empty;
  PCYREC.PCYFUNC = "SA";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PC0ES03(); /* Move header data to map*/
      PC0EM001.PC3PONBR = VPOHDR02.PC3PONBR;
      PC0EW01.PC3BUYMO = VPOHDR02.PC3BUYMO;

      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* Multiple rows found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(69);
      set PC0EM001.PC0EMPYR cursor, bold;
      set PC0EM001.PC0EMPMO bold;
      set PC0EM001.PC0EMDMO bold;
      set PC0EM001.FY1FCTYC bold;
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E181"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0EW00.PC0EWKEY = VPOHDR02.PC3POIDT;
  TA1REC.TA1TBLKE = PC0EW00.PC0EWKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E181";
  exit stack;

end // end PC0E181

// Obtain order header row
Function PC0E182()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      PC0EW01.OP1CUPO = OP1REC.OP1CUPO;
      PC0ESE1(); /* verify product on so*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(70); /* sales order missing or invalid msg*/
      PC0EM001.XXXPRCNM = "PC0E182";
      set PC0EM001.OP1CUOID cursor, bold;
      set PC0EM001.OP1NORID bold;
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E182"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "V0RHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E182";
  exit stack;

end // end PC0E182

// Edit Order number cust xref
Function PC0E183()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (PC2REC.XXXSTAT != "A")
        PC0EM001.XXXPRCNM = "PC0E183";
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(45); /* Customer xref status not active*/
        exit stack;
      end
      if (PC0EM001.PC2CUXID == " ")
        PC0EM001.PC2CUXID = PC2REC.PC2CUXID;
      else
        if (OP1REC.KUCCOID > 0)
          if (OP1REC.KUCCOID != PC2REC.KUCCOID)
            PC0EM001.XXXPRCNM = "PC0E183";
            set PC0EM001.PC2CUXID cursor, bold;
            converseLib.validationFailed(83); /* SO customer not equal to Xref Cust.*/
            exit stack;
          end
          if (PC0EW03.XGPCD == "03"
           && (PC0EM001.PC4ORTYP == "XD"
           || PC0EM001.PC4ORTYP == "XI"
           || PC0EM001.PC4ORTYP == "EM"
           || PC0EM001.PC4ORTYP == "TS"
           || PC0EM001.PC4ORTYP == "MX"))
            if (OP1REC.KUMSTRID != PC2REC.KUMSTRID)
              PC0EM001.XXXPRCNM = "PC0E183";
              set PC0EM001.PC2CUXID cursor, bold;
              converseLib.validationFailed(83); /* SO customer not equal to Xref Cust.*/
              exit stack;
            end
            if (OP1REC.XNXCD != PC2REC.XNXCD)
              PC0EM001.XXXPRCNM = "PC0E183";
              set PC0EM001.PC2CUXID cursor, bold;
              converseLib.validationFailed(83); /* SO customer not equal to Xref Cust.*/
              exit stack;
            end
          end
        end
      end
      PC0EW01.PC2CUXID = PC2REC.PC2CUXID;
      PC0EW02.PC2CUXID = PC2REC.PC2CUXID;
      PC0EM001.KUCCOID = PC2REC.KUCCOID;
      PC0EW01.KUCCOID = PC2REC.KUCCOID;
      PC0EM001.KUMSTRID = PC2REC.KUMSTRID;
      PC0EW01.KUMSTRID = PC2REC.KUMSTRID;
      PC0EM001.XNXCD = PC2REC.XNXCD;
      PC0EW01.XNXCD = PC2REC.XNXCD;
      PC0EW01.OP1CUOID = PC0EM001.OP1CUOID;
      PC0EW01.OP1NORID = PC0EM001.OP1NORID;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      YSMREC.YSMSUMCD = PC2REC.YSMXDV;
      XSPCS02();
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
        PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
      end

      PC0ES15(); /* Obtain drtrans.vtsloc01*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.validationFailed(72); /* Customer # not on cust xref file*/

      set PC0EM001.OP1CUOID cursor, bold;
      set PC0EM001.OP1NORID bold;
      set PC0EM001.XNXCD bold;

      return; /* Return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E183"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2CUXID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E183";
  exit stack;

   /* ---------------- end of PC0E183 ----------------------------*/
end // end PC0E183

// Get Po hdr po type rows
Function PC0E184()
  set VPOHDR02 empty; /* Initialize record*/
  VPOHDR02.XGPCD = PC0EW00.XGPCD;
   /* MOVE pC0Em001.PO-REG-CD TO VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PO-REG-CD = "01"; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC0EM001.PC3PONBR;

  PC0E180(); /* Obtain PO header row*/

  set PC4REC empty;
  PC4REC.XGPCD = PC0EW00.XGPCD;
  PC4REC.PC4ORTYP = VPOHDR02.PC4ORTYP;

  PC0ES01(); /* Obtain the type record*/

end // end PC0E184

// Verify single SO for a PO Nbr
Function PC0E190()
   /* ------------------------------------------------------------*/
   /* Verify that an apparel PO does not have multiple divisions.*/

   /* Verify that if the PO has not been printed the screen*/
   /* destination is the same as the other po destinations.*/

   /* Verify that apparel may have only on S.O. Nbr per*/
   /* P.O. Nbr*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;
  VPOITM05.XGPCD = PC0EW00.XGPCD;
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR;
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/

  PC0ES26(); /* Open cursor for VPOITM05*/

  PC0ES27(); /* Fetch first row*/

  while (SQLCA.VAGen_SQLCODE == 0 /* the fetch found a row*/
   && converseVar.validationMsgNum == 0) /* No multiple division error*/
    if (VPOITM05.PC6STAT != "CX")
      if (VPOITM05.PC2CUXID != PC0EM001.PC2CUXID)
        converseLib.validationFailed(458); /* Cannot have multiple destinations*/
        PC0EM001.XXXPRCNM = "PC0E190";
        set PC0EM001.PC2CUXID cursor, bold;
        /* ===> reset related data*/
        PC0EM001.OP1CUOID = 0;
        PC0EM001.OP1NORID = 0;
        PC0EM001.KUCCOID = 0;
        PC0EM001.KUMSTRID = 0;
        PC0EM001.XNXCD = 0;
      end
      if (converseVar.validationMsgNum == 0)
        if (VPOITM05.OP1CUOID != PC0EM001.OP1CUOID
         || VPOITM05.OP1NORID != PC0EM001.OP1NORID)
          converseLib.validationFailed(451);
          set PC0EM001.OP1CUOID cursor, bold;
          set PC0EM001.OP1NORID bold;
          PC0EM001.XXXPRCNM = "PC0E190";
        end
      end
    end
    PC0ES27(); /* Fetch Next Row*/
  end

  PC0ES28(); /* close cursor for VPOITM05*/

end // end PC0E190

// get cust xref row
Function PC0E191()

   /* ------------------------------------------------------------*/
   /* Select ALT a unique row to get the co xref*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (PC2REC.XXXSTAT != "A")
        PC0EM001.XXXPRCNM = "PC0E191";
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(45); /* Customer xref status not active*/
        exit stack;
      end
      if (PC0EM001.PC2CUXID == " ")
        PC0EM001.PC2CUXID = PC2REC.PC2CUXID;
      end
      PC0EW01.PC2CUXID = PC2REC.PC2CUXID;
      PC0EW02.PC2CUXID = PC2REC.PC2CUXID;
      PC0EM001.KUCCOID = PC2REC.KUCCOID;
      PC0EW01.KUCCOID = PC2REC.KUCCOID;
      PC0EM001.KUMSTRID = PC2REC.KUMSTRID;
      PC0EW01.KUMSTRID = PC2REC.KUMSTRID;
      PC0EM001.XNXCD = PC2REC.XNXCD;
      PC0EW01.XNXCD = PC2REC.XNXCD;
      PC0EW01.OP1CUOID = PC0EM001.OP1CUOID;
      PC0EW01.OP1NORID = PC0EM001.OP1NORID;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      YSMREC.YSMSUMCD = PC2REC.YSMXDV;
      XSPCS02();
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
        PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
      end

      PC0ES15(); /* Obtain drtrans.vtsloc01*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.validationFailed(72); /* Customer # not on cust xref file*/

      set PC0EM001.OP1CUOID cursor, bold;
      set PC0EM001.OP1NORID bold;
      set PC0EM001.XNXCD bold;

      return; /* Return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E191"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2CUXID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E191";
  exit stack;
end // end PC0E191

// validate cust xref
Function PC0E192()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (PC2REC.XXXSTAT != "A")
        PC0EM001.XXXPRCNM = "PC0E192";
        set PC0EM001.PC2CUXID cursor, bold;
        converseLib.validationFailed(45); /* Customer xref status not active*/
        exit stack;
      end
      PC0EW01.PC2CUXID = PC2REC.PC2CUXID;
      PC0EW02.PC2CUXID = PC2REC.PC2CUXID;
      PC0EM001.KUCCOID = PC2REC.KUCCOID;
      PC0EW01.KUCCOID = PC2REC.KUCCOID;
      PC0EM001.KUMSTRID = PC2REC.KUMSTRID;
      PC0EW01.KUMSTRID = PC2REC.KUMSTRID;
      PC0EM001.XNXCD = PC2REC.XNXCD;
      PC0EW01.XNXCD = PC2REC.XNXCD;
      PC0EW01.PC0EWCID = PC0EM001.OP1CUOID;
      if (PC0EM001.OP1CUOID == 0)
        PC0EW01.OP1PARTN = " ";
        PC0EW01.OP1CUPO = " ";
      end
      OP1REC.OP1PARTN = PC0EW01.OP1PARTN;
      PC0EW01.OP1CUOID = PC0EM001.OP1CUOID;
      PC0EW02.OP1CUOID = PC0EM001.OP1CUOID;
      PC0EW01.OP1NORID = PC0EM001.OP1NORID;
      PC0EW02.OP1NORID = PC0EM001.OP1NORID;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      YSMREC.YSMSUMCD = PC2REC.YSMXDV;
      XSPCS02();
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
        PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
      end

      PC0ES15(); /* Obtain drtrans.vtsloc01*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.validationFailed(72); /* Customer # not on cust xref file*/

      PC0EM001.XXXPRCNM = "PC0E192";
      set PC0EM001.OP1CUOID cursor, bold;
      set PC0EM001.OP1NORID bold;
      set PC0EM001.XNXCD bold;

      return; /* Return to calling process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E192"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2CUXID; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E192";
  exit stack;
end // end PC0E192

// Map 2 processing
Function PC0E200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  PC0E210(); /* Obtain data to display*/

  PC0E220(); /* Format and display the map*/

  PC0E230(); /* Check attention identifier*/

  PC0E240(); /* Reset fields to normal intensity*/

  PC0E250(); /* Verify the entered data*/

  PC0E260(); /* Process valid input request*/


end // end PC0E200

// Obtain data to display
Function PC0E210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If total quantity has been entered on the first screen*/
   /* move the amount to the fields on the second screen.*/
   /* If there is only one size and the quantity has been*/
   /* entered--move it to the first quantity field.*/
   /* ------------------------------------------------------------*/

  if (PC0EW01.PC6TORIG != 0)
    PC0EW02.PC6TORIG = PC0EW01.PC6TORIG;
    if (PC0EW00.PC0EWFSI == PC0EW00.PC0EWLSI)
      PC0EM002.PC7ORIGQ[1] = PC0EW01.PC6TORIG;
      PC0EW02.PC7ORIGQ[1] = PC0EW01.PC6TORIG;
    end
  end

   /* ------------------------------------------------------------*/
   /* If size/ price data has already been obtained exit*/
   /* the routine.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWOSD == "N") /* Don't obtain size/price data*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* Get the FOB price information.*/
   /* ------------------------------------------------------------*/

   /* IF COMMAREA.CACLVL(10) EQ 'Y';*/
  PC0E211(); /* Get FOB price info*/
   /* END ;*/


   /* ------------------------------------------------------------*/
   /* Load the sizes to storage*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI; /* Move 1st size to index 1*/

  while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI) /* While not > last size*/

    PC0EW02.SY4IDDSC[PC0EWIX1] = PG3REC.SY4IDDSC[PC0EWIX1];
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end


   /* ------------------------------------------------------------*/
   /* set warning messages for nil/b-grade products*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWMSG = " "; /* ; reset warning message*/

  if (PG3REC.XDVCD == "02") /* ; nil product*/
    PC0EW00.PC0EWMSG = "WARNING - THIS IS A NIL PRODUCT";
  end

  if (PG3REC.XQACD == " 02") /* ; b-grade product*/
    if ("Y" in PC0EW00.PC0EWIPF) /* ; fob price available*/
       /* next sentence*/
    else
      PC0EW00.PC0EWMSG = "NO FOB PRICE AVAILABLE FOR B-GRADE PRODUCT";
    end
  end

end // end PC0E210

// Obtain FOB price data
Function PC0E211()


   /* ------------------------------------------------------------*/
   /* Obtain the first item record (key fields used in the select*/
   /* will depend upon the division code).  Then get the size*/
   /* record using the item sequence number. Load any of the*/
   /* prices with an override flag of 'y' into the working*/
   /* storage price arrays. Set the allow price override flag*/
   /* to 'n'.*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  VPOITM05.XPRCD = "*";
  VPOITM05.XPLCD = "*";
  VPOITM05.XPCCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.PC6XCTCD = "*";
  VPOITM05.SYBSTGNB = "*";

  if (PC0EW00.XGPCD == "03")
    VPOITM05.PC6STAT = "*";
  else
    if (VPOHDR02.YPUCD == "TN")
      VPOITM05.PC6STAT = "TN";
    else
      VPOITM05.PC6STAT = "OP";
    end
  end

  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOITM05.YSMXDV = PC0EW03.YSMXDV;
  VPOITM05.SY1STNBR = PC0EW01.SY1STNBR;
  VPOITM05.SY2CLRID = PC0EW01.SY2CLRID;
  VPOITM05.XDMCD = PC0EW01.XDMCD;
  VPOITM05.XQACD = PC0EW01.XQACD;
  VPOITM05.XOWCD = "*";
  VPOITM05.PC2INSEG = PC0EW01.PC2INSEG;
  VPOITM05.XPGCD = PC0EW01.XPGCD;
  VPOITM05.XUMCD = PC0EW01.XUMCD;
  VPOITM05.XWHCD = "*";
  VPOITM05.PC2CUXID = "*";

  PC0ES22(); /* Open cursor for VPOITM05*/

  PC0ES23(); /* Fetch first row*/

  move "N" to PC0EW00.PC0EWIPF[1] for all; /* item price flag*/

  while (PC0EW00.PC0EWCRF == "N") /* Not end of cursor*/

    if (VPOITM05.PC6STAT == "OP"
     || VPOITM05.PC6STAT == "FC"
     || VPOITM05.PC6STAT == "TN")

      PC0ES31(); /* Obtain size row*/

      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI;

      while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI) /* While not > last size*/

        if (VPOSIZ02.PC7ORDEQ[PC0EWIX1] != 0)

          if (VPOSIZ02.PC7FOBFL[PC0EWIX1] == "Y")
            PC0EW00.PC7FOBFL[PC0EWIX1] = VPOSIZ02.PC7FOBFL[PC0EWIX1];
            PC0EW02.FY4FOBPR[PC0EWIX1] = VPOSIZ02.FY4FOBPR[PC0EWIX1];
            PC0EW00.FY4FOBPR[PC0EWIX1] = VPOSIZ02.FY4FOBPR[PC0EWIX1];
          end

          PC0EW00.PC0EWIPF[PC0EWIX1] = "Y";
          PC0EW00.XXXMSGNO = 287; /* Some prices entered for prod*/

        end
        PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
      end
    end

    PC0ES23(); /* fetch next po item*/

  end

  PC0ES25(); /* Close cursor for VPOITM05*/

  set PCOREC empty;
  PCOREC.XGPCD = PC0EW00.XGPCD;
  PCOREC.FY1FCTYC = PC0EW03.FY1FCTYC;
  PCOREC.SY1STNBR = PC0EW01.SY1STNBR;
  PCOREC.SY2CLRID = PC0EW01.SY2CLRID;
  PCOREC.XDMCD = PC0EW01.XDMCD;
  PCOREC.XQACD = PC0EW01.XQACD;
  PCOREC.PC2INSEG = PC0EW01.PC2INSEG;
  PCOREC.XUMCD = PC0EW01.XUMCD;
  PCOREC.XPGCD = PC0EW01.XPGCD;
  PCOREC.XSECD = VPOHDR02.XSECD;
  PCOREC.PCFSEYR = VPOHDR02.PCFSEYR;
  PCOREC.PC3POIDT = VPOHDR02.PC3POIDT;
  PCOREC.PC3CRDT = VPOHDR02.PC3CRDT;

  XSPCS04(); /* Get fob prices*/

   /* ------------------------------------------------------------*/
   /* Load the fob prices to storage/map if not overridden*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI; /* Move 1st size to index 1*/

  while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI) /* While not > last size*/

    if (PC0EW00.PC7FOBFL[PC0EWIX1] != "Y")
      PC0EW02.FY4FOBPR[PC0EWIX1] = PCOREC.FY4FOBPR[PC0EWIX1];
      PC0EW00.FY4FOBPR[PC0EWIX1] = PCOREC.FY4FOBPR[PC0EWIX1];
    end
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end

end // end PC0E211

// Format and display map 2
Function PC0E220()


  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 382) /* PRESS ENTER, PF6, OR PF14 TO CONFIRM*/
   /* NEXT SENTENCE*/
  else
    set PC0EM002 alarm; /* Indicate sound alarm*/
  end


   /* -----------------------------------------------------------*/
   /* If map is not formatted, format the data to display*/
   /* -----------------------------------------------------------*/

  if (PC0EM002.XXXCURDT == 0)

    PC0E221(); /* Move data to the map*/


    PC0E222(); /* Load prices and sizes from storage*/

  else
    if (PC0EW00.PC0EWPOF == "Y") /* Price override flag*/
      PC0E225(); /* Load new prices from storage*/
    end
  end


  if (PC0EW00.PC0EWPOF == "Y") /* Price override requested*/
    PC0E223(); /* Set unprotect attributes for price*/
  else
    PC0E224(); /* Set protect attributes for price*/
  end


  if (PC0EW00.PC0EWMSG != " ") /* warning message*/
    set PC0EM002.PC0EMMSG initialAttributes;
    PC0EM002.PC0EMMSG = PC0EW00.PC0EWMSG;
  else
    set PC0EM002.PC0EMMSG skip, invisible;
  end

  if (PC0EW00.XXXMSGNO != 0) /* Informational message*/
    if (PC0EW00.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PC0EW00.XXXMSGNO);
    end
  end

  PC0EM002.XXXCURDT = VGVar.currentShortGregorianDate;

  converse PC0EM002 ;

   /* -----------------------------------------------------------*/
   /* Clear the message fields*/
   /* -----------------------------------------------------------*/

  PC0EW00.XXXMSGNO = 0;
  PC0EW00.PC0EWMSG = " ";
  PC0EM002.XXXPRCNM = "PC0E ";

end // end PC0E220

// Move data to map 2
Function PC0E221()

   /* ------------------------------------------------------------*/
   /* Move map 2 data from pc0ew02 display storage to the*/
   /* map fields.*/
   /* ------------------------------------------------------------*/


  PC0EM002.PC3PONBR = PC0EW03.PC3PONBR;
  PC0EW03.PC0EWPOI = PC0EW02.PC0EWPOI;
  PC0EM002.PC0EMPOI = PC0EW03.PC0EWPOI;
  PC0EM002.PC4ORTYP = PC0EW03.PC4ORTYP;
  PC0EM002.PC4SDESC = PC0EW03.PC4SDESC;
  PC0EM002.XGPCD = PC0EW03.XGPCD;
  PC0EM002.XGPDESC = PC0EW03.XGPDESC;
  PC0EM002.XUMCD = PC0EW02.XUMCD;
  PC0EM002.SY1STNBR = PC0EW02.SY1STNBR;
  PC0EM002.SY1STYNM = PG2REC.SY1STYNM;
  PC0EM002.SY2CLRID = PC0EW02.SY2CLRID;
  PC0EM002.SY2CLRAB = PC0EW02.SY2CLRAB;
  PC0EM002.XDMCD = PC0EW02.XDMCD;
  if (PC0EM001.PC2CUXID != " ")
    PC0EM002.PC2INSEG = PC2REC.PC2INSEG;
    PC0EW02.PC2INSEG = PC2REC.PC2INSEG;
  else
    PC0EM002.PC2INSEG = PC0EW01.PC2INSEG;
  end
  PC0EM002.XPGCD = PC0EW02.XPGCD;
  PC0EM001.XQACD = PC0EW02.XQACD;
  PC0EM002.XQACD = PC0EW02.XQACD;
  PC0EM002.PC6TORIG = PC0EW02.PC6TORIG;
  PC0EM002.XOWCD = PC0EW02.XOWCD;
  PC0EM002.XWHCD = PC0EW02.XWHCD;
  if (PC0EW01.PC6ETSDT != 0)
    PC0EM002.PC6ETSDT = PC0EW01.PC6ETSDT;
    PC0EW02.PC6ETSDT = PC0EW01.PC6ETSDT;
  end
  PC0EM002.PC2CUXID = PC0EW02.PC2CUXID;
  if (PC0EW02.PC2CUXID != " ")
    PC0EM001.PC2INSEG = PC2REC.PC2INSEG;
    PC0EW02.PC2INSEG = PC2REC.PC2INSEG;
  else
    PC0EM002.PC2INSEG = PC0EW02.PC2INSEG;
  end
  PC0EM002.OP1CUOID = PC0EW02.OP1CUOID;
  PC0EM002.OP1NORID = PC0EW02.OP1NORID;
  PC0EM002.YMTCD = PC0EW03.YMTCD;

  if (PC0EW00.PC0EWFSI == PC0EW00.PC0EWLSI /* Only one size*/
   && PC0EW02.PC6TORIG > 0)                /* Quantity entered*/
    PC0EM002.PC7ORIGQ[PC0EWFSI] = PC0EW02.PC6TORIG;
  end

end // end PC0E221

// Load prices & sizes
Function PC0E222()

   /* ------------------------------------------------------------*/
   /* Load the first line  of sizes and prices to the map*/
   /* ------------------------------------------------------------*/
  PC0EW00.PC0EWMAX = 0;

  set PC0EM002.PC0EMSZL[1] protect; /* Display  size literal*/
  set PC0EM002.PC0EMFBL[1] protect; /* Display FOB literal*/
  set PC0EM002.PC0EMORL[1] protect; /* Display order literal*/

  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI; /* Move 1st size to index 1*/
  PC0EW00.PC0EWIXM = +1; /* Set map index to 1*/

  while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI /* While not > last size*/
   && PC0EW00.PC0EWIXM <= 10) /* and on first line of map*/

    if (PC0EW02.SY4IDDSC[PC0EWIX1] != " ")
      PC0EM002.SY4IDDSC[PC0EWIXM] = PC0EW02.SY4IDDSC[PC0EWIX1];
      PC0EM002.FY4FOBPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
      PC0EW02.PC0EWMPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
      set PC0EM002.SY4IDDSC[PC0EWIXM] protect; /* Protect size desc*/
      set PC0EM002.PC7ORIGQ[PC0EWIXM] normal; /* Allow entry in quantity*/
      PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
    end
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* If all sizes have been loaded on first line save the*/
   /* last map index value (for setting fob attributes and exit*/
   /* routine.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWIX1 > PC0EW00.PC0EWLSI)
    PC0EW00.PC0EWOSD = "N"; /* Don't obtain more data*/
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM - 1;
    PC0EW00.PC0EWMAX = PC0EW00.PC0EWIXM;
  end


   /* ------------------------------------------------------------*/
   /* Load the second line of map data*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWOSD != "N") /* More size data*/
    set PC0EM002.PC0EMSZL[2] protect; /* Display  size literal*/
    set PC0EM002.PC0EMFBL[2] protect; /* Display FOB literal*/
    set PC0EM002.PC0EMORL[2] protect; /* Display order literal*/

    while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI /* While sizes*/
     && PC0EW00.PC0EWIXM <= 20) /* and on first line of map*/

      if (PG3REC.SY4IDDSC[PC0EWIX1] != " ")
        PC0EM002.SY4IDDSC[PC0EWIXM] = PC0EW02.SY4IDDSC[PC0EWIX1];
        PC0EM002.FY4FOBPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        PC0EW02.PC0EWMPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        set PC0EM002.SY4IDDSC[PC0EWIXM] protect; /* Protect size desc*/
        set PC0EM002.PC7ORIGQ[PC0EWIXM] normal; /* Allow entry in quantity*/
        PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
      end
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    end
    if (PC0EW00.PC0EWIX1 > PC0EW00.PC0EWLSI)
      PC0EW00.PC0EWOSD = "N"; /* Don't obtain more data*/
      PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM - 1;
      PC0EW00.PC0EWMAX = PC0EW00.PC0EWIXM;
    end

  end




   /* ------------------------------------------------------------*/
   /* Load the third line of sizes on the map*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWOSD != "N") /* More size data*/
    set PC0EM002.PC0EMSZL[3] protect; /* Display  size literal*/
    set PC0EM002.PC0EMFBL[3] protect; /* Display FOB literal*/
    set PC0EM002.PC0EMORL[3] protect; /* Display ordered literal*/

    while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI /* While sizes*/
     && PC0EW00.PC0EWIXM <= 30) /* and on first line of map*/

      if (PG3REC.SY4IDDSC[PC0EWIX1] != " ")
        PC0EM002.SY4IDDSC[PC0EWIXM] = PC0EW02.SY4IDDSC[PC0EWIX1];
        PC0EM002.FY4FOBPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        PC0EW02.PC0EWMPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        set PC0EM002.SY4IDDSC[PC0EWIXM] protect; /* Protect size desc*/
        set PC0EM002.PC7ORIGQ[PC0EWIXM] normal; /* Allow entry in quantity*/
        PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
      end
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    end
    if (PC0EW00.PC0EWIX1 > PC0EW00.PC0EWLSI)
      PC0EW00.PC0EWOSD = "N"; /* Don't obtain more data*/
      PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM - 1;
      PC0EW00.PC0EWMAX = PC0EW00.PC0EWIXM;
    end

  end

   /* ------------------------------------------------------------*/
   /* Load the  fourth line of data to the map*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWOSD != "N") /* Not all sizes loaded*/
    set PC0EM002.PC0EMSZL[4] protect; /* Display  size literal*/
    set PC0EM002.PC0EMFBL[4] protect; /* Display FOB literal*/
    set PC0EM002.PC0EMORL[4] protect; /* Display ordered literal*/

    while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI /* While sizes*/
     && PC0EW00.PC0EWIXM <= 40) /* and on first line of map*/

      if (PG3REC.SY4IDDSC[PC0EWIX1] != " ")
        PC0EM002.SY4IDDSC[PC0EWIXM] = PC0EW02.SY4IDDSC[PC0EWIX1];
        PC0EM002.FY4FOBPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        PC0EW02.PC0EWMPR[PC0EWIXM] = PC0EW02.FY4FOBPR[PC0EWIX1];
        set PC0EM002.SY4IDDSC[PC0EWIXM] protect; /* Protect size desc*/
        set PC0EM002.PC7ORIGQ[PC0EWIXM] normal; /* Allow entry in quantity*/
        PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
      end
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    end
    PC0EW00.PC0EWOSD = "N"; /* Don't obtain more data*/
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM - 1;
    PC0EW00.PC0EWMAX = PC0EW00.PC0EWIXM;
  end

end // end PC0E222

// Set price unprotected
Function PC0E223()

   /* ------------------------------------------------------------*/
   /* display the price only if it is not equal to the*/
   /* previous price.*/
   /* Since the first price cannot be compared to a previous*/
   /* it must be handled separately.*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWIX4 = PC0EW00.PC0EWFSI;

  if (PC0EW00.PC0EWIPF == "Y")
    set PC0EM002.FY4FOBPR[1] skip;
  else
    set PC0EM002.FY4FOBPR[1] normal;
  end

  PC0EW00.PC0EWIX4 = PC0EW00.PC0EWIX4 + 1;

  PC0EW00.PC0EWIXM = 2; /* Initialize map index*/
  PC0EW00.PC0EWIX1 = 2; /* Initialize work index*/

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)

    /* ------------------------------------------------------------*/
     /* Set the work index down by 1 to look at the previous*/
     /* price.*/
    /* ------------------------------------------------------------*/
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIXM - 1;

    if (PC0EW02.PC0EWMPR[PC0EWIXM] == PC0EW02.PC0EWMPR[PC0EWIX1])
      PC0EM002.FY4FOBPR[PC0EWIXM] = 0;
    end

    if (PC0EW00.PC0EWIPF[PC0EWIX4] == "Y")
      set PC0EM002.FY4FOBPR[PC0EWIXM] skip; /* Allow entry*/
    else
      set PC0EM002.FY4FOBPR[PC0EWIXM] normal; /* Allow entry*/
    end

    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
    PC0EW00.PC0EWIX4 = PC0EW00.PC0EWIX4 + 1;
  end

  if (PC0EW00.XGPCD == "02")
    set PC0EM002.PC0EMPIL protect;
    set PC0EM002.PC0EMPTL protect;
    set PC0EM002.PC0EMPOI protect;
    set PC0EM002.PC4ORTYP protect;
    set PC0EM002.PC4SDESC protect;
  end
end // end PC0E223

// Set price protected
Function PC0E224()

   /* ------------------------------------------------------------*/
   /* If the price override flag has been set then the*/
   /* price fields will have to be unprotected--otherwise*/
   /* they will be displayed protected. Display the price*/
   /* only if it is not equal to the previous price.*/
   /* Since the first price cannot be compared to a previous*/
   /* it must be handled separately.*/
   /* ------------------------------------------------------------*/

  if (PC0EM002.FY4FOBPR[1] == 0)
    set PC0EM002.FY4FOBPR[1] initialAttributes;
  else
    set PC0EM002.FY4FOBPR[1] protect;
  end

  PC0EW00.PC0EWIXM = 2; /* Initialize map index*/
  PC0EW00.PC0EWIX1 = 2; /* Initialize work index*/

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)

    /* ------------------------------------------------------------*/
     /* Set the work index down by 1 to look at the previous*/
     /* price .*/
    /* ------------------------------------------------------------*/

    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIXM - 1;

    if (PC0EM002.FY4FOBPR[PC0EWIXM] == PC0EM002.FY4FOBPR[PC0EWIX1])
      set PC0EM002.FY4FOBPR[PC0EWIXM] initialAttributes;
    else
      set PC0EM002.FY4FOBPR[PC0EWIXM] protect; /* display-no entry*/
    end
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
  end

  if (PC0EW00.XGPCD == "02")
    set PC0EM002.PC0EMPIL protect;
    set PC0EM002.PC0EMPTL protect;
    set PC0EM002.PC0EMPOI protect;
    set PC0EM002.PC4ORTYP protect;
    set PC0EM002.PC4SDESC protect;
  end
end // end PC0E224

// load new prices
Function PC0E225()


  PC0EW00.PC0EWIXM = 1; /* Initialize map index*/

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)

    PC0EM002.FY4FOBPR[PC0EWIXM] = PC0EW02.PC0EWMPR[PC0EWIXM];
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
  end


end // end PC0E225

// Check attention identifiers
Function PC0E230()



   /* ------------------------------------------------------------*/
   /* Clear Map on PA2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end


   /* ------------------------------------------------------------*/
   /* Check for PF2--Allows FOB price override*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf2) /* Allow FOB override*/

    PC0EW00.PC0EWPOF = "Y"; /* Override price*/
    exit stack;

  end



   /* ------------------------------------------------------------*/
   /* Check for PF6--Special instructions*/
   /* Check for PF14--ship to*/
   /* Enter*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6
   || converseVar.eventKey is pf14
   || converseVar.eventKey is enter)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check for PF15-- cancel product*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf15 /* Cancel product*/
   && PC0EW00.PC0EWAFF != "M")    
    if (PCWREC.CAFROMAP[1] == " "
     || PCWREC.CAFROMAP[1] == "PC0E")

      PCWREC.CAFROMAP[1] = "PC0E"; /* From application id*/
      PCWREC.PCWFNC[1] = PC0EW00.PC0EWAFF;

    else
      if (PCWREC.CAFROMAP[2] == " "
       || PCWREC.CAFROMAP[2] == "PC0E")

        PCWREC.CAFROMAP[2] = "PC0E"; /* From application id*/
        PCWREC.PCWFNC[2] = PC0EW00.PC0EWAFF;
      else
        if (PCWREC.CAFROMAP[3] == " "
         || PCWREC.CAFROMAP[3] == "PC0E")
          PCWREC.CAFROMAP[3] = "PC0E"; /* From application id*/
          PCWREC.PCWFNC[3] = PC0EW00.PC0EWAFF;

        else
          if (PCWREC.CAFROMAP[4] == " "
           || PCWREC.CAFROMAP[4] == "PC0E")
            PCWREC.CAFROMAP[4] = "PC0E"; /* From application id*/
            PCWREC.PCWFNC[4] = PC0EW00.PC0EWAFF;

          end
        end
      end
    end
    COMMAREA.CAITEM = " "; /* application from data*/
    COMMAREA.CATOAP = "PC0E";
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    XSPCS01();
    PC0EM002.XXXPRCNM = "PC0E220";
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf15 /* PF15 was pressed--cancel product*/
   && PC0EW00.PC0EWAFF == "M")    

    PC0EW03.SY1STNBR = PC0EW01.SY1STNBR;
    PC0EW03.SY2CLRID = PC0EW01.SY2CLRID;
    PC0EW03.XDMCD = PC0EW01.XDMCD;
    PC0EW03.XQACD = PC0EW01.XQACD;
    PC0EW03.XOWCD = PC0EW01.XOWCD;
    PC0EW03.XPGCD = PC0EW01.XPGCD;
    PC0EW03.XUMCD = PC0EW01.XUMCD;
    PC0EW03.PC0EWPOI = PC0EW02.PC0EWPOI;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set PC0EM001 initial;
    set PC0EM002 initial;
    set PC0EW00 empty;
    set PC0EW01 empty;
    set PC0EW02 empty;
    set PC2REC empty;
    set VPOITM05 empty;
    set VPOSIZ02 empty;
    set PC9REC empty;
    set PCFREC empty;
    set PCGREC empty;
    set VPOAHD02 empty;
    set VPOASZ02 empty;
    set PCYREC empty;
    set FYCREC empty;
    set VFCTY003 empty;
    set FY4REC empty;
    set OP1REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set TSCREC empty;
    set YSMREC empty;
    PC0EM001.PC0EMPF3 = "3:PO MN";
    set PC0EM001.PC0EMP21 skip, invisible;
    set PC0EM001.PC0EMPF6 skip, invisible;
    PC0EW01.SY1STNBR = PC0EW03.SY1STNBR;
    PC0EW02.SY1STNBR = PC0EW03.SY1STNBR;
    PC0EW01.SY2CLRID = PC0EW03.SY2CLRID;
    PC0EW02.SY2CLRID = PC0EW03.SY2CLRID;
    PC0EW01.XDMCD = PC0EW03.XDMCD;
    PC0EW02.XDMCD = PC0EW03.XDMCD;
    PC0EW01.XQACD = PC0EW03.XQACD;
    PC0EW02.XQACD = PC0EW03.XQACD;
    PC0EW01.XOWCD = PC0EW03.XOWCD;
    PC0EW02.XOWCD = PC0EW03.XOWCD;
    PC0EW01.PC2INSEG = "000";
    PC0EW02.PC2INSEG = "000";
    PC0EW01.XPGCD = PC0EW03.XPGCD;
    PC0EW02.XPGCD = PC0EW03.XPGCD;
    PC0EW01.XUMCD = PC0EW03.XUMCD;
    PC0EW02.XUMCD = PC0EW03.XUMCD;
    PC0EW00.PC0EWAFF = "M";
    PC0EW00.PC0EWSSF = "1";
    PC0EW00.XGPCD = PC0EW03.XGPCD;
    if (PC0EW00.XGPCD == "03")
      set PC0EM001.PC0EMDSL skip, invisible;
      set PC0EM001.PC0EMRSL skip, invisible;
      set PC0EM001.PC6RTADT skip, invisible;
      set PC0EM001.PC0EMSZA skip, invisible;
      set PC0EM001.PC6SZAVL skip, invisible;
      set PC0EM001.PC0EMCFN skip, invisible;
      set PC0EM001.PC6CONNO skip, invisible;
      set PC0EM001.PC0EMRTL skip, invisible;
    else
      set PC0EM001.PC6ETSDT skip, invisible;
      set PC0EM001.PC0EMETL skip, invisible;
      PC0EW03.YSMXDV = " ";
      PC0EW03.YSMSMDSC = " ";
      PC0EW03.XDSCD = " ";
      PC0EW03.XDSABRV = " ";
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Clear screen if PA1 or PA3 and exit to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa1 /* PA1 pressed*/
   || converseVar.eventKey is pa3) /* PA3 pressed*/
    set PC0EM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* At this point an invalid PF key has been pressed.*/
   /* ------------------------------------------------------------*/


  PC0EM002.XXXPRCNM = "PC0E220";
  converseLib.validationFailed(04); /* Invalid PA/PF key*/
  exit stack;

end // end PC0E230

// Reset fields
Function PC0E240()


  set PC0EM002.PC6TORIG initialAttributes;

  PC0EW00.PC0EWIXM = 1;

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)
    set PC0EM002.PC7ORIGQ[PC0EWIXM] normal;
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
  end


end // end PC0E240

// verify the entered data
Function PC0E250()

   /* ------------------------------------------------------------*/
   /* Load prices from map to storage if price override has*/
   /* been requested.*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWPOF == "Y") /* Price override requested*/
    PC0E251();
  end

   /* ------------------------------------------------------------*/
   /* Load quantities from map to storage*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWIXM = 1;
  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI;

  while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI)
    if (PC0EW02.SY4IDDSC[PC0EWIX1] != " "
     && PC0EW02.SY4IDDSC[PC0EWIX1] == PC0EM002.SY4IDDSC[PC0EWIXM])
      PC0EW02.PC7ORIGQ[PC0EWIXM] = PC0EM002.PC7ORIGQ[PC0EWIXM];
      PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
    end
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end


   /* ------------------------------------------------------------*/
   /* Add all of the original quantities from the map and*/
   /* compare with the total amount--if there is a difference*/
   /* it's an error.*/
   /* ------------------------------------------------------------*/


   /* ---> sum QTYs on size level*/
  PC0EW00.PC0EWIXM = 1;
  PC0EW00.PC6TORIG = 0;

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)
    PC0EW00.PC6TORIG = PC0EW00.PC6TORIG + PC0EM002.PC7ORIGQ[PC0EWIXM];
    PC0EWIXM = PC0EWIXM + 1;
  end

   /* ---> compare tot qty entered to summed QTYs*/
  if (PC0EW00.PC6TORIG != PC0EM002.PC6TORIG
   || PC0EM002.PC6TORIG == 0) /* Must enter some quantity*/
    set PC0EM002.PC6TORIG cursor, bold;
    converseLib.validationFailed(64);
    PC0EM002.XXXPRCNM = "PC0E250";
  else

    /* ---> reset confirm flag and save entered tot QTYs*/
    if (PC0EM002.PC6TORIG != PC0EW02.PC6TORIG)
      PC0EW02.PC6TORIG = PC0EM002.PC6TORIG;
      PC0EW00.PC0EWCFL = "N";
    end

  end
   /* ------------------------------------------------------------*/
   /* edit for price changes with no quantities*/
   /* ------------------------------------------------------------*/

  if (PC0EW00.PC0EWPOF == "Y") /* Price override requested*/
    PC0EW00.PC0EWIXM = PC0EW00.PC0EWMAX;
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWLSI;

    while (PC0EW00.PC0EWIX1 >= PC0EW00.PC0EWFSI)

      if (PC0EW02.SY4IDDSC[PC0EWIX1] != " "
       && PC0EW02.SY4IDDSC[PC0EWIX1] == PC0EM002.SY4IDDSC[PC0EWIXM])

        if (PC0EM002.FY4FOBPR[PC0EWIXM] != PC0EW02.PC0EWMPR[PC0EWIXM])
                   /* MOVE 'N' TO PC0EW00.PC0EWCFL;*/
        end /* ===> reset confirm flag*/

        if (PC0EM002.FY4FOBPR[PC0EWIXM] != 0)
          if (PC0EW02.FY4FOBPR[PC0EWIX1] != PC0EW02.PC0EWMPR[PC0EWIXM]
           && PC0EM002.PC7ORIGQ[PC0EWIXM] == 0)
            set PC0EM002.PC7ORIGQ[PC0EWIXM] cursor, bold;
            converseLib.validationFailed(211);
            PC0EM002.XXXPRCNM = "PC0E250";
                     /* MOVE 0 TO PC0EW02.PC0EWMPR(PC0EWIXM);*/
                     /* MOVE 0 TO PC0EM002.FY4FOBPR(PC0EWIXM);*/
          end
        end

        PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM - 1;
      end
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 - 1;
    end

  end

   /* **********************************************************/
   /* SET UP THE CONFIRMATION MESSAGE AND EZEFLO DUE TO ERRORS*/
   /* **********************************************************/

  if (converseVar.validationMsgNum == 0)
    if (PC0EW00.PC0EWCFL == "Y") /* ===> update (confirm and no errors)*/
      PC0EW00.PC0EWCFL = "N";
    else
      PC0EW00.PC0EWCFL = "Y"; /* ===> show confirm msg (no errors)*/
      converseLib.validationFailed(382);
      exit stack;
    end
  else
    PC0EW00.PC0EWCFL = "N";
    exit stack; /* ===> show errors*/
  end


end // end PC0E250

// Load prices to storage
Function PC0E251()
   /* ------------------------------------------------------------*/
   /* Load prices from map to storage if price override has*/
   /* been requested.  The prices from the map may have changed*/
   /* which would change any of the prices up to a new price*/
   /* in display storage.*/
   /* ------------------------------------------------------------*/


  PC0EW00.PC0EWIXM = 1; /* Initialize index*/

  while (PC0EW00.PC0EWIXM <= PC0EW00.PC0EWMAX)

    if (PC0EM002.FY4FOBPR[PC0EWIXM] != 0) /* Price on map*/
      if (PC0EM002.FY4FOBPR[PC0EWIXM] != PC0EW02.PC0EWMPR[PC0EWIXM])
         /* map price not equal to storage price*/
        PC0EW00.PC0EWCFL = "N"; /* ===> reset confirm flag*/
        PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIXM;
        PC0EW00.PC0EWNPR = PC0EM002.FY4FOBPR[PC0EWIXM]; /* New price*/
        PC0EW00.PC0EWOPR = PC0EW02.PC0EWMPR[PC0EWIXM]; /* Old price*/

        while (PC0EW00.PC0EWOPR == PC0EW02.PC0EWMPR[PC0EWIX1]
         && PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWMAX)
          PC0EW02.PC0EWMPR[PC0EWIX1] = PC0EW00.PC0EWNPR;
          PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
        end

      end
    end /* ====>price on map > 0*/

    if (PC0EM002.FY4FOBPR[PC0EWIXM] == 0 /* Price on map*/
     && PC0EM002.PC7ORIGQ[PC0EWIXM] == 0) /* No QTYS requested*/
      PC0EW02.PC0EWMPR[PC0EWIXM] = 0; /* ===> reset price*/
    end /* ====>price on map > 0*/

    PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;

  end



end // end PC0E251

// Process valid input request
Function PC0E260()

   /* -----------------------------------------------------*/
   /* Get the plan number if an existing po item with the*/
   /* same plan keys is not foud in pc0es24.*/
   /* Get the item number and format*/
   /* and store the item and size rows.*/
   /* -----------------------------------------------------*/

  if (PC0EW00.PC6PLAN == 0)

    PC0E261(); /* Get plan number*/

  end

  PC0E262(); /* Get item number*/

  if (PC0EM001.PC2CUXID != " ") /* CUSTOMER ENTERED*/
    PC2REC.XGPCD = PC0EW00.XGPCD;
    PC2REC.PC2CUXID = PC0EM001.PC2CUXID;
    PC0E192(); /* GET CUST DATA*/
  end
  PC0E263(); /* Format and store item row*/

  PC0E264(); /* Format and store size row*/

  if (PC0EW00.XGPCD == "03") /* Apparel only*/
    if (PC0EW03.PC4ORTYP == "SD" /* screened dummy items*/
     || PC0EW03.PC4ORTYP == "CD") /* & custom dummy items*/
      /* next sentence*/
    else
      if (PC0EW03.PC4ORTYP == "TO") /* "TO" PO*/
        if (VPOITM05.XQACD == "01") /* only first quality*/
          if (PG2REC.PG2SCRFL != "S" /**/
           && PG2REC.PG2SCRFL != "R") /**/
            if (PC0EW00.XWHOWNGF == "Y" /* valid whse/own grp*/
             || PC0EM002.XOWCD == "00") /* valid owner grp regardless*/
              PC0E270(); /* Adjust Blank Avail. Tbl.*/
            end
          end
        end
      else

          /* Skip adjusting the alternate inventory for*/
          /* b-grade t-shirts.*/

        if (PC0EW03.PC4ORTYP == "IR" /* Irregular (b-grade)*/
         && PG2REC.PG2SCRFL == "S")  /* screen good*/
          /* next sentence*/
        else
          if (PG2REC.PG2SCRFL == "S" /* screen good*/
           || PG2REC.PG2SCRFL == "I") /* interim good*/
            if (VFCTY003.FY1FRGN != "Y") /* not a foreign factory*/
              if (PC0EW00.XWHOWNGF == "Y" /* valid whse/own grp*/
               || PC0EM002.XOWCD == "00") /* valid owner grp regardless*/
                PC0E270(); /* Adjust Blank Avail. Tbl.*/
              end
            end
          end
        end
      end
    end
  end

  if (VPOHDR02.YPUCD != "OP"
   && VPOHDR02.YPUCD != "TN")

    PC0E265(); /* Update header status*/

    if (VPOHDR02.XGPCD != "01" /* not promo*/
     && VPOHDR02.XGPCD != "07") /* not posters*/
      PC0E266(); /* Format header audit record*/
    end

  end


  if (PC0EW00.XGPCD != "01" /* not promo*/
   && PC0EW00.XGPCD != "07") /* not posters*/

    if (PC0EW00.PC0EWAFF != "A") /* adding to an existing PO*/
      if (VPOHDR02.PO-REG-CD == "01") /* us po's can be added*/

        PC0ES18(); /* Get audit item seq nbr*/

        PC0E267(); /* Format item audit record*/

        PC0E268(); /* Format size audit record*/

      else
        converseLib.validationFailed(509); /* indicate out of range*/
      end

    else

      /* ------------------------------------------------------------*/
      /* =====> Note: this flag is set in PC0L when adding to*/
      /* =====>       an existing PO ID.*/
      /* ------------------------------------------------------------*/

      if (PC0EW00.PC0EWAFF == "A" /* New P.O. Number being added*/
       && PCWREC.PCWAUDFL == "Y") /* adding to an existing PO ID*/

        PC0ES18(); /* Get audit item seq nbr*/

        PC0E267(); /* Format item audit record*/

        PC0E268(); /* Format size audit record*/

      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Load function into pcwfnc array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " "
   || PCWREC.CAFROMAP[1] == "PC0E")

    PCWREC.CAFROMAP[1] = "PC0E"; /* From application id*/
    PCWREC.PCWFNC[1] = PC0EW00.PC0EWAFF;

  else
    if (PCWREC.CAFROMAP[2] == " "
     || PCWREC.CAFROMAP[2] == "PC0E")

      PCWREC.CAFROMAP[2] = "PC0E"; /* From application id*/
      PCWREC.PCWFNC[2] = PC0EW00.PC0EWAFF;
    else
      if (PCWREC.CAFROMAP[3] == " "
       || PCWREC.CAFROMAP[3] == "PC0E")
        PCWREC.CAFROMAP[3] = "PC0E"; /* From application id*/
        PCWREC.PCWFNC[3] = PC0EW00.PC0EWAFF;

      else
        if (PCWREC.CAFROMAP[4] == " "
         || PCWREC.CAFROMAP[4] == "PC0E")
          PCWREC.CAFROMAP[4] = "PC0E"; /* From application id*/
          PCWREC.PCWFNC[4] = PC0EW00.PC0EWAFF;

        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* set up the pcwrec for saving field on re-entry of pc0e*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Application data*/
  PC0E269(); /* Move data to pcwrec*/

   /* ------------------------------------------------------------*/
   /* Check for PF14--Ship to screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "PC05"; /* To application*/
    XSPCS01(); /* Exit to another application*/
    PC0EM001.XXXPRCNM = "PC0E260"; /* Process name*/
    converseLib.validationFailed(10);
    PC0EM002.XXXPRCNM = "PC0E260";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check for PF6--Special instruction screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6)
    COMMAREA.CATOAP = "PC0I"; /* To application*/
    XSPCS01(); /* Exit to another application*/
    converseLib.validationFailed(10);
    PC0EM001.XXXPRCNM = "PC0E260";
    PC0EM002.XXXPRCNM = "PC0E260";
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check for enter -- re-entry of pc0e to add another product*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    COMMAREA.CATOAP = "PC0E"; /* To application*/
    PCWREC.XXXMSGNO = 1;
    XSPCS01(); /* Exit to another application*/
    converseLib.validationFailed(10);
    PC0EM001.XXXPRCNM = "PC0E260";
    PC0EM002.XXXPRCNM = "PC0E260";
    exit stack;
  end

end // end PC0E260

// Get Plan number for item row
Function PC0E261()

   /* ----------------------------------------------------------*/
    /* Do a select set on the item to see if a plan already*/
    /* exists.*/
   /* ----------------------------------------------------------*/

  set VPOITM05 empty;

  if (PC0EW00.XGPCD == "03")
    VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
    VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
    VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
    VPOITM05.SY1STNBR = PC0EW01.SY1STNBR; /* style*/
    VPOITM05.SY2CLRID = "*"; /* color*/
    VPOITM05.PC6RTADT = -1;
    VPOITM05.YMTCD = PC0EW03.YMTCD; /* Mode*/
    VPOITM05.PC6ETSDT = PC0EW00.PC6OETS; /* ETS date*/
    VPOITM05.PC6OETS = PC0EW00.PC6OETS;
  end

  if (PC0EW00.XGPCD != "03") /* gpc '01' and '02' and '07'*/
    VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
    VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
    VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
    VPOITM05.SY1STNBR = PC0EW01.SY1STNBR; /* style*/
    VPOITM05.SY2CLRID = PC0EW01.SY2CLRID; /* color*/
    VPOITM05.PC6RTADT = PC0EW00.PC6RTADT;
    VPOITM05.YMTCD = PC0EW03.YMTCD; /* Mode*/
    VPOITM05.PC6ETSDT = -1; /* ETS date*/
    VPOITM05.PC6OETS = -1;
  end

  VPOITM05.XDMCD = "*";
  VPOITM05.XQACD = "*";
  VPOITM05.XOWCD = "*";
  VPOITM05.PC2INSEG = "*";
  VPOITM05.XPGCD = "*";
  VPOITM05.XUMCD = "*";
  VPOITM05.XWHCD = "*";
  VPOITM05.PC2CUXID = "*";
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.YSMXDV = "*";

   /* use 's7' select*/
  PC0ES10(); /* Open cursor for VPOITM05*/

  PC0ES11(); /* Fetch first VPOITM05 row*/

  PC0ES12(); /* Close cursor for VPOITM05*/

  if (PC0EW00.PC6PLAN == 0) /* Close cursor*/

    PC0E280(); /* Count items to get plan nbr*/

  end



end // end PC0E261

// Get the PO items number
Function PC0E262()

   /* ----------------------------------------------------------*/
    /* Do a select max count on the item PO and calculate*/
    /* the PO number by adding 1 to the count returned.*/
   /* ----------------------------------------------------------*/

  set VPOITM05 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M2"; /* Select max count*/

  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* PO number 1, otherwise add one to the count.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0EW00.PC6ITMNB = PCYREC.PCYCOUNT + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PC0EW00.PC6ITMNB = 1;
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E262"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM    ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E262";
  exit stack;

end // end PC0E262

// Format and store item
Function PC0E263()

   /* ----------------------------------------------------------*/
    /* Initialize the item record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOITM05 empty;
  VPOITM05.PC6PREFL = "N";

   /* ----------------------------------------------------------*/
    /* Determine if this PO has special instructions and set*/
    /* the special instruction flag accordingly.*/
   /* ----------------------------------------------------------*/

  PC0ES19(); /* Open cursor for special instr*/

  PC0ES20(); /* Obtain special instr row*/

  PC0ES21(); /* Close special instr cursor*/

  PC0ES29(); /* Check for address override row*/

  XX0XS01();

  if (PC0EM001.XGPCD == "02"
   && PC0EM001.PC4ORTYP == "PS"
   && PC0EM001.PC2CUXID != "     "
   && PC0EM001.XWHCD == "  ")
    if (PC2REC.XCTCD == "JAPA")
      set VFCTY003 empty;
      VFCTY003.XGPCD = PC0EM001.XGPCD;
      VFCTY003.FY1FCTYC = PC0EM001.FY1FCTYC;
      PC0ES75(); /* get factory type cd*/
      if (VFCTY003.FY-FCTY-TYP-CD == "E "
       || VFCTY003.FY-FCTY-TYP-CD == "EJ")
        PC0EW01.XWHCD = "84";
        PC0EW03.XDSCD = "2";
      end
      if (VFCTY003.FY-FCTY-TYP-CD == "F "
       || VFCTY003.FY-FCTY-TYP-CD == "FJ")
        PC0EW01.XWHCD = "81";
        PC0EW03.XDSCD = "2";
      end
    end
  end
  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0EW00.PC6ITMNB;
  VPOITM05.PC3POIDT = VPOHDR02.PC3POIDT;
  VPOITM05.PCFSECD = VPOHDR02.PCFSECD;
  VPOITM05.XOWCD = PC0EW01.XOWCD;
  VPOITM05.FY1FCTYC = VPOHDR02.FY1FCTYC;
  VPOITM05.XCTCD = VPOHDR02.XCTCD;
  VPOITM05.SY1STNBR = PC0EW01.SY1STNBR;
  VPOITM05.SY2CLRID = PC0EW01.SY2CLRID;
  VPOITM05.XDMCD = PC0EW01.XDMCD;
  VPOITM05.XQACD = PC0EW01.XQACD;
  VPOITM05.PC2INSEG = PC0EW01.PC2INSEG;
  VPOITM05.XPGCD = PC0EW01.XPGCD;
  VPOITM05.XUMCD = PC0EW01.XUMCD;
  VPOITM05.PC6ETSDT = PC0EW00.PC6OETS;
  VPOITM05.YMTCD = PC0EW03.YMTCD;
  VPOITM05.PC6PLAN = PC0EW00.PC6PLAN;
  VPOITM05.XPLCD = PG2REC.XPLCD;
  VPOITM05.XPRCD = PG2REC.XPRCD;
  VPOITM05.XPCCD = PG2REC.XPCCD;
  VPOITM05.SYBSTGNB = PG2REC.SYBSTGNB;
  VPOITM05.XGACD = PG2REC.XGACD;
  if (PC0EW00.XGPCD == "03")
    VPOITM05.PG1SC4CD = PC0EW01.PG1SC4CD;
  else
    VPOITM05.PG1SC4CD = PG2REC.PG1SC4CD;
  end
  VPOITM05.XWHCD = PC0EW01.XWHCD;
  VPOITM05.PC2CUXID = PC0EW01.PC2CUXID;
  VPOITM05.PC6CLVAR = PC0EW01.PC0EWSDC;

  if (PC0EW01.PC2CUXID > " ")
    VPOITM05.PC6XCTCD = PC2REC.XCTCD; /* ultimate ctry for cust*/
    VPOITM05.YSMXDV = PC2REC.YSMXDV; /* cust division*/
  else
    if (PC0EW01.XWHCD == "12")
      VPOITM05.PC6XCTCD = "USA";
      VPOITM05.YSMXDV = "20";
    else
      if (PC0EW01.XWHCD == "60")
        VPOITM05.PC6XCTCD = "BELG";
        VPOITM05.YSMXDV = "20";
      else
        if (PC0EW01.XWHCD == "61")
          VPOITM05.PC6XCTCD = "NETH";
          VPOITM05.YSMXDV = "20";
        else
          /* 05/25/00 begin (for valid whse cd and xref blank*/
          /* get the ctry cd from xwhtbl)*/
          if (PC0EW01.XWHCD in XWHTBL.XWHCD
           && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            VPOITM05.PC6XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex];
            if (VPOITM05.PC6XCTCD == "USA")
              VPOITM05.YSMXDV = "10";
            else
              VPOITM05.YSMXDV = "20";
            end
          end
          /* MOVE 'USA' TO VPOITM05.PC6XCTCD;*/
          /* MOVE '10' TO VPOITM05.YSMXDV;*/
          /* 05/25/00 change ends*/
        end
      end
    end
  end

  if (PC0EW01.PC2CUXID > " ")
    VPOITM05.PC2INSEG = PC2REC.PC2INSEG;
  else
    VPOITM05.PC2INSEG = "000";
  end

  VPOITM05.OP1CUPO = PC0EW01.OP1CUPO;

   /* changed this 11/24/92 luutto*/
  VPOITM05.OP1PARTN = PC0EW01.OP1PARTN;

  VPOITM05.OP1CUOID = PC0EW01.OP1CUOID;
  VPOITM05.OP1NORID = PC0EW01.OP1NORID;
  VPOITM05.PC4ORTYP = PC0EW03.PC4ORTYP;
  VPOITM05.XDSCD = PC0EW03.XDSCD;

   /* ----------------------------------------------------------*/
    /* Default the status to open*/
   /* ----------------------------------------------------------*/

  if (VPOHDR02.YPUCD == "TN")
    VPOITM05.PC6STAT = "TN";
  else
    VPOITM05.PC6STAT = "OP";
  end


  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
  VPOITM05.PC6AIRNB = PC0EW01.PC6AIRNB;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0EW01.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0EW01.PC-FCTY-AFRGT-PCT;
  VPOITM05.PC6NILRF = PC0EW01.PC6NILRF;
  /* MOVE VPOHDR02.PC3SIFL TO VPOITM05.PC3SIFL;*/
  VPOITM05.PC6SZAVL = PC0EW01.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0EW01.PC6CONNO;
  VPOITM05.PC6MICHG = PC0EW01.PC6MICHG;
  VPOITM05.PC6PETS = PC0EW00.PC6PETS;
  VPOITM05.PC6OETS = PC0EW00.PC6OETS;
  VPOITM05.PC6RTADT = PC0EW00.PC6RTADT;
  VPOITM05.PC6ETSDT = PC0EW00.PC6ETSDT;
  VPOITM05.PC6ETALF = "N";
  VPOITM05.FB-LATE-BK-FL = "N"; /* late booking flag*/

   /* ************Y2K IN***********************/
  if (PC0EW01.PC6OETAL != 0)
   /* MOVE 19 TO PC0EW00.PC0EWFCT;*/
    PC0EW00.PC0EWMDT = PC0EW01.PC6OETAL;
    if (PC0EW00.PC0EWMYY > 57)
      PC0EW00.PC0EWFCT = 19;
    else
      PC0EW00.PC0EWFCT = 20;
    end
    PC0EW00.PC0EWFMM = PC0EW00.PC0EWMMM;
    PC0EW00.PC0EWFDD = PC0EW00.PC0EWMDD;
    PC0EW00.PC0EWFYY = PC0EW00.PC0EWMYY;
    VPOITM05.PC6OETAL = PC0EW00.PC0EWFDT;
  end
   /* ***********Y2K OUT**********************/

  VPOITM05.PC6TORIG = PC0EW02.PC6TORIG;
  VPOITM05.PC6TORDE = PC0EW02.PC6TORIG;
  VPOITM05.XIB-IBANK-CD = " "; /* Bank Code*/
  VPOITM05.PC-REL-PLN-REF-NBR = " ";
  VPOITM05.PC-LGL-PO-PRT-IND = " "; /* Print Indicator*/
  VPOITM05.ZZZCHGCT = 0;
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;


  set PCYREC empty;
  PCYREC.PCYFUNC = "A ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E263"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E263";
  exit stack;

end // end PC0E263

// Format and store size
Function PC0E264()

   /* ----------------------------------------------------------*/
    /* Initialize the item record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOSIZ02 empty;

  VPOSIZ02.ZFC-CRCY-CD = " "; /* init curr code*/
   /* ----------------------------------------------------------*/
    /* Default all of the price override fields to 'n'*/
   /* ----------------------------------------------------------*/

  PC0EW00.PC0EWIX2 = +1;
  while (PC0EW00.PC0EWIX2 <= 40)

    VPOSIZ02.PC7FOBFL[PC0EWIX2] = "N";

    PC0EW00.PC0EWIX2 = PC0EW00.PC0EWIX2 + 1;
  end


  VPOSIZ02.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0EW00.PC6ITMNB; /* PO item number*/
   /* MOVE PC0EW01.XOWCD TO PC7REC.XOWCD;*/

  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI;
                                   /* First position in size array*/
  PC0EW00.PC0EWIXM = 1; /* Size position in display storage*/
  PC0EW00.PC0EWVRF = "N";

  while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI)

    if (PC0EW02.SY4IDDSC[PC0EWIX1] != " "
     && PC0EW02.SY4IDDSC[PC0EWIX1] == PC0EM002.SY4IDDSC[PC0EWIXM])
      if (PC0EM002.PC7ORIGQ[PC0EWIXM] != 0)
        VPOSIZ02.PC7ORIGQ[PC0EWIX1] = PC0EM002.PC7ORIGQ[PC0EWIXM];
        VPOSIZ02.PC7ORDEQ[PC0EWIX1] = PC0EM002.PC7ORIGQ[PC0EWIXM];
        VPOSIZ02.FY4FOBPR[PC0EWIX1] = PC0EW02.PC0EWMPR[PC0EWIXM];

        if (PC0EW02.PC0EWMPR[PC0EWIXM] != PC0EW00.FY4FOBPR[PC0EWIX1]
         || PC0EW00.PC7FOBFL[PC0EWIX1] == "Y")
          VPOSIZ02.PC7FOBFL[PC0EWIX1] = "Y";
          PC0EW00.PC0EWVRF = "Y";
        end
      end

      PC0EW00.PC0EWIXM = PC0EW00.PC0EWIXM + 1;
    end
    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end


  if (PC0EW00.XGPCD == "02")
    PC0ES60(); /* get factory default price*/
  end

  VPOSIZ02.ZZZCHGCT = 0;

  XX0XS01();
  VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


  try
    call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E264"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E264";
  exit stack;

end // end PC0E264

// Update header status
Function PC0E265()


   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  PC0EW00.YPUCD = VPOHDR02.YPUCD;
  VPOHDR02.YPUCD = "OP";
  VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  set PCYREC empty;
  PCYREC.PCYFUNC = "U ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E265"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM002.XXXPRCNM = "PC0E265"; /* Process name*/

  exit stack;


end // end PC0E265

// Format header audit
Function PC0E266()

   /* ------------------------------------------------------------*/
   /* WRITE AN AUDIT RECORD FOR CHANGES IN P.O. HEADER*/
   /* ------------------------------------------------------------*/

  set VPOAHD02 empty; /* Initialize record*/
  VPOAHD02.XGPCD = VPOHDR02.XGPCD; /* Gpc code*/
  VPOAHD02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAHD02.PC3PONBR = VPOHDR02.PC3PONBR; /* P.O. number*/
  VPOAHD02.PC3POIDT = VPOHDR02.PC3POIDT; /* P.O. id*/
  VPOAHD02.FY1FCTYC = VPOHDR02.FY1FCTYC; /* P.O. Factory code*/
  VPOAHD02.PCFSECD = VPOHDR02.PCFSECD; /* Apparel season code*/
  VPOAHD02.PC3BUYMO = VPOHDR02.PC3BUYMO; /* Apparel buy month*/
  if (VPOHDR02.XGPCD == "03") /* if aprl*/
    VPOAHD02.YOACD = "79"; /* Status change code*/
  else
    VPOAHD02.YOACD = "02"; /* Status change code*/
  end
  VPOAHD02.PCIBFRA = PC0EW00.YPUCD; /* Before status code*/
  VPOAHD02.PCIAFTA = "OP"; /* After status code*/
  VPOAHD02.XXXPGUID = COMMAREA.CAUSERID; /* User id.*/
  VPOAHD02.PC4ORTYP = VPOHDR02.PC4ORTYP; /* P.O. type code*/

  XX0XS01(); /* Get date and time*/

  VPOAHD02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAHD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAHD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  PC0ESA9(); /* setup change memo/oa memo flags*/

  try
    call "VPOAHD02" ("A ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E"; /* Process name*/
  TA1REC.TA1LOC = "PC0E266 ADD HEADER AUDIT ROW ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAHD02.VPOAHD02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM002.XXXPRCNM = "PC0E266";

  exit stack;



end // end PC0E266

// Format item audit
Function PC0E267()


   /* ----------------------------------------------------------*/
    /* Initialize the item audit record and move the fields*/
    /* from display storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOAIT02.PCJSEQNO = PC0EW00.PCJSEQNO;
  VPOAIT02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION*/
  VPOAIT02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0EW01.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0EW01.SY2CLRID;
  VPOAIT02.XDMCD = PC0EW01.XDMCD;
  VPOAIT02.XQACD = PC0EW01.XQACD;
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOAIT02.XPGCD = PC0EW01.XPGCD;
  VPOAIT02.XUMCD = PC0EW01.XUMCD;
  VPOAIT02.XOWCD = PC0EW01.XOWCD;
  VPOAIT02.PC3POIDT = VPOHDR02.PC3POIDT;
  VPOAIT02.PCFSECD = VPOHDR02.PCFSECD;
  VPOAIT02.FY1FCTYC = VPOHDR02.FY1FCTYC;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOAIT02.YMTCD = PC0EW03.YMTCD;
  VPOAIT02.XWHCD = PC0EW01.XWHCD;
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD;
  VPOAIT02.PC4ORTYP = PC0EW03.PC4ORTYP;
  VPOAIT02.XDSCD = PC0EW03.XDSCD;
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV;
   /* ====>> add op fields to po audit item 6/10/91*/
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;
   /* ====<<*/
  if (PC0EW00.XGPCD == "03")
    VPOAIT02.PG1SC4CD = PC0EW01.PG1SC4CD;
  else
    VPOAIT02.PG1SC4CD = PG2REC.PG1SC4CD;
  end
  VPOAIT02.XPRCD = PG2REC.XPRCD;
  VPOAIT02.PC6PLAN = PC0EW00.PC6PLAN;
  VPOAIT02.PCJNETQT = PC0EW02.PC6TORIG; /* quantity changed*/
  VPOAIT02.PCIAFTN = PC0EW02.PC6TORIG;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;
  if (VPOHDR02.PC3NISFL == "Y")
    VPOAIT02.PCJAMEND = "1";
  else
    if (VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "2";
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end

  if (PC0EW00.XGPCD == "03") /* if aprl*/
    VPOAIT02.YOACD = "60"; /* New item code*/
  else
    VPOAIT02.YOACD = "17"; /* New item code*/
  end

  PC0ESA8(); /* get o/a and c/m flags*/


  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPOAIT02.ZZZCHGCT = 0;

  PC0ES16(); /* Insert item audit row*/

end // end PC0E267

// Format size audit
Function PC0E268()


   /* ----------------------------------------------------------*/
    /* Initialize the item audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.ZFC-CRCY-CD = " "; /* currency code*/
  VPOASZ02.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = PC0EW00.PCJSEQNO;
  VPOASZ02.SY1STNBR = VPOAIT02.SY1STNBR;
  VPOASZ02.SY2CLRID = VPOAIT02.SY2CLRID;
  VPOASZ02.XDMCD = VPOAIT02.XDMCD;
  VPOASZ02.XQACD = VPOAIT02.XQACD;
  VPOASZ02.XOWCD = VPOAIT02.XOWCD;
  VPOASZ02.PC2INSEG = VPOAIT02.PC2INSEG;
  VPOASZ02.XPGCD = VPOAIT02.XPGCD;
  VPOASZ02.XUMCD = VPOAIT02.XUMCD;
  VPOASZ02.PC6ETSDT = VPOAIT02.PC6ETSDT;
  VPOASZ02.PC6RTADT = VPOAIT02.PC6RTADT;
  VPOASZ02.PC6OETS = VPOAIT02.PC6OETS;
  VPOASZ02.YMTCD = VPOAIT02.YMTCD;
  VPOASZ02.XWHCD = VPOAIT02.XWHCD;
  VPOASZ02.PC2CUXID = VPOAIT02.PC2CUXID;
  VPOASZ02.OP1CUOID = VPOAIT02.OP1CUOID;
  VPOASZ02.OP1NORID = VPOAIT02.OP1NORID;
  VPOASZ02.OP1PARTN = VPOAIT02.OP1PARTN;

  PC0EW00.PC0EWIX1 = 1; /* Size position in display storage*/

  while (PC0EW00.PC0EWIX1 <= 40)

    VPOASZ02.PCIAFTN[PC0EWIX1] = VPOSIZ02.PC7ORIGQ[PC0EWIX1];
    VPOASZ02.PCKAFTPR[PC0EWIX1] = VPOSIZ02.FY4FOBPR[PC0EWIX1];
    VPOASZ02.PCKBFRPR[PC0EWIX1] = VPOSIZ02.FY4FOBPR[PC0EWIX1];


    PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1;
  end

  VPOASZ02.ZZZCHGCT = 0;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0ES17();
end // end PC0E268

// Move data to pcwrec
Function PC0E269()


  PCWREC.PC6SZAVL = PC0EW01.PC6SZAVL;
  PCWREC.PCWSIZE = PC0EW01.PC0EWFSZ;
  PCWREC.PCWDEVCD = PC0EW01.PC0EWSTN;
  PCWREC.XGPCD = PC0EW00.XGPCD;
  PCWREC.PO-REG-CD = VPOHDR02.PO-REG-CD;
  PCWREC.PC3PONBR = VPOHDR02.PC3PONBR;
  PCWREC.PC6ITMNB = PC0EW00.PC6ITMNB;
  PCWREC.PC3POIDT = VPOHDR02.PC3POIDT;
  PCWREC.PC4ORTYP = PC4REC.PC4ORTYP;
  PCWREC.XOWCD = PC0EW01.XOWCD;
  PCWREC.PCFSECD = VPOHDR02.PCFSECD;
  PCWREC.FY1FCTYC = VPOHDR02.FY1FCTYC;
  PCWREC.PC6ETSDT = VPOITM05.PC6ETSDT;
  PCWREC.PC6RTADT = VPOITM05.PC6RTADT;
  PCWREC.PC6OETS = VPOITM05.PC6OETS;
  PCWREC.YMTCD = VPOITM05.YMTCD;
  PCWREC.XDSCD = VPOITM05.XDSCD;
  PCWREC.SY1STNBR = PC0EW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0EW01.SY2CLRID;
  PCWREC.XDMCD = PC0EW01.XDMCD;
  PCWREC.XQACD = PC0EW01.XQACD;
  PCWREC.PC2INSEG = PC0EW01.PC2INSEG;
  PC0EW00.PC0EWCSO = PC0EW01.OP1CUOID;
  PC0EW00.PC0EWNSO = PC0EW01.OP1NORID;
  PC0EW00.PC0EW-CONFIRM-NO = PC0EW01.PC6CONNO;
  PCWREC.PCWUSER4 = PC0EW00.PCWUSER4;
  PCWREC.XPGCD = PC0EW01.XPGCD;
  PCWREC.XUMCD = PC0EW01.XUMCD;
  PCWREC.PC6PLAN = PC0EW00.PC6PLAN;
  PCWREC.XWHCD = PC0EW01.XWHCD;

  if (PC0EW01.PC2CUXID != " ")
    PCWREC.PC2CUXID = PC0EW01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

  PCWREC.YSMXDV = PC0EW03.YSMXDV;

  if (PC0EW00.PC0EWAFF == "A") /* add mode*/
    PCWREC.PCWFNC[1] = "A";
  else /* maintenance mode*/
    PCWREC.PCWFNC[1] = "C";
  end

end // end PC0E269

// ajust Blank Avail. tbl
Function PC0E270()
   /* ------------------------------------------------------------*/
   /* Move values to available inventory record.*/
   /* ------------------------------------------------------------*/
  set AVLREC empty;

  PC0EW00.PC0EWMLT = -1; /* decrement avail inventory*/

  PC0EW00.PC0EWACM = " ";
  PC0EW00.PC0EWAC1 = "PO"; /* po label*/
  PC0EW00.PC0EWAC2 = VPOITM05.PC3PONBR; /* po number*/
  PC0EW00.PC0EWAC3 = "STY"; /* style label*/
  PC0EW00.PC0EWAC4 = VPOITM05.SY1STNBR; /* finished style*/
  PC0EW00.PC0EWAC5 = "CLR"; /* color label*/
  PC0EW00.PC0EWAC6 = VPOITM05.SY2CLRID; /* finished style*/
  PC0EW00.PC0EWAC7 = "DEC"; /* increasing availability*/
  AVLREC.AV2CMNT = PC0EW00.PC0EWACM;

  PC0EW00.XXX1 = +1; /* initialize index*/
  while (PC0EW00.XXX1 <= 40)
    AVLREC.AVLADJQT[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    AVLREC.AVLADJQT[XXX1] = AVLREC.AVLADJQT[XXX1] * PC0EW00.PC0EWMLT;
    PC0EW00.XXX1 = PC0EW00.XXX1 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* get iseg code from cust xref table using factory code*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Clear record*/
  PC2REC.PC2CUXID = VPOITM05.FY1FCTYC;
  PC2REC.XGPCD = "03";

  PC0ES08(); /* Call Customer Cross Ref. Table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
    if (PC2REC.XXXSTAT == "A") /* Active status*/

      /* next sentence*/

    else
      converseLib.validationFailed(411); /* cust xref not active*/
    end
  else
    /* MOVE 410 TO EZEMNO;        /* not valid fcty to adj. inventory*/
    return; /* return previous process*/
                                  /* because this fcty not defined*/
                                  /* as a screener fcty.  Alt. Inv.*/
                                  /* should not be adjusted but they*/
                                  /* still want to process the*/
                                  /* po -- DHALES PCA272*/
  end

   /* added portion to check for "to" po and blank style for request*/
   /* to decrement alt inv for "TO" po's for blank styles   dhales*/
  if (converseVar.validationMsgNum == 0)
    if (PC0EW03.PC4ORTYP == "TO" /* if it is transfer order type*/
     && (PG2REC.PG2SCRFL == "B"  /* if it is blank, interim, or unfin*/
     || PG2REC.PG2SCRFL == "I"   /* tshirt style*/
     || PG2REC.PG2SCRFL == "U")) /**/
      AVLREC.SY1STNBR = PG2REC.SY1STNBR; /* style*/
      AVLREC.SY2CLRID = PG2REC.SY2CLRID; /* color*/
      AVLREC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
    else
      AVLREC.SY1STNBR = PG2REC.SY1BSTNB; /* blank style*/
      AVLREC.SY2CLRID = PG2REC.SY2BCLCD; /* blank color*/
      AVLREC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
    end
    AVLREC.XQACD = VPOITM05.XQACD; /* Quality*/
    AVLREC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
    AVLREC.PC2INSEG = PC2REC.PC2INSEG; /* Spec difference*/
    AVLREC.XPGCD = VPOITM05.XPGCD; /* Package*/
    AVLREC.XWHCD = "  "; /* Warehouse*/
    AVLREC.XXXUSER = "PC0E"; /* user id*/
    AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
    TA1REC.TA1PGMNM = "PC0E270";

    XSAVS10();

    if (AVLREC.AVLRTNCD == 0)
      return; /* return previous process*/
    else
      if (AVLREC.AVLRTNCD == 1)
        converseLib.validationFailed(586);

        if (AVLREC.AVLRTNCD == 5)
          converseLib.validationFailed(10); /* indicate parms missing*/
        end
      else
        if (AVLREC.AVLRTNCD == 2)
          converseLib.validationFailed(401); /* indicate not enough inventory*/
        else
          if (AVLREC.AVLRTNCD == 3)
            converseLib.validationFailed(12); /* intervening update*/
          else
            if (AVLREC.AVLRTNCD == 4)
              converseLib.validationFailed(11); /* Indicate not available*/
            end /* ==> indicate not available*/
          end /* ==> blank style not available*/
        end /* ==> not enough inventory*/
      end /* ==> invalid parameters*/
    end /* ==> style processed*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback all database changes*/

    PC0EM001.XXXPRCNM = "PC0E270"; /* process name*/

    exit stack; /* exit to redisplay map2*/
  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback all database changes*/
    PC0EM001.XXXPRCNM = "PC0E270"; /* process name*/
    exit stack; /* exit to redisplay map2*/

  end /* ;==> fcty not valid for cust xref*/

end // end PC0E270

// Get Plan number for item row
Function PC0E280()

   /* ----------------------------------------------------------*/
    /* Do a select max count on the item PO and calculate*/
    /* the plan number by adding 1 to the count returned.*/
   /* ----------------------------------------------------------*/

  set VPOITM05 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  VPOITM05.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOITM05.SY1STNBR = PC0EW01.SY1STNBR;
  VPOITM05.SY2CLRID = "*";


   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the count.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0EW00.PC6PLAN = PCYREC.PCYCOUNT + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PC0EW00.PC6PLAN = 1;
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E280"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0E280";
  exit stack;

end // end PC0E280

// get P.O. order type table
Function PC0ES01()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0EW03.PC4ORTYP = PC4REC.PC4ORTYP;
      PC0EM001.PC4ORTYP = PC4REC.PC4ORTYP;
      PC0EW02.PC4ORTYP = PC4REC.PC4ORTYP;
      PC0EW03.PC4SDESC = PC4REC.PC4SDESC;
      PC0EW02.PC4SDESC = PC4REC.PC4SDESC;
      PC0EM001.PC4SDESC = PC4REC.PC4SDESC;
      PC0EM001.XQACD = PC4REC.XQACD;
      PC0EW01.XQACD = PC4REC.XQACD;
      PC0EM002.XQACD = PC4REC.XQACD;
      PC0EW02.XQACD = PC4REC.XQACD;
      PC0EW00.PC0EWVQF = "Y"; /* Valid quality code*/
      if (PC0EW00.XGPCD == "03") /* apparel*/
        PC0EM001.XDSCD = PC4REC.XDSCD;
        PC0EW03.XDSCD = PC4REC.XDSCD;
      end
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(33);
      PC0EM001.XXXPRCNM = "PC0ES01";
      set PC0EM001.PC4ORTYP cursor, bold;
      exit stack;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0EM001.XXXPRCNM = "PC0ES01";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0EM001.XXXPRCNM = "PC0ES01";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

end // end PC0ES01

// get factory table row
Function PC0ES02()


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES02"; /* Process name*/

  exit stack;

end // end PC0ES02

// Move Header data to map
Function PC0ES03()

  PC0EW03.PO-REG-CD = VPOHDR02.PO-REG-CD;
  PC0EW02.PO-REG-CD = VPOHDR02.PO-REG-CD;
  PC0EW03.PC3PONBR = VPOHDR02.PC3PONBR;
  PC0EW02.PC3PONBR = VPOHDR02.PC3PONBR;

  PC0EW00.PC0EWPDT = VPOHDR02.PC3POIDT;

  if (PC0EW00.XGPCD == "03")
    PC0EW03.PCFSECD = VPOHDR02.PCFSECD;
    PC0EW02.PCFSECD = VPOHDR02.PCFSECD;
    PC0EM001.PC0EMPYR = VPOHDR02.PCFSECD;
    PC0EW02.PC0EWPYR = VPOHDR02.PCFSECD;
  else
    PC0EW03.PC0EWPYR = PC0EW00.PC0EWPYR;
    PC0EW02.PC0EWPYR = PC0EW00.PC0EWPYR;
    PC0EM001.PC0EMPYR = PC0EW00.PC0EWPYR;
  end
  PC0EW02.PC0EWDA1 = "-";
  PC0EW02.PC0EWDA2 = "-";
  PC0EW02.PC0EWDA3 = "-";

  PC0EW03.PC0EWPMO = PC0EW00.PC0EWPMO;
  PC0EW02.PC0EWPMO = PC0EW00.PC0EWPMO;
  PC0EM001.PC0EMPMO = PC0EW00.PC0EWPMO;

  PC0EW03.PC0EWDMO = PC0EW00.PC0EWDMO;
  PC0EW02.PC0EWDMO = PC0EW00.PC0EWDMO;
  PC0EM001.PC0EMDMO = PC0EW00.PC0EWDMO;

  PC0EW03.FY1FCTYC = VPOHDR02.FY1FCTYC;
  PC0EW02.FY1FCTYC = VPOHDR02.FY1FCTYC;
  PC0EM001.FY1FCTYC = VPOHDR02.FY1FCTYC;


  PC0EW03.PC4ORTYP = VPOHDR02.PC4ORTYP;
  PC0EW02.PC4ORTYP = VPOHDR02.PC4ORTYP;
  PC0EM001.PC4ORTYP = VPOHDR02.PC4ORTYP;

  PC0EW01.PC3BUYMO = VPOHDR02.PC3BUYMO;

end // end PC0ES03

// SELECT ROW PC2REC
Function PC0ES08()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0E"; /* Process name*/
  TA1REC.TA1LOC = "PC0ES08 SELECT UNIQUE CUST XREF ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0EM002.XXXPRCNM = "PC0LS08"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC0ES08

// Open cursor for VPOITM05
Function PC0ES10()

   /* ------------------------------------------------------------*/
   /* Declare cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "SH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES10"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES10";
  exit stack;

end // end PC0ES10

// Fetch VPOITM05 row
Function PC0ES11()

   /* ------------------------------------------------------------*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "NH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0EW00.PC6PLAN = VPOITM05.PC6PLAN;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES11"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES11";
  exit stack;

end // end PC0ES11

// Close cursor for VPOITM05
Function PC0ES12()

   /* ------------------------------------------------------------*/
   /* close cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "CH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES12"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES12";
  exit stack;

end // end PC0ES12

// Delete header row
Function PC0ES14()

   /* ------------------------------------------------------------*/
   /* This module deletes a table row.*/
   /* It will return and document system errors if unexpected*/
   /* return codes are found.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty;

  VPOHDR02.XGPCD = PCWREC.XGPCD; /* Gpc code*/
  VPOHDR02.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/


  set PCYREC empty;
  PCYREC.PCYFUNC = "D ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Delete table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES14 "; /* Process name*/
  TA1REC.TA1LOC = "DELETE TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES14"; /* Process name*/

  exit stack;

end // end PC0ES14

// Obtain dtrans.vtsloc01
Function PC0ES15()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Init rec*/

  TSCREC.TSCLOCCD = PC2REC.TSCLOCCD;


  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES15"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES15";
  exit stack;

end // end PC0ES15

// Insert item audit row
Function PC0ES16()



  set PCYREC empty;
  PCYREC.PCYFUNC = "A ";
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES16"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES16";
  exit stack;


end // end PC0ES16

// Insert size audit row
Function PC0ES17()



  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES17"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES17";
  exit stack;


end // end PC0ES17

// Get item audit seq nbr
Function PC0ES18()

   /* ----------------------------------------------------------*/
    /* Do a select max count on the item audit sequence number*/
    /* and add 1 to the count.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  VPOAIT02.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0EW01.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0EW01.SY2CLRID;
  VPOAIT02.XDMCD = PC0EW01.XDMCD;
  VPOAIT02.XQACD = PC0EW01.XQACD;
  VPOAIT02.XOWCD = PC0EW01.XOWCD;
  VPOAIT02.PC2INSEG = PC0EW01.PC2INSEG;
  VPOAIT02.XPGCD = PC0EW01.XPGCD;
  VPOAIT02.XUMCD = PC0EW01.XUMCD;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOAIT02.YMTCD = PC0EW03.YMTCD;
  VPOAIT02.XWHCD = PC0EW01.XWHCD;
  VPOAIT02.PC2CUXID = PC2REC.PC2CUXID;


   /* ****************************************************/

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the count.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0EW00.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PC0EW00.PCJSEQNO = 1;
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0RS18"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM AUDIT ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES18";
  exit stack;
end // end PC0ES18

// Declare cursor for vpoisi01
Function PC0ES19()

  set PCGREC empty;

  PCGREC.XGPCD = PC0EW00.XGPCD;
  PCGREC.PC3PONBR = VPOHDR02.PC3PONBR;
  PCGREC.SY1STNBR = PC0EW01.SY1STNBR;
  PCGREC.SY2CLRID = PC0EW01.SY2CLRID;
  PCGREC.XDMCD = PC0EW01.XDMCD;
  PCGREC.XQACD = PC0EW01.XQACD;
  PCGREC.XOWCD = PC0EW01.XOWCD;
  PCGREC.PC2INSEG = PC0EW01.PC2INSEG;
  PCGREC.XPGCD = PC0EW01.XPGCD;
  PCGREC.XUMCD = PC0EW01.XUMCD;
  PCGREC.XWHCD = PC0EW01.XWHCD;
  PCGREC.PC2CUXID = PC0EW01.PC2CUXID;
  PCGREC.OP1CUOID = PC0EW01.OP1CUOID;
  PCGREC.OP1NORID = PC0EW01.OP1NORID;
  PCGREC.OP1PARTN = PC0EW00.OP1PARTN;
  PCGREC.PC6ETSDT = PC0EW00.PC6ETSDT;
  PCGREC.PC6OETS = PC0EW00.PC6OETS;
  PCGREC.PC6RTADT = PC0EW00.PC6RTADT;
  PCGREC.YMTCD = PC0EW03.YMTCD;


   /* ------------------------------------------------------------*/
   /* Declare cursor for vpoisi01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("S1", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES19"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES19";
  exit stack;

end // end PC0ES19

// Fetch vpoidi01 row
Function PC0ES20()

   /* ------------------------------------------------------------*/
   /* Select a table row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("N1", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      VPOITM05.PC3SIFL = "Y"; /* Special instructions flag*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      VPOITM05.PC3SIFL = "N"; /* Special instructions flag*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES20"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES20";
  exit stack;

end // end PC0ES20

// Close cursor for vpoisi011
Function PC0ES21()

   /* ------------------------------------------------------------*/
   /* Close cursor for vpoisi01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("C1", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES21"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES21";
  exit stack;

end // end PC0ES21

// Open cursor for VPOITM05
Function PC0ES22()
   /* ------------------------------------------------------------*/
   /* Declare cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  PC0EW00.PC0EWCRF = "N"; /* Set end of cursor flag to no*/


  set PCYREC empty;
  PCYREC.PCYFUNC = "S6";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES22"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES22";
  exit stack;

end // end PC0ES22

// Fetch VPOITM05 row
Function PC0ES23()


  set PCYREC empty;
  PCYREC.PCYFUNC = "N6";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0EW00.PC0EWCRF = "Y"; /* Set cursor end flag to 'y'*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES23"; /* Process name*/
  TA1REC.TA1LOC = "SELECT ITEM ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES23";
  exit stack;

end // end PC0ES23

// Check item status codes
Function PC0ES24()
   /* -------------------------------------------------------*/
   /* Check the item status code and set the appropriate*/
   /* flags based upon the value.*/
   /* -------------------------------------------------------*/


  if (VPOITM05.PC6STAT == "OP" /* Status is open*/
   || VPOITM05.PC6STAT == "TN") /* Status is tentative (temporary)*/
    PC0EW00.PC0EWIOF = "Y"; /* Set Item open flag to yes*/
  else
    if (VPOITM05.PC6STAT == "CL") /* Status is closed*/
      PC0EW00.PC0EWICF = "Y"; /* Set Item close flag to yes*/
    else
      if (VPOITM05.PC6STAT == "NC") /* Status is nike closed*/
        PC0EW00.PC0EWICF = "Y"; /* Set Item close flag to yes*/
      else
        if (VPOITM05.PC6STAT == "FC") /* Status is closed*/
          PC0EW00.PC0EWICF = "Y"; /* Set Item close flag to yes*/
        else
        end
      end
    end
  end


   /* -------------------------------------------------------*/
   /* if an old item exists with the same plan key as the new*/
   /* item, use the plan number from the old item.*/
   /* the plan key for footwear is po number, style, color,*/
       /* rta, and mode.*/
   /* the plan key for apparel is po number, style, oets,*/
       /* ets, and mode.*/
   /* -------------------------------------------------------*/

  if (PC0EW00.XGPCD == "03"
   && PC0EW01.SY1STNBR == VPOITM05.SY1STNBR
   && PC0EW00.PC6OETS == VPOITM05.PC6OETS
   && PC0EW00.PC6OETS == VPOITM05.PC6ETSDT
   && PC0EW03.YMTCD == VPOITM05.YMTCD)
    PC0EW00.PC6PLAN = VPOITM05.PC6PLAN;
  end

  if (PC0EW00.XGPCD != "03" /* gpc '02' and '01'*/
   && PC0EW01.SY1STNBR == VPOITM05.SY1STNBR
   && PC0EW01.SY2CLRID == VPOITM05.SY2CLRID
   && PC0EW00.PC6RTADT == VPOITM05.PC6RTADT
   && PC0EW03.YMTCD == VPOITM05.YMTCD)
    PC0EW00.PC6PLAN = VPOITM05.PC6PLAN;
  end

end // end PC0ES24

// Close cursor for VPOITM05
Function PC0ES25()

   /* ------------------------------------------------------------*/
   /* Close cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "C6";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES25"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES25";
  exit stack;

end // end PC0ES25

// Open cursor for VPOITM05
Function PC0ES26()

   /* ------------------------------------------------------------*/
   /* Declare cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES26"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES26";
  exit stack;

end // end PC0ES26

// Fetch VPOITM05 row
Function PC0ES27()

   /* ------------------------------------------------------------*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "N2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (VPOITM05.YSMXDV != PC0EM001.YSMXDV
       && VPOITM05.XGPCD == "03")

        if (PC0EM001.PC2CUXID > " ") /* cust xref entered*/
          converseLib.validationFailed(215);
                                   /* cust xref has invalid div for this po*/
          PC0EM001.XXXPRCNM = "PC0ES27";
          set PC0EM001.PC2CUXID cursor, bold;
          /* ===> reset related data*/
          PC0EM001.OP1CUOID = 0;
          PC0EM001.OP1NORID = 0;
          PC0EM001.KUCCOID = 0;
          PC0EM001.KUMSTRID = 0;
          PC0EM001.XNXCD = 0;
          exit stack;
        else
          converseLib.validationFailed(216); /* warehouse has invalid div for this po*/
          PC0EM001.XXXPRCNM = "PC0ES27";
          set PC0EM001.XWHCD cursor, bold;
          exit stack;
        end
      end
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES27"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES27";
  exit stack;

end // end PC0ES27

// Close cursor for VPOITM05
Function PC0ES28()

   /* ------------------------------------------------------------*/
   /* close cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "C2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES28"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES28";
  exit stack;

end // end PC0ES28

// select row on address
Function PC0ES29()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table row access.*/
   /* ------------------------------------------------------------*/

  PC9REC.XGPCD = PC0EW00.XGPCD; /* GPC code*/
  PC9REC.PC3PONBR = VPOHDR02.PC3PONBR; /* P.O. number*/
  PC9REC.SY1STNBR = PC0EW01.SY1STNBR; /* Style number*/
  PC9REC.SY2CLRID = PC0EW01.SY2CLRID; /* Identifying color*/
  PC9REC.XDMCD = PC0EW01.XDMCD; /* Dimension code*/
  PC9REC.XQACD = PC0EW01.XQACD; /* Quality code*/
  PC9REC.XOWCD = PC0EW01.XOWCD; /* Owner group code*/
  PC9REC.PC2INSEG = PC0EW01.PC2INSEG; /* Spec difference code*/
  PC9REC.XPGCD = PC0EW01.XPGCD; /* Packaging type code*/
  PC9REC.XUMCD = PC0EW01.XUMCD; /* Unit of measure code*/
  PC9REC.PC2CUXID = PC0EW01.PC2CUXID; /* Customer xref ID*/
  PC9REC.XWHCD = PC0EW01.XWHCD; /* Warehouse code*/

   /* ------------------------------------------------------------*/
   /* Get the override address data.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3290" ("S ", SQLCA, PC9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    VPOITM05.PC61TMSH = "Y";
    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
    VPOITM05.PC61TMSH = "N";
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0EM001.XXXPRCNM = "PC0ES29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0EM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  TA1REC.TA1TBLKE = PC9REC.PC9KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ES29

// warehouse/cust xref/dc edits
Function PC0ES30()

   /* ------------------------------------------------------------*/
   /* Edit the warehouse and the warehouse/cust xref/*/
   /* distribution code combinations.*/
   /* ------------------------------------------------------------*/

   /* Since the division code comes from either the customer*/
   /* cross reference record or the warehouse record if the*/
   /* warehouse or customer xref are erased the division*/
   /* code should be also. Also set distribution to blanks.*/

  if (PC0EM001.PC2CUXID == " "
   && PC0EM001.XWHCD == " "
   && PC0EM001.KUCCOID == 0
   && PC0EM001.KUMSTRID == 0
   && PC0EM001.XNXCD == 0
   && PC0EM001.OP1CUOID == 0)
    PC0EM001.XWHABRV = " ";
    PC0EW01.XWHABRV = " ";
    PC0EM001.YSMXDV = " ";
    PC0EW03.YSMXDV = " ";
    PC0EM001.YSMSMDSC = " ";
    PC0EM001.XDSCD = " ";
    PC0EW03.XDSCD = " ";
    PC0EM001.XDSABRV = " ";
    PC0EW03.XDSABRV = " ";
    set PC0EM001.XWHCD cursor, bold;
    set PC0EM001.PC2CUXID bold;
    converseLib.validationFailed(214); /* enter warehouse and/or customer*/
    PC0EM001.XXXPRCNM = "PC0ES30";
    return;
  end

  if (PC0EM001.XWHCD == " ") /* warehouse not entered*/
    PC0EW01.XWHCD = " ";
    PC0EW02.XWHCD = " ";
    PC0EW01.XWHABRV = " ";
    PC0EM001.XWHABRV = " ";
    PC0EW00.XWHOWNGF = " ";
    if (PC0EM001.PC2CUXID > " ") /* cust Xref entered*/
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
    end
  else
    if (PC0EM001.PC2CUXID > " ") /* cust Xref entered*/
      PC0EM001.YSMXDV = PC2REC.YSMXDV;
      PC0EW03.YSMXDV = PC2REC.YSMXDV;
    else
      if (PC0EM001.XWHCD == "12"
       || PC0EM001.XWHCD == "60"
       || PC0EM001.XWHCD == "61")
        PC0EM001.YSMXDV = "20";
        PC0EW03.YSMXDV = "20";
      else
        PC0EM001.YSMXDV = "10";
        PC0EW03.YSMXDV = "10";
      end
    end


    if (PC0EM001.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PC0EW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PC0EM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      PC0EW01.XWHCD = PC0EM001.XWHCD;
      PC0EW02.XWHCD = PC0EM001.XWHCD;
      PC0EW00.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == PC0EW00.XGPCD
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == PC0EW00.XGPCD)
        /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(138);
        PC0EM001.XXXPRCNM = "PC0ES30";
        set PC0EM001.XWHCD cursor, bold;
        PC0EW01.XWHCD = " ";
        PC0EW02.XWHCD = " ";
      end
    else
      PC0EW00.XWHOWNGF = " "; /* Owner group flag*/
      PC0EM001.XWHABRV = " ";
      PC0EW01.XWHABRV = " ";
      converseLib.validationFailed(59);
      PC0EM001.XXXPRCNM = "PC0ES30";
      set PC0EM001.XWHCD cursor, bold;
      PC0EW01.XWHCD = " ";
      PC0EW02.XWHCD = " ";
    end
  end

  if (PC0EM001.YSMXDV != " ")
    YSMREC.YSMSMDSC = PC0EM001.YSMXDV;
    XSPCS02();
    if (SQLCA.VAGen_SQLCODE == 0)
      PC0EM001.YSMSMDSC = YSMREC.YSMSMDSC;
      PC0EW03.YSMSMDSC = YSMREC.YSMSMDSC;
    end
  end

  if (converseVar.validationMsgNum == 214 /* ; Pleas enter a warehouse or cust*/
   /* xref*/
   || converseVar.validationMsgNum == 138 /* Not valid for this gpc code*/
   || converseVar.validationMsgNum == 59  /* Invalid warehouse*/
   || converseVar.validationMsgNum == 147 /* Inactive customer xref*/
   || converseVar.validationMsgNum == 47  /* customer store dept not valid*/
   || converseVar.validationMsgNum == 45  /* customer xref not valid*/
   || converseVar.validationMsgNum == 47  /* customer store dept not valid*/
   || converseVar.validationMsgNum == 72) /* customer order number not valid*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Edit the warehouse based upon customer xref data being*/
   /* available.*/
   /* ------------------------------------------------------------*/

   /* Edit for gpc '03' - where po type not = 'cd', 'sd', or 'to'*/
      /* distribution code defaults from the po type table.*/

   /* Distribution code of 1 or 3*/

  if (PC0EW00.XGPCD == "03"   /* ; gpc = apparel*/
   && PC4REC.PC4ORTYP != "CD" /* ; po type not = 'cd'*/
   && PC4REC.PC4ORTYP != "SD" /* ; po type not = 'sd'*/
   && PC4REC.PC4ORTYP != "TO" /* ; po type not = 'to'*/
   && PC4REC.PC4ORTYP != "SS" /* ; po type not = 'ss'*/
   && PC4REC.PC4ORTYP != "CT" /* ; po type not = 'ct'*/
   && PC4REC.PC4ORTYP != "IR") /* ; po type not = 'ir'*/
    PC0EM001.XDSCD = PC4REC.XDSCD;
    PC0EW03.XDSCD = PC4REC.XDSCD;
    if (PC4REC.XDSCD == "1"
     || PC4REC.XDSCD == "3")
      if (PC0EM001.XWHCD != " ") /* Warehouse entered*/
        converseLib.validationFailed(201); /* warehouse invalid with distrib code*/
        PC0EM001.XXXPRCNM = "PC0ES30";
        set PC0EM001.XWHCD cursor, bold;
      else /* no warehouse*/
        if (PC0EM001.PC2CUXID != " " /* Customer xref entered*/
         && PC4REC.PC4ORTYP != "PX") /* ; po type not = 'px'*/
          if (PC2REC.YPCCD == "C"
           || PC2REC.YPCCD == "S")
             /* next*/
          else
            converseLib.validationFailed(202); /* cust xref type must be 'c' or 's'*/
            PC0EM001.XXXPRCNM = "PC0ES30";
            set PC0EM001.PC2CUXID cursor, bold;
            /* ===> reset related data*/
            PC0EM001.OP1CUOID = 0;
            PC0EM001.OP1NORID = 0;
            PC0EM001.KUCCOID = 0;
            PC0EM001.KUMSTRID = 0;
            PC0EM001.XNXCD = 0;
          end
        end
      end
    end


    /* Distribution code of 2*/


    if (PC4REC.XDSCD == "2")
      if (PC0EM001.XWHCD == " ")
        converseLib.validationFailed(227); /* warehouse requred if ds code = 2*/
        PC0EM001.XXXPRCNM = "PC0ES30";
        set PC0EM001.XWHCD cursor, bold;
      end
      if (PC0EM001.PC2CUXID == " ")
        converseLib.validationFailed(205); /* cust xref/cust nbr/ or order nbr*/
                                   /* required*/
        PC0EM001.XXXPRCNM = "PC0ES30";
        set PC0EM001.PC2CUXID cursor, bold;
      else
        if (PC2REC.YPCCD == "C"
         || PC2REC.YPCCD == "S")
           /* next*/
        else
          converseLib.validationFailed(202); /* cust xref type must be 'c' or 's'*/
          PC0EM001.XXXPRCNM = "PC0ES30";
          set PC0EM001.PC2CUXID cursor, bold;
          /* ===> reset related data*/
          PC0EM001.OP1CUOID = 0;
          PC0EM001.OP1NORID = 0;
          PC0EM001.KUCCOID = 0;
          PC0EM001.KUMSTRID = 0;
          PC0EM001.XNXCD = 0;
        end
      end
    end


    /* Distribution code of blank*/


    if (PC4REC.XDSCD == " ")

      if (PC4REC.PC4ORTYP == "PS"  /* ; po type = 'PS'*/
       && PC0EM001.PC2CUXID != " " /* Customer xref entered*/
       && PC2REC.YPCCD == "C")    
        /* next sentence*/
      else
        if (PC0EM001.XWHCD == " ")
          converseLib.validationFailed(59);
          PC0EM001.XXXPRCNM = "PC0ES30";
          set PC0EM001.XWHCD cursor, bold;
        end
        if (PC0EM001.PC2CUXID != " ")
          if (PC2REC.YPCCD != "N")
            converseLib.validationFailed(203); /* cust xref type must be 'n'*/
            PC0EM001.XXXPRCNM = "PC0ES30";
            set PC0EM001.PC2CUXID cursor, bold;
            /* ===> reset related data*/
            PC0EM001.OP1CUOID = 0;
            PC0EM001.OP1NORID = 0;
            PC0EM001.KUCCOID = 0;
            PC0EM001.KUMSTRID = 0;
            PC0EM001.XNXCD = 0;
          end
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* obtain the distribution method description*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XDSCD in XDSTBL.XDSCD)
    PC0EM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    PC0EW03.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    PC0EW03.XDSCD = PC0EM001.XDSCD;
  else
    PC0EM001.XDSABRV = " ";
    PC0EW03.XDSABRV = " ";
  end


  if (PC0EW00.XGPCD == "03"
   && PC4REC.PC4ORTYP != "IR") /* ; po type not = 'ir'*/
    return;
  end

   /* Edit for gpc '01' and gpc '02'*/

   /* the distribution code will be set based upon the cust/xref*/
   /* warehouse etc.*/

  if (PC0EM001.XWHCD != " ") /* warehouse entered*/
    if (PC0EM001.PC2CUXID == " ")
      PC0EM001.XDSCD = " ";
      PC0EW03.XDSCD = " ";
    else
      if (PC2REC.YPCCD == "C"
       || PC2REC.YPCCD == "S")
        PC0EM001.XDSCD = "2";
        PC0EW03.XDSCD = "2";
      else
        if (PC2REC.YPCCD == "N")
          PC0EM001.XDSCD = " ";
          /* CHANGED LITERAL BELOW TO ' ' (FROM '2') 11/16/92 LSUTTO*/
          PC0EW03.XDSCD = " ";
        end
      end
    end
  else /* no warehouse*/
    if (PC0EM001.PC2CUXID != " ")
      if (PC2REC.YPCCD == "C"
       || PC2REC.YPCCD == "S")
        PC0EM001.XDSCD = "1";
        PC0EW03.XDSCD = "1";
      else
        converseLib.validationFailed(204); /* nike type cust xref needs warehouse*/
        PC0EM001.XXXPRCNM = "PC0ES30";
        set PC0EM001.XWHCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* obtain the distribution method description*/
   /* ------------------------------------------------------------*/

  if (PC0EM001.XDSCD in XDSTBL.XDSCD)
    PC0EM001.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
    PC0EW03.XDSABRV = XDSTBL.XDSABRV[sysVar.arrayIndex];
  else
    PC0EM001.XDSABRV = " ";
    PC0EW03.XDSABRV = " ";
  end
end // end PC0ES30

// Fetch item size row
Function PC0ES31()

  set VPOSIZ02 empty;

  VPOSIZ02.XGPCD = PC0EW00.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOHDR02.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB;

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES31"; /* Process name*/
  TA1REC.TA1LOC = "SELECT ITEM ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES31";
  exit stack;

end // end PC0ES31

Function PC0ES40()

   /* ------------------------------------------------------------*/
   /* Read alternate for VPOITM05*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "SC";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0    /* record found OR*/
     || SQLCA.VAGen_SQLCODE == -811 /* records found*/
     || SQLCA.VAGen_SQLCODE == +100) /* no records found*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES40"; /* Process name*/
  TA1REC.TA1LOC = "SELECT ALTERNATE        ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES40";
  exit stack;

end // end PC0ES40

// retrieve the factory dflt prc
Function PC0ES60()
   /* ===>*/
  PC0EW00.PC0EWIX1 = PC0EW00.PC0EWFSI; /* Move 1st size to index 1*/

         /* set up factory key fields*/
  VFCTY003.XGPCD = PC0EW00.XGPCD;
  VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;

  PC0ES02(); /* retrieve factory*/

  if (SQLCA.VAGen_SQLCODE == 0)

    while (PC0EW00.PC0EWIX1 <= PC0EW00.PC0EWLSI) /* While not > last size*/

      if (VPOSIZ02.PC7ORDEQ[PC0EWIX1] != 0 /* AND QUANTITY ORDERED*/
       && VPOSIZ02.FY4FOBPR[PC0EWIX1] == 0) /* AND NO PRICE*/
        VPOSIZ02.FY4FOBPR[PC0EWIX1] = VFCTY003.FY1DFPRC; /**/

      end
      PC0EW00.PC0EWIX1 = PC0EW00.PC0EWIX1 + 1; /* price to the dflt*/
    end
  end

end // end PC0ES60

// verify Scheduler Code
Function PC0ES70()
   /* ------------------------------------------------------------*/
   /* Set-up and Select the row to display from the table.*/
   /* Note: the first row is all that needs to be selected to*/
         /* verify that it exists.*/
   /* ------------------------------------------------------------*/


  set PG1REC empty;
  PG1REC.XGPCD = "03";
  PG1REC.PG1SC4CD = PC0EM001.PG1SC4CD;
  PG1REC.PG1FCTCD = "**";


  PC0ES71(); /* Open cursor for row*/

  PC0ES72(); /* Fetch first row*/
   /* -------------------------------===> Prime read*/

   /* ------------------------------------------------------------*/
   /* If row found, Load Scheduler Code to display record*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC0EW01.PG1SC4CD = PC0EM001.PG1SC4CD;
    PC0EM001.PG1SC4NM = PG1REC.XXXUSER;
    PC0EW00.PC0EWDEF = "Y"; /* ===> data entered*/
  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the Scheduler invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(380); /* ===>scheduler missing or invalid*/
    PC0EM001.XXXPRCNM = "PC0ES70"; /* Module identification*/
    set PC0EM001.PG1SC4CD cursor, bold; /* Highlight userid*/
  end


  PC0ES73(); /* Close cursor for rows*/

   /* **                                                        ***/
   /* ********************** End of PC0ES70 ***********************/
end // end PC0ES70

// Select (SS) Set/Open  VSUSER01
Function PC0ES71()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SS", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0ES71"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES71"; /* Module identification*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0ES71 ***********************/
end // end PC0ES71

// Fetch  (SN) Next row  VSUSER01
Function PC0ES72()
   /* ------------------------------------------------------------*/
   /* Fetch Next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SN", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT (SN)  TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0ES72"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES72"; /* Module identification*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0ES72 ***********************/
end // end PC0ES72

// Close  (CS) Set       VSUSER01
Function PC0ES73()
   /* ------------------------------------------------------------*/
   /* Close Select Set from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("CS", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET (CS) OF ROWS    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0ES73"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES73"; /* Module identification*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0ES73 ***********************/
end // end PC0ES73

// Select (SA) Unique    VSUSER01
Function PC0ES74()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty;
  PG1REC.XGPCD = "03";
  PG1REC.XXXUSER = COMMAREA.CAUSERID;
  PG1REC.PG1SC4CD = "**";
  PG1REC.PG1FCTCD = "**";

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0EW01.PG1SC4CD = PG1REC.PG1SC4CD;
      PC0EM001.PG1SC4NM = PG1REC.XXXUSER;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0EW01.PG1SC4CD = " ";
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0ES74"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES74"; /* Module identification*/

   /* ===> commented out intentionally*/
   /* EZEFLO                          ; Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0ES74 ***********************/
end // end PC0ES74

// get factory table row
Function PC0ES75()


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Sel row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ES75"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0EM001.XXXPRCNM = "PC0ES75"; /* Process name*/

  exit stack;

end // end PC0ES75

// load chg memo and oa memo flag
Function PC0ESA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> po has printed on a form*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0EM001.XXXPRCNM = "PC0ESA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0eSA8 ***********************/
end // end PC0ESA8

// load chg memo and oa memo flag
Function PC0ESA9()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> PO has printed*/
    if (VPOAHD02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAHD02.PCJMEMO = " ";
      else
        VPOAHD02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAHD02.PCJOAPRT = " ";
      else
        VPOAHD02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0EM001.XXXPRCNM = "PC0ESA9"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAHD02.PCJMEMO = "N";
    VPOAHD02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0esa9 ***********************/
end // end PC0ESA9

// verify sty/clr on ord itm
Function PC0ESE1()
   /* ------------------------------------------------------------*/
   /* Style/Color/Dim processing*/
   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  OP2REC.XGPCD = PC0EM001.XGPCD;
  OP2REC.SY1STNBR = PC0EM001.SY1STNBR;
  OP2REC.SY2CLRID = PC0EM001.SY2CLRID;
  OP2REC.XDMCD = PC0EM001.XDMCD;
   /* MOVE ' ' TO OP2REC.OP2CGPCD;     /* COOR GROUP CODE*/

  PC0ESE2(); /* Use SA to scan sales order item table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* FOUND*/
   || SQLCA.VAGen_SQLCODE == -811) /* FOUND*/
    PC0EW01.OP1CUOID = PC0EM001.OP1CUOID;
    PC0EW01.OP1NORID = PC0EM001.OP1NORID;
    PC0EW01.PC2CUXID = PC0EM001.PC2CUXID;
    PC0EW02.OP1CUOID = PC0EM001.OP1CUOID;
    PC0EW02.OP1NORID = PC0EM001.OP1NORID;
    PC0EW02.PC2CUXID = PC0EM001.PC2CUXID;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
      set PC0EM001.OP1CUOID cursor, bold;
      set PC0EM001.OP1NORID bold;
      PC0EM001.XXXPRCNM = "PC0ESE1";
      converseLib.validationFailed(442); /* SALES ORDER ITEM NOT FOUND*/
      return;
    end
  end

  return;

   /* ------------- End of process PC0ESE1 -----------------------*/

end // end PC0ESE1

// Verify Order Number
Function PC0ESE2()
   /* ------------------------------------------------------------*/
   /* Obtain Sales Order Item from IOMOD IO0440.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SE", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* ROW NOT FOUND*/
     || SQLCA.VAGen_SQLCODE == -811) /* duplicate row*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0EM001.XXXPRCNM = "PC0ESE2"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0EM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------- End of STATEMENT Pcokse1 -----------------------*/

end // end PC0ESE2

//*** RECORD=PC0EW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0EW00 type basicRecord
  5 * char(834) ; 
    10 PC0EWAFF PC0EWAFF ; 
    10 PC0EWSSF PC0EWSSF ; 
    10 PC0EWKCH PC0EWKCH ; 
    10 PC0EWCCF PC0EWCCF ; 
    10 PC0EWDEF PC0EWDEF ; 
    10 PC0EWSFF PC0EWSFF ; 
    10 PC0EWSLF PC0EWSLF ; 
    10 PC0EWOSD PC0EWOSD ; 
    10 PC0EWVXF PC0EWVXF ; 
    10 PC0EWPCF PC0EWPCF ; 
    10 PC0EWPFF PC0EWPFF ; 
    10 PC0EWCBF PC0EWCBF ; 
    10 PC0EWCFL PC0EWCFL ; 
    10 PC0EWPOF PC0EWPOF ; 
    10 PC0EWVPF PC0EWVPF ; 
    10 PC0EWVQF PC0EWVQF ; 
    10 PC0EWPWF PC0EWPWF ; 
    10 PC0EWIOF PC0EWIOF ; 
    10 PC0EWICF PC0EWICF ; 
    10 PC0EWICN PC0EWICN ; 
    10 PC0EWSEF PC0EWSEF ; 
    10 PC0EWCRF PC0EWCRF ; 
    10 PC0EWOAF PC0EWOAF ; 
    10 PC0EWIPF PC0EWIPF [40] ; 
    10 PC0EWVRF PC0EWVRF ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 PC0EW-AFRGT-CALC-AREA PC0EW-AFRGT-CALC-AREA ; 
    10 PC0EWPDT PC0EWPDT ; 
      15 PC0EWPCR PC0EWPCR ; 
      15 PC0EWPYR PC0EWPYR ; 
        20 PC0EWYR1 PC0EWYR1 ; 
        20 PC0EWYR2 PC0EWYR2 ; 
      15 PC0EWPMO PC0EWPMO ; 
      15 PC0EWDMO PC0EWDMO ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 YPUCD YPUCD ; 
    10 PC0EWCDT PC0EWCDT ; 
      15 PC0EW1CH PC0EW1CH ; 
      15 * num(5) ; 
    10 PC0EWKEY PC0EWKEY ; 
    10 XXX1 XXX1 ; 
    10 PC6OETS PC6OETS ; 
    10 PC6PETS PC6PETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6PLAN PC6PLAN ; 
    10 PCJSEQNO PCJSEQNO ; 
    10 XWHOWNGF XWHOWNGF ; 
    10 PC0EWFDT PC0EWFDT ; 
      15 PC0EWFCT PC0EWFCT ; 
      15 PC0EWYMD PC0EWYMD ; 
        20 PC0EWFYY PC0EWFYY ; 
        20 PC0EWFMM PC0EWFMM ; 
        20 PC0EWFDD PC0EWFDD ; 
    10 PC0EWMDT PC0EWMDT ; 
      15 PC0EWMMM PC0EWMMM ; 
      15 PC0EWMDD PC0EWMDD ; 
      15 PC0EWMYY PC0EWMYY ; 
    10 PC0EWEDT PC0EWEDT ; 
      15 PC0EWEMM PC0EWEMM ; 
      15 PC0EWEDD PC0EWEDD ; 
      15 PC0EWEYY PC0EWEYY ; 
    10 PC0EWSYR PC0EWSYR ; 
      15 PC0EWSCR PC0EWSCR ; 
      15 PC0EWSYY PC0EWSYY ; 
    10 PC0EWCKF PC0EWCKF ; 
      15 PC0EWCK1 PC0EWCK1 ; 
      15 PC0EWCK2 PC0EWCK2 ; 
    10 PC0EWAYR PC0EWAYR ; 
      15 PC0EWAY1 PC0EWAY1 ; 
      15 PC0EWAY2 PC0EWAY2 ; 
    10 PC0EWIXM PC0EWIXM ; 
    10 PC0EWIX1 PC0EWIX1 ; 
    10 PC0EWIX2 PC0EWIX2 ; 
    10 PC0EWIX4 PC0EWIX4 ; 
    10 PC0EWMAX PC0EWMAX ; 
    10 PC0EWFSI PC0EWFSI ; 
    10 PC0EWLSI PC0EWLSI ; 
    10 PC0EWMLT PC0EWMLT ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 PC0EWOPR PC0EWOPR ; 
    10 PC0EWNPR PC0EWNPR ; 
    10 PC0EWPRI PC0EWPRI ; 
    10 PC0EWPCT PC0EWPCT ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PC0EWCID PC0EWCID ; 
      15 * num(8) ; 
      15 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 PC0EWMSG PC0EWMSG ; 
    10 XOWKEY XOWKEY ; 
      15 XWHCD XWHCD ; 
      15 XOWCD XOWCD ; 
    10 PC0EWACM PC0EWACM ; 
      15 PC0EWAC1 PC0EWAC1 ; 
      15 PC0EWAC2 PC0EWAC2 ; 
      15 * char(1) ; 
      15 PC0EWAC3 PC0EWAC3 ; 
      15 PC0EWAC4 PC0EWAC4 ; 
      15 * char(1) ; 
      15 PC0EWAC5 PC0EWAC5 ; 
      15 PC0EWAC6 PC0EWAC6 ; 
      15 * char(1) ; 
      15 PC0EWAC7 PC0EWAC7 ; 
    10 PCWUSER4 PCWUSER4 ; 
      15 PC0EWCSO num(9) ; 
      15 PC0EWNSO num(2) ; 
      15 PC0EW-CONFIRM-NO char(20) ; // confirmation number
      15 * char(276) ; 
    10 PC0EWPOC PC0EWPOC ; 
      15 PC0EWPCY PC0EWPCY ; 
        20 PC0EWPCC PC0EWPCC ; 
        20 PC0EWPYY PC0EWPYY ; 
      15 PC0EWDMM PC0EWDMM ; 
end // end PC0EW00

//*** RECORD=PC0EW01 ****
// PC0em001 map storage record
// ***********************
Record PC0EW01 type basicRecord
  10 PO-REG-CD PO-REG-CD ; 
  10 SY1STNBR SY1STNBR ; 
  10 PC0EWDVL PC0EWDVL ; 
  10 PC0EWSTN PC0EWSTN ; 
  10 PC0EWSDC PC0EWSDC ; 
  10 PC0EWRNL PC0EWRNL ; 
  10 PC0EWSTY PC0EWSTY ; 
  10 PC0EWCLR PC0EWCLR ; 
  10 PC0EWDIM PC0EWDIM ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 PC6TORIG PC6TORIG ; 
  10 XOWCD XOWCD ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 PC0EWFSZ PC0EWFSZ ; 
  10 PC0EWLSZ PC0EWLSZ ; 
  10 PC6SZAVL PC6SZAVL ; 
  10 PC6OETAL PC6OETAL ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PC6RTADT PC6RTADT ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 PC2CUXID PC2CUXID ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 OP1CUPO OP1CUPO ; 
  10 PC6AIRNB PC6AIRNB ; 
  10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
  10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
  10 PC6NILRF PC6NILRF ; 
  10 PC0EWCID PC0EWCID ; 
    15 * num(8) ; 
    15 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 PC6MICHG PC6MICHG ; 
  10 PC6CONNO PC6CONNO ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 PC3BUYMO PC3BUYMO ; 
end // end PC0EW01

//*** RECORD=PC0EW02 ****
// PC0em002 map storage record
// ***********************
Record PC0EW02 type basicRecord
  10 PC3PONBR PC3PONBR ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC0EWPOI PC0EWPOI ; 
    15 PC0EWPYR PC0EWPYR ; 
    15 PC0EWDA1 PC0EWDA1 ; 
    15 PC0EWPMO PC0EWPMO ; 
    15 PC0EWDA2 PC0EWDA2 ; 
    15 PC0EWDMO PC0EWDMO ; 
    15 PC0EWDA3 PC0EWDA3 ; 
    15 FY1FCTYC FY1FCTYC ; 
  10 PCFSECD PCFSECD ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XDMCD XDMCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC6TORIG PC6TORIG ; 
  10 XOWCD XOWCD ; 
  10 XWHCD XWHCD ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PC2CUXID PC2CUXID ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 YMTCD YMTCD ; 
  10 PC7ORIGQ PC7ORIGQ [40] ; 
  10 SY4IDDSC SY4IDDSC [40] ; 
  10 FY4FOBPR FY4FOBPR [40] ; 
  10 PC0EWMPR PC0EWMPR [40] ; 
end // end PC0EW02

//*** RECORD=PC0EW03 ****
// PC0em001 map header storage record
// ***********************
Record PC0EW03 type basicRecord
  10 PC3PONBR PC3PONBR ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC0EWPYR PC0EWPYR ; 
  10 PC0EWPMO PC0EWPMO ; 
  10 PC0EWDMO PC0EWDMO ; 
  10 PC0EWPOI PC0EWPOI ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PCFSECD PCFSECD ; 
  10 XGPCD XGPCD ; 
  10 XGPABRV XGPABRV ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC0EWSTL PC0EWSTL ; 
  10 YPUCD YPUCD ; 
  10 XDSCD XDSCD ; 
  10 XDSABRV XDSABRV ; 
  10 XGPDESC XGPDESC ; 
  10 YSMXDV YSMXDV ; 
  10 YSMSMDSC YSMSMDSC ; 
  10 YMTCD YMTCD ; 
  10 YMTABRV YMTABRV ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
end // end PC0EW03

// py-fob-prc (numeric)
DataItem PC0EW-AFRGT-CALC-AREA num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First date character
DataItem PC0EW1CH num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po literal
DataItem PC0EWAC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number
DataItem PC0EWAC2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style literal
DataItem PC0EWAC3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PC0EWAC4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color literal
DataItem PC0EWAC5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem PC0EWAC6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// avlrec affect
DataItem PC0EWAC7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// av comment area
DataItem PC0EWACM char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Applcation function flag
DataItem PC0EWAFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0EWAY1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0EWAY2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Character year
DataItem PC0EWAYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compute B grade flag
DataItem PC0EWCBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirm cancel flag
DataItem PC0EWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Check date
DataItem PC0EWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Confirmation Msg Flag
DataItem PC0EWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer order id
DataItem PC0EWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field one
DataItem PC0EWCK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field two
DataItem PC0EWCK2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check for characters
DataItem PC0EWCKF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0EWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor at end flag
DataItem PC0EWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 1
DataItem PC0EWDA1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 2
DataItem PC0EWDA2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 3
DataItem PC0EWDA3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem PC0EWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0EWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem PC0EWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id second month
DataItem PC0EWDMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0EWDVL char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit day
DataItem PC0EWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit date
DataItem PC0EWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit month
DataItem PC0EWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit year
DataItem PC0EWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem PC0EWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem PC0EWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem PC0EWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat month
DataItem PC0EWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First sizeindex
DataItem PC0EWFSI smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First size
DataItem PC0EWFSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat year
DataItem PC0EWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item close flag
DataItem PC0EWICF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item cancel flag
DataItem PC0EWICN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item open flag
DataItem PC0EWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item price flag
DataItem PC0EWIPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// General index 1
DataItem PC0EWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem PC0EWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 4
DataItem PC0EWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem PC0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed flag
DataItem PC0EWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// translate key
DataItem PC0EWKEY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last sizeindex
DataItem PC0EWLSI smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Last size
DataItem PC0EWLSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size index max
DataItem PC0EWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map day
DataItem PC0EWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map date
DataItem PC0EWMDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mulitplier
DataItem PC0EWMLT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map month
DataItem PC0EWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fob map price
DataItem PC0EWMPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warning message
DataItem PC0EWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map year
DataItem PC0EWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// old price
DataItem PC0EWNPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// allow price override flag
DataItem PC0EWOAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old price
DataItem PC0EWOPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Obtain size data flag
DataItem PC0EWOSD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymmdd
DataItem PC0EWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Price cursor flag
DataItem PC0EWPCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o.century
DataItem PC0EWPCR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// B grade percent
DataItem PC0EWPCT bin(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat century
DataItem PC0EWPCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.0. date
DataItem PC0EWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Price found flag
DataItem PC0EWPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id first month
DataItem PC0EWPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem PC0EWPOC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Price override flag
DataItem PC0EWPOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map 2 PO ID
DataItem PC0EWPOI char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated price
DataItem PC0EWPRI decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop up window flag
DataItem PC0EWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id year
DataItem PC0EWPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat year
DataItem PC0EWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ring literal
DataItem PC0EWRNL char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season century
DataItem PC0EWSCR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style development color
DataItem PC0EWSDC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size edit flag
DataItem PC0EWSEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size found flag
DataItem PC0EWSFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size loaded flag
DataItem PC0EWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select screen flag
DataItem PC0EWSSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status
DataItem PC0EWSTL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SD_STY_DEVL_NBR
DataItem PC0EWSTN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0EWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season year
DataItem PC0EWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season year
DataItem PC0EWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid product flag
DataItem PC0EWVPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid quality flag
DataItem PC0EWVQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Price override flag
DataItem PC0EWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validate cust xref flag
DataItem PC0EWVXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat date yymmdd
DataItem PC0EWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first digit
DataItem PC0EWYR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second digit
DataItem PC0EWYR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

