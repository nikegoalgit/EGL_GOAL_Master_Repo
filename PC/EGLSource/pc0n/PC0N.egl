package pc0n;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0N ****
// ***************** PRODUCTION ORDER SYSTEM ******************
// 
//                     P.O. Product Split
//                     ------------------
// 
//    This program will allow the user to access multiple
// P.O. Products for a split function. Access to this
// application can be done from a two applications.
//    Method 1 is by entering option 31 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to enter
// the desired criteria on a particular P.O. Product and be
// transfered to this application according to the entered
// data if 'S' was entered into the function feild.
//    Method 2 is by entering option 4 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to enter
// the desired criteria on a particular P.O. Product and be
// transfered to this application based on the selections made
// from the list screen and pressing PF20.
//    This program will allow for spliting multiple P.O Product
// rows transfered by the above two methods.
//    The user will be able to cycle to the next selected row
// by pressing enter and at the end, will get a conformation
// of successful update.  Hitting enter will then return to
// where it came.  Pressing PF3 in the cycle will return
// the user to the application to where it came.
//    The user will be able to transfer to other applications
// according to specified PF Keys.
//    The user will also beable to split out the remaining
// Balance to Ship by pressing a PF19.
// 
// 
//    Program Notes:
//    --------------
// 
// 1. There are multiple Select Sets in this program which use
//        temporary cursor switches, and are trash after use.
//        They not intended for use over several processes or
//        carried into one of the major process groups in this
//        program.
// 
//        - The PC0NWSWT cursor switch is the main temporary
//          index used in this application.
// 
//        - The PC0NWSW1 cursor is a second temporary cursor
//          used in this application when double nested
//          data base calls are necessary for processing.
// 
//        - The PC0NWSW2 cursor is a third temporary cursor
//          used in this application when triple nested
//          data base calls are necessary for processing.
// 
// 2. There are five indexes used in this program, each
//        having a specific purposes.
// 
//    Index:         Purpose:
//   ---------      -------------------------------------------
//    PC0MWIXR ----> Record index (for size index in record)
//             ---->              (& used in QTY change Verify)
//    PC0MWIXM ----> Size index   (for size index in the map)
//             ---->              (& used in QTY change Verify)
//    PC0MWIXS ----> Size index (for next size loaded)
//             ---->              (& used in scrolling sizes)
//    PC0MWIXT ----> Tempararory index (used/abuse/trash index)
// 
// 3.)    There are several processing groups in this program
//        that are identified by unique prefix group names.
// 
//    PC0N100  ----> Obtain data
//    PC0N200  ----> Format display data
//    PC0N300  ----> Check attention identifier
//    PC0N400  ----> Reset Hightlighted modifiable feilds
//    PC0N500  ----> Verify the entered data
//    PC0N600  ----> Process the valid input request
//    PC0N700  ----> Data Base Update routine
//    PC0N800  ----> Apparel Audit routine
//    PC0N900  ----> Footwear Audit routine
// 
// 
// 3.)    There are several records maintained in this program.
// 
//    PC0NW00  ----> General Working Storage
//                   (accum, indexes, and misc.)
// 
//    PC0NW01  ----> Main Working Storage
//                   (used as the source for maintenance D.B.
//                    updates)
// 
//    PC0NW02  ----> Pass Data working storage.
//                   (used to format pass data when transfer
//                    to lower level application is requested)
// 
//    PC0NW03  ----> Copy of PCWREC working storage.
//                   (used to re-format pcwrec when transfer
//                    to another application fails)
// 
//    PC0NW04  ----> Copy of vpoitm04 W.S. (Split From row)
//                   (used as a source for audits and
//                    data base updates. (Item)
// 
//    PC0NW05  ----> Copy of vposiz02 W.S. (Split from row)
//                   (used as a source for audits and
//                    data base updates. (size)
// 
//    PC0NW06  ----> Copy of VPOITM04 W.S. (merge to/inst row)
//                   (used as a source for audits and
//                    data base updates. (Item)
// 
//    PC0NW07  ----> Copy of vposiz02 W.S. (merge to/ins row)
//                   (used as a source for audits and
//                    data base updates. (size)
// 
// 4.)    For the working storage records, the only records
//        loaded with data, other than the initial load,
//        are the following:
// 
//    PC0NW00  ----> General Working Storage
// 
//    PC0NW01  ----> Main Working Storage
// 
//    PC0NW02  ----> Pass Data working storage.
// 
//    PC0NW04  ----> Copy of VPOITM04 W.S. (maintenance row)
//                   and this particular record is loaded
//                   with a cancel status when a PF15 or
//                   a change in destination w/ merge takes
//                   place.
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// ************************************************************
// **                                                        **
// *                                                          *
// *   DATE      NAME    DESCRIPTION OF CHANGE                *
// * --------   -------  ------------------------------------ *
// * 10/06/89   SFORD    New Application                      *
// *                                                          *
// * 06/12/90   SFORD    Fixed bug for selecting intransit    *
// *                     data, was using wrong state code.    *
// *                                                          *
// * 08/20/90   MCHRIS   pc0n522 and pc0n612 changed to allow *
// *                     a split if intransit if only mode    *
// *                     or ets was changed.                  *
// *                                                          *
// * 09/10/90   MCHRIS   corrected error - moving incorrect   *
// *                     audit seq nbr to poasz row on a cust *
// *                     /whse split.                         *
// *                                                          *
// * 09/26/90   lsutto   allow gpc 07 access
// *                                                          *
// * 11/15/90   PPETER   A51 - added misc charges (PC6MICHG)  *
// *                     to Map 1 and VPOITM01 processing.    *
// *                                                          *
// * 12/11/90   PPETER   A51 - program changes implemented with
// *                     misc charges field always 'autoskip, *
// *                     dark'. To implement, change only     *
// *                     PC0N210 as directed in the code.     *
// *                                                          *
// * 01/28/91   ZLefko   A77B - Display only user cancelled   *
// *                     items if status request is 'CX' and  *
// *                     display all cancelled items if       *
// *                     request is '*X', for GPC '03' only.  *
// * 02/12/91   PPETER   DB2 table changes
// *                                                          *
// * 03/05/91   chaert   A48 - only use items owner grp for   *
// *                     apparel finished goods. (see pc0n712)*
// *                                                         **
// * 06/10/91   lsutto   DB2 changes in pc0ns28
// *                                                         **
// * 10/09/91   DFRANC   Added 3 fields to the po item table **
// *                     working storage records pc0nw04 and **
// *                     pc0nw06 tables.  PC0NS04, PC0NS06   **
// *                     PC0NS14 and PC0NS16 subgroups that  **
// *                     move data back and forth from       **
// *                     PG6REC.                             **
// * 03/10/92   lsutto   DB2 changes in pc0ns27,s29          **
// * 03/24/92   GAMEN    When split by cust, blank out part  **
// *                     char.                               **
// * 06/15/92   GAMEN    When split by ETS, do not use new   **
// *                     ETS in the OETS field for lookup    **
// *                     in pc0ns56.                         **
// * 06/23/92   lsutto   round b-grade calc in xspcs04       **
// * 10/22/92   chaert   change xppc020 to xppc030, balance  **
// *                     to ship. add mode of trans.         **
// * 06/11/93   ksanfo   add po type "AD".                   **
// * 06/15/93   lsutto   jun 93 db2 chgs   add crcy to       **
// *                     pc7,pckrec...removed refer to pc9rec**
// * 09/10/93   dhales   csp 4.1 conversion need to change   **
// *                     pc0n580 to check numeric on ets     **
// * 10/15/93   GAMEN    Add changes for whse 60 and 61.     **
// * 11/04/94   SLEWIS   Add ORDER GROUP TO SPIT             **
// * 07/22/96   jniese   pcy199 - air freight percents       **
// * 06/03/97   PHARWO   PCA367 - PPR PROJECT, PO VIEWS      **
// * 07/04/97   jniese   PCA367 - ppr corrections
// * 11/13/97   oricha   Y2K modifications:  ezedtel replaces
// *                     the use of ezedte (pc0n580)
// * 04/16/98   KGRAHA   Initialize A/F nbr and A/F date on the
// *                     new Item rcd when splitting a PO.
// *                     Changes in PC0N730.
// * 10/20/98   MHUYNH   Generated due to changes to XPPC030
// * 08/27/99   SBUNGO   CHANGED TO USE NEW VIEW VPOITM04
// * 10/21/99   drammo   Modified to default bnk-cd to spaces
// *                     while inserting into itm tble.
// * 01/19/2000 VMATT    CLEANED UP VPOITM03
// * 02/07/00   SBUNGO   CHANGED TO USE VIEW VFCTY003
// * 03/24/00   SBUNGO   CHANGED TO USE VIEW VPOITM05
// * 04/10/00   MNADEL   VALIDATE PRODUCTS FOR SPAIN SHIPMENT.
// * 04/18/00   rmurth   corrected movement to
// *                     pc-rel-pln-ref-nbr of vpoitm05
// * 05/23/2000 vramac   No spilt maintenace for SAP PO #
// * 08/09/2000 vramac   No PC0E fast path for SAP PO #
// * 04/05/2001 averma   bypass print check for po type 'BA'
// * 09/04/2002 spitch   Changed to insert in vpoiad02 due to
//  changes in view
// ************************************************************
// *********************
Program PC0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  KUMREC KUMREC; // record
  PC0NW00 PC0NW00; // record
  PC0NW01 PC0NW01; // record
  PC0NW03 PC0NW03; // record
  PC0NW04 PC0NW04; // record
  PC0NW05 PC0NW05; // record
  PC0NW06 PC0NW06; // record
  PC0NW07 PC0NW07; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PCFREC PCFREC; // record
  PCOREC PCOREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOIAD02 VPOIAD02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use YACTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use YOHTBL {deleteAfterUse = yes}; // table
  use PC0NM.PC0NM001,  // forms
      PC0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0NM001 initial;

    set PC0NW00 empty;
    set PC0NW01 empty; /* ===> display/working storage record*/
    set PC0NW03 empty; /* ===> copy of pcwrec*/
    set PC0NW04 empty; /* ===> copy of selected item row before changes*/
    set PC0NW05 empty; /* ===> copy of selected item size row before changes*/
    set PC0NW06 empty; /* ===> copy of merge to item row*/
                                     /* (used for audits)*/
    set PC0NW07 empty; /* ===> copy of merge to item size row*/
                                     /* (used for audits)*/

    set PC2REC empty;
    set VPOHDR02 empty;
    set PC4REC empty;
    set PC5REC empty;
    set VPOITM05 empty;
    set VPOSIZ02 empty;
    set VPOAIT02 empty;
    set VPOASZ02 empty;
    set PCOREC empty;
    set PCYREC empty;

    set VFCTY003 empty;
    set FY4REC empty;
    set PG3REC empty;
    set TSCREC empty;
    set TSEREC empty;
    set TSOREC empty;
    set TSTREC empty;

    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PC0NW00.PC0NWSWR = "Y"; /* ===>request for data*/
    PC0NW00.PC0NWSWF = "Y"; /* ===>format map switch*/
    PC0NW00.PC0NWSWP = "N"; /* ===>format/protect map switch*/
    PC0NW00.PC0NWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PC0NW00.PC0NWMOD = "N"; /* ===>MODified data flag*/
    PC0NW00.PC0NW911 = "N"; /* ===>-911 flag*/
    PC0NW00.PC0NWUPF = "N"; /* ===>data base update flag*/
    PC0NW00.PC0NWTSY = 1; /* ===>total number of styles*/
    PC0NW00.PC0NWCSY = 1; /* ===>current style index*/
    PC0NW00.PC0NWIXS = 1; /* ===>size index*/

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138; /* ===> selection entered not valid*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag no authority*/
      end
    end

     /* ------------------------------------------------------------*/
     /* Load the PC system common pass data to the display record*/
     /* and Set requested map*/
     /* ------------------------------------------------------------*/

    if (PC0NW00.PC0NWXIT == "N") /* ===>exit flag for invalid GPC*/

      if (COMMAREA.CAFROMAP == "PC0J" /* ===>item selection application*/
       || COMMAREA.CAFROMAP == "PC0M" /* ===>item list application*/
       || COMMAREA.CAFROMAP == "PC0S") /* ===>item list application*/

        PC0NW03.CAUSERA = PCWREC.CAUSERA; /* ===> save pass data*/
        /* ===> save style key pass data in "Display Rec 3"*/

        while (PC0NW00.PC0NWCSY <= 20
         && PCWREC.PC6ITMNB[PC0NWCSY] > 0)
          PC0NW03.PC6ITMNB[PC0NWCSY] = PCWREC.PC6ITMNB[PC0NWCSY];
          PC0NW00.PC0NWCSY = PC0NW00.PC0NWCSY + 1;
        end

        if (PC0NW00.PC0NWCSY > 1) /* ==> styles exist*/
          PC0NW00.PC0NWTSY = PC0NW00.PC0NWCSY - 1; /* ===>tot nbr of styles*/
          PC0NW00.PC0NWCSY = 1; /* ===>reset current style index*/
        else /* ==> no styles*/
          PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag for no seq nbrs*/
        end /* ==> style check*/

      else /* ===> not from PC0J 0r PC0M*/

        PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0NW00.PC0NWXIT = "Y"; /* ===>exit flag for no seq nbrs*/

      end

    end

     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0N001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PC0N001: PC0N001();
    goto PC0N001;
  end // end main
end // end PC0N

// ===> Application Main Line <==
Function PC0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* * Check to see if a SQL Code of -911 occurred in the*/
     /* obtain the data section.*/
      /* If it did set a 911 error flag so the program will*/
      /* process the same style for the user.*/

   /* * Check to see if the exit application flag was set.*/

   /* * Process Split Function Program Logic*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911
   && PC0NW00.PC0NWSWR == "Y") /* ===> request for data switch*/
    PC0NW00.PC0NW911 = "Y"; /* ===> set -911 flag*/
  else
    PC0NW00.PC0NW911 = "N"; /* ===> reset -911 flag*/
  end

  if (PC0NW00.PC0NWXIT == "Y")

    PC0NW00.CAFROMAP = COMMAREA.CAFROMAP;
    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0NW00.CAFROMAP;
    PC0NW00.PC0NWSWR = "N"; /* request for data switch*/
    PC0NW00.PC0NWSWF = "Y"; /* Format the map switch*/
    PC0NW00.XXXPRCNM = "PC0N001"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
    /* Process Split Function Program Logic*/
   /* ------------------------------------------------------------*/

  PC0N100(); /* Obtain the data to display*/

  PC0N200(); /* Format and display the map*/

  PC0N300(); /* Check attention identifier*/

  PC0N400(); /* Reset fields to normal intensity*/

  PC0N500(); /* Verify the entered data*/

  if (converseVar.validationMsgNum == 0)
    PC0N600(); /* Process valid input request*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N001 ***********************/
end // end PC0N001

// -->Obtain The Data To Display
Function PC0N100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  set PC0NM001 initial; /* ===> map display record*/
  set PC0NW01 empty; /* ===> map display record*/
  set PC0NW04 empty; /* ===> saved copy of Item record*/

  PC0N110(); /* ===> get data from P.O. Item Table*/

  PC0N120(); /* ===> calc. dates for display record*/

  PC0N130(); /* ===> get data from P.O. Size Table*/

  PC0N140(); /* ===> get data from Size Desc. Trans. subroutine*/

  PC0N160(); /* ===> get P.O. Header info for FOB Access*/

  PC0N170(); /* ===> set-up and call for FOB data*/

  PC0N175(); /* ===> Get FOB override templete*/

  PC0N180(); /* ===> calc. total value (QTY * FOB)*/

  PC0N190(); /* ===> calc the Balance to ship data*/

  PC0NS50(); /* ===> Get P.O. Type data*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0N100 ***********************/
end // end PC0N100

// get data from P.O. Item Table
Function PC0N110()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.XGPCD = PC0NW03.XGPCD;
  VPOITM05.PO-REG-CD = PC0NW03.PO-REG-CD;
  VPOITM05.PC3PONBR = PC0NW03.PC3PONBR;
  VPOITM05.PC6ITMNB = PC0NW03.PC6ITMNB[PC0NWCSY]; /* ===>current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0NS03(); /* ===> load display record "PC0NW01" from item row "'VPOITM05"*/
    PC0NS04(); /* ===> save Split From item row*/
                                   /* "PC0KW04"*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0N110"; /* Module identification*/
  set PC0NM001.CATOAP cursor, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> no data to display*/
    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N110 ***********************/
end // end PC0N110

// calc. dates for display record
Function PC0N120()
   /* ------------------------------------------------------------*/
   /* ===> ETS date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0NS01(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0NM001.PC0NMEST cursor, skip, bold; /* ===>ETS Date display*/
      return;
    end

    PC0NW01.PC0NWDT1 = TA2REC.TA2GRGA; /* ===>ETS Date display*/
    PC0NW01.PC0NWSB1 = TA2REC.TA2GRGA;
                                   /* ===>split by ETS Date display*/

  else

    PC0NW01.PC0NWDT1 = " "; /* ===>ETS Date display*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N120 ***********************/
end // end PC0N120

// get data from P.O. Size Table
Function PC0N130()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = PC0NW01.XGPCD;
  VPOSIZ02.PO-REG-CD = PC0NW01.PO-REG-CD;
  VPOSIZ02.PC3PONBR = PC0NW01.PC3PONBR;
  VPOSIZ02.PC6ITMNB = PC0NW01.PC6ITMNB; /* ===> current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0NS05(); /* ===>save copy split from size row*/
    /* ------------------------------------------------------------*/
     /* laod display record with siz data.*/
    /* ------------------------------------------------------------*/

    move 0 to PC0NW01.PC0NWSQT[1] for all; /* ===>load*/
    move VPOSIZ02.PC7ORDEQ to PC0NW01.PC7ORDEQ[1] for all; /* ===>load*/
    move VPOSIZ02.PC7FOBFL to PC0NW01.PC7FOBFL[1] for all; /* ===>load*/
    move VPOSIZ02.FY4FOBPR to PC0NW01.FY4FOBPR[1] for all; /* ===>load*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0N130"; /* Module identification*/
  set PC0NM001.PO-REG-CD cursor, bold; /* Highlight*/
  set PC0NM001.PC3PONBR cursor, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 18; /* =======> no data to display*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N130 ***********************/
end // end PC0N130

// Get data from Size Desc Trans
Function PC0N140()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PC0NW01.XGPCD;
  PG3REC.SY1STNBR = PC0NW01.SY1STNBR;
  PG3REC.SY2CLRID = PC0NW01.SY2CLRID;
  PG3REC.XDMCD = PC0NW01.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301(); /* Get valid sizes*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    move PG3REC.SY4IDDSC to PC0NW01.SY4IDDSC[1] for 40; /* ===>load display record*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0NW00.XXXPRCNM = "PC0N140"; /* Module identification*/
  PC0NW00.PC0NWSWM = "1"; /* request for map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    PC0NW00.PC0NW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N140 ***********************/
end // end PC0N140

// Select (S ) Unique VPOHDR01
Function PC0N160()
   /* ------------------------------------------------------------*/
   /* Initialize the secondary key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC0NW01.XGPCD;
  VPOHDR02.PO-REG-CD = PC0NW01.PO-REG-CD;
  VPOHDR02.PC3PONBR = PC0NW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0NW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC0NW01.PC3CRDT = VPOHDR02.PC3CRDT;
    PC0NW01.XSECD = VPOHDR02.XSECD;
    PC0NW01.PCFSEYR = VPOHDR02.PCFSEYR;

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0N160"; /* Module identification*/
  set PC0NM001.PO-REG-CD skip, bold; /* Highlight*/
  set PC0NM001.PC3PONBR skip, bold; /* Highlight*/
  set PC0NM001.PC0NMPYR skip, bold; /* Highlight*/
  set PC0NM001.PC0NMPMO skip, bold; /* Highlight*/
  set PC0NM001.PC0NMPDM skip, bold; /* Highlight*/
  set PC0NM001.FY1FCTYC skip, bold; /* Highlight*/
  set PC0NM001.PC4ORTYP skip, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0NW00.PC0NWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N160 ***********************/
end // end PC0N160

// set-up to get (FOB data)
Function PC0N170()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  set PCOREC empty;

  PCOREC.XGPCD = PC0NW01.XGPCD;
  PCOREC.FY1FCTYC = PC0NW01.FY1FCTYC;
  PCOREC.SY1STNBR = PC0NW01.SY1STNBR;
  PCOREC.SY2CLRID = PC0NW01.SY2CLRID;
  PCOREC.XDMCD = PC0NW01.XDMCD;
  PCOREC.XQACD = PC0NW01.XQACD;
  PCOREC.PC2INSEG = PC0NW01.PC2INSEG;
  PCOREC.XUMCD = PC0NW01.XUMCD;
  PCOREC.XPGCD = PC0NW01.XPGCD;
  PCOREC.PC3POIDT = PC0NW01.PC3POIDT;
  PCOREC.PC3CRDT = PC0NW01.PC3CRDT;
  PCOREC.PCFSEYR = PC0NW01.PCFSEYR;
  PCOREC.XSECD = PC0NW01.XSECD;

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* Load the prices to display working storage*/
   /* ------------------------------------------------------------*/

  if (PCOREC.PCORECPF == "N")
    PC0NW00.PC0NWPFF = "N"; /* ===> Price found flag*/
    if (PCWREC.XXXMSGNO == 12 /* ===> updated by another user msg*/
     || PCWREC.XXXMSGNO == 1) /* ===> update successful*/
      /* ========= Next Sentence ================>*/
    else
      PCWREC.XXXMSGNO = 118; /* No FOB price available*/
      PC0NW00.XXXPRCNM = "PC0N170"; /* Module identification*/
    end
  else
    PC0NW00.PC0NWPFF = "Y"; /* ===> Price found flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N170 ***********************/
end // end PC0N170

// Get FOB ovrd templete
Function PC0N175()
   /* ------------------------------------------------------------*/

   /* For Inquiry Process:*/
     /* Use the single size row associated with the Item row*/
   /* that was passed/selected from the calling program.*/
   /* This templete is built because the factory FOB prices may*/
   /* change and the prices reflected on the size row may not*/
   /* be current.*/

   /* Note: The Override templete is made up of 3 arrays*/

       /* PC0NW01.PC0NWVRD(PC0NWIXT)*/
        /* - loaded with factory Prices initially*/
        /* - overlayed with any found override prices*/

       /* PC0NW01.PC0NWVRF(PC0NWIXT)*/
        /* - loaded with "N" initially*/
        /* - overlayed with "Y" for  found override prices*/

       /* PC0NW01.PC0NWVRQ(PC0NWIXT)*/
        /* - accumulated on order QTYs for all items in item set*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and process*/
    /* The size row which has already been selected and*/
    /* resides in PC7REC.*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWPFF == "Y") /* ===> factory price record foung*/
    move PCOREC.FY4FOBPR to PC0NW01.PC0NWVRD[1] for all;
  else
    move 0 to PC0NW01.PC0NWVRD[1] for all; /* ===> initialize override price*/
  end
  move "N" to PC0NW01.PC0NWVRF[1] for all; /* ===> initialize override flag*/
  move 0 to PC0NW01.PC0NWVRQ[1] for all; /* ===> initialize qtys*/

   /* ------------------------------------------------------------*/
   /* -  Accumulate FOB ovrd data asso. with the Item row.*/
       /* Load the FOB price tempelete with flag and price*/
       /* for the 40 size bucket associated with the item row.*/
   /* -  Accumulate the total QTYs asso. with each row.*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXT = 1; /* ===> initialize temp. index*/

  while (PC0NW00.PC0NWIXT <= 40) /* Until all sizes read*/

    /* ------------------------------------------------------------*/
     /* accumulate FOB ovrd data asso. with the item row.*/
    /* ------------------------------------------------------------*/

    if (VPOSIZ02.PC7FOBFL[PC0NWIXT] == "Y") /* ===> load FOB override data*/

      PC0NW01.PC0NWVRD[PC0NWIXT] = VPOSIZ02.FY4FOBPR[PC0NWIXT];
      PC0NW01.PC0NWVRF[PC0NWIXT] = VPOSIZ02.PC7FOBFL[PC0NWIXT];

    end

    /* ------------------------------------------------------------*/
     /* accumulate the total on-order size QTYs asso. with each row*/
    /* ------------------------------------------------------------*/

    PC0NW00.PC0NWOR = VPOSIZ02.PC7ORDEQ[PC0NWIXT];
    PC0NW01.PC0NWVRQ[PC0NWIXT] = PC0NW01.PC0NWVRQ[PC0NWIXT] + PC0NW00.PC0NWOR;

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1; /* ===> increment temp. index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N175 ***********************/
end // end PC0N175

// Calc. the total value for QTYs
Function PC0N180()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all the valued size quanitites*/

   /* Programming Note:*/

           /* PC0NW00.PC0NWVAL is used to calculate the value*/
            /* (accum value)   on a single size level.*/

           /* PC0NW01.PC0NWTVL is used to calculate the total*/
            /* (total value)   value for all sizes and thus is*/
                            /* saved in the map display record.*/
                            /* It is recalculate when maintenance*/
                            /* to Sizes or FOBs occur.*/

   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXS = 1; /* ===> Initialize size index*/

  PC0NW00.PC0NWVAL = 0; /* ===> initialize quantity value*/
  PC0NW01.PC0NWTVL = 0; /* ===> initialize total value*/

  while (PC0NW00.PC0NWIXS <= 40) /* ===> and size index at max*/

    if (PC0NW01.PC7ORDEQ[PC0NWIXS] > 0)

      if (PC0NW01.PC7FOBFL[PC0NWIXS] == "Y") /* ===> FOB override flag*/
        PC0NW00.FY4FOBPR = PC0NW01.FY4FOBPR[PC0NWIXS];
                                   /* ===> P.O. FOB*/
      else
        PC0NW00.FY4FOBPR = FY4REC.FY4FOBPR[PC0NWIXS];
                                   /* ==>Factory FOB*/
      end
      PC0NW00.PC7ORDEQ = PC0NW01.PC7ORDEQ[PC0NWIXS];

      PC0NW00.PC0NWVAL = PC0NW00.PC7ORDEQ * PC0NW00.FY4FOBPR;
      PC0NW01.PC0NWTVL = PC0NW01.PC0NWTVL + PC0NW00.PC0NWVAL;

    end

    PC0NW00.PC0NWIXS = PC0NW00.PC0NWIXS + 1;

  end

  PC0NW00.PC0NWIXS = 1; /* ===> re-Initialize size index*/

  PC0NW01.PC0NWTVL = PC0NW01.PC0NWTVL + PC0NW01.PC6MICHG;

   /* **                                                        ***/
   /* ********************** End of PC0N180 ***********************/
end // end PC0N180

// Set-up/get "Balance To Ship"
Function PC0N190()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  set PC5REC empty; /* ===> initialize record*/

  PC5REC.XGPCD = PC0NW01.XGPCD; /* ===>*/
  PC5REC.PO-REG-CD = PC0NW01.PO-REG-CD; /* ===>*/
  PC5REC.PC3PONBR = PC0NW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  PC5REC.SY1STNBR = PC0NW01.SY1STNBR; /* ===>*/
  PC5REC.SY2CLRID = PC0NW01.SY2CLRID; /* ===>*/
  PC5REC.XDMCD = PC0NW01.XDMCD; /* ===>*/
  PC5REC.XQACD = PC0NW01.XQACD; /* ===>*/
  PC5REC.XOWCD = PC0NW01.XOWCD; /* ===>*/
  PC5REC.PC2INSEG = PC0NW01.PC2INSEG; /* ===>*/
  PC5REC.XPGCD = PC0NW01.XPGCD; /* ===>*/
  PC5REC.XUMCD = PC0NW01.XUMCD; /* ===>*/
  PC5REC.OP1PARTN = PC0NW01.OP1PARTN; /* ===> so #*/
  PC5REC.OP1CUOID = PC0NW01.OP1CUOID; /* ===> so #*/
  PC5REC.OP1NORID = PC0NW01.OP1NORID; /* ===> so #*/
  PC5REC.PC5ERFL = "N";

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  PC5REC.PC2CUXID = PC0NW01.PC2CUXID; /* ===>*/
  PC5REC.XWHCD = PC0NW01.XWHCD; /* ===>*/
  PC5REC.YMTCD = PC0NW01.YMTCD; /* ===>*/

  XPPC030(); /* ===> call subroutine to calc. "Balance to Ship"*/

  move PC5REC.PC5BALC to PC0NW00.PC0NWBAL[1] for all;

   /* **                                                        ***/
   /* ********************** End of PC0N190 ***********************/
end // end PC0N190

// -->Format And Converse Map 1
Function PC0N200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PC0NW00.PC0NWSWF == "Y") /* ===> Map must be formatted*/

      if (PC0NW00.PC0NWSWP == "Y") /* ===> Map data must be protected*/

        PC0N220(); /* ===> Format all display data*/
                                   /* protected*/

      else

        /* ------------------------------------------------------------*/
         /* Clear the fields in the map storage area to be formatted.*/
        /* ------------------------------------------------------------*/

        set PC0NM001 initial;

        if (PC0NW01.PC6STAT == "CX"
         || PC0NW01.PC-SAP-PO-NBR > " ")
          PC0N220(); /* ===> Format all display data*/
                                   /* protected*/
        end

        /* ------------------------------------------------------------*/
         /* Format the map data, excluding size data*/
        /* ------------------------------------------------------------*/

        PC0N210(); /* ===> Format the literals*/

        PC0N230(); /* ===> Format the display data*/

        PC0N240(); /* ===> Format pass record fields*/
        /* ------------------------------------------------------------*/
         /* Reset flags for new Split request and size data*/
        /* ------------------------------------------------------------*/

        PC0NW00.PC0NWSWF = "N"; /* ===> Format the map switch*/
        PC0NW00.PC0NWSWS = "Y"; /* ===> sizes must be formatted*/
        PC0NW00.PC0NWF20 = "Y"; /* ===> first 20 sizes flag*/
        PC0NW00.PC0NWIXS = 1; /* ===> initialize size index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Format the map data, size data*/
    /* ------------------------------------------------------------*/

    if (PC0NW00.PC0NWSWS == "Y") /* ===> sizes must be formated*/

      if (PC0NW00.PC0NWSWP == "Y") /* ===> Map data must be protected*/

        PC0N250(); /* ===> Format the valued size display*/
                                   /* data*/
        /* ===================> protected*/
      else

        PC0N260(); /* ===> Format the valued size display*/
                                   /* data*/
        /* ===================> unprotected*/

        if (PC0NW01.PC6STAT == "CX"
         || PC0NW01.PC-SAP-PO-NBR > " ")
          PC0N250(); /* ===> Format the valued size display*/
                                   /* data*/
          /* ===================> protected*/
        end /* ===> protect map data switch*/

      end /* ===> protect map data switch*/

    end

  else /* ===>error detected*/

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0NM001.XXXPRCNM = PC0NW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (PC0NW00.XXXPRCNM == " " /* Module identification*/
     && PC5REC.XXXPRCNM > " ")  /* Module identification*/
      PC0NM001.XXXPRCNM = PC5REC.XXXPRCNM; /* Module identification*/
    end /* ===> error detected in "Balance to*/
                                   /* Ship" process*/

    set PC0NM001 alarm; /* Indicate sound alarm*/

  end

  if (PC0NW01.XGPCD == "03")

    if (PC0NW01.PC4ORTYP == "XD" 
     || PC0NW01.PC4ORTYP == "AD" /* asia pacific direct ship*/
     || PC0NW01.PC4ORTYP == "XI")
      set PC0NM001.PC0NMSB3 skip, invisible; /* ===> Split literal 3 "CUST"*/
    end

    if (PC0NW01.YSMXDV == "20")
      if (PC0NW01.PC4ORTYP == "SD"
       || PC0NW01.PC4ORTYP == "CD")
        set PC0NM001.PC0NMSB3 skip, invisible; /* ===> Split literal 3 "CUST"*/
      end
    end

  end

  converse PC0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0NW00.XXXPRCNM = " "; /* Module identification*/
  PC0NM001.XXXPRCNM = "PC0N"; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0N290(); /* ===> pop up window routine*/
  end

  COMMAREA.CATOAP = PC0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0NM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0N200 ***********************/
end // end PC0N200

// Format the literals
Function PC0N210()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PC0NM001.PC0NMCSY = PC0NW00.PC0NWCSY; /* ===> current style index*/
  PC0NM001.PC0NMTSY = PC0NW00.PC0NWTSY; /* ===> total styles*/

  if (PC0NW01.XGPCD == "02")

    if (PC0NW01.PC4ORTYP == "FT"
     || PC0NW01.PC4ORTYP == "OR"
     || PC0NW01.PC4ORTYP == "S1"
     || PC0NW01.PC4ORTYP == "S4")
      set PC0NM001.PC0NMSL2 skip, invisible; /* ===> Split literal 2 "MODE"*/
      set PC0NM001.PC0NMSL3 skip, invisible; /* ===> Split literal 3 "CUST"*/
      set PC0NM001.PC0NMSL4 skip, invisible; /* ===> Split literal 4 "WHSE"*/
    end

  end

  set PC0NM001.PC0NMPLL skip, invisible; /* ===> NEW PLAN LITERAL*/

  if (COMMAREA.CACLVL[10] == "N") /* ===> Price security flag*/
    set PC0NM001.PC0NMTTL skip, invisible; /* ====>  Total value literal*/
    set PC0NM001.PC0NMTVL skip, invisible; /* ====>  Total Value*/
  end

  if (PC0NW01.XGPCD != "03")
    set PC0NM001.PC0NMMCH skip, invisible; /* ====>  Misc charges literal*/
    set PC0NM001.PC6MICHG skip, invisible; /* ====>  Misc charges*/
  end

   /* ======================================================*/
   /* 12/11/90 - A51 - To activate misc charges, delete the*/
              /* following two lines of code.  ppeter.*/
  set PC0NM001.PC0NMMCH skip, invisible; /* ====>  Misc charges literal*/
  set PC0NM001.PC6MICHG skip, invisible; /* ====>  Misc charges*/
     /* A51 - to activate misc charges, delete the*/
           /* above two lines of code (and these comments).*/
   /* ======================================================*/
   /* **                                                        ***/
   /* ********************** End of PC0N210 ***********************/
end // end PC0N210

// Format data protected
Function PC0N220()
   /* ------------------------------------------------------------*/
   /* Format the data in the map protected for display on a*/
   /* conformation update.*/
   /* ------------------------------------------------------------*/

  set PC0NM001.CATOAP cursor; /* ====>*/

  set PC0NM001.PC0NMSB1 skip; /* ====>  Split by 1 ETS Date*/

  if (PC0NW01.XGPCD == "02")
    if (PC0NW01.PC4ORTYP == "FT"
     || PC0NW01.PC4ORTYP == "OR"
     || PC0NW01.PC4ORTYP == "S1"
     || PC0NW01.PC4ORTYP == "S4")
      /* ========== Next Sentence ==========>*/
    else
      set PC0NM001.PC0NMSB2 skip; /* ====>  Split By 2 (Mode)*/
      set PC0NM001.PC0NMSB3 skip; /* ====>  Split By 3 (Customer xref)*/
      set PC0NM001.PC0NMSB4 skip; /* ====>  Split By 4 (Warehouse)*/
      set PC0NM001.PC0NMSB5 skip; /* ====>  Split By 4 (Warehouse)*/
    end
  end

  if (PC0NW01.XGPCD == "03")
    set PC0NM001.PC0NMSB2 skip; /* ====>  Split By 2 (Mode)*/
    set PC0NM001.PC0NMSB3 skip; /* ====>  Split By 3 (Customer xref)*/
    set PC0NM001.PC0NMSB4 skip; /* ====>  Split By 4 (Warehouse)*/
    set PC0NM001.PC0NMSB5 skip; /* ====>  Split By 4 (Warehouse)*/
  end

  set PC0NM001.PC0NMSPT skip; /* ====>  Split By Total New quantity*/
  set PC0NM001.YACCD skip; /* ====>  Audit comment*/

  if (PC0NW01.PC6STAT == "CX"
   || PC0NW01.PC6STAT == "FC"
   || PC0NW01.PC6STAT == "NC")
    PCWREC.XXXMSGNO = 164; /* ====> can not change item's qtys*/
    PC0NW00.XXXPRCNM = "PC0N220"; /* Module identification*/
  end

  if (PC0NW01.PC-SAP-PO-NBR > " ")
    if (PCWREC.XXXMSGNO != 1)
      PCWREC.XXXMSGNO = 582; /* ====> can not maintain SAP po*/
      PC0NW00.XXXPRCNM = "PC0N220"; /* Module identification*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0N220 ***********************/
end // end PC0N220

// Format the data (not sizes)
Function PC0N230()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Map ---> PC0NM001 ( the Header Info)*/
   /* ------------------------------------------------------------*/

  PC0NS02(); /* ===> load header data*/

   /* ------------------------------------------------------------*/
   /* Map ---> PC0NM001 (Load Split from fields) (non modifiable)*/
   /* ------------------------------------------------------------*/

  PC0NM001.PC0NMTVL = PC0NW01.PC0NWTVL; /* => Total Value*/
  PC0NM001.PC0NMQTY = PC0NW01.PC6TORDE; /* => Total Quantity*/

  PC0NM001.PC6MICHG = PC0NW01.PC6MICHG; /* => Misc charges*/

  PC0NM001.PC0NMEST = PC0NW01.PC0NWDT1; /* => ETS map display*/
  PC0NM001.PC0NMMOD = PC0NW01.YMTCD; /* => Mode*/
  PC0NM001.PC0NMCUS = PC0NW01.PC2CUXID; /* => Cust Xref*/
  PC0NM001.PC0NMWHS = PC0NW01.XWHCD; /* => Warehouse*/
  PC0NM001.PC0NMOWC = PC0NW01.XOWCD; /* => Owner group*/

   /* ------------------------------------------------------------*/
   /* Map ---> PC0NM001 (Load Split by fields) (split to)*/
   /* ------------------------------------------------------------*/

  PC0NM001.PC0NMSB1 = PC0NW01.PC0NWSB1; /* ==> Split By 1 (ETS Date)*/
  PC0NM001.PC0NMSB2 = PC0NW01.PC0NWSB2; /* =====> Split By 2 (Mode)*/
  PC0NM001.PC0NMSB3 = PC0NW01.PC0NWSB3; /* ==> Split By 3 (Cust. Xref)*/
  PC0NM001.PC0NMSB4 = PC0NW01.PC0NWSB4; /* =====> Split by 4 (Warehouse)*/
  PC0NM001.PC0NMSB5 = PC0NW01.PC0NWSB5; /* =====> Split by 5 (owner group*/

   /* ------------------------------------------------------------*/
   /* Map ---> PC0NM001 (set non modifible split data dark)*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.XGPCD == "02")

    if (PC0NW01.PC4ORTYP == "FT"
     || PC0NW01.PC4ORTYP == "OR"
     || PC0NW01.PC4ORTYP == "S1"
     || PC0NW01.PC4ORTYP == "S4")

      set PC0NM001.PC0NMSB2 skip, invisible; /* ===> Split by field 2 "MODE"*/
      set PC0NM001.PC0NMSB3 skip, invisible; /* ===> Split by field 3 "CUST"*/
      set PC0NM001.PC0NMSB4 skip, invisible; /* ===> Split by field 4 "WHSE"*/

      set PC0NM001.PC0NMMOD skip, invisible; /* => Mode*/
      set PC0NM001.PC0NMCUS skip, invisible; /* => Cust Xref*/
      set PC0NM001.PC0NMWHS skip, invisible; /* => Warehouse*/

    end
    set PC0NM001.PC0NMSB5 skip, invisible; /* ===> Split by field 5 "OWCD"*/
    set PC0NM001.PC0NMOWC skip, invisible; /* => Owner group*/
    set PC0NM001.PC0NMSL5 skip, invisible; /* => Owner group*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N230 ***********************/
end // end PC0N230

// Format the pass record data
Function PC0N240()
   /* ------------------------------------------------------------*/
   /* Hightlight the data that was passed to this application*/
   /* ------------------------------------------------------------*/

  set PC0NM001.XGPCD skip, bold;
  set PC0NM001.PO-REG-CD skip, bold;
  set PC0NM001.PC3PONBR skip, bold;

   /* ------------------------------------------------------------*/
   /* If Unit of measure code, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XUMCD > " ")
    set PC0NM001.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XPGCD > " ")
    set PC0NM001.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.PC2INSEG > " ")
    set PC0NM001.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XOWCD > " ") /* owner group code*/
    set PC0NM001.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XQACD > " ") /* quality code*/
    set PC0NM001.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XDMCD > " ")
    set PC0NM001.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.YSMXDV > " ")
    set PC0NM001.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.PC2CUXID > " ")
    set PC0NM001.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.PC6ETSDT > 0)
    set PC0NM001.PC0NMETS skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dist method, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XDSCD > " "
   && PC0NW03.XDSCD != "*")
    set PC0NM001.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.YMTCD > " ")
    PC0NM001.YMTCD = PC0NW03.YMTCD;
    set PC0NM001.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.XWHCD > " ")
    set PC0NM001.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.PC6PLAN > 0)
    set PC0NM001.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.SY2CLRID > " ")
    set PC0NM001.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0NW03.SY1STNBR > " ")
    set PC0NM001.SY1STNBR skip, bold;
  end

   /* **                                                        ***/
   /* ********************** End of PC0N240 ***********************/
end // end PC0N240

// Format existing sizes protect
Function PC0N250()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWSWS = "N"; /* ===> format map sizes switch*/
  PC0NW00.PC0NWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWIXM <= 20 /* ===> Until size screen is full*/
   && PC0NM001.SY4IDDSC[PC0NWIXM] > " ")

    set PC0NM001.PC0NMSQT[PC0NWIXM] skip; /* ==>new quantity*/
    PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWIXM <= 11) /* ===> size screen only half full*/
    set PC0NM001.PC0NMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0NM001.PC0NMAML[2] skip, invisible; /* ===> new amount literal*/
    set PC0NM001.PC0NMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0NM001.PC0NMFBL[2] skip, invisible; /* ===> FOB Literal*/
  end

  while (PC0NW00.PC0NWIXM <= 20) /* ===> Until size screen is full*/
    set PC0NM001.PC0NMSQT[PC0NWIXM] skip, invisible;
    PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N250 ***********************/
end // end PC0N250

// Format existing sizes unprotec
Function PC0N260()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PC0NM001.PC0NMASK[1] for 20; /* ===> Initialize FOB ORVD ID*/
  move " " to PC0NM001.SY4IDDSC[1] for 20;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PC0NM001.PC0NMSQT[1] for 20;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PC0NM001.PC0NMOQT[1] for 20; /* ===> Initialize map "on order qty"*/
  move 0 to PC0NM001.PC0NMFOB[1] for 20;
                                   /* ===> Initialize map "FOB price"*/
  PC0NW00.PC0NWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWIXM <= 20 /* ===> Until size screen is full*/
   && PC0NW00.PC0NWIXS <= 40) /* ===> and size index at max*/

    if (PC0NW01.PC7ORDEQ[PC0NWIXS] > 0)

      PC0NM001.SY4IDDSC[PC0NWIXM] = PC0NW01.SY4IDDSC[PC0NWIXS];
      PC0NM001.PC0NMSQT[PC0NWIXM] = PC0NW01.PC0NWSQT[PC0NWIXS];
      PC0NM001.PC0NMOQT[PC0NWIXM] = PC0NW01.PC7ORDEQ[PC0NWIXS];

      set PC0NM001.SY4IDDSC[PC0NWIXM] initialAttributes; /* ===> size desc.*/
      set PC0NM001.PC0NMSQT[PC0NWIXM] initialAttributes; /* ===> split QTY request*/
      set PC0NM001.PC0NMOQT[PC0NWIXM] initialAttributes; /* ===> On-order QTY request*/

      if (COMMAREA.CACLVL[10] == "Y") /* ===> FOB Security inquiry flag*/

        if (PC0NW00.PC0NWIXM == 1                          /* ==> first display position*/
         || PC0NW01.PC0NWVRD[PC0NWIXS] != PC0NW00.PC0NWCB1 /* ==> previous price*/
         || PC0NW01.PC0NWVRF[PC0NWIXS] != PC0NW00.PC0NWCB2) /* ==> previous price*/

          PC0NW00.PC0NWCB1 = PC0NW01.PC0NWVRD[PC0NWIXS]; /* ==> previous price*/
          PC0NW00.PC0NWCB2 = PC0NW01.PC0NWVRF[PC0NWIXS]; /* ==> previous price*/

          if (PC0NW01.PC0NWVRF[PC0NWIXS] == "Y") /* ===> FOB override flag*/

            set PC0NM001.PC0NMFOB[PC0NWIXM] skip, bold;

            PC0NM001.PC0NMFOB[PC0NWIXM] = PC0NW01.PC0NWVRD[PC0NWIXS];
            PC0NM001.PC0NMASK[PC0NWIXM] = "*";

            if (PC0NW00.PC0NWPFF == "N" /* ===> Factory FOB price data found*/
             && PCWREC.XXXMSGNO == 118)
              PCWREC.XXXMSGNO = 0;
              PC0NW00.XXXPRCNM = "PC0N";
            end

          else /* ===> no override price*/
            PC0NM001.PC0NMFOB[PC0NWIXM] = FY4REC.FY4FOBPR[PC0NWIXS];
            set PC0NM001.PC0NMFOB[PC0NWIXM] skip;
          end /* ===>QTYs > 0*/

        else /* ===> suppress FOB Price*/
          set PC0NM001.PC0NMFOB[PC0NWIXM] skip, invisible;
        end /* ===> control break check for FOB Suppression*/

      else /* ===> lack of security*/

        set PC0NM001.PC0NMFOB[PC0NWIXM] skip, invisible;

      end /* ===> security check*/

      PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment line index*/

    end

    PC0NW00.PC0NWIXS = PC0NW00.PC0NWIXS + 1; /* ===>Increment size index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  set PC0NM001.PC0NMAML[1] skip, invisible; /* ===> new amt Literal*/
  set PC0NM001.PC0NMAML[2] skip, invisible; /* ===> new amt Literal*/

  if (PC0NW00.PC0NWIXM <= 11) /* ===> size screen half full*/
    set PC0NM001.PC0NMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0NM001.PC0NMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0NM001.PC0NMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PC0NM001.PC0NMSZL[2] initialAttributes; /* ===> size literal*/
    set PC0NM001.PC0NMORL[2] initialAttributes; /* ===> on order literal*/
    set PC0NM001.PC0NMFBL[2] initialAttributes; /* ===> FOB Literal*/
  end

  while (PC0NW00.PC0NWIXM <= 20) /* Until size screen is full*/
    set PC0NM001.SY4IDDSC[PC0NWIXM] skip, invisible;
    set PC0NM001.PC0NMSQT[PC0NWIXM] skip, invisible;
    set PC0NM001.PC0NMOQT[PC0NWIXM] skip, invisible;
    set PC0NM001.PC0NMFOB[PC0NWIXM] skip, invisible;
    PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N260 ***********************/
end // end PC0N260

// Pop-up window routine
Function PC0N290()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB2 == "?" /* ===> Mode of Trans*/
   || PC0NM001.PC0NMSB4 == "?" /* ===> Warehouse*/
   || PC0NM001.PC0NMSB5 == "?" /* ===> Owner group code*/
   || PC0NM001.YACCD == "?")  

    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0NM001.PC0NMSB2 == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0NM001.PC0NMSB2 = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PC0NM001.PC0NMSB2 = PC0NW01.PC0NWSB2; /* ===> reset map field*/
      end
    end

    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0NM001.PC0NMSB4 == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0NM001.PC0NMSB4 = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PC0NM001.PC0NMSB4 = PC0NW01.PC0NWSB4; /* ===> reset map field*/
      end
    end

      /* ------------------------------------------------------------*/
              /* OWNER GROUP CODE TABLE WINDOW*/
      /* ------------------------------------------------------------*/

    if (PC0NM001.PC0NMSB5 == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " OWNER GROUP CODE TABLE "; /* heading*/
      XX0XW02.XWHCD = PC0NM001.PC0NMSB4;
      XX0XW02.XGPCD = PC0NM001.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the data       **/
         /* *  type table code and description to the map.          **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0NM001.PC0NMSB5 = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
      else
        PC0NM001.PC0NMSB5 = PC0NW01.PC0NWSB5; /* ====> reset map field*/
      end
      set PC0NM001.PC0NMSB5 cursor;
    end

    /* ------------------------------------------------------------*/
            /* Audit Comment Table Window*/
    /* ------------------------------------------------------------*/

    if (PC0NM001.YACCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window*/
                                   /* initialize*/
      XX0XW02.XX0XWHDR = " AUDIT COMMENT TABLE    "; /* heading*/
      XX0XW02.XGPCD = PC0NW01.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYAC01(); /* perform Audit comment  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0NW01.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PC0NM001.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PC0NM001.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* move code*/
      else
        PC0NM001.YACCD = PC0NW01.YACCD; /* ===> reset map field*/
        if (PC0NM001.YACCD in YACTBL.YACCD)
          PC0NM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
        end

      end
    end

    converseLib.clearScreen();
     /* ===> restore the map*/

    converseLib.validationFailed(84); /* ===> press same key to process*/
                                   /* request*/
    PC0NW00.XXXPRCNM = "PC0N290";

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N290 ***********************/
end // end PC0N290

// -->Check Attention Identifier
Function PC0N300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0NW00.PC0NWSWR == "Y") /* Request for data*/
      set PC0NW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0NW00.PC0NWSWR = "N"; /* Request for data switch*/
    PC0NW00.PC0NWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.CATOAP > " " /* FAST PATH was requested*/
   || PC0NM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0NW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PC0NW00.CAFROMAP;
      PCWREC.CAUSERA = PC0NW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PC0NM001.CATOAP cursor, bold; /* Highlight*/
      PC0NM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0NW00.XXXPRCNM = "PC0N300"; /* Module identification*/

    else

      PC0NW00.XXXPRCNM = "PC0N300"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* PF1 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      COMMAREA.CATOAP = COMMAREA.CAFROMAP;

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      if (PC0NW04.PC-SAP-PO-NBR != " ") /* if sap po no adding of products*/
        converseLib.validationFailed(576);
        exit stack;
      else
        COMMAREA.CATOAP = "PC0E"; /* Application find code*/
        PC0N310(); /* ===> load pass record*/
      end
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* Application find code*/
      PC0N310(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* Application find code*/
      if (PCWREC.CAFROMAP[1] != "PC0M")
        PC0N310(); /* ===> load pass record*/
      end
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PC0NW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0NW00.CAFROMAP;
    PCWREC.CAUSERA = PC0NW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PC0NM001.CATOAP cursor, bold; /* Highlight*/
    PC0NW00.XXXPRCNM = "PC0N300"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/

    PC0NW00.XXXPRCNM = "PC0N300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N300 ***********************/
end // end PC0N300

// load pass rec with select data
Function PC0N310()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  set PCWREC empty;

  PCWREC.XGPCD = PC0NW01.XGPCD;
  PCWREC.PO-REG-CD = PC0NW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0NW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0NW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0NW01.PCFSECD;
  PCWREC.PC4ORTYP = PC0NW01.PC4ORTYP;

  if (COMMAREA.CATOAP != "PC0M")
    PCWREC.PC3POIDT = PC0NW01.PC3POIDT;
  end

   /* **                                                        ***/
   /* ********************** End of PC0N300 ***********************/
end // end PC0N310

// -->Reset Highlighted Fields
Function PC0N400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWSWP != "Y" /* ===> map not protected*/
   && PC0NW01.PC6STAT != "CX") /* ===> map not protected*/

    set PC0NM001.PC0NMQTY initialAttributes; /* ===> Total QTY     (split from row)*/
    set PC0NM001.PC0NMSPT initialAttributes; /* ===> New/Add Total (split to   row)*/

    if (PC0NW01.XGPCD == "02")
      if (PC0NW01.PC4ORTYP == "FT"
       || PC0NW01.PC4ORTYP == "OR"
       || PC0NW01.PC4ORTYP == "S1"
       || PC0NW01.PC4ORTYP == "S4")
        set PC0NM001.PC0NMSB1 initialAttributes; /* ===> ETS map display*/
      else
        set PC0NM001.PC0NMSB1 initialAttributes; /* ===> ETS map display*/
        set PC0NM001.PC0NMSB2 initialAttributes; /* ===> Mode of Transportation*/
        set PC0NM001.PC0NMSB3 initialAttributes; /* ===> Cust Xref*/
        set PC0NM001.PC0NMSB4 initialAttributes; /* ===> Warehouse*/
        set PC0NM001.PC0NMSB5 initialAttributes; /* ===> Owner group*/
      end
    end

    if (PC0NW01.XGPCD == "03"
     || PC0NW01.XGPCD == "01"
     || PC0NW01.XGPCD == "07")
      set PC0NM001.PC0NMSB1 initialAttributes; /* ===> ETS map display*/
      set PC0NM001.PC0NMSB2 initialAttributes; /* ===> Mode of Transportation*/
      set PC0NM001.PC0NMSB3 initialAttributes; /* ===> Cust Xref*/
      set PC0NM001.PC0NMSB4 initialAttributes; /* ===> Warehouse*/
      set PC0NM001.PC0NMSB5 initialAttributes; /* ===> Warehouse*/
    end

    set PC0NM001.YACCD initialAttributes; /* ===>  Audit code*/

    PC0NW00.PC0NWIXM = 1; /* ===> Initialize map size index*/

    while (PC0NW00.PC0NWIXM <= 20 /* ===> Until size screen is full*/
     && PC0NM001.SY4IDDSC[PC0NWIXM] > " ") /* ===> more sizes available*/

      set PC0NM001.PC0NMSQT[PC0NWIXM] initialAttributes; /* ===> split QTYs field*/

      PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment line index*/

    end

  end /* ===> map not protected check*/

  set PC0NM001.CATOAP initialAttributes; /* TO application*/
  set PC0NM001.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0N400 ***********************/
end // end PC0N400

// -->Verify The Entered Data
Function PC0N500()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do an EZEFLO and try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NW911 == "Y" /* ===> -911 SQL*/
   && PC0NW00.PC0NWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether application data was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.CAITEM > " ") /* Application data was entered*/

    PC0NW00.XXXPRCNM = "PC0N500"; /* Module identification*/
    set PC0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      PC0N510(); /* Verify scroll*/

    else

      if (PC0NW01.PC-SAP-PO-NBR > " ")
        return; /* map protected for sap po*/
      end

      if (PC0NW00.PC0NWSWP == "Y"
       || PC0NW01.PC6STAT == "CX")

        return; /* ===========> map protected no edit*/
                                   /* required*/

      end

      /* ------------------------------------------------------------*/
       /* If none of the fields changed, return to previous process.*/
       /* Highlight any application data that was entered & in error*/
      /* ------------------------------------------------------------*/

      /* ------------------------------------------------------------*/
       /* Verify the total quantities against the size quantities*/
       /* to validate the split request is valid*/
          /* Also do other process required in Size/QTY processing*/
      /* ------------------------------------------------------------*/

      PC0N529(); /* ===========> do initial split check*/

      if (converseVar.eventKey is enter
       && converseVar.validationMsgNum == 0)

        if (PC0NM001.PC0NMSB5 == PC0NW01.XOWCD /* ===> Owner Group*/
         && PC0NM001.PC0NMSB4 == PC0NW01.XWHCD /* ===> Warehouse*/
         && PC0NM001.PC0NMSB3 == PC0NW01.PC2CUXID
         /* ===> Customer xref id*/
         && PC0NM001.PC0NMSB2 == PC0NW01.YMTCD /* ===> Mode of Trans*/
         && PC0NM001.PC0NMSB1 == PC0NW01.PC0NWDT1) /* ===> ETS Date*/

          if (PC0NM001.PC0NMSPT > 0 /* ===>split total request*/
           || PC0NW00.PC0NWFL1 == "Y") /* ===> size Split QTYs requested*/

            PC0NS09(); /* ===> set appropriate fields bright*/

            PC0NW00.XXXPRCNM = "PC0N500"; /* Module identification*/
            converseLib.validationFailed(265); /* ===> Key split criteria not entered*/
            exit stack; /* ===========> no split requested*/

          else

            PC0NW00.PC0NWMOD = "N"; /* ===> reset modified data tag*/
            return; /* ===========> no split requested*/

          end /* ===> total split request check*/

        end

        PC0N520(); /* ===========> Verify tot QTYs/size*/
                                   /* QTYs*/

      end

      if (converseVar.eventKey is pf19)

        if (PC0NM001.PC0NMSB5 == PC0NW01.XOWCD /* ===> Owner group*/
         && PC0NM001.PC0NMSB4 == PC0NW01.XWHCD /* ===> Warehouse*/
         && PC0NM001.PC0NMSB3 == PC0NW01.PC2CUXID
         /* ===> Customer xref id*/
         && PC0NM001.PC0NMSB2 == PC0NW01.YMTCD /* ===> Mode of Trans*/
         && PC0NM001.PC0NMSB1 == PC0NW01.PC0NWDT1) /* ===> ETS Date*/

          PC0NS09(); /* ===> set appropriate fields bright*/

          PC0NW00.XXXPRCNM = "PC0N500"; /* Module identification*/
          converseLib.validationFailed(265); /* ===> Key split criteria not entered*/
          exit stack; /* ===========> no split requested*/

        end

      end

      /* ------------------------------------------------------------*/
       /* If warehouse was changed, verify the entered code.*/
      /* ------------------------------------------------------------*/

      if (PC0NM001.PC0NMSB4 != PC0NW01.PC0NWSB4
       || PC0NM001.PC0NMSB3 == " ") /* customer xref id*/

        PC0N530(); /* =========> Verify warehouse code*/

      end

      /* ------------------------------------------------------------*/
       /* If owner group was changed, verify the entered code.*/
      /* ------------------------------------------------------------*/
      if (PC0NM001.PC0NMSB5 != PC0NW01.PC0NWSB5)

        PC0N525(); /* =========> Verify owner group code*/

      end
      /* ------------------------------------------------------------*/
       /* If Cust Xref            , verify the entered code.*/
      /* ------------------------------------------------------------*/

      if (PC0NM001.PC0NMSB3 != PC0NW01.PC0NWSB3) /* customer xref id*/

        PC0N550(); /* ===========> Verify xref-id on table*/

      end

      /* ------------------------------------------------------------*/
       /* If Cust Xref and/or warehouse change and P.O. Not printed*/
       /* then error.  Cannot change or have multiple destinations*/
      /* ------------------------------------------------------------*/

      if (PC0NW04.XGPCD == "03"
       && PC0NW04.PC4ORTYP != "BA"
       && VPOHDR02.PC3PRTIN != "P") /* PO has not been printed*/
        if (PC0NM001.PC0NMSB4 != PC0NW04.XWHCD)
          converseLib.validationFailed(245); /* Cannot have multiple destinations*/
          PC0NM001.XXXPRCNM = "PC0N500";
          set PC0NM001.PC0NMSB4 cursor, bold;
        end
        if (PC0NM001.PC0NMSB3 != PC0NW04.PC2CUXID)
          converseLib.validationFailed(245); /* Cannot have multiple destinations*/
          PC0NM001.XXXPRCNM = "PC0N500";
          set PC0NM001.PC0NMSB3 cursor, bold;
        end
      end /* ===> GPC='03' & not printed P.O.*/
                                   /* restriction*/

      /* ------------------------------------------------------------*/
       /* If trans mode changed, verify the entered code.*/
      /* ------------------------------------------------------------*/

      if (PC0NM001.PC0NMSB2 != PC0NW01.PC0NWSB2
       || PC0NM001.PC0NMSB2 == " ")
        PC0N570(); /* =========> Verify trans mode*/
      end

      /* --------------------------------------------------*/
      /* PCA479 - validate products for spain*/
      /* --------------------------------------------------*/

      if (PC0NM001.PC4ORTYP != "SS"
       && PC0NM001.PC4ORTYP != "SX")
        if ((PC0NM001.PC0NMCUS != PC0NM001.PC0NMSB3) /* xref change*/
         && (PC0NM001.PC0NMSB3 != " "))              /* / xref not spaces*/
          PC0NS100(); /* obtain the contry from location code*/
          PC0NS101(); /* Select from style/colortable*/
          if (PC0NM001.XGPCD == "02"
           || PC0NM001.XGPCD == "03")
            if (PG2REC.XFCCD1 != "68"
             && PG2REC.XFCCD2 != "68"
             && PG2REC.XFCCD3 != "68"
             && PG2REC.XFCCD4 != "68"
             && PG2REC.XFCCD5 != "68"
             && PG2REC.XFCCD6 != "68")
              if (TSCREC.XCTCD == "SPAI"
               || TSCREC.XCTCD == "CNRY"
               || TSCREC.TSCLOCCD == "MO2"
               || TSCREC.TSCLOCCD == "MO3"
               || TSCREC.TSCLOCCD == "MO4")
                converseLib.validationFailed(574);
                PC0NM001.XXXPRCNM = "PC0N500";
                set PC0NM001.PC0NMSB3 cursor, bold;
              end
            end
          end
        end
      end

    end /* ===> pf7/pf8 if statement*/

  end /* ===> no error messages*/

   /* ------------------------------------------------------------*/
   /* Verify the audit comment field if data has been modified.*/
   /* --->   It is required!!!*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWMOD == "Y" /* ===> modified data tag*/
   || PC0NM001.YACCD != PC0NW01.YACCD)

    PC0N590(); /* ===========> Verify audit comment*/

  end

   /* ------------------------------------------------------------*/
   /* If ETS Date was changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB1 != PC0NW01.PC0NWSB1) /* est time of shipment*/

    PC0N580(); /* ===========> Verify date*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N500 ***********************/
end // end PC0N500

// Verify scroll request
Function PC0N510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll sizes back request*/
   && PC0NW00.PC0NWF20 == "Y")    /* ===>First 20 sizes are displayed*/

    PC0NW00.XXXPRCNM = "PC0N510"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous sizes to display*/
    converseLib.clearScreen();
    
    set PC0NM001.CATOAP cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll sizes forward request*/

    if (PC0NW00.PC0NWF20 == "Y") /* ===>First 20 sizes are displayed*/

      /* ------------------------------------------------------------*/
      /* Verify more sizes for scroll request*/
      /* - if a size is found,  the finder index is used as the*/
        /* positioning index.  It is loaded to the size index in*/
        /* Scroll Request module PC0N610.*/
      /* ------------------------------------------------------------*/

      PC0NW00.PC0NWIXF = PC0NW00.PC0NWIXS; /* ===>load Finder index*/

      while (PC0NW00.PC0NWIXF <= 40) /* ===> Until end of sizes*/

        if (PC0NW01.PC7ORDEQ[PC0NWIXF] > 0)
          PC0NW00.PC0NWF20 = "N"; /* ===>First 20 sizes are displayed*/
          return; /* ===> exit to process valid scroll request*/
        end

        PC0NW00.PC0NWIXF = PC0NW00.PC0NWIXF + 1;
                                   /* ===>Increment line index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* scroll request invalid because:*/
            /* 1) last 20 styles displayed*/
        /* or  2) no more sizes to display*/
    /* ------------------------------------------------------------*/

    PC0NW00.XXXPRCNM = "PC0N510"; /* Module identification*/
    converseLib.validationFailed(76); /* No more sizes to display*/
    converseLib.clearScreen();
    
    set PC0NM001.CATOAP cursor;
    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N510 ***********************/
end // end PC0N510

// Verify Split QTYS request
Function PC0N520()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXM = 1; /* ===> Initialize map size index*/
  PC0NW00.PC0NWIXR = 0; /* ===> Initialize record size index*/
  PC0NW00.PC0NWQTY = 0; /* ===> Initialize QTY Accumulator*/
  PC0NW01.PC0NWTVL = 0; /* ===> Initialize QTY value Accumulator*/

  PC0N521(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* set-up to verify the size qty split*/
   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWIXR <= 40) /* ===> Until size all processed*/

    PC0N522(); /* ===> verify size split QTYs changed*/

  end

  PC0NW01.PC0NWTVL = PC0NW01.PC0NWTVL + PC0NW01.PC6MICHG; /* =>add misc chg*/

  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0) /* ===> no errors detected*/

    if (PC0NW00.PC0NWQTY != PC0NM001.PC0NMSPT) /* ===> QTY accum vs entered*/
      converseLib.validationFailed(64); /* ===> total of all sizes must match request*/
      PC0NW00.XXXPRCNM = "PC0N520";
      set PC0NM001.PC0NMSPT cursor, bold;

    else

      if (PC0NW00.PC0NWQTY == 0)

        converseLib.validationFailed(165); /* ===> total split QTYs must be > zero*/
        PC0NW00.XXXPRCNM = "PC0N520";
        set PC0NM001.PC0NMSPT cursor, bold;

      else

        if (PC0NW00.PC0NWQTY == PC0NW04.PC6TORDE)

          converseLib.validationFailed(266); /* ===> cannot split all QTYs, use PC0K*/
          PC0NW00.XXXPRCNM = "PC0N520";
          PC0NM001.PC0NMQTY = 0; /* ===> map display*/
          set PC0NM001.PC0NMQTY skip, bold; /* ===> map display*/
          set PC0NM001.PC0NMSPT cursor, bold;

        else

          /* ------------------------------------------------------------*/
           /* Successful verification of Total Split QTYs vs. Size QTYs*/
          /* ------------------------------------------------------------*/

          PC0NM001.PC0NMTVL = PC0NW01.PC0NWTVL; /* ===> new tot value*/

          if (PC0NW01.PC0NWSPT != PC0NM001.PC0NMSPT)

            PC0NW01.PC0NWSPT = PC0NW00.PC0NWQTY; /* => New/Add QTYs*/
            PC0NW01.PC6TORDE = PC0NW04.PC6TORDE - PC0NW00.PC0NWQTY;

            PC0NM001.PC0NMQTY = PC0NW01.PC6TORDE; /* ===> map display*/

            PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
            PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm*/

          end /* ===> New/add QTY's field modified*/

        end /* ===> qtys split = total on order*/

      end /* ===> total qtys split must be > 0*/

    end /* ===> temp QTY accum vs entered check*/

  end /* ===> <ENTER> pressed and no errors*/

   /* **                                                        ***/
   /* ********************** End of PC0N520 ***********************/
end // end PC0N520

// get the next valued size
Function PC0N521()
   /* ------------------------------------------------------------*/
   /* Get the next valued size desc. from the display record*/
   /* ------------------------------------------------------------*/
  PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1; /* ===>Increment rec size index*/

  while (PC0NW00.PC0NWIXR <= 40 /* ===> Until all sizes read*/
   && PC0NW01.SY4IDDSC[PC0NWIXR] == " ") /* ===> and valued size found*/

    PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N521 ***********************/
end // end PC0N521

// accumulate QTYs for all sizes
Function PC0N522()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.SY4IDDSC[PC0NWIXM] == PC0NW01.SY4IDDSC[PC0NWIXR])

    if (PC0NM001.PC0NMSQT[PC0NWIXM] != 0
     || PC0NM001.PC0NMSQT[PC0NWIXM] != PC0NW01.PC0NWSQT[PC0NWIXR])

      if (PC0NM001.PC0NMSQT[PC0NWIXM] != PC0NW01.PC0NWSQT[PC0NWIXR])

        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/
        PC0NW01.PC0NWSQT[PC0NWIXR] = PC0NM001.PC0NMSQT[PC0NWIXM];

      end

      if (PC0NW01.PC0NWSQT[PC0NWIXR] > 0) /* ===> split requested*/

        /* ------------------------------------------------*/
         /* Check for split error QTYs error*/
        /* ===>  split QTYs request (item/size)*/
        /* ===>  - balance to ship > qty to split*/
        /* ------------------------------------------------*/

        if (PC0NW01.PC0NWSQT[PC0NWIXR] > PC0NW00.PC0NWBAL[PC0NWIXR])
          if (PC0NM001.PC0NMMOD != PC0NM001.PC0NMSB2 /* mode changed*/
           || PC0NM001.PC0NMCUS != PC0NM001.PC0NMSB3 /* cust changed*/
           || PC0NM001.PC0NMWHS != PC0NM001.PC0NMSB4 /* whse changed*/
           || PC0NM001.PC0NMOWC != PC0NM001.PC0NMSB5) /* owner group code*/

            converseLib.validationFailed(233); /* ===> QTYs split invalid*/
            PC0NW00.XXXPRCNM = "PC0N522";
            set PC0NM001.PC0NMSQT[PC0NWIXM] cursor, bold;

          end

        end /* ===> reduction error check*/

      end /* ===> split requested*/

      PC0NW00.PC0NWQTY = PC0NW00.PC0NWQTY + PC0NW01.PC0NWSQT[PC0NWIXR];

    end

    PC0N523(); /* ===> calculate total value (SUM)*/

    PC0N521(); /* ===> get next record size desc*/

    if (PC0NW00.PC0NWIXM < 20) /* ===> map size index*/
      PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment size index*/
    end

    return;

  end /* ===> map and record size desc match*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.SY4IDDSC[PC0NWIXM] != PC0NW01.SY4IDDSC[PC0NWIXR])

    if (PC0NW01.PC0NWSQT[PC0NWIXR] > 0) /* ===> split by QTY request*/

      PC0NW00.PC0NWQTY = PC0NW00.PC0NWQTY + PC0NW01.PC0NWSQT[PC0NWIXR];

    end

    PC0N523(); /* ===> calculate total value (SUM)*/

    PC0N521(); /* ===> get next record size desc*/

    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N522 ***********************/
end // end PC0N522

// calc. QTYs values all sizes
Function PC0N523()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all sizes*/
   /* ------------------------------------------------------------*/
  if (PC0NW01.PC7ORDEQ[PC0NWIXR] > 0)

    if (PC0NW01.PC7FOBFL[PC0NWIXR] == "Y") /* ===> FOB override flag*/
      PC0NW00.FY4FOBPR = PC0NW01.FY4FOBPR[PC0NWIXR];
    else /* ===> move data from FOB Table*/
      PC0NW00.FY4FOBPR = FY4REC.FY4FOBPR[PC0NWIXR];
    end

    PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXR];

    PC0NW00.PC7ORDEQ = PC0NW01.PC7ORDEQ[PC0NWIXR] - PC0NW00.PC0NWSQT;

    PC0NW00.PC0NWVAL = PC0NW00.PC7ORDEQ * PC0NW00.FY4FOBPR;
    PC0NW01.PC0NWTVL = PC0NW01.PC0NWTVL + PC0NW00.PC0NWVAL;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N523 ***********************/
end // end PC0N523

// Verify Owner group
Function PC0N525()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  PC0NW01.PC0N-WHSE = PC0NM001.PC0NMSB4;
  PC0NW01.PC0N-OWCD = PC0NM001.PC0NMSB5;

  if (PC0NW01.PC0N-OWCD-EDIT in XOWTBL.XOWKEY /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0NW01.PC0NWSB5 = PC0NM001.PC0NMSB5;
    PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
    PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0NW00.XXXPRCNM = "PC0N525"; /* Module identification*/
    set PC0NM001.PC0NMSB5 cursor, bold; /* Highlight*/
    converseLib.validationFailed(514); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N525 ***********************/
end // end PC0N525

// Do initial QTYs Split Check
Function PC0N529()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXM = 20; /* ===> Initialize map size index*/
  PC0NW00.PC0NWFL1 = "N"; /* ===>initialize temp flag*/

   /* ------------------------------------------------------------*/
   /* Do initial check on QTYs Split request to see if split*/
   /* request is grater than on-order QTY.*/
   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWIXM >= 1
   && PC0NM001.SY4IDDSC[PC0NWIXM] == " ")
                                   /* ===> get last valued size desc*/

    PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM - 1;

  end /* ===> while more map sizes desc.*/

  while (PC0NW00.PC0NWIXM >= 1
   && PC0NM001.SY4IDDSC[PC0NWIXM] > " ")

    if (PC0NM001.PC0NMSQT[PC0NWIXM] > PC0NM001.PC0NMOQT[PC0NWIXM])
      set PC0NM001.PC0NMSQT[PC0NWIXM] cursor, bold; /* ==>new quantity*/
      converseLib.validationFailed(249); /* ===> QTYs split invalid*/
      PC0NW00.XXXPRCNM = "PC0N529";
    end /* ===> sizes QTYs split requested*/

    if (PC0NM001.PC0NMSQT[PC0NWIXM] > 0
     && PC0NW00.PC0NWFL1 == "N") /* ===>temp flag*/
      PC0NW00.PC0NWFL1 = "Y"; /* ===>temp flag*/

    end /* ===> sizes QTYs split requested*/

    PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM - 1;

  end /* ===> while more map sizes desc.*/

  if (PC0NW01.PC0NWSPT != PC0NM001.PC0NMSPT /* ===> Split requested*/
   && converseVar.validationMsgNum == 0)    /* ===> initial QTYs split request valid*/

    PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
    PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N529 ***********************/
end // end PC0N529

// Verify Warehouse
Function PC0N530()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB4 == " ") /* ===> split by field 4 (warehouse)*/

    if (PC0NM001.PC0NMSB3 == " ") /* ===> split by field 3 (cust xref)*/
      converseLib.validationFailed(59); /* ===> warehouse missing or invalid*/
      PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
      set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
      return;

    else /* valid*/

      if (PC0NM001.PC0NMSB4 != PC0NW01.PC0NWSB4)
        PC0NW01.PC0NWSB4 = " ";
        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm flag*/
      end

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine if code was modified*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB4 == PC0NW01.PC0NWSB4)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB4 in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PC0NW01.XGPCD == "03")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "03") /* valid for this GPC*/

        if (PC0NM001.PC0NMSB3 > "  ") /* ===> split customer entered*/
          PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
          PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
          PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm flag*/
        else
          if (PC0NW01.YSMXDV == "20")
            if (PC0NM001.PC0NMSB4 != "12"
             && PC0NM001.PC0NMSB4 != "60"
             && PC0NM001.PC0NMSB4 != "61")
              PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
              set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
              converseLib.validationFailed(167); /* cannot change divisions*/
            end /* ===> valid*/
          end /* ===> valid*/
          if (PC0NW01.YSMXDV == "10")
            if (PC0NM001.PC0NMSB4 == "12"
             || PC0NM001.PC0NMSB4 == "60"
             || PC0NM001.PC0NMSB4 == "61")
              PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
              set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
              converseLib.validationFailed(167); /* cannot change divisions*/
            end
          end /* ===> valid*/
          if (PC0NW01.YSMXDV == "10")
            if (PC0NM001.PC0NMSB4 != "12"
             && PC0NM001.PC0NMSB4 != "60"
             && PC0NM001.PC0NMSB4 != "61")
              PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
              PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
              PC0NW00.PC0NWUPF = "N";
                                   /* ===> reset update confirm flag*/
            end
          end

          if (PC0NW01.YSMXDV == "20")
            if (PC0NM001.PC0NMSB4 == "12"
             || PC0NM001.PC0NMSB4 == "60"
             || PC0NM001.PC0NMSB4 == "61")
              PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
              PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
              PC0NW00.PC0NWUPF = "N";
                                   /* ===> reset update confirm flag*/
            end
          end
        end

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
        set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '03'*/

    if (PC0NW01.XGPCD == "02")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "02") /* valid for this GPC*/

        PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm flag*/

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
        set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '02'*/

    if (PC0NW01.XGPCD == "01")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "01") /* valid for this GPC*/

        PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm flag*/

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
        set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '01'*/

    if (PC0NW01.XGPCD == "07")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "07") /* valid for this GPC*/

        PC0NW01.PC0NWSB4 = PC0NM001.PC0NMSB4;
        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirm flag*/

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
        set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '07'*/

  else /* ===> not found or inactive*/

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0NW00.XXXPRCNM = "PC0N530"; /* Module identification*/
    set PC0NM001.PC0NMSB4 cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N530 ***********************/
end // end PC0N530

// Verify Cust Xref
Function PC0N550()
   /* ------------------------------------------------------------*/
   /* Determine if the non- valued entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB3 == " ") /* ===> split by field (cust Xref)*/

    if (PC0NM001.PC0NMSB3 != PC0NW01.PC0NWSB3) /* ===> split by 3 field*/
      PC0NW01.PC0NWSB3 = " ";
      PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
      PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/
    end

    return;

  end /* ===> Cust EQ ' '*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PC0NM001.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PC0NM001.PC0NMSB3; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* after doing additional processing.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* Normal return code*/
   && PC2REC.XXXSTAT == "A")        

    if (PC0NM001.XGPCD == "03" /* ===> GPC*/
     && PC2REC.YSMXDV != PC0NW01.YSMXDV) /* ===> group division code*/
      converseLib.validationFailed(167); /* ===> cannot change divisions*/
      set PC0NM001.PC0NMSB3 cursor, bold;
      PC0NW00.XXXPRCNM = "PC0N550"; /* Module identification*/
      return; /* ========> Return to previous process*/
    end /* ===> GPC Code*/

    if (PC0NM001.PC0NMSB3 != PC0NW01.PC0NWSB3)
      PC0NW01.PC0NWSB3 = PC0NM001.PC0NMSB3;
      PC0NW01.YPCCD = PC2REC.YPCCD;
      PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
      PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/
    end /* ===> Cust XREF changed*/

    return; /* ========> Return to previous process*/

  end /* ===> successful SQL = 0*/

   /* ------------------------------------------------------------*/
   /* If row found and not active, indicate invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* Normal return code*/
   && PC2REC.XXXSTAT != "A")        

    converseLib.clearScreen();
    
    set PC0NM001.PC0NMSB3 cursor, bold;
    PC0NW00.PC0NWSWF = "N"; /* Format the map switch*/

    PC0NW00.XXXPRCNM = "PC0N550"; /* Module identification*/
    converseLib.validationFailed(45); /* ===> missing invalid*/

    return; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    converseLib.clearScreen();
    
    set PC0NM001.PC0NMSB3 cursor, bold;
    PC0NW00.PC0NWSWF = "N"; /* Format the map switch*/

    PC0NW00.XXXPRCNM = "PC0N550"; /* Module identification*/
    converseLib.validationFailed(45); /* ===> missing invalid*/

    return; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  PC0NW00.XXXPRCNM = "PC0N550"; /* Module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N550 ***********************/
end // end PC0N550

// Verify Trans Mode
Function PC0N570()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB2 in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0NW01.PC0NWSB2 = PC0NM001.PC0NMSB2;
    PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
    PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0NW00.XXXPRCNM = "PC0N570"; /* Module identification*/
    set PC0NM001.PC0NMSB2 cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N570 ***********************/
end // end PC0N570

// Verify ETS Date
Function PC0N580()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.PC0NMSB1 not numeric)
    PC0NW00.XXXPRCNM = "PC0N580"; /* Module identification*/
    converseLib.validationFailed(38); /* ===> required/ invalid date*/
    set PC0NM001.PC0NMSB1 cursor, bold; /* Highlight*/
    return;
  end

  if (PC0NM001.PC0NMSB1 == "000000"
   || PC0NM001.PC0NMSB1 == " ")
    PC0NM001.PC0NMSB1 = " "; /* ===> ETS Split By Date map display*/
    if (PC0NW01.XGPCD == "03")
      PC0NW00.XXXPRCNM = "PC0N580"; /* Module identification*/
      converseLib.validationFailed(38); /* ===> required/ invalid date*/
    else

      if (PC0NM001.PC0NMSB1 != PC0NW01.PC0NWSB1)
        PC0NW01.PC0NWSB1 = " "; /* ===> ETS Date map display*/
        PC0NW01.PC0NWETS = 0; /* ===> ETS Date display record*/
        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/
      end

    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "C"; /* ===>     move date type to record*/
                                   /* -->(mmddccyy)*/

  PC0NW00.PC0NW1DT = PC0NM001.PC0NMSB1; /* ===> save ETS Date display*/
  PC0NW00.PC0NWMM = PC0NW00.PC0NW1MM; /* ===> ETS Date Month display*/
  PC0NW00.PC0NWDD = PC0NW00.PC0NW1DD; /* ===> ETS Date Day   display*/
  PC0NW00.PC0NWYY = PC0NW00.PC0NW1YY; /* ===> ETS Date Year  display*/
  if (PC0NW00.PC0NW1YY > 85) /* ===> set up ETS Century*/
    PC0NW00.PC0NWCC = 19;
  else
    PC0NW00.PC0NWCC = 20;
  end

  TA2REC.TA2GRECN = PC0NW00.TA2GRECN; /* ===> move date -->(mmddccyy)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    if (TA2REC.TA2GRGGN != PC0NW01.PC0NWETS) /* if date entered*/
      if (PC0NW01.XGPCD == "03") /* (aprl)           was changed*/
   /* ------------- y2k out begin ---------------*/
       /* MOVE EZEDTE TO PC0NW00.PC0NWFDT;*/
       /* IF PC0NW00.PC0NWFDT > TA2REC.TA2GRGEN;*/
   /* ------------- y2k out end -----------------*/
   /* ------------- y2k in  begin ---------------*/
        PC0NW00.PC0NWFDT = VGVar.currentGregorianDate;
        if (PC0NW00.PC0NWFDT > TA2REC.TA2GRGGN)
   /* ------------- y2k in end -- ---------------*/
          PC0NW00.XXXPRCNM = "PC0N580";
          set PC0NM001.PC0NMSB1 cursor, bold;
          converseLib.validationFailed(409);
        end
      end
      PC0NW01.PC0NWETS = TA2REC.TA2GRGGN; /* ===> save ETS*/
      PC0NW01.PC0NWSB1 = PC0NM001.PC0NMSB1; /* ===> load dsply rec*/
    end

    PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
    PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0NW00.XXXPRCNM = "PC0N580"; /* Module identification*/
    set PC0NM001.PC0NMSB1 cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N580 ***********************/
end // end PC0N580

// Verify Audit Comment Code
Function PC0N590()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.YACCD == " ")
    PC0NW01.YACCD = " ";
    PC0NW00.XXXPRCNM = "PC0N590"; /* Module identification*/
    set PC0NM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/
    return;
  end

  if (PC0NM001.YACCD in YACTBL.YACCD /* Code in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PC0NM001.YACCD != PC0NW01.YACCD) /* Code in table*/
      PC0NW00.PC0NWUPF = "N"; /* ===> reset update conformation flag*/
      PC0NW01.YACCD = PC0NM001.YACCD;
      PC0NM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0NM001.YACDESC = " ";
    PC0NW00.XXXPRCNM = "PC0N590"; /* Module identification*/
    set PC0NM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N590 ***********************/
end // end PC0N590

// -->Process Valid Input Request
Function PC0N600()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0N610(); /* ===> Process scroll request*/

    if (converseVar.validationMsgNum == 0) /* ===> no errors detected*/
      PC0NW00.PC0NWSWS = "Y"; /* Format the map switch*/
      PC0NW00.PC0NWF20 = "Y"; /* first 20 sizes*/
      PC0NW00.PC0NWIXS = 1; /* initialize size index*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0N610(); /* ===> Process scroll request*/

    if (converseVar.validationMsgNum == 0) /* ===> no errors detected*/
      PC0NW00.PC0NWSWS = "Y"; /* Format the map switch*/
      PC0NW00.PC0NWF20 = "N"; /* first 20 sizes*/
      PC0NW00.PC0NWIXS = PC0NW00.PC0NWIXF; /* ===> load new size index*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* process the entered data and get new plan if any item*/
   /* key data ahas changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Selection map requested*/
   || converseVar.eventKey is pf19) /* Selection map requested*/

    if (PC0NW00.PC0NWMOD == "Y")

      if (PC0NW00.PC0NWUPF == "N") /* ===> update comfirmation flag*/

        /* ------------------------------------------------------------*/
          /* IF Item key data has changed. (Map's modifiable data)*/
           /* ---> get new plan and check if an item in plan is open*/
        /* ------------------------------------------------------------*/

        if (PC0NW01.PC0NWETS != PC0NW01.PC6ETSDT /* ===>  ETS Date*/
         || PC0NW01.PC0NWSB2 != PC0NW01.YMTCD)   /* ===> Mode of Trans.*/
          /* R PC0NW01.PC0NWSB5 NE PC0NW01.XOWCD;/* ===> owner group*/

          PC0N620(); /* ===> get plan for split to item row*/

        else /* ===> item key data changed*/

          set PC0NM001.PC0NMPLL initialAttributes; /* ===> show new plan literal*/
          PC0NM001.PC0NMPLN = PC0NW01.PC6PLAN; /* ===> Load new plan*/

        end /* ===> item key data changed*/

        /* ------------------------------------------------------------*/
          /* IF Item destination changed. (Map's modifiable data)*/
           /* ---> calculate direct ship code*/
           /* ---> calculate spec diff code and dest country*/
          /* else*/
           /* ---> reset direct ship code*/
           /* ---> reset spec diff code and dest country*/
        /* ------------------------------------------------------------*/

        if (PC0NW01.PC0NWSB3 != PC0NW01.PC2CUXID /* ===> Cust Xref ID*/
         || PC0NW01.PC0NWSB4 != PC0NW01.XWHCD)   /* ===> warehouse*/
          /* R PC0NW01.PC0NWSB5 NE PC0NW01.XOWCD;/* ===> warehouse*/

          /* ------------------------------------------------------------*/
           /* get cust info if available, necessary for subsequent calc.*/
          /* ------------------------------------------------------------*/

          if (PC0NW01.PC0NWSB3 > " ") /* ===> Cust Xref*/
            PC0NS98(); /* ===>get cust info for div*/
          end

          PC0N630(); /* ===> calculate direct ship code*/

          /* ------------------------------------------------------------*/
           /* calc spec diff and destination country*/
          /* ------------------------------------------------------------*/

          PC0N640(); /* ===> calculate spec diff & dest cntry*/

        else /* ===> item key data not changed (reset*/

          /* ------------------------------------------------------------*/
           /* reset the associated values to the original value*/
          /* ------------------------------------------------------------*/

          if (PC0NW01.PC0NWXDS != PC0NW04.XDSCD) /* ===> reset xds code*/
            PC0NW01.PC0NWXDS = PC0NW04.XDSCD;
          end /* ===>*/

          if (PC0NW01.PC0NWXSD != PC0NW04.PC2INSEG) /* ===> reset spec diff.*/
            PC0NW01.PC0NWXSD = PC0NW04.PC2INSEG;
          end /* ===>*/

          if (PC0NW01.PC0NWXCT != PC0NW04.PC6XCTCD) /* ===> reset dest cntry*/
            PC0NW01.PC0NWXCT = PC0NW04.PC6XCTCD;
          end /* ===>*/

          if (PC0NW01.PC0NWXDV != PC0NW04.YSMXDV) /* ===> reset division*/
            PC0NW01.PC0NWXDV = PC0NW04.YSMXDV;
          end /* ===>*/

        end /* ===> item destination data changed*/

      end /* ===> conformation flag set check*/

      /* ------------------------------------------------------------*/
        /* Process PF19 request by splitting out all possible*/
        /* non-shipped Qtys and load them to the display record*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf19 /* Selection map requested*/
       && PC0NW00.PC0NWUPF == "N")     /* ===> update comfirmation flag*/

        PC0N650(); /* ===> Do split-out all possible QTYs*/

      end

      /* ------------------------------------------------------------*/
        /* it no errors the process data base update routine.*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0)
        PC0N700(); /* ===> Do data base update routine*/
      end /* ===> no errors detected*/

    end /* ===> modified data flag*/

  end /* ===> if PF19 or ENTER*/

   /* ------------------------------------------------------------*/
   /* if enter was pressed*/
       /* Set up for the next style or transfer to the from*/
       /* from application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ===> next style requested*/
   || converseVar.eventKey is pf19) /* ===> next style requested*/

    PC0NW00.PC0NWCSY = PC0NW00.PC0NWCSY + 1;

    if (PC0NW00.PC0NWCSY > PC0NW00.PC0NWTSY) /* ===> no more styles*/

      if (PC0NW00.PC0NWSWP == "Y" /* ===> protect switch is set*/
       || PC0NW00.PC0NWMOD == "N") /* ===> protect switch is set*/
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        PC0NW00.PC0NWXIT = "Y"; /* ===> exit application flag*/
      else
        PC0NW00.PC0NWSWF = "Y"; /* ===> format data*/
        PC0NW00.PC0NWSWS = "Y"; /* ===> format sizes*/
        PC0NW00.PC0NWSWP = "Y"; /* ===> protect data*/
        PC0NW00.PC0NWMOD = "N"; /* ===> modified data*/
      end

    else /* ===> set up for next style*/

      PC0NS99(); /* ===> re-initialize indexes & flags*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0N600 ***********************/
end // end PC0N600

// Verify Split QTYS request
Function PC0N610()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXM = 1; /* ===> Initialize map size index*/
  PC0NW00.PC0NWIXR = 0; /* ===> Initialize record size index*/

  PC0N611(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* set-up to verify the size qty split*/
   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWIXR <= 40) /* ===> Until size all processed*/

    PC0N612(); /* ===> verify size split QTYs changed*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N610 ***********************/
end // end PC0N610

// get the next valued size
Function PC0N611()
   /* ------------------------------------------------------------*/
   /* Get the next valued size desc. from the display record*/
   /* ------------------------------------------------------------*/
  PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1; /* ===>Increment rec size index*/

  while (PC0NW00.PC0NWIXR <= 40 /* ===> Until all sizes read*/
   && PC0NW01.SY4IDDSC[PC0NWIXR] == " ") /* ===> and valued size found*/

    PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N611 ***********************/
end // end PC0N611

// process scroll request
Function PC0N612()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.SY4IDDSC[PC0NWIXM] == PC0NW01.SY4IDDSC[PC0NWIXR])

    if (PC0NM001.PC0NMSQT[PC0NWIXM] != 0
     || PC0NM001.PC0NMSQT[PC0NWIXM] != PC0NW01.PC0NWSQT[PC0NWIXR])

      if (PC0NM001.PC0NMSQT[PC0NWIXM] != PC0NW01.PC0NWSQT[PC0NWIXR])

        PC0NW00.PC0NWMOD = "Y"; /* ===>modified data flag*/
        PC0NW00.PC0NWUPF = "N"; /* ===> reset update confirmation flag*/
        PC0NW01.PC0NWSQT[PC0NWIXR] = PC0NM001.PC0NMSQT[PC0NWIXM];

      end

      if (PC0NW01.PC0NWSQT[PC0NWIXR] > 0) /* ===> split requested*/

        /* ------------------------------------------------*/
         /* Check for split error QTYs error*/
        /* ===>  split QTYs request (item/size)*/
        /* ===>  - balance to ship > split qty*/
        /* ------------------------------------------------*/

        if (PC0NW01.PC0NWSQT[PC0NWIXR] > PC0NW00.PC0NWBAL[PC0NWIXR])
          if (PC0NM001.PC0NMMOD != PC0NM001.PC0NMSB2 /* mode changed*/
           || PC0NM001.PC0NMCUS != PC0NM001.PC0NMSB3 /* cust changed*/
           || PC0NM001.PC0NMWHS != PC0NM001.PC0NMSB4 /* whse changed*/
           || PC0NM001.PC0NMOWC != PC0NM001.PC0NMSB5) /* owner group*/

            converseLib.validationFailed(233); /* ===> QTYs split invalid*/
            PC0NW00.XXXPRCNM = "PC0N612";
            set PC0NM001.PC0NMSQT[PC0NWIXM] cursor, bold;

          end

        end /* ===> reduction error check*/

      end /* ===> split requested*/

      PC0NW00.PC0NWQTY = PC0NW00.PC0NWQTY + PC0NW01.PC0NWSQT[PC0NWIXR];

    end

    PC0N611(); /* ===> get next record size desc*/

    if (PC0NW00.PC0NWIXM < 20) /* ===> map size index*/
      PC0NW00.PC0NWIXM = PC0NW00.PC0NWIXM + 1; /* ===>Increment size index*/
    end

    return;

  end /* ===> map and record size desc match*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0NM001.SY4IDDSC[PC0NWIXM] != PC0NW01.SY4IDDSC[PC0NWIXR])

    if (PC0NW01.PC0NWSQT[PC0NWIXR] > 0) /* ===> split by QTY request*/

      PC0NW00.PC0NWQTY = PC0NW00.PC0NWQTY + PC0NW01.PC0NWSQT[PC0NWIXR];

    end

    PC0N611(); /* ===> get next record size desc*/

    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N612 ***********************/
end // end PC0N612

// get & load (new plan)
Function PC0N620()
   /* ------------------------------------------------------------*/
   /* Get the next available plan numberous process.*/
   /* with new plan number.*/
   /* ------------------------------------------------------------*/

  PC0N622(); /* ===> get highest plan available*/

   /* ===>increment plan number & load to display record*/
  PC0NW01.PC0NWPLN = PCYREC.PCYCOUNT + 1; /* ===> increment plan number*/
  PC0NM001.PC0NMPLN = PC0NW01.PC0NWPLN; /* ===> plan to map 1*/
  set PC0NM001.PC0NMPLL initialAttributes; /* ===> plan literal on map 1*/

   /* **                                                        ***/
   /* ********************** End of PC0N620 ***********************/
end // end PC0N620

// get max plan for new item row
Function PC0N622()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>pass row storage area*/

  VPOITM05.XGPCD = PC0NW01.XGPCD;
  VPOITM05.PO-REG-CD = PC0NW01.PO-REG-CD; /* ===> P.O. REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW01.PC3PONBR; /* ===> P.O. NBR*/
  VPOITM05.SY1STNBR = PC0NW04.SY1STNBR;
  VPOITM05.SY2CLRID = "*";
  PCYREC.PCYFUNC = "M1"; /* ===> P.O. NBR*/

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0NW00.XXXPRCNM = "PC0N622"; /* Module identification*/
  set PC0NM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX (M1) PLAN   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0N622 ***********************/
end // end PC0N622

// re-calculate direct ship code
Function PC0N630()
   /* ------------------------------------------------------------*/
   /* re-calculate dirct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB4 == " "
   && PC0NW01.PC0NWSB3 > " ")

    PC0NW01.PC0NWXDS = "1"; /* ===> default direct ship code*/

  end /* ===> warehouse blank and customer valued*/

   /* ------------------------------------------------------------*/
   /* re-calculate direct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB4 > " "
   && PC0NW01.PC0NWSB3 == " ")

    PC0NW01.PC0NWXDS = " "; /* ===> default direct ship code*/

  end /* ===> warehouse valued and customer blank*/

   /* ------------------------------------------------------------*/
   /* re-calculate dirct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB4 > " "
   && PC0NW01.PC0NWSB3 > " ")

    if (PC2REC.YPCCD == "N")

      PC0NW01.PC0NWXDS = " "; /* ===> default direct ship code*/

    end /* ===> customer type check*/

    if (PC2REC.YPCCD == "C"
     || PC2REC.YPCCD == "S")

      PC0NW01.PC0NWXDS = "2"; /* ===> default direct ship code*/

    end /* ===> customer type check*/

  end /* ===> warehouse and customer both*/
                                   /* valued*/

   /* **                                                        ***/
   /* ********************** End of PC0N630 ***********************/
end // end PC0N630

// calc. dest.ctry & spec.diff
Function PC0N640()
   /* ------------------------------------------------------------*/
   /* calc and Load Spec diff to W.S.*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB3 > " ")
    PC0NW01.PC0NWXSD = PC2REC.PC2INSEG;
  else /* ===>Cust = blank*/
    PC0NW01.PC0NWXSD = "000";
  end /* ===>Cust >  blank*/

   /* ------------------------------------------------------------*/
   /* calc and Load DEST CTRY to W.S.*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB3 > " ")
    PC0NW01.PC0NWXCT = PC2REC.XCTCD;
    PC0NW01.PC0NWXDV = PC2REC.YSMXDV;
  else /* ===>cust > blank*/
    if (PC0NW01.PC0NWSB4 == "12")
      PC0NW01.PC0NWXCT = "USA";
      PC0NW01.PC0NWXDV = "20";
    else /* ===>cust > blank*/
      if (PC0NW01.PC0NWSB4 == "60")
        PC0NW01.PC0NWXCT = "BELG";
        PC0NW01.PC0NWXDV = "20";
      else /* ===>cust > blank*/
        if (PC0NW01.PC0NWSB4 == "61")
          PC0NW01.PC0NWXCT = "NETH";
          PC0NW01.PC0NWXDV = "20";
        else
          PC0NW01.PC0NWXCT = "USA";
          PC0NW01.PC0NWXDV = "10";
        end
      end
    end
  end /* ===>cust is blank*/

   /* **                                                        ***/
   /* ********************** End of PC0N640 ***********************/
end // end PC0N640

// calc max QTYs avail for split
Function PC0N650()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  move 0 to PC0NW01.PC0NWSQT[1] for all; /* ===> Initialize Split QTY Array*/
  PC0NW00.PC0NWQTY = 0; /* ===> Initialize QTY Accumulator*/
  PC0NW01.PC0NWTVL = 0; /* ===> Initialize QTY value Accumulator*/
  PC0NW00.PC0NWIXR = 1; /* ===> initialize record index*/

  while (PC0NW00.PC0NWIXR <= 40)

    if (PC0NW01.PC7ORDEQ[PC0NWIXR] > 0) /* ===> on order QTYs exist*/

      /* --------------------------------------------------*/
      /* ===>  on order QTYs      (item/size being maint.)*/
      /* ===>  calc. split QTYs request (item/size)*/
      /* --------------------------------------------------*/

      if (PC0NW00.PC0NWBAL[PC0NWIXR] >= PC0NW01.PC7ORDEQ[PC0NWIXR])
        PC0NW01.PC0NWSQT[PC0NWIXR] = PC0NW01.PC7ORDEQ[PC0NWIXR];
      else
        PC0NW01.PC0NWSQT[PC0NWIXR] = PC0NW00.PC0NWBAL[PC0NWIXR];
      end

      /* ------------------------------------------------*/
       /* Accumulate total split QTYs requested and*/
       /* calculate new total value.*/
      /* ------------------------------------------------*/

      PC0NW00.PC0NWQTY = PC0NW00.PC0NWQTY + PC0NW01.PC0NWSQT[PC0NWIXR];

      PC0N523(); /* ===> calculate value*/

    end /* ===> sizes QTYs on-order exist*/

    PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1;

  end /* ===> while more sizes*/

  PC0NW01.PC0NWTVL = PC0NW01.PC0NWTVL + PC0NW01.PC6MICHG; /* add misc chg*/

   /* ------------------------------------------------------------*/
   /* Successful calculation of max available split QTYs*/
   /* thus, adjust and load  data to the display record and map*/
   /* ------------------------------------------------------------*/

  PC0NW01.PC0NWSPT = PC0NW00.PC0NWQTY; /* ===> Total New/Add QTYs*/
  PC0NW01.PC6TORDE = PC0NW04.PC6TORDE - PC0NW00.PC0NWQTY;

  PC0NM001.PC0NMSPT = PC0NW00.PC0NWQTY; /* ===> Total New/Add QTYs*/
  PC0NM001.PC0NMTVL = PC0NW01.PC0NWTVL; /* ===> new tot value*/
  PC0NM001.PC0NMQTY = PC0NW01.PC6TORDE; /* ===> map display*/

  PC0NW00.PC0NWSWS = "Y"; /* ===> set fomat sizes flag*/
  PC0NW00.PC0NWIXS = 1; /* ===> reset size index*/
  PC0NW00.PC0NWF20 = "Y"; /* ===> set first 20 sizes flag*/

  if (PC0NW01.PC6TORDE == 0)
    set PC0NM001.PC0NMQTY skip, bold; /* ===> map display*/
    set PC0NM001.PC0NMSPT cursor, bold; /* ===> map display*/
    PC0NW00.XXXPRCNM = "PC0N650"; /* Module identification*/
    PCWREC.XXXMSGNO = 266; /* cannot split out all QTYs*/
    exit stack; /* ===> exit to format and display data*/
  end

  if (PC0NW01.PC0NWSPT == 0)
    PC0NM001.PC0NMSPT = 0; /* ===> Total New/Add QTYs*/
    set PC0NM001.PC0NMSPT cursor, bold; /* ===> map display*/
    PC0NW00.XXXPRCNM = "PC0N650"; /* Module identification*/
    PCWREC.XXXMSGNO = 271; /* all QTYs shipped*/
    exit stack; /* ===> exit to format and display data*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0N650 ***********************/
end // end PC0N650

// ---> Process Database update
Function PC0N700()
   /* ------------------------------------------------------------*/
   /* check update confirmation flag*/
   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWUPF == "N") /* ===>update flag*/
    PCWREC.XXXMSGNO = 84; /* ===>update confirmation message*/
    PC0NW00.XXXPRCNM = "PC0N700"; /* ===> module identification*/
    set PC0NM001.PC0NMSB1 cursor; /* ===>position cursor*/
    PC0NW00.PC0NWUPF = "Y"; /* ===>update flag*/
    exit stack;
  end

  if (PC0NW00.PC0NWUPF == "Y") /* ===>update flag*/
    /**/
    PC0NW00.PC0NWUPF = "N"; /* ===>update flag*/
    /**/
    XX0XS01(); /* ==> get current date and time for D.B. Updates*/
    /**/
     /* ------------------------------------------------------------*/
      /* - Check to see if an item row exist*/
         /* ** YES ***/
         /* - perform merge item routine if it exists*/
             /* & update row with the new key and modified data*/
         /* ** NO  ***/
         /* - add new item/size to table with new seq nbr*/
     /* In all cases:*/
      /* - update old item/size with old seq nbr & QTY Reduction*/
     /* ------------------------------------------------------------*/
    /**/
    /**/
    PC0NS56(); /* ===> select (S ) row for existence*/
    /**/
    if (PC0NW00.PC0NWMRG == "Y") /* ===> merge item's flag*/
      /**/
       /* ------------------------------------------------------------*/
       /* row exists therefore merge is required*/
         /* - VPOITM04 is now the merge to row and is save in PC0NW06*/
         /* - load any changes made to the update record (total QTYS)*/
         /* - by using the new sequence number update the D.B.*/
         /* - if Merge/update was successful (item level)*/
           /* - the split QTYs will be moved to the existing row*/
       /* ------------------------------------------------------------*/
      /**/
      PC0N710(); /* ===> process merge items routine*/
      /**/
      PC0NS81(); /* ===> update (UA) item row*/
      /**/
      PC0N720(); /* ===> perform merge the size QTYs*/
      /**/
      /**/
    else /* ===> merge item flag is "N"*/
      /**/
       /* ------------------------------------------------------------*/
        /* Row did not exist, therefore insert the item in the D.B.*/
        /* use a new sequence number.*/
            /* -  create FOB Price Templete if customer changed*/
            /* -  create/insert new rows with new sequence number*/
            /* -  update old row with old sequence number*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC0NW01.PC0NWSB3 != PC0NW04.PC2CUXID) /* ==> customer change*/
        /**/
        PC0NSB8(); /* ===> Set-up and get Factory FOB*/
        /**/
        PC0NSB0(); /* ===> build FOB Price templete*/
        /**/
      end /* ==> Customer Xref change*/
      /**/
      /**/
      PC0NS90(); /* ===> get/load new sequence number*/
      /**/
      /**/
      PC0N730(); /* ===> load changes to the insert*/
                                   /* record*/
      /**/
      PC0NS06(); /* ===> save "merge to" row*/
      /**/
      PC0NS91(); /* ===> insert (A ) item row*/
      /**/
      if (VPOITM05.PC61TMSH == "Y")
        PC0NSC0();
        if (SQLCA.VAGen_SQLCODE == 0)
          PC0NSC1();
        end
      end
      PC0N740(); /* ===> perform add the size QTYs*/
      /**/
    end /* ===> SQL = 0 check*/
    /**/
     /* ------------------------------------------------------------*/
     /* (merge/update or insert/add) was successful*/
     /* in all cases:*/
     /* the old item must be updated (total QTYs)*/
       /* - initialize the update record*/
       /* - load the old copy of the row to the update record*/
       /* - load total QTYs criteria to the update record*/
       /* - update the D.B.*/
     /* the old item's size QTYs must be reduced.*/
     /* ------------------------------------------------------------*/
    /**/
    PC0N750(); /* ===> load split criteria to update record*/
    /**/
    PC0NS81(); /* ===> update/ (UA) item row*/
     /* =============================> using the old sequence number*/
    /**/
    PC0N760(); /* ===> process update (u ) item's size row*/
    /**/
    PC0NS82(); /* ===> update (UA) size row*/
     /* =============================> using the old sequence number*/
    /**/
    /**/
    if (PC0NW01.XGPCD == "02")
      PC0N800(); /* ===> process "FOOTWEAR" audits*/
                                   /* routine*/
    end
    /**/
    if (PC0NW01.XGPCD == "03")
      PC0N900(); /* ===> process "APPAREL" audits routine*/
    end
    /**/
    /**/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    /**/
    PC0NW00.XXXPRCNM = "PC0N700"; /* Module identification*/
    PCWREC.XXXMSGNO = 1; /* ===> update successful*/
    /**/
  end /* ===> confirm update flag*/

   /* **                                                        ***/
   /* ********************** End of PC0N700 ***********************/
end // end PC0N700

// Do process "MERGE" item logic
Function PC0N710()
   /* ------------------------------------------------------------*/
    /* process the  merge of two item plans*/
   /* ------------------------------------------------------------*/

  PC0NS06(); /* ===> save merge to item row in*/
                                   /* PC0NW06*/

   /* ------------------------------------------------------------*/
      /* - check to see either changed/merge item is open*/
        /* - cannot merge plans if either item is not open*/
   /* ------------------------------------------------------------*/

  if (PC0NW06.PC6STAT != "OP" /* ===>check status*/
   || PC0NW04.PC6STAT != "OP") /* ===>check status*/

    PC0NW00.XXXPRCNM = "PC0N710"; /* Module identification*/
    converseLib.validationFailed(368); /* ===>cannot merging plans with current*/
                                   /* status*/
    exit stack; /* ===> exit to display error on the map*/

  end

   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped (VCPLHD02)*/
               /* (for destination of new merge to row)*/
        /* - cannot merge items if products have been shipped*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB3 != PC0NW01.PC2CUXID
   || PC0NW01.PC0NWSB4 != PC0NW01.XWHCD
   || PC0NW01.PC0NWSB5 != PC0NW01.XOWCD)

    PC0N711(); /* ===>get shipped quantities*/

    if (PC0NW00.TSISHPQT != 0) /* ===>products have been shipped*/

      PC0NW00.XXXPRCNM = "PC0N710"; /* Module identification*/
      converseLib.validationFailed(250); /* ===>split invalid, products have been*/
                                   /* shipped*/
      exit stack; /* ===> exit to display error on the map*/

    end

  end

   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been received (VFYPO001)*/
        /* - cannot merge plans if merge to item has receipt data*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB4 != PC0NW01.XWHCD
   && PC0NW01.PC0NWSB4 != PC0NW01.XWHCD)

    PC0N712(); /* ===>get receipt data*/

    if (PC0NW00.PCMRCPTQ != 0) /* ===>products has receipt data*/

      converseLib.validationFailed(267); /* ===>split invalid, products have*/
                                   /* receipt QTYs*/
      PC0NW00.XXXPRCNM = "PC0N710"; /* Module identification*/
      exit stack; /* ===> exit to display error on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Load merge data from changed item to existing item*/
   /* ------------------------------------------------------------*/

  PC0N713(); /* ===>merge data to update record*/

   /* **                                                        ***/
   /* ********************** End of PC0N710 ***********************/
end // end PC0N710

// Check shipped QTYs existence
Function PC0N711()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - Accumulate the the total quantities shipped for*/
     /* the given ---> Product & Destination*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0NW00.TSISHPQT = 0; /* ===>reset total shipped qtys*/
  PC0NW00.PC0NWSWT = "N"; /* ===> initialize temp cursor "CPLHD"'*/

  set TSTREC empty; /* ===> initialize record*/

  TSTREC.XGPCD = PC0NW04.XGPCD; /* ===>*/
  TSTREC.PC3PONBR = PC0NW04.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS  (non modifiable fields)*/
   /* ============>--------------*/
  TSTREC.SY1STNBR = PC0NW04.SY1STNBR; /* ===>*/
  TSTREC.SY2CLRID = PC0NW04.SY2CLRID; /* ===>*/
  TSTREC.XDMCD = PC0NW04.XDMCD; /* ===>*/
  TSTREC.XQACD = PC0NW04.XQACD; /* ===>*/
  TSTREC.XOWCD = PC0NW04.XOWCD; /* ===>*/
  TSTREC.PC2INSEG = PC0NW01.PC0NWXSD; /* ===> split by data*/
  TSTREC.XPGCD = PC0NW04.XPGCD; /* ===>*/
  TSTREC.XUMCD = PC0NW04.XUMCD; /* ===>*/

   /* =======> DESTINATION FIELDS  ---> (for row w/ split by data)*/
   /* ========> ------------------  --->  for merge 'from' row*/
  TSTREC.PC2CUXID = PC0NW01.PC0NWSB3; /* ===>*/
  TSTREC.XWHCD = PC0NW01.PC0NWSB4; /* ===>*/
  TSTREC.XOWCD = PC0NW01.PC0NWSB5; /* ===>*/

  PC0NS11(); /* ===>Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Balance to Ship" until EOF*/
   /* ------------------------------------------------------------*/

  PC0NS12(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC0NW00.PC0NWSWT == "N") /* ===>Until end of cursor temp for*/
                                   /* "CPL"*/

    if (TSTREC.TSISTAT == "IT" /* ===> Shipped quantities*/
     || TSTREC.TSISTAT == "CC" /* ===> Custom carried quantities*/
     || TSTREC.TSISTAT == "RC") /* ===> Custom carried quantities*/

      PC0NW00.TSISHPQT = PC0NW00.TSISHPQT + TSTREC.TSISHPQT;

    end

    PC0NS12(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0NS13(); /* ===> Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0N711 ***********************/
end // end PC0N711

// Check received QTYs existence
Function PC0N712()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - process the set of rows for value in receipt array*/
     /* - cannot merge plans because receipt data exists*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWSWT = "N"; /* Set EOF Temp cursor flag to no*/
  PC0NW00.PCMRCPTQ = 0; /* reciept data accumulator*/

  set VFYPO002 empty;

  VFYPO002.XGPCD = PC0NW04.XGPCD;
  VFYPO002.PO-REG-CD = PC0NW04.PO-REG-CD; /* PO REGION CODE*/
  VFYPO002.PC3PONBR = PC0NW04.PC3PONBR; /* PO number*/
  VFYPO002.SY1STNBR = PC0NW04.SY1STNBR; /* Style number*/
  VFYPO002.SY2CLRID = PC0NW04.SY2CLRID; /* Color code*/
  VFYPO002.XDMCD = PC0NW04.XDMCD; /* Dimension code*/
  VFYPO002.XQACD = PC0NW04.XQACD; /* Quality code*/
  VFYPO002.PC2INSEG = PC0NW01.PC0NWXSD; /* ===> split by data*/
  VFYPO002.XPGCD = PC0NW04.XPGCD; /* Package code*/
  VFYPO002.XUMCD = PC0NW04.XUMCD; /* Unit of measure*/

  VFYPO002.XWHCD = PC0NW01.PC0NWSB4; /* ===> split by data*/
  VFYPO002.XOWCD = PC0NW01.PC0NWSB5; /* ===> split by data*/
   /* -------------------------*/
    /* test whether to use generic xow or set from item*/
   /* -------------------------*/
  VFYPO002.XOWCD = "*"; /* Owner group code*/
  if (VFYPO002.XWHCD == "09") /* if promo warehouse*/
        /* leave OG = '*'*/
  else
    if (VFYPO002.XGPCD == "03") /* if apparel*/
      set PG2REC empty;
      PG2REC.XGPCD = VFYPO002.XGPCD;
      PG2REC.SY1STNBR = VFYPO002.SY1STNBR;
      PG2REC.SY2CLRID = VFYPO002.SY2CLRID;
      PG2REC.XDMCD = VFYPO002.XDMCD;
      XSPG202(); /* read pg2rec (syclr)*/
      if (PG2REC.XFMCD == "21" /* if finished good*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC0NW01.PC0NWSB5; /* xow of item*/
      end
    end
  end

  PC0NS71(); /* ===>Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  PC0NS72(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  if (VFYPO002.YRSCD == "10" /* ===> receiving status code*/
   || VFYPO002.YRSCD == "12")

    while (PC0NW00.PC0NWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

      /* ------------------------------------------------------------*/
       /* If there is size quanitities in the size quantity array*/
       /* for received data in working storage set end of cursor and*/
       /* signify error for merging plans not allowed if either plan*/
       /* has reicpt data.*/
      /* ------------------------------------------------------------*/

      PC0NW00.PC0NWIXT = 1; /* Initialize general index*/

      while (PC0NW00.PC0NWIXT <= 40
       && PC0NW00.PC0NWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

        if (VFYPO002.PCMRCPTQ[PC0NWIXT] != 0)
          PC0NW00.PCMRCPTQ = VFYPO002.PCMRCPTQ[PC0NWIXT];
          PC0NW00.PC0NWSWT = "Y";
                                   /* ===> force  EOF temp cursor "FYPO"*/
        end

        PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

      end /* ===>while more sizes or Receipt data*/
                                   /* found*/

    end /* ===> receiving status code check*/

    PC0NS72(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0NS73(); /* ===> Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0NS70 ***********************/
end // end PC0N712

// Do "load" item data    "MERGE"
Function PC0N713()
   /* ------------------------------------------------------------*/
   /* Merge the split request, "Split From" Item's QTYs*/
      /* to the "Merge To" Item's QTYs*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  PC0NS16(); /* ===> load saved copy of merge to row to update rec*/

  VPOITM05.PC6TORDE = PC0NW06.PC6TORDE + PC0NW01.PC0NWSPT;
  VPOITM05.PC6TADD = PC0NW06.PC6TADD + PC0NW01.PC0NWSPT;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0N713 ***********************/
end // end PC0N713

// Process Size QTYs "Merge"
Function PC0N720()
   /* ------------------------------------------------------------*/
   /* Process the merge of two item's Size QTYs.*/
      /* Select the size row that will merged to*/
         /* if it exist proceed to update it*/
         /* else error*/
   /* ------------------------------------------------------------*/

  PC0NS46(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    PC0NS07(); /* ===> save merge to size row for*/
                                   /* audits in PC0NW07*/

    /* ------------------------------------------------------------*/
     /* load the sizes to the size record & do update call*/
       /* - the QTYs loaded to the merged row are on the display*/
         /* record.  (ie: the old item row being split from.)*/
    /* ------------------------------------------------------------*/

    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0NW00.PC0NWIXT = 1; /* ===>initialize temp index*/

    while (PC0NW00.PC0NWIXT <= 40) /* ===>until all sizes processed*/

      if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0)

        if (VPOSIZ02.PC7ORDEQ[PC0NWIXT] == 0)
          VPOSIZ02.PC7FOBFL[PC0NWIXT] = PC0NW01.PC7FOBFL[PC0NWIXT];
          VPOSIZ02.FY4FOBPR[PC0NWIXT] = PC0NW01.FY4FOBPR[PC0NWIXT];
        end

        PC0NW00.PC7ORDEQ = PC0NW01.PC0NWSQT[PC0NWIXT];
        VPOSIZ02.PC7ORDEQ[PC0NWIXT] = VPOSIZ02.PC7ORDEQ[PC0NWIXT] +         PC0NW00.PC7ORDEQ;

      end

      PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

    end

    PC0NS82(); /* ===> update size row*/

  else

    converseLib.validationFailed(12); /* ===> updated by another*/
    PC0NW00.XXXPRCNM = "PC0N720"; /* ===> process identification*/

    PC0NS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> ROLL BACK ALL CHANGES*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0N720 ***********************/
end // end PC0N720

// Do "Load" Item record "INSERT"
Function PC0N730()
   /* ------------------------------------------------------------*/
   /* Load modified data from map*/
   /* and related load data necessary for creating new item*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  PC0NS14(); /* ===> load the saved copy of the split*/
                                   /* from item row*/

  if (PC0NW01.PC0NWSB3 != PC0NW04.PC2CUXID /* ===> Cust Xref*/
   || PC0NW01.PC0NWSB4 != PC0NW04.XWHCD)  

    /* ------------------------------------------------------------*/
     /* Load Customer Xref Change*/
    /* ------------------------------------------------------------*/

    if (PC0NW01.PC0NWSB3 != PC0NW04.PC2CUXID) /* ===> Cust Xref*/
      VPOITM05.PC2CUXID = PC0NW01.PC0NWSB3; /* ===> Cust Xref*/
      VPOITM05.OP1CUPO = " "; /* ===> op-Cust-po*/
      VPOITM05.OP1PARTN = " "; /* ===> op-ord-part-char*/
      VPOITM05.OP1CUOID = 0; /* ===> op-cust-ord-id*/
      VPOITM05.OP1NORID = 0; /* ===> op-nike-ord-id*/
    end

    /* ------------------------------------------------------------*/
     /* Load Warehouse Change*/
    /* ------------------------------------------------------------*/

    if (PC0NW01.PC0NWSB4 != PC0NW04.XWHCD)
      VPOITM05.XWHCD = PC0NW01.PC0NWSB4;
      VPOITM05.XOWCD = PC0NW01.PC0NWSB5;
    end

    /* ------------------------------------------------------------*/
     /* Load DEST CTRY & spec (Calculated in PC0N640)*/
    /* ------------------------------------------------------------*/

    VPOITM05.PC61TMSH = "N"; /* ===> one time shipment override flag*/
    VPOITM05.PC6XCTCD = PC0NW01.PC0NWXCT; /* ===> load dest country*/
    VPOITM05.PC2INSEG = PC0NW01.PC0NWXSD;
    VPOITM05.YSMXDV = PC0NW01.PC0NWXDV;

  end /* ===>Cust or Whse Changed*/

  if (PC0NW01.PC0NWSB2 != PC0NW04.YMTCD) /* => mode Code*/
    VPOITM05.YMTCD = PC0NW01.PC0NWSB2; /* => mode Code*/
  end

  if (PC0NW01.PC0NWSB5 != PC0NW04.XOWCD) /* => owner group*/
    VPOITM05.XOWCD = PC0NW01.PC0NWSB5; /* => owner group*/
  end

  VPOITM05.PC6ETSDT = PC0NW01.PC0NWETS;
  VPOITM05.PC6PLAN = PC0NW01.PC0NWPLN; /* ===> new plan*/
  VPOITM05.PC6ITMNB = PC0NW01.PC0NWSEQ;
                                   /* ===> new item sequence numbet*/
  VPOITM05.XDSCD = PC0NW01.PC0NWXDS; /* ===> calculated direct ship*/
  VPOITM05.PC3SIFL = "N"; /* ===> Special Insruction flag*/

  if (PC0NW04.XGPCD == "02")
    if (PC0NW04.PC4ORTYP == "FT"
     || PC0NW04.PC4ORTYP == "OR"
     || PC0NW04.PC4ORTYP == "S1"
     || PC0NW04.PC4ORTYP == "S4")
      if (PC0NW01.PC0NWETS != PC0NW04.PC6ETSDT)
        VPOITM05.PC6OETAL = 0; /* ===> reset override ETAL date*/
        VPOITM05.PC6ETALF = "N"; /* ===> reset ETAL default flag*/
      end
    end /* ===> order type check*/
  end /* ===> GPC = '02'*/

  if (PCWREC.XGPCD == "03") /* Apparel only*/
    VPOITM05.PC6AIRDT = 0;
    VPOITM05.PC6AIRNB = 0;
    VPOITM05.PC-NIKE-AFRGT-PCT = 0;
    VPOITM05.PC-FCTY-AFRGT-PCT = 0;
  else
    if (PC0NW01.YMTCD == "AF" /* ===> Mode is by "AIR FREIGHT"*/
     && PC0NW01.PC0NWSB2 != "AF") /* ===> Mode is by "AIR FREIGHT"*/
      VPOITM05.PC6AIRDT = 0;
      VPOITM05.PC6AIRNB = 0;
      VPOITM05.PC-NIKE-AFRGT-PCT = 0;
      VPOITM05.PC-FCTY-AFRGT-PCT = 0;
    end
  end

  VPOITM05.PC6TORIG = PC0NW01.PC0NWSPT; /* ===> split total QTYs*/
  VPOITM05.PC6TORDE = PC0NW01.PC0NWSPT;
  VPOITM05.PC6TADD = 0;
  VPOITM05.PC6TCNCL = 0;
  VPOITM05.PC6MICHG = 0;

   /* *************************************************************/
   /* ***new line because of DB2 changes 11-06-90 *****************/
  VPOITM05.PC6PREFL = "N";
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Default spaces to bnk-cd for inserts*/
   /* ------------------------------------------------------------*/

  VPOITM05.XIB-IBANK-CD = " "; /* bnk-cd*/

  VPOITM05.PC6PREFL = "N"; /* new pre-build flag 11-06-90*/
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0N730 ***********************/
end // end PC0N730

// process add new Size QTYs
Function PC0N740()
   /* ------------------------------------------------------------*/
   /* Process the add of new item's Size QTYs row.*/
   /* Note:  If the customer was changed, resulting in a split,*/
             /* the source for the new item's size prices are*/
             /* in the FOB Price Templete.*/
          /* Otherwise, the new item carries with it the prices*/
             /* from the split from row.*/
   /* ------------------------------------------------------------*/

  PC0NS46(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    PC0NW00.XXXPRCNM = "PC0N740"; /* Module identification*/
    set PC0NM001.PC3PONBR cursor;
    converseLib.validationFailed(12); /* =======> data updated by another*/

    PC0NS99(); /* ===> re-initialize indexes and sizes*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  else

    /* ------------------------------------------------------------*/
     /* Initialize the key information for select call*/
    /* ------------------------------------------------------------*/

    set VPOSIZ02 empty; /* ====> row storage area*/

    VPOSIZ02.XGPCD = PC0NW01.XGPCD;
    VPOSIZ02.PO-REG-CD = PC0NW01.PO-REG-CD;
    VPOSIZ02.PC3PONBR = PC0NW01.PC3PONBR;
    VPOSIZ02.PC6ITMNB = PC0NW06.PC6ITMNB; /* ===> save sequence number*/

    VPOSIZ02.ZFC-CRCY-CD = "   ";
                                                /* new jun93,spaces for now*/

    PC0NW00.PC0NWIXT = 1;

    while (PC0NW00.PC0NWIXT <= 40)

      if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0)
        VPOSIZ02.PC7ORIGQ[PC0NWIXT] = PC0NW01.PC0NWSQT[PC0NWIXT];
        VPOSIZ02.PC7ORDEQ[PC0NWIXT] = PC0NW01.PC0NWSQT[PC0NWIXT];

        if (PC0NW01.PC0NWSB3 == PC0NW04.PC2CUXID) /* ==> customer not change*/
          VPOSIZ02.PC7FOBFL[PC0NWIXT] = PC0NW01.PC7FOBFL[PC0NWIXT];
          VPOSIZ02.FY4FOBPR[PC0NWIXT] = PC0NW01.FY4FOBPR[PC0NWIXT];
        else /* ==> use FOB price templete*/
          VPOSIZ02.PC7FOBFL[PC0NWIXT] = PC0NW01.PC0NWVRF[PC0NWIXT];
          VPOSIZ02.FY4FOBPR[PC0NWIXT] = PC0NW01.PC0NWVRD[PC0NWIXT];
        end

      else
        VPOSIZ02.PC7FOBFL[PC0NWIXT] = "N";
      end

      PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

    end

    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0NS07(); /* ===> save copy of inserted size row*/

    PC0NS92(); /* ===> Insert (A ) size row*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0N740 ***********************/
end // end PC0N740

// Do "Load" update old Item
Function PC0N750()
   /* ------------------------------------------------------------*/
   /* Load appropriate data to split out an item's QTYs*/
   /* ------------------------------------------------------------*/

  PC0NS14(); /* ===> load saved split from item data*/

  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - PC0NW01.PC0NWSPT;
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PC0NW01.PC0NWSPT;

  if (PC0NW01.XGPCD == "02"
   && PC5REC.PC5TSHIP == 0) /* ===> no in transit products*/
                                   /* (VCLPIT01)*/

    /* ------------------------------------------------------------*/
     /* Check to see if the item's status code needs to be updated*/
    /* ------------------------------------------------------------*/

    PC0N751(); /* ===> check for status update needed*/

    if (PC0NW00.PC0NWFL1 == "N") /* ===>  all QTYs recieved*/
      PC0NW01.PC6STAT = "NC";
      VPOITM05.PC6STAT = "NC";
      VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
    end /* ===> status update check*/

  end /* ===> if GPC = '02'*/

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0N750 ***********************/
end // end PC0N750

// Do check status "NC" update
Function PC0N751()
   /* ------------------------------------------------------------*/
    /* This module is similar to PC0N650 , which calculated*/
    /* the max QTYs available for split.*/

     /* If the maintenance "Split From" row has QTYs*/
      /* -Check to see if the Balance to Ship  >= On Order*/
       /* - if true:  Check to see if "All QTYs" Split out*/
               /* **  true: O.K. to close item "NC"*/
               /* ** false: still QTYs left to receive and Item*/
                         /* cannot be close "NC"*/
       /* - if false: Check to see if "Balance to Ship" Split out*/
               /* **  true: O.K. to close item "NC"*/
               /* ** false: still QTYs left to receive and Item*/
                         /* cannot be close "NC"*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWIXR = 1; /* ===> initialize record index*/
  PC0NW00.PC0NWFL1 = "N"; /* ===> init QTYs still left to receive*/

  while (PC0NW00.PC0NWIXR <= 40)

    if (PC0NW01.PC7ORDEQ[PC0NWIXR] > 0) /* ===> on order QTYs exist*/

      if (PC0NW00.PC0NWBAL[PC0NWIXR] >= PC0NW01.PC7ORDEQ[PC0NWIXR])

        /* ------------------------------------------------------------*/
           /* Check to see if "All QTYs" Split out*/
        /* ------------------------------------------------------------*/

        if (PC0NW01.PC7ORDEQ[PC0NWIXR] == PC0NW01.PC0NWSQT[PC0NWIXR])
          /* ========= Next Sentence ===============>*/
        else
          PC0NW00.PC0NWFL1 = "Y";
                                   /* ===> QTYs still left to receive*/
        end

      else

        /* ------------------------------------------------------------*/
           /* Check to see if "Balance to Ship" QTYs Split out*/
        /* ------------------------------------------------------------*/

        if (PC0NW01.PC0NWSQT[PC0NWIXR] == PC0NW00.PC0NWBAL[PC0NWIXR])
          /* ========= Next Sentence ===============>*/
        else
          PC0NW00.PC0NWFL1 = "Y";
                                   /* ===> QTYs still left to receive*/
        end

      end

    end /* ===> sizes QTYs on-order exist*/

    PC0NW00.PC0NWIXR = PC0NW00.PC0NWIXR + 1;

  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0N751 ***********************/
end // end PC0N751

// "Load"  update old Size's QTYs
Function PC0N760()
   /* ------------------------------------------------------------*/
   /* Initialize the key information with saved copy of size row*/
   /* Process the reduction of the item's Size QTYs row.*/
   /* - load the size reductions to the size record*/
   /* - reset FOB Prices and flags if QTYs go to Zero*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty;

  PC0NS15(); /* ===> load saved copy of old items size row*/

  PC0NW00.PC0NWIXT = 1;

  while (PC0NW00.PC0NWIXT <= 40)

    if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0)

      PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXT];
      PC0NW00.PC7ORDEQ = PC0NW01.PC7ORDEQ[PC0NWIXT];

      VPOSIZ02.PC7ORDEQ[PC0NWIXT] = PC0NW00.PC7ORDEQ - PC0NW00.PC0NWSQT;

      if (VPOSIZ02.PC7ORDEQ[PC0NWIXT] <= 0)
        VPOSIZ02.PC7FOBFL[PC0NWIXT] = "N";
        VPOSIZ02.FY4FOBPR[PC0NWIXT] = 0;
      end

    end

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

  end

  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0N760 ***********************/
end // end PC0N760

// ===> "FOOTWEAR" Audit routine
Function PC0N800()
   /* ------------------------------------------------------------*/
   /* If the merge flag is set to yes*/

   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWMRG == "Y") /* ===> Merge flag*/
    /* ------------------------------> therefore "Merge" occured*/

    /* ------------------------------------------------------------*/
     /* Process audit for the "MERGE TO " row.*/
        /* - process item audit process for merge to row.*/
        /* - process size audit process for merge to row.*/
    /* ------------------------------------------------------------*/

    PC0N820(); /* ===> process item audit routine*/

    PC0N830(); /* ===> process size level audit*/

  else /* ===> Do audit for Newly created Item*/

    /* ------------------------------------------------------------*/
     /* Process audit for newly created item.*/
        /* - process item audit process. (Item start up)*/
        /* - process size audit process. (Item size start up)*/
    /* ------------------------------------------------------------*/

    PC0N850(); /* ===> process item audit merge (inserted)*/

    PC0N860(); /* ===> process size level audit (inserted)*/

  end /* ===> end audit for split to item/size*/

   /* ------------------------------------------------------------*/
   /* Process audit for the "MERGE FROM " row.*/

   /* In both of the above cases, the Item was reduced in QTYs.*/
    /* * therefore write out an audit.*/
     /* - process change memo (for selected row that was reduced)*/
     /* - process item audit  (for selected row that was reduced)*/
     /* - process size audit  (for selected row that was reduced)*/

   /* ------------------------------------------------------------*/

  PC0N880(); /* ===> process item audit from cancel*/

  PC0N890(); /* ===> process size level audit cancel*/

   /* **                                                        ***/
   /* ********************** End of PC0N800 ***********************/
end // end PC0N800

// Process item  audit "Merge"
Function PC0N820()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - load copy of "merge to" row*/
     /* - get audit sequence number*/
     /* - load other common data used in audit processing*/
   /* - No item data changes since this is the merge to row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PC0NS26(); /* ==> load Saved "merge to" row*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PC0NW06.PC6TORDE;
  VPOAIT02.PCIAFTN = PC0NW06.PC6TORDE + PC0NW01.PC0NWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "09"; /* QUANTITY - SPLIT*/

  PC0NSA4(); /* ===> Get & Load Audit record flags*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N820 ***********************/
end // end PC0N820

// Process size audit "Merge"
Function PC0N830()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/

  PC0NS27(); /* ===> load saved, "before change", copy of merge to row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  PC0NW00.PC0NWIXT = 1;

  while (PC0NW00.PC0NWIXT <= 40)

    VPOASZ02.PCIBFRN[PC0NWIXT] = PC0NW07.PC7ORDEQ[PC0NWIXT];
    VPOASZ02.PCKBFRPR[PC0NWIXT] = PC0NW07.FY4FOBPR[PC0NWIXT];

    if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0) /* ===> split requested*/

      PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXT];
      PC0NW00.PC7ORDEQ = PC0NW07.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW00.PC7ORDEQ + PC0NW00.PC0NWSQT;

      if (VPOASZ02.PCIBFRN[PC0NWIXT] == 0) /* ===> new size QTY*/
        VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW01.FY4FOBPR[PC0NWIXT];
      else
        VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW07.FY4FOBPR[PC0NWIXT];
      end

    else /* ===> no split of QTYs requested*/

      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW07.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW07.FY4FOBPR[PC0NWIXT];

    end

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N830 ***********************/
end // end PC0N830

// Process item audit "Created"
Function PC0N850()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - No item data changed since this is the created row.*/
     /* - Load the saved copy of the inserted item row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PC0NS26(); /* ================> format the item audit record*/
   /* ================> using the saved item row that was inserted*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = 0;
  VPOAIT02.PCIAFTN = PC0NW06.PC6TORDE;
  VPOAIT02.PCJNETQT = PC0NW06.PC6TORDE;

  VPOAIT02.YOACD = "09"; /* QUANTITY SPLIT*/

  PC0NSA4(); /* ===> Get & Load Audit record flags*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N850 ***********************/
end // end PC0N850

// process size audit "Created"
Function PC0N860()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/

  PC0NS27(); /* ===> load saved copy of inserted item*/
                                   /* row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;

  move PC0NW07.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;
  move PC0NW07.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N830 ***********************/
end // end PC0N860

// Process itm audit "Split From"
Function PC0N880()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - copy of merge from row*/
     /* - other common data used in audit processing*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;

  PC0NS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/
   /* ========================> of the split from row*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = 0; /* ===> no size audit related to these audits*/

   /* ------------------------------------------------------------*/
                      /* ETS SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWETS != PC0NW04.PC6ETSDT) /* ===> ETS Date*/
    VPOAIT02.PCIBFRN = PC0NW04.PC6ETSDT; /* ===> ETS Date before*/
    VPOAIT02.PCIAFTN = PC0NW01.PC0NWETS; /* ===> ETS Date after*/
    VPOAIT02.YOACD = "04"; /* ETS SPLIT - NEW PLAN*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* MODE SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB2 != PC0NW04.YMTCD) /* ===> Mode of Trans.*/
    VPOAIT02.PCIBFRA = PC0NW04.YMTCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC0NWSB2; /* ===> after*/
    VPOAIT02.YOACD = "05"; /* MODE SPLIT - NEW PLAN*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* ITEM STATUS (NO CX)*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC6STAT != PC0NW04.PC6STAT) /* ===> status  code*/
    VPOAIT02.PCIBFRA = PC0NW04.PC6STAT; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC6STAT; /* ===> after*/
    VPOAIT02.YOACD = "19"; /* ITEM STATUS  (NO CX)*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
   /* ===> process QTY reduction audit*/
       /* - audit sequence number needed to find appropriate*/
         /* size audit row.*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PC0NW04.PC6TORDE;
  VPOAIT02.PCIAFTN = PC0NW04.PC6TORDE - PC0NW01.PC0NWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "09"; /* QUANTITY - SPLIT*/

  PC0NSA4(); /* ===> Get and Load audit record flags*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N880 ***********************/
end // end PC0N880

// Process siz audit "Split From"
Function PC0N890()
   /* ------------------------------------------------------------*/
      /* Write out a size audit for split from row*/
   /* ------------------------------------------------------------*/

  PC0NS29(); /* ===> load saved, "before change", copy of split from row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  PC0NW00.PC0NWIXT = 1;

  while (PC0NW00.PC0NWIXT <= 40)

    VPOASZ02.PCIBFRN[PC0NWIXT] = PC0NW05.PC7ORDEQ[PC0NWIXT];
    VPOASZ02.PCKBFRPR[PC0NWIXT] = PC0NW05.FY4FOBPR[PC0NWIXT];
    VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW05.FY4FOBPR[PC0NWIXT];

    if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0) /* ===> split requested*/

      PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXT];
      PC0NW00.PC7ORDEQ = PC0NW05.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW00.PC7ORDEQ - PC0NW00.PC0NWSQT;

    else /* ===> no split of QTYs*/

      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW05.PC7ORDEQ[PC0NWIXT];

    end

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N890 ***********************/
end // end PC0N890

// ===> "APPAREL " Audit routine
Function PC0N900()
   /* ------------------------------------------------------------*/
   /* If the merge flag is set to yes*/

   /* ------------------------------------------------------------*/

  if (PC0NW00.PC0NWMRG == "Y") /* ===> Merge flag*/
    /* ------------------------------> therefore "Merge" occured*/

    /* ------------------------------------------------------------*/
     /* Process audit for the "MERGE TO " row.*/
        /* - process item audit process for merge to row.*/
        /* - process size audit process for merge to row.*/
    /* ------------------------------------------------------------*/

    PC0N920(); /* ===> process item audit routine*/

    PC0N930(); /* ===> process size level audit*/

  else /* ===> Do audit for Newly created Item*/

    /* ------------------------------------------------------------*/
     /* Process audit for newly created item.*/
        /* - process item audit process. (Item start up)*/
        /* - process size audit process. (Item size start up)*/
    /* ------------------------------------------------------------*/

    PC0N950(); /* ===> process item audit merge (inserted)*/

    PC0N960(); /* ===> process size level audit (inserted)*/

  end /* ===> end audit for split to item/size*/

   /* ------------------------------------------------------------*/
   /* Process audit for the "MERGE FROM " row.*/

   /* In both of the above cases, the Item was reduced in QTYs.*/
    /* * therefore write out an audit.*/
     /* - process change memo (for selected row that was reduced)*/
     /* - process item audit  (for selected row that was reduced)*/
     /* - process size audit  (for selected row that was reduced)*/

   /* ------------------------------------------------------------*/

  PC0N980(); /* ===> process item audit from cancel*/

  PC0N990(); /* ===> process size level audit cancel*/

   /* **                                                        ***/
   /* ********************** End of PC0N900 ***********************/
end // end PC0N900

// Process item  audit "Merge"
Function PC0N920()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - load copy of "merge to" row*/
     /* - get audit sequence number*/
     /* - load other common data used in audit processing*/
   /* - No item data changes since this is the merge to row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PC0NS26(); /* ==> load Saved "merge to" row*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PC0NW06.PC6TORDE;
  VPOAIT02.PCIAFTN = PC0NW06.PC6TORDE + PC0NW01.PC0NWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/

  PC0NSA4(); /* ===> Get and Load L/C Amend print indicator*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N920 ***********************/
end // end PC0N920

// Process size audit "Merge"
Function PC0N930()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/

  PC0NS27(); /* ===> load saved, "before change", copy of merge to row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  PC0NW00.PC0NWIXT = 1;

  while (PC0NW00.PC0NWIXT <= 40)

    VPOASZ02.PCIBFRN[PC0NWIXT] = PC0NW07.PC7ORDEQ[PC0NWIXT];
    VPOASZ02.PCKBFRPR[PC0NWIXT] = PC0NW07.FY4FOBPR[PC0NWIXT];

    if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0) /* ===> split requested*/

      PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXT];
      PC0NW00.PC7ORDEQ = PC0NW07.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW00.PC7ORDEQ + PC0NW00.PC0NWSQT;

      if (VPOASZ02.PCIBFRN[PC0NWIXT] > 0) /* ===> new size QTY*/
        VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW01.FY4FOBPR[PC0NWIXT];
      end

    else /* ===> no split of QTYs requested*/

      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW07.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW07.FY4FOBPR[PC0NWIXT];

    end

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N930 ***********************/
end // end PC0N930

// Process item audit "Created"
Function PC0N950()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - No item data changed since this is the created row.*/
     /* - Load the saved copy of the inserted item row.*/
     /* - Write out an item audit for QTY Change.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PC0NS26(); /* ================> format the item audit record*/
   /* ================> using the saved item row that was inserted*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = 0;
  VPOAIT02.PCIAFTN = PC0NW06.PC6TORDE;
  VPOAIT02.PCJNETQT = PC0NW06.PC6TORDE;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/

  PC0NSA4(); /* ===> Get and Load audit record flags*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N950 ***********************/
end // end PC0N950

// process size audit "Created"
Function PC0N960()
   /* ------------------------------------------------------------*/
      /* Write out a size audit*/
   /* ------------------------------------------------------------*/

  PC0NS27(); /* ===> load saved copy of inserted item  row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;

  move PC0NW07.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;
  move PC0NW07.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N830 ***********************/
end // end PC0N960

// Process itm audit "Split From"
Function PC0N980()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
     /* - copy of merge from row*/
     /* - other common data used in audit processing*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;

  PC0NS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/
   /* ========================> of the split from row*/

  PC0NSA0(); /* ===> get next audit item sequence number*/

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = 0; /* ===> no size audit related to these audits*/

   /* ------------------------------------------------------------*/
                      /* ETS SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWETS != PC0NW04.PC6ETSDT) /* ===> ETS Date*/
    VPOAIT02.PCIBFRN = PC0NW04.PC6ETSDT; /* ===> ETS Date before*/
    VPOAIT02.PCIAFTN = PC0NW01.PC0NWETS; /* ===> ETS Date after*/
    VPOAIT02.YOACD = "63"; /* ETS SPLIT - NEW PLAN*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* MODE SPLIT - NEW PLAN*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB2 != PC0NW04.YMTCD) /* ===> Mode of Trans.*/
    VPOAIT02.PCIBFRA = PC0NW04.YMTCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC0NWSB2; /* ===> after*/
    VPOAIT02.YOACD = "64"; /* MODE SPLIT - NEW PLAN*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* CUSTOMER XREF - SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB3 != PC0NW04.PC2CUXID) /* ===> Cust. Xref code*/
    VPOAIT02.PCIBFRA = PC0NW04.PC2CUXID; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC0NWSB3; /* ===> after*/
    VPOAIT02.YOACD = "68"; /* CUSTOMER XREF - SPLIT*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                        /* WAREHOUSE - SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB4 != PC0NW04.XWHCD) /* ===> warehouse code*/
    VPOAIT02.PCIBFRA = PC0NW04.XWHCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC0NWSB4; /* ===> after*/
    VPOAIT02.YOACD = "69"; /* WAREHOUSE - SPLIT*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                        /* OWNER GROUP SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB5 != PC0NW04.XOWCD) /* ===> OWNER GROUP CODE*/
    VPOAIT02.PCIBFRA = PC0NW01.XOWCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0NW01.PC0NWSB5; /* ===> after*/
    VPOAIT02.YOACD = "82"; /* OWNER GROUP SPLIT*/

    PC0NSA4(); /* ===> Get and Load audit record flags*/

    PC0NSA1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
   /* ===> process QTY reduction audit*/
       /* - audit sequence number needed to find appropriate*/
         /* size audit row.*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = PC0NW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PC0NW04.PC6TORDE;
  VPOAIT02.PCIAFTN = PC0NW04.PC6TORDE - PC0NW01.PC0NWSPT;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

  VPOAIT02.YOACD = "70"; /* QUANTITY SPLIT*/

  PC0NSA4(); /* ===> Get and Load audit record flags*/

  PC0NSA1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N980 ***********************/
end // end PC0N980

// Process siz audit "Split From"
Function PC0N990()
   /* ------------------------------------------------------------*/
      /* Write out a size audit for split from row*/
   /* ------------------------------------------------------------*/

  PC0NS29(); /* ===> load saved, "before change", copy of split from row*/

  VPOASZ02.PCJSEQNO = PC0NW00.PCJSEQNO; /* audit sequence number*/

  PC0NW00.PC0NWIXT = 1;

  while (PC0NW00.PC0NWIXT <= 40)

    VPOASZ02.PCIBFRN[PC0NWIXT] = PC0NW05.PC7ORDEQ[PC0NWIXT];
    VPOASZ02.PCKBFRPR[PC0NWIXT] = PC0NW05.FY4FOBPR[PC0NWIXT];
    VPOASZ02.PCKAFTPR[PC0NWIXT] = PC0NW05.FY4FOBPR[PC0NWIXT];

    if (PC0NW01.PC0NWSQT[PC0NWIXT] > 0) /* ===> split requested*/

      PC0NW00.PC0NWSQT = PC0NW01.PC0NWSQT[PC0NWIXT];
      PC0NW00.PC7ORDEQ = PC0NW05.PC7ORDEQ[PC0NWIXT];
      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW00.PC7ORDEQ - PC0NW00.PC0NWSQT;

    else /* ===> no split of QTYs*/

      VPOASZ02.PCIAFTN[PC0NWIXT] = PC0NW05.PC7ORDEQ[PC0NWIXT];

    end

    PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0NSA2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0N890 ***********************/
end // end PC0N990

// call calc.  "date routine"
Function PC0NS01()
   /* ------------------------------------------------------------*/

               /* Calculate DATE difference*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date*/

    return; /* === return with date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, error occured. Exit and display map*/
    /* ------------------------------------------------------------*/

    PC0NW00.PC0NWSWM = "1"; /* ===> map request switch*/
    PC0NW00.XXXPRCNM = "PC0NS01"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0NS01 ***********************/
end // end PC0NS01

// load header data to map
Function PC0NS02()
   /* ----------------------------------------------------------*/
    /* Load the map header data.*/
   /* ----------------------------------------------------------*/

  PC0NM001.XGPCD = PC0NW04.XGPCD; /* GPC code*/
  PC0NM001.PO-REG-CD = PC0NW04.PO-REG-CD; /* PO region*/
  PC0NM001.PC3PONBR = PC0NW04.PC3PONBR; /* PO number*/

  PC0NW00.TA2GRGGN = PC0NW04.PC3POIDT; /* ===>number form*/
  PC0NW00.TA2GRGG = PC0NW00.PC0NWDT; /* ===>char form*/
  if (PC0NW01.XGPCD == "03")
    PC0NM001.PC0NMPYR = PC0NW01.PCFSECD; /* ===>production/season year*/
  else
    PC0NM001.PC0NMPYR = PC0NW00.PC0NWPYR; /* ===>production year*/
  end

  PC0NM001.PC0NMPMO = PC0NW00.PC0NWPMO; /* ===>production month*/
  PC0NM001.PC0NMPDM = PC0NW00.PC0NWPDM; /* ===>prod. delivery month*/
  PC0NM001.FY1FCTYC = PC0NW04.FY1FCTYC;
  PC0NM001.PC4ORTYP = PC0NW04.PC4ORTYP;
  PC0NM001.SY1STNBR = PC0NW04.SY1STNBR;
  PC0NM001.SY2CLRID = PC0NW04.SY2CLRID;
  PC0NM001.PC6PLAN = PC0NW04.PC6PLAN;
  if (PC0NW03.PC6STAT == "*X")
    if (PC0NW04.PC6STAT == "CX"
     && PC0NW04.XXXUSRID == " ")
      PC0NM001.PC6STAT = PC0NW04.PC6STAT;
    else
      PC0NM001.PC6STAT = "UX";
    end
  else
    PC0NM001.PC6STAT = PC0NW04.PC6STAT;
  end
  PC0NM001.XWHCD = PC0NW04.XWHCD;
  PC0NM001.YMTCD = PC0NW04.YMTCD;
  PC0NM001.XDSCD = PC0NW04.XDSCD;
  PC0NM001.PC0NMETS = PC0NW01.PC0NWDT1; /* => ETS map display*/
  PC0NM001.PC2CUXID = PC0NW04.PC2CUXID;
  PC0NM001.YSMXDV = PC0NW04.YSMXDV;
  PC0NM001.XDMCD = PC0NW04.XDMCD;
  PC0NM001.XQACD = PC0NW04.XQACD;
  PC0NM001.XOWCD = PC0NW04.XOWCD;
  PC0NM001.PC2INSEG = PC0NW04.PC2INSEG;
  PC0NM001.XPGCD = PC0NW04.XPGCD;
  PC0NM001.XUMCD = PC0NW04.XUMCD;
   /* **                                                        ***/
   /* ********************** End of PC0NS02 ***********************/
end // end PC0NS02

// load display record item data
Function PC0NS03()
   /* ----------------------------------------------------------*/
    /* Save data, of the "Split From" item row, in the*/
    /* W.S. display record.*/
   /* ----------------------------------------------------------*/

  PC0NW01.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0NW01.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0NW01.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0NW01.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR; /* sap PO number*/
  PC0NW01.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0NW01.PC3POIDT = VPOITM05.PC3POIDT;
  PC0NW01.PCFSECD = VPOITM05.PCFSECD;
  PC0NW01.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0NW01.SY1STNBR = VPOITM05.SY1STNBR;
  PC0NW01.SY2CLRID = VPOITM05.SY2CLRID;
  PC0NW01.XDMCD = VPOITM05.XDMCD;
  PC0NW01.XQACD = VPOITM05.XQACD;
  PC0NW01.XOWCD = VPOITM05.XOWCD;
  PC0NW01.PC2INSEG = VPOITM05.PC2INSEG;
  PC0NW01.XPGCD = VPOITM05.XPGCD;
  PC0NW01.XUMCD = VPOITM05.XUMCD;
  PC0NW01.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0NW01.PC6OETS = VPOITM05.PC6OETS;
  PC0NW01.PC6RTADT = VPOITM05.PC6RTADT;
  PC0NW01.YMTCD = VPOITM05.YMTCD;
  PC0NW01.PC6PLAN = VPOITM05.PC6PLAN;
  PC0NW01.XWHCD = VPOITM05.XWHCD;
  PC0NW01.PC2CUXID = VPOITM05.PC2CUXID;
  PC0NW01.YSMXDV = VPOITM05.YSMXDV;
  PC0NW01.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0NW01.XDSCD = VPOITM05.XDSCD;
  PC0NW01.PC6STAT = VPOITM05.PC6STAT;
  PC0NW01.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0NW01.PC6MICHG = VPOITM05.PC6MICHG;
  PC0NW01.PC6TORDE = VPOITM05.PC6TORDE;
  PC0NW01.OP1PARTN = VPOITM05.OP1PARTN;
  PC0NW01.OP1CUOID = VPOITM05.OP1CUOID;
  PC0NW01.OP1NORID = VPOITM05.OP1NORID;

   /* ====> load split by data to display storage ====>*/

  PC0NW01.PC0NWXSD = VPOITM05.PC2INSEG;
  PC0NW01.PC0NWXDS = VPOITM05.XDSCD;
  PC0NW01.PC0NWXDV = VPOITM05.YSMXDV;
  PC0NW01.PC0NWXCT = VPOITM05.PC6XCTCD;
  PC0NW01.PC0NWPLN = VPOITM05.PC6PLAN;
  PC0NW01.PC0NWETS = VPOITM05.PC6ETSDT;
  PC0NW01.PC0NWSB2 = VPOITM05.YMTCD;
  PC0NW01.PC0NWSB3 = VPOITM05.PC2CUXID;
  PC0NW01.PC0NWSB4 = VPOITM05.XWHCD;
  PC0NW01.PC0NWSB5 = VPOITM05.XOWCD;

   /* **                                                        ***/
   /* ********************** End of PC0NS03 ***********************/
end // end PC0NS03

// save (Split from) item row
Function PC0NS04()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split From" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0NW04 and is a mirror image of the VPOITM05.*/
   /* ----------------------------------------------------------*/

  PC0NW04.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0NW04.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0NW04.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0NW04.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0NW04.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0NW04.PC3POIDT = VPOITM05.PC3POIDT;
  PC0NW04.PCFSECD = VPOITM05.PCFSECD;
  PC0NW04.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0NW04.XCTCD = VPOITM05.XCTCD;
  PC0NW04.SY1STNBR = VPOITM05.SY1STNBR;
  PC0NW04.SY2CLRID = VPOITM05.SY2CLRID;
  PC0NW04.XDMCD = VPOITM05.XDMCD;
  PC0NW04.XQACD = VPOITM05.XQACD;
  PC0NW04.XOWCD = VPOITM05.XOWCD;
  PC0NW04.PC2INSEG = VPOITM05.PC2INSEG;
  PC0NW04.XPGCD = VPOITM05.XPGCD;
  PC0NW04.XUMCD = VPOITM05.XUMCD;
  PC0NW04.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0NW04.PC6OETS = VPOITM05.PC6OETS;
  PC0NW04.PC6RTADT = VPOITM05.PC6RTADT;
  PC0NW04.YMTCD = VPOITM05.YMTCD;
  PC0NW04.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0NW04.PC6PLAN = VPOITM05.PC6PLAN;
  PC0NW04.XPLCD = VPOITM05.XPLCD;
  PC0NW04.XPRCD = VPOITM05.XPRCD;
  PC0NW04.XPCCD = VPOITM05.XPCCD;
  PC0NW04.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0NW04.XGACD = VPOITM05.XGACD;
  PC0NW04.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0NW04.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0NW04.XWHCD = VPOITM05.XWHCD;
  PC0NW04.PC2CUXID = VPOITM05.PC2CUXID;
  PC0NW04.YSMXDV = VPOITM05.YSMXDV;
  PC0NW04.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0NW04.OP1CUPO = VPOITM05.OP1CUPO;
  PC0NW04.OP1PARTN = VPOITM05.OP1PARTN;
  PC0NW04.OP1CUOID = VPOITM05.OP1CUOID;
  PC0NW04.OP1NORID = VPOITM05.OP1NORID;
  PC0NW04.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0NW04.PC61TMSH = VPOITM05.PC61TMSH;
  PC0NW04.XDSCD = VPOITM05.XDSCD;
  PC0NW04.PC6STAT = VPOITM05.PC6STAT;
  PC0NW04.PC6STADT = VPOITM05.PC6STADT;
  PC0NW04.XFRCD = VPOITM05.XFRCD;
  PC0NW04.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PC0NW04.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PC0NW04.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0NW04.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0NW04.PC6NILRF = VPOITM05.PC6NILRF;
  PC0NW04.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0NW04.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0NW04.YOHCD = VPOITM05.YOHCD;
  PC0NW04.PC3SIFL = VPOITM05.PC3SIFL;
  PC0NW04.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0NW04.PC6CONNO = VPOITM05.PC6CONNO;
  PC0NW04.PC6PETS = VPOITM05.PC6PETS;
  PC0NW04.PC6OETAL = VPOITM05.PC6OETAL;
  PC0NW04.PC6ETALF = VPOITM05.PC6ETALF;
  PC0NW04.PC6MICHG = VPOITM05.PC6MICHG;
  PC0NW04.PC6TORIG = VPOITM05.PC6TORIG;
  PC0NW04.PC6TORDE = VPOITM05.PC6TORDE;
  PC0NW04.PC6TADD = VPOITM05.PC6TADD;
  PC0NW04.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0NW04.PC6PREFL = VPOITM05.PC6PREFL;
  PC0NW04.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0NW04.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0NW04.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0NW04.XXXUSRID = VPOITM05.XXXUSRID;
  PC0NW04.ZZZSDT = VPOITM05.ZZZSDT;
  PC0NW04.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0NW04.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0NW04.ZZZCHGCT = VPOITM05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS04 ***********************/
end // end PC0NS04

// Save (Split From) size row
Function PC0NS05()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split from" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0NW05 and is a mirror image of the PC7REC.*/
   /* ----------------------------------------------------------*/

  PC0NW05.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PC0NW05.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* PO REGION CODE*/
  PC0NW05.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PC0NW05.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PC0NW05.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/
  move VPOSIZ02.PC7ORIGQ to PC0NW05.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PC0NW05.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PC0NW05.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PC0NW05.FY4FOBPR[1] for all;
  PC0NW05.ZZZSDT = VPOSIZ02.ZZZSDT;
  PC0NW05.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PC0NW05.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PC0NW05.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS05 ***********************/
end // end PC0NS05

// Save ("Split To" item Row)
Function PC0NS06()
   /* ----------------------------------------------------------*/
    /* Save copy of the "Split to" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0NW06 and is a mirror image of the VPOITM05.*/
   /* ----------------------------------------------------------*/

  PC0NW06.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0NW06.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0NW06.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0NW06.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0NW06.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0NW06.PC3POIDT = VPOITM05.PC3POIDT;
  PC0NW06.PCFSECD = VPOITM05.PCFSECD;
  PC0NW06.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0NW06.XCTCD = VPOITM05.XCTCD;
  PC0NW06.SY1STNBR = VPOITM05.SY1STNBR;
  PC0NW06.SY2CLRID = VPOITM05.SY2CLRID;
  PC0NW06.XDMCD = VPOITM05.XDMCD;
  PC0NW06.XQACD = VPOITM05.XQACD;
  PC0NW06.XOWCD = VPOITM05.XOWCD;
  PC0NW06.PC2INSEG = VPOITM05.PC2INSEG;
  PC0NW06.XPGCD = VPOITM05.XPGCD;
  PC0NW06.XUMCD = VPOITM05.XUMCD;
  PC0NW06.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0NW06.PC6OETS = VPOITM05.PC6OETS;
  PC0NW06.PC6RTADT = VPOITM05.PC6RTADT;
  PC0NW06.YMTCD = VPOITM05.YMTCD;
  PC0NW06.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0NW06.PC6PLAN = VPOITM05.PC6PLAN;
  PC0NW06.XPLCD = VPOITM05.XPLCD;
  PC0NW06.XPRCD = VPOITM05.XPRCD;
  PC0NW06.XPCCD = VPOITM05.XPCCD;
  PC0NW06.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0NW06.XGACD = VPOITM05.XGACD;
  PC0NW06.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0NW06.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0NW06.XWHCD = VPOITM05.XWHCD;
  PC0NW06.PC2CUXID = VPOITM05.PC2CUXID;
  PC0NW06.YSMXDV = VPOITM05.YSMXDV;
  PC0NW06.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0NW06.OP1CUPO = VPOITM05.OP1CUPO;
  PC0NW06.OP1PARTN = VPOITM05.OP1PARTN;
  PC0NW06.OP1CUOID = VPOITM05.OP1CUOID;
  PC0NW06.OP1NORID = VPOITM05.OP1NORID;
  PC0NW06.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0NW06.PC61TMSH = VPOITM05.PC61TMSH;
  PC0NW06.XDSCD = VPOITM05.XDSCD;
  PC0NW06.PC6STAT = VPOITM05.PC6STAT;
  PC0NW06.PC6STADT = VPOITM05.PC6STADT;
  PC0NW06.XFRCD = VPOITM05.XFRCD;
  PC0NW06.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PC0NW06.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PC0NW06.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0NW06.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0NW06.PC6NILRF = VPOITM05.PC6NILRF;
  PC0NW06.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0NW06.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0NW06.YOHCD = VPOITM05.YOHCD;
  PC0NW06.PC3SIFL = VPOITM05.PC3SIFL;
  PC0NW06.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0NW06.PC6CONNO = VPOITM05.PC6CONNO;
  PC0NW06.PC6PETS = VPOITM05.PC6PETS;
  PC0NW06.PC6OETAL = VPOITM05.PC6OETAL;
  PC0NW06.PC6ETALF = VPOITM05.PC6ETALF;
  PC0NW06.PC6MICHG = VPOITM05.PC6MICHG;
  PC0NW06.PC6TORIG = VPOITM05.PC6TORIG;
  PC0NW06.PC6TORDE = VPOITM05.PC6TORDE;
  PC0NW06.PC6TADD = VPOITM05.PC6TADD;
  PC0NW06.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0NW06.PC6PREFL = VPOITM05.PC6PREFL;
  PC0NW06.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0NW06.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0NW06.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0NW06.XXXUSRID = VPOITM05.XXXUSRID;
  PC0NW06.ZZZSDT = VPOITM05.ZZZSDT;
  PC0NW06.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0NW06.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0NW06.ZZZCHGCT = VPOITM05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS06 ***********************/
end // end PC0NS06

// Save ("Split To" size Row)
Function PC0NS07()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split to" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0NW07 and is a mirror image of the VPOSIZ02.*/
   /* ----------------------------------------------------------*/

  PC0NW07.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PC0NW07.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* PO REGION CODE*/
  PC0NW07.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PC0NW07.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PC0NW07.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/
  move VPOSIZ02.PC7ORIGQ to PC0NW07.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PC0NW07.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PC0NW07.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PC0NW07.FY4FOBPR[1] for all;
  PC0NW07.ZZZSDT = VPOSIZ02.ZZZSDT;
  PC0NW07.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PC0NW07.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PC0NW07.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS07 ***********************/
end // end PC0NS07

// set appropriate fields bright
Function PC0NS09()
   /* ------------------------------------------------------------*/
   /* Set appropriate fields bright*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.XGPCD == "02")

    if (PC0NW01.PC4ORTYP == "FT"
     || PC0NW01.PC4ORTYP == "OR"
     || PC0NW01.PC4ORTYP == "S1"
     || PC0NW01.PC4ORTYP == "S4")
      set PC0NM001.PC0NMSB1 cursor, bold; /* ===> ETS Date*/
    else
      set PC0NM001.PC0NMSB1 cursor, bold; /* ===> ETS Date*/
      set PC0NM001.PC0NMSB2 bold; /* ===> Mode of Trans*/
    end

  end

  if (PC0NW01.XGPCD == "03"
   || PC0NW01.XGPCD == "01"
   || PC0NW01.XGPCD == "07")
    set PC0NM001.PC0NMSB1 cursor, bold; /* ===> ETS Date*/
    set PC0NM001.PC0NMSB2 bold; /* ===> Mode of Trans*/
    set PC0NM001.PC0NMSB3 bold; /* ===> Customer xref id*/
    set PC0NM001.PC0NMSB4 bold; /* ===> Warehouse*/
    set PC0NM001.PC0NMSB5 bold; /* ===> Warehouse*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0NS09 ***********************/
end // end PC0NS09

// Obtain dtrans.vtsloc01
Function PC0NS100()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Init rec*/

  TSCREC.TSCLOCCD = PC2REC.TSCLOCCD;

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NS100"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0NM001.XXXPRCNM = "PC0NS100";
  exit stack;

end // end PC0NS100

// Obtain dprodg.vsyclr01
Function PC0NS101()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = PC0NW04.XGPCD;
  PG2REC.SY1STNBR = PC0NW04.SY1STNBR;
  PG2REC.SY2CLRID = PC0NW04.SY2CLRID;
  PG2REC.XDMCD = PC0NW04.XDMCD;

  XSPG202();

end // end PC0NS101

// Select (S1) Set/Open  VCPLHD02
Function PC0NS11()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("S1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0NW00.XXXPRCNM = "PC0NS11"; /* Module identification*/
  PC0NW00.PC0NWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS11 ***********************/
end // end PC0NS11

// Fetch  (N1) Next row  VCPLHD02
Function PC0NS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("N1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0NW00.PC0NWSWT = "Y"; /* Indicate end of temp cursor "CPLHD"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0NW00.XXXPRCNM = "PC0NS12"; /* Module identification*/
  PC0NW00.PC0NWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC0NW00.PC0NWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS12 ***********************/
end // end PC0NS12

// Close  (C1) Set       VCPLHD02
Function PC0NS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("C1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0NW00.XXXPRCNM = "PC0NS13"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS13 ***********************/
end // end PC0NS13

// load saved (Split from Row)
Function PC0NS14()
   /* ----------------------------------------------------------*/
    /* load Saved copy of the "Split From" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PC0NW04.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0NW04.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW04.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0NW04.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PC0NW04.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PC0NW04.PC3POIDT;
  VPOITM05.PCFSECD = PC0NW04.PCFSECD;
  VPOITM05.FY1FCTYC = PC0NW04.FY1FCTYC;
  VPOITM05.XCTCD = PC0NW04.XCTCD;
  VPOITM05.SY1STNBR = PC0NW04.SY1STNBR;
  VPOITM05.SY2CLRID = PC0NW04.SY2CLRID;
  VPOITM05.XDMCD = PC0NW04.XDMCD;
  VPOITM05.XQACD = PC0NW04.XQACD;
  VPOITM05.XOWCD = PC0NW04.XOWCD;
  VPOITM05.PC2INSEG = PC0NW04.PC2INSEG;
  VPOITM05.XPGCD = PC0NW04.XPGCD;
  VPOITM05.XUMCD = PC0NW04.XUMCD;
  VPOITM05.PC6ETSDT = PC0NW04.PC6ETSDT;
  VPOITM05.PC6OETS = PC0NW04.PC6OETS;
  VPOITM05.PC6RTADT = PC0NW04.PC6RTADT;
  VPOITM05.YMTCD = PC0NW04.YMTCD;
  VPOITM05.PC6CXNBR = PC0NW04.PC6CXNBR;
  VPOITM05.PC6PLAN = PC0NW04.PC6PLAN;
  VPOITM05.XPLCD = PC0NW04.XPLCD;
  VPOITM05.XPRCD = PC0NW04.XPRCD;
  VPOITM05.XPCCD = PC0NW04.XPCCD;
  VPOITM05.SYBSTGNB = PC0NW04.SYBSTGNB;
  VPOITM05.XGACD = PC0NW04.XGACD;
  VPOITM05.PG1SC4CD = PC0NW04.PG1SC4CD;
  VPOITM05.PC6CLVAR = PC0NW04.PC6CLVAR;
  VPOITM05.XWHCD = PC0NW04.XWHCD;
  VPOITM05.PC2CUXID = PC0NW04.PC2CUXID;
  VPOITM05.YSMXDV = PC0NW04.YSMXDV;
  VPOITM05.PC6XCTCD = PC0NW04.PC6XCTCD;
  VPOITM05.OP1CUPO = PC0NW04.OP1CUPO;
  VPOITM05.OP1PARTN = PC0NW04.OP1PARTN;
  VPOITM05.OP1CUOID = PC0NW04.OP1CUOID;
  VPOITM05.OP1NORID = PC0NW04.OP1NORID;
  VPOITM05.PC4ORTYP = PC0NW04.PC4ORTYP;
  VPOITM05.PC61TMSH = PC0NW04.PC61TMSH;
  VPOITM05.XDSCD = PC0NW04.XDSCD;
  VPOITM05.PC6STAT = PC0NW04.PC6STAT;
  VPOITM05.PC6STADT = PC0NW04.PC6STADT;
  VPOITM05.XFRCD = PC0NW04.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PC0NW04.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PC0NW04.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PC0NW04.PC6AIRNB;
  VPOITM05.PC6AIRDT = PC0NW04.PC6AIRDT;
  VPOITM05.PC6NILRF = PC0NW04.PC6NILRF;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0NW04.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0NW04.PC-FCTY-AFRGT-PCT;
  VPOITM05.YOHCD = PC0NW04.YOHCD;
  VPOITM05.PC3SIFL = PC0NW04.PC3SIFL;
  VPOITM05.PC6SZAVL = PC0NW04.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0NW04.PC6CONNO;
  VPOITM05.PC6PETS = PC0NW04.PC6PETS;
  VPOITM05.PC6OETAL = PC0NW04.PC6OETAL;
  VPOITM05.PC6ETALF = PC0NW04.PC6ETALF;
  VPOITM05.PC6MICHG = PC0NW04.PC6MICHG;
  VPOITM05.PC6TORIG = PC0NW04.PC6TORIG;
  VPOITM05.PC6TORDE = PC0NW04.PC6TORDE;
  VPOITM05.PC6TADD = PC0NW04.PC6TADD;
  VPOITM05.PC6TCNCL = PC0NW04.PC6TCNCL;
  VPOITM05.PC6PREFL = PC0NW04.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PC0NW04.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PC0NW04.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PC0NW04.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PC0NW04.XXXUSRID;
  VPOITM05.ZZZSDT = PC0NW04.ZZZSDT;
  VPOITM05.ZZZCHGDT = PC0NW04.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PC0NW04.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PC0NW04.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS14 ***********************/
end // end PC0NS14

// load saved Split from size Row
Function PC0NS15()
   /* ----------------------------------------------------------*/
    /* Load Saved copy of the "Split from" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to vposiz02*/
   /* ----------------------------------------------------------*/

  VPOSIZ02.XGPCD = PC0NW05.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PC0NW05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0NW05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0NW05.PC6ITMNB;
  VPOSIZ02.ZFC-CRCY-CD = PC0NW05.ZFC-CRCY-CD; /* new jun-93*/
  move PC0NW05.PC7ORIGQ to VPOSIZ02.PC7ORIGQ[1] for all;
  move PC0NW05.PC7ORDEQ to VPOSIZ02.PC7ORDEQ[1] for all;
  move PC0NW05.PC7FOBFL to VPOSIZ02.PC7FOBFL[1] for all;
  move PC0NW05.FY4FOBPR to VPOSIZ02.FY4FOBPR[1] for all;
  VPOSIZ02.ZZZSDT = PC0NW05.ZZZSDT;
  VPOSIZ02.ZZZCHGDT = PC0NW05.ZZZCHGDT;
  VPOSIZ02.ZZZCHGTM = PC0NW05.ZZZCHGTM;
  VPOSIZ02.ZZZCHGCT = PC0NW05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS15 ***********************/
end // end PC0NS15

// load saved Split To item Row
Function PC0NS16()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split to" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05 and is a mirror image of the PC0NW06.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PC0NW06.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0NW06.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW06.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0NW06.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PC0NW06.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PC0NW06.PC3POIDT;
  VPOITM05.PCFSECD = PC0NW06.PCFSECD;
  VPOITM05.FY1FCTYC = PC0NW06.FY1FCTYC;
  VPOITM05.XCTCD = PC0NW06.XCTCD;
  VPOITM05.SY1STNBR = PC0NW06.SY1STNBR;
  VPOITM05.SY2CLRID = PC0NW06.SY2CLRID;
  VPOITM05.XDMCD = PC0NW06.XDMCD;
  VPOITM05.XQACD = PC0NW06.XQACD;
  VPOITM05.XOWCD = PC0NW06.XOWCD;
  VPOITM05.PC2INSEG = PC0NW06.PC2INSEG;
  VPOITM05.XPGCD = PC0NW06.XPGCD;
  VPOITM05.XUMCD = PC0NW06.XUMCD;
  VPOITM05.PC6ETSDT = PC0NW06.PC6ETSDT;
  VPOITM05.PC6OETS = PC0NW06.PC6OETS;
  VPOITM05.PC6RTADT = PC0NW06.PC6RTADT;
  VPOITM05.YMTCD = PC0NW06.YMTCD;
  VPOITM05.PC6CXNBR = PC0NW06.PC6CXNBR;
  VPOITM05.PC6PLAN = PC0NW06.PC6PLAN;
  VPOITM05.XPLCD = PC0NW06.XPLCD;
  VPOITM05.XPRCD = PC0NW06.XPRCD;
  VPOITM05.XPCCD = PC0NW06.XPCCD;
  VPOITM05.SYBSTGNB = PC0NW06.SYBSTGNB;
  VPOITM05.XGACD = PC0NW06.XGACD;
  VPOITM05.PG1SC4CD = PC0NW06.PG1SC4CD;
  VPOITM05.PC6CLVAR = PC0NW06.PC6CLVAR;
  VPOITM05.XWHCD = PC0NW06.XWHCD;
  VPOITM05.PC2CUXID = PC0NW06.PC2CUXID;
  VPOITM05.YSMXDV = PC0NW06.YSMXDV;
  VPOITM05.PC6XCTCD = PC0NW06.PC6XCTCD;
  VPOITM05.OP1CUPO = PC0NW06.OP1CUPO;
  VPOITM05.OP1PARTN = PC0NW06.OP1PARTN;
  VPOITM05.OP1CUOID = PC0NW06.OP1CUOID;
  VPOITM05.OP1NORID = PC0NW06.OP1NORID;
  VPOITM05.PC4ORTYP = PC0NW06.PC4ORTYP;
  VPOITM05.PC61TMSH = PC0NW06.PC61TMSH;
  VPOITM05.XDSCD = PC0NW06.XDSCD;
  VPOITM05.PC6STAT = PC0NW06.PC6STAT;
  VPOITM05.PC6STADT = PC0NW06.PC6STADT;
  VPOITM05.XFRCD = PC0NW06.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PC0NW06.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PC0NW06.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PC0NW06.PC6AIRNB;
  VPOITM05.PC6AIRDT = PC0NW06.PC6AIRDT;
  VPOITM05.PC6NILRF = PC0NW06.PC6NILRF;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0NW06.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0NW06.PC-FCTY-AFRGT-PCT;
  VPOITM05.YOHCD = PC0NW06.YOHCD;
  VPOITM05.PC3SIFL = PC0NW06.PC3SIFL;
  VPOITM05.PC6SZAVL = PC0NW06.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0NW06.PC6CONNO;
  VPOITM05.PC6PETS = PC0NW06.PC6PETS;
  VPOITM05.PC6OETAL = PC0NW06.PC6OETAL;
  VPOITM05.PC6ETALF = PC0NW06.PC6ETALF;
  VPOITM05.PC6MICHG = PC0NW06.PC6MICHG;
  VPOITM05.PC6TORIG = PC0NW06.PC6TORIG;
  VPOITM05.PC6TORDE = PC0NW06.PC6TORDE;
  VPOITM05.PC6TADD = PC0NW06.PC6TADD;
  VPOITM05.PC6TCNCL = PC0NW06.PC6TCNCL;
  VPOITM05.PC6PREFL = PC0NW06.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PC0NW06.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PC0NW06.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PC0NW06.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PC0NW06.XXXUSRID;
  VPOITM05.ZZZSDT = PC0NW06.ZZZSDT;
  VPOITM05.ZZZCHGDT = PC0NW06.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PC0NW06.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PC0NW06.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0NS16 ***********************/
end // end PC0NS16

// load saved "Split To" Item row
Function PC0NS26()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split To" item row.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PC0NW06.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0NW06.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = PC0NW06.PC3PONBR; /* PO number*/
  VPOAIT02.PCJSEQNO = 0;
  VPOAIT02.SY1STNBR = PC0NW06.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0NW06.SY2CLRID;
  VPOAIT02.XDMCD = PC0NW06.XDMCD;
  VPOAIT02.XQACD = PC0NW06.XQACD;
  VPOAIT02.XOWCD = PC0NW06.XOWCD;
  VPOAIT02.PC2INSEG = PC0NW06.PC2INSEG;
  VPOAIT02.XPGCD = PC0NW06.XPGCD;
  VPOAIT02.XUMCD = PC0NW06.XUMCD;
  VPOAIT02.PCFSECD = PC0NW06.PCFSECD;
  VPOAIT02.PC3POIDT = PC0NW06.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0NW06.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0NW06.PC6ETSDT;
  VPOAIT02.YMTCD = PC0NW06.YMTCD;
  VPOAIT02.XWHCD = PC0NW06.XWHCD;
  VPOAIT02.PC2CUXID = PC0NW06.PC2CUXID;
  VPOAIT02.PC6XCTCD = PC0NW06.PC6XCTCD;
  VPOAIT02.PC6OETS = PC0NW06.PC6OETS;
  VPOAIT02.PC6RTADT = PC0NW06.PC6RTADT;
  VPOAIT02.PC6CXNBR = PC0NW06.PC6CXNBR;

  VPOAIT02.OP1CUOID = PC0NW06.OP1CUOID;
  VPOAIT02.OP1NORID = PC0NW06.OP1NORID;
  VPOAIT02.OP1PARTN = PC0NW06.OP1PARTN;

  VPOAIT02.PC6PLAN = PC0NW06.PC6PLAN;
  VPOAIT02.XDSCD = PC0NW06.XDSCD;
  VPOAIT02.YSMXDV = PC0NW06.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0NW06.PC4ORTYP;
  VPOAIT02.XPRCD = PC0NW06.XPRCD;

  VPOAIT02.PG1SC4CD = PC0NW06.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0NW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0NS26 ***********************/
end // end PC0NS26

// load saved "Split To" Item row
Function PC0NS27()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0NW06.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0NW06.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0NW06.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = PC0NW06.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = PC0NW06.SY2CLRID;
  VPOASZ02.XDMCD = PC0NW06.XDMCD;
  VPOASZ02.XQACD = PC0NW06.XQACD;
  VPOASZ02.XOWCD = PC0NW06.XOWCD;
  VPOASZ02.PC2INSEG = PC0NW06.PC2INSEG;
  VPOASZ02.XPGCD = PC0NW06.XPGCD;
  VPOASZ02.XUMCD = PC0NW06.XUMCD;
  VPOASZ02.PC6ETSDT = PC0NW06.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0NW06.PC6OETS;
  VPOASZ02.PC6RTADT = PC0NW06.PC6RTADT;
  VPOASZ02.YMTCD = PC0NW06.YMTCD;
  VPOASZ02.PC6CXNBR = PC0NW06.PC6CXNBR;
  VPOASZ02.XWHCD = PC0NW06.XWHCD;
  VPOASZ02.PC2CUXID = PC0NW06.PC2CUXID;

  VPOASZ02.ZFC-CRCY-CD = "   "; /* new jun93*/

  VPOASZ02.OP1CUOID = PC0NW06.OP1CUOID;
  VPOASZ02.OP1NORID = PC0NW06.OP1NORID;
  VPOASZ02.OP1PARTN = PC0NW06.OP1PARTN;

   /* **                                                        ***/
   /* ********************** End of PC0NS27 ***********************/
end // end PC0NS27

// load saved Split From item row
Function PC0NS28()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split to" item row.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PC0NW04.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0NW04.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = PC0NW04.PC3PONBR; /* PO number*/
  VPOAIT02.PCJSEQNO = 0;
  VPOAIT02.SY1STNBR = PC0NW04.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0NW04.SY2CLRID;
  VPOAIT02.XDMCD = PC0NW04.XDMCD;
  VPOAIT02.XQACD = PC0NW04.XQACD;
  VPOAIT02.XOWCD = PC0NW04.XOWCD;
  VPOAIT02.PC2INSEG = PC0NW04.PC2INSEG;
  VPOAIT02.XPGCD = PC0NW04.XPGCD;
  VPOAIT02.XUMCD = PC0NW04.XUMCD;
  VPOAIT02.PCFSECD = PC0NW04.PCFSECD;
  VPOAIT02.PC3POIDT = PC0NW04.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0NW04.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0NW04.PC6ETSDT;
  VPOAIT02.PC6OETS = PC0NW04.PC6OETS;
  VPOAIT02.PC6RTADT = PC0NW04.PC6RTADT;
  VPOAIT02.YMTCD = PC0NW04.YMTCD;
  VPOAIT02.XWHCD = PC0NW04.XWHCD;
  VPOAIT02.PC2CUXID = PC0NW04.PC2CUXID;
  VPOAIT02.PC6XCTCD = PC0NW04.PC6XCTCD;
  VPOAIT02.PC6CXNBR = PC0NW04.PC6CXNBR;
  VPOAIT02.PC6PLAN = PC0NW04.PC6PLAN;
  VPOAIT02.XDSCD = PC0NW04.XDSCD;
  VPOAIT02.YSMXDV = PC0NW04.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0NW04.PC4ORTYP;
  VPOAIT02.XPRCD = PC0NW04.XPRCD;

  VPOAIT02.OP1CUOID = PC0NW04.OP1CUOID;
  VPOAIT02.OP1NORID = PC0NW04.OP1NORID;
  VPOAIT02.OP1PARTN = PC0NW04.OP1PARTN;

  VPOAIT02.PG1SC4CD = PC0NW04.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0NW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0NS28 ***********************/
end // end PC0NS28

// load saved Split From item row
Function PC0NS29()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0NW04.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0NW04.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0NW04.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = PC0NW04.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = PC0NW04.SY2CLRID;
  VPOASZ02.XDMCD = PC0NW04.XDMCD;
  VPOASZ02.XQACD = PC0NW04.XQACD;
  VPOASZ02.XOWCD = PC0NW04.XOWCD;
  VPOASZ02.PC2INSEG = PC0NW04.PC2INSEG;
  VPOASZ02.XPGCD = PC0NW04.XPGCD;
  VPOASZ02.XUMCD = PC0NW04.XUMCD;
  VPOASZ02.PC6ETSDT = PC0NW04.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0NW04.PC6OETS;
  VPOASZ02.PC6RTADT = PC0NW04.PC6RTADT;
  VPOASZ02.YMTCD = PC0NW04.YMTCD;
  VPOASZ02.PC6CXNBR = PC0NW04.PC6CXNBR;
  VPOASZ02.XWHCD = PC0NW04.XWHCD;
  VPOASZ02.PC2CUXID = PC0NW04.PC2CUXID;

  VPOASZ02.ZFC-CRCY-CD = "   "; /* new jun93*/

  VPOASZ02.OP1CUOID = PC0NW04.OP1CUOID;
  VPOASZ02.OP1NORID = PC0NW04.OP1NORID;
  VPOASZ02.OP1PARTN = PC0NW04.OP1PARTN;

   /* **                                                        ***/
   /* ********************** End of PC0NS29 ***********************/
end // end PC0NS29

// Select (S ) Unique    VPOSIZ01
Function PC0NS46()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0NW00.XXXPRCNM = "PC0NS46"; /* Module identification*/
  set PC0NM001.PC3PONBR cursor;
  PC0NW00.PC0NWSWM = "1";

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS46 ***********************/
end // end PC0NS46

// Select (S ) Unique    VPOTYP01
Function PC0NS50()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0NW01.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0NW01.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0NW00.XXXPRCNM = "PC0NS50"; /* Module identification*/
      PCWREC.XXXMSGNO = 33; /* Indicate invalid or missing*/

      return; /* =============> Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0NW00.XXXPRCNM = "PC0NS50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* ================> Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS50 ***********************/
end // end PC0NS50

// Select (S ) Unique    VPOITM05
Function PC0NS56()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.XGPCD = PC0NW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0NW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW01.PC3PONBR; /* PO number*/
  VPOITM05.SY1STNBR = PC0NW01.SY1STNBR;
  VPOITM05.SY2CLRID = PC0NW01.SY2CLRID;
  VPOITM05.XDMCD = PC0NW01.XDMCD;
  VPOITM05.XQACD = PC0NW01.XQACD;
  VPOITM05.XOWCD = PC0NW01.XOWCD;
  VPOITM05.PC2INSEG = PC0NW01.PC0NWXSD; /* ==> split by data*/
  VPOITM05.XPGCD = PC0NW01.XPGCD;
  VPOITM05.XUMCD = PC0NW01.XUMCD;
  VPOITM05.XWHCD = PC0NW01.PC0NWSB4; /* ===> split by data*/
  VPOITM05.XOWCD = PC0NW01.PC0NWSB5; /* ===> split by data*/
  VPOITM05.PC2CUXID = PC0NW01.PC0NWSB3; /* ===> split by data*/
  VPOITM05.YMTCD = PC0NW01.PC0NWSB2; /* ===> split by data*/
  VPOITM05.PC6RTADT = PC0NW01.PC6RTADT;
  VPOITM05.PC6CXNBR = PC0NW01.PC6CXNBR;
  VPOITM05.YSMXDV = PC0NW01.PC0NWXDV; /* ===> split by data*/

  if (PC0NW01.PC0NWETS == PC0NW01.PC6ETSDT) /* ===> ETS Date split request*/
    VPOITM05.PC6ETSDT = PC0NW01.PC6ETSDT; /* ===> ETS Date*/
    VPOITM05.PC6OETS = PC0NW01.PC6OETS; /* ===> Orig. ETS Date*/
  else
    VPOITM05.PC6ETSDT = PC0NW01.PC0NWETS; /* ===> ETS Date*/
    VPOITM05.PC6OETS = PC0NW01.PC6OETS; /* ===> Orig. ETS Date*/
  /* IF PC0NW01.XGPCD = '03';*/
  /* MOVE PC0NW01.PC0NWETS TO PC6REC.PC6OETS;/* ===> default OETS Date*/
  /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      PC0NW00.PC0NWMRG = "Y"; /* ===> merge items flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      PC0NW00.PC0NWMRG = "N"; /* ===> merge items flag*/

      return; /* Return to previous process*/

    end

  end

  PC0NW00.XXXPRCNM = "PC0NS56"; /* Module identification*/
  set PC0NM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/
                                  /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0NW00.PC0NWSWM = "1"; /* ===> request for map switch*/
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS56 ***********************/
end // end PC0NS56

// Select (S1) Set/Open  VFYPO001
Function PC0NS71()
   /* ------------------------------------------------------------*/
    /* Call on the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("S1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0NW00.XXXPRCNM = "PC0NS71"; /* Process name*/
  PC0NW00.PC0NWSWM = "1"; /* ===> request for map switch*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NS71"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0NS71 ***********************/
end // end PC0NS71

// Fetch  (N1) Next row  VFYPO001
Function PC0NS72()
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("N1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0NW00.PC0NWSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0NW00.XXXPRCNM = "PC0NS72";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NS72"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0NS72 ***********************/
end // end PC0NS72

// Close  (C1) Set       VFYPO001
Function PC0NS73()
   /* ------------------------------------------------------------*/
   /* Close cursor for VFYPO002*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("C1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0NW00.XXXPRCNM = "PC0NS73"; /* ===> process identification*/
  PC0NW00.PC0NWSWM = "1"; /* ===>request for map switch*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NS73"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0NS73 ***********************/
end // end PC0NS73

// Update (UA) item row  VPOITM05
Function PC0NS81()
   /* ------------------------------------------------------------*/
   /* Select & Update unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "UA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0NS81"; /* Module identification*/
  set PC0NM001.CATOAP cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PC0NS99(); /* ===> reinituialize flags and indexes*/
    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Return to previous process*/

    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ALTENATE (UA) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS81 ***********************/
end // end PC0NS81

// Update 'U ' size D.B. VPOSIZ01
Function PC0NS82()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0NS82"; /* Module identification*/
  set PC0NM001.PC3PONBR cursor;
  PC0NW00.PC0NWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PC0NS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS82 ***********************/
end // end PC0NS82

// Select (M2) Seq nbr   VPOITM05
Function PC0NS90()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select max SEQ NBR*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>pass row storage area*/

  VPOITM05.XGPCD = PC0NW01.XGPCD;
  VPOITM05.PO-REG-CD = PC0NW01.PO-REG-CD; /* ===> P.O. REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW01.PC3PONBR; /* ===> P.O. NBR*/
  PCYREC.PCYFUNC = "M2";

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* load the display record with the new sequence number.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      PC0NW01.PC0NWSEQ = PCYREC.PCYCOUNT + 1; /* ===> seq number to changed row*/

      return; /* Return to previous process*/

    end

  end

  PC0NW00.XXXPRCNM = "PC0NS90"; /* Module identification*/
  set PC0NM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX (M2) SEQ. NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS90 ***********************/
end // end PC0NS90

// Insert  (A ) Item row VPOITM05
Function PC0NS91()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "A ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0NS91"; /* Module identification*/
  set PC0NM001.PC3PONBR cursor;

   /* IF EZERT8 EQ '00000000'         ; Call successful*/
    /* AND SQLCA.SQLCODE EQ 100      ; and normal return code*/

    /* PC0Ns99     ;===> reset indexes & flags*/

    /* MOVE 12 TO EZEMNO   ;=======> data updated by another*/

    /* EZEFLO                        ; Return to previous process*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0NW00.PC0NW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0NW00.PC0NWSWM = "1"; /* ===> request for map switch*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS91 ***********************/
end // end PC0NS91

// Insert (A ) size D.B. VPOSIZ01
Function PC0NS92()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0NW00.XXXPRCNM = "PC0NS92"; /* Module identification*/
  set PC0NM001.PC3PONBR cursor;
  PC0NW00.PC0NWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PC0NS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS92 ***********************/
end // end PC0NS92

// Select (S ) Unique    VPRDCU01
Function PC0NS98()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = PC0NW01.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PC0NW01.PC0NWSB3; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    converseLib.clearScreen();
    
    set PC0NM001.PC0NMSB3 cursor, bold;

    PC0NW00.XXXPRCNM = "PC0NS98"; /* Module identification*/
    converseLib.validationFailed(45);

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0NW00.XXXPRCNM = "PC0NS98"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NS98 ***********************/
end // end PC0NS98

// re-initialize indexes/flags
Function PC0NS99()
   /* ------------------------------------------------------------*/
   /* re-initialize indexes and flags for requested new data*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWUPF = "N"; /* ===>D.B. Update flag*/
  PC0NW00.PC0NWMOD = "N"; /* ===>reset modified flag*/
  PC0NW00.PC0NWSWR = "Y"; /* ===>request for data*/
  PC0NW00.PC0NWSWF = "Y"; /* ===>request for format map 1*/
  PC0NW00.PC0NWF20 = "Y"; /* ===>initialize first sizes*/
  PC0NW00.PC0NWIXS = 1; /* ===>initialize index*/

   /* **                                                        ***/
   /* ********************** End of PC0NS99 ***********************/
end // end PC0NS99

// Select (M1) seq. nbr  VPOAIT01
Function PC0NSA0()
   /* ----------------------------------------------------------*/
    /* Do a select max count on the item audit sequence number*/
    /* and add 1 to the count.*/
   /* ----------------------------------------------------------*/

  PCYREC.PCYFUNC = "M1"; /* Select max count*/

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the SEQ NBR returned*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0NW00.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PC0NW00.PCJSEQNO = 1;
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PC0NW00.XXXPRCNM = "PC0NSA0";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NSA0"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM AUDIT ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
   /* **                                                        ***/
   /* ********************** End of PC0NSA0 ***********************/
end // end PC0NSA0

// Insert (A) item audit VPOAIT01
Function PC0NSA1()
   /* ------------------------------------------------------------*/
    /* Add the formatted item audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "A ";
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    VPOAIT02.PCJNETQT = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIAFTN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRA = " "; /* ===> reset audit field*/
    VPOAIT02.PCIAFTA = " "; /* ===> reset ausit field*/
    return;

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PC0NW00.XXXPRCNM = "PC0NSA1";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NSA1"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0NSA1 ***********************/
end // end PC0NSA1

// Insert (A) size audit VPOASZ01
Function PC0NSA2()
   /* ------------------------------------------------------------*/
   /* Insert/add the formatted size audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PC0NW00.XXXPRCNM = "PC0NSA2";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NSA2"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0NSA2 ***********************/
end // end PC0NSA2

// Driver (set audit rec. flags)
Function PC0NSA4()
   /* ------------------------------------------------------------*/
   /* This module is preformed to process and load audits flags*/
   /* for an  audit on the "Maintenance From" item row.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* L/C Amend print indicator*/
   /* ------------------------------------------------------------*/
     /* If the destination changed*/
        /* The L/C Amendment print indicator need to be set*/
        /* (1,2,3,5)*/
     /* else*/
        /* The L/C Amendment print indicator need to be set*/
        /* (3,5)*/
   /* ------------------------------------------------------------*/

  if (PC0NW01.PC0NWSB3 != PC0NW04.PC2CUXID /* ===> Cust. Xref code*/
   || PC0NW01.PC0NWSB4 != PC0NW04.XWHCD)   /* ===> Warehouse code*/

    PC0NSA6(); /* ===> Get and Load L/C Amend print indicator*/

  else

    PC0NSA7(); /* ===> Get and Load L/C Amend print indicator*/

  end

   /* ------------------------------------------------------------*/
                     /* Change Memo flag*/
   /* ------------------------------------------------------------*/

  PC0NSA8(); /* ===> Get and Load Change Memo Flag*/

   /* ------------------------------------------------------------*/
                    /* Order Adjustment flag*/
   /* ------------------------------------------------------------*/

  PC0NSA9(); /* ===> Get and Load Order adjustment*/
                                   /* flag*/

   /* **                                                        ***/
   /* ********************** End of PC0NSA4 ***********************/
end // end PC0NSA4

// Get & Load L/C Amend (1,2,3,5)
Function PC0NSA6()
   /* ------------------------------------------------------------*/
   /* Determine if the L/C flag is set and load the appropriate*/
   /* L/C indicator accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOAIT02.YOACD in YOATBL.YOACD /* ===> Code is in table*/
   && YOATBL.XGPCD[sysVar.arrayIndex] == VPOAIT02.XGPCD)

    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y")

      if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
        VPOAIT02.PCJAMEND = "1"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "2";
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    else /* ===> L/C Flag set to "N"*/

      if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
        VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    end /* ===> L/C Flag check*/

  else /* ===> code not in table*/

    PC0NW00.XXXPRCNM = "PC0NSA6"; /* Module identification*/
    converseLib.validationFailed(139); /* Indicate missing or invalid*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> rollback all changes*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0NSA6 ***********************/
end // end PC0NSA6

// Get & Load L/C Amend (5,3)
Function PC0NSA7()
   /* ------------------------------------------------------------*/
   /* The size record was not updated so load the appropriate*/
   /* L/C Amendnent Print Indicator accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
    VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
  else
    if (VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end /* ===> code not in table*/

   /* **                                                        ***/
   /* ********************** End of PC0NSA7 ***********************/
end // end PC0NSA7

// Get & Load "Change Memo Flag"
Function PC0NSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> if po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        if (PC0NW01.PC6ETSDT != PC0NW04.PC6ETSDT /* IF ETS changed*/
         || PC0NW01.YMTCD != PC0NW04.YMTCD)      /* or mode changed*/
          if (PC0NW01.PC2CUXID == PC0NW04.PC2CUXID /* IF cust not changed*/
           && PC0NW01.XWHCD == PC0NW04.XWHCD)      /* and whse not changed*/
            VPOAIT02.PCJMEMO = "N";
          else
            VPOAIT02.PCJMEMO = " ";
          end
        else
          VPOAIT02.PCJMEMO = " ";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====> CUST flag = "Y" check*/

    else /* ===> code not in table*/

      PC0NW00.XXXPRCNM = "PC0NSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0NSA8 ***********************/
end // end PC0NSA8

// Get & Load "Order Adj. Flag"
Function PC0NSA9()
   /* ------------------------------------------------------------*/
   /* Determine if the Order Adjustment flag is set and load the*/
   /* appropriate Order Adjustment flag accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> Order adjustment flag*/
        if (PC0NW01.PC6ETSDT != PC0NW04.PC6ETSDT) /* if ETS changed*/
          if (PC0NW01.PC2CUXID == PC0NW04.PC2CUXID /* if cust not changed*/
           && PC0NW01.XWHCD == PC0NW04.XWHCD       /* and whse not changed*/
           && PC0NW01.YMTCD == PC0NW04.YMTCD)      /* and mode not changed*/
            VPOAIT02.PCJOAPRT = "N";
          else
            VPOAIT02.PCJOAPRT = " ";
          end
        else
          VPOAIT02.PCJOAPRT = " ";
        end
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====> check YOACD*/

    else /* ===> code not in table*/

      PC0NW00.XXXPRCNM = "PC0NSA9"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJOAPRT = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0NSA9 ***********************/
end // end PC0NSA9

// Build FOB Price templete
Function PC0NSB0()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* Note: The Override templete is made up of 3 arrays*/

       /* PC0NW01.PC0NWVRD(PC0NWIXT)*/
        /* - loaded with factory Prices initially*/
        /* - overlayed with any found override prices*/

       /* PC0NW01.PC0NWVRF(PC0NWIXT)*/
        /* - loaded with "N" initially*/
        /* - overlayed with "Y" for  found override prices*/

       /* PC0NW01.PC0NWVRQ(PC0NWIXT)*/
        /* - accumulated on order QTYs for all items in item set*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0NW00.PC0NWSWT = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/
  if (PC0NW00.PC0NWPFF == "Y") /* ===> factory price record found*/
    move PCOREC.FY4FOBPR to PC0NW01.PC0NWVRD[1] for all;
  else
    move 0 to PC0NW01.PC0NWVRD[1] for all; /* ===> initialize override price*/
  end
  move "N" to PC0NW01.PC0NWVRF[1] for all; /* ===> initialize override flag*/
  move 0 to PC0NW01.PC0NWVRQ[1] for all; /* ===> initialize qtys*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = PC0NW01.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0NW01.PO-REG-CD; /* ===> PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0NW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0NW01.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0NW01.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0NW01.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0NW01.XQACD; /* ===>*/
  VPOITM05.PC2INSEG = PC0NW01.PC0NWXSD; /* ===> recalculated*/
  VPOITM05.XPGCD = PC0NW01.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0NW01.XUMCD; /* ===>*/

  VPOITM05.YSMXDV = PC0NW01.YSMXDV; /* ===> division*/

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.PC2CUXID = "*"; /* ===>*/
  VPOITM05.XWHCD = "*"; /* ===>*/

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

  PC0NSB1(); /* ========> select set and open cursor*/

  PC0NSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate FOB ovrd data asso. with each row.*/
     /* Load the FOB price tempelete with flag and price*/
     /* for the 40 size bucket associated with each item.*/
   /* Fetch and accumulate the total QTYs asso. with each row.*/

   /* ------------------------------------------------------------*/

  while (PC0NW00.PC0NWSWT == "N") /* Until end of temp. item cursor*/

    if (VPOITM05.PC6STAT == "OP" /* ===> item status code*/
     || VPOITM05.PC6STAT == "FC") /* ===> item status code*/

      PC0NSB6(); /* ==========> get size record row*/

      PC0NW00.PC0NWIXT = 1; /* ===> initialize temp. index*/

      while (PC0NW00.PC0NWIXT <= 40) /* Until all sizes read*/

        /* ------------------------------------------------------------*/
         /* accumulate FOB ovrd data asso. with each row.*/
        /* ------------------------------------------------------------*/

        if (VPOSIZ02.PC7FOBFL[PC0NWIXT] == "Y")
                                             /* ===> load FOB override data*/

          PC0NW01.PC0NWVRD[PC0NWIXT] = VPOSIZ02.FY4FOBPR[PC0NWIXT];
          PC0NW01.PC0NWVRF[PC0NWIXT] = VPOSIZ02.PC7FOBFL[PC0NWIXT];

        end

        /* ------------------------------------------------------------*/
         /* accumulate the total on-order size QTYs asso. with each row*/
        /* ------------------------------------------------------------*/

        PC0NW00.PC0NWOR = VPOSIZ02.PC7ORDEQ[PC0NWIXT];
        PC0NW01.PC0NWVRQ[PC0NWIXT] = PC0NW01.PC0NWVRQ[PC0NWIXT] + PC0NW00.PC0NWOR;

        PC0NW00.PC0NWIXT = PC0NW00.PC0NWIXT + 1; /* ===> increment temp. index*/

      end /* ===> while more sizes*/

    end /* ===> status check*/

    PC0NSB2(); /* ==========> Fetch next item row*/
    /* ========================================> driving read*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0NSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0NSB1 ***********************/
end // end PC0NSB0

// Select (S7) Set/Open  VPOITM05
Function PC0NSB1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0NW00.XXXPRCNM = "PC0NSB1"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NSB1 ***********************/
end // end PC0NSB1

// Fetch  (N7) Next row  VPOITM05
Function PC0NSB2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0NW00.PC0NWSWT = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0NW00.XXXPRCNM = "PC0NSB2"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NSB2 ***********************/
end // end PC0NSB2

// Close  (N7) Set       VPOITM05
Function PC0NSB3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM05" ("C7", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC0NW00.XXXPRCNM = "PC0NSB3"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NSB3 ***********************/
end // end PC0NSB3

// Select (S ) Unique    VPOSIZ01
Function PC0NSB6()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0NW00.XXXPRCNM = "PC0NSB6"; /* Module identification*/
  set PC0NM001.PC3PONBR cursor;
  PC0NW00.PC0NWSWM = "1";

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0NM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0NW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0NSB6 ***********************/
end // end PC0NSB6

// Set-up & Get Factory FOB price
Function PC0NSB8()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  set PCOREC empty;

  PCOREC.XGPCD = PC0NW01.XGPCD;
  PCOREC.FY1FCTYC = PC0NW01.FY1FCTYC;
  PCOREC.SY1STNBR = PC0NW01.SY1STNBR;
  PCOREC.SY2CLRID = PC0NW01.SY2CLRID;
  PCOREC.XDMCD = PC0NW01.XDMCD;
  PCOREC.XQACD = PC0NW01.XQACD;
  PCOREC.PC2INSEG = PC0NW01.PC0NWXSD; /* ===> re-calculated*/
  PCOREC.XUMCD = PC0NW01.XUMCD;
  PCOREC.XPGCD = PC0NW01.XPGCD;
  PCOREC.PC3POIDT = PC0NW01.PC3POIDT;
  PCOREC.PC3CRDT = PC0NW01.PC3CRDT;
  PCOREC.PCFSEYR = PC0NW01.PCFSEYR;
  PCOREC.XSECD = PC0NW01.XSECD;

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* Load the prices to display working storage*/
   /* ------------------------------------------------------------*/

  if (PCOREC.PCORECPF == "N")
    PC0NW00.PC0NWPFF = "N"; /* ===> Price found flag*/
    if (PCWREC.XXXMSGNO == 12 /* ===> updated by another user msg*/
     || PCWREC.XXXMSGNO == 1) /* ===> update successful*/
      /* ========= Next Sentence ================>*/
    else
      PCWREC.XXXMSGNO = 118; /* No FOB price available*/
      PC0NW00.XXXPRCNM = "PC0NSB8"; /* Module identification*/
    end
  else
    PC0NW00.PC0NWPFF = "Y"; /* ===> Price found flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0NSB8 ***********************/
end // end PC0NSB8

// Select from  VPOIAD02
Function PC0NSC0()
   /* ----------------------------------------------------------*/
    /* Do a select*/
   /* ----------------------------------------------------------*/

  VPOIAD02.XGP-GPC-CD = PC0NW03.XGPCD;
  VPOIAD02.PC-PO-NBR = PC0NW03.PC3PONBR;
  VPOIAD02.PO-REG-CD = PC0NW03.PO-REG-CD;
  VPOIAD02.PC-ITM-SEQ-NBR = PC0NW03.PC6ITMNB[PC0NWCSY];

  try
    call "VPOIAD02" ("S ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 ||  /* ROW FOUND*/
    SQLCA.VAGen_SQLCODE == 100)     
            /* Row NOT found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PC0NW00.XXXPRCNM = "PC0NSC0";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NSC0"; /* Process name*/
  TA1REC.TA1LOC = "SELECT ON VPOIAD02 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD02"; /* Table view name*/
  /* MOVE VPOIAD02.VPOAIT02-KEY TO TA1REC.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
   /* **                                                        ***/
   /* ********************** End of PC0NSC0 ***********************/
end // end PC0NSC0

// insert into  VPOIAD02
Function PC0NSC1()
   /* ----------------------------------------------------------*/
    /* Do an insert*/
   /* ----------------------------------------------------------*/

  VPOIAD02.PC-ITM-SEQ-NBR = PC0NW01.PC0NWSEQ;

  VPOIAD02.ZZ-SDT = XX0XW01.XX0XWDAT;
  VPOIAD02.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VPOIAD02.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VPOIAD02.ZZ-CHNG-CNT = 0;

  try
    call "VPOIAD02" ("A ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 ||  /* ROW FOUND*/
    SQLCA.VAGen_SQLCODE == 100)     
            /* Row NOT found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PC0NW00.XXXPRCNM = "PC0NSC1";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0NSC1"; /* Process name*/
  TA1REC.TA1LOC = "INSERT IN VPOIAD02 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD02"; /* Table view name*/
  /* MOVE VPOIAD02.VPOAIT02-KEY TO TA1REC.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
   /* **                                                        ***/
   /* ********************** End of PC0NSC1 ***********************/
end // end PC0NSC1

//*** RECORD=PC0NW00 ****
// ------------------------------------------------------------
// 
// Record:   PC0NW00
// 
// Application working storage.
// used for general working storage functions such uses as:
//     Indexes
//     Flags
//     Temp. accumulators
//     Date calculation fields
//     and other Miscellanous stuff
// 
// ------------------------------------------------------------
// ***********************
Record PC0NW00 type basicRecord
  10 PC0NWSWR PC0NWSWR ; 
  10 PC0NWSWM PC0NWSWM ; 
  10 PC0NWSWS PC0NWSWS ; 
  10 PC0NWSWF PC0NWSWF ; 
  10 PC0NWSWP PC0NWSWP ; 
  10 PC0NWXIT PC0NWXIT ; 
  10 PC0NWSWT PC0NWSWT ; 
  10 PC0NWSW1 PC0NWSW1 ; 
  10 PC0NWSW2 PC0NWSW2 ; 
  10 * char(1) ; 
  10 PC0NWF20 PC0NWF20 ; 
  10 PC0NWMOD PC0NWMOD ; 
  10 PC0NWUPF PC0NWUPF ; 
  10 PC0NWMRG PC0NWMRG ; 
  10 PC0NWPFF PC0NWPFF ; 
  10 PC0NWFL1 PC0NWFL1 ; 
  10 PC0NWFL2 PC0NWFL2 ; 
  10 PC0NWIOF PC0NWIOF ; 
  10 PC0NW911 PC0NW911 ; 
  10 * char(1) ; 
  10 PC0NWCSY PC0NWCSY ; 
  10 PC0NWTSY PC0NWTSY ; 
  10 * char(1) ; 
  10 PC0NWIXM PC0NWIXM ; 
  10 PC0NWIXF PC0NWIXF ; 
  10 PC0NWIXS PC0NWIXS ; 
  10 PC0NWIXZ PC0NWIXZ ; 
  10 PC0NWIXR PC0NWIXR ; 
  10 PC0NWIXT PC0NWIXT ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 PC0NWPRC PC0NWPRC ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 CAFROMAP CAFROMAP ; 
  10 PC6PLAN PC6PLAN ; 
  10 * char(1) ; 
  10 PC0NWDT PC0NWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 * char(1) ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC0NWPCC PC0NWPCC ; 
    15 PC0NWPYR PC0NWPYR ; 
    15 PC0NWPMO PC0NWPMO ; 
    15 PC0NWPDM PC0NWPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC0NWMM PC0NWMM ; 
    15 PC0NWDD PC0NWDD ; 
    15 PC0NWCC PC0NWCC ; 
    15 PC0NWYY PC0NWYY ; 
  10 * char(1) ; 
  10 PC0NW1DT PC0NW1DT ; 
    15 PC0NW1MM PC0NW1MM ; 
    15 PC0NW1DD PC0NW1DD ; 
    15 PC0NW1YY PC0NW1YY ; 
  10 * char(1) ; 
  10 PC0NWFDT PC0NWFDT ; 
    15 PC0NWFCC PC0NWFCC ; 
    15 PC0NWFYY PC0NWFYY ; 
    15 PC0NWFMM PC0NWFMM ; 
    15 PC0NWFDD PC0NWFDD ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 PC0NWRCP PC0NWRCP [40] ; 
  10 PC0NWRC PC0NWRC ; 
  10 PC0NWSHP PC0NWSHP [40] ; 
  10 PC0NWWSH PC0NWWSH ; 
  10 PC0NWORD PC0NWORD [40] ; 
  10 PC0NWOR PC0NWOR ; 
  10 PC0NWBAL PC0NWBAL [40] ; 
  10 PC0NWSUM PC0NWSUM ; 
  10 * char(1) ; 
  10 PC0NWVAL PC0NWVAL ; 
  10 PC0NWDIF PC0NWDIF ; 
  10 PC0NWSPT PC0NWSPT ; 
  10 PC0NWQTY PC0NWQTY ; 
  10 PC0NWSQT PC0NWSQT ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 PCJSEQNO PCJSEQNO ; 
  10 * char(1) ; 
  10 PC0NWCB1 PC0NWCB1 ; 
  10 PC0NWCB2 PC0NWCB2 ; 
  10 * char(1) ; 
  10 PC0NWDF1 PC0NWDF1 ; 
  10 PC0NWDF2 PC0NWDF2 ; 
  10 * char(1) ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0NWKA1 PC0NWKA1 ; 
      20 PC0NWKN1 PC0NWKN1 ; 
      20 * char(1) ; 
    15 PC0NWKA2 PC0NWKA2 ; 
      20 PC0NWKN2 PC0NWKN2 ; 
      20 * char(1) ; 
    15 PC0NWKA3 PC0NWKA3 ; 
      20 PC0NWKN3 PC0NWKN3 ; 
      20 * char(1) ; 
    15 PC0NWKA4 PC0NWKA4 ; 
      20 PC0NWKN4 PC0NWKN4 ; 
      20 * char(1) ; 
end // end PC0NW00

//*** RECORD=PC0NW01 ****
// ********** PRODUCTION ORDER ITEM MAP RECORD ****************
// **                       SPLIT                            **
// **                  Display Record                        **
// 
// 
//   RECORD NAME:      PC0NW01
// 
//     MAP NAMES:      PC0NM001
// 
//      This record is a working storage record used to
//   hold data that is pertinent to map PC0NM001.
//      It holds information  that relates to a P.O. Item/sizes
//   and is used as working storage to load both maps.
//      It is also used as the source for data base updates
//   to the split the item selected.
// 
// ** 05/23/00  vramac  Added sap po nbr                     **
// **                                                        **
// ********** PRODUCTION ORDER ITEM MAP RECORD ****************
// ***********************
Record PC0NW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PCFSECD PCFSECD ; 
  10 PC3CRDT PC3CRDT ; 
  10 PC6STAT PC6STAT ; 
  10 PC6CXNBR PC6CXNBR ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC6ITMNB PC6ITMNB ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC3BLPO PC3BLPO ; 
  10 PCFSEYR PCFSEYR ; 
  10 * char(1) ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 YPCCD YPCCD ; 
  10 * char(1) ; 
  10 XSECD XSECD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XPGCD XPGCD ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 * char(1) ; 
  10 XWHCD XWHCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 YMTCD YMTCD ; 
  10 YOHCD YOHCD ; 
  10 YSMXDV YSMXDV ; 
  10 XDMCD XDMCD ; 
  10 XDSCD XDSCD ; 
  10 YACCD YACCD ; 
  10 YACDESC YACDESC ; 
  10 * char(1) ; 
  10 PC0NWTVL PC0NWTVL ; 
  10 PC6TORDE PC6TORDE ; 
  10 PC6MICHG PC6MICHG ; 
  10 * char(1) ; 
  10 SY4IDDSC SY4IDDSC [40] ; 
  10 PC7ORDEQ PC7ORDEQ [40] ; 
  10 PC7FOBFL PC7FOBFL [40] ; 
  10 FY4FOBPR FY4FOBPR [40] ; 
  10 * char(1) ; 
  10 PC0NWVRD PC0NWVRD [40] ; 
  10 PC0NWVRF PC0NWVRF [40] ; 
  10 PC0NWVRQ PC0NWVRQ [40] ; 
  10 * char(1) ; 
  10 PC6OETS PC6OETS ; 
  10 PC6RTADT PC6RTADT ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PC0NWDT1 PC0NWDT1 ; 
  10 * char(1) ; 
  10 PC0NWETS PC0NWETS ; 
  10 PC0NWSB1 PC0NWSB1 ; 
  10 PC0NWSB2 PC0NWSB2 ; 
  10 PC0NWSB3 PC0NWSB3 ; 
  10 PC0NWSB4 PC0NWSB4 ; 
  10 PC0NWSB5 PC0NWSB5 ; 
  10 * char(1) ; 
  10 PC0N-OWCD-EDIT char(4) ; 
    15 PC0N-WHSE PC0N-WHSE ; 
    15 PC0N-OWCD PC0N-OWCD ; 
  10 PC0NWXSD PC0NWXSD ; 
  10 PC0NWXDS PC0NWXDS ; 
  10 PC0NWXDV PC0NWXDV ; 
  10 PC0NWPLN PC0NWPLN ; 
  10 PC0NWSQT PC0NWSQT [40] ; 
  10 PC0NWSPT PC0NWSPT ; 
  10 PC0NWXCT PC0NWXCT ; 
  10 PC0NWSEQ PC0NWSEQ ; 
end // end PC0NW01

//*** RECORD=PC0NW03 ****
// ***************** po common pass data *********************
//                        "COPY"
//   This record contains commonly passed data for the
//   production order applications
// 
//   Note: this is a mirror copy of PCWREC and must be deleted
//         and copyed from PCWREC when PCWREC is modified.
// 
// ***************** po common pass data *********************
// 
// ***********************
Record PC0NW03 type basicRecord
  5 CAUSERA CAUSERA ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PCFSECD PCFSECD ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PCWITKEY PCWITKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 PC6ETSDT PC6ETSDT ; 
      15 YMTCD YMTCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 XSECD XSECD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PCWMAP PCWMAP ; 
    10 PCWFNC PCWFNC [4] ; 
    10 PCWSYIDX PCWSYIDX ; 
    10 PCWITMKY PCWITMKY [20] ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 PCWDEST PCWDEST [15] ; 
      15 PCWWHSE PCWWHSE ; 
      15 PCWCUST PCWCUST ; 
    10 YSICD YSICD ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 CAFROMAP CAFROMAP [4] ; 
    10 XGPCD XGPCD ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PCWFRDT PCWFRDT ; 
    10 PCWTODT PCWTODT ; 
    10 YOACD YOACD ; 
    10 PCWUSER1 PCWUSER1 ; 
    10 PCWUSER2 PCWUSER2 ; 
    10 PCWUSER3 PCWUSER3 ; 
    10 PCWUSER4 PCWUSER4 ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PCWSIZE PCWSIZE ; 
    10 PCWDEVCD PCWDEVCD ; 
    10 PCWAUDFL PCWAUDFL ; 
    10 PC6STAT PC6STAT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6OETS PC6OETS ; 
end // end PC0NW03

//*** RECORD=PC0NW04 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
//                      "SAVED COPY"
// 
//    RECORD NAME:      PC0NW04       (---> MIRRORS VPOITM05 )
// 
//    THIS RECORD IS A MIRROR IMAGE TO THE SPLIT FROM ITEM ROW
// SELECTED FROM APPLICATION PC0M/PC0J BEFORE ANY CHANGES HAVE
// BEEN MADE.
//    IT IS USED IN THE UPDATE AND AUDIT PROCESSES TO MAXIMIZE
// CODING MAINTENANCE AND D.B. RESOURCES.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// ***********************
Record PC0NW04 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0NW04

//*** RECORD=PC0NW05 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
//                      "Saved Copy"
// 
//         Record:      PC0NW05
// 
//    This records is a copy of the size record associated with
// the split from item row and is used in audit processing.
// 
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// ***********************
Record PC0NW05 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0NW05

//*** RECORD=PC0NW06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
//                      "SAVED COPY"
// 
//    RECORD NAME:      PC0NW06       (---> MIRRORS VPOITM05 )
// 
//    THIS RECORD IS A MIRROR IMAGE TO THE SPLIT FROM ITEM ROW
// SELECTED FROM APPLICATION PC0M/PC0J BEFORE ANY CHANGES HAVE
// BEEN MADE.
//    IT IS USED IN THE UPDATE AND AUDIT PROCESSES TO MAXIMIZE
// CODING MAINTENANCE AND D.B. RESOURCES.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// ***********************
Record PC0NW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0NW06

//*** RECORD=PC0NW07 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
//                      "Saved Copy"
// 
//         Record:      PC0NW07
// 
//    This records is a copy of the size record associated with
// the split to item row and is used in audit processing.
// 
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// ***********************
Record PC0NW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0NW07

// split by 4th field (Warehouse)
DataItem PC0N-OWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split by 4th field (Warehouse)
DataItem PC0N-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date day map display
DataItem PC0NW1DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddccyy-num
DataItem PC0NW1DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date month map display
DataItem PC0NW1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date year map display
DataItem PC0NW1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// -911 flag
DataItem PC0NW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W.S. balance to ship
DataItem PC0NWBAL num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// control break 1 (FY_FOB_PRC)
DataItem PC0NWCB1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// control break 2 (ovrd flag)
DataItem PC0NWCB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC0NWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current Style index
DataItem PC0NWCSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date day map display
DataItem PC0NWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diff QTYs   (temp accumulator)
DataItem PC0NWDF1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// diff QTYs   (temp accumulator)
DataItem PC0NWDF2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// diff QTYs   (temp accumulator)
DataItem PC0NWDIF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CHAR data form
DataItem PC0NWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ets date display
DataItem PC0NWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split PC_EST_HDT (calc date)
DataItem PC0NWETS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first 20 sizes format switch
DataItem PC0NWF20 char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Reformat year
DataItem PC0NWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem PC0NWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem PC0NWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag 1 (temp use)
DataItem PC0NWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag 2 (temp use)
DataItem PC0NWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem PC0NWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem PC0NWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item open flag
DataItem PC0NWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for scroll Finder index
DataItem PC0NWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map size fields
DataItem PC0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for size rec sort/match
DataItem PC0NWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PC0NWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp index
DataItem PC0NWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes (saved)
DataItem PC0NWIXZ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key char
DataItem PC0NWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of error key char
DataItem PC0NWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of error key char
DataItem PC0NWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of error key char
DataItem PC0NWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key num
DataItem PC0NWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of error key num
DataItem PC0NWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of error key num
DataItem PC0NWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of error key num
DataItem PC0NWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date month map display
DataItem PC0NWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PC0NWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Merged on items occured flag
DataItem PC0NWMRG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W.S. on order size quantities
DataItem PC0NWOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// on order size quantity fields
DataItem PC0NWORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. ID Production century
DataItem PC0NWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PC0NWPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Price found flag
DataItem PC0NWPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split PC_PRDCTN_PLAN_NBR
DataItem PC0NWPLN smallint {
  upperCase = yes, currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Month
DataItem PC0NWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// saved PROCESS NAME for PA2 Key
DataItem PC0NWPRC char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Year
DataItem PC0NWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// total QTYs  (temp accumulator)
DataItem PC0NWQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// W.S. receipted size quantities
DataItem PC0NWRC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// receipted size quantity fields
DataItem PC0NWRCP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split by 1st field (ETS Date)
DataItem PC0NWSB1 char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// split by 2nd field (Mode)
DataItem PC0NWSB2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split by 3rd field (Cust Xref)
DataItem PC0NWSB3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split by 4th field (Warehouse)
DataItem PC0NWSB4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split by 4th field (Warehouse)
DataItem PC0NWSB5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split PC_ITM_SEQ_NBR
DataItem PC0NWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipped size quantity fields
DataItem PC0NWSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split total QTYs (temp accum.)
DataItem PC0NWSPT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// split size QTY
DataItem PC0NWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. (temp accumulator)
DataItem PC0NWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0NWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0NWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PC0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC0NWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format/protect map 1 switch
DataItem PC0NWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 sizes switch
DataItem PC0NWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0NWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total Styles
DataItem PC0NWTSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total value (temp accum.)
DataItem PC0NWTVL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update confirm flag
DataItem PC0NWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size level value (temp accum.)
DataItem PC0NWVAL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FOB Override templete (price)
DataItem PC0NWVRD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB Override templete (flag)
DataItem PC0NWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOB Override templete (QTYs)
DataItem PC0NWVRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. shipped size quantities
DataItem PC0NWWSH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// split destination XCT_CTRY_CD
DataItem PC0NWXCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split direct ship code
DataItem PC0NWXDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split XXX_SUM_XDV_CD
DataItem PC0NWXDV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit application switch
DataItem PC0NWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// split spec difference code
DataItem PC0NWXSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date year map display
DataItem PC0NWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end