package pc07;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC07 ****
// ************************************************************
// *
// *                 APPAREL--FOB INQUIRY
// *
// *  THIS PROGRAM WILL PRODUCE A LIST OF ROWS THAT WILL SHOW
// *  THE TOTAL QUANTITY AND DOLLAR AMOUNT FOR A GIVEN COLOR,
// *  DIMENSION, QUALITY, SPEC. DIFF., AND PACKAGE CODES.  A
// *  SIZE RANGE, BASED ON THE FOB PRICE WILL BE SHOWN ALSO.
// *
// *  IN FINDING OUT THE TOTALS FOR ANY COLOR YOU WILL SELECT
// *  A SET OF P.O. ITEM ROW(s) AND THEN THE P.O. SIZE ROW THAT
// *  CORRESPONDS WITH IT BASED UPON THE P.O. ITEM NUMBER.
// *  A RUNNING TOTAL FOR BOTH QUANTITY AND DOLLAR AMOUNT WILL
// *  BE CALCULATED UNTIL A CHANGE IN ANY OF THE KEY FIELDS
// *  OCCURS.  WHEN THIS HAPPENS A LINE(s) WILL BE WRITTEN AND
// *  THE TOTAL DOLLAR AMOUNT FOR THE COLOR WILL BE ROLLED INTO
// *  THE TOTAL FOR THE STYLE.
// *
// *  THIS PROGRAM IS ONLY ACCESSIBLE FROM THE PC0U (P.O.
// *  NUMBER DETAIL INQUIRY) ANY OTHER ATTEMPT WILL BE AN
// *  ERROR.
// *
// *  THERE MAY BE MORE THAN ONE PAGE OF INFORMATION GATHERED
// *  AND THE USER WILL BE ABLE TO PF7 (BACKWARD) OR PF8
// *  (FORWARD) THROUGH THE PAGES TO VIEW THE INFORMATION.
// *
// *  THE USER CAN PF3 TO RETURN TO THE PC0U PROGRAM OR PRESS
// *  ANY OF THE PRESENTED PF KEYS TO FAST PATH TO THE NAMED
// *  MENUS OR THEY MAY ENTER AN APPLICATION NAME AND/OR ITEM
// *  AND EXIT TO THE REQUSETED SCREEN.
// *
// ************************************************************
// 
//   Date           Logon          Description
//  ----------------------------------------------------------
//  08/30/90  jglaze    Fixed size bucket accumulation in 143
//                      and 144.  Made 145 and 146 obsolete,
//                      but I left them in just in case.
// **
//  09/27/90  lsutto    Allow gpc 07 access
// **
//  10/04/90  JGLAZE    Fixed bug that was breaking for each
//                      row when the color had not changed.
//  11/21/90  PPETER    A51 - Add misc charges (PC6MICHG) to
//                      the 'total value' displayed.
//  08/27/91  lsutto    add toggle pf6 to see po-fob/fy-fob
//  10/09/91  lsutto    change implicits allowed to = no
//                      on the appl pc07
//                         and add fields to pc07w06
//  06/17/92  lsutto    remove ovrdprc from display when
//                      showing fy-fob price
//  06/23/92  lsutto    round b-grade price calc in xspcs04
//  06/10/97  PHARWO    PCA367 - PPR PROJECT - P.O. VIEWS
//  07/08/97  jniese    PCA367 - PPR corrections
//  02/08/00  SBUNGO    CHANGED TO USE VIEW VFCTY003
//  04/03/01  AVERMA    corrected size range display
//  05/22/01  VMATT     Display end size when only one size
//                      existed for style/color in PC07210
//  08/03/01  VMATT     PC07 for muliple plans
// **
// *********************
Program PC07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  PC07W01 PC07W01; // record
  PC07W02 PC07W02; // record
  PC07W03 PC07W03; // record
  PC07W06 PC07W06; // record
  PC4REC PC4REC; // record
  PCOREC PCOREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VFCTY003 VFCTY003; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOREG01 VPOREG01; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use PC07M.PC07M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
      /* INITIALIZE WORKING STORAGE, RECORDS, DATA ITEMS, AND MAPS*/
     /* ------------------------------------------------------------*/

    set PC07W01 empty; /* INITIALIZE MAIN WORKING STORAGE*/
    set PC07W02 empty; /* PAGE WORKING STORAGE*/
    set PC07W03 empty; /* COLOR WORKING STORAGE*/
    set PC07W06 empty; /* item  WORKING STORAGE*/
    set VPOHDR02 empty; /* P.O. HEADER RECORD*/
    set PC4REC empty; /* P.O. TYPE RECORD*/
    set VPOITM03 empty; /* P.O. ITEM RECORD*/
    set VPOSIZ02 empty; /* P.O. SIZE RECORD*/
    set PCYREC empty; /* P.O. IOMOD RECORD*/
    set PCOREC empty; /* FOB translation record*/
    set VFCTY003 empty; /* Factory record*/
    set FY4REC empty; /* FOB record*/
    set FYCREC empty; /* Iomod passing record*/
    set PG2REC empty; /* PROD. STYLE/COLOR RECORD*/
    set PG3REC empty;
    set TA5REC empty;
    set TAEREC empty; /* SQL COMM. HOLD AREA*/
    set TA1REC empty; /* ONLINE ERROR WORK AREA*/
    set SQLCA empty; /* SQL COMM. AREA*/
    set ERRSQLCA empty; /* SQL COMM. HOLD AREA*/
    set XX0XW01 empty; /* Date*/
    set XX0XW02 empty; /* Date work area*/
    set PC07M001 initial; /* CLEAR MAP1*/

     /* ------------------------------------------------------------*/
      /* ACCEPT THE PASSED INFORMATION FROM THE PCWREC            **/
     /* ------------------------------------------------------------*/


    PC07W01.SY1STNBR = PCWREC.SY1STNBR; /* style number*/
    PC07W01.PO-REG-CD = PCWREC.PO-REG-CD; /* p.o. number*/
    PC07W01.PC3PONBR = PCWREC.PC3PONBR; /* p.o. number*/

    PC07W01.XGPCD = PCWREC.XGPCD; /* Move in gpc code*/
    PC07W01.PC07WSWR = "Y"; /* SET REQUEST FOR DATA TO Y*/

    PC07W01.PC07MPHD = "PO-FOB";

    PC07001: PC07001();
    goto PC07001;
  end // end main
end // end PC07

// MAIN PROCESS TO DISPLAY MAP
Function PC07001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0U") /* Came from PC0U*/

    PC07010(); /* Display map 1*/

  else
    PCWREC.XXXMSGNO = 6; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSEXIT(); /* Exit to another application*/
  end



end // end PC07001

// INQUIRY MAP PROCESS
Function PC07010()

   /* ------------------------------------------------------------*/
   /* This is the main process used for the INQUIRY. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC07100(); /* Obtain the data to display*/

  PC07200(); /* Format and display the map*/

  PC07300(); /* Check attention identifier*/

  PC07400(); /* Reset fields to normal intensity*/

  PC07500(); /* Verify the entered data*/


end // end PC07010

// OBTAIN THE DATA TO DISPLAY
Function PC07100()

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No message*/
   && PC07W01.PC07WSWR == "Y")          /* Request for data is y*/

    PC07110(); /* Get map header information*/

    PC07S05(); /* Purge any temporary storage*/

    PC07120(); /* Select set and open po item*/

    PC07W01.PC07WTOT = 0; /* Initialize style dollar total*/
    PC07W01.PC07WMCH = 0; /* Initialize PO total misc chg amt*/

    PC07130(); /* (Select next)po item*/

    PC07S26(); /* Save VPOITM03 in PC07W06*/

    PC07W01.PC07WPCL = VPOITM03.SY2CLRID; /* Previous color*/
    PC07W01.XDMCD = VPOITM03.XDMCD; /* Dim. code*/
    PC07W01.XQACD = VPOITM03.XQACD; /* Quality code*/
    PC07W01.PC2INSEG = VPOITM03.PC2INSEG; /* Spec. Dif code*/
    PC07W01.XPGCD = VPOITM03.XPGCD; /* Pack. type code*/
    PC07W01.PC6PLAN = VPOITM03.PC6PLAN;

    if (converseVar.eventKey is pf6)
      if (PC07W01.PC07MPHD == "FY-FOB")
        PC07W01.PC07MPHD = "PO-FOB";
        PC07M001.PC07MPHD = "PO-FOB";
      else
        PC07W01.PC07MPHD = "FY-FOB";
        PC07M001.PC07MPHD = "FY-FOB";
      end
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/

      PC07W01.PC07WEOF = "N"; /* Initialize end of file switch*/
      PC07W01.PC07WMDX = 1; /* Initialize display line*/
      set PC07W02 empty; /* Clear temporary storage*/

      while (PC07W01.PC07WEOF == "N") /* Until cursor end of file*/

        PC07140(); /* Continue with obtaining data*/

      end

      if (PC07W01.PC07WEOF == "Y") /* End of file flag for po item rec*/

        if (PC07W01.PC07WMDX > 0) /* And line was formatted*/

          PC07S07(); /* Add lines to temp. storage page*/

          PC07W01.PC07WTOT = PC07W01.PC07WTOT + PC07W01.PC07WAMT;
          PC07W01.PC07WTOT = PC07W01.PC07WTOT + PC07W01.PC07WMCH;
          PC07W01.PC07WQTY = 0; /* Set total quantity for color to 0*/
          PC07W01.PC07WAMT = 0; /* Set total dollar amt. to 0*/
          PC07W01.PC07WMCH = 0; /* Set subtot misc chg amt to 0*/

          if (PC07W02.SY2CLRID[1] > " ") /* Color is there*/

            PC07S08(); /* Add page to temporary storage*/

          end

        end

        PC07W01.PC07MTSP = 1; /* Initialize page number*/
        PC07W01.PC07WSWR = "N"; /* Request for data completed*/

        set PCYREC empty; /* Clear passing record*/
        PCYREC.PCYFUNC = "C8"; /* Move in iomod function*/

        PC07S06(); /* Close the po item record*/

      end
    end

    if (PC07W01.TA5TSQIX == 0) /* No data to display*/
      set PC07M001 initial; /* Clear map1*/
      PC07M001.XXXPRCNM = "PC07100"; /* Process name*/
      converseLib.validationFailed(18); /* No data to display*/
      set PC07M001.PC07MPGL invisible;
      set PC07M001.PC07MOFL invisible;
    end
  end


end // end PC07100

// OBTAIN HEADER INFORMATION
Function PC07110()

   /* ------------------------------------------------------------*/
    /* GET INFORMATION FOR THE HEADINGS P.O. ID, P.O. TYPE,*/
    /* STYLE NAME. USE VPOHDR02, PC4REC, PG2REC*/
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------------*/
    /* SEE IF THE STYLE EXISTS*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Clear record*/
  PG2REC.SY1STNBR = PC07W01.SY1STNBR; /* Style number*/
  PG2REC.XGPCD = PC07W01.XGPCD; /* Gpc code*/

  XSPG201(); /* Get the style name*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/
    PC07W01.SY1SSTNM = PG2REC.SY1SSTNM; /* Style short name*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Style does not exist*/
    PC07W01.SY1SSTNM = "NOT FOUND"; /* Style short name*/
    PC07M001.XXXPRCNM = "PC07110";
  end

   /* ------------------------------------------------------------*/
    /* FIND THE P.O. HEADER FIELDS*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
                                   /* ; Clear passing record*/
  set VPOHDR02 empty;
                                   /* ; Clear header record*/
  PCYREC.PCYFUNC = "S "; /* ; IO mod function*/
  VPOHDR02.XGPCD = PC07W01.XGPCD; /* ; Move in gpc code*/
  VPOHDR02.PO-REG-CD = PC07W01.PO-REG-CD; /* ; Move in P.O. region*/
  VPOHDR02.PC3PONBR = PC07W01.PC3PONBR; /* ; Move in P.O. number*/

  PC07S02(); /* Get information off the VPOHDR02*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Style exists*/
    PC07W01.PC07WIOD = VPOHDR02.PC3POIDT; /* P.O. id*/
    PC07W01.PCFSECD = VPOHDR02.PCFSECD; /* Apparel season year code*/
    PC07W01.PCFSEYR = VPOHDR02.PCFSEYR; /* Apparel season year*/
    PC07W01.XSECD = VPOHDR02.XSECD; /* Apparel season code*/
    PC07W01.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory code*/
    PC07W01.PC4ORTYP = VPOHDR02.PC4ORTYP; /* P.O. type*/
    PCOREC.PC3CRDT = VPOHDR02.PC3CRDT; /* Entry date for the pcorec*/
    PC07W01.PC3CRDT = VPOHDR02.PC3CRDT; /* Entry date*/
    PC07W01.PC07WCRD = VPOHDR02.PC3CRDT; /* Working entry date*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* P.O. number does not exist*/
    converseLib.validationFailed(69);
    PC07M001.XXXPRCNM = "PC07110";
  end


  PC07S03(); /* Date switch routine for entry date*/


   /* ------------------------------------------------------------*/
    /* FIND THE P.O. TYPE DESCRIPTION*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* ; Clear type record*/
  PC4REC.XGPCD = PC07W01.XGPCD; /* Gpc code*/
  PC4REC.PC4ORTYP = VPOHDR02.PC4ORTYP; /* P.O. type*/

  PC07S04(); /* Get information off the p.o. type table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Type exists*/
    PC07W01.PC4SDESC = PC4REC.PC4SDESC; /* P.O. type short descr.*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* P.O. type does not exist*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC07M001.XXXPRCNM = "PC07110";
  end


end // end PC07110

// SET UP ITEM ROW
Function PC07120()

   /* ------------------------------------------------------------*/
   /* Move in data needed to select an item table row*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* PO passing record*/
  set VPOITM03 empty; /* Clear record*/

  VPOITM03.XGPCD = PC07W01.XGPCD; /* Search key*/
  VPOITM03.PO-REG-CD = PC07W01.PO-REG-CD; /* P.O. REGION CODE*/
  VPOITM03.PC3PONBR = PC07W01.PC3PONBR; /* P.O. number*/
  VPOITM03.SY1STNBR = PC07W01.SY1STNBR; /* Style number*/

  VPOITM03.SY2CLRID = "*"; /* Color id*/

  VPOITM03.XDMCD = "*"; /* Dim. code*/
  VPOITM03.XQACD = "*"; /* Quality code*/
  VPOITM03.XOWCD = "*"; /* owner group*/
  VPOITM03.PC2INSEG = "*"; /* Spec. Diff. code*/
  VPOITM03.XPGCD = "*"; /* Package Type code*/
  VPOITM03.XUMCD = "*"; /* unit of measure*/
  VPOITM03.XWHCD = "*"; /* whse. code*/
  VPOITM03.PC2CUXID = "*"; /* customer id*/
  VPOITM03.PC6ETSDT = -1; /* po ets date*/
  VPOITM03.YMTCD = "*"; /* mode code*/
  VPOITM03.PC6PLAN = -1; /* plan number*/
  VPOITM03.XDSCD = "*"; /* direct ship code*/
  VPOITM03.YSMXDV = "*"; /* division sum code*/

  VPOITM03.PCFSECD = "*"; /* season code*/
  VPOITM03.FY1FCTYC = "*"; /* factory code*/
  VPOITM03.PC4ORTYP = "*"; /* p.o. type code*/
  VPOITM03.PC6STAT = "*"; /* item status code*/
  VPOITM03.PC6XCTCD = "*"; /* country code item*/
  VPOITM03.XPRCD = "*"; /* product type code*/
  VPOITM03.XPCCD = "*"; /* product cat code*/
  VPOITM03.SYBSTGNB = "*"; /* style group nbr.*/
  VPOITM03.PC6RTADT = -1;
  VPOITM03.PC6CXNBR = -1;
  VPOITM03.XPLCD = "*";
  VPOITM03.XGACD = "*";
  VPOITM03.PG1SC4CD = "*";
  VPOITM03.PC6CLVAR = -1;
  VPOITM03.PC6OETS = -1;
  VPOITM03.PC6XCTCD = "*";


  PCYREC.PCYFUNC = "S8"; /* Move in iomod function*/


  PC07S06(); /* Select set of po item rows (pc6rec)*/


end // end PC07120

// FETCH NEXT ITEM ROW
Function PC07130()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear p.o. iomod passing record*/
  PCYREC.PCYFUNC = "N8"; /* Move type of function*/


  PC07S06(); /* Fetch next item row from (VPOITM03)*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
    PC07W01.PC6ITMNB = VPOITM03.PC6ITMNB; /* item number*/
    PC07W01.SY2CLRID = VPOITM03.SY2CLRID; /* Color id*/
    if (VPOITM03.PC6STAT != "CX") /* If item not canceled*/
      PC07W01.PC07WMCH = PC07W01.PC07WMCH + VPOITM03.PC6MICHG; /* Accum Misc chg*/
    end

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    PC07W01.PC07WEOF = "Y"; /* Indicate end of file*/

    return; /* Return to pc07110*/

  end


end // end PC07130

// CONTINUE TO OBTAIN DATA
Function PC07140()

   /* ------------------------------------------------------------*/
    /* CONTINUE WITH OBTAINING THE DATA FOR THE MAP*/
   /* ------------------------------------------------------------*/

  if (PC07W01.PC07WPCL > " ") /* There is a past color*/
    if (PC07W06.SY2CLRID != PC07W01.PC07WPCL /* Color changed*/
     || PC07W06.XDMCD != PC07W01.XDMCD       /* Dim. code*/
     || PC07W06.XQACD != PC07W01.XQACD       /* Quality code*/
     || PC07W06.PC2INSEG != PC07W01.PC2INSEG /* Spec. Dif code*/
     || PC07W06.XPGCD != PC07W01.XPGCD       /* Pack. type code*/
     || PC07W06.PC6PLAN != PC07W01.PC6PLAN) 

      PC07S07(); /* Add lines to temp. storage page*/

      PC07W01.PC07WTOT = PC07W01.PC07WTOT + PC07W01.PC07WAMT;
      PC07W01.PC07WQTY = 0; /* Set total quantity for color to 0*/
      PC07W01.PC07WAMT = 0; /* Set total dollar amt. to 0*/

    end

    PC07142(); /* Get size range*/

  else

    PC07142(); /* Get size range*/

  end



end // end PC07140

// SELECT UNIQUE P.O. SIZE ROW
Function PC07141()

   /* ------------------------------------------------------------*/
   /* Select the set of p.o. size rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* Clear record*/

  VPOSIZ02.XGPCD = VPOITM03.XGPCD; /* Search key*/
  VPOSIZ02.PO-REG-CD = VPOITM03.PO-REG-CD; /* P.O. REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM03.PC3PONBR; /* P.O. number*/
  VPOSIZ02.PC6ITMNB = VPOITM03.PC6ITMNB; /* Item sequence number*/


  PC07S09(); /* Fetch a p.o. size row*/


end // end PC07141

// GET SIZES/RANGES AND PRICES
Function PC07142()
   /* -----------------------------------------------------------*/
     /* THIS PROCESS WILL ACCESS THE PG3REC, WHICH IS THE SIZE*/
     /* description record.*/
   /* -----------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.XGPCD = PC07W01.XGPCD; /* GPC code*/
  PG3REC.SY1STNBR = PC07W01.SY1STNBR; /* Style number*/
  PG3REC.SY2CLRID = VPOITM03.SY2CLRID; /* Color id*/
  PG3REC.XDMCD = VPOITM03.XDMCD; /* Dim. code*/
  PG3REC.XQACD = "**"; /* Quality code*/
  PG3REC.PG3RETCD = "00"; /* Translator return code*/

  PG3REC.PG3FUNCD = "PC"; /* Translator fnc.*/
  PG3REC.PG3DATFM = "N"; /* Compressed/Not compressed sw*/

  TA1REC.TA1PGMNM = "PC07142"; /* What executes this sgrp*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00")

    PCOREC.XGPCD = VPOITM03.XGPCD; /* GPC code*/
    PCOREC.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
    PCOREC.SY1STNBR = VPOITM03.SY1STNBR; /* Style nbr*/
    PCOREC.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
    PCOREC.XDMCD = VPOITM03.XDMCD; /* Dim. code*/
    PCOREC.XQACD = VPOITM03.XQACD; /* Quality code*/
    PCOREC.PC2INSEG = VPOITM03.PC2INSEG; /* Spec. Dif code*/
    PCOREC.XUMCD = VPOITM03.XUMCD; /* Unit of measure code*/
    PCOREC.XPGCD = VPOITM03.XPGCD; /* Pack. type code*/
    PCOREC.XSECD = VPOHDR02.XSECD; /* Season code*/
    PCOREC.PC3POIDT = VPOITM03.PC3POIDT; /* P.O. id date*/
    PCOREC.PCFSEYR = VPOHDR02.PCFSEYR; /* season year*/
    PCOREC.PC3CRDT = VPOHDR02.PC3CRDT; /* entry date*/


    XSPCS04(); /* get fob prices*/


    /* -----------------------------------------------------------*/
       /* Process all the items with the same relative key below*/
       /* and build an FOB Price templete that is made up of*/
       /* 3 fields which all occur 40 times. Qtys, Prices, Flags*/
    /* -----------------------------------------------------------*/


    move 0 to PC07W01.PC07WVRD[1] for all; /* ===> init. Override Prices*/
    move "N" to PC07W01.PC07WVRF[1] for all; /* ===> init. Override Flags*/
    move 0 to PC07W01.PC07WVRQ[1] for all; /* ===> init. Qtys*/
    move "     " to PC07W01.PC07MBSZ[1] for all; /* ===> init. bsz*/
    move "     " to PC07W01.PC07MESZ[1] for all; /* ===> init. Esz*/

    while (VPOITM03.SY2CLRID == PC07W01.PC07WPCL /* Same color*/
     && VPOITM03.XDMCD == PC07W01.XDMCD       /* Dim. code*/
     && VPOITM03.XQACD == PC07W01.XQACD       /* Quality code*/
     && VPOITM03.PC2INSEG == PC07W01.PC2INSEG /* ISEG code*/
     && VPOITM03.XPGCD == PC07W01.XPGCD       /* Pack. type code*/
     && VPOITM03.PC6PLAN == PC07W01.PC6PLAN   
     && PC07W01.PC07WEOF == "N") /* ===> not EOF for item cursor*/

      PC07141(); /* ===> Select unique size row*/

      PC07143(); /* ===> accumulate total value and build*/
                                   /* templete*/

      PC07S26(); /* ===> save item row before the Driving*/
                                   /* read*/

      PC07130(); /* ===> Select next item row (Driving*/
                                   /* read)*/

    end


    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/

    PC07W01.PC07WPRE = 0; /* Set previous price to zero*/
    PC07W01.PC07WPDX = 1; /* FOB price index*/

    /* ------------------------------------------------------------*/
       /* Now process the FOB Price templete and build size ranges*/
       /* using a control break on the templetes prices.*/
    /* ------------------------------------------------------------*/

    PC07144(); /* Get size range for color*/

    /* ------------------------------------------------------------*/
       /* Set-up for next color within style*/
    /* ------------------------------------------------------------*/

    if (PC07W01.PC07WEOF == "N") /* ===> not EOF for item cursor*/
      PC07W01.PC07WPCL = VPOITM03.SY2CLRID; /* Same color*/
      PC07W01.XDMCD = VPOITM03.XDMCD; /* Dim. code*/
      PC07W01.XQACD = VPOITM03.XQACD; /* Quality code*/
      PC07W01.PC2INSEG = VPOITM03.PC2INSEG; /* ISEG code*/
      PC07W01.XPGCD = VPOITM03.XPGCD; /* Pack. type code*/
      PC07W01.PC6PLAN = VPOITM03.PC6PLAN;
    end

  else
    if (PG3REC.PG3RETCD == "09") /* Data in use by someone else*/
      converseLib.validationFailed(11); /* Deadlock*/
    else
      converseLib.validationFailed(10); /* Unexpected error*/
    end
    PC07M001.XXXPRCNM = "PC07142"; /* Process name*/
    exit stack; /* Return to Display message*/
  end


end // end PC07142

// Process sizes
Function PC07143()

   /* ------------------------------------------------------------*/
     /* This module will create a breakdown of sizes and prices*/
     /* for a single color in PC07W01*/
   /* ------------------------------------------------------------*/

  PC07W01.PC07WPCX = 1; /* ; set price(size) index to 1*/
  while (PC07W01.PC07WPCX <= 40 /* ; increment the index until*/
   && VPOSIZ02.PC7ORDEQ[PC07WPCX] == 0) /* get to a bucket with a*/
    PC07W01.PC07WPCX = PC07W01.PC07WPCX + 1; /* quantity*/
  end
  if (PC07W01.PC07WPCX <= 40) /* ; If not at end of sizes*/
    if (VPOSIZ02.PC7FOBFL[PC07WPCX] == "Y" /* set up the price in w/s*/
     && PC07W01.PC07MPHD == "PO-FOB")     
      PC07W01.PC07WFOB = VPOSIZ02.FY4FOBPR[PC07WPCX];
    else
      if (PC07W01.PC07MPHD == "FY-FOB")
        PC07W01.PC07WFOB = PCOREC.FY4FOBPR[PC07WPCX];
      else
        PC07W01.PC07WFOB = VPOSIZ02.FY4FOBPR[PC07WPCX];
      end
    end
    PC07W01.PC07WSDX = 1; /* ; set w/s index to 1*/
    PC07W01.PC07WPRE = PC07W01.PC07WFOB;
    PC07W01.PC07WPFL = VPOSIZ02.PC7FOBFL[PC07WPCX];


    while (PC07W01.PC07WPCX <= 40) /* ; while there are size buckets*/
      if (VPOSIZ02.PC7ORDEQ[PC07WPCX] > 0)
                                   /* ; if quantity greater than zero*/
        PC07147(); /* ; process the size*/
      end
      PC07W01.PC07WPCX = PC07W01.PC07WPCX + 1; /* increment size index*/
      if (PC07W01.PC07WPCX <= 40) /* ; if more size buckets*/
        if (VPOSIZ02.PC7FOBFL[PC07WPCX] == "Y" /* format price in w/s*/
         && PC07W01.PC07MPHD == "PO-FOB")     
          PC07W01.PC07WFOB = VPOSIZ02.FY4FOBPR[PC07WPCX];
        else
          if (PC07W01.PC07MPHD == "FY-FOB")
            PC07W01.PC07WFOB = PCOREC.FY4FOBPR[PC07WPCX];
          else
            PC07W01.PC07WFOB = VPOSIZ02.FY4FOBPR[PC07WPCX];
          end
        end
      else /* ; load last valid values*/
        PC07W01.PC07WVRD[PC07WSDX] = PC07W01.PC07WPRE;
        PC07W01.PC07WVRF[PC07WSDX] = PC07W01.PC07WPFL;
      end
    end /* ; add to style total*/
    PC07W01.PC07WITL = PC07W01.PC07WITL + PC07W01.PC07WAMT;
  end
end // end PC07143

// find first size
Function PC07144()


  PC07W01.PC07WCDX = PC07W01.PC07WCDX + 1; /* Add 1 to line index*/
  PC07W01.PC07WTDX = 1; /* Total index*/

   /* ------------------------------------------------------------*/
     /* This module will load values derived from the price*/
     /* table in pc07w143 and load them into the screen image*/
   /* ------------------------------------------------------------*/


  while (PC07W01.PC07WPDX <= 40
   && PC07W01.PC07WVRQ[PC07WPDX] != 0)

    /* ------------------------------------------------------*/
      /* Load the display record with detail information*/
      /* relevent to a particular color*/
    /* ------------------------------------------------------*/

    PC07W03.SY2CLRID[PC07WCDX] = PC07W06.SY2CLRID; /* Color*/
    PC07W03.XDMCD[PC07WCDX] = PC07W06.XDMCD; /* Dim. code*/
    PC07W03.XQACD[PC07WCDX] = PC07W06.XQACD; /* Quality code*/
    PC07W03.PC2INSEG[PC07WCDX] = PC07W06.PC2INSEG; /* Spec. Dif code*/
    PC07W03.XPGCD[PC07WCDX] = PC07W06.XPGCD; /* Pack. type code*/
    PC07W03.PC6PLAN[PC07WCDX] = PC07W06.PC6PLAN;
    PC07W03.PC07MAMT[PC07WCDX] = PC07W01.PC07WAMT; /* color amount*/
    PC07W03.PC7ORDEQ[PC07WCDX] = PC07W01.PC07WQTY; /* color quantity*/

    PC07W03.FY4FOBPR[PC07WCDX] = PC07W01.PC07WVRD[PC07WPDX];
    PC07W03.PC07WOVR[PC07WCDX] = PC07W01.PC07WVRF[PC07WPDX];
    PC07W03.PC07MESZ[PC07WCDX] = PC07W01.PC07MESZ[PC07WPDX];
    if (PC07W01.PC07MBSZ[PC07WPDX] != PC07W01.PC07MESZ[PC07WPDX])
      PC07W03.PC07MDSH[PC07WCDX] = "-";
      PC07W03.PC07MBSZ[PC07WCDX] = PC07W01.PC07MBSZ[PC07WPDX];
    end
    PC07W01.PC07WPDX = PC07W01.PC07WPDX + 1;
    if (PC07W01.PC07WPDX <= 40)
      PC07W01.PC07WCDX = PC07W01.PC07WCDX + 1; /* Add 1 to line index*/
    end

  end /* ===>while PC07W01.PC07WPDX NE 40;*/


end // end PC07144

// Accumulate size data
Function PC07147()
  if (VPOSIZ02.PC7FOBFL[PC07WPCX] != PC07W01.PC07WPFL /* If flag changed*/
   || PC07W01.PC07WFOB != PC07W01.PC07WPRE)           /* ; or price changed*/
          /* ; load prev values to w/s*/
    PC07W01.PC07WVRF[PC07WSDX] = PC07W01.PC07WPFL;
    PC07W01.PC07WVRD[PC07WSDX] = PC07W01.PC07WPRE;
    PC07W01.PC07WSDX = PC07W01.PC07WSDX + 1; /* ; increment w/s index*/
    PC07W01.PC07WPFL = VPOSIZ02.PC7FOBFL[PC07WPCX]; /* save new flag*/
    PC07W01.PC07WPRE = PC07W01.PC07WFOB; /* ; save new price*/
  end
  if (PC07W01.PC07MBSZ[PC07WSDX] == "     ") /* ; low size not valued*/
    PC07W01.PC07MBSZ[PC07WSDX] = PG3REC.SY4IDDSC[PC07WPCX];
    PC07W01.PC07BSZV = PC07W01.PC07WPCX;
    PC07W01.PC07ESZV = PC07W01.PC07WPCX;
  end
  if (PC07W01.PC07WPCX < PC07W01.PC07BSZV)
    PC07W01.PC07MBSZ[PC07WSDX] = PG3REC.SY4IDDSC[PC07WPCX];
    PC07W01.PC07BSZV = PC07W01.PC07WPCX;
  end
      /* ; save largest size so far*/
  if (PC07W01.PC07WPCX > PC07W01.PC07ESZV)
    PC07W01.PC07MESZ[PC07WSDX] = PG3REC.SY4IDDSC[PC07WPCX];
    PC07W01.PC07ESZV = PC07W01.PC07WPCX;
  end
      /* ; save quantity*/
  PC07W01.PC07WVRQ[PC07WSDX] = VPOSIZ02.PC7ORDEQ[PC07WPCX];
      /* ; accumulate to color*/
  PC07W01.PC07WQTY = PC07W01.PC07WQTY + VPOSIZ02.PC7ORDEQ[PC07WPCX];
  PC07W01.PC07WAMW = VPOSIZ02.PC7ORDEQ[PC07WPCX] * PC07W01.PC07WFOB;
  PC07W01.PC07WAMT = PC07W01.PC07WAMT + PC07W01.PC07WAMW;
end // end PC07147

// FORMAT AND DISPLAY THE MAP
Function PC07200()

   /* ------------------------------------------------------------*/
   /* If no hard errors to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No information message*/
    set PC07M001 initial; /* Clear map*/

    PC07210(); /* Format the selected data*/

  else

    set PC07M001 alarm; /* Indicate sound alarm*/

  end

   /* ------------------------------------------------------------*/
   /* Move the header information to the map.*/
   /* ------------------------------------------------------------*/
  PC07S11(); /* get region desc*/
  PC07M001.PO-REG-CD = PC07W01.PO-REG-CD; /* p.o. region*/
  PC07M001.PO-REG-DESC = VPOREG01.PO-REG-DESC; /* p.o. region desc*/

  PC07M001.SY1STNBR = PC07W01.SY1STNBR; /* Move fields back*/
  PC07M001.PC3PONBR = PC07W01.PC3PONBR; /* p.o. number*/
  PC07M001.PC07MTOT = PC07W01.PC07WTOT; /* Total cost for style*/
  PC07M001.PC4ORTYP = PC07W01.PC4ORTYP; /* P.O. type*/
  PC07M001.PC4SDESC = PC07W01.PC4SDESC; /* P.O. type desc.*/

  PC07M001.PC07MSNY = PC07W01.PCFSECD; /* P.O. ID season year*/
  PC07M001.PC07MSBM = PC07W01.PC07WBMM; /* P.O. ID buy month*/
  PC07M001.PC07MSDM = PC07W01.PC07WDMM; /* P.O. ID del. month*/
  PC07M001.FY1FCTYC = PC07W01.FY1FCTYC; /* P.O. ID factory code*/

  PC07M001.SY1SSTNM = PC07W01.SY1SSTNM; /* Move in short name*/
  PC07M001.PC07MEDT = PC07W01.PC07WEDT; /* Move in entry date*/

  PC07M001.XGPCD = PC07W01.XGPCD; /* GPC Number*/


  PC07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse PC07M001 ;

end // end PC07200

// FORMAT THE SELECTED DATA
Function PC07210()

   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  PC07W01.PC07WPCL = " "; /* Previous color*/

  if (PC07W01.TA5TSQIX == 0) /* No data to display*/
    set PC07M001.CATOAP cursor, bold; /* Set cursor at style number*/

        /* NEXT SENTENCE*/

  else

    PC07S10(); /* Obtain temporary storage page*/

    set PC07M001.PC07MPGL skip; /* Display "PAGE" literal*/
    set PC07M001.PC07MOFL skip; /* Display "OF" literal*/

    PC07M001.PC07MTSP = PC07W01.PC07MTSP; /* Current page num*/
    set PC07M001.PC07MTSP skip; /* Shows current page nu*/
    PC07M001.TA5TSQIX = PC07W01.TA5TSQIX; /* Highest page num*/
    set PC07M001.TA5TSQIX skip; /* Shows highest page nu*/
    PC07M001.PC07MPHD = PC07W01.PC07MPHD;

    /* ------------------------------------------------------------*/
      /* THIS FORMAT LOOP WILL HANDLE A CONTROL BREAK WHEN A NEW*/
      /* COLOR IS PRESENT.  WHEN A PAGE CHANGE OCCURS THE COMPLETE*/
      /* LINE WILL BE SHOWN.*/
    /* ------------------------------------------------------------*/

    PC07W01.PC07WMDX = 1; /* Initialize line index*/

    while (PC07W01.PC07WMDX <= 13) /* Until end of lines*/

      if (PC07W02.SY2CLRID[PC07WMDX] > " ") /* Color*/


        PC07211(); /* Form first line for color*/


        /* ----------------------------------------------------*/
         /* MOVE BEGINING SIZE TO MAP*/
        /* ----------------------------------------------------*/

        if (PC07W02.PC07MBSZ[PC07WMDX] > " ")
          PC07M001.PC07MBSZ[PC07WMDX] = PC07W02.PC07MBSZ[PC07WMDX];
          PC07M001.PC07MDSH[PC07WMDX] = "-"; /* Display dash*/
        else
          set PC07M001.PC07MDSH[PC07WMDX] initialAttributes; /* Don't display dash*/
        end

        /* ----------------------------------------------------*/
         /* MOVE ENDING SIZE TO MAP AND THE FOB PRICE*/
        /* ----------------------------------------------------*/


        if (PC07W02.PC07MESZ[PC07WMDX] > " ")
          PC07M001.PC07MESZ[PC07WMDX] = PC07W02.PC07MESZ[PC07WMDX];
        else
          PC07M001.PC07MESZ[PC07WMDX] = PC07W02.PC07MBSZ[PC07WMDX];
        end
        PC07M001.FY4FOBPR[PC07WMDX] = PC07W02.FY4FOBPR[PC07WMDX];
        if (PC07W02.PC07WOVR[PC07WMDX] == "Y" /* Price is overriden*/
         && PC07W01.PC07MPHD == "PO-FOB")    
          set PC07M001.FY4FOBPR[PC07WMDX] bold; /* Highlight price*/
        end

        /* ------------------------------------------------*/
          /* THIS PART OF THE LOOP WILL SHOW THE SIZE RANGE*/
          /* FOR THE FOB PRICE PRESENT.*/
        /* ------------------------------------------------*/

        if (PC07W02.PC07MBSZ[PC07WMDX] > " "
         && PC07W02.PC07MESZ[PC07WMDX] > " ")
          PC07M001.PC07MBSZ[PC07WMDX] = PC07W02.PC07MBSZ[PC07WMDX];
          set PC07M001.PC07MDSH[PC07WMDX] skip; /* Display dash*/
          PC07M001.PC07MESZ[PC07WMDX] = PC07W02.PC07MESZ[PC07WMDX];
          PC07M001.FY4FOBPR[PC07WMDX] = PC07W02.FY4FOBPR[PC07WMDX];

        else

          /* ------------------------------------------------------------*/
            /* THIS PART OF THE LOOP WILL BLANK OUT THE DASH IF ONLY*/
            /* ONE SIZE IS PRESENT.*/
          /* ------------------------------------------------------------*/

          if (PC07W02.PC07MBSZ[PC07WMDX] == " "
           && PC07W02.PC07MESZ[PC07WMDX] > " ")
            set PC07M001.PC07MDSH[PC07WMDX] initialAttributes;
            PC07M001.PC07MESZ[PC07WMDX] = PC07W02.PC07MESZ[PC07WMDX];
            PC07M001.FY4FOBPR[PC07WMDX] = PC07W02.FY4FOBPR[PC07WMDX];

          end
        end

      else
        PC07W01.PC07WMDX = 14; /* Get out of loop*/
      end

      if (PC07W01.PC07WMDX <= 13) /* Still in loop*/

        PC07W01.PC07WMDX = PC07W01.PC07WMDX + 1; /* Increment line index*/

      end
    end
  end


end // end PC07210

// FORM CONTROL BREAK LINE
Function PC07211()

   /* ------------------------------------------------------------*/
   /* FORM THE CONTROL BREAK LINE.*/
   /* ------------------------------------------------------------*/


  if (PC07W02.SY2CLRID[PC07WMDX] != PC07W01.PC07WPCL /* Previous color*/
   || PC07W02.XDMCD[PC07WMDX] != PC07W01.XDMCD       /* Dim cd*/
   || PC07W02.XQACD[PC07WMDX] != PC07W01.XQACD       /* QA*/
   || PC07W02.PC2INSEG[PC07WMDX] != PC07W01.PC2INSEG /* Spec.*/
   || PC07W02.XPGCD[PC07WMDX] != PC07W01.XPGCD       /* Pack.*/
   || PC07W02.PC6PLAN[PC07WMDX] != PC07W01.PC6PLAN   
   || PC07W01.PC07WMDX == 1)                         /* First line on page*/
    PC07W01.PC07WPCL = PC07W02.SY2CLRID[PC07WMDX]; /* Previous col*/
    PC07M001.SY2CLRID[PC07WMDX] = PC07W02.SY2CLRID[PC07WMDX];
                                   /* Color*/

    /* ----------------------------------------------*/
     /* ACCESS THE PC2REC AND MOVE COLOR ABRV. TO MAP*/
    /* ----------------------------------------------*/

    PG2REC.XGPCD = PC07W01.XGPCD; /* Gpc code*/
    PG2REC.SY2CLRID = PC07W02.SY2CLRID[PC07WMDX]; /* Color code*/
    PG2REC.SY1STNBR = PC07W01.SY1STNBR; /* Style code*/


    XSPG202(); /* STYLE NAME AND COLOR NAME LOOK_UP*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Good return*/
      PC07M001.SY2CLRAB[PC07WMDX] = PG2REC.SY2CLRAB; /* Color abrev.*/
    else
      PC07M001.SY2CLRAB[PC07WMDX] = "NOT FOUND"; /* Color abrev.*/
    end


    PC07M001.XDMCD[PC07WMDX] = PC07W02.XDMCD[PC07WMDX]; /* Dim cd*/
    PC07M001.XQACD[PC07WMDX] = PC07W02.XQACD[PC07WMDX]; /* QA*/
    PC07M001.PC2INSEG[PC07WMDX] = PC07W02.PC2INSEG[PC07WMDX];
                                   /* Spec.*/
    PC07M001.XPGCD[PC07WMDX] = PC07W02.XPGCD[PC07WMDX]; /* Pack.*/

    PC07W01.XDMCD = PC07W02.XDMCD[PC07WMDX]; /* Dim cd*/
    PC07W01.XQACD = PC07W02.XQACD[PC07WMDX]; /* QA*/
    PC07W01.PC2INSEG = PC07W02.PC2INSEG[PC07WMDX]; /* Spec.*/
    PC07W01.XPGCD = PC07W02.XPGCD[PC07WMDX]; /* Pack. code*/
    PC07W01.PC6PLAN = PC07W02.PC6PLAN[PC07WMDX];

    /* ----------------------------------------------------*/
     /* MOVE TOTAL QUANTITY AND DOLLAR AMOUNT TO MAP*/
    /* ----------------------------------------------------*/

    PC07M001.PC7ORDEQ[PC07WMDX] = PC07W02.PC7ORDEQ[PC07WMDX];
    PC07M001.PC07MAMT[PC07WMDX] = PC07W02.PC07MAMT[PC07WMDX];

  end


end // end PC07211

// CHECK ATTENTION IDENTIFIERS
Function PC07300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC07M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC07S05(); /* Purge any temporary storage*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PC07M001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC07M001.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    end

    set PC07M001.CATOAP cursor, bold; /* Highlight*/
    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    PC07S05(); /* Purge temp. storage*/

    XSPCS01(); /* Exit to another application*/

    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0U"; /* Set pc0u to the to app.*/

    PC07S05(); /* Purge temp. storage*/

    XSPCS01(); /* Exit to another application*/

    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf19) /* PF19 was pressed*/

    COMMAREA.CATOAP = PCWREC.CAFROMAP[1]; /* Set pc0u to the to app.*/

    XSPCS01(); /* Exit to another application*/


    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/

    PC07S05(); /* Purge temp. storage*/

    XSPCS01(); /* Exit to another application*/

    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    PC07W01.PC07WSWR = "Y"; /* Request data switch*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* PF8 was not pressed*/

    PC07M001.XXXPRCNM = "PC07130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC07300

// RESET THE HIGHLIGHTED FIELDS
Function PC07400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/


  set PC07M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC07M001.CAITEM initialAttributes; /* Commarea application data*/


end // end PC07400

// VERIFY THE ENTERED DATA
Function PC07500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC07M001.CAITEM > " ") /* Application data was entered*/

    set PC07M001.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC07M001.XXXPRCNM = "PC07500"; /* Process name*/

  else

    PC07510(); /* Verify scroll request*/

  end

end // end PC07500

// ADJUST THE PAGE
Function PC07510()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PC07W01.PC07MTSP <= 1) /* and no previous pages*/
      PC07M001.XXXPRCNM = "PC07510"; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    else
      PC07W01.PC07MTSP = PC07W01.PC07MTSP - 1; /* Decrement page number*/
    end
  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PC07W01.PC07MTSP >= PC07W01.TA5TSQIX) /* and no more pages*/
      PC07M001.XXXPRCNM = "PC07510"; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    else
      PC07W01.PC07MTSP = PC07W01.PC07MTSP + 1; /* Increment page number*/
    end
  end


end // end PC07510

// GET INFO. FROM PC3REC
Function PC07S02()

   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC07S02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC07M001.XXXPRCNM = "PC07S02"; /* Process name*/


  exit stack; /* Exit to redisplay map*/


end // end PC07S02

// SWITCH THE ENTERED BY DATE
Function PC07S03()

   /* ------------------------------------------------------------*/
   /* SWITCH DATE AROUND*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = PC07W01.PC3CRDT; /* Move in date*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
    PC07W01.PC07WEDT = TA2REC.TA2GRGAN; /* mm/dd/yy*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC07"; /* Process name*/
    TA1REC.TA1LOC = "PC07S03 SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC07M001.XXXPRCNM = "PC07S03"; /* Process name*/

  end


end // end PC07S03

// GET PO TYPE INFORMATION
Function PC07S04()

   /* ------------------------------------------------------------*/
   /* Select a unique p.o. type row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC07"; /* Program name*/
  TA1REC.TA1LOC = "PC07S04 SELECT UNIQUE P.O. TYPE ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC07M001.XXXPRCNM = "PC07S04"; /* Process name*/


  exit stack; /* Exit to redisplay map*/


end // end PC07S04

// PURGE ANY TEMP. STORAGE
Function PC07S05()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PC07"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No Error was found*/
    PC07W01.PC07MTSP = 0; /* Reset current page number*/
    PC07W01.TA5TSQIX = 0; /* Reset highest page number*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    converseLib.validationFailed(10); /* System error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PC07S05"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC07M001"; /* Map name*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();

  end


end // end PC07S05

// P.O. ITEM ROW ROUTINE
Function PC07S06()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Depending upon the function passed to the p.o. passing rec*/

   /* If S8 select the set of p.o. item rows*/
   /* If N8 select the next p.o. item row*/
   /* If C8 close the p.o. item row set*/

   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/


  if (sysVar.errorCode == "00000000") /* Call sucessful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to pc07113*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to pc07113*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC07S06"; /* Process name*/
  TA1REC.TA1LOC = "FETCH SELECTED P.O. ITEM ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table view key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  PC07M001.XXXPRCNM = "PC07S06"; /* Process name*/


  exit stack; /* Exit to redisplay map*/


end // end PC07S06

// ADD LINES TO TEMP. STORAGE
Function PC07S07()

   /* ------------------------------------------------------------*/
    /* ADD LINES TO THE TEMP. STORAGE PAGE*/
    /* MOVE THE COLOR LINE TO THE PAGE LINE UNTIL YOU ARE OUT OF*/
    /* COLOR ROWS*/
   /* ------------------------------------------------------------*/

  PC07W01.PC07WCDX = 1; /* Move 1 to color index*/

  while (PC07W03.SY2CLRID[PC07WCDX] > " ") /* Something on line*/

    PC07W02.PC07WLIN[PC07WMDX] = PC07W03.PC07WLIN[PC07WCDX]; /* Page line*/

    if (PC07W01.PC07WMDX == 13) /* Page is full*/

      PC07S08(); /* Add page to temporary storage*/

      PC07W01.PC07WMDX = 0; /* Move 0 to line index*/

    end

    PC07W01.PC07WCDX = PC07W01.PC07WCDX + 1; /* Add 1 to color index*/
    PC07W01.PC07WMDX = PC07W01.PC07WMDX + 1; /* Add 1 to line index*/

  end

  PC07W01.PC07WCDX = 0; /* RESET color index to 1*/
  set PC07W03 empty; /* Clear color record*/


end // end PC07S07

// ADD A PAGE TO TEMP. STORAGE
Function PC07S08()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC07W02.PC07WLEN = 676; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC07"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  TA5REC.TA5TSQIX = 0; /* Record index*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (PC07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/
    PC07W01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    set PC07W02 empty; /* Clears temporary storage record*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC07S08"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC07M001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PC07M001.XXXPRCNM = "PC07S08"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end PC07S08

// fetch the p.o. size row
Function PC07S09()

   /* ------------------------------------------------------------*/
   /* Select the set of p.o. size rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/


  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to pc0713c*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC07S09"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. DEST. SIZE PLAN ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC07M001.XXXPRCNM = "PC07S09"; /* Process name*/


  exit stack; /* Exit to redisplay map*/


end // end PC07S09

// OBTAIN TEMP. STORAGE PAGE
Function PC07S10()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC07W02.PC07WLEN = 676; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC07"; /* Application identification*/
  TA5REC.TA5TSQIX = PC07W01.PC07MTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  TA5REC.TA5RTNCD = 0; /* Return code*/

  try
    call "TA0050" (PC07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Sucessful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

     /* Next Sentence*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC07S10"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC07M001"; /* Map name*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    PC07M001.XXXPRCNM = "PC07S10"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end PC07S10

// Select unique from VPOREG01
Function PC07S11()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOREG01 empty; /* Row storage area*/

  VPOREG01.XGPCD = PC07W01.XGPCD; /* GPC*/
  VPOREG01.PO-REG-CD = PC07W01.PO-REG-CD; /* Region*/

   /* ------------------------------------------------------------*/
   /* Select row from DPRODC.VPOREG01 to get desc.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOREG01" ("S ", SQLCA, VPOREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the row is not found, send error message.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, display an error message.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC07M001.XXXPRCNM = "PC07S11"; /* Module name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC07M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program name*/
  TA1REC.TA1PGMNM = "PC07S11"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOREG01.VPOREG01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC07S11

// Save Row PC6REC to PC07W06
Function PC07S26()
   /* ----------------------------------------------------------*/
    /* Save copy of the  item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC07W06 and is a mirror image of the PC6REC.*/
   /* ----------------------------------------------------------*/

  PC07W06.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  PC07W06.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  PC07W06.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/
  PC07W06.PC6ITMNB = VPOITM03.PC6ITMNB;
  PC07W06.PC3POIDT = VPOITM03.PC3POIDT;
  PC07W06.PCFSECD = VPOITM03.PCFSECD;
  PC07W06.FY1FCTYC = VPOITM03.FY1FCTYC;
  PC07W06.XCTCD = VPOITM03.XCTCD;
  PC07W06.SY1STNBR = VPOITM03.SY1STNBR;
  PC07W06.SY2CLRID = VPOITM03.SY2CLRID;
  PC07W06.XDMCD = VPOITM03.XDMCD;
  PC07W06.XQACD = VPOITM03.XQACD;
  PC07W06.XOWCD = VPOITM03.XOWCD;
  PC07W06.PC2INSEG = VPOITM03.PC2INSEG;
  PC07W06.XPGCD = VPOITM03.XPGCD;
  PC07W06.XUMCD = VPOITM03.XUMCD;
  PC07W06.PC6ETSDT = VPOITM03.PC6ETSDT;
  PC07W06.PC6OETS = VPOITM03.PC6OETS;
  PC07W06.PC6RTADT = VPOITM03.PC6RTADT;
  PC07W06.YMTCD = VPOITM03.YMTCD;
  PC07W06.PC6CXNBR = VPOITM03.PC6CXNBR;
  PC07W06.PC6PLAN = VPOITM03.PC6PLAN;
  PC07W06.XPLCD = VPOITM03.XPLCD;
  PC07W06.XPRCD = VPOITM03.XPRCD;
  PC07W06.XPCCD = VPOITM03.XPCCD;
  PC07W06.SYBSTGNB = VPOITM03.SYBSTGNB;
  PC07W06.XGACD = VPOITM03.XGACD;
  PC07W06.PG1SC4CD = VPOITM03.PG1SC4CD;
  PC07W06.PC6CLVAR = VPOITM03.PC6CLVAR;
  PC07W06.XWHCD = VPOITM03.XWHCD;
  PC07W06.PC2CUXID = VPOITM03.PC2CUXID;
  PC07W06.YSMXDV = VPOITM03.YSMXDV;
  PC07W06.PC6XCTCD = VPOITM03.PC6XCTCD;
  PC07W06.OP1CUPO = VPOITM03.OP1CUPO;
  PC07W06.OP1PARTN = VPOITM03.OP1PARTN;
  PC07W06.OP1CUOID = VPOITM03.OP1CUOID;
  PC07W06.OP1NORID = VPOITM03.OP1NORID;
  PC07W06.PC4ORTYP = VPOITM03.PC4ORTYP;
  PC07W06.PC61TMSH = VPOITM03.PC61TMSH;
  PC07W06.XDSCD = VPOITM03.XDSCD;
  PC07W06.PC6STAT = VPOITM03.PC6STAT;
  PC07W06.PC6AIRNB = VPOITM03.PC6AIRNB;
  PC07W06.PC6AIRDT = VPOITM03.PC6AIRDT;
  PC07W06.PC6NILRF = VPOITM03.PC6NILRF;
  PC07W06.YOHCD = VPOITM03.YOHCD;
  PC07W06.PC3SIFL = VPOITM03.PC3SIFL;
  PC07W06.PC6SZAVL = VPOITM03.PC6SZAVL;
  PC07W06.PC6CONNO = VPOITM03.PC6CONNO;
  PC07W06.PC6PETS = VPOITM03.PC6PETS;
  PC07W06.PC6OETAL = VPOITM03.PC6OETAL;
  PC07W06.PC6ETALF = VPOITM03.PC6ETALF;
  PC07W06.PC6MICHG = VPOITM03.PC6MICHG;
  PC07W06.PC6TORIG = VPOITM03.PC6TORIG;
  PC07W06.PC6TORDE = VPOITM03.PC6TORDE;
  PC07W06.PC6TADD = VPOITM03.PC6TADD;
  PC07W06.PC6TCNCL = VPOITM03.PC6TCNCL;
  PC07W06.PC6PREFL = VPOITM03.PC6PREFL;
  PC07W06.XXXUSRID = VPOITM03.XXXUSRID;
  PC07W06.ZZZSDT = VPOITM03.ZZZSDT;
  PC07W06.ZZZCHGDT = VPOITM03.ZZZCHGDT;
  PC07W06.ZZZCHGTM = VPOITM03.ZZZCHGTM;
  PC07W06.ZZZCHGCT = VPOITM03.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PC07S26 ***********************/
end // end PC07S26

//*** RECORD=PC07W01 ****
// ************************************************************
// *
// *       MAIN WORKING STORAGE RECORD FOR THE
// *       P.O. INQUIRY--FOB PRICE APPLICATION
// *
// ************************************************************
// ***********************
Record PC07W01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC07WIOD PC07WIOD ; 
    15 PC07WCCY PC07WCCY ; 
    15 PC07WBMM PC07WBMM ; 
    15 PC07WDMM PC07WDMM ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC07MPHD PC07MPHD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC3CRDT PC3CRDT ; 
  10 PC07WEDT PC07WEDT ; 
  10 PC07WCRD PC07WCRD ; 
    15 PC07WCYR PC07WCYR ; 
    15 PC07WCMD PC07WCMD ; 
  10 PCFSECD PCFSECD ; 
  10 PCFSEYR PCFSEYR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XSECD XSECD ; 
  10 PC07WEOF PC07WEOF ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PC07MTSP PC07MTSP ; 
  10 PC07WPCL PC07WPCL ; 
  10 PC07WPRE PC07WPRE ; 
  10 PC07WPFL PC07WPFL ; 
  10 PC07WPSZ PC07WPSZ ; 
  10 PC07WCDX PC07WCDX ; 
  10 PC07WPDX PC07WPDX ; 
  10 PC07WSDX PC07WSDX ; 
  10 PC07WMDX PC07WMDX ; 
  10 PC07WTDX PC07WTDX ; 
  10 PC07WPCX PC07WPCX ; 
  10 PC07WSWR PC07WSWR ; 
  10 PC6ITMNB PC6ITMNB ; 
  10 PC07WTOT PC07WTOT [40] ; 
  10 PC07WMCH PC07WMCH [40] ; 
  10 PC07WITL PC07WITL ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 PC07WQTY PC07WQTY ; 
  10 PC07WAMT PC07WAMT ; 
  10 PC07WAMW PC07WAMW ; 
  10 PC07WFOB PC07WFOB ; 
  10 PC07WQT PC07WQT ; 
  10 PC07MESZ PC07MESZ [40] ; 
  10 PC07MBSZ PC07MBSZ [40] ; 
  10 PC07WVRQ PC07WVRQ [40] ; 
  10 PC07WVRD PC07WVRD [40] ; 
  10 PC07WVRF PC07WVRF [40] ; 
  10 PC07BSZV PC07BSZV ; 
  10 PC07ESZV PC07ESZV ; 
  10 PC6PLAN PC6PLAN ; 
end // end PC07W01

//*** RECORD=PC07W02 ****
// ************************************************************
// *     DISPLAY LINE RECORD FOR P.O. INQUIRY--FOB PRICE
// *
// ************************************************************
// ***********************
Record PC07W02 type basicRecord
  10 PC07WLEN PC07WLEN ; 
  10 PC07WLIN PC07WLIN [13] ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 PC7ORDEQ PC7ORDEQ ; 
    15 PC07MBSZ PC07MBSZ ; 
    15 PC07MDSH PC07MDSH ; 
    15 PC07MESZ PC07MESZ ; 
    15 FY4FOBPR FY4FOBPR ; 
    15 PC07MAMT PC07MAMT ; 
    15 PC07WOVR PC07WOVR ; 
    15 PC6PLAN PC6PLAN ; 
end // end PC07W02

//*** RECORD=PC07W03 ****
// ************************************************************
// *
// *  THIS RECORD IS USED TO STORE A MAP LINE AND COLLECT THE
// *  TOTALS QUANTITIES AND DOLLAR AMOUNTS FOR FOR EACH COLOR
// *  AND THE FOB SIZE RANGE. BECAUSE THERE IS A POSSIBILITY
// *  OF HAVING 40 DIFFERENT PRICES AND THEREFORE 40 ROW THIS
// *  RECORD HAS AN OCCURS CLAUSE OF 40.  THIS RECORD IS ALSO
// *  AN EXACT COPY OF THE PC07W02 RECORD, TEMP. STORAGE. THIS
// *  WILL MAKE POSSIBLE OF A GROUP MOVE INSTEAD OF AN FIELD
// *  BY FIELD MOVE WHEN FILLING THE PC07W02 RECORD.
// *
// ************************************************************
// ***********************
Record PC07W03 type basicRecord
  10 PC07WLEN PC07WLEN ; 
  10 PC07WLIN PC07WLIN [40] ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 PC7ORDEQ PC7ORDEQ ; 
    15 PC07MBSZ PC07MBSZ ; 
    15 PC07MDSH PC07MDSH ; 
    15 PC07MESZ PC07MESZ ; 
    15 FY4FOBPR FY4FOBPR ; 
    15 PC07MAMT PC07MAMT ; 
    15 PC07WOVR PC07WOVR ; 
    15 PC6PLAN PC6PLAN ; 
end // end PC07W03

//*** RECORD=PC07W06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM01
// 
//    Record Name:      PC07W06   (----> Mirrors PC6REC )
// 
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PC07W06 type basicRecord
  5 VPOITM03-GROUP VPOITM03-GROUP ; 
    10 VPOITM03-KEY VPOITM03-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 * char(6) ; // ZZ_CHNG_CNT
end // end PC07W06

// prev price  column index
DataItem PC07BSZV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev price  column index
DataItem PC07ESZV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Amount for color
DataItem PC07MAMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Beg. size
DataItem PC07MBSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash
DataItem PC07MDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End. size
DataItem PC07MESZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC07MPHD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map page number
DataItem PC07MTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// color fob price tot amt
DataItem PC07WAMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work amount
DataItem PC07WAMW decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Buy month
DataItem PC07WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CC/YY
DataItem PC07WCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color index
DataItem PC07WCDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working mm/dd
DataItem PC07WCMD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date
DataItem PC07WCRD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working cc/yy
DataItem PC07WCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delivery month
DataItem PC07WDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry date
DataItem PC07WEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of file switch
DataItem PC07WEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working fob price
DataItem PC07WFOB decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. ID working date
DataItem PC07WIOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOTAL DOLLAR AMOUNT FOR STYLE
DataItem PC07WITL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line lenght
DataItem PC07WLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display line
DataItem PC07WLIN char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// accum misc charges amount
DataItem PC07WMCH decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index
DataItem PC07WMDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Override flag
DataItem PC07WOVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous color
DataItem PC07WPCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Price column index
DataItem PC07WPCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fob price index
DataItem PC07WPDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous flag value
DataItem PC07WPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous price
DataItem PC07WPRE decimal(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous size
DataItem PC07WPSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_ON_ORD_QTY (W.S.)
DataItem PC07WQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comp. total quantity
DataItem PC07WQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// starting  price index
DataItem PC07WSDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data flag
DataItem PC07WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem PC07WTDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total dollar amount
DataItem PC07WTOT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB Override templete (price)
DataItem PC07WVRD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB Override templete (flag)
DataItem PC07WVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOB Override templete (QTYs)
DataItem PC07WVRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

