package pc0l;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0L ****
//      THIS PROGRAM WILL ALLOW THE USER TO INQUIRE/MAINTAIN/
// ADD P.O. HEADER INFORMATION.  WHAT THE USERE WILL BE DOING
// IS DETERMINED BY WHERE THEY CAME FROM AND POSSIBLIY WHAT
// THEY WERE DOING LAST. (I.E. IF THE USER XFER'D TO SPECIAL
// INSTRUCTIONS WHILE IN CHANGE MODE, THEN THEY WILL BE PLACED
// BACK IN CHANGE MODE UPON RETURNING TO THIS ALLPICATION, WITH
// THE SAME DATA THAT WAS BEING CHANGED).
// 
//      THIS PROGRAM ALLOWS INQUIRING, ADDING, AND CHANGING OF
// P.O. HEADERS.
// 
//      THE USER MAY ADD NEW ROWS BY ENTERING OPT. 21 FROM THE
// MAIN MENU.  THIS WILL POSITION THEM IN THE ADD SCREEN. ROWS
// CAN THEN BE ADDED (IF ENTRIES PASS EDIT CRITERIA) BY PRESS-
// ING ENTER, PF3, PF5, OR PF13 (SEE PF KEY EDITS).
// 
//      THE USER MAY INQUIRE OR CHANGE EXISTING ROWS BY ENTER-
// ING OPT. 33 FROM THE MAIN MENU.
// 
//      THE USER MAY CHANGE P.O. HEADERS FROM MAP1 BY ENTERING
// THE P.O. NUMBER AND A "C" IN THE SELECTION FIELD.  THIS WILL
// THEN PLACE THEM IN MAP2 IN CHANGE MODE.  CERTAIN FIELDS WILL
// BE PROTECTED AND CAN NOT BE CHANGED.
// 
//      THE USER MAY INQUIRE ON P.O. HEADERS FROM MAP1 BY
// ENTERING THE P.O. NUMBER AND AN "I" IN THE SELECTION FIELD.
// THIS WILL THEN PLACE THEM IN MAP2 IN INQUIRY MODE. ALL THE
// FIELDS WILL BE PROTECTED AND CAN NOT BE CHANGED.
//      WHEN CHANGING THE P.O. HEADER AN AUDIT WILL BE WRITTEN
// FOR CERTAIN FIELDS, DEPENDING UPON GPC CODE.
//      IF AN APPAREL HEADER HAS HAD A CHANGE TO P.O. TYPE
// THE ITEMS ROW(S) THAT ARE CONNECTED TO THE HEADER MIGHT BE
// UPDATED AND HAVE AN AUDIT RECORD WRITTEN OUT FOR THE CHANGED
// ITEM FIELDS.
// 
// ************************************************************
// **                                                        **
// 
//    DATE     NAME   DESCRIPTION OF CHANGE:
//  -------- -------- -----------------------------------------
//  04-27-89  GWITZI  New Application
// 
//  06-13-90  SFORD  - Defaulted "C" for initial map selection
//                      (PC0L110)
//                   - Enhanced appl. to allow the insert of an
//                      incomplete "IN" P.O. Header.
//                      (PC0L420,PC0L423,PC0L430,PC0L440)
// 
//  07-10-90  GAMEN   Edit factory code if blank code returned
//  08-17-90  CHAERT  Move country of origin to fob ship point
//  08-27-90  mchris  Move country of origin to fob ship point
//                    specifically for all foreign factories
//                    and usa factories if for nil destinations
//  09-07-90  mchris  chg to pc0l461 to correct setting of
//                    nissho sent flag.
//  09-17-90  lsutto  allow gpc 07
//  09-27-90  mchris  allow apparel po types of 'to', 'cd', &
//                    'sd' to bypass the xdscd edit and the
//                    po type destination requirement.
// **
//  10-04-90  JGLAZE  Allow apparel PO types of SS and CT to
//                    bypass the XDSCD edit and the PO type
//                    destination requirement.
//  10-15-90  mchris  chg to pc0l461 to set lc det sum fl to
//                    'n' when foreign factory flag = 'y'
//  11-07-90  PPETER  DB2 changes - new fields are PC6PREFL &
//                    XXXUSRID; initialize PC6PREFL to 'N'.
//                    Changes to: PC0LS51,PC0LS58,PC0LW06.
//  11-13-90  mchris  default lc revolve flag to 'n' for apprl.
//  11-14-90  kdenne  chg to pc0lm002,pc0l221,pc0l223,pc0l321,
//                    pc0l323,pc0l340,pc0l350,pc0l362,pc0l421,
//                    pc0l423,pc0l440,pc0l461,pc0ls15,pc0ls17,
//                    pc0lw01 to incorporate nil l/c
//                    percentage. (task # f48).
//  12-20-90  kdenne  db2 changes - to allow cust xref and whse
//                    codes to be display when single dests
//                    exist and flash a message when multiple
//                    dests exist.
//                    changes to: pc0lm002, pc0lw01, pc0l321,
//                                pc0l323, pc0l340.
//                    added: pc0ls40
//            mchris  default po type of 'rp' for gpc 07
//                    changes to: pc0l420.
//  01-14-91  kdenne  db2 changes - to allow 'or' po types to
//                    retrieve data from 1 to 2 years before
//                    the current po id year.
//                    changes to: pc0l143, pc0l454
//  01-15-91  kdenne  db2 changes - fixed bug in pc0l350 and
//                    pc0l354.  wasn't allowing changes to be
//                    made unless po type was changed.
//  01-18-91  kdenne  db2 changes - added logic to handle
//                    owner group and to update the blank
//                    t-shirt available inventory table. this
//                    will occur when po types 'sd' or 'cd's
//                    are either newly created or already
//                    exist.
//  02-19-91  kdenne  db2 changes - added logic to allow
//                    changes to the 'country of origin' field
//  04-22-91  lsutto  make defaults for made-in-ctry, ship-via,
//                    & fob-cntry on non-nil same as nil.
//  05-08-91  chaert  a48 - when retrieving FYPO receipt recs
//                    wildcard owner group. Except when style
//                    is apparel blank, interim or screen good,
//                    use the item's owner group.
//  05-15-91  kdenne  db2 changes - added logic to allow entry
//                    of dom/nil qtys and price values for ftwr
//                    only.  these changes will only appear in
//                    the change screen logic.
//  05-17-91  GAMEN   Add code to treat interim products just
//                    like screened goods.
//  06-10-91  chaert  db2 changes - added logic to load so# to
//                    po item audit, pc0ls53
//  10-08-91  chaert  CHG TO PC0L364 TO RESET PRDCU CODE AFTER
//                    AVAIL INVENTRY LOOKUP.
//  10-09-91  chaert  DB2 CHANGES -
//  11-01-91  lsutto  default l/c rvlr cr flag to NO for QQ typ
//  01-09-92  GAMEN   Remove current year or current year + 1
//                    error message in pc0l143. msg # 392. Just
//                    commented code out.
//  01-22-92  lsutto  chng xppc020 to xppc030 for sopo changes
//  03-02-92  chaert  add logic to pc0l350 for so/po validation
//  04-10-92  chaert  pc0l361, save ship via field
//  06-23-92  lsutto  round b-grade price calc in xspcs04
//  08-17-92  lsutto  dont check blank avail inv on crested T's
//                    or screeners at a foreign fcty (pc0l364)
//  09-16-92  GAMEN   Change xfmcd to xprcd for alt inventory.
//                    pc0l364.
//  09-17-92  GAMEN   When s.o. blanked out during p.o. type
//                    change, remove from database and allow
//                    user to change directly from XD or XI to
//                    an IL. Apparel only.
//  10-22-92  chaert  change to xppc030, balance to ship
//                    add mode of trans.
//  11-02-92  GAMEN   Fix audit size when p.o. changed from
//                    an XL to an IL. Apparel only.
//  11-17-92  GAMEN   Allow changing p.o. type to sd from xd.
//  12-03-92  GAMEN   Add changes for new the crested apparel
//                    and tour p.o. types.
//  01-11-93  DFRANC  Change PC00L-359 TO call IO0440 instead
//                    of IO4150.
//  01-19-93  KSANFO  Add edit for QQ's only, PO ID months can
//                    only be 1 month apart, or equal.
//  05-07-93  dhales  Add error if change "TO" po type
//  06-11-93  KSANFO  Add po type = 'AD'.
//  06-15-93  lsutto  june 93 db2 chg - add crcy to pc7,k, rec
//  06-21-93  chaert  chg select on DORDER.VITEM to SE, pc0l359
//  10-15-93  GAMEN   Add changes for whse 60 and 61.
//  12-03-93  GAMEN   Add ship via logic to change portion
//                    for SD p.o. types only.
//  01-06-94  chaert  change pc0l454, allow po id year on FT
//                    to be cur yr - 1 to cur yr + 1.
//  02-03-94  dhales  change to correctly set nissho sent flag
//                    for foreign fctys with fld office 'eu'
//  02-23-94  dhales  fix range for processing to between 10000
//                    and 300000  pc0l142
//  03-07-94  dhales  db2 changes added field to item and hdr
//                    init fields
//  05-10-94  dhales  type change from dummy to live or live
//                    to dummy should adjust alt po only if
//                    if factory is defined as screener in
//                    customer xref table
//  06-06-94  dhuffm  Add PO order type 'PX'.
//  06-16-94  dhales  type change from dummy to live or live
//                    to dummy should adjust alt po for golf
//                    and crested product
//  08-15-94  GAMEN   Allow 'CD' P.O. Type to change to 'EM'.
//  11-01-94  jjuch   Change to exclude apao po in pc0l142.
//  11-04-94  chaert  Change ship via for us fcty to intl dest.
//                    pc0l362, pc0l461
//  01-25-95  sford   Change s1 pohdr lookup to screen all but.
//                    mvsprod pos
//  12-13-95  jniese  pca312 - Change S.O. edits for apparel.
//  02-19-96  jniese  pca312 - open the so field for apparel.
//  02-26-96  jniese  uncommented code for sales order field,
//                    the code was supposed to go in in 1992
//                    with the sales order project.
//  02-28-96  jniese  pca283 - modify error for transferring
//                    'to' po's.
//  03-20-96  jniese  change shipping inst for 'XI' po's.
//  03-21-96  kgraha  pca322 - Change map to display
//                    Manufacturing Country of Origin and
//                    allow it to be edited. The PO header can
//                    then be updated without any other changes
//                    This is for Apparel only!
//  04-24-96  jniese  pca329 - change ship via for direct ships
//  06-10-96  KGRAHA  PCA310 - change PO type 'MP' to work like
//                    'MD'.
//  07-18-96  jniese  pcy199 - air freight percents
//  08-14-96  KGRAHA  Default PC-XCT-ORIG-CD from XCTCD when
//                    adding a footwear P.O. - PC0L461
//  10-21-96  jniese  change to require so for direct ships
//  12-06-96  jniese  add call to xx0xs01 in pc0ls16 to get
//                    the time.  Audits were being written
//                    with the same update time.
//  01-14-97  kgraha  Move MCO from map only if Apparel in
//                    PC0L362.
//  04-24-97  kgraha  Changed to wait 2 seconds to make sure
//                    timestamps are unique.
//  06-02-97  PHARWO  Changed FOR PO VIEWS - PCA367 - PPR
//                    PROJECT.
//  07-11-97  jniese  PCA367 - PPR corrections
//  08-14-97  DRAMSE  PCA367 - PC0L461 - fixed the problem of
//                    creation of PO records with blank reg cd.
//  11/05/97  kgraha  PCA415 - Add 'MX' po type.
//  12/11/97  vramac  PCA399 - Change 'DIRECT SHIP' to
//                    'DIRECT DELIVERY' in VPOHDR02.PC3SHVIA
//                    for po type 'MM' 'MD' 'DS' 'DC' or 'MP'
//  12/12/97  nfield  Y2K Compliance - changes to PC0L143,
//                    PC0L351, PC0L451, PC0L454.
//  01/07/98  nfield  Y2K Compliance - fixes to changes above
//                    and add fields to PC0LW01.
//  01-30-98  FWILSO  PCA417 - Correct problem where not
//                    reflecting changes of PO type 'in' on IBM
//                    report PC291D (L/C) Amenment details.
//  08/25/98  DRAMSE  CHANGED TO USE VPOHDR03
//  10/20/98  MHUYNH  Generated due to changes to XPPC030
//  10/13/98  RMOHA1  Included PO-LC-PMT-IND in the map and
//                    the code to maintain the field is added.
//  01/27/99  DRAMMO  Fixed the Fcty code validation bug.
//  04/20/99  VSANKA  Fixed  LC total  bug in pc0l461.
//  04/28/99  ATHELA  Created PC0LS46 to fix MCO error
//  05/06/99  TMISHR  Generated for Transportation Team
//  09/07/99  SBUNGO  CHANGED TO USE VIEW VPOITM04
//  10/21/99  drammo  Modified to default bnk-cd to spaces
//                    while inserting into itm tble.
//  02/29/3000 vmatt  Cleaned up vpoitm03
//  02/03/00  SBUNGO  CHANGED TO USE VIEW VFCTY003
//  02/10/00  kgraha  Verify Mail Date is valid for eqiupment
//  03/24/00  SBUNGO  PCF210J CHANGED TO USE VIEW VPOITM05
//  04/05/00  KGRAHA  PCA485 - CHANGE SHIP VIA IN PC0L362 AND
//                    PC0L461.
//  04/10/00  KGRAHA  PCA486 - DEFAULT NAF TO 100% FOR APRL
//                    AF PO'S.
//  04/14/00  rmurth  corrected movement to
//                    pc-rel-pln-ref-nbr of vpoitm05
//  04/24/00  KGRAHA  MODIFY NAF DEFAULT
//  08/08/00  vramac  Changed to maintain non SAP PO#
//  08/13/00  vramac  Allow fast path for inquiry mode
//  09/11/00  KGRAHA  CHANGE SHIP VIA IN PC0L362 & PC0L461 TO
//                    CALL ACS MEXICO CITY.
//  09/11/00  MNADEL  CHANGED TO ADD HEADER IF ALL THE HEADERS
//                    PRESENT BELONG TO SAP FOR FACTORY FOR
//                    A PO ID FOR FT PO TYPE
//  11/05/00  vramac  Changed to allow sap po# maintenance for
//                    gpc '01' ONLY.
//                    for other sap po#, allow only mail date
//                    maintenace - PC0L220, PC0L320, PC0L350
//                                 PC0L460
//  11/30/00  MNADEL  corrected the bug in PC0L460.
//  01/08/01  kkarla  changed to allow print date to be entered
//                    through on line screens,only for gpc '03'
//                    print date can be zero or any valid date.
//                    changed - PC0LW01,PC0L223,PC0L321,PC0L323
//                    ,PC0L340,PC0L350,PC0L353,PC0L362,PC0L363.
//  05/04/01  ATHELA CHANGED TO DISPLAY THE NISSHO SENT DATE
//                    PC0L221,PC0L321,PC0L340,PC0L421,PC0L423,
//                    PC0L440
//  12/03/01  MNADEL  CHANGED TO ADD HEADER IF ALL THE HEADERS
//                    PRESENT BELONG TO SAP FOR FACTORY FOR
//                    A PO ID FOR 'OR' AND 'QQ' PO TYPE.
// 01/08/02  VMATT    Allow only R or space in  PO-LOCR-PMT-IND
//                    FOR FOOTWEAR & Apparel
// 01/11/02  ATHELA   CHANGED TO ALLOW EDITING  PO-LOCR-PMT-IND
//                    EVEN IF THE STATUS IS CL,NC,FC
// *********************
Program PC0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVJREC AVJREC; // record
  AVKREC AVKREC; // record
  AVLREC AVLREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  IN7REC IN7REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC0LW01 PC0LW01; // record
  PC0LW02 PC0LW02; // record
  PC0LW03 PC0LW03; // record
  PC0LW04 PC0LW04; // record
  PC0LW06 PC0LW06; // record
  PC0LW07 PC0LW07; // record
  PC0LW08 PC0LW08; // record
  PC0LW09 PC0LW09; // record
  PC1REC PC1REC; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PCFREC PCFREC; // record
  PCOREC PCOREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR03 VPOHDR03; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use YOHTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use PC0LM.PC0LM001,  // forms
      PC0LM.PC0LM002, 
      PC0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* INITIALIZE WORKING STORAGE, MAP OUTPUT, RECORDS AND DATA*/
     /* ITEMS.*/
     /* FLOW TO CONVERSE THE P.O. HEADER INQUIRY/MAINTENCE/ADD*/
     /* PROCESS.*/
     /* ------------------------------------------------------------*/

    set PC0LW01 empty; /* INITIALIZE WORKING STORAGE*/
    set PC0LW02 empty; /* INITIALIZE P.O. TYPE CLONE*/
    set PC0LW03 empty; /* INITIALIZE WORKING KEY STORAGE*/
    set PC0LW04 empty; /* INITIALIZE HEADER CLONE*/
    set PC0LW06 empty; /* initialize po item save area*/
    set PC0LW07 empty; /* initialize po size save area*/
    set PC0LW09 empty; /* INITIALIZE item array*/
    set PC1REC empty; /* INITIALIZE NUMBER CONTROL DATABASE*/
    set PC2REC empty; /* INITIALIZE CUST. XREF DATABASE*/
    set VPOHDR03 empty; /* INITIALIZE P.O. HEADER DATABASE*/
    set PC4REC empty; /* INITIALIZE P.O. TYPE DATABASE*/
    set VPOITM05 empty; /* INITIALIZE P.O. DEST.ITEM PLAN*/
                                     /* DATABASE*/
    set PCFREC empty; /* INITIALIZE P.O. ID DATABASE*/
    set VPOAHD02 empty; /* INITIALIZE HEADER AUDIT*/
    set VPOAIT02 empty; /* INITIALIZE ITEM AUDIT*/
    set PCYREC empty; /* INITIALIZE IOMOD PASSING RECORD*/
    set PG2REC empty; /* initialize the style prod. record*/
    set IN7REC empty; /* INITIALIZE STOCK TRANS. HEADER DB*/
    set VFCTY003 empty; /* INITIALIZE FACTORY TABLE*/
    set TA1REC empty; /* INITIALIZE ONLINE ERROR ROUTINE*/
    set TAEREC empty; /* INITIALIZE*/
    set SQLCA empty; /* INITIALIZE SQL COMMAREA*/
    set ERRSQLCA empty; /* INITIALIZE SQL COMM. HOLD AREA*/
    set PC0LM001 initial; /* CLEAR MAP 1*/
    set PC0LM002 initial; /* CLEAR MAP 2*/
    set XX0XW01 empty; /* CLEAR*/
    set XX0XW02 empty; /* CLEAR*/
    set XX0XM001 initial; /* CLEAR POP-UP WINDOW MAP*/

    PC0LW01.PC0LWSWR = "N"; /* Set request for data to no*/
    PC0LW01.PC0LWCCF = "N"; /* Set cancel confirm to no*/
    PC0LW01.PC0LWHAC = "N"; /* Set added/changed flag to no*/
    PC0LW01.PC0LWINF = "N"; /* Set error flag*/

     /* ------------------------------------------------------------*/
     /* Get general product code entered if active*/
     /* ------------------------------------------------------------*/

    if (PCWREC.XGPCD > " " /* Something in GPC code field*/
     && PCWREC.XGPCD in XGPTBL.XGPCD) /* Check GPC table*/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        PC0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
        PC0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Desc.*/
        PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
        PC0LM001.XGPCD = PCWREC.XGPCD;
      else
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPDESC = " ";
        converseLib.validationFailed(28); /* Must have valid GPC code*/
        PC0LW01.PC0LWMAP = "1"; /* Set to map 1*/
        PC0LW01.PC0LWFNC = " "; /* Clear function code*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM001.XXXPRCNM = "XPPC001"; /* Process name*/
      end
    else
      set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
      PC0LW01.XGPDESC = " ";
      converseLib.validationFailed(28); /* Must have valid GPC code*/
      PC0LW01.PC0LWMAP = "1"; /* Set to map 1*/
      PC0LW01.PC0LWFNC = " "; /* Clear function code*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      PC0LM001.XXXPRCNM = "XPPC001"; /* Process name*/
    end


    PC0L000: PC0L000();
     /* NO FLOW*/
    PC0L001: PC0L001();
    goto PC0L001;
  end // end main
end // end PC0L

// VERIFY SALES ORDER NUMBER
Function PC0L-355()
    /* ------------------------------------------------------------*/
     /* If sales order number entered, validate it*/
    /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Get PRDCU*/
   /* ------------------------------------------------------------*/

  PC0LS72();

   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  PC0LW01.PC0LW-FRMT-CUST-ORD = PC0LM002.OP1CUOID;
  OP1REC.OP1PARTN = PC0LW01.PC0LW-FRMT-PART-NBR;
  OP1REC.OP1CUOID = PC0LM002.OP1CUOID;
  OP1REC.OP1NORID = PC0LM002.OP1NORID;


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (PC0LM002.PC2CUXID != " ")
        if (PCWREC.XGPCD == "03") /* apparel*/
          if (PC0LM002.PC4ORTYP == "XD"
           || PC0LM002.PC4ORTYP == "XI"
           || PC0LM002.PC4ORTYP == "EM"
           || PC0LM002.PC4ORTYP == "TS"
           || PC0LM002.PC4ORTYP == "MX")
            if (PC2REC.KUCCOID == OP1REC.KUCCOID   /* match cust*/
             && PC2REC.KUMSTRID == OP1REC.KUMSTRID /* numbers*/
             && PC2REC.XNXCD == OP1REC.XNXCD)     
              PC0L-357(); /* ===> is style/clr on the order*/
            else
              converseLib.validationFailed(83); /* ===>Cust number must match*/
              PC0LM002.XXXPRCNM = "PC0L355";
              set PC0LM002.OP1CUOID cursor, bold;
              set PC0LM002.OP1NORID bold;
              PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
            end
          else
            if (PC2REC.KUCCOID == OP1REC.KUCCOID) /* match cust*/
              PC0L-357(); /* ===> is style/clr on the order*/
            else
              converseLib.validationFailed(83); /* ===>Cust number must match*/
              PC0LM002.XXXPRCNM = "PC0L355";
              set PC0LM002.OP1CUOID cursor, bold;
              set PC0LM002.OP1NORID bold;
              PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
            end
          end
        else
          if (PC2REC.KUCCOID == OP1REC.KUCCOID   /* match cust*/
           && PC2REC.KUMSTRID == OP1REC.KUMSTRID /* numbers*/
           && PC2REC.XNXCD == OP1REC.XNXCD)     
            PC0L-357(); /* ===> is style/clr on the order*/
          else
            converseLib.validationFailed(83); /* ===>Cust number must match*/
            PC0LM002.XXXPRCNM = "PC0L355";
            set PC0LM002.OP1CUOID cursor, bold;
            set PC0LM002.OP1NORID bold;
            PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
          end
        end
      else /* NO CUST-XREF ON THIS ITEM*/
        PC0LS73(); /* get prdcu using alternate key*/
      end
      return;
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PC0LM002.OP1CUOID cursor, bold;
      set PC0LM002.OP1NORID bold;
      PC0LM002.XXXPRCNM = "PC0L355";
      converseLib.validationFailed(70);
      PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0LM002.XXXPRCNM = "PC0L355";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC0LM002.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of pc0l355 ***********************/
end // end PC0L-355

// Set up read poitm
Function PC0L-357()
   /* ------------------------------------------------------------*/
   /* Read po items, check for the style on the orders data base*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  VPOITM05.XGPCD = PC0LM002.XGPCD;
   /* MOVE PC0LM002.po-reg-cd TO VPOITM05.po-reg-cd;*/
  VPOITM05.PO-REG-CD = "01";
  VPOITM05.PC3PONBR = PC0LM002.PC3PONBR;
  VPOITM05.SY1STNBR = "*";
  VPOITM05.SY2CLRID = "*";
  VPOITM05.XDMCD = "*";
  VPOITM05.XQACD = "*";
  VPOITM05.PC2INSEG = "*";
  VPOITM05.XPGCD = "*";
  VPOITM05.XUMCD = "*";
  VPOITM05.YSMXDV = "*";
  VPOITM05.PC2CUXID = "*";
  VPOITM05.XWHCD = "*";
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*";
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;

  PC0LSB1(); /* Use S7 to scan po item item table*/
  PC0LSB2(); /* Use n7 to get items*/

  while (PC0LW01.PC0LWEOF == "N") /* while more po items*/
    PC0L-358(); /* check for the styles on the orders*/
                                  /* database*/
    PC0LSB2(); /* Use n7 to get items*/
  end

  PC0LSB3(); /* Use c7 to close cursor*/
  return;

   /* ------------- End of process PC0L357 -----------------------*/

end // end PC0L-357

// Read order item from poitm
Function PC0L-358()
   /* ------------------------------------------------------------*/
   /* Style/Color/Dim processing*/
   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  OP2REC.XGPCD = VPOITM05.XGPCD;
  OP2REC.SY1STNBR = VPOITM05.SY1STNBR;
  OP2REC.SY2CLRID = VPOITM05.SY2CLRID;
  OP2REC.XDMCD = VPOITM05.XDMCD;
   /* MOVE ' ' TO OP2REC.OP2CGPCD;     /* COOR GROUP CODE*/

  PC0L-359(); /* Use SE to scan sales order item table*/

  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    set PC0LM002.OP1CUOID cursor, bold;
    set PC0LM002.OP1NORID bold;
    PC0LM002.XXXPRCNM = "PCOL358";
    converseLib.validationFailed(434); /* style NOT FOUND on order*/
    PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
    return;
  end

   /* ------------- End of process PC0L358 -----------------------*/

end // end PC0L-358

// Verify Order Number
Function PC0L-359()
   /* ------------------------------------------------------------*/
   /* Obtain Sales Order Item from IOMOD IO0440*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SE", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* ROW NOT FOUND*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0LM002.XXXPRCNM = "PC0L359"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0LM002.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------- End of STATEMENT PC0L-359 ----------------------*/

end // end PC0L-359

// Special initialization
Function PC0L000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC0LW01.PC0LWCDT = TA2REC.TA2GRGGN; /* Current date*/

       /* Reformat the current date for later comparison in*/
       /* PC0L351 & PC0L451*/

      PC0LWWYT = PC0LW01.PC0LWCYT; /* Current Year*/
      PC0LWWMT = PC0LW01.PC0LWCMT; /* Current Month*/
      PC0LWWAT = PC0LW01.PC0LWCAT; /* Current Day*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM001.XXXPRCNM = "PC0L000"; /* Process name*/

    end
  end

   /* ---------------------------------------------------------*/
   /* IF FASTPATHED IN WITH NO GPC CODE GO BACK TO THE MENU*/
   /* ---------------------------------------------------------*/

  if (COMMAREA.XGPCD == " "
   && COMMAREA.CAITEM == "A") /* Add function*/
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 28; /* GPC missing or invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
  end

   /* ---------------------------------------------------------*/
   /* CHECK COMMAREA SECURITY FIELDS*/
   /* ---------------------------------------------------------*/

  if (PCWREC.PCWMAP == 21) /* add requested*/
    if (PCWREC.XGPCD == "03"
     && COMMAREA.CACLVL[3] != "Y") /* Can't change*/
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138; /* Security violation*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      XSEXIT();
    else

      if (PCWREC.XGPCD == "02"
       && COMMAREA.CACLVL[2] != "Y") /* Can't change*/
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
      else

        if (PCWREC.XGPCD == "01"
         && COMMAREA.CACLVL[1] != "Y") /* Can't change*/
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          XSEXIT();
        else

          if (PCWREC.XGPCD == "07"
           && COMMAREA.CACLVL[7] != "Y") /* Can't change*/
            COMMAREA.CAITEM = " ";
            PCWREC.XXXMSGNO = 138;
            COMMAREA.CAUSERA = PCWREC.CAUSERA;
            COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
            XSEXIT();
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0A") /* Came from P.C. menu*/
    PC0L010(); /* Check where to go*/
  else
    if (COMMAREA.CAFROMAP == "PC0E") /* Came from within system*/
      PC0L020(); /* Came from pc0e*/
    else
      if (COMMAREA.CAFROMAP == "PC0H") /* Came from within system*/
        PC0L030(); /* Came from pc0h*/
      else
        if (COMMAREA.CAFROMAP == "PC0J") /* Came from within system*/
          PC0L040(); /* Came from pc0j*/
        else
          if (COMMAREA.CAFROMAP == "PC0M") /* Came from within system*/
            PC0L050(); /* Came from pc0m*/
          else
            if (COMMAREA.CAFROMAP == "PC0U") /* Came from within system*/
              PC0L060(); /* Came from pc0u*/
            else
              PC0L070(); /* Came from everywhere else*/
            end
          end
        end
      end
    end
  end


end // end PC0L000

// MAIN PROCESS TO DISPLAY MAPS
Function PC0L001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1 was requested*/
    PC0L100(); /* Display map 1*/
  else
    if (PC0LW01.PC0LWMAP == "2") /* Map 2 was requested*/
      if (PC0LW01.PC0LWFNC == "I") /* Inquire function requested*/
        if (COMMAREA.CAINQFL == "Y") /* User can do inquiries*/
          PC0L200(); /* Inquire Process*/
        else
          converseLib.validationFailed(6); /* Request for application invalid*/
          PC0LM001.XXXPRCNM = "PC0L001"; /* Process name*/
          PC0LW01.PC0LWFNC = " "; /* Set function code to spaces*/
          PC0LW01.PC0LWMAP = "1"; /* Request for map 1*/
          PC0LW01.PC0LWINF = "N"; /* Turn off soft error flag*/
        end
      else
        if (PC0LW01.PC0LWFNC == "C") /* Change function requested*/
          if (COMMAREA.CACHGFL == "Y") /* User can do changes*/
            PC0L300(); /* Change Process*/
          else
            converseLib.validationFailed(6); /* Request for application invalid*/
            PC0LM001.XXXPRCNM = "PC0L001"; /* Process name*/
            PC0LW01.PC0LWINF = "N"; /* Turn off soft error flag*/
            PC0LW01.PC0LWFNC = " "; /* Set function code to spaces*/
            PC0LW01.PC0LWMAP = "1"; /* Request for map 1*/
          end
        else
          if (PC0LW01.PC0LWFNC == "A") /* Add function requested*/
            if (COMMAREA.CACHGFL == "Y") /* User can do adds*/
              PC0L400(); /* Display map 2*/
            else
              converseLib.validationFailed(6); /* Request for application invalid*/
              PC0LM001.XXXPRCNM = "PC0L001"; /* Process name*/
              PC0LW01.PC0LWINF = "N"; /* Turn off soft error flag*/
              PC0LW01.PC0LWFNC = " "; /* Set function code to spaces*/
              PC0LW01.PC0LWMAP = "1"; /* Request for map 1*/
            end
          else
            SQLCA.SQLCAREC = "INVALID FUNCTION CODE";
            converseLib.validationFailed(6); /* Request for application invalid*/
            PC0LM001.XXXPRCNM = "PC0L001"; /* Process name*/
            PC0LW01.PC0LWINF = "N"; /* Turn off soft error flag*/
            PC0LW01.PC0LWFNC = " "; /* Set function code to spaces*/
            PC0LW01.PC0LWMAP = "1"; /* Request for map 1*/
          end
        end
      end
    else
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
      converseLib.validationFailed(6); /* Request for application invalid*/
      PC0LM001.XXXPRCNM = "PC0L001"; /* Process name*/
      PC0LW01.PC0LWINF = "N"; /* Turn off soft error*/
      PC0LW01.PC0LWFNC = " "; /* Set function code to sp*/
      PC0LW01.PC0LWMAP = "1"; /* Request for map 1*/
      XSPCS01(); /* Exit to another application*/
    end
  end


end // end PC0L001

// CHECK WHERE TO GO FROM PC0A
Function PC0L010()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO WHEN*/
    /* AN OPTION IS ENTERED FROM PC0A*/
   /* ------------------------------------------------------------*/

  if (PCWREC.PCWMAP > 0) /* Selection made*/
    PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    PC0LW01.PO-REG-CD = "01"; /* P.O. REGION CODE*/
    if (PCWREC.PCWMAP == 21) /* Selection 21 made*/
      if (PCWREC.XGPCD == "01" /* Gpc code*/
       || PCWREC.XGPCD == "02" /* Gpc code*/
       || PCWREC.XGPCD == "03" /* Gpc code*/
       || PCWREC.XGPCD == "07") /* Gpc code*/

        /* ---------------------------------------------------------*/
         /* CHECK COMMAREA SECURITY FIELDS*/
        /* ---------------------------------------------------------*/

        if (PCWREC.XGPCD == "03"
         && COMMAREA.CACLVL[3] != "Y") /* Can't change*/
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          XSEXIT();
        else

          if (PCWREC.XGPCD == "02"
           && COMMAREA.CACLVL[2] != "Y") /* Can't change*/
            COMMAREA.CAITEM = " ";
            PCWREC.XXXMSGNO = 138;
            COMMAREA.CAUSERA = PCWREC.CAUSERA;
            COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
            XSEXIT();
          else

            if (PCWREC.XGPCD == "01"
             && COMMAREA.CACLVL[1] != "Y") /* Can't change*/
              COMMAREA.CAITEM = " ";
              PCWREC.XXXMSGNO = 138;
              COMMAREA.CAUSERA = PCWREC.CAUSERA;
              COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
              XSEXIT();
            else

              if (PCWREC.XGPCD == "07"
               && COMMAREA.CACLVL[7] != "Y") /* Can't change*/
                COMMAREA.CAITEM = " ";
                PCWREC.XXXMSGNO = 138;
                COMMAREA.CAUSERA = PCWREC.CAUSERA;
                COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
                XSEXIT();
              end
            end
          end
        end

        PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
        PC0LW01.PC0LWFNC = "A"; /* Request add function*/
        PC0LW01.PC0LWSWR = "N"; /* Request data function*/
        PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/
        PCWREC.CAFROMAP[1] = " "; /* Clear out first from appl.*/
      else
        COMMAREA.CAITEM = " "; /* Clear item*/
        PC0LW01.PC0LWFNC = " "; /* Clear function*/
        PCWREC.XXXMSGNO = 138;
                                   /* Not valid for gpc code entered*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT(); /* Exit application*/
      end
    else
      PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
      PC0LW01.PC0LWFNC = " "; /* Clear function*/
      PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/
      PCWREC.CAFROMAP[1] = " "; /* Clear out first from appl.*/
    end

  else

    /* ------------------------------------------------------------*/
      /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO WHEN*/
      /* FASTPATHING IN FROM PC0A*/
    /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM == "A") /* Add function*/

      /* ---------------------------------------------------------*/
       /* CHECK COMMAREA SECURITY FIELDS*/
      /* ---------------------------------------------------------*/

      if (PCWREC.XGPCD == "03"
       && COMMAREA.CACLVL[3] != "Y") /* Can't change*/
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138; /* Security violation*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
      else

        if (PCWREC.XGPCD == "02"
         && COMMAREA.CACLVL[2] != "Y") /* Can't change*/
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          XSEXIT();
        else

          if (PCWREC.XGPCD == "01"
           && COMMAREA.CACLVL[1] != "Y") /* Can't change*/
            COMMAREA.CAITEM = " ";
            PCWREC.XXXMSGNO = 138;
            COMMAREA.CAUSERA = PCWREC.CAUSERA;
            COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
            XSEXIT();
          else

            if (PCWREC.XGPCD == "07"
             && COMMAREA.CACLVL[7] != "Y") /* Can't change*/
              COMMAREA.CAITEM = " ";
              PCWREC.XXXMSGNO = 138;
              COMMAREA.CAUSERA = PCWREC.CAUSERA;
              COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
              XSEXIT();
            end
          end
        end
      end
      PC0LW01.XGPCD = COMMAREA.XGPCD; /* Gpc code*/
      PC0LW01.PO-REG-CD = "01"; /* region*/
      PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
      PC0LW01.PC0LWFNC = "A"; /* Request add function*/
      PCWREC.CAFROMAP = " "; /* Clear out first from appl.*/
      PC0LM002.XXXPRCNM = "PC0L10A";
    else
      PC0LW01.PO-REG-CD = "01"; /* region*/
      PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
      PC0LW01.PC0LWFNC = " "; /* Request no function*/
      PC0LW01.XGPCD = COMMAREA.XGPCD; /* Gpc code*/
      PC0LM001.XXXPRCNM = "PC0L10I";
    end
  end


end // end PC0L010

// CHECK WHERE TO GO FROM PC0E
Function PC0L020()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM PC0E*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == "PC0L" /* STARTED IN THIS APPLICATION*/
   || COMMAREA.CAFROMAP == "PC0E") /* STARTED IN PC0E APPLICATION*/
    if (PCWREC.PCWFNC[1] == "A") /* Add function is requested*/
      PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
      PC0LW01.PC0LWFNC = "A"; /* Request add function*/
      PC0LW01.PC0LWSWR = "N"; /* Request data function*/
      PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/

      if (PCWREC.CAFROMAP[1] == "PC0L" /* STARTED IN THIS APPLICATION*/
       && PCWREC.XGPCD == "02")        /* STARTED IN THIS APPLICATION*/
        PC0LS98(); /* ====> re-format save date prior to*/
                                   /* transfer*/
      end

    else
      if (PCWREC.PCWFNC[1] == "I") /* Inquiry*/
        PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
        PC0LW01.PC0LWFNC = "I"; /* Request add function*/
        PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
        PC0LW01.PC0LWHAC = "Y"; /* Changed/Add flag to yes*/
        PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
        PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
        PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      else
        if (PCWREC.PCWFNC[1] == "C") /* Change*/
          PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
          PC0LW01.PC0LWFNC = "C"; /* Request add function*/
          PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
          PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/
          PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
          PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
          PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
        else
          PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
          PC0LW01.PC0LWFNC = " "; /* Request ' ' function*/
          PC0LW01.PC0LWSWR = "N"; /* Request data function*/
          PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/
          PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
          PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
          PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
        end
      end
    end
  else
    PCWREC.CAFROMAP[1] = " "; /* Clear out came from appl.*/
    PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
    PC0LW01.PC0LWFNC = " "; /* Request ' ' function*/
    PC0LW01.PC0LWSWR = "N"; /* Request data function*/
    PC0LW01.PC0LWHAC = "N"; /* Changed/Add flag to no*/
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  end


   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING IN FROM A FASTPATH*/
   /* ------------------------------------------------------------*/

   /* IF COMMAREA.CAITEM EQ 'A'       ; Add function*/
   /* MOVE PCWREC.XGPCD TO PC0LW01.XGPCD   ; Gpc code*/
   /* MOVE '2' TO PC0LW01.PC0LWMAP  ; Request map 2*/
   /* MOVE 'A' TO PC0LW01.PC0LWFNC  ; Request add function*/
   /* ELSE ;*/
   /* MOVE '1' TO PC0LW01.PC0LWMAP  ; Request map 1*/
   /* MOVE ' ' TO PC0LW01.PC0LWFNC  ; Request no function*/
   /* MOVE PCWREC.po-reg-cd TO PC0LW01.po-reg-cd; P.O. region*/
   /* MOVE PCWREC.PC3PONBR TO PC0LW01.PC3PONBR; P.O. number*/
   /* MOVE PCWREC.PC3PONBR TO PC0LM001.PC3PONBR; P.O. number*/
   /* END ;*/


end // end PC0L020

// CHECK WHERE TO GO FROM PC0H
Function PC0L030()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM PC0H*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == "PC0L") /* Started in this application*/
    if (PCWREC.PCWFNC[1] == "A") /* Add function*/
      PC0LW01.PC0LWFNC = "A"; /* Request add function*/
      PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
      PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
      PC0LW01.PC0LWHAC = "Y"; /* Header c/a flag*/
      PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
      PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
      PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
      PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
      PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
    else
      if (PCWREC.PCWFNC[1] == "I") /* Inquiry function*/
        PC0LW01.PC0LWFNC = "I"; /* Request add function*/
        PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
        PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
        PC0LW01.PC0LWHAC = "Y"; /* Header c/a flag*/
        PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
        PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
        PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
        PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
        PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
        PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
      else
        if (PCWREC.PCWFNC[1] == "C") /* Change function*/
          PC0LW01.PC0LWFNC = "C"; /* Request add function*/
          PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
          PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
          PC0LW01.PC0LWHAC = "N"; /* Header c/a flag*/
          PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
          PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
          PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
          PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
          PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
          PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
        else
          PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
          PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
          PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
          PC0LW01.PC0LWHAC = "N"; /* Header add/change switch*/
          PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
          PC0LW01.PC0LWFNC = " "; /* Request inquiry function*/
        end
      end
    end
  else
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LW01.PC0LWHAC = "N"; /* Header add/change switch*/
    PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
    PC0LW01.PC0LWFNC = " "; /* Request inquiry function*/
  end




end // end PC0L030

// CHECK WHERE TO GO FROM PC0J
Function PC0L040()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM PC0J*/
   /* ------------------------------------------------------------*/

  if (PCWREC.PCWFNC[1] == "I") /* Inquiry function*/
    PC0LW01.PC0LWFNC = "I"; /* Request add function*/
    PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
    PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
    PC0LW01.PC0LWHAC = "Y"; /* Header c/a flag*/
    PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
    PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
  else
    if (PCWREC.PCWFNC[1] == "C") /* Change function*/
      PC0LW01.PC0LWFNC = "C"; /* Request add function*/
      PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
      PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
      PC0LW01.PC0LWHAC = "N"; /* Header c/a flag*/
      PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
      PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
      PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
      PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
      PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
    else
      PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
      PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LW01.PC0LWHAC = "N"; /* Header add/change switch*/
      PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
      PC0LW01.PC0LWFNC = " "; /* Request inquiry function*/
    end
  end


end // end PC0L040

// CHECK WHERE TO GO FROM PC0M
Function PC0L050()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM PC0M*/
   /* ------------------------------------------------------------*/

  if (PCWREC.PCWFNC[1] == "I") /* Inquiry function*/
    PC0LW01.PC0LWFNC = "I"; /* Request add function*/
    PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
    PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
    PC0LW01.PC0LWHAC = "Y"; /* Header c/a flag*/
    PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
    PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
  else
    if (PCWREC.PCWFNC[1] == "C") /* Change function*/
      PC0LW01.PC0LWFNC = "C"; /* Request add function*/
      PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
      PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
      PC0LW01.PC0LWHAC = "N"; /* Header c/a flag*/
      PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
      PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
      PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
      PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
      PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/
    else
      PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
      PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
      PC0LW01.PC0LWHAC = "N"; /* Header add/change switch*/
      PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
      PC0LW01.PC0LWFNC = " "; /* Request inquiry function*/
    end
  end


   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING IN FROM A FASTPATH*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM == "A") /* Add function*/
    PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/
    PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
    PC0LW01.PC0LWFNC = "A"; /* Request add function*/
    PC0LW01.PO-REG-CD = "01"; /* P.O. region*/
  else
    PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
    PC0LW01.PC0LWFNC = " "; /* Request no function*/
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  end


end // end PC0L050

// CHECK WHERE TO GO FROM PC0U
Function PC0L060()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM PC0U*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
    /* pc0u not yet working so key fields are hard coded*/
    /* WHEN COMMING FROM PC0U*/
   /* ------------------------------------------------------------*/

  PC0LW01.PC0LWFNC = "I"; /* Request add function*/
  PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
  PC0LW01.PC0LWSWR = "Y"; /* Request data function*/
  PC0LW01.PC0LWHAC = "Y"; /* Header c/a flag*/
  PC0LW01.XGPCD = COMMAREA.XGPCD; /* Gpc code*/
  PC0LW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
  PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. REGION CODE*/
  PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  PC0LW01.PC3POIDT = PCWREC.PC3POIDT; /* P.O. id date*/
  PC0LW01.PC0LWODT = PCWREC.PC3POIDT; /* P.O. id date*/

end // end PC0L060

// WHERE TO GO, FROM ELSEWHERE
Function PC0L070()

   /* ------------------------------------------------------------*/
    /* DETERMINE WHICH FUNCTION TO SET AND WHERE TO GO*/
    /* WHEN COMMING FROM ANYWHERE ELSE*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM == "A") /* Add function*/
    PC0LW01.XGPCD = PCWREC.XGPCD; /* Gpc code*/

    /* ---------------------------------------------------------*/
     /* CHECK COMMAREA SECURITY FIELDS*/
    /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "03"
     && COMMAREA.CACLVL[3] != "Y") /* Can't change*/
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138; /* Security violation*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      XSEXIT();
    else

      if (PCWREC.XGPCD == "02"
       && COMMAREA.CACLVL[2] != "Y") /* Can't change*/
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
      else

        if (PCWREC.XGPCD == "01"
         && COMMAREA.CACLVL[1] != "Y") /* Can't change*/
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          XSEXIT();
        else

          if (PCWREC.XGPCD == "07"
           && COMMAREA.CACLVL[7] != "Y") /* Can't change*/
            COMMAREA.CAITEM = " ";
            PCWREC.XXXMSGNO = 138;
            COMMAREA.CAUSERA = PCWREC.CAUSERA;
            COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
            XSEXIT();
          end
        end
      end
    end
    PC0LW01.PC0LWMAP = "2"; /* Request map 2*/
    PC0LW01.PC0LWFNC = "A"; /* Request add function*/
    PC0LW01.PO-REG-CD = "01"; /* P.O. region*/
  else
    PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
    PC0LW01.PC0LWFNC = " "; /* Request no function*/
    PC0LW01.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
    PC0LW01.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
    PC0LM001.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  end




end // end PC0L070

// SELECTION MAP PROCESSES
Function PC0L100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to make a selection. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC0L110(); /* Format and display the map*/

  PC0L120(); /* Check attention identifier*/

  PC0L130(); /* Reset fields to normal intensity*/

  PC0L140(); /* Verify the entered data*/

  PC0L150(); /* Process valid input request*/


end // end PC0L100

// CONVERSE SELECTION MAP
Function PC0L110()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/


  if (PC0LW01.PC0LWINF == "N") /* No message*/
    set PC0LM001.PC3PONBR cursor;
    PC0LM001.PC0LMSEL = "C"; /* Selection type*/
    PC0LM001.XGPCD = PC0LW01.XGPCD; /* Move GPC code to map1*/
    PC0LM001.XGPDESC = PC0LW01.XGPDESC;

  else
    set PC0LM001 alarm; /* Indicate sound alarm*/
  end

  PC0L111(); /* Format map*/


  if (PC0LM001.XGPCD == " ") /* GPC there*/
    set PC0LM001.XGPCD cursor; /* GPC code*/
  end

  if (PC0LM001.XGPCD != "02")
    set PC0LM001.PC4ORTYP skip, invisible;
    set PC0LM001.PC0LMPYR skip, modified, invisible;
    set PC0LM001.PC0LMPMO skip, modified, invisible;
    set PC0LM001.PC0LMDMO skip, modified, invisible;
    set PC0LM001.FY1FCTYC skip, modified, invisible;
    set PC0LM001.PC0LMPTL skip, invisible;
    set PC0LM001.PC0LMIDL skip, invisible;
  end


  PC0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0LM001 ;

  PC0LW01.PC0LWINF = "N"; /* Reset error switch*/

   /* ------------------------------------------------------------*/
   /* PERFORM POP-UP WINDOW ROUTINE*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PC0L112();
  end


end // end PC0L110

// FORMAT MAP DATA
Function PC0L111()

   /* ------------------------------------------------------------*/
   /* GET THE MAP INFORMATION*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.XGPCD == "02" /* GPC FOR FOOTWEAR*/
   || PC0LW01.XGPCD == "02") /* GPC FOR FOOTWEAR*/
    if (converseVar.validationMsgNum == 0) /* No errors*/

      PC0LW01.PC3DMQTY = 0;
      PC0LW01.PC3DMPRC = 0;
      PC0LW01.PC3NLQTY = 0;
      PC0LW01.PC3NLPRC = 0;
      set PC0LM001.PC4ORTYP initialAttributes;
      set PC0LM001.PC0LMPYR initialAttributes;
      set PC0LM001.PC0LMPMO initialAttributes;
      set PC0LM001.PC0LMDMO initialAttributes;
      set PC0LM001.FY1FCTYC initialAttributes;
      set PC0LM001.PC0LMPTL initialAttributes;
      set PC0LM001.PC0LMIDL initialAttributes;

    end

  end


end // end PC0L111

// POP UP WINDOW ROUTINE
Function PC0L112()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0LM001.XGPCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                 GPC CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform gpc code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      PC0LM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move sdesc.*/
      set PC0LM001.XGPCD cursor;
    else
      PC0LM001.XGPCD = PC0LW01.XGPCD; /* move code*/
      PC0LM001.XGPDESC = PC0LW01.XGPDESC; /* move sdesc.*/
      set PC0LM001.XGPCD cursor;
    end

    converseLib.clearScreen();
     /* Clear screen before display*/

    converseLib.validationFailed(84); /* Hit enter to process*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/

    exit stack; /* Exit to redisplay map2*/

  else

    return; /* Return to previous process*/

  end


end // end PC0L112

// CHECK ATTENTION IDENTIFIERS
Function PC0L120()

   /* ---------------------------------------------------------*/
   /* CHECK COMMAREA SECURITY FIELDS*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter pressed*/
    if (COMMAREA.CACHGFL == "N" /* Can't do changes*/
     && PC0LM001.PC0LMSEL == "C") /* Change requested*/
      set PC0LM001.PC0LMSEL cursor, bold; /* Highlight errror*/
      converseLib.validationFailed(29); /* Can't change*/
      PC0LM001.XXXPRCNM = "PC0L120"; /* Module identification*/
      PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
      exit stack; /* Exit to redisplay the map*/
    end

    if (PC0LM001.PC0LMSEL == "C") /* Change requested*/
      if (PC0LM001.XGPCD == "01"
       && COMMAREA.CACLVL[1] != "Y") /* Can't change promo*/
        converseLib.validationFailed(29);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "07"
       && COMMAREA.CACLVL[7] != "Y") /* Can't change promo*/
        converseLib.validationFailed(29);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "02"
       && COMMAREA.CACLVL[2] != "Y") /* Can't change footware*/
        converseLib.validationFailed(29);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "03"
       && COMMAREA.CACLVL[3] != "Y") /* Can't change apparel*/
        converseLib.validationFailed(29);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end
    end


    if (COMMAREA.CAINQFL == "N" /* Can't do inquires*/
     && PC0LM001.PC0LMSEL == "I") /* Inquiry requested*/
      set PC0LM001.PC0LMSEL cursor, bold; /* Highlight errror*/
      converseLib.validationFailed(105); /* Can't change*/
      PC0LM001.XXXPRCNM = "PC0L120"; /* Module identification*/
      PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
      exit stack; /* Exit to redisplay the map*/
    end

    if (PC0LM001.PC0LMSEL == "I") /* Change requested*/
      if (PC0LM001.XGPCD == "01"
       && COMMAREA.CAILVL[1] != "Y") /* Can't inquire promo*/
        converseLib.validationFailed(105);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "07"
       && COMMAREA.CAILVL[7] != "Y") /* Can't inquire promo*/
        converseLib.validationFailed(105);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "02"
       && COMMAREA.CAILVL[2] != "Y") /* Can't inquire footware*/
        converseLib.validationFailed(105);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end

      if (PC0LM001.XGPCD == "03"
       && COMMAREA.CAILVL[3] != "Y") /* Can't inquire apparel*/
        converseLib.validationFailed(105);
        set PC0LM001.XGPCD cursor, bold; /* Highlight error*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Move in gpc code*/
        PC0LM001.XGPDESC = " "; /* Clear description*/
        PC0LM001.XXXPRCNM = "PC0L120";
        PC0LW01.PC0LWINF = "Y"; /* Set error flag*/
        exit stack; /* Exit and redisplay map1*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
    
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC0LM001.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC0LM001.CAITEM; /* To item*/
      set PCWREC empty; /* Clear app. comm. area empty*/

      XSPCS01(); /* Exit to another application*/

      set PC0LM001.CATOAP cursor, bold; /* Highlight*/
      PC0LW01.PC0LWSWF = "N"; /* Format the map switch*/
      PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error switch*/
      converseLib.validationFailed(6); /* Cannot access requested app.*/

    else

      PC0LM001.XXXPRCNM = "PC0L120"; /* Module identification*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error switch*/
      converseLib.validationFailed(5); /* PF key not allowed with fast path*/

    end
    set PC0LM001.CATOAP cursor, bold; /* Highlight*/
    PC0LM001.XXXPRCNM = "PC0L120"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    COMMAREA.CAITEM = " "; /* TO item*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0LM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* TO application*/
      set PCWREC empty; /* Clear app. comm. area empty*/
    end


    XSPCS01(); /* Exit to another application*/

    set PC0LM001 initial;
    set PC0LM001.CATOAP cursor, bold; /* Highlight*/

    PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER    was not pressed*/

    PC0LM001.XXXPRCNM = "PC0L120"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PC0LW01.PC0LWINF = "Y"; /* Set error flag*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PC0L120

// RESET THE HIGHLIGHTED FIELDS
Function PC0L130()

   /* ------------------------------------------------------------*/
   /* Reset all field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0LM001.PC4ORTYP initialAttributes; /* p.o. type code*/
  set PC0LM001.XGPCD initialAttributes; /* Gpc code*/
  set PC0LM001.PC3PONBR initialAttributes; /* p.o. number*/
  set PC0LM001.PC0LMSEL initialAttributes; /* Selection*/
  set PC0LM001.PC0LMPYR initialAttributes; /* p.o. id year*/
  set PC0LM001.PC0LMPMO initialAttributes; /* p.o. id buy month*/
  set PC0LM001.PC0LMDMO initialAttributes; /* p.o. id delivery month*/
  set PC0LM001.FY1FCTYC initialAttributes; /* p.o. id factory*/
  set PC0LM001.PC0LMPTL initialAttributes; /* P.O. type literal*/
  set PC0LM001.PC0LMIDL initialAttributes; /* P.O. id literal*/

  set PC0LM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0LM001.CAITEM initialAttributes; /* Commarea application data*/


  if (PC0LM001.XGPCD != "02")
    set PC0LM001.PC4ORTYP skip, invisible; /* P.O. type*/
    set PC0LM001.PC0LMPYR skip, modified, invisible; /* P.O. ID year*/
    set PC0LM001.PC0LMPMO skip, modified, invisible; /* buy month*/
    set PC0LM001.PC0LMDMO skip, modified, invisible; /* del. month*/
    set PC0LM001.FY1FCTYC skip, modified, invisible; /* factory code*/
    set PC0LM001.PC0LMPTL skip, invisible; /* P.O. type literal*/
    set PC0LM001.PC0LMIDL skip, invisible; /* P.O. id literal*/
  end


end // end PC0L130

// VERIFY THE ENTERED DATA
Function PC0L140()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.CAITEM > " ") /* Application data was entered*/
    set PC0LM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on soft error*/
    PC0LM001.XXXPRCNM = "PC0L140"; /* Process name*/
    return; /* Return to previous process*/
  else

    PC0L142(); /* Check entered data cont.*/
    PC0L141(); /* Check entered data*/

  end


end // end PC0L140

// VALIDATE THE ENTERED DATA
Function PC0L141()

   /* ------------------------------------------------------------*/
   /* VALIDATE THE DATA THAT IS ENTERED*/
   /* ------------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* CHECK AND SEE IF GPC CODE ENTERED*/
   /* ----------------------------------------------------------*/


  if (PC0LM001.XGPCD > " ") /* Something there*/
    if (PC0LM001.XGPCD != PC0LW01.XGPCD) /* Gpc codes differ*/
      if (PC0LM001.XGPCD in XGPTBL.XGPCD /* Gpc code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Gpc code, program record*/
        PCWREC.XGPCD = PC0LM001.XGPCD; /* Gpc code, system record*/
        COMMAREA.XGPCD = PC0LM001.XGPCD; /* Gpc code, commarea*/
        PC0LM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        PC0LW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* Description*/
        PC0LM001.PC0LMPYR = " "; /* init po id*/
        PC0LM001.PC0LMPMO = " "; /* init po id*/
        PC0LM001.PC0LMDMO = " "; /* init po id*/
        PC0LM001.FY1FCTYC = " "; /* init po id*/
        PC0LM001.PC4ORTYP = " "; /* init po id*/
        PC0LW01.PC0LMPYR = " "; /* init po id*/
        PC0LW01.PC0LMPMO = " "; /* init po id*/
        PC0LW01.PC0LMDMO = " "; /* init po id*/
        PC0LW01.FY1FCTYC = " "; /* init po id*/
        PC0LW01.PC4ORTYP = " "; /* init po id*/
      else
        set PC0LM001.XGPCD cursor, bold; /* Highlight errror*/
        PC0LW01.XGPCD = PC0LM001.XGPCD; /* Gpc code, program record*/
        PC0LM001.XGPDESC = " "; /* Description*/
        PC0LW01.XGPDESC = " "; /* Description*/
        converseLib.validationFailed(28); /* Gpc code missing or invalid*/
        PC0LM001.XXXPRCNM = "PC0L141"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
      end
    end
  else
    set PC0LM001.XGPCD cursor, bold; /* Highlight errror*/
    PC0LM001.XGPDESC = " "; /* Description*/
    PC0LW01.XGPDESC = " ";
    PC0LM001.XGPCD = " "; /* Gpc code*/
    PC0LW01.XGPCD = " ";
    converseLib.validationFailed(28); /* Gpc code missing or invalid*/
    PC0LM001.XXXPRCNM = "PC0L141"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
  end

   /* ----------------------------------------------------------*/
   /* CHECK AND SEE IF BOTH P.O. NUMBER AND P.O. ID ARE ENTERED*/
   /* ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/
    if (PC0LM001.XGPCD == "02") /* Gpc code is footware*/
      if (PC0LM001.PC0LMPYR > " " /* Something in po id*/
       && PC0LM001.PC0LMPMO > " " /* Something in po id*/
       && PC0LM001.PC0LMDMO > " " /* Something in po id*/
       && PC0LM001.FY1FCTYC > " " /* Something in po id*/
       && PC0LM001.PC3PONBR > 0)  /* P.O. number*/
        converseLib.validationFailed(158); /* Can't enter both p.o. nbr&p.o. id*/
        set PC0LM001.PC3PONBR cursor, bold; /* Hilight error*/
        PC0LM001.XXXPRCNM = "PC0L141"; /* Process name*/
        return; /* Return to previous process*/
      end

      /* -----------------------------------------------------*/
       /* CHECK AND SEE IF P.O. ID IS ENTERED*/
      /* -----------------------------------------------------*/

      if (PC0LM001.PC0LMPYR > " " /* Something in po id*/
       || PC0LM001.PC0LMPMO > " " /* Something in po id*/
       || PC0LM001.PC0LMDMO > " " /* Something in po id*/
       || PC0LM001.FY1FCTYC > " ") /* Something in po id*/


        /* --------------------------------------------------*/
         /* P.O. TYPE EDIT ROUTINE*/
        /* --------------------------------------------------*/

        if (PC0LM001.PC4ORTYP > "  ") /* Type entered*/
          PC4REC.XGPCD = PC0LM001.XGPCD;
          PC4REC.PC4ORTYP = PC0LM001.PC4ORTYP;

          PC0LS04(); /* Get p.o. type*/

          if (SQLCA.VAGen_SQLCODE == 0)

            PC0LW01.PC4ORTYP = PC4REC.PC4ORTYP;

          end

          if (SQLCA.VAGen_SQLCODE == 100)
            converseLib.validationFailed(33); /* Type missing or invalid*/
            set PC0LM001.PC4ORTYP cursor, bold; /* Highlight error*/
            PC0LM001.XXXPRCNM = "PC0L141"; /* Process name*/
          end

        else
          converseLib.validationFailed(33); /* Type missing or invalid*/
          set PC0LM001.PC4ORTYP cursor, bold; /* Highlight error*/
          PC0LM001.XXXPRCNM = "PC0L141"; /* Process name*/
        end
        /* --------------------------------------------------*/
         /* GO TO THE P.O. ID EDIT ROUTINE*/
        /* --------------------------------------------------*/

        PC0L143(); /* P.O. id edit routine*/

      end
    end
  end


end // end PC0L141

// P.O. NUMBER EDIT
Function PC0L142()

   /* -----------------------------------------------------------*/
   /* VALIDATE THE DATA THAT IS ENTERED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* SEE IF VALID SELECTION ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.PC0LMSEL == "C" /* Change screen requested*/
   || PC0LM001.PC0LMSEL == "I") /* Inquiry screen requested*/

       /* NEXT SENTENCE*/

  else
    converseLib.validationFailed(34); /* Must eq I or C*/
    set PC0LM001.PC0LMSEL cursor, bold;
    PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
  end


   /* ----------------------------------------------------------*/
   /* VERIFY THE P.O. NUMBER ENTERED FOR FOOTWEAR*/
   /* ----------------------------------------------------------*/

  if (PC0LM001.XGPCD == "02") /* Gpc code is footwear*/
    if (PC0LM001.PC0LMPYR == " " /* Nothing in po id*/
     && PC0LM001.PC0LMPMO == " " /* Nothing in po id*/
     && PC0LM001.PC0LMDMO == " " /* Nothing in po id*/
     && PC0LM001.FY1FCTYC == " ") /* Nothing in po id*/

      /* -------------------------------------------------------*/
       /* CLEAR OUT THESE WORKING STORAGAE FIELDS IF P.O. NUMBER*/
       /* IS ENTERED*/
      /* -------------------------------------------------------*/

      PC0LW01.PC0LMPYR = 0; /* Clear working storage year*/
      PC0LW01.PC0LMPMO = 0; /* Clear working month--buy*/
      PC0LW01.PC0LMDMO = 0; /* Clear working month--del*/
      PC0LW01.FY1FCTYC = " "; /* Clear working factory*/

      if (PC0LM001.PC3PONBR > 0) /* P.O. number*/

        set VPOHDR03 empty; /* Clear record*/
        set PCYREC empty; /* Clear record*/
        PCYREC.PCYFUNC = "S ";
                                   /* Move select unique to function*/
        VPOHDR03.XGPCD = PC0LM001.XGPCD;
        VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* PO REGION CODE*/
        VPOHDR03.PC3PONBR = PC0LM001.PC3PONBR;


        PC0LS02(); /* Verify the po number*/


        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          PC0LW01.PC3PONBR = VPOHDR03.PC3PONBR;
          PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD;

        else
          converseLib.validationFailed(69); /* P.O. number does not exist*/
          set PC0LM001.PC3PONBR cursor, bold;
          PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
        end
      else
        set PC0LM001.PC3PONBR cursor, bold;
        converseLib.validationFailed(35); /* P.O. number must be entered*/
        PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
      end
    end
  else

    /* ----------------------------------------------------------*/
     /* VERIFY THE P.O. NUMBER ENTERED FOR APPAREL AND PROMO*/
    /* ----------------------------------------------------------*/

    if (PC0LM001.PC3PONBR > 0) /* P.O. number*/

      set VPOHDR03 empty; /* Clear record*/
      set PCYREC empty; /* Clear record*/
      PCYREC.PCYFUNC = "S "; /* Move select unique to function*/
      VPOHDR03.XGPCD = PC0LM001.XGPCD;
      VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* PO REGION CODE*/
      VPOHDR03.PC3PONBR = PC0LM001.PC3PONBR;


      PC0LS02(); /* Verify the po number*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        PC0LW01.PC3PONBR = VPOHDR03.PC3PONBR;
        PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD;

        if (PC0LM001.XGPCD != "01") /* Gpc code is apparel*/

          if (VPOHDR03.PO-REG-CD != "01" /* can edit usa po's*/
           && PC0LM001.PC0LMSEL == "C")  /**/
            set PC0LM001.PC3PONBR cursor, bold;
            PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
            converseLib.validationFailed(509); /* out of range*/
            PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
          end
        end

      else
        set PC0LM001.PC3PONBR cursor, bold;
        converseLib.validationFailed(69); /* P.O. Number does not exist*/
        PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
      end
    else
      set PC0LM001.PC3PONBR cursor, bold; /* Highlight error*/
      converseLib.validationFailed(35); /* Must enter p.o. number*/
      PC0LM001.XXXPRCNM = "PC0L142"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
    end
  end


end // end PC0L142

// P.O. ID EDIT FOR FOOTWEAR
Function PC0L143()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.FY1FCTYC == " ") /* Nothing there*/
    set PC0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
    converseLib.validationFailed(32); /* Invalid date*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
  else
    set VFCTY003 empty; /* Clear record*/
    VFCTY003.FY1FCTYC = PC0LM001.FY1FCTYC; /* Search key*/
    VFCTY003.XGPCD = PC0LM001.XGPCD; /* Search key*/


    PC0LS01(); /* Call factory check routine*/


    if (SQLCA.VAGen_SQLCODE == 0 &&  /* Everything OK and*/
    VFCTY003.XXXSTAT == "A")         /* status is active*/
      PC0LW01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
    else
      converseLib.validationFailed(32); /* Invalid factory*/
      PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
      PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
      set PC0LM001.FY1FCTYC cursor, bold; /* Highlight error*/
    end
  end

   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.PC0LMDMO == "01" /* Something there*/
   || PC0LM001.PC0LMDMO == "02" /* Something there*/
   || PC0LM001.PC0LMDMO == "03" /* Something there*/
   || PC0LM001.PC0LMDMO == "04" /* Something there*/
   || PC0LM001.PC0LMDMO == "05" /* Something there*/
   || PC0LM001.PC0LMDMO == "06" /* Something there*/
   || PC0LM001.PC0LMDMO == "07" /* Something there*/
   || PC0LM001.PC0LMDMO == "08" /* Something there*/
   || PC0LM001.PC0LMDMO == "09" /* Something there*/
   || PC0LM001.PC0LMDMO == "10" /* Something there*/
   || PC0LM001.PC0LMDMO == "11" /* Something there*/
   || PC0LM001.PC0LMDMO == "12") /* Something there*/

    PC0LW01.PC0LMDMO = PC0LM001.PC0LMDMO;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
    set PC0LM001.PC0LMDMO cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.PC0LMPMO == "01" /* Something there*/
   || PC0LM001.PC0LMPMO == "02" /* Something there*/
   || PC0LM001.PC0LMPMO == "03" /* Something there*/
   || PC0LM001.PC0LMPMO == "04" /* Something there*/
   || PC0LM001.PC0LMPMO == "05" /* Something there*/
   || PC0LM001.PC0LMPMO == "06" /* Something there*/
   || PC0LM001.PC0LMPMO == "07" /* Something there*/
   || PC0LM001.PC0LMPMO == "08" /* Something there*/
   || PC0LM001.PC0LMPMO == "09" /* Something there*/
   || PC0LM001.PC0LMPMO == "10" /* Something there*/
   || PC0LM001.PC0LMPMO == "11" /* Something there*/
   || PC0LM001.PC0LMPMO == "12") /* Something there*/

    PC0LW01.PC0LMPMO = PC0LM001.PC0LMPMO;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
    set PC0LM001.PC0LMPMO cursor, bold; /* Highlight*/
  end
   /* ------------------------------------------------------------*/
   /* DATE VALIDATION*/
   /* ------------------------------------------------------------*/

  PC0LW01.PC0LWDMC = PC0LM001.PC0LMDMO; /* Del. month*/
  PC0LW01.PC0LWPMC = PC0LM001.PC0LMPMO; /* Buy month*/
  PC0LW01.PC0LWPYC = PC0LM001.PC0LMPYR; /* Year*/
  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in date type*/
  TA2REC.TA2GRGE = PC0LW01.PC0LWCDA; /* Move in date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

  if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
    PC0LW01.PC0LWODT = TA2REC.TA2GRGGN; /* Beginning date*/
    PC0LW01.PC3POIDT = TA2REC.TA2GRGGN; /* Beginning date*/
  else
    if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
      set PC0LM001.PC0LMPYR cursor, bold; /* Highlight error*/
      set PC0LM001.PC0LMDMO bold;
      set PC0LM001.PC0LMPMO bold;
      converseLib.validationFailed(313); /* Invalid poid*/
      PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
      PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
    else
      set PC0LM001.PC0LMPYR cursor, bold; /* Highlight error*/
      set PC0LM001.PC0LMDMO bold;
      set PC0LM001.PC0LMPMO bold;
      converseLib.validationFailed(10); /* System problem*/
      PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
      PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
    end
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM001.PC4ORTYP == "QQ"
   || PC0LM001.PC4ORTYP == "OR")
    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC0LM001.PC0LMPYR >= "00"
       && PC0LM001.PC0LMPYR <= "99")
        PC0LW01.PC0LMPYR = PC0LM001.PC0LMPYR;
        /* ****************Y2K IN*************************/
        if (PC0LW01.PC0LMPYR > 57)
          PC0LW01.PC0LMPCC = 19;
        else
          PC0LW01.PC0LMPCC = 20;
        end

        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT - 2;/* ge cur. yr - 2*/
        /* IF PC0LW01.PC0LMPYR GE PC0LW01.PC0LWCY1;*/
        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT + 1;/* le cur. yr + 1*/
        /* IF PC0LW01.PC0LMPYR LE PC0LW01.PC0LWCY1;*/
        PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY - 2; /* ge cur. yr - 2*/
        if (PC0LW01.PC0LWOWY >= PC0LW01.PC0LWYR1)
          PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY + 1; /* le cur. yr + 1*/
          if (PC0LW01.PC0LWOWY <= PC0LW01.PC0LWYR1)
            /* ****************Y2K OUT************************/

             /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(30); /* Must enter current year or + 1*/
            PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
            PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
            set PC0LM001.PC0LMPYR cursor, bold; /* Highlight*/
          end
        else
          converseLib.validationFailed(30); /* Must enter current year or + 1*/
          PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
          PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
          set PC0LM001.PC0LMPYR cursor, bold; /* Highlight*/
        end
      end
    end
  else

    if (converseVar.validationMsgNum == 0) /* No message*/
    /* IF PC0LM001.PC0LMPYR GE '00';*/
    /* AND PC0LM001.PC0LMPYR LE '99';*/
    /* MOVE PC0LM001.PC0LMPYR TO PC0LW01.PC0LMPYR;*/
    /* ;*/
    /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT + 1; /* One year greater*/
    /* IF PC0LW01.PC0LMPYR GE PC0LW01.PC0LWCYT; /* Dates are equal*/
    /* AND PC0LW01.PC0LMPYR LE PC0LW01.PC0LWCY1; /* One year greater*/
    /* ;*/
    /* ; /* NEXT SENTENCE*/
    /* ;*/
    /* ELSE;*/
    /* MOVE 392 TO EZEMNO;       /* Must enter current year or + 1*/
    /* MOVE 'Y' TO PC0LW01.PC0LWINF;    /* Turn off soft error*/
    /* MOVE 'PC0L143' TO PC0LM001.XXXPRCNM; /* Process name*/
    /* SET PC0LM001.PC0LMPYR CURSOR,BRIGHT; /* Highlight*/
    /* END;*/
    /* ELSE;*/
    /* MOVE 392 TO EZEMNO;         /* Must enter current year or + 1*/
    /* MOVE 'Y' TO PC0LW01.PC0LWINF;      /* Turn off soft error*/
    /* MOVE 'PC0L143' TO PC0LM001.XXXPRCNM; /* Process name*/
    /* SET PC0LM001.PC0LMPYR CURSOR,BRIGHT; /* Highlight*/
    /* END;*/
    end
  end

   /* ------------------------------------------------------------*/
   /* P.O. HEADER ROW CHECK IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/

    set VPOHDR03 empty; /* Clear record*/
    set PCYREC empty; /* Clear record*/

    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
    VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. id*/
    VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. order type*/
    PCYREC.PCYFUNC = "SA"; /* Select alternate*/

    /* ------------------------------------------------------------*/
     /* Select a unique header row.*/
     /* If not available, return an error message to the user.*/
     /* If any other, indicate system error.*/
    /* ------------------------------------------------------------*/

    PC0LS02(); /* Get P.O. header row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/


      PC0LW01.PC3PONBR = 0; /* Clear any P.O. nbr in storage*/
                               /* this will ensure a select alternate*/
                               /* will be done on the P.O. header*/
                               /* row for either Inquiry or change*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row exists*/
      converseLib.validationFailed(18); /* No data to display*/
      set PC0LM001.PC0LMPYR cursor, bold; /* Highlight error*/
      set PC0LM001.PC0LMPMO bold; /* Highlight error*/
      set PC0LM001.PC0LMDMO bold; /* Highlight error*/
      PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
    end

    if (SQLCA.VAGen_SQLCODE == -811) /* Row exists*/
      converseLib.validationFailed(112); /* Multiple po's exist*/
      set PC0LM001.PC0LMPYR cursor, bold; /* Highlight error*/
      set PC0LM001.PC0LMPMO bold; /* Highlight error*/
      set PC0LM001.PC0LMDMO bold; /* Highlight error*/
      PC0LM001.XXXPRCNM = "PC0L143"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
    end
  end


end // end PC0L143

// PROCESS VALID INPUT REQUEST
Function PC0L150()

   /* ------------------------------------------------------------*/
   /* PROCESS THE INPUT REQUEST. GO TO CHANGE OR INQUIRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && converseVar.validationMsgNum == 0) /* No message to display*/

    if (PC0LM001.PC0LMSEL == "I") /* Inquire request*/
      if (COMMAREA.CAINQFL == "Y") /* User can do inquiries*/
        PC0LW01.PC0LWMAP = "2"; /* Map 2 to be displayed*/
        PC0LW01.PC0LWFNC = "I"; /* Function code is inquire*/
        PC0LW01.PC0LWSWR = "Y"; /* Turn on request for data*/
        PC0LW01.PC0LWHAC = "N"; /* Header add/change flag eq N*/
        /* SET PC0LM001 CLEAR        ; Clear map1 on exit*/
      else
        converseLib.validationFailed(163); /* User does not have authority for*/
                                   /* selecti*/
        set PC0LM001.PC0LMSEL cursor, bold;
        PC0LM001.XXXPRCNM = "PC0L150"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
      end
    else
      if (PC0LM001.PC0LMSEL == "C") /* Change request*/
        if (COMMAREA.CACHGFL == "Y") /* User can do changes*/
        /* IF VPOHDR03.YPUCD EQ 'CL'*/
        /* OR VPOHDR03.YPUCD EQ 'FC'*/
        /* OR VPOHDR03.YPUCD EQ 'NC'*/
        /* OR VPOHDR03.YPUCD EQ 'CX';*/
          if (VPOHDR03.YPUCD == "CX")
            converseLib.validationFailed(65); /* Can not change po with this stat*/
            set PC0LM001.PC0LMSEL cursor, bold;
            PC0LM001.XXXPRCNM = "PC0L150"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
            exit stack;

          end
          if (PC0LM001.XGPCD == "01" /* Gpc code*/
           || PC0LM001.XGPCD == "02" /* Gpc code*/
           || PC0LM001.XGPCD == "03" /* Gpc code*/
           || PC0LM001.XGPCD == "07") /* Gpc code*/
            PC0LW01.PC0LWMAP = "2"; /* Map 2 to be displayed*/
            PC0LW01.PC0LWFNC = "C"; /* Function code is change*/
            PC0LW01.PC0LWSWR = "Y"; /* Turn on request for data*/
            PC0LW01.PC0LWHAC = "N"; /* Turn off add/chg. flag*/
            /* SET PC0LM001 CLEAR    ; Clear map1 on exit*/
          else
            converseLib.validationFailed(29); /* User does not have update authority*/
            set PC0LM001.PC0LMSEL cursor, bold;
            PC0LM001.XXXPRCNM = "PC0L150"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
          end
        else
          converseLib.validationFailed(29); /* User does not have update authority*/
          set PC0LM001.PC0LMSEL cursor, bold;
          PC0LM001.XXXPRCNM = "PC0L150"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
        end
      end
    end
  end


end // end PC0L150

// PROCESS INQUIRY MAP2
Function PC0L200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to INQUIRE/CHANGE P.O.s Proc-*/
   /* essing always returns to the top of this process and falls*/
   /* to subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC0L210(); /* Obtain the data to display*/

  PC0L220(); /* Format and display the map*/

  PC0L230(); /* Check attention identifier*/

  PC0L240(); /* Reset fields to normal intensity*/

  PC0L250(); /* Verify the entered data*/

  PC0L260(); /* Process valid input request*/


end // end PC0L200

// OBTAIN DATA TO DISPLAY
Function PC0L210()

  if (converseVar.validationMsgNum == 0 /* No messages*/
   && PC0LW01.PC0LWSWR == "Y")          /* Request for data is yes*/

    set VPOHDR03 empty; /* Clear the P.O. header record*/
    set PCYREC empty; /* Clear the passing record*/

  else

    return; /* Return to the previous process*/

  end

  if (PC0LW01.PC3PONBR > 0)
    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOHDR03.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
    PCYREC.PCYFUNC = "S "; /* Select unique*/
  else
    if (PC0LW01.PC3PONBR == 0)
      VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
      VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
      VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
      VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. id*/
      VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. order type*/
      PCYREC.PCYFUNC = "SA"; /* Select alternate*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Select a unique header row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PC0LS02(); /* Get P.O. header row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/

    PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD;

  else

    converseLib.validationFailed(18); /* No data to display*/
    PC0LM001.XXXPRCNM = "PC0L210"; /* Process name*/
    PC0LW01.PC0LWMAP = "1"; /* Set to map 1*/
    PC0LW01.PC0LWFNC = " "; /* Clear function code*/
    exit stack; /* Exit to display map 1*/
  end


end // end PC0L210

// FORMAT AND DISPLAY MAP
Function PC0L220()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/
    PC0L221(); /* Format the map data*/
    PC0L222(); /* Get descriptions from tables*/
    PC0L223(); /* Protect the map data*/
    PC0LWNSC = "N"; /* initialize the nsc flag*/
    PC0L325(); /* check for sap po*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -305)
      if (PCYREC.PCYCOUNT > 0
       && VPOITM05.XGPCD != "01") /* vramac*/
        PC0LWNSC = "Y";
      end
    end
    set PC0LM002.CATOAP cursor; /* Place cursor*/
  else
    set PC0LM002 alarm; /* Indicate sound alarm*/
  end


  PC0LM002.XGPCD = PC0LW01.XGPCD; /* Move GPC code to map2*/
  PC0LM002.XGPDESC = PC0LW01.XGPDESC; /* Move description map2*/

  PC0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0LM002.PC0LMFNC = "INQUIRY"; /* Iquiry literal*/

  converse PC0LM002 ;


end // end PC0L220

// FORMAT THE DATA
Function PC0L221()

   /* ------------------------------------------------------------*/
   /* MOVE THE VPOHDR03 INFORMATION TO THE MAP*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.XGPCD != "03")
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = PC0LW01.PC0LMPYR; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
  else
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = VPOHDR03.PCFSECD; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
    PC0LM002.TSEOXCC = VPOHDR03.TSEOXCC; /* ctry of origin*/
    PC0LM002.PC0LM-XCT-ORIG-CD = VPOHDR03.PC-XCT-ORIG-CD;
                                   /* mfg ctry of origin*/
  end
  if (VPOHDR03.XGPCD == "01"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. idyear*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id buy month*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id del. month*/
  end
  if (VPOHDR03.XGPCD == "07"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. idyear*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id buy month*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id del. month*/
  end


   /* ------------------------------------------------------------*/
   /* GET FACTORY INFORMATION TO THE MAP*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.FY1FCTYC > " ") /* Factory code is in record*/
    set VFCTY003 empty; /* Clear record*/
    VFCTY003.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
    VFCTY003.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/


    PC0LS01(); /* Factory look up*/


    if (SQLCA.VAGen_SQLCODE == 0 && 
    VFCTY003.XXXSTAT == "A")
      PC0LM002.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
      PC0LW01.XCTCD = VFCTY003.XCTCD; /* Factory country code*/
    else
      set PC0LM002.FY1FCTYC bold; /* Highlight error*/
      converseLib.validationFailed(32); /* P.O. type invalid*/
      PC0LM002.XXXPRCNM = "PC0L221"; /* Process name*/
    end
  end


  PC0LM002.PC3PONBR = VPOHDR03.PC3PONBR;
  PC0LM002.PC3ATTEN = VPOHDR03.PC3ATTEN; /* Attention name*/

   /* ------------------------------------------------------------*/
   /* SWITCH DATES TO MAP FORMAT*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.PC3STADT > 0) /* Status date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3STADT; /* Status date/Switch*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMSDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3MAILD > 0) /* Mail date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3MAILD; /* Mail date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMMDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3ACKDT > 0) /* Acknowledge date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3ACKDT;
                                   /* Acknowledge date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMADT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3NISFL == "Y" &&  /* NISSHO SNT FLAG*/
  VPOHDR03.PC3NISDT > 0)           /* NISSHOSNT DATE*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3NISDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMLDT = PC0LW01.PC0LWMDY; /* LC DATE*/
  end

  if (VPOHDR03.PC3PRTDT > 0) /* Print date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3PRTDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMPDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3CRDT > 0) /* Entry date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3CRDT; /* Entry date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMEDT = PC0LW01.PC0LWMDY;
  end

   /* ------------------------------------------------------------*/
   /* MOVE FIELDS TO MAP*/
   /* ------------------------------------------------------------*/

  PC0LM002.PC3ENTBY = VPOHDR03.PC3ENTBY; /* Entered by*/
  PC0LM002.PC3RCRFL = VPOHDR03.PC3RCRFL; /* Revolving credit flag*/
  PC0LM002.PC3ORDBY = VPOHDR03.PC3ORDBY; /* P.O. ordered by*/
  PC0LM002.PC3COMP = VPOHDR03.PC3COMP; /* Comp. number*/
  PC0LM002.PC3SHVIA = VPOHDR03.PC3SHVIA; /* Ship via*/
  PC0LM002.PC3FOBLC = VPOHDR03.PC3FOBLC; /* FOB shipping point*/
  PC0LM002.PC4ORTYP = VPOHDR03.PC4ORTYP; /* Type code*/
  PC0LM002.PC3SIFL = VPOHDR03.PC3SIFL; /* Special instruction flag*/
  PC0LM002.PC3REQNO = VPOHDR03.PC3REQNO; /* Req. number*/
  PC0LM002.PC3REQDP = VPOHDR03.PC3REQDP; /* Req. department*/
  PC0LM002.PC3LCPCT = VPOHDR03.PC3LCPCT * 100;
                                   /* convert dom l/c% scrn format*/
  PC0LM002.PC3LCNPC = VPOHDR03.PC3LCNPC * 100;
                                   /* convert nil l/c% scrn format*/

  if (VPOHDR03.XGPCD == "02") /* Footware*/
    PC0LM002.PC3CMPNT = VPOHDR03.PC3CMPNT; /* Component*/
    PC0LW01.XSECD = VPOHDR03.XSECD; /* Season code*/
    PC0LM002.XSECD = PC0LW01.XSECD; /* Season code*/
    PC0LW01.PC0LWAYR = VPOHDR03.PCFSEYR; /* Season year, num*/
    if (PC0LW01.PC0LWAYR == 0000) /* Season year, num*/
      PC0LM002.PC0LMSYR = " "; /* Season yy, cha*/
    else
      PC0LW01.PC0LWAYC = PC0LW01.PC0LWAYR; /* Season year, cha*/
      PC0LM002.PC0LMSYR = PC0LW01.PC0LWAYN; /* Season yy, cha*/
    end
  else
    PC0LW01.XSECD = " "; /* Season code*/
    PC0LM002.XSECD = PC0LW01.XSECD; /* Season code*/
    PC0LW01.PC0LWAYR = 00; /* Season year, num*/
    PC0LW01.PC0LWAYC = " "; /* Season year, cha*/
  end

  if (VPOHDR03.XGPCD == "03") /* Apperal*/
    PC0LM002.PC3BLPO = VPOHDR03.PC3BLPO; /* Blank p.o. number*/
    PC0LM002.IN7STNBR = VPOHDR03.IN7STNBR; /* Stock xfer number*/
    /* MOVE VPOHDR03.PO-LOCR-PMT-IND TO PC0LM002.PC0LPYID;*/
  end

  PC0LM002.PC0LPYID = VPOHDR03.PO-LOCR-PMT-IND;
                                   /* L/C Payment Indicator*/
   /* ----------------------------------------------------------*/
   /* TURN ON LITERIALS FOR MAP AND MOVE IN PF KEYS*/
   /* ----------------------------------------------------------*/

  set PC0LM002.PC0LMCXL skip, invisible; /* Hide customer ref. literal*/
  set PC0LM002.PC0LMWHL skip, invisible; /* Hide warehouse literal*/
  set PC0LM002.PC2CUXID skip, modified, invisible; /* Customer xref id*/
  set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO literal*/
  set PC0LM002.OP1CUOID skip, modified, invisible; /* SO*/
  set PC0LM002.OP1NORID skip, modified, invisible; /* SO*/
  set PC0LM002.XWHCD skip, modified, invisible; /* Warehouse code*/
  set PC0LM002.XWHABRV skip, modified, invisible; /* Warehouse abvr*/
  set PC0LM002.PC0LM3L initialAttributes; /* Turn on exit*/


end // end PC0L221

// GET DESC. FROM CORP. TABLES
Function PC0L222()

   /* ------------------------------------------------------------*/
   /* LOOK UP STATUS CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YPUCD = VPOHDR03.YPUCD; /* Status code*/
  if (VPOHDR03.YPUCD in YPUTBL.YPUCD)
    PC0LM002.YPUDESC = YPUTBL.YPUDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP HOLD CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YOHCD = VPOHDR03.YOHCD; /* Hold code*/
  if (VPOHDR03.YOHCD in YOHTBL.YOHCD)
    PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP ORDER TYPE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Clear record*/
  PC4REC.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
  PC4REC.PC4ORTYP = VPOHDR03.PC4ORTYP; /* Type code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  PC0LS04(); /* Select P.O. type row*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0LM002.PC4ORTYP = PC4REC.PC4ORTYP; /* Type code*/
    PC0LM002.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
    PC0LW01.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
    return; /* Return to previous process*/

  else

    set PC0LM002.PC4ORTYP bold; /* Type code*/
    PC0LM002.XXXPRCNM = "PC0L222"; /* Process name*/
    return; /* Return to previous process*/

  end


end // end PC0L222

// PROTECT THE MAP DATA
Function PC0L223()

   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS AUTOSkIP FOR ALL GPC'S*/
   /* ------------------------------------------------------------*/

  set PC0LM002.XGPCD skip; /* GPC code*/
  set PC0LM002.PC0LMPYR skip; /* P.O. id*/
  set PC0LM002.PC0LMPMO skip; /* P.O. id*/
  set PC0LM002.PC0LMDMO skip; /* P.O. id*/
  set PC0LM002.FY1FCTYC skip; /* Factory code*/
  set PC0LM002.PC3PONBR skip; /* P.O. number*/
  set PC0LM002.PC0LMSDT skip; /* Status date*/
  set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
  set PC0LM002.PC2CUXID skip, invisible; /* Customer*/
  set PC0LM002.OP1CUOID skip, invisible; /* sales order*/
  set PC0LM002.OP1NORID skip, invisible; /* sales order*/
  set PC0LM002.PC0LM-SO-LIT skip, invisible; /* sales order*/
  set PC0LM002.PC3ATTEN skip; /* Attention name*/
  set PC0LM002.PC0LMADT skip; /* Mail date*/
  set PC0LM002.PC3BLPO skip; /* Blank p.o. number*/
  set PC0LM002.PC0LMPDT skip; /* Print date*/
  set PC0LM002.IN7STNBR skip; /* Stock xfer number*/
  set PC0LM002.PC0LMMDT skip; /* Entry date*/
  set PC0LM002.PC0LMEDT skip; /* Entry date*/
  set PC0LM002.PC3ENTBY skip; /* Enter by*/
  set PC0LM002.PC3RCRFL skip; /* Revolving credit flag*/
  set PC0LM002.PC3ORDBY skip; /* P.O. ordered by*/
  set PC0LM002.PC3COMP skip; /* Comp. number*/
  set PC0LM002.PC3SHVIA skip; /* Ship via*/
  set PC0LM002.PC3FOBLC skip; /* FOB shipping point*/
  set PC0LM002.PC3REQNO skip; /* Requisition number*/
  set PC0LM002.PC3REQDP skip; /* Requisition department*/
  set PC0LM002.PC0LMLCP skip; /* dom Nego. l/c % literal*/
  set PC0LM002.PC0LMNPC skip; /* nil Nego. l/c % literal*/
  set PC0LM002.PC3LCPCT skip; /* dom Nego. l/c %*/
  set PC0LM002.PC3LCNPC skip; /* nil Nego. l/c %*/

   /* SET PC0LM002.PC3NISFL AUTOSKIP  ; Nissio flag*/
   /* SET PC0LM002.PC3LCDIN AUTOSKIP  ; Letter of credit det flag*/
   /* SET PC0LM002.PC3LCDSF AUTOSKIP  ; Letter of credit det sum f*/
  set PC0LM002.PC3SIFL skip; /* Special instruction flag*/

  set PC0LM002.YPUCD skip; /* Status code*/
  set PC0LM002.YOHCD skip; /* Hold code*/
  set PC0LM002.XWHCD skip, invisible; /* Warehouse code*/
  set PC0LM002.XWHABRV skip, invisible; /* Warehouse sdesc.*/
  set PC0LM002.PC0LMWHL skip, invisible; /* Warehouse literal*/
  set PC0LM002.PC0LMTOC skip; /* ctry of originliteral*/
  set PC0LM002.TSEOXCC skip; /* ctry of origin*/
  set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip; /* mfg ctry of origin litera*/
  set PC0LM002.PC0LM-XCT-ORIG-CD skip; /* mfg ctry of origin*/
  set PC0LM002.PC4ORTYP skip; /* Type code*/
  set PC0LM002.PC0LM15L skip, invisible;
  set PC0LM002.PC0LPMID skip; /* LC Payment Indicator literal*/
  set PC0LM002.PC0LPYID skip; /* LC Payment Indicator*/


   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS autoskipED FOR GPC'S 1,2,3*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PCWREC.XGPCD == "01"   
   || PC0LW01.XGPCD == "01"  
   || PC0LM002.XGPCD == "07" /* Posters*/
   || PCWREC.XGPCD == "07"   
   || PC0LW01.XGPCD == "07")

    set PC0LM002.PC0LMPOL skip; /* P.O. literal*/
    set PC0LM002.PC3BLPO skip, modified, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR skip, modified, invisible; /* Stock xfer number*/
    set PC0LM002.PC3RCRFL skip, modified, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP skip, modified, invisible; /* Comp. number*/
    set PC0LM002.PC3REQNO skip; /* Requisition nu*/
    set PC0LM002.PC3REQDP skip; /* Requisition de*/
    set PC0LM002.PC0LMCNL skip, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL skip, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC0LMBNL skip, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL skip, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC0LMSYL skip, invisible; /* Season/year literal*/
    set PC0LM002.XSECD skip, modified, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR skip, modified, invisible; /* Season year*/
    set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
    set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
    set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin literal*/
    set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                   /* mfg ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                   /* mfg ctry of origin*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "02" /* Footwear*/
   || PCWREC.XGPCD == "02"   /* Footwear*/
   || PC0LW01.XGPCD == "02")

    set PC0LM002.PC0LMBNL skip, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL skip, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC3PONBR skip; /* DARK  ; P.O. Number*/
    set PC0LM002.PC0LMPOL skip; /* DARK  ; P.O. Number*/
    set PC0LM002.PC3BLPO skip, modified, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR skip, modified, invisible; /* Stock xfer number*/
    set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin*/
    set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                   /* mfg ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                   /* mfg ctry of origin*/
    set PC0LM002.PC0LMSYL skip; /* Season/year literal*/
    set PC0LM002.XSECD skip; /* Season code*/
    set PC0LM002.PC0LMSYR skip; /* Season year*/
    set PC0LM002.PC0LMCML skip; /* Component literal*/
    set PC0LM002.PC3CMPNT skip; /* Component*/
    set PC0LM002.PC0LMLCP skip; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCPCT skip; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMNPC skip; /* nil Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC skip; /* nil Nego. l/c %*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "03" /* Apparel*/
   || PCWREC.XGPCD == "03"   /* Apparel*/
   || PC0LW01.XGPCD == "03")

    set PC0LM002.PC0LMCNL skip, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL skip, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC3PONBR skip; /* P.O. Number*/
    set PC0LM002.PC0LMPOL skip; /* P.O. Number literal*/
    set PC0LM002.PC3RCRFL skip, modified, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP skip, modified, invisible; /* Comp. number*/
    set PC0LM002.PC3REQNO skip; /* Requisition number*/
    set PC0LM002.PC3REQDP skip; /* Requisition department*/
    set PC0LM002.PC0LMSYL skip, invisible; /* Season/year literal*/
    set PC0LM002.XSECD skip, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR skip, invisible; /* Season year*/
    set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
    set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
    set PC0LM002.PC0LPMID skip; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip; /* LC Payment Indicator*/

  end


end // end PC0L223

// CHECK ATTENTION IDENTIFIERS
Function PC0L230()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
    
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC0LM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC0LM002.CAITEM; /* To item*/
      set PCWREC empty; /* Clear app. comm. area*/

      XSPCS01(); /* Exit to another application*/

      set PC0LM002.CATOAP cursor, bold; /* Highlight*/
      PC0LW01.PC0LWSWF = "N"; /* Format the map switch*/
      PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
      PC0LW01.PC0LWINF = "N"; /* Set error switch to 'y'*/

    else
      PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
      PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    PC0LW01.PC0LWINF = "N"; /* Set error switch to 'y'*/
    set PC0LM002.CATOAP cursor, bold; /* Highlight*/
    PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "I"; /* Application find code*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     && COMMAREA.CAFROMAP == "PC0U") /* From application*/
      PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
      PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
      PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
      PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
      PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

      XSPCS01(); /* Exit to another application*/

      set PC0LM002 initial;
      PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set PC0LM002 initial; /* Clear Map2*/
      PC0LW01.PC0LWMAP = "1"; /* Move to map 1*/
      PC0LW01.PC0LWFNC = " "; /* clear function*/
      PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
      COMMAREA.CAITEM = " "; /* Application find code*/
      exit stack; /* Move to the flow*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CAITEM = " "; /* Application find code*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CAITEM = " "; /* Application find code*/
      XSPCS01(); /* Exit to another application*/
    end

    set PC0LM002 initial;
    set PC0LM002.CATOAP cursor, bold; /* Highlight*/

    PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end


  if (converseVar.eventKey is pf6) /* PF6 was pressed*/

   /* IF PC0LWNSC = 'Y';*/
     /* MOVE 576 TO EZEMNO;*/
     /* EZEFLO;*/
   /* ELSE;*/

    COMMAREA.CATOAP = "PC0H"; /* To application*/
    PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
    COMMAREA.CAITEM = " "; /* Application find code*/
    PCWREC.PCWFNC[1] = "I"; /* Function code*/

    if (PC0LM002.XGPCD == "03") /* Apparel*/
      PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
    end
    PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
    PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
    PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
    PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
    PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

    XSPCS01();
                                   /* Transfer to the requested application*/

    set PC0LM002 initial;
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/
   /* END;*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (PC0LWNSC == "Y")
      converseLib.validationFailed(576);
      exit stack;
    else

      if (PC0LM002.XGPCD == "02") /* Footwear*/
        if (PC0LM002.PC4ORTYP == "FT" /* Footwear first*/
         || PC0LM002.PC4ORTYP == "OR" /* Footwear overrun*/
         || PC0LM002.PC4ORTYP == "S1" /* Side 1   first*/
         || PC0LM002.PC4ORTYP == "S4") /* Side 1   overrun*/

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
          converseLib.validationFailed(186); /* Can not transfer to pc0e*/
          exit stack; /* Exit to redisplay map2*/

        end /* ===> check Order Types*/
      end /* ===> GPC= '02'*/

      if (PC0LM002.XGPCD == "01" /* Promo*/
       || PC0LM002.XGPCD == "02" /* Footwear*/
       || PC0LM002.XGPCD == "07") /* posters*/
        if (PC0LM002.YPUCD == "OP" /* Open status*/
         || PC0LM002.YPUCD == "NC" /* Nike closed*/
         || PC0LM002.YPUCD == "FC") /* Factory closed*/

        else

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
          converseLib.validationFailed(65); /* Cannot change p.o. with this status*/
          set PC0LM002.CATOAP cursor, bold; /* To application*/
          exit stack; /* Exit to redisplay map2*/

        end
      end
      if (PC0LM002.XGPCD == "03") /* Apparel*/
        if (PC0LM002.YPUCD == "OP" /* Open status*/
         || PC0LM002.YPUCD == "NC" /* Nike closed*/
         || PC0LM002.YPUCD == "FC" /* Factory closed*/
         || PC0LM002.YPUCD == "IN") /* Incomplete*/

        else

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
          converseLib.validationFailed(65); /* Cannot change p.o with this status*/
          set PC0LM002.CATOAP cursor, bold; /* To application*/
          exit stack; /* Exit to redisplay map2*/

        end
      end
      COMMAREA.CATOAP = "PC0E"; /* To application*/
      PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
      COMMAREA.CAITEM = " "; /* Clear item*/
      PCWREC.PCWFNC[1] = "I"; /* Function code*/

      if (PC0LM002.XGPCD == "03") /* Apparel*/
        PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
      end

      PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
      PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
      PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
      PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
      PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

      XSPCS01();
                                   /* Transfer to the requested application*/

      set PC0LM002 initial;
      PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

    end
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/

    COMMAREA.CATOAP = "PC0J"; /* To application*/
    PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
    COMMAREA.CAITEM = " "; /* Application find code*/
    PCWREC.PCWFNC[1] = "I"; /* Function code*/

    if (PC0LM002.XGPCD == "03") /* Apparel*/
      PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
    end

    PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
    PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
    PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
    PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
    PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

    XSPCS01();
                                   /* Transfer to the requested application*/

    set PC0LM002 initial;
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/

    COMMAREA.CATOAP = "PC0M"; /* To application*/
    PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
    PCWREC.PCWFNC[1] = "I"; /* Function code*/
    COMMAREA.CAITEM = " "; /* Application find code*/

    if (PC0LM002.XGPCD == "03") /* Apparel*/
      PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
    end

    PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
    PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
    PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
    PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
    PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

    XSPCS01();
                                   /* Transfer to the requested application*/

    set PC0LM002 initial;
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    set PCWREC empty; /* Clear app. comm. area*/
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01();
                                   /* Transfer to the requested application*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf5   /* PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* PF6 was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf18  /* PF18 was not pressed*/
   && converseVar.eventKey not pf21) /* PF21 was not pressed*/

    PC0LM002.XXXPRCNM = "PC0L230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PC0L230

// RESET HIGHLIGHTED FIELDS
Function PC0L240()

   /* ------------------------------------------------------------*/
   /* Reset all field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0LM002.CAITEM initialAttributes; /* Commarea application data*/


end // end PC0L240

// VERIFY THE ENTERED DATA
Function PC0L250()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.CAITEM > " ") /* Application data was entered*/
    set PC0LM002.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on soft error*/
    PC0LM002.XXXPRCNM = "PC0L250"; /* Process name*/
  end


end // end PC0L250

// PROCESS THE VALID INPUT
Function PC0L260()

   /* ------------------------------------------------------------*/
   /* PROCESS THE VALID INPUT AND RESET MAP, FUNCTION, P.O. NBR,*/
   /* AND P.O. ID*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   && converseVar.validationMsgNum == 0) /* No message to display*/
    set PC0LM002 initial; /* Clear map 2*/
    PC0LW01.PC0LWMAP = "1"; /* Map 1 to be displayed*/
    PC0LW01.PC0LWFNC = " "; /* Function code*/
    PC0LW01.PC0LWSWR = "Y"; /* Turn on request for data*/
    PC0LW01.PC3PONBR = 0; /* Clear working storage P.O. number*/
    PC0LW01.PC0LWODT = 0; /* Clear working storage P.O. date*/
    PC0LW01.FY1FCTYC = " "; /* Clear working storage factory*/
  end


end // end PC0L260

// PROCESS CHANGE MAP2
Function PC0L300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE P.O.s.  Proc-*/
   /* essing always returns to the top of this process and falls*/
   /* to subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC0L310(); /* Obtain the data to display*/

  PC0L320(); /* Format and display the map*/

  PC0L330(); /* Check attention identifier*/

  PC0L340(); /* Reset fields to normal intensity*/

  PC0L350(); /* Verify the entered data*/

  PC0L360(); /* Process valid input request*/


end // end PC0L300

// OBTAIN DATA TO DISPLAY
Function PC0L310()

   /* ------------------------------------------------------------*/
    /* IF NO ERRORS AND REQUEST FOR DATA IS YES GET HEADER ROW*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWINF == "N" /* No messages*/
   && PC0LW01.PC0LWSWR == "Y") /* Request for data is yes*/

    set VPOHDR03 empty; /* Clear the P.O. header record*/
    set PCYREC empty; /* Clear the P.O. date pass record*/
    set PC0LW02 empty; /* Clear the P.O. type clone*/

  else

    return; /* Return to the previous process*/

  end

  if (PC0LW01.PC3PONBR > 0)
    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOHDR03.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
    PCYREC.PCYFUNC = "S "; /* Record function code*/
  else
    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
    VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. id*/
    VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. order type*/
    PCYREC.PCYFUNC = "SA"; /* Record function code*/
  end

   /* ------------------------------------------------------------*/
   /* Select a unique header row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PC0LS02(); /* Get P.O. header row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/

    PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD; /* P.O. REGION*/

  else

    converseLib.validationFailed(18); /* No data to display*/
    PC0LM001.XXXPRCNM = "PC0L310"; /* Process name*/
    PC0LW01.PC0LWMAP = "1"; /* Set to map 1*/
    PC0LW01.PC0LWFNC = " "; /* Clear function code*/
    exit stack; /* Exit to display map 1*/
  end


end // end PC0L310

// DISPLAY CHANGE MAP
Function PC0L320()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWINF == "N") /* No hard error*/
    if (PC0LW01.PC0LWSWR == "Y") /* Request for data is yes*/
      PC0L321(); /* Format the map data*/
      PC0L322(); /* Get descriptions from tables*/
      PC0L323(); /* Set map conditions*/
      PC0LWNSC = "N"; /* initialize the nsc flag*/
      PC0L325(); /* check for sap po*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -305)
        if (PCYREC.PCYCOUNT > 0
         && VPOITM05.XGPCD != "01") /* vramac*/
          PC0LM002.XXXPRCNM = "PC0L320"; /* Module identification*/
          set PC0LM002.PC4ORTYP skip;
          set PC0LM002.PC2CUXID skip;
          set PC0LM002.OP1CUOID skip;
          set PC0LM002.OP1NORID skip;
          set PC0LM002.XWHCD skip;
          set PC0LM002.PC3ATTEN skip;
          set PC0LM002.PC3BLPO skip;
          set PC0LM002.IN7STNBR skip;
          set PC0LM002.TSEOXCC skip;
          set PC0LM002.PC0LM-XCT-ORIG-CD skip;
          /* SET PC0LM002.PC0LMMDT AUTOSKIP;*/
          set PC0LM002.YOHCD skip;
          set PC0LM002.PC0LMADT skip;
          set PC0LM002.PC3RCRFL skip;
          set PC0LM002.XSECD skip;
          set PC0LM002.PC0LMSYR skip;
          set PC0LM002.PC3ORDBY skip;
          set PC0LM002.PC3COMP skip;
          set PC0LM002.PC3SHVIA skip;
          set PC0LM002.PC3FOBLC skip;
          set PC0LM002.PC3REQNO skip;
          set PC0LM002.PC3REQDP skip;
          set PC0LM002.PC3CMPNT skip;
          set PC0LM002.PC3LCPCT skip;
          set PC0LM002.PC3LCNPC skip;
          /* SET PC0LM002.PC0LPYID AUTOSKIP;*/
          set PC0LM002.PC3DMQTY skip;
          set PC0LM002.PC3NLQTY skip;
          set PC0LM002.PC3DMPRC skip;
          set PC0LM002.PC3NLPRC skip;
          set PC0LM002.PC0LMMSG initialAttributes; /* warning message*/
          set PC0LM002.PC0LMMDT cursor;
          /* SET PC0LM002.CATOAP CURSOR;*/
          /* SET PC0LM002 ALARM;      /* Indicate sound alarm*/
          /* MOVE 576 TO EZEMNO;      /* cannot maintain sap po's*/
          PC0LWNSC = "Y"; /* nsc confirmation flag*/
        end
      end
    end

    if (PCYREC.PCYCOUNT == 0)
      if (PC0LW01.XGPCD == "03") /* Apparel*/
        set PC0LM002.PC4ORTYP cursor; /* P.O. type*/
      else
        set PC0LM002.PC3ATTEN cursor; /* Attention To*/
      end
    end

  else
    set PC0LM002 alarm; /* Indicate sound alarm*/
  end

  PC0LM002.XGPCD = PC0LW01.XGPCD; /* Move GPC code to map2*/
  PC0LM002.XGPDESC = PC0LW01.XGPDESC;

  PC0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0LM002.PC0LMFNC = "CHANGE"; /* Change literal*/

  if (VPOHDR03.YPUCD == "CL"
   || VPOHDR03.YPUCD == "FC"
   || VPOHDR03.YPUCD == "NC"
   || VPOHDR03.YPUCD == "CX")
    set PC0LM002.PC0LMPYR skip; /* P.O. id*/
    set PC0LM002.PC0LMPMO skip; /* P.O. id*/
    set PC0LM002.PC0LMDMO skip; /* P.O. id*/
    set PC0LM002.FY1FCTYC skip; /* Factory code*/
    set PC0LM002.PC3PONBR skip; /* P.O. number*/
    set PC0LM002.PC0LMSDT skip; /* Status date*/
    set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
    set PC0LM002.PC2CUXID skip, invisible; /* Customer*/
    set PC0LM002.OP1CUOID skip, invisible; /* sales order*/
    set PC0LM002.OP1NORID skip, invisible; /* sales order*/
    set PC0LM002.PC0LM-SO-LIT skip, invisible; /* sales order*/
    set PC0LM002.PC3ATTEN skip; /* Attention name*/
    set PC0LM002.PC0LMADT skip; /* Mail date*/
    set PC0LM002.PC3BLPO skip; /* Blank p.o. number*/
    set PC0LM002.PC0LMPDT skip; /* Print date*/
    set PC0LM002.IN7STNBR skip; /* Stock xfer number*/
    set PC0LM002.PC0LMMDT skip; /* Entry date*/
    set PC0LM002.PC0LMEDT skip; /* Entry date*/
    set PC0LM002.PC3ENTBY skip; /* Enter by*/
    set PC0LM002.PC3RCRFL skip; /* Revolving credit flag*/
    set PC0LM002.PC3ORDBY skip; /* P.O. ordered by*/
    set PC0LM002.PC3COMP skip; /* Comp. number*/
    set PC0LM002.PC3SHVIA skip; /* Ship via*/
    set PC0LM002.PC3FOBLC skip; /* FOB shipping point*/
    set PC0LM002.PC3REQNO skip; /* Requisition number*/
    set PC0LM002.PC3REQDP skip; /* Requisition department*/
    set PC0LM002.PC0LMLCP skip; /* dom Nego. l/c % literal*/
    set PC0LM002.PC0LMNPC skip; /* nil Nego. l/c % literal*/
    set PC0LM002.PC3LCPCT skip; /* dom Nego. l/c %*/
    set PC0LM002.PC3LCNPC skip; /* nil Nego. l/c %*/

    /* SET PC0LM002.PC3NISFL AUTOSKIP  ; Nissio flag*/
    /* SET PC0LM002.PC3LCDIN AUTOSKIP  ; Letter of credit det flag*/
                      /* SET PC0LM002.PC3LCDSF AUTOSKIP  ;*/
                       /* Letter of credit det sum f*/
    set PC0LM002.PC3SIFL skip; /* Special instruction flag*/

    set PC0LM002.YPUCD skip; /* Status code*/
    set PC0LM002.YOHCD skip; /* Hold code*/
    set PC0LM002.XWHCD skip, invisible; /* Warehouse code*/
    set PC0LM002.XWHABRV skip, invisible; /* Warehouse sdesc.*/
    set PC0LM002.PC0LMWHL skip, invisible; /* Warehouse literal*/
    set PC0LM002.PC0LMTOC skip; /* ctry of originliteral*/
    set PC0LM002.TSEOXCC skip; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip;
                       /* mfg ctry of origin lit*/
    set PC0LM002.PC0LM-XCT-ORIG-CD skip; /* mfg ctry of origin*/
    set PC0LM002.PC4ORTYP skip; /* Type code*/
    set PC0LM002.PC0LM15L skip, invisible;
    set PC0LM002.PC0LPMID skip; /* LC Payment Indicator literal*/
    set PC0LM002.XSECD skip; /**/
    set PC0LM002.PC0LMSYR skip;
    set PC0LM002.PC3ATTEN skip;
    set PC0LM002.PC3CMPNT skip;
    set PC0LM002.PC3DMQTY skip;
    set PC0LM002.PC3NLQTY skip;
    set PC0LM002.PC3DMPRC skip;
    set PC0LM002.PC3NLPRC skip;
    set PC0LM002.PC0LPYID cursor;
  end
  converse PC0LM002 ;

  PC0LW01.PC0LWINF = "N"; /* Reset error flag*/
  PC0LW01.PC0LWUPD = "N"; /* Reset item update flag*/

   /* ------------------------------------------------------------*/
   /* CHECK FOR POP-UP WINDOW REQUEST*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    PC0L324(); /* Pop-up window check*/
  end


end // end PC0L320

// MOVE DATA TO MAP 2
Function PC0L321()

   /* ------------------------------------------------------------*/
   /* MOVE THE VPOHDR03 INFORMATION TO THE MAP*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.XGPCD != "03")
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = PC0LW01.PC0LMPYR; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
    PC0LM002.PC0LPYID = VPOHDR03.PO-LOCR-PMT-IND;
                                   /* L/C Payment Indicator*/
  else
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = VPOHDR03.PCFSECD; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
    PC0LM002.TSEOXCC = VPOHDR03.TSEOXCC; /* ctry of origin*/
    PC0LM002.PC0LM-XCT-ORIG-CD = VPOHDR03.PC-XCT-ORIG-CD;
                                   /* mfg ctry of origin*/
    PC0LM002.PC0LPYID = VPOHDR03.PO-LOCR-PMT-IND;
                                   /* L/C Payment Indicator*/
  end
  if (VPOHDR03.XGPCD == "01"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. id year*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id buy month*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id del. month*/
  end
  if (VPOHDR03.XGPCD == "07"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. id year*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id buy month*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id del. month*/
  end

   /* ------------------------------------------------------------*/
   /* GET FACTORY INFORMATION TO THE MAP*/
   /* ------------------------------------------------------------*/


  if (VPOHDR03.FY1FCTYC > " ") /* Factory code in record*/
    set VFCTY003 empty; /* Clear record*/
    VFCTY003.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
    VFCTY003.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/

    PC0LS01(); /* Factory look up*/

    if (SQLCA.VAGen_SQLCODE == 0 && 
    VFCTY003.XXXSTAT == "A")
      PC0LM002.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
      PC0LW01.XCTCD = VFCTY003.XCTCD; /* Factory country code*/
    else
      set PC0LM002.FY1FCTYC bold; /* Highlight error*/
      converseLib.validationFailed(32); /* Factory type invalid*/
      PC0LM002.XXXPRCNM = "PC0L321"; /* Process name*/
      PC0LW01.PC0LWINF = "N"; /* Move n to error flag*/
    end
  end


  PC0LM002.PC3PONBR = VPOHDR03.PC3PONBR;
  PC0LM002.PC3ATTEN = VPOHDR03.PC3ATTEN; /* Attention name*/

   /* ------------------------------------------------------------*/
   /* SWITCH DATES AROUND TO FIT THE MAP*/
   /* ------------------------------------------------------------*/
  if (VPOHDR03.PC3STADT > 0) /* Status date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3STADT; /* Status date/Switch*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMSDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3MAILD > 0) /* Mail date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3MAILD; /* Mail date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LW01.PC0LMMDT = PC0LW01.PC0LWMDY;
    PC0LM002.PC0LMMDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3ACKDT > 0) /* Acknowledge date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3ACKDT;
                                   /* Acknowledge date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LW01.PC0LMADT = PC0LW01.PC0LWMDY;
    PC0LM002.PC0LMADT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3NISFL == "Y" &&  /* NISSHO SNT FLAG*/
  VPOHDR03.PC3NISDT > 0)           /* NISSHOSNT DATE*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3NISDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMLDT = PC0LW01.PC0LWMDY; /* LC DATE*/
  end

  if (VPOHDR03.PC3PRTDT > 0) /* Print date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3PRTDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LW01.PC0LMPDT = PC0LW01.PC0LWMDY;
    PC0LM002.PC0LMPDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3CRDT > 0) /* Entry date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3CRDT; /* Entry date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMEDT = PC0LW01.PC0LWMDY;
  end

   /* ------------------------------------------------------------*/
   /* IF GPC IS 02 MOVE IN SEASON CODE AND YEAR*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.XGPCD == "02") /* Footware*/
    PC0LW01.XSECD = VPOHDR03.XSECD; /* Season code*/
    PC0LM002.XSECD = PC0LW01.XSECD; /* Season code*/
    PC0LW01.PC0LWAYR = VPOHDR03.PCFSEYR; /* Season year, num*/
    if (PC0LW01.PC0LWAYR == 0000) /* Season year, num*/
      PC0LM002.PC0LMSYR = " "; /* Season yy, cha*/
    else
      PC0LW01.PC0LWAYC = PC0LW01.PC0LWAYR; /* Season year, cha*/
      PC0LM002.PC0LMSYR = PC0LW01.PC0LWAYN; /* Season yy, cha*/
    end
  else
    PC0LW01.XSECD = " "; /* Season code*/
    PC0LM002.XSECD = PC0LW01.XSECD; /* Season code*/
    PC0LW01.PC0LWAYR = 00; /* Season year, num*/
    PC0LW01.PC0LWAYC = " "; /* Season year, cha*/
  end

   /* ------------------------------------------------------------*/
   /* IF GPC IS 03, check for single or multiple destinations for*/
   /* a given po.  if single destination exists move in cust xref*/
   /* and/or warehouse codes.  if multiple destinations exists*/
   /* cust xref and whse codes are left blank and a warning*/
   /* message is flashed on the screen.*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.XGPCD == "03") /* apparel*/

    /* ------------------------------------------------------------*/
     /* if the po header status is not an incomplete one, then*/
     /* read for whse and cust xref codes on the po items.*/
    /* ------------------------------------------------------------*/
    if (VPOHDR03.YPUCD != "IN") /* no incomplete statuses*/

      PC0LS40(); /* check for multiple po dests.*/

      PC0LM002.PC2CUXID = PC0LW01.PC2CUXID; /* cust xref*/
      PC0LM002.XWHCD = PC0LW01.XWHCD; /* warehouse*/
      PC0LM002.OP1CUOID = PC0LW01.OP1CUOID; /* SO #*/
      PC0LM002.OP1NORID = PC0LW01.OP1NORID; /* SO #*/
    end
  end

   /* ------------------------------------------------------------*/
   /* MOVE IN THE REST OF THE RECORD*/
   /* ------------------------------------------------------------*/

  PC0LM002.PC3BLPO = VPOHDR03.PC3BLPO; /* Blank p.o. number*/
  PC0LM002.IN7STNBR = VPOHDR03.IN7STNBR; /* Stock xfer number*/
  PC0LM002.PC3ENTBY = VPOHDR03.PC3ENTBY; /* Entered by*/
  PC0LM002.PC3RCRFL = VPOHDR03.PC3RCRFL; /* Revolving credit flag*/
  PC0LM002.PC3ORDBY = VPOHDR03.PC3ORDBY; /* P.O. ordered by*/
  PC0LM002.PC3COMP = VPOHDR03.PC3COMP; /* Comp. number*/
  PC0LM002.PC3SHVIA = VPOHDR03.PC3SHVIA; /* Ship via*/
  PC0LM002.PC3FOBLC = VPOHDR03.PC3FOBLC; /* FOB shipping point*/
  PC0LM002.PC3REQNO = VPOHDR03.PC3REQNO; /* Requisition number*/
  PC0LM002.PC3REQDP = VPOHDR03.PC3REQDP; /* Requisition department*/
  PC0LM002.PC3CMPNT = VPOHDR03.PC3CMPNT; /* Component*/
  PC0LM002.PC3LCPCT = VPOHDR03.PC3LCPCT * 100;
                                   /* convert dom l/c % scrn format*/
  PC0LM002.PC3LCNPC = VPOHDR03.PC3LCNPC * 100;
                                   /* convert nil l/c % scrn format*/

  PC0LM002.PC3DMQTY = PC0LW01.PC3DMQTY; /* dom l/c adj. qty*/
  PC0LM002.PC3DMPRC = PC0LW01.PC3DMPRC; /* dom l/c adj. prc*/
  PC0LM002.PC3NLQTY = PC0LW01.PC3NLQTY; /* nil l/c adj. qty*/
  PC0LM002.PC3NLPRC = PC0LW01.PC3NLPRC; /* nil l/c adj. prc*/

  PC0LM002.PC3SIFL = VPOHDR03.PC3SIFL; /* Special inst. flag*/
  PC0LW01.ZZZCHGCT = VPOHDR03.ZZZCHGCT; /* Change count*/


end // end PC0L321

// GET DESC. FROM TABLES
Function PC0L322()

   /* ------------------------------------------------------------*/
   /* LOOK UP STATUS CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YPUCD = VPOHDR03.YPUCD; /* Status code*/
  if (VPOHDR03.YPUCD in YPUTBL.YPUCD)
    PC0LM002.YPUDESC = YPUTBL.YPUDESC[sysVar.arrayIndex];
  end
  PC0LW01.YPUCD = VPOHDR03.YPUCD; /* Status code*/
  if (VPOHDR03.YPUCD in YPUTBL.YPUCD)
    PC0LW01.YPUDESC = YPUTBL.YPUDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP HOLD CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YOHCD = VPOHDR03.YOHCD; /* Hold code*/
  if (VPOHDR03.YOHCD in YOHTBL.YOHCD)
    PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
  end
  PC0LW01.YOHCD = VPOHDR03.YOHCD; /* Hold code*/
  if (VPOHDR03.YOHCD in YOHTBL.YOHCD)
    PC0LW01.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP ORDER TYPE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Clear record*/
  PC4REC.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
  PC4REC.PC4ORTYP = VPOHDR03.PC4ORTYP; /* P.O. type*/


  PC0LS04(); /* P.O. type edit call*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0LW01.PC4ORTYP = PC4REC.PC4ORTYP; /* Type code*/
    PC0LW01.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
    PC0LM002.PC4ORTYP = PC4REC.PC4ORTYP; /* Type code*/
    PC0LM002.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
    PC0LW02.PC0LWGRP = PC4REC.PC4GROUP; /* Type clone*/
  else
    set PC0LM002.PC4ORTYP bold; /* Highlight error*/
    converseLib.validationFailed(33); /* P.O. type missing or invalid*/
    PC0LW01.PC0LWINF = "N"; /* Turn on hard error*/
    PC0LM002.XXXPRCNM = "PC0L322"; /* Process name*/
  end


end // end PC0L322

// SET MAP CONDITIONS
Function PC0L323()

   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS AUTOSKIPED FOR ALL GPC'S*/
   /* ------------------------------------------------------------*/

  set PC0LM002.XGPCD skip; /* Gpc code*/
  set PC0LM002.YPUCD skip; /* Status code*/
  set PC0LM002.PC0LMSDT skip; /* Status date*/
  set PC0LM002.PC3PONBR skip; /* P.O. number*/
  set PC0LM002.PC0LMPYR skip; /* P.O. ID year*/
  set PC0LM002.PC0LMPMO skip; /* Buy month*/
  set PC0LM002.PC0LMDMO skip; /* Delivery month*/
  set PC0LM002.FY1FCTYC skip; /* Factory code*/
  set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin literal*/
  set PC0LM002.TSEOXCC skip, invisible; /* ctry of origin code*/
  set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                   /* mfg ctry of origin*/
  set PC0LM002.PC0LM-XCT-ORIG-CD skip, invisible; /* mfg ctry of origin*/
  set PC0LM002.PC0LMPDT skip; /* Print date*/
  set PC0LM002.PC0LMEDT skip; /* Entered date*/
  set PC0LM002.PC3ENTBY skip; /* Entered by*/
  set PC0LM002.PC0LM15L skip, invisible; /* Cancel literal*/
  set PC0LM002.PC3SIFL skip; /* Special instruction flag*/
  set PC0LM002.PC3REQNO initialAttributes; /* Requisition number*/
  set PC0LM002.PC3REQDP initialAttributes; /* Requisition department*/
  set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
  set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
  set PC0LM002.PC3LCPCT skip; /* dom Nego. l/c %*/
  set PC0LM002.PC0LMLCP skip; /* dom Nego. l/c % literal*/
  set PC0LM002.PC3LCNPC skip; /* nil Nego. l/c %*/
  set PC0LM002.PC0LMNPC skip; /* nil Nego. l/c % literal*/
  set PC0LM002.PC0LDMQL initialAttributes; /* dom l/c adj qty literal*/
  set PC0LM002.PC3DMQTY initialAttributes; /* dom l/c adj qty*/
  set PC0LM002.PC0LDMPL initialAttributes; /* dom l/c adj prc literal*/
  set PC0LM002.PC3DMPRC initialAttributes; /* dom l/c adj prc*/
  set PC0LM002.PC0LNLQL initialAttributes; /* nil l/c adj qty literal*/
  set PC0LM002.PC3NLQTY initialAttributes; /* nil l/c adj qty*/
  set PC0LM002.PC0LNLPL initialAttributes; /* nil l/c adj prc literal*/
  set PC0LM002.PC3NLPRC initialAttributes; /* nil l/c adj prc*/
  set PC0LM002.PC0LPMID skip; /* L/C Pmt Ind literal*/
  set PC0LM002.PC0LPYID skip; /* L/C Pmt Ind*/


  if (PC0LW01.PC0LWINF == "N") /* No message*/

    /* ------------------------------------------------------------*/
      /* SET THE FOLLOWING FIELDS AUTOSKIPED FOR GPC'S 1 & 7*/
    /* ------------------------------------------------------------*/

    if (PC0LW01.XGPCD == "01" /* Salesmans sample*/
     || PCWREC.XGPCD == "01"  
     || PC0LM001.XGPCD == "01"
     || PC0LW01.XGPCD == "07" /* Posters*/
     || PCWREC.XGPCD == "07"  
     || PC0LM001.XGPCD == "07")

      set PC0LM002.PC0LMCNL skip, invisible; /* Comp. number literal*/
      set PC0LM002.PC0LMLCL skip, invisible; /* Revolving credit flag literal*/
      set PC0LM002.PC0LMBNL skip, invisible; /* Blank p.o. number literal*/
      set PC0LM002.PC0LMSXL skip, invisible; /* Stock xfer number literal*/
      set PC0LM002.PC4ORTYP skip; /* Type code*/
      set PC0LM002.PC0LMSYL skip, invisible; /* Season/year literal*/
      set PC0LM002.XSECD skip, invisible; /* Season code*/
      set PC0LM002.PC0LMSYR skip, invisible; /* Season year*/
      set PC0LM002.XWHABRV skip, invisible; /* Whse abrev*/
      set PC0LM002.XWHCD skip, invisible; /* Whse code*/
      set PC0LM002.PC0LMWHL skip, invisible; /* Whse literal*/
      set PC0LM002.PC2CUXID skip, invisible; /* Cust. id*/
      set PC0LM002.PC0LMCXL skip, invisible; /* Cust. literal*/
      set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO literal*/
      set PC0LM002.OP1CUOID skip, invisible; /* so number*/
      set PC0LM002.OP1NORID skip, invisible; /* so number*/
      set PC0LM002.PC3PONBR skip; /* P.O. Number*/
      set PC0LM002.PC3BLPO skip, invisible; /* Blank p.o. number*/
      set PC0LM002.IN7STNBR skip, invisible; /* Stock xfer number*/
      set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin literal*/
      set PC0LM002.TSEOXCC skip, invisible; /* ctry of origin code*/
      set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                   /* mfg ctry of origin*/
      set PC0LM002.PC0LM-XCT-ORIG-CD skip, invisible; /* mfg ctry of origin*/
      set PC0LM002.PC3RCRFL skip, invisible; /* Revolving credit flag*/
      set PC0LM002.PC3COMP skip, invisible; /* Comp. number*/
      set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
      set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
      set PC0LM002.PC0LPMID skip, invisible; /* L/C Payment Indicator literal*/
      set PC0LM002.PC0LPYID skip, invisible; /* L/C Payment Indicator*/

    end

    if (PC0LW01.XGPCD == "02" /* Footwear*/
     || PCWREC.XGPCD == "02"  
     || PC0LM001.XGPCD == "02")

      set PC0LM002.PC0LMBNL skip, invisible; /* Blank p.o. number literal*/
      set PC0LM002.PC0LMSXL skip, invisible; /* Stock xfer number literal*/
      set PC0LM002.PC4ORTYP skip; /* Type code*/
      set PC0LM002.PC3BLPO skip, invisible; /* Blank p.o. number*/
      set PC0LM002.IN7STNBR skip, invisible; /* Stock xfer number*/
      set PC0LM002.XWHABRV skip, invisible; /* Warehouse abrv.*/
      set PC0LM002.XWHCD skip, invisible; /* Whse. code*/
      set PC0LM002.PC0LMWHL skip, invisible; /* Whse. Literal*/
      set PC0LM002.PC2CUXID skip, invisible; /* Customer code*/
      set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
      set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO literal*/
      set PC0LM002.OP1CUOID skip, invisible; /* so number*/
      set PC0LM002.OP1NORID skip, invisible; /* so number*/
      set PC0LM002.PC3RCRFL initialAttributes; /* Revolving credit flag*/
      set PC0LM002.PC3COMP initialAttributes; /* Comp. number*/
      set PC0LM002.PC0LMSYL initialAttributes; /* Season/year literal*/
      set PC0LM002.XSECD initialAttributes; /* Season code*/
      set PC0LM002.PC0LMSYR initialAttributes; /* Season year*/
      set PC0LM002.PC0LMCNL initialAttributes; /* Comp. number literal*/
      set PC0LM002.PC0LMLCL initialAttributes; /* Revolving credit flag literal*/
      set PC0LM002.PC3RCRFL initialAttributes; /* Revolving credit flag*/
      set PC0LM002.PC0LMCML initialAttributes; /* Component literal*/
      set PC0LM002.PC3CMPNT initialAttributes; /* Component*/
      set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
      set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
      set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
      set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
      set PC0LM002.PC0LDMQL skip; /* dom l/c adj qty literal*/
      set PC0LM002.PC3DMQTY normal; /* dom l/c adj qty*/
      set PC0LM002.PC0LDMPL skip; /* dom l/c adj prc literal*/
      set PC0LM002.PC3DMPRC normal; /* dom l/c adj prc*/
      set PC0LM002.PC0LNLQL skip; /* nil l/c adj qty literal*/
      set PC0LM002.PC3NLQTY normal; /* nil l/c adj qty*/
      set PC0LM002.PC0LNLPL skip; /* nil l/c adj prc literal*/
      set PC0LM002.PC3NLPRC normal; /* nil l/c adj prc*/
                                  /* SET PC0LM002.PC0LPMID*/
                                   /* AUTOSKIP,DARK;/* L/C Payment*/
                                   /* Indicator literal*/
      set PC0LM002.PC0LPMID initialAttributes; /* L/C Payment Indicator literal*/
      /* SET PC0LM002.PC0LPYID AUTOSKIP,DARK;/* L/C Payment Indicator*/
      set PC0LM002.PC0LPYID initialAttributes; /* L/C Payment Indicator*/

    end

    if (PC0LW01.XGPCD == "03" /* Apparel*/
     || PCWREC.XGPCD == "03"  
     || PC0LM001.XGPCD == "03")

      set PC0LM002.PC0LMTOC initialAttributes; /* ctry of origin literal*/
      set PC0LM002.TSEOXCC initialAttributes; /* ctry of origin code*/
      set PC0LM002.PC0LMCNL skip, invisible; /* Comp. number literal*/
      set PC0LM002.PC0LM-XCT-ORIG-LITERAL initialAttributes;
                                   /* mfg ctry of origin*/
      set PC0LM002.PC0LM-XCT-ORIG-CD initialAttributes; /* mfg ctry of origin*/
      set PC0LM002.PC0LMLCL skip, invisible; /* Revolving credit flag literal*/
      set PC0LM002.PC3RCRFL skip, invisible; /* Revolving credit flag*/
      set PC0LM002.PC3COMP skip, invisible; /* Comp. number*/
      set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
      set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
      set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
      set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
      set PC0LM002.PC0LMPDT initialAttributes; /* Print Date*/
      /* IF COMMAREA.CACLVL(10) EQ 'Y';/* ===> Pmt security flag*/
      set PC0LM002.PC0LPYID initialAttributes; /* L/C Payment Indicator*/
      /* END;*/

      if (VPOHDR03.YPUCD == "IN") /* Status incomplete*/
        set PC0LM002.XWHABRV skip, invisible; /* Whse abrev*/
        set PC0LM002.XWHCD skip, invisible; /* Whse code*/
        set PC0LM002.PC0LMWHL skip, invisible; /* Whse literal*/
        set PC0LM002.PC2CUXID skip, invisible; /* Cust. id*/
        set PC0LM002.PC0LMCXL skip, invisible; /* Cust. literal*/
        set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO literal*/
        set PC0LM002.OP1CUOID skip, invisible; /* so number*/
        set PC0LM002.OP1NORID skip, invisible; /* so number*/
      else
        if (PC0LW01.PC0LWMFL != "Y") /* single dests exist*/
          set PC0LM002.XWHABRV initialAttributes; /* Whse. abrv.*/
          set PC0LM002.XWHCD initialAttributes; /* Whse code*/
          set PC0LM002.PC0LMWHL initialAttributes; /* Whse. literal*/
          set PC0LM002.PC2CUXID initialAttributes; /* Customer code*/
          set PC0LM002.PC0LMCXL initialAttributes; /* Customer literal*/
          set PC0LM002.PC0LM-SO-LIT initialAttributes; /* SO literal*/
          set PC0LM002.OP1CUOID initialAttributes; /* so number*/
          set PC0LM002.OP1NORID initialAttributes; /* so number*/
          set PC0LM002.PC0LMMSG initialAttributes; /* warning message*/
        else
          if (PC0LW01.PC0LWMFL == "Y") /* multiple dests exist*/
            set PC0LM002.XWHABRV skip; /* Whse abrev*/
            set PC0LM002.XWHCD skip; /* Whse code*/
            set PC0LM002.PC0LMWHL skip; /* Whse literal*/
            set PC0LM002.PC2CUXID skip; /* Cust. id*/
            set PC0LM002.PC0LMCXL skip; /* Cust. literal*/
            set PC0LM002.PC0LM-SO-LIT skip; /* SO literal*/
            set PC0LM002.OP1CUOID skip; /* so number*/
            set PC0LM002.OP1NORID skip; /* so number*/
            set PC0LM002.PC0LMMSG skip, bold; /* flash warning message*/
          end
        end
      end

      set PC0LM002.PC0LMSYL skip, invisible; /* Season/year literal*/
      set PC0LM002.XSECD skip, invisible; /* Season code*/
      set PC0LM002.PC0LMSYR skip, invisible; /* Season year*/

    end

    /* ------------------------------------------------------------*/
      /* IF CANCEL CONFIRM FLAG ON AUTOSKIP ALL FIELDS*/
      /* IF HEADER ADDED/CHANGED FLAG ON AUTOSKIP ALL FIELDS*/
    /* ------------------------------------------------------------*/

    if (PC0LW01.PC0LWHAC == "Y") /* Header added/changed on*/

      set PC0LM002.PC0LMPYR skip; /* P.O. id*/
      set PC0LM002.PC0LMPMO skip; /* P.O. id*/
      set PC0LM002.PC0LMDMO skip; /* P.O. id*/
      set PC0LM002.FY1FCTYC skip; /* Factory code*/

      set PC0LM002.PC3PONBR skip; /* P.O. number*/
      set PC0LM002.PC0LMSDT skip; /* Status date*/
      set PC0LM002.PC2CUXID skip; /* Customer*/
      set PC0LM002.OP1CUOID skip; /* so*/
      set PC0LM002.OP1NORID skip; /* so*/
      set PC0LM002.PC3ATTEN skip; /* Attention name*/
      set PC0LM002.PC0LMADT skip; /* Mail date*/
      set PC0LM002.PC3BLPO skip; /* Blank p.o. number*/
      set PC0LM002.PC0LMPDT skip; /* Print date*/
      set PC0LM002.IN7STNBR skip; /* Stock xfer number*/
      set PC0LM002.PC0LMEDT skip; /* Entry date*/
      set PC0LM002.PC3ENTBY skip; /* Enter by date*/
      set PC0LM002.TSEOXCC skip; /* ctry of origin code*/
      set PC0LM002.PC0LM-XCT-ORIG-CD skip; /* mfg ctry of origin*/
      set PC0LM002.PC3RCRFL skip; /* Revolving credit flag*/
      set PC0LM002.PC3ORDBY skip; /* P.O. ordered by*/
      set PC0LM002.PC3COMP skip; /* Comp. number*/
      set PC0LM002.PC3SHVIA skip; /* Ship via*/
      set PC0LM002.PC3FOBLC skip; /* FOB shipping point*/
      set PC0LM002.PC3REQNO skip; /* Requisition number*/
      set PC0LM002.PC3REQDP skip; /* Requisition department*/
      set PC0LM002.PC3CMPNT skip; /* Component*/
      set PC0LM002.PC3DMQTY skip; /* dom l/c adj qty*/
      set PC0LM002.PC3DMPRC skip; /* dom l/c adj prc*/
      set PC0LM002.PC3NLQTY skip; /* nil l/c adj qty*/
      set PC0LM002.PC3NLPRC skip; /* nil l/c adj prc*/

      set PC0LM002.YPUCD skip; /* Status code*/
      set PC0LM002.YOHCD skip; /* Hold code*/
      set PC0LM002.XWHCD skip; /* Warehouse code*/
      set PC0LM002.PC4ORTYP skip; /* Type code*/
      set PC0LM002.CATOAP cursor; /* Place cursor*/

    end
  end

   /* ------------------- end of PC0L323 ----------------------------*/
end // end PC0L323

// PERFORM POP-UP WINDOW
Function PC0L324()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0LM002.XWHCD == "?" /* if ? in whse code field*/
   || PC0LM002.YOHCD == "?" /* if ? in hold code field*/
   || PC0LM002.YPUCD == "?" /* if ? in status code field*/
   || PC0LM002.XSECD == "?") /* if ? in season code field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (PC0LM002.XWHCD == "?") /* if ? in Whse. code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "            WAREHOUSE CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXWH01(); /* perform Whse. code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Whse.      **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      PC0LM002.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move code*/
      set PC0LM002.XWHCD cursor, modified;
    else
      PC0LM002.XWHCD = PC0LW01.XWHCD; /* move code*/
      PC0LM002.XWHABRV = PC0LW01.XWHABRV; /* move code*/
      set PC0LM002.XWHCD cursor, modified;
    end
  end

  if (PC0LM002.YOHCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                HOLD CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYOH01(); /* perform hold code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the HOLD       **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.YOHCD = YOHTBL.YOHCD[XX0XWPIX]; /* move code*/
      PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[XX0XWPIX]; /* move sdesc.*/
      set PC0LM002.YOHCD cursor;
    else
      PC0LM002.YOHCD = PC0LW01.YOHCD; /* move code*/
      PC0LM002.YOHSDESC = PC0LW01.YOHSDESC; /* move sdesc.*/
      set PC0LM002.YOHCD cursor;
    end
  end

  if (PC0LM002.YPUCD == "?") /* if ? in status code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              STATUS CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYPU01(); /* perform stat code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the STATUS     **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.YPUCD = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      PC0LM002.YPUDESC = YPUTBL.YPUDESC[XX0XWPIX]; /* move sdesc.*/
      set PC0LM002.YPUCD cursor;
    else
      PC0LM002.YPUCD = PC0LW01.YPUCD; /* move code*/
      PC0LM002.YPUDESC = PC0LW01.YPUDESC; /* move sdesc.*/
      set PC0LM002.YPUCD cursor;
    end
  end


  if (PC0LM002.XSECD == "?") /* if ? in Season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform Season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Season     **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      set PC0LM002.XSECD cursor, modified;
    else
      PC0LM002.XSECD = PC0LW01.XSECD; /* clear fields*/
      set PC0LM002.XSECD cursor, modified;
    end
  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(84); /* Hit enter to process*/
  PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/

  exit stack; /* Exit to redisplay map2*/


end // end PC0L324

// Check for SAP PO#
Function PC0L325()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for checking sap po#*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/

  VPOITM05.XGPCD = VPOHDR03.XGPCD;
  VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD;
  VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR;
  PCYREC.PCYCOUNT = 0;
   /* ------------------------------------------------------------*/
   /* count if any sap po# is there in Item table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "T9";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
  if (sysVar.errorCode == "00000000" /* Good call*/
   && (SQLCA.VAGen_SQLCODE == 0      /* Row found*/
   || SQLCA.VAGen_SQLCODE == -305))  /* NULL Indicator*/

    return; /* Return to previous process*/

  else

    if (sysVar.errorCode == "00000000" /* Good call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end

    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0L325"; /* Process name*/
    TA1REC.TA1LOC = "COUNT SAP PO #  ";
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
    PC0LW03.PC0LW3KY = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
    TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
      PC0LM001.XXXPRCNM = "PC0L325"; /* Process name*/
      converseLib.clearScreen();
       /* Reset map 1*/
    end
    if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
      PC0LM002.XXXPRCNM = "PC0L325"; /* Process name*/
      converseLib.clearScreen();
       /* Reset map 2*/
    end

    exit stack; /* Exit to redisplay map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0LS02 ***********************/
end // end PC0L325

// CHECK ATTENTION IDENTIFIERS
Function PC0L330()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
    
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    PC0LW01.PC0LWSWR = "N"; /* Request for data is n*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PC0LM002.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC0LM002.CAITEM; /* To item*/
      set PCWREC empty; /* Clear out app. comm. area*/

      XSPCS01(); /* Exit to another application*/

      set PC0LM002.CATOAP cursor, bold; /* Highlight*/

      PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
      PC0LW01.PC0LWSWF = "N"; /* Format the map switch*/
      PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
    else
      PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
      PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set PC0LM002.CATOAP cursor, bold; /* To application*/
    PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    if (PC0LM002.YPUCD == "OP" /* Open status*/
     || PC0LM002.YPUCD == "IN" /* Incomplete status*/
     || PC0LM002.YPUCD == "FC" /* factory closed*/
     || PC0LM002.YPUCD == "NC") /* nike closed*/

        /* NEXT SENTENCE*/

    else

      PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
      PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
      set PC0LM002.CATOAP cursor, bold; /* To application*/
      exit stack; /* Exit to redisplay map2*/

    end
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (PC0LWNSC == "Y") /* if sap po, no item addition*/
      converseLib.validationFailed(576);
      exit stack;
    else
      if (PC0LM002.XGPCD == "02") /* Footwear*/
        if (PC0LM002.PC4ORTYP == "FT" /* Footwear first*/
         || PC0LM002.PC4ORTYP == "OR" /* Footwear overrun*/
         || PC0LM002.PC4ORTYP == "S1" /* Side 1   first*/
         || PC0LM002.PC4ORTYP == "S4") /* Side 1 overrun*/

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
          converseLib.validationFailed(186); /* Can not transfer to pc0e*/
          exit stack; /* Exit to redisplay map2*/

        end /* ===> Order Type check*/
      end /* ===> GPC = '02'*/

      if (PC0LM002.XGPCD == "01" /* Promo*/
       || PC0LM002.XGPCD == "02" /* Footwear*/
       || PC0LM002.XGPCD == "07") /* Posters*/
        if (PC0LM002.YPUCD == "OP" /* Open status*/
         || PC0LM002.YPUCD == "NC" /* Nike closed*/
         || PC0LM002.YPUCD == "FC") /* Factory closed*/

        else

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
          converseLib.validationFailed(65); /* Cannot change p.o. with this status*/
          set PC0LM002.CATOAP cursor, bold; /* To application*/
          exit stack; /* Exit to redisplay map2*/

        end
      end
      if (PC0LM002.XGPCD == "03") /* Apparel*/
        if (PC0LM002.YPUCD == "OP" /* Open status*/
         || PC0LM002.YPUCD == "NC" /* Nike closed*/
         || PC0LM002.YPUCD == "FC" /* Factory closed*/
         || PC0LM002.YPUCD == "IN") /* Incomplete*/

        else

          PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/
          PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
          converseLib.validationFailed(65); /* Cannot change p.o with this status*/
          set PC0LM002.CATOAP cursor, bold; /* To application*/
          exit stack; /* Exit to redisplay map2*/

        end
      end
      COMMAREA.CATOAP = "PC0E"; /* To application*/
      PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
      COMMAREA.CAITEM = " "; /* Clear item*/
      PCWREC.PCWFNC[1] = "C"; /* Function code*/

      if (PC0LM002.XGPCD == "03") /* Apparel*/
        PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
      end

      PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
      PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
      PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
      PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
      PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

      XSPCS01();
                                   /* Transfer to the requested application*/

      set PC0LM002 initial;
      PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/

    COMMAREA.CATOAP = "PC0J"; /* To application*/
    PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
    COMMAREA.CAITEM = " "; /* Clear item*/
    PCWREC.PCWFNC[1] = "C"; /* Function code*/

    if (PC0LM002.XGPCD == "03") /* Apparel*/
      PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
    end

    PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
    PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
    PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
    PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
    PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

    XSPCS01();
                                   /* Transfer to the requested application*/

    set PC0LM002 initial;
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/

    COMMAREA.CATOAP = "PC0M"; /* To application*/
    PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
    COMMAREA.CAITEM = " "; /* Clear item*/
    PCWREC.PCWFNC[1] = "C"; /* Function code*/

    if (PC0LM002.XGPCD == "03") /* Apparel*/
      PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year*/
    end

    PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
    PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
    PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
    PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
    PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

    XSPCS01();
                                   /* Transfer to the requested application*/

    set PC0LM002 initial;
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    set PC0LM002 initial; /* Clear map2 when leaving*/
    set PCWREC empty; /* Clear out app. comm. area*/
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    COMMAREA.CAITEM = " "; /* Clear item*/
    XSPCS01();
                                   /* Transfer to the requested application*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    COMMAREA.CAITEM = " "; /* Application item code*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "C"; /* Application item code*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set PC0LM002 initial; /* Clear map2 when leaving*/
      PC0LW01.PC0LWMAP = "1"; /* MAP 1 REQUESTED*/
      PC0LW01.PC0LWFNC = " "; /* Set function to inquiry*/
      PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
      exit stack; /* Exit to display map*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      XSPCS01(); /* Exit to another application*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6)  /* PF6 was not pressed*/

    PC0LM002.XXXPRCNM = "PC0L330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PC0LW01.PC0LWINF = "Y"; /* Set error switch to 'y'*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PC0L330

// RESET HIGHLIGHTED FIELDS
Function PC0L340()

   /* ------------------------------------------------------------*/
   /* Reset all field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0LM002.CAITEM initialAttributes; /* Commarea application data*/

  set PC0LM002.PC0LMPYR initialAttributes; /* P.O. id year*/
  set PC0LM002.PC0LMPMO initialAttributes; /* P.O. id buy month*/
  set PC0LM002.PC0LMDMO initialAttributes; /* P.O. id delivery month*/
  set PC0LM002.FY1FCTYC initialAttributes; /* Factory code*/

  set PC0LM002.PC3PONBR initialAttributes; /* P.O. number*/
  set PC0LM002.PC0LMSDT initialAttributes; /* Status date*/
  set PC0LM002.PC2CUXID initialAttributes; /* Customer*/
  set PC0LM002.OP1CUOID initialAttributes; /* SO number*/
  set PC0LM002.OP1NORID initialAttributes; /* SO number*/
  set PC0LM002.PC3ATTEN initialAttributes; /* Attention name*/
  set PC0LM002.PC0LMADT initialAttributes; /* Acknowledge date*/
  set PC0LM002.PC0LMMDT initialAttributes; /* Mail date*/
  set PC0LM002.PC3BLPO initialAttributes; /* Blank p.o. number*/
  set PC0LM002.PC0LMPDT initialAttributes; /* Print date*/
  set PC0LM002.IN7STNBR initialAttributes; /* Stock xfer number*/
  set PC0LM002.PC0LMEDT initialAttributes; /* Entry date*/
  set PC0LM002.PC3ENTBY initialAttributes; /* Enter by date*/
  set PC0LM002.PC3RCRFL initialAttributes; /* Revolving credit flag*/
  set PC0LM002.PC3ORDBY initialAttributes; /* P.O. ordered by*/
  set PC0LM002.PC3COMP initialAttributes; /* Comp. number*/
  set PC0LM002.PC3SHVIA initialAttributes; /* Ship via*/
  set PC0LM002.PC3FOBLC initialAttributes; /* FOB shipping point*/
  set PC0LM002.PC3REQNO initialAttributes; /* Requisition number*/
  set PC0LM002.PC3REQDP initialAttributes; /* Requisition department*/
  set PC0LM002.PC3CMPNT initialAttributes; /* Component*/

  set PC0LM002.YPUCD initialAttributes; /* Status code*/
  set PC0LM002.YOHCD initialAttributes; /* Hold code*/
  set PC0LM002.XWHCD initialAttributes; /* Warehouse code*/
  set PC0LM002.PC4ORTYP initialAttributes; /* Type code*/
  set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
  set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
  set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
  set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
  set PC0LM002.PC0LMTOC initialAttributes; /* ctry of origin literal*/
  set PC0LM002.TSEOXCC initialAttributes; /* ctry of origin*/
  set PC0LM002.PC0LM-XCT-ORIG-LITERAL initialAttributes; /* mfg ctry of origin literal*/
  set PC0LM002.PC0LM-XCT-ORIG-CD initialAttributes; /* mfg ctry of origin*/


   /* ------------------------------------------------------------*/
    /* DARKEN AND PROTECT NON-NEEDED FIELDS*/
   /* ------------------------------------------------------------*/

  set PC0LM002.PC0LMPYR skip; /* P.O. id year*/
  set PC0LM002.PC0LMPMO skip; /* P.O. id buy month*/
  set PC0LM002.PC0LMDMO skip; /* P.O. id delivery month*/
  set PC0LM002.FY1FCTYC skip; /* P.O. id factory code*/
  set PC0LM002.PC3ENTBY skip; /* Entered by*/
  set PC0LM002.PC0LMEBL skip; /* Entered by literal*/
  set PC0LM002.PC0LMEDT skip; /* Entered date*/
  set PC0LM002.PC0LMENL skip; /* Entered date literal*/
  set PC0LM002.PC0LMPDT skip; /* Print date*/
  set PC0LM002.PC0LMPRL skip; /* Print date literal*/
  set PC0LM002.PC0LMLRL skip; /* L/C date   literal*/
  set PC0LM002.PC0LMSDL skip; /* Status date literal*/
  set PC0LM002.PC0LMSDT skip; /* Status date*/
  set PC0LM002.YPUDESC skip; /* Status description*/
  set PC0LM002.YPUCD skip; /* Status code*/
  set PC0LM002.PC0LMSTL skip; /* Status literal*/
  set PC0LM002.PC0LMCPL skip; /* Change product literal*/
  set PC0LM002.PC0LMPLL skip; /* Product list literal*/
  set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
  set PC0LM002.PC3CMPNT skip, modified, invisible; /* Component*/

  set PC0LM002.PC0LMSIL skip; /* Special inst. literal*/
  set PC0LM002.PC3SIFL skip; /* Special inst. flag*/
  set PC0LM002.PC0LDMQL initialAttributes; /* dom l/c adj qty literal*/
  set PC0LM002.PC3DMQTY initialAttributes; /* dom l/c adj qty*/
  set PC0LM002.PC0LDMPL initialAttributes; /* dom l/c adj prc literal*/
  set PC0LM002.PC3DMPRC initialAttributes; /* dom l/c adj prc*/
  set PC0LM002.PC0LNLQL initialAttributes; /* nil l/c adj qty literal*/
  set PC0LM002.PC3NLQTY initialAttributes; /* nil l/c adj qty*/
  set PC0LM002.PC0LNLPL initialAttributes; /* nil l/c adj prc literal*/
  set PC0LM002.PC3NLPRC initialAttributes; /* nil l/c adj prc*/
  set PC0LM002.PC0LM15L skip, invisible; /* Cancel header PFkey literal*/
  set PC0LM002.PC0LPMID initialAttributes; /* L/C Payment Indicator literal*/
  set PC0LM002.PC0LPYID initialAttributes; /* L/C Payment Indicator*/


   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS PROTECTED FOR GPC'S 1,2,3*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PCWREC.XGPCD == "01"   /* Promo*/
   || PC0LM002.XGPCD == "07" /* Posters*/
   || PCWREC.XGPCD == "07")  /* Posters*/

    set PC0LM002.XWHABRV skip, modified, invisible; /* Whse. abrv.*/
    set PC0LM002.XWHCD skip, modified, invisible; /* Whse. code*/
    set PC0LM002.PC0LMWHL skip, invisible; /* Whse. literal*/
    set PC0LM002.PC2CUXID skip, modified, invisible; /* Customer xref. code*/
    set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
    set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO number literal*/
    set PC0LM002.OP1CUOID skip, invisible; /* SO number*/
    set PC0LM002.OP1NORID skip, invisible; /* SO number*/
    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC0LMBNL protect, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL protect, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.PC0LMPOL protect; /* P.O. literal*/
    set PC0LM002.PC3PONBR protect; /* P.O. Number*/
    set PC0LM002.PC3BLPO protect, modified, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect, modified, invisible; /* Stock xfer number*/
    set PC0LM002.PC0LMTOC skip, modified, invisible; /* ctry of origin literal*/
    set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, modified, invisible;
                                   /* mfg ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                   /* mfg ctry of origin*/
    set PC0LM002.PC3RCRFL protect, modified, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, modified, invisible; /* Comp. number*/
    set PC0LM002.PC3REQNO initialAttributes; /* Requisition number*/
    set PC0LM002.PC3REQDP initialAttributes; /* Requisition department*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, modified, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR protect, modified, invisible; /* Season year*/
    set PC0LM002.PC4ORTYP skip; /* P.O. type*/
    set PC0LM002.PC0LPMID skip, invisible; /* L/C Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* L/C Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "02" /* Footwear*/
   || PCWREC.XGPCD == "02")  /* Footwear*/

    set PC0LM002.XWHABRV skip, modified, invisible; /* Whse abrv.*/
    set PC0LM002.XWHCD skip, modified, invisible; /* Whse code*/
    set PC0LM002.PC0LMWHL skip, invisible; /* Whse literal*/
    set PC0LM002.PC2CUXID skip, modified, invisible; /* Cust. xref.*/
    set PC0LM002.PC0LMTOC skip, modified, invisible; /* ctry of origin literal*/
    set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, modified, invisible;
                                   /* mfg ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                   /* mfg ctry of origin*/
    set PC0LM002.PC0LMCXL skip, invisible; /* Cust literal*/
    set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO number literal*/
    set PC0LM002.OP1CUOID skip, invisible; /* SO number*/
    set PC0LM002.OP1NORID skip, invisible; /* SO number*/
    set PC0LM002.PC0LMBNL skip, invisible; /* Blank p.o.*/
    set PC0LM002.PC0LMSXL skip, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC3PONBR protect; /* DARK   ; P.O. Number*/
    set PC0LM002.PC3BLPO skip, modified, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR skip, modified, invisible; /* Stock xfer number*/
    set PC0LM002.PC4ORTYP skip; /* P.O. type*/
    set PC0LM002.PC0LMSYL initialAttributes; /* Season/year literal*/
    set PC0LM002.XSECD initialAttributes; /* Season code*/
    set PC0LM002.PC0LMSYR initialAttributes; /* Season year*/
    set PC0LM002.PC3COMP initialAttributes; /* Comp. number*/
    set PC0LM002.PC0LMCNL initialAttributes; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL initialAttributes; /* Revolving credit flag literal*/
    set PC0LM002.PC3REQNO initialAttributes; /* Requisition number*/
    set PC0LM002.PC3REQDP initialAttributes; /* Requisition department*/
    set PC0LM002.PC0LMCML skip; /* Component literal*/
    set PC0LM002.PC3CMPNT initialAttributes; /* Component*/
    set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
    set PC0LM002.PC0LDMQL skip; /* dom l/c adj qty literal*/
    set PC0LM002.PC3DMQTY normal; /* dom l/c adj qty*/
    set PC0LM002.PC0LDMPL skip; /* dom l/c adj prc literal*/
    set PC0LM002.PC3DMPRC normal; /* dom l/c adj prc*/
    set PC0LM002.PC0LNLQL skip; /* nil l/c adj qty literal*/
    set PC0LM002.PC3NLQTY normal; /* nil l/c adj qty*/
    set PC0LM002.PC0LNLPL skip; /* nil l/c adj prc literal*/
    set PC0LM002.PC3NLPRC normal; /* nil l/c adj prc*/
    set PC0LM002.PC0LPMID initialAttributes; /* L/C Payment Indicator literal*/
    /* SET PC0LM002.PC0LPMID AUTOSKIP,DARK;/* L/C Payment Indicator literal*/
    /* SET PC0LM002.PC0LPYID AUTOSKIP,DARK;/* L/C Payment Indicator*/
    set PC0LM002.PC0LPYID initialAttributes; /* L/C Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "03" /* Apparel*/
   || PCWREC.XGPCD == "03")  /* Apparel*/

    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC3PONBR protect; /* P.O. Number*/
    set PC0LM002.PC3RCRFL protect, modified, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, modified, invisible; /* Comp. number*/
    set PC0LM002.PC3REQNO initialAttributes; /* Requisition num*/
    set PC0LM002.PC3REQDP initialAttributes; /* Requisition dep*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, modified, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR protect, modified, invisible; /* Season year*/
    set PC0LM002.PC0LMMSG initialAttributes; /* warning message*/
    set PC0LM002.PC0LPMID initialAttributes; /* L/C Payment Indicator literal*/
    set PC0LM002.PC0LPYID initialAttributes; /* L/C Payment Indicator*/
    set PC0LM002.PC0LMPDT initialAttributes; /* Print Date*/

    if (PC0LM002.YPUCD == "IN") /* Incomplete status*/
      set PC0LM002.XWHABRV skip, modified, invisible; /* Whse abrv.*/
      set PC0LM002.XWHCD skip, modified, invisible; /* Whse code*/
      set PC0LM002.PC0LMWHL skip, invisible; /* Whse literal*/
      set PC0LM002.PC2CUXID skip, modified, invisible; /* Cust. xref.*/
      set PC0LM002.PC0LMCXL skip, invisible; /* Cust literal*/
      set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO number literal*/
      set PC0LM002.OP1CUOID skip, invisible; /* SO number*/
      set PC0LM002.OP1NORID skip, invisible; /* SO number*/
    else
      if (PC0LW01.PC0LWMFL != "Y") /* single destinations exist*/
        set PC0LM002.XWHABRV initialAttributes; /* Whse abrv.*/
        set PC0LM002.XWHCD initialAttributes; /* Whse code*/
        set PC0LM002.PC0LMWHL initialAttributes; /* Whse literal*/
        set PC0LM002.PC2CUXID initialAttributes; /* Cust. xref.*/
        set PC0LM002.PC0LMCXL initialAttributes; /* Cust literal*/
        set PC0LM002.PC0LM-SO-LIT initialAttributes; /* SO number literal*/
        set PC0LM002.PC0LMMSG initialAttributes; /* warning message*/
        set PC0LM002.OP1CUOID initialAttributes; /* so number*/
        set PC0LM002.OP1NORID initialAttributes; /* so number*/
      else
        if (PC0LW01.PC0LWMFL == "Y") /* multiple destinations exist*/
          set PC0LM002.XWHABRV skip, modified; /* Whse abrv.*/
          set PC0LM002.XWHCD skip, modified; /* Whse code*/
          set PC0LM002.PC0LMWHL skip; /* Whse literal*/
          set PC0LM002.PC2CUXID skip, modified; /* Cust. xref.*/
          set PC0LM002.PC0LMCXL skip; /* Cust literal*/
          set PC0LM002.PC0LM-SO-LIT skip; /* SO number literal*/
          set PC0LM002.OP1CUOID skip; /* SO number*/
          set PC0LM002.OP1NORID skip; /* SO number*/
          set PC0LM002.PC0LMMSG skip, bold; /* flash warning message*/
        end
      end
    end
  end

   /* --------------------- End of PC0L340 ----------------------------*/
end // end PC0L340

// VERIFY THE ENTERED DATA
Function PC0L350()

   /* /*-------------------------------------------------------------*/
   /* Highlight any application data that is in error.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.CAITEM > " ") /* Application data was entered*/
    set PC0LM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on soft error*/
    PC0LM002.XXXPRCNM = "PC0L350"; /* Process name*/
    exit stack; /* Exit to redisplay map2*/
  end

  if (converseVar.eventKey is enter /* Enter key pressed*/
   || converseVar.eventKey is pf6)  /* PF6 key pressed*/

    /* ------------------------------------------------------------*/
     /* CHECK THE MAP INFORMATION TO THE PC3REC TO SEE IF ANY FIELD*/
     /* HAS BEEN CHANGED*/
    /* ------------------------------------------------------------*/

    if (PC0LWNSC == "Y") /* if sap item, skip*/
      /* allow mail date maintenance*/
      if (converseVar.eventKey is pf6) /* requested special instruction*/
        set PC0LM002 initial; /* Clear map when leaving*/
        set PC0LM001 initial; /* Clear map before entering*/
        PC0LW01.PC0LWHAC = "N"; /* Move N to header/change flag*/
        PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
        PC0LW01.PC0LWFNC = " "; /* Set request to blank*/
        exit stack; /* Exit to redisplay map 1*/
      end
    end

    /* ELSE;*/
    if (PC0LM002.XGPCD == "02")
      if (PC0LM002.PC3DMQTY == PC0LW01.PC3DMQTY /* no change l/c dom qty*/
       && PC0LM002.PC3DMPRC == PC0LW01.PC3DMPRC /* l/c dom prc*/
       && PC0LM002.PC3NLQTY == PC0LW01.PC3NLQTY /* l/c nil qty*/
       && PC0LM002.PC3NLPRC == PC0LW01.PC3NLPRC) /* l/c nil prc*/
        if (PC0LW01.PC0LWLCF == "Y") /* check for lc confirm update*/
          converseLib.validationFailed(0); /* reset message*/
          PC0LW01.PC0LWUPD = "Y"; /* update flag*/
        end
      else
        PC0LW01.PC0LWUPD = "Y"; /* update flag*/
      end
    end

    PC0LW01.PC0LWDLC = VPOHDR03.PC3LCPCT * 100;
                                   /* dom lc % in screen format*/
    PC0LW01.PC0LWNLC = VPOHDR03.PC3LCNPC * 100;
                                   /* nil lc % in screen format*/
    if (PC0LM002.PC0LPYID == VPOHDR03.PO-LOCR-PMT-IND)
    else
      PC0LW01.PC0LWUPD = "Y"; /* Update flag*/
    end
    if (PC0LM002.PC4ORTYP == VPOHDR03.PC4ORTYP /* P.O. type*/
     && PC0LM002.PC3ATTEN == VPOHDR03.PC3ATTEN /* Attention name*/
     && PC0LM002.YPUCD == VPOHDR03.YPUCD       /* Status code*/
                                               
     && PC0LW01.PC0LMADT == PC0LM002.PC0LMADT  /* Acknowledge date*/
     && PC0LW01.PC0LMMDT == PC0LM002.PC0LMMDT  /* Mail date*/
     && PC0LW01.PC0LMPDT == PC0LM002.PC0LMPDT  /* Print date*/
                                               
     && PC0LM002.YOHCD == VPOHDR03.YOHCD       /* Hold code*/
     && PC0LM002.PC3ORDBY == VPOHDR03.PC3ORDBY /* P.O. ordered by*/
     && PC0LM002.PC3SHVIA == VPOHDR03.PC3SHVIA /* Ship via*/
     && PC0LM002.PC3FOBLC == VPOHDR03.PC3FOBLC /* FOB shipping point*/
     && PC0LM002.PC3COMP == VPOHDR03.PC3COMP   /* Comp. number*/
     && PC0LM002.PC3REQNO == VPOHDR03.PC3REQNO /* Requisition number*/
     && PC0LM002.PC3REQDP == VPOHDR03.PC3REQDP /* Req. department*/
     && PC0LM002.PC3LCPCT == PC0LW01.PC0LWDLC  /* dom Neg. l/c pct*/
     && PC0LM002.PC3LCNPC == PC0LW01.PC0LWNLC) /* nil Neg. l/c pct*/

      if (PC0LM002.XGPCD == "03")
        if (PC0LM002.PC3BLPO == VPOHDR03.PC3BLPO   /* Blank p.o. number*/
         && PC0LM002.IN7STNBR == VPOHDR03.IN7STNBR /* Stock xfer number*/
         && PC0LM002.TSEOXCC == VPOHDR03.TSEOXCC   /* ctry of origin*/
         && PC0LM002.PC0LM-XCT-ORIG-CD == VPOHDR03.PC-XCT-ORIG-CD)
                                   /* mfg ctry of origin*/
        else
          PC0LW01.PC0LWUPD = "Y"; /* Update flag*/
        end
        if (PC0LM002.XWHCD == PC0LW01.XWHCD       /* Whse. code entered*/
         && PC0LM002.PC2CUXID == PC0LW01.PC2CUXID /* Customer code*/
         && PC0LM002.OP1CUOID == PC0LW01.OP1CUOID /* Sales Order #*/
         && PC0LM002.OP1NORID == PC0LW01.OP1NORID) /* Sales Order #*/
        else
          if (PC0LW01.PC0LWMFL != "Y"   /* not multiple destinations*/
           && PC0LM002.PC4ORTYP != "XD" /* not international order*/
           && PC0LM002.PC4ORTYP != "XI" /* not international order*/
           && PC0LM002.PC4ORTYP != "AD" /* not international order*/
           && PC0LM002.PC4ORTYP != "MX") /* not international order*/
            PC0LW01.PC0LWUPD = "Y"; /* Update flag*/
          end
        end
      end

      if (PC0LM002.XGPCD == "02")
        if (PC0LM002.PC3CMPNT == VPOHDR03.PC3CMPNT /* Component*/
         && PC0LM002.XSECD == VPOHDR03.XSECD       /* Season code*/
         && PC0LW01.PC0LWAYN == PC0LM002.PC0LMSYR  /* Season year*/
         && PC0LM002.PC3RCRFL == VPOHDR03.PC3RCRFL)
                                   /* Revolving credit flag*/
        else
          PC0LW01.PC0LWUPD = "Y"; /* Update flag*/
        end

      end

      PC0LW01.PC0LMADT = " "; /* Acknowledge date clear*/
      PC0LW01.PC0LMMDT = " "; /* Mail date clear*/
      if (converseVar.eventKey is pf6) /* PF6 key pressed*/
        PC0LW01.PC0LWHAC = "Y"; /* Move y to header/change flag*/
      else
        if (PC0LW01.PC0LWUPD == "N") /* Update flag is N*/
          set PC0LM002 initial; /* Clear map when leaving*/
          set PC0LM001 initial; /* Clear map before entering*/
          PC0LW01.PC0LWHAC = "N"; /* Move N to header/change flag*/
          PC0LW01.PC0LWMAP = "1"; /* Request map 1*/
          PC0LW01.PC0LWFNC = " "; /* Set request to blank*/
          exit stack; /* Exit to redisplay map 1*/
        end
      end
    else
      PC0LW01.PC0LWUPD = "Y"; /* Update flag*/
    end

    if (PC0LW01.PC0LWUPD == "Y") /* Update flag is Y*/

      if (PC0LM002.XGPCD == "03")

        PC0L352(); /* Validate the required data*/
        PC0L353(); /* Validate the specific data for '03'*/
        PC0L354(); /* Validate the Whse. and Customer*/
      end

      PC0L351(); /* Validate the optional data*/

    end
    /* END; /* nsc flag*/
  end


end // end PC0L350

// VALIDATE THE OPTIONAL DATA
Function PC0L351()

   /* ----------------------------------------------------------*/
   /* PERFORM OPTIONAL DETAILED EDITS*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* SEASON YEAR CHECK*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    if (PC0LM002.XSECD > " "
     || PC0LM002.PC0LMSYR > " ") /* Something there*/
      if (PC0LM002.XSECD > " ")
        if (PC0LM002.PC0LMSYR >= "00" /* Something there*/
         && PC0LM002.PC0LMSYR <= "99") /* Something there*/
          PC0LW01.PC0LWAYE = PC0LM002.PC0LMSYR; /* Season year*/

          if (PC0LW01.PC0LWAYE >= 89)
            PC0LW01.PC0LWACY = 19; /* Season cent.*/
          else
            PC0LW01.PC0LWACY = 20; /* Season cent.*/
          end

          /* **************Y2K IN*************************/
          /* IF PC0LW01.PC0LWAYE GE PC0LW01.PC0LWCYT;*/
          if (PC0LW01.PC0LWAYR >= PC0LW01.PC0LWCCY)
                                   /* season year >= cur year*/
            /* **************Y2K OUT************************/

             /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(176); /* Must enter current year or + 1*/
            PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
            PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
            set PC0LM002.PC0LMSYR cursor, bold; /* Highlight*/
          end
        else
          converseLib.validationFailed(176); /* Must enter current year or + 1*/
          PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
          PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
          set PC0LM002.PC0LMSYR cursor, bold; /* Highlight*/
        end
      else
        converseLib.validationFailed(38); /* Invalid year*/
        set PC0LM002.PC0LMSYR cursor, bold; /* Highlight error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      end
    else
      PC0LW01.PC0LWACY = 00; /* Season cent.*/
      PC0LW01.PC0LWAYE = 00; /* Season year*/
    end

    /* ----------------------------------------------------------*/
     /* SEASON CODE CHECK*/
    /* ----------------------------------------------------------*/

    if (PC0LM002.XSECD > " " /* Something here*/
     || PC0LM002.PC0LMSYR > " ") /* Something here*/
      if (PC0LM002.XSECD in XSETBL.XSECD
       && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

        PC0LW01.XSECD = PC0LM002.XSECD; /* Season code*/

      else
        converseLib.validationFailed(129); /* Invalid season code*/
        set PC0LM002.XSECD cursor, bold; /* Highlight error*/
        PC0LW01.XSECD = " "; /* Season code*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      end

      if (PC0LM002.PC0LMSYR > " " /* Something here*/
       && PC0LM002.XSECD == " ")  /* Something here*/
        converseLib.validationFailed(129); /* Invalid season code*/
        set PC0LM002.XSECD cursor, bold; /* Highlight error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      end
    else
      PC0LW01.PC0LWACY = 00; /* Season cent.*/
      PC0LW01.PC0LWAYE = 00; /* Season year*/
      PC0LW01.XSECD = " "; /* Season code*/
    end
  else
    PC0LW01.PC0LWACY = 00; /* Season cent.*/
    PC0LW01.PC0LWAYE = 00; /* Season year*/
    PC0LW01.XSECD = " "; /* Season code*/
  end

   /* ----------------------------------------------------------*/
   /* LETTER OF CREDIT REVOLVE Y/N*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02") /* Footware*/
    if (PC0LM002.PC3RCRFL != "Y"
     && PC0LM002.PC3RCRFL != "N")

      converseLib.validationFailed(42); /* Must be a Y or N*/
      set PC0LM002.PC3RCRFL cursor, bold; /* Highlight error*/
      PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/

    end
  end

   /* ----------------------------------------------------------*/
   /* ACKNOWLEDGE DATE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC0LMADT > " ") /* Something in date*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGA = PC0LM002.PC0LMADT; /* Move in ackn. date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        PC0LM002.PC0LMADT = TA2REC.TA2GRGA; /* Mail date*/
        PC0LW01.PC0LWADT = TA2REC.TA2GRGGN; /* Mail date*/
      else
        converseLib.validationFailed(38); /* Missing date or invalid*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        set PC0LM002.PC0LMADT cursor, bold; /* Highlight*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0L351"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/

    end
  end

   /* ----------------------------------------------------------*/
   /* HOLD CODE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.YOHCD > " ") /* Something entered in hold code*/
    if (PC0LM002.YOHCD in YOHTBL.YOHCD
     && YOHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC0LW01.YOHCD = PC0LM002.YOHCD; /* Hold code*/
      PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex]; /* Short description*/
      PC0LW01.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
                                   /* Short description*/

    else
      converseLib.validationFailed(39); /* Invalid hold code*/
      set PC0LM002.YOHCD cursor, bold; /* Highlight error*/
      PC0LM002.YOHSDESC = " "; /* Short description*/
      PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
    end
  else
    PC0LW01.YOHCD = PC0LM002.YOHCD; /* Hold code*/
    PC0LM002.YOHSDESC = " "; /* Short description*/
    PC0LW01.YOHSDESC = " "; /* Short description*/
  end

   /* ----------------------------------------------------------*/
   /* MAIL DATE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC0LMMDT > " ") /* Something entered*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGA = PC0LM002.PC0LMMDT; /* Move in mail date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        PC0LM002.PC0LMMDT = TA2REC.TA2GRGA; /* Mail date*/
        PC0LW01.PC0LWMDT = TA2REC.TA2GRGGN; /* Mail date*/
      else
        converseLib.validationFailed(38); /* Missing date or invalid*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        set PC0LM002.PC0LMMDT cursor, bold; /* Highlight*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0L351"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/

    end

    if (PC0LM002.XGPCD == "02") /* Footwear*/
      if (PC0LM002.PC0LMMDT != PC0LW01.PC0LWWDT)

        converseLib.validationFailed(575); /* Mail Date must equal today's dt*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        set PC0LM002.PC0LMMDT cursor, bold; /* Highlight*/

      end
    end
  end

   /* ----------------------------------------------------------*/
   /* DOM/NIL ADJ. QTY AND PRC*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    if (PC0LM002.PC3DMQTY != PC0LW01.PC3DMQTY) /* dom lc qty changed*/
      if (VPOHDR03.PC3NISFL == " ") /* not sent to nissho*/
        set PC0LM002.PC3DMQTY cursor, bold; /* Highlight*/
        converseLib.validationFailed(416); /* adj not allowed, nissho fl ne 'y'*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "N"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      else
        PC0LW01.PC3DMQTY = PC0LM002.PC3DMQTY; /* save dom lc qty*/
        PC0LW01.PC0LWLCF = "Y"; /* set lc confirm update flag*/
        converseLib.validationFailed(84); /* confirm update*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      end
    end

    if (PC0LM002.PC3NLQTY != PC0LW01.PC3NLQTY) /* nil lc qty changed*/
      if (VPOHDR03.PC3NISFL == " ") /* not sent to nissho*/
        set PC0LM002.PC3NLQTY cursor, bold; /* Highlight*/
        converseLib.validationFailed(416); /* adj not allowed, nissho fl ne 'y'*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "N"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      else
        PC0LW01.PC3NLQTY = PC0LM002.PC3NLQTY; /* save nil lc qty*/
        converseLib.validationFailed(84); /* confirm update*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "Y"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      end
    end

    if (PC0LM002.PC3DMPRC != PC0LW01.PC3DMPRC) /* dom lc prc changed*/
      if (VPOHDR03.PC3NISFL == " ") /* not sent to nissho*/
        set PC0LM002.PC3DMPRC cursor, bold; /* Highlight*/
        converseLib.validationFailed(416); /* adj not allowed, nissho fl ne 'y'*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      else
        PC0LW01.PC3DMPRC = PC0LM002.PC3DMPRC; /* save dom lc prc*/
        converseLib.validationFailed(84); /* confirm update*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "Y"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      end
    end

    if (PC0LM002.PC3NLPRC != PC0LW01.PC3NLPRC) /* nil lc prc changed*/
      if (VPOHDR03.PC3NISFL == " ") /* not sent to nissho*/
        set PC0LM002.PC3NLPRC cursor, bold; /* Highlight*/
        converseLib.validationFailed(416); /* adj not allowed, nissho fl ne 'y'*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "N"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      else
        PC0LW01.PC3NLPRC = PC0LM002.PC3NLPRC; /* save nil lc prc*/
        converseLib.validationFailed(84); /* confirm update*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LW01.PC0LWLCF = "Y"; /* set lc confirm update flag*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
      end
    end

  end

  if (PC0LM002.XGPCD == "02")
    if (PC0LM002.PC0LPYID != VPOHDR03.PO-LOCR-PMT-IND)
      if (PC0LM002.PC0LPYID == "R"
       || PC0LM002.PC0LPYID == " ")
        VPOHDR03.PO-LOCR-PMT-IND = PC0LM002.PC0LPYID;
      else
        set PC0LM002.PC0LPYID cursor, bold; /* Highlight error*/
        converseLib.validationFailed(555); /* Invalid Payment Indicator*/
        PC0LM002.XXXPRCNM = "PC0L351"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* set error flag*/
      end
    end
  end


   /* ----------------------------------------------------------*/
   /* sales order verification*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "03") /* apparel only change*/
    if (PC0LM002.OP1CUOID > 0 && PC0LWNSC != "Y") /* sales order entered*/
      PC0L-355(); /* read dreado*/
    end
  end

end // end PC0L351

// VALIDATE THE REQUIRED DATA
Function PC0L352()

   /* ----------------------------------------------------------*/
   /* PERFORM DETAILED EDITS*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* P.O. TYPE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP > " ") /* Something there for type*/
    set PC4REC empty; /* Clear record*/
    PC0LW01.PC4ORTYP = PC0LM002.PC4ORTYP;
    PC4REC.PC4ORTYP = PC0LM002.PC4ORTYP;
    PC4REC.XGPCD = PC0LM002.XGPCD;


    PC0LS04(); /* Call Production Order Type Table*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
      PC0LW01.XDSCD = PC4REC.XDSCD; /* save dir ship code*/
      if (PC4REC.XXXSTAT == "A") /* Active status*/
        PC0LW01.PC4SDESC = PC4REC.PC4SDESC; /* Move short desc.*/
        PC0LM002.PC4SDESC = PC4REC.PC4SDESC; /* Move short desc.*/
      else /* to working storage*/
        set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
        PC0LW01.PC4SDESC = " "; /* Clear short desc.*/
        PC0LM002.PC4SDESC = " "; /* Clear short desc.*/
        converseLib.validationFailed(33); /* P.O. type invalid*/
        PC0LM002.XXXPRCNM = "PC0L352"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    else
      set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
      PC0LW01.PC4SDESC = " "; /* Clear short desc.*/
      PC0LM002.PC4SDESC = " "; /* Clear short desc.*/
      converseLib.validationFailed(33); /* P.O. type invalid*/
      PC0LM002.XXXPRCNM = "PC0L352"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    end
  else
    set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
    PC0LW01.PC4SDESC = " "; /* Move short desc.*/
    PC0LM002.PC4SDESC = " "; /* Clear short desc.*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC0LM002.XXXPRCNM = "PC0L352"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
  end


end // end PC0L352

// VALIDATE FOR GPC OF 3
Function PC0L353()

   /* /*-----------------------------------------------------------*/
   /* PERFORM GPC '03' EDITS*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* manufacturing country of origin*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC0LM-XCT-ORIG-CD > " ") /* Something there*/
    if (PC0LM002.PC0LM-XCT-ORIG-CD in XCTTBL.XCTCD /* ctry of origin valid*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") 
    else
      set PC0LM002.PC0LM-XCT-ORIG-CD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(049); /* ctry invalid/missing*/
      PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* set error flag*/
    end
  end

   /* ----------------------------------------------------------*/
   /* country of origin*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.TSEOXCC > " ") /* Something there*/
    if (PC0LM002.TSEOXCC in XCTTBL.XCTCD /* ctry of origin valid*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      set VFCTY003 empty; /* clear record*/
      VFCTY003.XGPCD = VPOHDR03.XGPCD; /* gpc code*/
      VFCTY003.FY1FCTYC = VPOHDR03.FY1FCTYC; /* factory code*/

      PC0LS01();

      if (SQLCA.VAGen_SQLCODE == 0 /* found factory*/
       && VFCTY003.XXXSTAT == "A") /* Status is active*/
        if (PC0LM002.TSEOXCC != VFCTY003.XCTCD
         && VFCTY003.FY1CNTFL == "N")
          set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
          converseLib.validationFailed(408); /* not setup for contractors*/
          PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* set error flag*/
        end
      else
        set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
        converseLib.validationFailed(049); /* ctry invalid/missing*/
        PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* set error flag*/
      end
    else
      set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
      converseLib.validationFailed(049); /* ctry invalid/missing*/
      PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* set error flag*/
    end
  else
    PC0LM002.TSEOXCC = PC0LW01.XCTCD;
  end
   /* ----------------------------------------------------------*/
   /* STK. XREF. NUMBER*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.IN7STNBR > 0) /* Something there*/
    set IN7REC empty; /* Clear record*/
    IN7REC.IN7STNBR = PC0LM002.IN7STNBR;


    PC0LS05(); /* Call Stock trans. Table*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
      if (PC0LM002.XGPCD == IN7REC.XGPCD)

           /* NEXT SENTENCE*/

      else
        set PC0LM002.IN7STNBR cursor, bold; /* Highlight error*/
        converseLib.validationFailed(212); /* Stock trans. invalid for gpc*/
        PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* set error flag*/
      end
    else
      set PC0LM002.IN7STNBR cursor, bold; /* Highlight error*/
      converseLib.validationFailed(40); /* Stock trans. invalid*/
      PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* set error flag*/
    end
  end

   /* ----------------------------------------------------------*/
   /* BLANK XREF. P.O. NUMBER*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC3BLPO != PC0LM002.PC3PONBR) /* P.O. numbers are equal*/
    if (PC0LM002.PC3BLPO > 0) /* Something there*/
      move VPOHDR03 to PC0LW04 withV60Compat; /* Save record for reset later*/
      set VPOHDR03 empty; /* Clear record*/
      set PCYREC empty; /* Clear record*/
      PCYREC.PCYFUNC = "S "; /* Function code*/
      VPOHDR03.PC3PONBR = PC0LM002.PC3BLPO;
      VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* PO REGION CODE*/
      VPOHDR03.XGPCD = PC0LM002.XGPCD;


      PC0LS02(); /* Call P.O. Table*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/

          /* NEXT SENTENCE*/

      else
        set PC0LM002.PC3BLPO cursor, bold; /* Highlight error*/
        converseLib.validationFailed(41); /* Blank p.o. invalid*/
        PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* set error flag*/
      end
      move PC0LW04 to VPOHDR03 withV60Compat; /* Restore the record*/
    end
  else
    set PC0LM002.PC3BLPO cursor, bold; /* Highlight error*/
    converseLib.validationFailed(194); /* Blank p.o. invalid*/
    PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* set error flag*/
  end
  if (PC0LM002.PC0LPYID != VPOHDR03.PO-LOCR-PMT-IND)
    if (PC0LM002.PC0LPYID == "R"
     || PC0LM002.PC0LPYID == " ")
      /* OR PC0LM002.PC0LPYID EQ 'C'*/
      VPOHDR03.PO-LOCR-PMT-IND = PC0LM002.PC0LPYID;
    else
      set PC0LM002.PC0LPYID cursor, bold; /* Highlight error*/
      converseLib.validationFailed(555); /* Invalid Payment Indicator*/
      PC0LM002.XXXPRCNM = "PC0L353"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* set error flag*/
    end
  end

   /* ---------------------------------------------------------------*/
   /* Print Date*/
   /* ---------------------------------------------------------------*/
  if (PC0LM002.PC0LMPDT > " ")

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = PC0LM002.PC0LMPDT;

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000")
      if (TA2REC.TA2RTNCD == 0000 || PC0LM002.PC0LMPDT == 0)
        PC0LM002.PC0LMPDT = TA2REC.TA2GRGA;
        PC0LW01.PC0LWPDT = TA2REC.TA2GRGGN;
      else
        converseLib.validationFailed(38);
        PC0LW01.PC0LWINF = "Y";
        PC0LM002.XXXPRCNM = "PC0L353";
        set PC0LM002.PC0LMPDT cursor, bold;
      end
    else
      converseLib.validationFailed(10);
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1MAP = sysVar.errorCode;
      TAEREC.SQLCAREC = SQLCA.SQLCAREC;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "PC0L353";
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes};

      converseLib.clearScreen();
      
      PC0LM002.XXXPRCNM = "PC0L353";

    end
  end

end // end PC0L353

// PROCESS WHSE. AND CUSTOMER
Function PC0L354()
   /* skuma4 start*/

   /* ------------------------------------------------------------*/
   /* WAREHOUSE CODE CHECK*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XWHCD > " ") /* Something there*/
    if (PC0LM002.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03") /* Apparel*/

        PC0LW01.XWHCD = PC0LM002.XWHCD; /* Whse. code*/
        PC0LM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Whse. abrv.*/
        PC0LW01.YSMXDV = "10"; /* Division code*/

      else
        converseLib.validationFailed(145); /* Whse. code not valid for 03*/
        set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
        PC0LM002.XWHABRV = " "; /* Clear abrv.*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
        return;
      end
    else
      converseLib.validationFailed(59); /* Whse. code missing/invalid*/
      set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
      PC0LM002.XWHABRV = " "; /* Clear abrv.*/
      PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
      return;
    end
  end

  if (PC0LM002.XWHCD == "60"
   || PC0LM002.XWHCD == "61")
    PC0LW01.YSMXDV = "20"; /* make it div 20 (intl)*/
  end

   /* skuma4 end*/
   /* ----------------------------------------------------------*/
   /* WAREHOUSE CODE AND CUSTOMER CROSS REFERENCE CHECK*/
   /* GPC Code 3 only*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.YPUCD != "IN") /* Incomplete status*/

    if (PC0LM002.PC4ORTYP != PC0LW02.PC4ORTYP) /* Types not equal*/
      if (PC4REC.XXXSTAT == "A") /* Active status*/
        if (PC0LW02.PC4LCSFL == "N" /* LC subscript flag*/
         && PC4REC.PC4LCSFL == "N")
          if (PC0LW02.XQACD == PC4REC.XQACD) /* Quality codes are equal*/

            PC0LS44(); /* check whse/own grp codes*/

            if (PC4REC.PC4ORTYP == "SD" /* t-shirt po types*/
             || PC4REC.PC4ORTYP == "CD" 
             || PC0LW02.PC4ORTYP == "SD"
             || PC0LW02.PC4ORTYP == "CD")
              /* --------------------------------------------------------*/
               /* check bal. to ship qtys*/
              /* --------------------------------------------------------*/
              PC0LS45();

            else
              if (PC4REC.PC4ORTYP == "SS"
               || PC4REC.PC4ORTYP == "CT"
               || PC4REC.PC4ORTYP == "TO"
               || PC0LW02.PC4ORTYP == "TO")
                 /* bypass direct ship code logic*/
              else
                PC0LS27(); /* Direct Ship Code Logic*/
              end
            end
          else
            converseLib.validationFailed(131); /* Quality code must be the same*/
            PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
            set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
          end
        else
          converseLib.validationFailed(130); /* New P.O type must domestic also*/
          PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
          set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
        end
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* P.O. TYPE MUST CHANGE IF DEST CHANGED*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XWHCD != PC0LW01.XWHCD /* Something there*/
   && PC0LM002.PC4ORTYP == PC0LW02.PC4ORTYP) /* Type equal*/
    set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
    converseLib.validationFailed(117); /* P.O. type must change*/
    PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
  end

  if (PC0LM002.PC2CUXID != PC0LW01.PC2CUXID /* Something there*/
   && PC0LM002.PC4ORTYP == PC0LW02.PC4ORTYP) /* Type equal*/
    set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
    converseLib.validationFailed(117); /* P.O. type must change*/
    PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
  end


   /* ----------------------------------------------------------*/
   /* CAN ONLY FROM 'CD' TO 'TS' or 'EM' and BACK AGAIN*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP != PC0LW02.PC4ORTYP) /* Type changed*/
    if (PC0LW02.PC4ORTYP == "TS" /* FROM p.o. type*/
     || PC0LW02.PC4ORTYP == "EM") /* FROM p.o. type*/
      if (PC0LM002.PC4ORTYP != "CD") /* TO p.o. Type*/
        set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
        converseLib.validationFailed(472); /* Cannot change to this type*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      end
    else
      if (PC0LW02.PC4ORTYP == "CD") /* FROM p.o. Type*/
        if (PC0LM002.PC4ORTYP != "TS" /* TO p.o. type*/
         && PC0LM002.PC4ORTYP != "EM") /* TO p.o. type*/
          set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
          converseLib.validationFailed(472); /* Cannot change to this type*/
          PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
        end
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* CAN ONLY FROM 'PX' TO 'PS' OR 'IL' AND BACK AGAIN*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP != PC0LW02.PC4ORTYP) /* Type changed*/
    if (PC0LW02.PC4ORTYP == "PX"  /* FROM p.o. type*/
     && PC0LM002.PC4ORTYP != "PS" /* TO p.o. Type*/
     && PC0LM002.PC4ORTYP != "IL") /* TO p.o. Type*/
      set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
      converseLib.validationFailed(511); /* Cannot change to this type*/
      PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
    else
      if (PC0LM002.PC4ORTYP == "PX" /* TO p.o. type*/
       && PC0LW02.PC4ORTYP != "PS"  /* FROM p.o. type*/
       && PC0LW02.PC4ORTYP != "IL") /* FROM p.o. type*/
        set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
        converseLib.validationFailed(512); /* Cannot change to this type*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* SEE IF CUSTOMER CROSS REFERENCE entered*/
   /* and sales order not entered*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC2CUXID != PC0LW01.PC2CUXID) /* Something there*/
    if (PC0LM002.OP1CUOID == 0) /* SO not entered*/
      if (PC0LM002.PC4ORTYP == "XD" /**/
       || PC0LM002.PC4ORTYP == "XI" 
       || PC0LM002.PC4ORTYP == "MM" 
       || PC0LM002.PC4ORTYP == "MD" 
       || PC0LM002.PC4ORTYP == "DS" 
       || PC0LM002.PC4ORTYP == "DC" 
       || PC0LM002.PC4ORTYP == "EM" 
       || PC0LM002.PC4ORTYP == "TS" 
       || PC0LM002.PC4ORTYP == "MX")
        set PC0LM002.OP1CUOID cursor, bold; /* Highlight error*/
        set PC0LM002.OP1NORID bold; /* Highlight error*/
        converseLib.validationFailed(444); /* so required with new cust*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      end
    end
  end

  set PC4REC empty; /* Clear record*/
  PC4REC.PC4ORTYP = PC0LM002.PC4ORTYP;
  PC4REC.XGPCD = PC0LM002.XGPCD;

  PC0LS04(); /* Call Production Order Type Table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
    PC0LW01.XDSCD = PC4REC.XDSCD; /* save dir ship code*/
  else
    PC0LW01.XDSCD = " "; /* save dir ship code*/
  end

  if (PC0LM002.PC4ORTYP != PC0LW02.PC4ORTYP) /* Type changed*/
    if (PC0LM002.PC4ORTYP == "XI" /**/
     || PC0LM002.PC4ORTYP == "XD" 
     || PC0LM002.PC4ORTYP == "MM" 
     || PC0LM002.PC4ORTYP == "MD" 
     || PC0LM002.PC4ORTYP == "DS" 
     || PC0LM002.PC4ORTYP == "DC" 
     || PC0LM002.PC4ORTYP == "EM" 
     || PC0LM002.PC4ORTYP == "TS" 
     || PC0LM002.PC4ORTYP == "MX") /**/
      if (PC0LM002.OP1CUOID == 0) /* no sales order entered*/
        set PC0LM002.OP1CUOID cursor, bold; /* Highlight error*/
        set PC0LM002.OP1NORID bold; /* Highlight error*/
        converseLib.validationFailed(70); /* SO required*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      end
    else
      if (PC0LW01.XDSCD == "1" /**/
       || PC0LW01.XDSCD == "2") /**/
        /* Next Sentence*/
      else
        if (PC0LM002.XWHCD == " ") /* Whse not entered*/
          set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
          converseLib.validationFailed(59); /* whse required*/
          PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
        end
      end
    end
  end

  if (PC0LM002.PC4ORTYP != PC0LW02.PC4ORTYP) /* Type changed*/
    if (PC0LM002.PC4ORTYP == "XI" /**/
     || PC0LM002.PC4ORTYP == "XD" /**/
     || PC0LM002.PC4ORTYP == "AD" /* asia pacific direct ship*/
     || PC0LM002.PC4ORTYP == "MM" 
     || PC0LM002.PC4ORTYP == "MD" 
     || PC0LM002.PC4ORTYP == "DS" 
     || PC0LM002.PC4ORTYP == "DC" 
     || PC0LM002.PC4ORTYP == "EM" /**/
     || PC0LM002.PC4ORTYP == "TS" 
     || PC0LM002.PC4ORTYP == "MX") /**/
      if (PC0LW01.PC0LWMFL == "Y") /* multiple destinations*/
        set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
        converseLib.validationFailed(454); /* P.O. type must change*/
        PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      else
        if (PC0LW01.PC0LW-SO-FL == "Y") /* multiple SO's*/
          set PC0LM002.OP1CUOID cursor, bold; /* Highlight error*/
          set PC0LM002.OP1NORID bold; /* Highlight error*/
          converseLib.validationFailed(455); /* P.O. type must change*/
          PC0LM002.XXXPRCNM = "PC0L354"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
        end
      end
    end
  end
   /* ===>  END OF PC0L354*/
end // end PC0L354

// PROCESS THE VALID INPUT
Function PC0L360()

   /* ------------------------------------------------------------*/
   /* IF CHANGES PROCESS THE CHANGES, UPDATE ITEMS, WRITE AUDITS*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/


    if (PC0LW01.PC0LWHAC == "N") /* Change flag on*/

      XX0XS01(); /* ==> get current date and time for*/
                                   /* D.B. Updates*/

      if (converseVar.eventKey is enter /* Enter key pressed*/
       || converseVar.eventKey is pf6)  /* Pf6 pressed special inst*/
        if (PC0LM002.XGPCD == "03") /* Apparel*/

          PC0L361(); /* Process Apparel*/

        end
        if (PC0LW01.PC0LWUPD == "Y") /* Something changed*/
          if (PC0LM002.XGPCD == "03") /* Apparel*/

            PC0LS15(); /* See if audit needed for apparel*/

          else

            PC0LS17(); /* See if audit needed for others*/

          end

          PC0L362(); /* Update P.O. header row*/
          PC0L363(); /* Process the changed row*/
          PC0LW01.PC0LWLCF = "N"; /* reset lc confirm flag*/

        end
      end
    else
      if (converseVar.eventKey is pf6) /* PF6 key pressed, special inst.*/

        COMMAREA.CATOAP = "PC0H"; /* To application*/
        PCWREC.CAFROMAP[1] = "PC0L"; /* From applocation*/
        PCWREC.PCWFNC[1] = "C"; /* Function code*/
        COMMAREA.CAITEM = " "; /* Clear item*/

        if (PC0LM002.XGPCD == "03") /* Apparel*/
          PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Aprl sesn yr code*/
        end
        PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
        PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
        PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
        PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
        PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

        XSPCS01();
                                   /* Transfer to the requested application*/

        set PC0LM002 initial;
        PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

      end
    end
  end


end // end PC0L360

// PROCESS items for Apparel
Function PC0L361()

   /* ----------------------------------------------------------*/
             /* PROCESS THE VALID DATA FOR APPAREL*/
   /* if the Order Type has been changed then destination also*/
   /* was required to be changed.  Thus the P.O. items related*/
   /* to the P.O. header will need to be processed and updated*/
   /* accordingly and audits will be written where applicable.*/

   /* - Table the items that relate to the P.O. Header row*/

   /* - Verify that all items are elegible for updates*/

   /* - Update all items and write out appropriate audits*/

   /* ----------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP == PC0LW02.PC4ORTYP) /* Types equal*/
    return;
  end

  PC0LS50(); /* table po item records*/

  PC0LW01.PC0LWINX = 1; /* Set index to one*/

    /* ------------------------------------------------------------*/
     /* FIND OUT IF THE DIVISION CODE HAS CHANGED*/
     /* - if it has then error*/
     /* - if it is the same*/
       /* - check for in transit QTYs (if true, cannot change dest.*/
       /* - check for received QTYs   (if true, cannot change dest.*/
    /* ------------------------------------------------------------*/

  while (PC0LW09.YSMXDV[PC0LWINX] > " "
   && converseVar.validationMsgNum == 0)
    if (PC0LW02.PC4ORTYP == "XD" 
     || PC0LW02.PC4ORTYP == "XI" 
     || PC0LW02.PC4ORTYP == "AD" /* asia pacific direct ship*/
     || PC0LW02.PC4ORTYP == "MX")

      PC0LS80(); /* ===> check for in transit QTYs*/

      PC0LS90(); /* ===> check for received QTYs*/

    else

      if (PC0LW01.YSMXDV == PC0LW09.YSMXDV[PC0LWINX] /* Divisions =*/
       || PC0LW01.YSMXDV == " "                      /* no destination entered*/
       || PC0LW09.YSMXDV[PC0LWINX] == " ")           /* no dest entered*/

        PC0LS80(); /* ===> check for in transit QTYs*/

        PC0LS90(); /* ===> check for received QTYs*/

      else /* ===> division change error*/

        converseLib.validationFailed(142); /* Invalid division code/dest*/
        set PC0LM002.PC2CUXID cursor, bold; /* Customer highlited*/
        PC0LM002.XXXPRCNM = "PC0L361"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/
        exit stack; /* Exit to display change map*/

      end /* ===> division check*/
    end /* ===> division check*/

    PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1 to index*/

  end /* ===> verification of tabled P.O.*/
                                   /* items*/


    /* ------------------------------------------------------------*/
     /* if the above conditions satisfied then proceed to update*/
        /* the tabled P.O. Items and write out appropriate audits.*/
    /* ------------------------------------------------------------*/

  PC0L364(); /* Process items*/


   /* **                                                        ***/
   /* ********************** End of PC0L361 ***********************/
end // end PC0L361

// Process P.O. Header update
Function PC0L362()

   /* ------------------------------------------------------------*/
   /* MOVE THE MAP INFORMATION TO THE VPOHDR03*/
   /* ------------------------------------------------------------*/

  VPOHDR03.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
  VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
  VPOHDR03.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
  VPOHDR03.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

  if (PC0LM002.XGPCD == "02") /* Footware*/
    VPOHDR03.PCFSEYR = PC0LW01.PC0LWAYR; /* P.O. season year*/
    VPOHDR03.XSECD = PC0LW01.XSECD; /* Season code*/
  end

  VPOHDR03.PC3ATTEN = PC0LM002.PC3ATTEN; /* Attention name*/

  VPOHDR03.YPUCD = PC0LM002.YPUCD; /* Map status code*/

  VPOHDR03.PC3ACKDT = PC0LW01.PC0LWADT; /* Acknowledge date*/
  VPOHDR03.PC3MAILD = PC0LW01.PC0LWMDT; /* Mail date*/
  VPOHDR03.PC3PRTDT = PC0LW01.PC0LWPDT; /* Print date*/

  VPOHDR03.YOHCD = PC0LM002.YOHCD; /* Hold code*/
  VPOHDR03.TSEOXCC = PC0LM002.TSEOXCC; /* ctry of origin*/
  if (PC0LM002.XGPCD == "03") /* Apparel*/
    VPOHDR03.PC-XCT-ORIG-CD = PC0LM002.PC0LM-XCT-ORIG-CD;
                                   /* mfg ctry of origin*/
  end

  VPOHDR03.PC3ORDBY = PC0LM002.PC3ORDBY; /* P.O. ordered by*/
  if (PC0LM002.XGPCD == "03" /* Apparel*/
   && PC0LM002.PC3SHVIA == VPOHDR03.PC3SHVIA) /* SHIP VIA not changed*/
    if (PC0LM002.PC4ORTYP == "XD" /* DOMESTIC EXPORT*/
     && VFCTY003.XCTCD == "MEXI")
      PC0LM002.PC3SHVIA = "CALL ACS MEXICO CITY"; /* SHIP VIA*/
      VPOHDR03.PC3SHVIA = PC0LM002.PC3SHVIA;
    else
      if (PC0LM002.PC4ORTYP == "XD" /* DOMESTIC EXPORT*/
       && VFCTY003.XCTCD == "USA")  /* domestic factory*/
        VPOHDR03.PC3SHVIA = "CALL ACS ATLANTA"; /* SHIP VIA*/
      else
        if ((PC0LM002.PC4ORTYP == "XI" /* CANADA*/
         || PC0LM002.PC4ORTYP == "MX") /* CANADA SMU*/
         && (VFCTY003.XCTCD == "USA"   /* domestic factory*/
         || VFCTY003.XCTCD == "MEXI")) /* Mexico factory*/
          VPOHDR03.PC3SHVIA = "DIRECT SHIP"; /* SHIP VIA*/
        else
          if (PC0LM002.PC4ORTYP == "AD" /* asia pacific direct ship*/
           && VFCTY003.XCTCD == "USA")  /* domestic factory*/
            VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* SHIP VIA*/
          else
            if (PC0LM002.PC4ORTYP == "SX" /* DOMESTIC EXPORT OF SS*/
             && VFCTY003.XCTCD == "USA")  /* domestic factory*/
              VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* SHIP VIA*/
            else
              if (PC0LM002.PC4ORTYP == "SS" /* Salesman sample*/
               || PC0LM002.PC4ORTYP == "S7" /* Salesman sample Side 1*/
               || PC0LM002.PC4ORTYP == "SX" /* Salesman sample Export*/
               || PC0LM002.PC4ORTYP == "PX") /* NIL Promo*/
                VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* SHIP VIA*/
              else
                if (PC0LM002.PC4ORTYP == "MP")
                                   /* makeup-indirect,diam-mkd,pkk*/
                  VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* SHIP VIA*/
                else
                  if (PC0LM002.PC4ORTYP == "MD" /* direct ship - makeup*/
                   || PC0LM002.PC4ORTYP == "MM" 
                   /* direct ship - makeup mult*/
                   || PC0LM002.PC4ORTYP == "DS" /* direct ship*/
                   || PC0LM002.PC4ORTYP == "DC")
                                   /* direct deliv - case lot*/
                    VPOHDR03.PC3SHVIA = "DIRECT DELIVERY";
                                   /* SHIP VIA*/
                  else
                    VPOHDR03.PC3SHVIA = "STAND. SHIP. INSTR. ";
                                   /* SHIP VIA*/
                  end
                end
              end
            end
          end
        end
      end
    end
  else
    VPOHDR03.PC3SHVIA = PC0LM002.PC3SHVIA; /* Ship via*/
  end
  VPOHDR03.PC3FOBLC = PC0LM002.PC3FOBLC; /* FOB shipping point*/
  VPOHDR03.PC3REQNO = PC0LM002.PC3REQNO; /* Requisition number*/
  VPOHDR03.PC3REQDP = PC0LM002.PC3REQDP; /* Requisition department*/
  VPOHDR03.PC3CMPNT = PC0LM002.PC3CMPNT; /* Component*/

  VPOHDR03.PC3LCPCT = PC0LM002.PC3LCPCT / 100; /* dom nego. l/c %*/
  VPOHDR03.PC3LCNPC = PC0LM002.PC3LCNPC / 100; /* nil nego. l/c %*/

  VPOHDR03.PC3DMPRC = PC0LW01.PC3DMPRC + VPOHDR03.PC3DMPRC;
  VPOHDR03.PC3DMQTY = PC0LW01.PC3DMQTY + VPOHDR03.PC3DMQTY;

  VPOHDR03.PC3NLPRC = PC0LW01.PC3NLPRC + VPOHDR03.PC3NLPRC;
  VPOHDR03.PC3NLQTY = PC0LW01.PC3NLQTY + VPOHDR03.PC3NLQTY;

  VPOHDR03.PC3SIFL = PC0LM002.PC3SIFL; /* Special inst flag*/

  VPOHDR03.PC3COMP = PC0LM002.PC3COMP; /* Comp. number*/
  VPOHDR03.PC3BLPO = PC0LM002.PC3BLPO; /* Blank p.o. number*/
  VPOHDR03.IN7STNBR = PC0LM002.IN7STNBR; /* Stock xfer number*/
  VPOHDR03.PC3RCRFL = PC0LM002.PC3RCRFL; /* Revolving credit flag*/


   /* MOVE XX0XW01.XX0XWDAT TO VPOHDR03.ZZZSDT ; Set up date*/
  VPOHDR03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOHDR03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOHDR03.ZZZCHGCT = PC0LW01.ZZZCHGCT; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Update a unique row from the P.O. header row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  PC0LS60(); /* Update VPOHDR03*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0L362 ***********************/
end // end PC0L362

// PROCESS THE CHANGED ROW
Function PC0L363()

   /* ------------------------------------------------------------*/
     /* PROCESS THE REQUESTED INPUT AND EITHER TRANSFER TO*/
     /* ANOTHER PROGRAM, OR TRANSFER BACK TO THE SELECT SCREEN.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row there*/
    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC0LW01.PC0LWHAC == "N") /* Header add/chg. flag eq n*/
        PC0LW01.PC3DMPRC = 0; /* clear lc dom price*/
        PC0LW01.PC3DMQTY = 0; /* clear lc dom qty*/
        PC0LW01.PC3NLPRC = 0; /* clear lc nil price*/
        PC0LW01.PC3NLQTY = 0; /* clear lc nil qty*/
        if (converseVar.eventKey is enter) /* Enter key pressed*/

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit the change*/

          set PC0LM002 initial;
          PC0LW01.PC0LWMAP = "2"; /* Set request for map 1*/
          PC0LW01.PC0LWFNC = "C"; /* Set request for function*/
          COMMAREA.CAITEM = " "; /* Clear item*/
          converseLib.validationFailed(1); /* Update sucessful*/
          PC0LW01.PC0LWINF = "N"; /* Turn off error*/

          PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/
          PC0LW01.PC0LWADT = 0; /* Clear dates*/
          PC0LW01.PC0LWMDT = 0;
          PC0LW01.PC0LWPDT = 0;
          PC0LW01.PC0LMADT = " "; /* Clear dates*/
          PC0LW01.PC0LMMDT = " ";
          PC0LW01.PC0LMPDT = " ";

        end
        if (converseVar.eventKey is pf6) /* PF6 key pressed, special inst.*/

          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit the change*/
          PC0LW01.PC0LWHAC = "Y"; /* Header add/chg. flag eq y*/
          PC0LW01.PC0LWINF = "N"; /* Turn off error*/

          COMMAREA.CATOAP = "PC0H"; /* To application*/
          PCWREC.CAFROMAP[1] = "PC0L"; /* From applocation*/
          PCWREC.PCWFNC[1] = "C"; /* Function code*/
          COMMAREA.CAITEM = " "; /* Clear item*/

          if (PC0LM002.XGPCD == "03") /* Apparel*/
            PCWREC.PCFSECD = PC0LM002.PC0LMPYR;
                                   /* Apparel season year code*/
          end
          PCWREC.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. date*/
          PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
          PCWREC.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/
          PCWREC.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
          PCWREC.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/

          XSPCS01();
                                   /* Transfer to the requested application*/

          set PC0LM002 initial;
          PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

        end
      end
    end
  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback*/
    PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/
    PC0LW01.PC0LWINF = "N"; /* Turn off error*/
    PC0LW01.PC0LWHAC = "N"; /* Header add/chg. flag eq n*/
    converseLib.validationFailed(12); /* Update done by someone else*/
    PC0LM002.XXXPRCNM = "PC0L363"; /* Process name*/

  end


end // end PC0L363

// Process Items (Order Type Chg)
Function PC0L364()

   /* ----------------------------------------------------------*/
           /* PROCESS THE VALID DATA FOR APPAREL ITEMS*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC2CUXID > " ") /* ===> Cust. Xref code*/

    PC0LS72(); /* ===> Get Cust. xref info*/

  end

   /* ----------------------------------------------------*/
   /* Do P.O. ITEM Updates and write out audits*/
    /* for the tabled P.O. Items loaded in PC0L361*/
   /* ----------------------------------------------------*/

  PC0LW01.PC0LWINX = 1; /* Set index to one*/

  while (PC0LW09.PC6ITMNB[PC0LWINX] > 0 /* Item nbr there*/
   && converseVar.validationMsgNum == 0) /* No message*/

    VPOITM05.PC6ITMNB = PC0LW09.PC6ITMNB[PC0LWINX]; /* P.O. item no.*/
    VPOITM05.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
    VPOITM05.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOITM05.PC3PONBR = PC0LM002.PC3PONBR; /* P.O. number*/

    PC0LS11(); /* Select unique item row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row there*/


      PC0LS26(); /* Select unique size row*/

      PC0LS51(); /* save  unique item row*/

      PC0LS52(); /* save  unique size row*/

    else
      return;
    end

    /* ------------------------------------------------------------*/
     /* if the po has not been cancelled and the po type change is*/
     /* a 'sd' or 'cd' type, the Blank Avail. table needs to be*/
     /* adjusted accordingly.*/
    /* ------------------------------------------------------------*/

    set PG2REC empty;
    PG2REC.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
    PG2REC.SY1STNBR = PC0LW09.SY1STNBR[PC0LWINX]; /* Style*/
    PG2REC.SY2CLRID = PC0LW09.SY2CLRID[PC0LWINX]; /* Color*/
    PG2REC.XDMCD = PC0LW09.XDMCD[PC0LWINX]; /* Dimension*/

    XSPG202(); /* Select Style/Color record*/

     /* added next section for error message if try to change type on*/
     /* 'to' po for a blank style       -dhales*/
    if (PC0LM002.PC4ORTYP == "TO"
     || PC0LW02.PC4ORTYP == "TO")
      if (PG2REC.PG2SCRFL == "B"
       || PG2REC.PG2SCRFL == "I"
       || PG2REC.PG2SCRFL == "U")
        converseLib.validationFailed(501);
        PC0LM002.XXXPRCNM = "PC0L364";
        set PC0LM002.PC4ORTYP cursor, bold;
        PC0LW01.PC0LWINF = "Y";
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        exit stack;
      end
    end
                           /* end of added code -dhales*/

    if (VPOITM05.PC6STAT != "CX") /* po not cancelled*/
      if (PC0LM002.PC4ORTYP == "SD"
       || PC0LM002.PC4ORTYP == "CD"
       || PC0LW02.PC4ORTYP == "SD"
       || PC0LW02.PC4ORTYP == "CD")
        if (VFCTY003.FY1FRGN != "Y") /* not a foreign factory*/
          if (PC0LM002.PC4ORTYP == "SD" /* not affected by dummies*/
           && PC0LW02.PC4ORTYP == "CD")
           /* next sentence*/
          else
            if (PC0LM002.PC4ORTYP == "CD" /* not affected by dummies*/
             && PC0LW02.PC4ORTYP == "SD")
             /* next sentence*/
            else

              PC0L369(); /* adjust blank avail inventry*/
              PC0LS72(); /* ===> Reset Cust. xref info*/

            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* if whse and customer did not change only po type.*/
     /* therefore no audit records needed. just update po item*/
     /* with the new po type.*/
    /* ------------------------------------------------------------*/

    if (PC0LM002.XWHCD == VPOITM05.XWHCD       /* ===> whse cd*/
     && PC0LM002.PC2CUXID == VPOITM05.PC2CUXID /* ===> Cust. Xref code*/
     && PC0LM002.OP1CUOID == VPOITM05.OP1CUOID) /* ===> S.O.*/

      VPOITM05.PC4ORTYP = PC0LM002.PC4ORTYP; /* ===> load type*/
      VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PC0LS13(); /* update the item w/ the new po type*/
      PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1*/
    else
      if (PC0LM002.XWHCD == " " /* no destination change*/
       && PC0LM002.PC2CUXID == " ")

        VPOITM05.PC4ORTYP = PC0LM002.PC4ORTYP; /* ===> load type*/
        VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;
        PC0LS13(); /* update the item w/ the new po type*/
        PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1*/
      else
        if (VPOITM05.PC6STAT == "CX") /* cancelled po item*/

          VPOITM05.PC4ORTYP = PC0LM002.PC4ORTYP; /* ===> load type*/
          VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
          VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;
          PC0LS13(); /* update the item w/ the new po type*/
          PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1*/
        else


          PC0L365(); /* ===> process item & audit  (Cancel)*/

          PC0L366(); /* ===> process size & audit  (Cancel)*/

          if (PC0LM002.PC2CUXID > " ") /* ===> Cust. Xref code*/

            PC0LSB7(); /* ===> Get Factory FOB Price*/

            PC0LSB0(); /* ===> create FOB Price Templete for*/
                                   /* new item*/

          end

          PC0L367(); /* ===> process item & audit  (Insert)*/

          PC0L368(); /* ===> process size & audit  (Insert)*/


          PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1*/

        end /* don't chg dest on cancelled po items*/
      end /* dest didn't change and not entered*/
    end /* dest didn't change*/
  end


   /* ********************** End of PC0L364 ***********************/
end // end PC0L364

// Process item & audit "CANCEL"
Function PC0L365()
   /* ------------------------------------------------------------*/
          /* P.O. Item Audits And P.O. Item Updates*/
                        /* (cancel)*/
   /* - First load the audit record with the common update data.*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/


  PC0LS53(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/

  VPOAIT02.PCJSEQNO = 0;

   /* ------------------------------------------------------------*/
                           /* WAREHOUSE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XWHCD != VPOITM05.XWHCD) /* ===> warehouse code*/
    VPOAIT02.PCIBFRA = VPOITM05.XWHCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0LM002.XWHCD; /* ===> after*/
    VPOAIT02.YOACD = "71"; /* WAREHOUSE*/

    PC0LS31(); /* ===> Driver for Get and Load audit record flags*/

    PC0LS12(); /* ===> insert the item audit record*/

  end


   /* ------------------------------------------------------------*/
                  /* CUSTOMER CROSS REFERENCE CODE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC2CUXID != VPOITM05.PC2CUXID) /* ===> Cust. Xref code*/
    VPOAIT02.PCIBFRA = VPOITM05.PC2CUXID; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0LM002.PC2CUXID; /* ===> after*/
    VPOAIT02.YOACD = "72"; /* CUSTOMER CROSS REFERENCE CODE*/

    PC0LS31(); /* ===> Driver for Get and Load audit record flags*/

    PC0LS12(); /* ===> insert the item audit record*/

  end


   /* ------------------------------------------------------------*/
                   /* CANCEL PRODUCT QUANTITIES*/
   /* ------------------------------------------------------------*/


  PC0LS55(); /* ================> get item audit sequence*/
   /* ================> using current VPOITM05 key data*/

  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* ===> before*/
  VPOAIT02.PCIAFTN = 0; /* ===>  after*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;
  VPOAIT02.YOACD = "61"; /* CANCEL PRODUCT QUANTITIES*/

  PC0LS31(); /* ===> Driver for Get and Load audit record flags*/

  PC0LS12(); /* ===> insert the item audit record*/


   /* ------------------------------------------------------------*/
                     /* UPDATE THE ITEM ROW*/

   /* Load appropriate data to cancel a item*/
   /* ------------------------------------------------------------*/


  VPOITM05.PC6STAT = "CX"; /* ===> cancel status*/
  VPOITM05.PC4ORTYP = PC0LM002.PC4ORTYP;
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* ===> Status change date*/
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE;
  VPOITM05.PC6TORDE = 0;
  VPOITM05.PC6CXNBR = 1;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0LS13(); /* ===> Update the Item row (cancelled)*/

   /* **                                                        ***/
   /* ********************** End of PC0L365 ***********************/
end // end PC0L365

// Process size & audit "CANCEL"
Function PC0L366()
   /* ----------------------------------------------------------*/
              /* SIZE AUDIT and SIZE UPDATE*/
                       /* "CANCEL"*/
    /* Initialize the size audit record and move the fields from*/
    /* the current data in the VPOITM05.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID;
  VPOASZ02.XDMCD = VPOITM05.XDMCD;
  VPOASZ02.XQACD = VPOITM05.XQACD;
  VPOASZ02.XOWCD = VPOITM05.XOWCD;
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOASZ02.XPGCD = VPOITM05.XPGCD;
  VPOASZ02.XUMCD = VPOITM05.XUMCD;
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS;
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOASZ02.YMTCD = VPOITM05.YMTCD;
  VPOASZ02.PC6CXNBR = 0;
  VPOASZ02.XWHCD = VPOITM05.XWHCD;
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID;

  VPOASZ02.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/

  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;


  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCIAFTN[1] for all;
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all;
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;

  PC0LS25(); /* ===> insert the size audit record*/


   /* ----------------------------------------------------------*/
    /* Update the size row with the cancel criteria*/
   /* ----------------------------------------------------------*/
  move 0 to VPOSIZ02.PC7ORDEQ[1] for all;
  move 0 to VPOSIZ02.FY4FOBPR[1] for all;
  move "N" to VPOSIZ02.PC7FOBFL[1] for all;


  PC0LS24(); /* ===> Update the size record*/

   /* **                                                        ***/
   /* ********************** End of PC0L366 ***********************/
end // end PC0L366

// Process item & audit "INSERT"
Function PC0L367()

   /* ------------------------------------------------------------*/
                 /* Insert new P.O. Item with new data.*/
   /* Note: this insert was all due to a request of a Order Type*/
         /* change. (which carried along with it various other*/
                  /* changes to feilds)*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ===> initialize item record*/
  set VPOAIT02 empty; /* ===> initialize item audit record*/
  VPOITM05.PC-AIR-FRGT-PMTIND = " "; /* init new field*/

  PC0LS58(); /* ===> Load saved item row to item*/
                                   /* record*/

  PC0LS57(); /* ===> Load saved item row to audit*/
                                   /* record*/

   /* ------------------------------------------------------------*/
                       /* ORDER TYPE*/
   /* ------------------------------------------------------------*/

  VPOITM05.PC4ORTYP = PC0LM002.PC4ORTYP; /* Move in new type*/
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP; /* Move in new type*/


   /* ------------------------------------------------------------*/
                           /* WAREHOUSE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XWHCD != VPOITM05.XWHCD) /* ===> warehouse code*/
    VPOITM05.XWHCD = PC0LM002.XWHCD; /* ===> laod change*/
    VPOAIT02.XWHCD = VPOITM05.XWHCD; /* ===> laod change*/
  end


   /* ------------------------------------------------------------*/
                  /* CUSTOMER CROSS REFERENCE CODE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC2CUXID != VPOITM05.PC2CUXID) /* ===> Cust. Xref code*/
    VPOITM05.PC2CUXID = PC0LM002.PC2CUXID; /* ===> load change*/
    VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* ===> load change*/
  end


   /* ------------------------------------------------------------*/
                  /* SALES ORDER NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.OP1CUOID > 0) /* ===> SALES ORDER*/
    if (PC0LM002.OP1CUOID != VPOITM05.OP1CUOID /* ===> cust order changed*/
     || PC0LM002.OP1NORID != VPOITM05.OP1NORID) /* ===> sub order changed*/
      PC0LW01.PC0LW-FRMT-CUST-ORD = PC0LM002.OP1CUOID;
      VPOITM05.OP1PARTN = PC0LW01.PC0LW-FRMT-PART-NBR;
      VPOITM05.OP1CUOID = PC0LM002.OP1CUOID; /* ===> load change*/
      VPOITM05.OP1NORID = PC0LM002.OP1NORID; /* ===> load change*/
      VPOITM05.OP1CUPO = OP1REC.OP1CUPO; /* ===> load change*/
      VPOITM05.OP1CUNDT = OP1REC.OP1CUNDT; /* Need date*/
      VPOAIT02.OP1PARTN = PC0LW01.PC0LW-FRMT-PART-NBR;
      VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID; /* ===> load change*/
      VPOAIT02.OP1NORID = VPOITM05.OP1NORID; /* ===> load change*/
    end
  else
    VPOITM05.OP1PARTN = " ";
    VPOITM05.OP1CUOID = 0; /* ===> load change*/
    VPOITM05.OP1NORID = 0; /* ===> load change*/
    VPOITM05.OP1CUPO = " "; /* ===> load change*/
    VPOITM05.OP1CUNDT = 0;

    VPOAIT02.OP1PARTN = " ";
    VPOAIT02.OP1CUOID = 0; /* ===> load change*/
    VPOAIT02.OP1NORID = 0; /* ===> load change*/
  end


   /* ------------------------------------------------------------*/
   /* get and Load Spec diff to W.S.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC2CUXID > " ")
    VPOITM05.PC2INSEG = PC2REC.PC2INSEG;
    VPOITM05.YSMXDV = PC2REC.YSMXDV;
    VPOITM05.PC6XCTCD = PC2REC.XCTCD;
  else /* ===>Cust = blank*/
    VPOITM05.PC2INSEG = "000";
    if (PC0LM002.XWHCD == "12") /* if intl whse*/
      VPOITM05.PC6XCTCD = "USA";
      VPOITM05.YSMXDV = "20"; /* div 20*/
    else
      if (PC0LM002.XWHCD == "60")
        VPOITM05.PC6XCTCD = "BELG";
        VPOITM05.YSMXDV = "20"; /* div 20*/
      else
        if (PC0LM002.XWHCD == "61")
          VPOITM05.PC6XCTCD = "NETH";
          VPOITM05.YSMXDV = "20"; /* div 20*/
        else
          VPOITM05.PC6XCTCD = "USA";
          VPOITM05.YSMXDV = "10"; /* div '10'*/
        end
      end
    end
  end
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* move to audit record*/
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD;


   /* ------------------------------------------------------------*/
   /* load the direct ship code.*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.XWHCD != " ") /* whse entered*/
    if (VPOITM05.PC2CUXID != " ") /* customer entered*/
      VPOITM05.XDSCD = "2";
      VPOAIT02.XDSCD = "2";
    else /* customer not entered*/
      VPOITM05.XDSCD = " ";
      VPOAIT02.XDSCD = " ";
    end
  else /* customer only entered*/
    VPOITM05.XDSCD = "1";
    VPOAIT02.XDSCD = "1";
  end

   /* ------------------------------------------------------------*/
   /* default NAF to 100% when mode of transportation is AF*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.XGPCD == "03" /* Apparel*/
   && VPOITM05.YMTCD == "AF") /* Mode of transport is air freight*/
    VPOITM05.PC-NIKE-AFRGT-PCT = 100; /* Set Nike AF pct to 100%*/
  end

   /* ------------------------------------------------------------*/
   /* default the bnk-cd to sapces for inserts*/
   /* ------------------------------------------------------------*/
  VPOITM05.XIB-IBANK-CD = " ";

   /* ------------------------------------------------------------*/
      /* Get the next sequence number and insert the*/
                      /* "Insert" the new item*/
     /* note: the VPOITM05 has been loaded so a select for next*/
           /* sequence number will get assosiated sequence no*/
           /* and the data will already be present for insert.*/
   /* ------------------------------------------------------------*/

  PC0LS56(); /* ===> get next sequence number*/

  PC0LS22(); /* ===> insert the new item record*/


   /* ------------------------------------------------------------*/
                   /* ADD NEW PRODUCT W/ NEW QUANIT.*/
                           /* "Audit"*/
   /* ------------------------------------------------------------*/

  PC0LS55(); /* ===> get next audit item sequence*/
                                   /* number*/


  VPOAIT02.PCIBFRN = 0; /* ===>  before*/
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* ===> after*/
  VPOAIT02.PCJNETQT = VPOITM05.PC6TORDE;

  VPOAIT02.YOACD = "60"; /* ADD NEW PRODUCT W/ NEW QUANIT.*/

  PC0LS31(); /* ===> Driver for Get and Load audit*/
                                   /* record flags*/

  PC0LS12(); /* ===> insert the item audit record*/


   /* **                                                        ***/
   /* ********************** End of PC0L367 ***********************/
end // end PC0L367

// Format size & audit "INSERT"
Function PC0L368()
   /* ----------------------------------------------------------*/
                    /* "INSERT" SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
      /* Note:*/
        /* 1. This process uses the saved item key*/
           /* that is contained in the VPOITM05.*/
           /* and the saved size record "PC0LW07" that is*/
           /* associated this key is and has been loaded*/
           /* in the select unique item step.*/
   /* ----------------------------------------------------------*/


  set VPOASZ02 empty;

  VPOASZ02.XGPCD = VPOAIT02.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOAIT02.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOAIT02.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO;
  VPOASZ02.SY1STNBR = VPOAIT02.SY1STNBR;
  VPOASZ02.SY2CLRID = VPOAIT02.SY2CLRID;
  VPOASZ02.XDMCD = VPOAIT02.XDMCD;
  VPOASZ02.XQACD = VPOAIT02.XQACD;
  VPOASZ02.XOWCD = VPOAIT02.XOWCD;
  VPOASZ02.PC2INSEG = VPOAIT02.PC2INSEG;
  VPOASZ02.XPGCD = VPOAIT02.XPGCD;
  VPOASZ02.XUMCD = VPOAIT02.XUMCD;
  VPOASZ02.PC6ETSDT = VPOAIT02.PC6ETSDT;
  VPOASZ02.PC6OETS = VPOAIT02.PC6OETS;
  VPOASZ02.PC6RTADT = VPOAIT02.PC6RTADT;
  VPOASZ02.YMTCD = VPOAIT02.YMTCD;
  VPOASZ02.PC6CXNBR = VPOAIT02.PC6CXNBR;
  VPOASZ02.XWHCD = VPOAIT02.XWHCD;
  VPOASZ02.PC2CUXID = VPOAIT02.PC2CUXID;
  VPOASZ02.OP1PARTN = VPOAIT02.OP1PARTN; /* SALES ORDER FIELDS*/
  VPOASZ02.OP1CUOID = VPOAIT02.OP1CUOID; /* SALES ORDER FIELDS*/
  VPOASZ02.OP1NORID = VPOAIT02.OP1NORID; /* SALES ORDER FIELDS*/

  VPOASZ02.ZFC-CRCY-CD = "   "; /* new june-93*/

  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move PC0LW07.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;
  move PC0LW07.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;


  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0LS25();


   /* ----------------------------------------------------------*/
    /* Load and insert a newly created size record*/
   /* ----------------------------------------------------------*/

  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> new seq nbr*/

  move PC0LW07.PC7ORIGQ to VPOSIZ02.PC7ORIGQ[1] for all;
  move PC0LW07.PC7ORDEQ to VPOSIZ02.PC7ORDEQ[1] for all;
  move PC0LW07.PC7FOBFL to VPOSIZ02.PC7FOBFL[1] for all;
  move PC0LW07.FY4FOBPR to VPOSIZ02.FY4FOBPR[1] for all;

  VPOSIZ02.ZFC-CRCY-CD = "   "; /* new 6-93,spaces for now*/

  VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0LS23(); /* ===> insert size row*/


   /* **                                                        ***/
   /* ********************** End of PC0L368 ***********************/
end // end PC0L368

// ajust Blank Avail. tbl
Function PC0L369()
   /* ------------------------------------------------------------*/
   /* Move values to available inventory record.*/
   /* ------------------------------------------------------------*/
  set AVLREC empty;

  PC0LW01.PC0LWACM = " "; /* clear av comment area*/
  PC0LW01.PC0LWAC1 = "PO"; /* po label*/
  PC0LW01.PC0LWAC2 = VPOITM05.PC3PONBR; /* po nbr*/
  PC0LW01.PC0LWAC3 = "STY"; /* style label*/
  PC0LW01.PC0LWAC4 = VPOITM05.SY1STNBR; /* finished style*/
  PC0LW01.PC0LWAC5 = "CLR"; /* color label*/
  PC0LW01.PC0LWAC6 = VPOITM05.SY2CLRID; /* finished color*/

  if (PC0LW02.PC4ORTYP == "SD" /* changed a dummy po*/
   || PC0LW02.PC4ORTYP == "CD") /* to a live po*/
    PC0LW01.PC0LWMLT = -1; /* decrement avail inventory*/
    PC0LW01.PC0LWAC7 = "DEC"; /* avail action*/
  end

  if (PC0LM002.PC4ORTYP == "SD" /* changed a live po*/
   || PC0LM002.PC4ORTYP == "CD") /* to a dummy po*/
    PC0LW01.PC0LWMLT = +1; /* increment avail inventory*/
    PC0LW01.PC0LWAC7 = "INC"; /* avail action*/
  end

  AVLREC.AV2CMNT = PC0LW01.PC0LWACM;

  PC0LW01.XXX1 = +1; /* initialize index*/
  while (PC0LW01.XXX1 <= 40)
    AVLREC.AVLADJQT[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    AVLREC.AVLADJQT[XXX1] = AVLREC.AVLADJQT[XXX1] * PC0LW01.PC0LWMLT;
    PC0LW01.XXX1 = PC0LW01.XXX1 + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Get the blank style and color from the style color recd.*/
   /* ------------------------------------------------------------*/
  set PG2REC empty;
  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  PG2REC.XDMCD = VPOITM05.XDMCD; /* dimension*/

  XSPG202(); /* retrieve style color recd*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(52); /* recd not found, error*/
    set PC0LM002.PC4ORTYP cursor, bold; /* highlight error*/
    PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/
    PC0LW01.PC0LWINF = "Y"; /* move y to error flag*/
    exit stack; /* exit to redisplay map2*/
  else
    if (PG2REC.PG2SCRFL != "S" /* finished good*/
     && PG2REC.PG2SCRFL != "I") /* interim good*/
      converseLib.validationFailed(402); /* recd not found, error*/
      set PC0LM002.PC4ORTYP cursor, bold; /* highlight error*/
      PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/
      PC0LW01.PC0LWINF = "Y"; /* move y to error flag*/
      exit stack; /* exit to redisplay map2*/
    end
  end /* ==> style not found on product table*/

   /* ------------------------------------------------------------*/
   /* get iseg code from cust xref table using factory code*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Clear record*/
  PC2REC.PC2CUXID = VPOITM05.FY1FCTYC;
  PC2REC.XGPCD = "03";

  PC0LS08(); /* Call Customer Cross Ref. Table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
    if (PC2REC.XXXSTAT == "A") /* Active status*/

      /* next sentence*/

    else
      set PC0LM002.PC4ORTYP cursor, bold; /* type highlighted*/
      PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/
      PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
      converseLib.validationFailed(411); /* cust xref not active*/
      exit stack; /* exit to redisplay map2*/
    end
  else
    if (PG2REC.PG2SCRFL != "S" /* finished good*/
     && PG2REC.PG2SCRFL != "I") /* interim good*/
      set PC0LM002.PC4ORTYP cursor, bold; /* type highlighted*/
      PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
      converseLib.validationFailed(410); /* not valid fcty to adj. invent*/
      exit stack; /* exit to redisplay map2*/
    else
      return; /* return previous process*/
    end
  end

  AVLREC.SY1STNBR = PG2REC.SY1BSTNB; /* blank style*/
  AVLREC.SY2CLRID = PG2REC.SY2BCLCD; /* blank color*/
  AVLREC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  AVLREC.XQACD = VPOITM05.XQACD; /* Quality*/
  AVLREC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  AVLREC.PC2INSEG = PC2REC.PC2INSEG; /* Spec difference*/
  AVLREC.XPGCD = VPOITM05.XPGCD; /* Package*/
  AVLREC.XWHCD = "  "; /* Warehouse*/
  AVLREC.XXXUSER = "PC0L"; /* user id*/
  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  TA1REC.TA1PGMNM = "PC0L369";

   /* ------------------------------------------------------------*/
   /* before decrementing availability, a check is made against*/
   /* the availability table to make sure the record exists.  if*/
   /* the record is not found, this is an error and processing is*/
   /* is halted.  otherwise, processing continues.*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWMLT < 0) /* decrementing availability*/

    XSAVS11();

    if (SQLCA.VAGen_SQLCODE != 0) /* nothing there*/
      set PC0LM002.PC4ORTYP cursor, bold; /* type highlighted*/
      PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
      converseLib.validationFailed(413); /* availibility record not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all database changes*/
      exit stack; /* exit to redisplay map2*/
    end
  end

  XSAVS10();

  if (AVLREC.AVLRTNCD == 0)
    return; /* return previous process*/
  else
    if (AVLREC.AVLRTNCD == 1)
      converseLib.validationFailed(10); /* indicate parms missing*/
    else
      if (AVLREC.AVLRTNCD == 2)
        converseLib.validationFailed(401); /* indicate not enough inventory*/
      else
        if (AVLREC.AVLRTNCD == 3)
          converseLib.validationFailed(11); /* Indicate not available*/
        else
          if (AVLREC.AVLRTNCD == 4
           || AVLREC.AVLRTNCD == 5)
          end /* ==> system error occurred*/
        end /* ==> blank style not available*/
      end /* ==> not enough inventory*/
    end /* ==> invalid parameters*/
  end /* ==> style processed*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database changes*/

  PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
  set PC0LM002.PC4ORTYP cursor, bold; /* type highlighted*/
  PC0LM002.XXXPRCNM = "PC0L369"; /* process name*/

  exit stack; /* exit to redisplay map2*/

end // end PC0L369

// PROCESS ADD MAP2
Function PC0L400()

   /* ------------------------------------------------------------*/
   /* This is the main process used to CHANGE P.O.s.  Proc-*/
   /* essing always returns to the top of this process and falls*/
   /* to subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/

  PC0L410(); /* Obtain the data to display*/

  PC0L420(); /* Format and display the map*/

  PC0L430(); /* Check attention identifier*/

  PC0L440(); /* Reset fields to normal intensity*/

  PC0L450(); /* Verify the entered data*/

  PC0L460(); /* Process valid input request*/


end // end PC0L400

// OBTAIN DATA TO DISPLAY
Function PC0L410()

   /* ------------------------------------------------------------*/
   /* IF COMMING FROM ANOTHER APPLICATION CHECK AND SEE IF DATA*/
   /* HAS BEEN REQUESTED.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No messages*/
   && PC0LW01.PC0LWSWR == "Y")          /* Request for data is yes*/

    set VPOHDR03 empty; /* Clear the P.O. header record*/
    set PCYREC empty; /* Clear record*/

  else

    return; /* Return to the previous process*/

  end

  if (PC0LW01.PC3PONBR > 0)
    PCYREC.PCYFUNC = "S "; /* Set function to select unique*/
    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOHDR03.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
  else
    PCYREC.PCYFUNC = "SA"; /* Set function to select alternate*/
    VPOHDR03.XGPCD = PC0LW01.XGPCD; /* Gpc code*/
    VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
    VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
    VPOHDR03.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. id*/
    VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. order type*/
  end

   /* ------------------------------------------------------------*/
   /* Select a unique header row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PC0LS02(); /* Get P.O. header row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/

    PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD; /* P.O. REGION CODE*/

  else
    set PC0LM001.PC3PONBR bold; /* P.O. number*/
    PC0LW01.PC0LWMAP = "1"; /* Set to map 1*/
    PC0LW01.PC0LWFNC = " "; /* Set to map 1*/
    converseLib.validationFailed(18); /* No data to display*/
    PC0LM001.XXXPRCNM = "PC0L410"; /* Process name*/
    exit stack; /* Exit to display map 1*/
  end


end // end PC0L410

// FORMAT AND DISPLAY MAP
Function PC0L420()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWINF == "N") /* No hard error*/
    if (PC0LW01.PC0LWSWR == "Y") /* Request for data y*/
      PC0L421(); /* Format the map data*/
      PC0L422(); /* Get descriptions from tables*/
    else
         /* IF PC0LW01.XGPCD EQ '02'    ; Footware*/
      /* MOVE 'Y' TO PC0LM002.PC3RCRFL; Set revol.credit flag'y'*/
         /* ELSE ;*/
      /* MOVE 'N' TO PC0LM002.PC3RCRFL; Set revolving credit flag*/
         /* END ;*/
    end
    PC0L423(); /* Set map conditions*/
  else
    set PC0LM002 alarm; /* Indicate sound alarm*/
  end

  PC0LM002.XGPCD = PC0LW01.XGPCD; /* Move GPC code to map2*/
  PC0LM002.XGPDESC = PC0LW01.XGPDESC;

  PC0LM002.PC0LM3L = "3:PO MN";
  PC0LM002.PC0LM21L = "21:NEW HDR";
  PC0LM002.PC0LM13L = "13:ADD IN HDR";

  if (PC0LM001.XGPCD == "01") /* Promo*/
    PC0LM002.PC4ORTYP = "RM"; /* PO type*/
    PC0LM002.PC4SDESC = "RTL MKTING"; /* PO Type desc.*/
  end

  if (PC0LM001.XGPCD == "07") /* Posters*/
    PC0LM002.PC4ORTYP = "RP"; /* PO type*/
    PC0LM002.PC4SDESC = "RETAIL POSTERS"; /* PO Type desc.*/
  end

  PC0LM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0LM002.PC0LMFNC = "ENTRY"; /* Entry literal*/

  converse PC0LM002 ;

  PC0LW01.PC0LWINF = "N"; /* No hard error*/
  PC0LW01.PC0LWSWR = "N"; /* Request for data N*/

   /* ---------------------------------------------------------*/
   /* CHECK AND SEE IF USER HAS REQUESTED POP-UP WINDOW*/
   /* ---------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter key pressed*/
    PC0L424(); /* Check pop-up window*/
  end


end // end PC0L420

// MOVE DATA TO MAP
Function PC0L421()

   /* ------------------------------------------------------------*/
   /* MOVE THE VPOHDR03 INFORMATION TO THE MAP*/
   /* ------------------------------------------------------------*/

  PC0LW01.PO-REG-CD = VPOHDR03.PO-REG-CD; /* P.O. REGION CODE*/

  if (VPOHDR03.XGPCD != "03")
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = PC0LW01.PC0LMPYR; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
    PC0LM002.FY1FCTSN = PC0LW01.FY1FCTSN; /* Factory short name*/
  else
    PC0LW01.PC0LWODT = VPOHDR03.PC3POIDT; /* P.O. id*/
    PC0LM002.PC0LMPYR = VPOHDR03.PCFSECD; /* P.O. id*/
    PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
    PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/
    PC0LM002.FY1FCTYC = VPOHDR03.FY1FCTYC; /* Factory code*/
    PC0LM002.FY1FCTSN = PC0LW01.FY1FCTSN; /* Factory short name*/
    PC0LM002.TSEOXCC = VPOHDR03.TSEOXCC; /* ctry of origin*/
    PC0LM002.PC0LM-XCT-ORIG-CD = VPOHDR03.PC-XCT-ORIG-CD;
                                   /* mfg ctry of origin*/
  end
  if (VPOHDR03.XGPCD == "01"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. id*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id*/
  end
  if (VPOHDR03.XGPCD == "07"
   && VPOHDR03.PC3POIDT == 00000000) /* P.O. id*/
    PC0LM002.PC0LMPYR = " "; /* P.O. id*/
    PC0LM002.PC0LMPMO = " "; /* P.O. id*/
    PC0LM002.PC0LMDMO = " "; /* P.O. id*/
  end

   /* ------------------------------------------------------------*/
   /* SWITCH DATES TO MAP FORMAT*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.PC3MAILD > 0) /* Mail date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3MAILD; /* Mail date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LW01.PC0LMMDT = PC0LW01.PC0LWMDY;
    PC0LM002.PC0LMMDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3ACKDT > 0) /* Acknowledge date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3ACKDT;
                                   /* Acknowledge date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LW01.PC0LMADT = PC0LW01.PC0LWMDY;
    PC0LM002.PC0LMADT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3NISFL == "Y" &&  /* NISSHO SNT FLAG*/
  VPOHDR03.PC3NISDT > 0)           /* NISSHOSNT DATE*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3NISDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMLDT = PC0LW01.PC0LWMDY; /* LC DATE*/
  end

  if (VPOHDR03.PC3PRTDT > 0) /* Print date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3PRTDT; /* Print date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMPDT = PC0LW01.PC0LWMDY;
  end

  if (VPOHDR03.PC3CRDT > 0) /* Entry date has a date*/
    PC0LW01.PC0LWDAT = 0; /* Switching date*/
    PC0LW01.PC0LWDAT = VPOHDR03.PC3CRDT; /* Entry date/Switching date*/
    PC0LW01.PC0LWMDY = 0; /* Switched date*/

    PC0LS03(); /* Date switch routine*/

    PC0LM002.PC0LMEDT = PC0LW01.PC0LWMDY;
  end

   /* ------------------------------------------------------------*/
   /* MOVE IN THE REST OF THE RECORD TO THE MAP*/
   /* ------------------------------------------------------------*/

  if (VPOHDR03.XGPCD == "02" /* Footware*/
   && VPOHDR03.XSECD > " ")  /* Something there*/
    PC0LW01.XSECD = VPOHDR03.XSECD; /* Season code*/
    PC0LM002.XSECD = PC0LW01.XSECD; /* Season code*/
    PC0LW01.PC0LWAYR = VPOHDR03.PCFSEYR; /* Season year*/
    PC0LM002.PC0LMSYR = PC0LW01.PC0LWAYE;
  end

  PC0LM002.PC4ORTYP = VPOHDR03.PC4ORTYP;
  PC0LM002.PC3PONBR = VPOHDR03.PC3PONBR;
  PC0LM002.PC0LMSDT = VPOHDR03.PC3STADT; /* Status date*/
  PC0LM002.PC3ATTEN = VPOHDR03.PC3ATTEN; /* Attention name*/
  PC0LM002.PC3BLPO = VPOHDR03.PC3BLPO; /* Blank p.o. number*/
  PC0LM002.IN7STNBR = VPOHDR03.IN7STNBR; /* Stock xfer number*/
  PC0LM002.PC3RCRFL = VPOHDR03.PC3RCRFL; /* Revolving credit flag*/
  PC0LM002.PC3COMP = VPOHDR03.PC3COMP; /* Comp. number*/
  PC0LM002.PC3ORDBY = VPOHDR03.PC3ORDBY; /* Ordered by*/
  PC0LM002.PC3SHVIA = VPOHDR03.PC3SHVIA; /* Ship via*/
  PC0LM002.PC3FOBLC = VPOHDR03.PC3FOBLC; /* FOB shipping point*/
  PC0LM002.PC3REQNO = VPOHDR03.PC3REQNO; /* Requisition number*/
  PC0LM002.PC3REQDP = VPOHDR03.PC3REQDP; /* Requisition department*/
  PC0LM002.PC3CMPNT = VPOHDR03.PC3CMPNT; /* Component*/
  PC0LM002.PC3LCPCT = VPOHDR03.PC3LCPCT * 100; /* dom l/c %*/
  PC0LM002.PC3LCNPC = VPOHDR03.PC3LCNPC * 100; /* nil l/c %*/
  PC0LM002.PC3SIFL = VPOHDR03.PC3SIFL; /* Special inst. flag*/


end // end PC0L421

// GET DESCRIPTIONS
Function PC0L422()

   /* ------------------------------------------------------------*/
   /* LOOK UP STATUS CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YPUCD = VPOHDR03.YPUCD; /* Status code*/
  if (VPOHDR03.YPUCD in YPUTBL.YPUCD)
    PC0LM002.YPUDESC = YPUTBL.YPUDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP HOLD CODE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  PC0LM002.YOHCD = VPOHDR03.YOHCD; /* Hold code*/
  if (VPOHDR03.YOHCD in YOHTBL.YOHCD)
    PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* LOOK UP ORDER TYPE AND MOVE TO MAP2*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Clear record*/
  PC4REC.PC4ORTYP = VPOHDR03.PC4ORTYP; /* Type code*/
  PC4REC.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  PC0LS04(); /* Select type row*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    PC0LW01.PC4ORTYP = PC4REC.PC4ORTYP; /* Type code*/
    PC0LW01.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
    PC0LM002.PC4ORTYP = PC4REC.PC4ORTYP; /* Type code*/
    PC0LM002.PC4SDESC = PC4REC.PC4SDESC; /* Type desc.*/
  else
    set PC0LM002.PC4ORTYP bold; /* Type code*/
    PC0LM002.XXXPRCNM = "PC0L422"; /* Process name*/
    PC0LW01.PC0LWINF = "N"; /* Turn on error*/
    converseLib.validationFailed(33); /* Type invalid*/
  end


end // end PC0L422

// SET MAP CONDITIONS
Function PC0L423()

   /* ------------------------------------------------------------*/
    /* DARKEN AND PROTECT NON-NEEDED FIELDS*/
   /* ------------------------------------------------------------*/

  set PC0LM002.PC3ENTBY skip, modified, invisible; /* Entered by*/
  set PC0LM002.PC0LMEBL skip, invisible; /* Entered by literal*/
  set PC0LM002.PC0LMEDT skip, modified, invisible; /* Entered date*/
  set PC0LM002.PC0LMENL skip, invisible; /* Entered date literal*/
  set PC0LM002.PC0LMPDT skip, modified, invisible; /* Print date*/
  set PC0LM002.PC0LMPRL skip, invisible; /* Print date literal*/
  set PC0LM002.PC0LMLRL skip, invisible; /* Print date literal*/
  set PC0LM002.XWHABRV skip, invisible; /* Whse. abrv.*/
  set PC0LM002.XWHCD skip, modified, invisible; /* Whse. code*/
  set PC0LM002.PC0LMWHL skip, invisible; /* Whse. literal*/
  set PC0LM002.PC2CUXID skip, modified, invisible; /* Custormer xref.*/
  set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
  set PC0LM002.PC0LM-SO-LIT skip, invisible; /* SO literal*/
  set PC0LM002.OP1CUOID skip, invisible; /* SO*/
  set PC0LM002.OP1NORID skip, invisible; /* SO*/
  set PC0LM002.PC0LMSDL skip, invisible; /* Status date literal*/
  set PC0LM002.PC0LMSDT skip, invisible; /* Status date*/
  set PC0LM002.YPUDESC skip, invisible; /* Status description*/
  set PC0LM002.YPUCD skip, modified, invisible; /* Status code*/
  set PC0LM002.PC0LMSTL skip, invisible; /* Status literal*/
  set PC0LM002.PC0LMCPL skip, invisible; /* Change product literal*/
  set PC0LM002.PC0LMPLL skip, invisible; /* Product list literal*/
  set PC0LM002.PC0LMLCP skip, invisible; /* dom Nego. l/c % literal*/
  set PC0LM002.PC3LCPCT skip, invisible; /* dom Nego. l/c %*/
  set PC0LM002.PC0LMNPC skip, invisible; /* nil Nego. l/c % literal*/
  set PC0LM002.PC3LCNPC skip, invisible; /* nil Nego. l/c %*/
  set PC0LM002.PC0LMSIL skip, invisible; /* Special inst. literal*/
  set PC0LM002.PC3SIFL skip, modified, invisible; /* Special inst.*/
  set PC0LM002.PC0LMOPL skip, invisible; /* Option literal*/
  set PC0LM002.PC0LMITL skip, invisible; /* Item literal*/
  set PC0LM002.CATOAP protect, modified, invisible; /* Option*/
  set PC0LM002.CAITEM protect, modified, invisible; /* Item*/
  set PC0LM002.PC0LM15L skip, invisible; /* Cancel header literal*/
  set PC0LM002.PC0LMPOL skip, invisible; /* P.O. number literal*/
  set PC0LM002.PC3PONBR skip, invisible; /* P.O. number*/
  set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
  set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin literal*/
  set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                   /* mfg ctry of origin*/
  set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                   /* mfg ctry of origin literal*/
  set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
  set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/


   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS PROTECTED FOR GPC'S 1,2,3*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PCWREC.XGPCD == "01"   /* Promo*/
   || PC0LM002.XGPCD == "07" /* Posters*/
   || PCWREC.XGPCD == "07")  /* Posters*/

    set PC0LM002.PC0LMPOL protect; /* P.O. literal*/
    set PC0LM002.PC3PONBR cursor, initialAttributes; /* P.O. number*/
    set PC0LM002.PC3BLPO protect, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect, invisible; /* Stock xfer number*/
    set PC0LM002.PC3RCRFL protect, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, invisible; /* Comp. number*/
    set PC0LM002.PC3CMPNT protect, invisible; /* Component*/
    set PC0LM002.PC0LMCML protect, invisible; /* Component literal*/
    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC0LMBNL protect, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL protect, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR protect, invisible; /* Season year*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "02" /* Footwear*/
   || PCWREC.XGPCD == "02")  /* Footwear*/

    set PC0LM002.PC0LMBNL protect, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL protect, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC3PONBR protect, invisible; /* P.O. Number*/
    set PC0LM002.PC0LMPOL protect, invisible; /* P.O. Number*/
    set PC0LM002.PC3BLPO protect, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect, invisible; /* Stock xfer number*/
    set PC0LM002.PC3CMPNT initialAttributes; /* Component*/
    set PC0LM002.PC0LMCML initialAttributes; /* Component literal*/
    set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
    set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

  end

  if (PC0LM002.XGPCD == "03" /* Apparel*/
   || PCWREC.XGPCD == "03")  /* Apparel*/

    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC3PONBR protect, invisible; /* P.O. Number*/
    set PC0LM002.PC0LMPOL protect, invisible; /* P.O. Number*/
    set PC0LM002.PC3RCRFL protect, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, invisible; /* Comp. number*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, invisible; /* Season code*/
    set PC0LM002.PC0LMSYR protect, invisible; /* Season year*/
    set PC0LM002.PC3CMPNT protect, invisible; /* Component*/
    set PC0LM002.PC0LMCML protect, invisible; /* Component literal*/
    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.TSEOXCC initialAttributes; /* ctry of origin*/
    set PC0LM002.PC0LMTOC initialAttributes; /* ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD initialAttributes;
                                   /* mfg ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL initialAttributes;
                                   /* mfg ctry of origin literal*/
    set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/
    set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

  end

  if (PC0LW01.PC0LWSWR == "Y")
    set PC0LM002.PC0LMPOL protect; /* P.O. number literal*/
    set PC0LM002.PC3PONBR protect; /* P.O. number*/
  end

   /* ------------------------------------------------------------*/
    /* IF CANCEL CONFIRM FLAG ON PROTECT ALL FIELDS*/
    /* IF HEADER ADDED/CHANGED FLAG ON PROTECT ALL FIELDS*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC0LWHAC == "Y") /* Header added/changed on*/

    set PC0LM002.XXXPRCNM cursor; /* Set cursor at process name*/
    set PC0LM002.PC0LMPYR protect; /* P.O. id year*/
    set PC0LM002.PC0LMPMO protect; /* P.O. id buy month*/
    set PC0LM002.PC0LMDMO protect; /* P.O. id delivery month*/
    set PC0LM002.FY1FCTYC protect; /* Factory code*/

    set PC0LM002.PC0LMPOL protect; /* P.O. Number literal*/
    set PC0LM002.PC3PONBR protect; /* P.O. number*/
    set PC0LM002.PC3ATTEN protect; /* Attention name*/
    set PC0LM002.PC0LMADT skip; /* Acknowledge date*/
    set PC0LM002.PC0LMMDT skip; /* Mail date*/
    set PC0LM002.PC3BLPO protect; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect; /* Stock xfer number*/
    set PC0LM002.PC3ORDBY protect; /* P.O. ordered by*/
    set PC0LM002.PC3SHVIA protect; /* Ship via*/
    set PC0LM002.PC3FOBLC protect; /* FOB shipping point*/
    set PC0LM002.YOHCD protect; /* Hold code*/
    set PC0LM002.PC4ORTYP protect; /* P.O type code*/
    set PC0LM002.PC0LMSIL skip, invisible; /* Special inst. literal*/
    set PC0LM002.PC3SIFL skip, modified, invisible; /* Special inst. flag*/
    set PC0LM002.PC3REQNO skip; /* Requisition number*/
    set PC0LM002.PC3REQDP skip; /* Requisition department*/
    set PC0LM002.PC3LCPCT protect; /* dom Nego. l/c %*/
    set PC0LM002.PC3LCNPC protect; /* nil Nego. l/c %*/
    set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
    set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/

    if (PC0LM002.XGPCD == "02" /* Footware*/
     || VPOHDR03.XGPCD == "02") /* Footware*/
      set PC0LM002.PC3BLPO skip, invisible; /* Blank p.o. number*/
      set PC0LM002.IN7STNBR skip, invisible; /* Stock xfer number*/
      set PC0LM002.PC3RCRFL skip; /* Revolving credit flag*/
      set PC0LM002.XSECD skip; /* Season code*/
      set PC0LM002.PC0LMSYR skip; /* Season year*/
      set PC0LM002.PC3COMP skip; /* Comp. number*/
      set PC0LM002.PC3CMPNT skip; /* Component*/
      set PC0LM002.PC3LCPCT skip; /* dom Nego. l/c %*/
      set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
      set PC0LM002.PC3LCNPC skip; /* nil Nego. l/c %*/
      set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
      set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator literal*/
      set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/
    else
      set PC0LM002.PC3RCRFL protect, invisible; /* Revolving credit flag*/
      if (PC0LM002.XGPCD == "03" /* apparel*/
       || VPOHDR03.XGPCD == "03") /* apparel*/
        set PC0LM002.TSEOXCC skip; /* ctry of origin*/
        set PC0LM002.PC0LMTOC initialAttributes; /* ctry of origin literal*/
        set PC0LM002.PC0LM-XCT-ORIG-CD skip;
                                   /* mfg ctry of origin*/
        set PC0LM002.PC0LM-XCT-ORIG-LITERAL initialAttributes;
                                   /* mfg ctry of origin literal*/
        set PC0LM002.PC0LPMID skip, invisible; /* LC Payment Indicator*/
        set PC0LM002.PC0LPYID skip, invisible; /* LC Payment Indicator*/
      end
    end
  end


end // end PC0L423

// POP-UP WINDOWS FOR ADD
Function PC0L424()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0LM002.YOHCD == "?" /* if ? in hold code field*/
   || PC0LM002.XSECD == "?") /* if ? in season code field*/

        /* NEXT SENTENCE*/

  else

    return; /* Return to previous process*/

  end

  if (PC0LM002.YOHCD == "?") /* if ? in gpc code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                HOLD CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYOH01(); /* perform hold code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the GPC        **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.YOHCD = YOHTBL.YOHCD[XX0XWPIX]; /* move code*/
      PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[XX0XWPIX]; /* move sdesc.*/
      set PC0LM002.YOHCD cursor;
    else
      PC0LM002.YOHCD = PC0LW01.YOHCD; /* clear fields*/
      PC0LM002.YOHSDESC = PC0LW01.YOHSDESC;
      set PC0LM002.YOHCD cursor;
    end
  end


  if (PC0LM002.XSECD == "?") /* if ? in Season code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                SEASON CODES"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXSE01(); /* perform Season code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the Season     **/
     /* *  table code to the map.                               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0LM002.XSECD = XSETBL.XSECD[XX0XWPIX]; /* move code*/
      set PC0LM002.XSECD cursor, modified;
    else
      PC0LM002.XSECD = PC0LW01.XSECD; /* clear fields*/
      set PC0LM002.XSECD cursor, modified;
    end
  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  converseLib.validationFailed(84); /* Hit enter to process*/
  PC0LW01.PC0LWINF = "Y"; /* Turn on error*/

  exit stack; /* Exit to redisplay map2*/


end // end PC0L424

// CHECK ATTENTION IDENTIFIERS
Function PC0L430()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
    
    PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
    PC0LW01.PC0LWHAC = "N"; /* Reset header added/changed*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CAFROMAP = "PC0L"; /* Came from application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "A"; /* Application find code*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set PCWREC empty; /* Clear pc area*/
      COMMAREA.CACURRAP = "PC0X"; /* User application*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      XSPCS01(); /* Exit to another application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      XSPCS01(); /* Exit to another application*/
    end

    set PC0LM002 initial;

    PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0LM002.YPUCD == "IN")       /* Incomplete status*/
    converseLib.validationFailed(173); /* Indicate invalid attention key*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
    PC0LM002.XXXPRCNM = "PC0L430"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is enter
   && PC0LM002.XGPCD == "02") /* Footwear*/
    if (PC0LM002.PC4ORTYP == "FT" /* po type = 'ft' (inline)*/
     || PC0LM002.PC4ORTYP == "OR" /* or po type = 'or' (overruns)*/
     || PC0LM002.PC4ORTYP == "S1" /* or po type = 's1' (1st qlty)*/
     || PC0LM002.PC4ORTYP == "S4") /* or po type = 's4' (overruns)*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
      converseLib.validationFailed(356); /* po types 'or','ft' gpc '02' can't add products*/
      PC0LM002.XXXPRCNM = "PC0L430"; /* Module identification*/
      exit stack; /* Exit to display map*/
    end
  end


  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0LM002.YPUCD == "IN")      /* INcomplete*/
    converseLib.validationFailed(187); /* P.O. already incomplete*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/
    PC0LM002.XXXPRCNM = "PC0L430"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    set PC0LM002 initial; /* Clear map*/
    PC0LW01.PC0LWSWR = "N"; /* Request for data switch*/
    PC0LW01.PC0LWHAC = "N"; /* Reset header added/changed*/
    PC0LW01.XSECD = " "; /* Clear season code*/
    PC0LW01.YOHCD = " "; /* Clear hold code*/
    PC0LW01.YOHSDESC = " "; /* Clear hold code s.desc.*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* PF6  was not pressed*/
   && converseVar.eventKey not pf13  /* PF13 was not pressed*/
   && converseVar.eventKey not pf21) /* PF21 was not pressed*/

    PC0LM002.XXXPRCNM = "PC0L430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end PC0L430

// RESET HIGHLIGHTED FIELDS
Function PC0L440()

   /* ------------------------------------------------------------*/
   /* Reset all field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0LM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0LM002.CAITEM initialAttributes; /* Commarea application data*/

  set PC0LM002.PC0LMPYR initialAttributes; /* P.O. id*/
  set PC0LM002.PC0LMPMO initialAttributes; /* P.O. id*/
  set PC0LM002.PC0LMDMO initialAttributes; /* P.O. id*/
  set PC0LM002.FY1FCTYC initialAttributes; /* Factory code*/

  set PC0LM002.PC3PONBR initialAttributes;
  set PC0LM002.PC0LMSDT initialAttributes; /* Status date*/
  set PC0LM002.PC3ATTEN initialAttributes; /* Attention name*/
  set PC0LM002.PC0LMMDT initialAttributes; /* Mail date*/
  set PC0LM002.PC0LMADT initialAttributes; /* Acknowledge date*/
  set PC0LM002.PC3BLPO initialAttributes; /* Blank p.o. number*/
  set PC0LM002.PC0LMPDT initialAttributes; /* Print date*/
  set PC0LM002.IN7STNBR initialAttributes; /* Stock xfer number*/
  set PC0LM002.PC0LMEDT initialAttributes; /* Entry date*/
  set PC0LM002.PC3ENTBY initialAttributes; /* Enter by date*/
  set PC0LM002.PC3RCRFL initialAttributes; /* Revolving credit flag*/
  set PC0LM002.PC3ORDBY initialAttributes; /* P.O. ordered by*/
  set PC0LM002.PC3COMP initialAttributes; /* Comp. number*/
  set PC0LM002.PC3SHVIA initialAttributes; /* Ship via*/
  set PC0LM002.PC3FOBLC initialAttributes; /* FOB shipping point*/
  set PC0LM002.PC3REQNO initialAttributes; /* Requisition number*/
  set PC0LM002.PC3REQDP initialAttributes; /* Requisition department*/

  set PC0LM002.YPUCD initialAttributes; /* Status code*/
  set PC0LM002.YOHCD initialAttributes; /* Hold code*/
  set PC0LM002.PC4ORTYP initialAttributes; /* Type code*/
  set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
  set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
  set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
  set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/


   /* ------------------------------------------------------------*/
    /* DARKEN AND PROTECT NON-NEEDED FIELDS*/
   /* ------------------------------------------------------------*/


  set PC0LM002.PC3ENTBY skip, modified, invisible; /* Entered by*/
  set PC0LM002.PC0LMEBL skip, invisible; /* Entered by literal*/
  set PC0LM002.PC0LMEDT skip, modified, invisible; /* Entered date*/
  set PC0LM002.PC0LMENL skip, invisible; /* Entered date literal*/
  set PC0LM002.PC0LMPDT skip, modified, invisible; /* Print date*/
  set PC0LM002.PC0LMPRL skip, invisible; /* Print date literal*/
  set PC0LM002.PC0LMLRL skip, invisible; /* l/c   date literal*/
  set PC0LM002.XWHABRV skip, invisible; /* Whse. abrv.*/
  set PC0LM002.XWHCD skip, modified, invisible; /* Whse. code*/
  set PC0LM002.PC0LMWHL skip, invisible; /* Whse. literal*/
  set PC0LM002.PC2CUXID skip, modified, invisible; /* Custormer xref.*/
  set PC0LM002.PC0LMCXL skip, invisible; /* Customer literal*/
  set PC0LM002.PC0LM-SO-LIT skip, invisible; /* so literal*/
  set PC0LM002.OP1CUOID skip, invisible; /* so FIELDS*/
  set PC0LM002.OP1NORID skip, invisible; /* so FIELDS*/
  set PC0LM002.PC0LMTOC skip, invisible; /* ctry of origin literal*/
  set PC0LM002.TSEOXCC skip, modified, invisible; /* ctry of origin*/
  set PC0LM002.PC0LM-XCT-ORIG-LITERAL skip, invisible;
                                           /* mfg ctry of origin literal*/
  set PC0LM002.PC0LM-XCT-ORIG-CD skip, modified, invisible;
                                           /* mfg ctry of origin*/
  set PC0LM002.PC0LMSDL skip, invisible; /* Status date literal*/
  set PC0LM002.PC0LMSDT skip, invisible; /* Status date*/
  set PC0LM002.YPUDESC skip, invisible; /* Status description*/
  set PC0LM002.YPUCD skip, modified, invisible; /* Status code*/
  set PC0LM002.PC0LMSTL skip, invisible; /* Status literal*/
  set PC0LM002.PC0LMCPL skip, invisible; /* Change product literal*/
  set PC0LM002.PC0LMPLL skip, invisible; /* Product list literal*/
  set PC0LM002.PC0LMSIL skip, invisible; /* Special inst. literal*/
  set PC0LM002.PC3SIFL skip, modified, invisible; /* Special inst.*/
  set PC0LM002.PC0LMOPL skip, invisible; /* Option literal*/
  set PC0LM002.PC0LMITL skip, invisible; /* Item literal*/
  set PC0LM002.CATOAP protect, modified, invisible; /* Option*/
  set PC0LM002.CAITEM protect, modified, invisible; /* Item*/
  set PC0LM002.PC0LM15L skip, invisible; /* Cancel header literal*/
  set PC0LM002.PC0LMPOL skip, invisible; /* P.O. number literal*/
  set PC0LM002.PC3PONBR skip, invisible; /* P.O. number*/


   /* ------------------------------------------------------------*/
    /* SET THE FOLLOWING FIELDS PROTECTED FOR GPC'S 1,2,3*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PCWREC.XGPCD == "01"   /* Promo*/
   || PC0LM002.XGPCD == "07" /* Posters*/
   || PCWREC.XGPCD == "07")  /* Posters*/

    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC0LMBNL protect, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL protect, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.PC0LMPOL protect; /* P.O. literal*/
    set PC0LM002.PC3BLPO protect, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect, invisible; /* Stock xfer number*/
    set PC0LM002.PC3RCRFL protect, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, invisible; /* Comp. number*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, invisible;
    set PC0LM002.PC0LMSYR protect, invisible;
    set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
    set PC0LM002.PC3CMPNT skip, invisible; /* Component*/

  end

  if (PC0LM002.XGPCD == "02" /* Footwear*/
   || PCWREC.XGPCD == "02")  /* Footwear*/

    set PC0LM002.PC0LMBNL protect, invisible; /* Blank p.o. number literal*/
    set PC0LM002.PC0LMSXL protect, invisible; /* Stock xfer number literal*/
    set PC0LM002.PC3PONBR protect, invisible; /* P.O. Number*/
    set PC0LM002.PC0LMPOL protect, invisible; /* P.O. Number literal*/
    set PC0LM002.PC3BLPO protect, invisible; /* Blank p.o. number*/
    set PC0LM002.IN7STNBR protect, invisible; /* Stock xfer number*/
    set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/

  end

  if (PC0LM002.XGPCD == "03" /* Apparel*/
   || PCWREC.XGPCD == "03")  /* Apparel*/

    set PC0LM002.PC0LMCNL protect, invisible; /* Comp. number literal*/
    set PC0LM002.PC0LMLCL protect, invisible; /* Revolving credit flag literal*/
    set PC0LM002.PC3PONBR protect, invisible; /* P.O. Number*/
    set PC0LM002.PC0LMPOL protect, invisible; /* P.O. Number*/
    set PC0LM002.PC3RCRFL protect, invisible; /* Revolving credit flag*/
    set PC0LM002.PC3COMP protect, invisible; /* Comp. number*/
    set PC0LM002.PC0LMSYL protect, invisible; /* Season/year literal*/
    set PC0LM002.XSECD protect, invisible;
    set PC0LM002.PC0LMSYR protect, invisible;
    set PC0LM002.PC0LMCML skip, invisible; /* Component literal*/
    set PC0LM002.PC3CMPNT skip, invisible; /* Component*/
    set PC0LM002.PC0LMTOC initialAttributes; /* ctry of origin literal*/
    set PC0LM002.TSEOXCC initialAttributes; /* ctry of origin*/
    set PC0LM002.PC0LM-XCT-ORIG-LITERAL initialAttributes;
                                    /* mfg ctry of origin literal*/
    set PC0LM002.PC0LM-XCT-ORIG-CD initialAttributes; /* mfg ctry of origin*/
    set PC0LM002.PC0LMLCP initialAttributes; /* dom Nego. l/c % literal*/
    set PC0LM002.PC3LCPCT initialAttributes; /* dom Nego. l/c %*/
    set PC0LM002.PC0LMNPC initialAttributes; /* nil Nego. l/c % literal*/
    set PC0LM002.PC3LCNPC initialAttributes; /* nil Nego. l/c %*/

  end


end // end PC0L440

// VERIFY THE ENTERED DATA
Function PC0L450()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   || converseVar.eventKey is pf6   /* PF6 key pressed*/
   || converseVar.eventKey is pf13) /* PF13 key pressed*/

    if (PC0LW01.PC0LWHAC == "N") /* Add/Chg. flag not on*/

      PC0L451(); /* Validate the optional data*/
      PC0L452(); /* Validate the entered data*/

    end

  end


end // end PC0L450

// VALIDATE OPTIONAL DATA
Function PC0L451()

   /* ----------------------------------------------------------*/
   /* PERFORM OPTIONAL DETAILED EDITS*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* PERFORM GPC '03' EDITS*/
   /* FACTORY CUST XREF*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    if (PC0LM002.PC4ORTYP == "SD" /* screened dummy*/
     || PC0LM002.PC4ORTYP == "CD" /* custom dummy*/
     || PC0LM002.PC4ORTYP == "EM") /* embroidery*/
      set PC2REC empty; /* Clear record*/
      PC2REC.PC2CUXID = PC0LM002.FY1FCTYC;
      PC2REC.XGPCD = "03";

      PC0LS08(); /* Call Customer Cross Ref. Table*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (PC2REC.XXXSTAT == "A") /* Active status*/

          /* next sentence*/

        else
          set PC0LM002.FY1FCTYC cursor, bold; /* type highlighted*/
          PC0LM002.XXXPRCNM = "PC0L451"; /* process name*/
          PC0LW01.PC0LWINF = "Y"; /* turn on error flag*/
          converseLib.validationFailed(411); /* cust xref not active*/
        end
      else
        set PC0LM002.FY1FCTYC cursor, bold; /* type highlighted*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
        converseLib.validationFailed(410); /* not valid fcty to adj. inventory*/
      end
    end

    /* ----------------------------------------------------------*/
     /* STK. XREF. NUMBER*/
    /* ----------------------------------------------------------*/

    if (PC0LM002.IN7STNBR > 0) /* Something there*/
      set IN7REC empty; /* Clear record*/
      IN7REC.IN7STNBR = PC0LM002.IN7STNBR; /* Stock xfer nbr*/

      PC0LS05(); /* Call Stock trans. Table*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        if (PC0LM002.XGPCD == IN7REC.XGPCD) /* Gpcs the same*/

          PC0LW01.IN7STNBR = PC0LM002.IN7STNBR; /* Stock xfer nbr*/

        else
          set PC0LM002.IN7STNBR cursor, bold; /* Highlight error*/
          converseLib.validationFailed(212); /* Stock trans. invalid for gpc*/
          PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
        end
      else
        set PC0LM002.IN7STNBR cursor, bold; /* Highlight error*/
        converseLib.validationFailed(40); /* Stock trans. invalid*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    end

    /* ----------------------------------------------------------*/
     /* BLANK XREF. P.O. NUMBER*/
    /* ----------------------------------------------------------*/

    if (PC0LM002.PC3BLPO > 0) /* Something there*/
      set VPOHDR03 empty; /* Clear record*/
      set PCYREC empty; /* Clear record*/
      PCYREC.PCYFUNC = "S "; /* IOMOD pass function, select unique*/
      VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
      VPOHDR03.PC3PONBR = PC0LM002.PC3BLPO; /* Blank P.O. nbr*/
      VPOHDR03.XGPCD = PC0LM002.XGPCD; /* Gpc code*/


      PC0LS02(); /* Call P.O. Table*/


      if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
        PC0LW01.PC3PONBR = PC0LM002.PC3BLPO; /* Blank P.O. nbr*/

      else
        set PC0LM002.PC3BLPO cursor, bold; /* Highlight error*/
        converseLib.validationFailed(41); /* Blank p.o. invalid*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/

      end

      set VPOHDR03 empty; /* Clear record for reset*/

    end
  end

   /* ----------------------------------------------------------*/
   /* SEASON YEAR CHECK*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02")
    if (PC0LM002.XSECD > " "
     || PC0LM002.PC0LMSYR > " ") /* Something there*/

      if (PC0LM002.XSECD > " ")
        if (PC0LM002.PC0LMSYR >= "00" /* Something there*/
         && PC0LM002.PC0LMSYR <= "99") /* Something there*/
          PC0LW01.PC0LWAYE = PC0LM002.PC0LMSYR; /* Season year*/

          if (PC0LW01.PC0LWAYE >= 89)
            PC0LW01.PC0LWACY = 19; /* Season cent.*/
          else
            PC0LW01.PC0LWACY = 20; /* Season cent.*/
          end

          /* ******************Y2K IN***************************/
                                  /* IF PC0LW01.PC0LWAYE GE*/
                                   /* PC0LW01.PC0LWCYT;/* Year is equal or*/
          if (PC0LW01.PC0LWAYR >= PC0LW01.PC0LWCCY) /* Year is equal or*/
                                  /* gt current year*/
            /* ******************Y2K OUT**************************/
             /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(176); /* Must enter current year or gt*/
            PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
            PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
            set PC0LM002.PC0LMSYR cursor, bold; /* Highlight*/
          end
        else
          converseLib.validationFailed(176); /* Must enter current year or gt*/
          PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
          PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
          set PC0LM002.PC0LMSYR cursor, bold; /* Highlight*/
        end
      else
        PC0LW01.PC0LWACY = 00; /* Season cent. clear working field*/
        PC0LW01.PC0LWAYE = 00; /* Season year*/
      end

      /* ----------------------------------------------------------*/
       /* SEASON CODE CHECK*/
      /* ----------------------------------------------------------*/

      if (PC0LM002.XSECD in XSETBL.XSECD
       && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

        PC0LW01.XSECD = PC0LM002.XSECD;

      else
        converseLib.validationFailed(129); /* Invalid season code*/
        set PC0LM002.XSECD cursor, modified, bold; /* Highlight error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end

      if (PC0LM002.XSECD > " " /* Something here*/
       && PC0LM002.PC0LMSYR > " ") /* Something here*/

          /* NEXT SENTENCE*/

      else
        converseLib.validationFailed(38); /* Invalid year*/
        set PC0LM002.PC0LMSYR cursor, bold; /* Highlight error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end

      if (PC0LM002.PC0LMSYR > " " /* Something here*/
       && PC0LM002.XSECD == " ")  /* Something here*/
        converseLib.validationFailed(129); /* Invalid season code*/
        set PC0LM002.XSECD cursor, bold; /* Highlight error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    else
      PC0LW01.PC0LWACY = 00; /* Season cent.*/
      PC0LW01.PC0LWAYE = 00; /* Season year*/
    end
  end

   /* ----------------------------------------------------------*/
   /* LETTER OF CREDIT CHECK*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02")
    if (PC0LM002.PC3RCRFL == "Y"
     || PC0LM002.PC3RCRFL == "N")

         /* NEXT SENTENCE*/

    else
      if (PC0LM002.PC3RCRFL == " " /* nothing entered in rcrfl*/
       && PC0LM002.PC4ORTYP == "QQ") /* for a b-grade po*/
        PC0LM002.PC3RCRFL = "N"; /* default it to 'NO'*/
      else
        set PC0LM002.PC3RCRFL cursor, bold; /* Highlight error*/
        converseLib.validationFailed(42); /* Invalid type entered*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* ACKNOWLEDGE DATE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC0LMADT > " ") /* Something in date*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGA = PC0LM002.PC0LMADT; /* Move in mail date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        PC0LM002.PC0LMADT = TA2REC.TA2GRGA; /* Mail date*/
        PC0LW01.PC0LWADT = TA2REC.TA2GRGGN; /* Mail date*/
      else
        converseLib.validationFailed(38); /* Missing date or invalid*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        set PC0LM002.PC0LMADT cursor, bold; /* Highlight*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0L451"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/

    end
  end

   /* ----------------------------------------------------------*/
   /* HOLD CODE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.YOHCD > " ")
    if (PC0LM002.YOHCD in YOHTBL.YOHCD
     && YOHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      PC0LW01.YOHCD = PC0LM002.YOHCD; /* Hold code*/
      PC0LM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
                                   /* Hold short desc.*/
      PC0LW01.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex]; /* Hold short desc.*/

    else
      converseLib.validationFailed(39); /* Invalid hold code*/
      set PC0LM002.YOHCD cursor, bold; /* Highlight error*/
      PC0LM002.YOHSDESC = " "; /* Hold short desc.*/
      PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    end
  else
    PC0LW01.YOHCD = " "; /* Hold code*/
    PC0LM002.YOHSDESC = " "; /* Hold short desc.*/
    PC0LW01.YOHSDESC = " "; /* Hold short desc.*/
  end

   /* ----------------------------------------------------------*/
   /* MAIL DATE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC0LMMDT > " ") /* Something entered*/

    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "A"; /* Move in date type*/
    TA2REC.TA2GRGA = PC0LM002.PC0LMMDT; /* Move in mail date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* Date validation*/

    if (sysVar.errorCode == "00000000") /* Good call*/
      if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
        PC0LM002.PC0LMMDT = TA2REC.TA2GRGA; /* Mail date*/
        PC0LW01.PC0LWMDT = TA2REC.TA2GRGGN; /* Mail date*/
      else
        converseLib.validationFailed(38); /* Missing date or invalid*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        set PC0LM002.PC0LMMDT cursor, bold; /* Highlight*/
      end
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0L451"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/

    end

    if (PC0LM002.XGPCD == "02") /* Footwear*/
      if (PC0LM002.PC0LMMDT != PC0LW01.PC0LWWDT)

        converseLib.validationFailed(575); /* Mail Date must equal today's dt*/
        PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
        PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
        set PC0LM002.PC0LMMDT cursor, bold; /* Highlight*/

      end
    end

  end


end // end PC0L451

// VALIDATE THE DATA
Function PC0L452()

   /* ----------------------------------------------------------*/
   /* PERFORM DETAILED EDITS*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* P.O. ID*/
   /* ----------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   || converseVar.eventKey is pf6   /* PF6 key pressed*/
   || converseVar.eventKey is pf13) /* PF13 key pressed*/
    if (PC0LM002.PC0LMPYR > " " /* Something in po id year*/
     || PC0LM002.PC0LMPMO > " " /* Something in po id month*/
     || PC0LM002.PC0LMDMO > " " /* Something in po id delivery month*/
     || PC0LM002.FY1FCTYC > " ") /* Something in po id fcty. code*/

      if (PC0LM002.XGPCD == "03") /* Gpc code is Apparel*/

        PC0L453(); /* P.O. ID for apparel*/

      else

        PC0L454(); /* P.O. id edit routine*/

      end
    else
      if (PC0LM002.XGPCD == "01" /* Promo*/
       || PC0LM002.XGPCD == "07") /* Posters*/

         /* NEXT SENTENCE*/

      else
        set PC0LM002.PC0LMPYR cursor, bold; /* Highlight error*/
        converseLib.validationFailed(177); /* Data must be entered*/
        PC0LM002.XXXPRCNM = "PC0L452"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* P.O. TYPE*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP > " ") /* Something there*/
    set PC4REC empty; /* Clear record*/
    PC4REC.PC4ORTYP = PC0LM002.PC4ORTYP;
    PC4REC.XGPCD = PC0LM002.XGPCD;

    PC0LS04(); /* Call Production Order Type Table*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
      if (PC4REC.XXXSTAT == "A") /* Active status*/
        PC0LM002.PC4ORTYP = PC4REC.PC4ORTYP;
        PC0LW01.PC4ORTYP = PC4REC.PC4ORTYP;
        PC0LM002.PC4SDESC = PC4REC.PC4SDESC; /* Move short desc.*/
      else
        set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
        PC0LM002.PC4SDESC = " "; /* Move short desc.*/
        converseLib.validationFailed(33); /* P.O. type invalid*/
        PC0LM002.XXXPRCNM = "PC0L452"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end
    else
      set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
      PC0LM002.PC4SDESC = " "; /* Move short desc.*/
      converseLib.validationFailed(33); /* P.O. type invalid*/
      PC0LM002.XXXPRCNM = "PC0L452"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    end
  else
    set PC0LM002.PC4ORTYP cursor, bold; /* Highlight error*/
    PC0LM002.PC4SDESC = " "; /* Move short desc.*/
    converseLib.validationFailed(33); /* P.O. type invalid*/
    PC0LM002.XXXPRCNM = "PC0L452"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
  end

   /* ----------------------------------------------------------*/
   /* P.O. NUMBER IF GPC EQ 01*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01"
   || PC0LM002.XGPCD == "07")
    if (PC0LM002.PC3PONBR == 0) /* Nothing there*/
      set PC0LM002.PC3PONBR cursor, bold;
      converseLib.validationFailed(35); /* P.O. number must be entered*/
      PC0LM002.XXXPRCNM = "PC0L452"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    else
      set PC0LM002.PC3PONBR initialAttributes;
    end
  end


end // end PC0L452

// APPAREL P.O. ID EDIT
Function PC0L453()

   /* ----------------------------------------------------------*/
   /* P.O. ID FOR APPAREL*/
   /* ----------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter key pressed*/
   || converseVar.eventKey is pf6   /* PF6 key pressed*/
   || converseVar.eventKey is pf13) /* PF13 key pressed*/
    if (PC0LM002.PC0LMPYR > " " /* Something in po id year*/
     || PC0LM002.PC0LMPMO > " " /* Something in po id month*/
     || PC0LM002.PC0LMDMO > " " /* Something in po id delivery month*/
     || PC0LM002.FY1FCTYC > " ") /* Something in po id fcty. code*/

      set VFCTY003 empty; /* Clear factory record*/
      VFCTY003.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
      VFCTY003.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/

      PC0LS01(); /* Validate the factory code*/

      if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
       && VFCTY003.XXXSTAT == "A"  /* Status is active*/
       && VFCTY003.FY1FCTYC > " ") /* Something there*/
        PC0LW01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
        PC0LW01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
        PC0LM002.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
        PC0LW01.XCTCD = VFCTY003.XCTCD; /* Factory country code*/
        PC0LW01.FY1FRGN = VFCTY003.FY1FRGN; /* Foreign factory flag*/
        PC0LW01.FY6FOCD = VFCTY003.FY6FOCD; /* field office code*/
      else
        set PC0LM002.FY1FCTYC cursor, bold; /* Highlight error*/
        PC0LM002.FY1FCTSN = " "; /* Factory short name*/
        converseLib.validationFailed(32); /* Factory code invalid or missimg*/
        PC0LM002.XXXPRCNM = "PC0L453"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
      end

      /* ------------------------------------------------------------*/
       /* DATE CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/
      /* ------------------------------------------------------------*/
       /* DELIVERY MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC0LM002.PC0LMDMO == "01" /* Something there*/
       || PC0LM002.PC0LMDMO == "02" /* Something there*/
       || PC0LM002.PC0LMDMO == "03" /* Something there*/
       || PC0LM002.PC0LMDMO == "04" /* Something there*/
       || PC0LM002.PC0LMDMO == "05" /* Something there*/
       || PC0LM002.PC0LMDMO == "06" /* Something there*/
       || PC0LM002.PC0LMDMO == "07" /* Something there*/
       || PC0LM002.PC0LMDMO == "08" /* Something there*/
       || PC0LM002.PC0LMDMO == "09" /* Something there*/
       || PC0LM002.PC0LMDMO == "10" /* Something there*/
       || PC0LM002.PC0LMDMO == "11" /* Something there*/
       || PC0LM002.PC0LMDMO == "12") /* Something there*/

        PC0LW01.PC0LMDMO = PC0LM002.PC0LMDMO;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L453"; /* Process name*/
        set PC0LM002.PC0LMDMO cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* BUY MONTH CHECK--REQUIRED*/
      /* ------------------------------------------------------------*/

      if (PC0LM002.PC0LMPMO == "01" /* Something there*/
       || PC0LM002.PC0LMPMO == "02" /* Something there*/
       || PC0LM002.PC0LMPMO == "03" /* Something there*/
       || PC0LM002.PC0LMPMO == "04" /* Something there*/
       || PC0LM002.PC0LMPMO == "05" /* Something there*/
       || PC0LM002.PC0LMPMO == "06" /* Something there*/
       || PC0LM002.PC0LMPMO == "07" /* Something there*/
       || PC0LM002.PC0LMPMO == "08" /* Something there*/
       || PC0LM002.PC0LMPMO == "09" /* Something there*/
       || PC0LM002.PC0LMPMO == "10" /* Something there*/
       || PC0LM002.PC0LMPMO == "11" /* Something there*/
       || PC0LM002.PC0LMPMO == "12") /* Something there*/

        PC0LW01.PC0LMPMO = PC0LM002.PC0LMPMO;

      else
        converseLib.validationFailed(31); /* Must enter month*/
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L453"; /* Process name*/
        set PC0LM002.PC0LMPMO cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
        /* CHECK P.O. ID FOR APPAREL YEAR CODE, BUY MONTH, DEL. MONTH*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* No errors*/
        set PCFREC empty; /* Clear record*/
        PCFREC.PCFSECD = PC0LM002.PC0LMPYR; /* P.O. id season cd*/
        PC0LW01.PC0LMPMO = PC0LM002.PC0LMPMO; /* Buy month*/
        PCFREC.PCFBUYMO = PC0LW01.PC0LMPMO; /* Season buy month*/


        PC0LS19(); /* P.O. id edit routine for apparel*/


        if (SQLCA.VAGen_SQLCODE == 0 /* Something there*/
         && PCFREC.XXXSTAT == "A")   /* Active status*/
          PC0LW01.PC0LWAYR = PCFREC.PCFBUYYR; /* Apparel year ccyy*/
          PC0LW01.PCFSECD = PCFREC.PCFSECD; /* P.O. season code*/
          PC0LW01.PCFSEYR = PCFREC.PCFSEYR; /* P.O. season code*/
          PC0LW01.XSECD = PCFREC.XSECD; /* Season code*/
          PC0LW01.PC0LMPCC = PC0LW01.PC0LWACY; /* P.O. ID cent.*/
          PC0LW01.PC0LMPYR = PC0LW01.PC0LWAYE; /* P.O. ID year*/
        else
          set PC0LM002.PC0LMPYR cursor, bold; /* Season year*/
          set PC0LM002.PC0LMPMO bold; /* buy month*/
          converseLib.validationFailed(192); /* P.O. ID season year/or buy month*/
                                   /* invalid*/
          PC0LM002.XXXPRCNM = "PC0L453"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
        end

        /* ------------------------------------------------------------*/
         /* DATE VALIDATION*/
        /* ------------------------------------------------------------*/

        if (converseVar.validationMsgNum == 0) /* No message*/
          set TA2REC empty; /* Clear date record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
          TA2REC.TA2GRTYP = "G"; /* Move in date type*/
          TA2REC.TA2GRGGN = PC0LW01.PC0LWODT; /* Move in date*/

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

          if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
            PC0LW01.PC0LWODT = TA2REC.TA2GRGGN; /* Beginning date*/
            PC0LW01.PC3POIDT = TA2REC.TA2GRGGN; /* Beginning date*/
          else
            set PC0LM002.PC0LMPYR cursor, bold; /* Highlight error*/
            set PC0LM002.PC0LMPMO bold; /* Highlight error*/
            set PC0LM002.PC0LMDMO bold; /* Highlight error*/
            converseLib.validationFailed(38); /* Invalid date*/
            PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
            PC0LM002.XXXPRCNM = "PC0L453"; /* Process name*/
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* country of origin edit*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* No message*/
        if (PC0LM002.TSEOXCC > " ") /* Something there*/
          if (PC0LM002.TSEOXCC in XCTTBL.XCTCD /* ctry of origin valid*/
           && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (PC0LM002.TSEOXCC != VFCTY003.XCTCD
             && VFCTY003.FY1CNTFL == "N")
              set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
              converseLib.validationFailed(408); /* ctry invalid/missing*/
              PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
              PC0LW01.PC0LWINF = "Y"; /* set error flag*/
            end
          else
            set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
            converseLib.validationFailed(049); /* ctry invalid/missing*/
            PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* set error flag*/
          end
        else
          if (PC0LW01.XCTCD == " ")
            set PC0LM002.TSEOXCC cursor, bold; /* Highlight error*/
            converseLib.validationFailed(049); /* ctry invalid/missing*/
            PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* set error flag*/
          else
            PC0LM002.TSEOXCC = PC0LW01.XCTCD;
          end
        end
      end

      /* ------------------------------------------------------------*/
       /* manufacturing country of origin edit*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* No message*/
        if (PC0LM002.PC0LM-XCT-ORIG-CD > " ") /* Something there*/
          if (PC0LM002.PC0LM-XCT-ORIG-CD in XCTTBL.XCTCD
           /* mfg ctry of origin valid*/
           && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          else
            set PC0LM002.PC0LM-XCT-ORIG-CD cursor, bold;
                                   /* Highlight error*/
            converseLib.validationFailed(049); /* ctry invalid/missing*/
            PC0LM002.XXXPRCNM = "PC0L451"; /* Process name*/
            PC0LW01.PC0LWINF = "Y"; /* set error flag*/
          end
        end
      end
    end
  end


end // end PC0L453

// P.O. ID EDIT FOR THE REST
Function PC0L454()

   /* ------------------------------------------------------------*/
   /* IF GPC CODE 01 CHECK AND SEE IF P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PC0LM002.XGPCD == "07") /* Posters*/
    if (PC0LM002.PC0LMPYR == " " /* Nothing there*/
     && PC0LM002.PC0LMPMO == " " /* Nothing there*/
     && PC0LM002.PC0LMDMO == " " /* Nothing there*/
     && PC0LM002.FY1FCTYC == " ") /* Nothing there*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set VFCTY003 empty; /* Clear record*/
  VFCTY003.XGPCD = PC0LM002.XGPCD; /* Search key*/
  VFCTY003.FY1FCTYC = PC0LM002.FY1FCTYC; /* Search key*/

  PC0LS01(); /* Call factory check routine*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   && VFCTY003.XXXSTAT == "A"  /* Status is active*/
   && VFCTY003.FY1FCTYC > " ") /* Not blank code*/
    PC0LW01.FY1FCTYC = VFCTY003.FY1FCTYC; /* Factory code*/
    PC0LW01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
    PC0LM002.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory short name*/
    PC0LW01.XCTCD = VFCTY003.XCTCD; /* Factory country code*/
    PC0LW01.FY1FRGN = VFCTY003.FY1FRGN; /* Foreign Factory Flag*/
  else
    converseLib.validationFailed(32); /* Invalid factory*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
    set PC0LM002.FY1FCTYC cursor, bold; /* Highlight error*/
    PC0LM002.FY1FCTSN = " "; /* Factory short name*/
  end

   /* ------------------------------------------------------------*/
   /* DATE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* DELIVERY MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC0LMDMO == "01" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "02" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "03" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "04" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "05" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "06" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "07" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "08" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "09" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "10" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "11" /* SOMETHING THERE*/
   || PC0LM002.PC0LMDMO == "12") /* SOMETHING THERE*/

    PC0LW01.PC0LMDMO = PC0LM002.PC0LMDMO;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
    set PC0LM002.PC0LMDMO cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC0LMPMO == "01" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "02" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "03" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "04" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "05" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "06" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "07" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "08" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "09" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "10" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "11" /* SOMETHING THERE*/
   || PC0LM002.PC0LMPMO == "12") /* SOMETHING THERE*/

    PC0LW01.PC0LMPMO = PC0LM002.PC0LMPMO;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
    set PC0LM002.PC0LMPMO cursor, bold; /* Highlight*/
  end


   /* ------------------------------------------------------------*/
   /* PO ID MONTH RANGE CHECK FOR QQ ONLY*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP == "QQ")
    if (PC0LW01.PC0LMDMO > PC0LW01.PC0LMPMO) /* dlvry mo GT prod mo*/
      PC0LW01.PC0LWFLD = PC0LW01.PC0LMDMO - PC0LW01.PC0LMPMO;
      if (PC0LW01.PC0LWFLD > 1) /* diff between mo's GT 1*/
        converseLib.validationFailed(31);
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L143"; /* Process name*/
        set PC0LM002.PC0LMPMO cursor, bold; /* Highlight*/
        set PC0LM002.PC0LMDMO cursor, bold; /* Highlight*/
      end
    else
      if (PC0LW01.PC0LMDMO == PC0LW01.PC0LMPMO) /* dlvry mo EQ prod mo*/
          /* NEXT SENTENCE                  /* is allowed*/
      else
        if (PC0LW01.PC0LMPMO > PC0LW01.PC0LMDMO) /* prod mo GT dlvry mo*/
          if (PC0LW01.PC0LMPMO == 12 /* OKAY*/
           && PC0LW01.PC0LMDMO == 1) /**/
                 /* NEXT SENTENCE*/
          else
            PC0LW01.PC0LWFLD = PC0LW01.PC0LMPMO - PC0LW01.PC0LMDMO;
            if (PC0LW01.PC0LWFLD > 1) /* diff between mo's GT 1*/
              converseLib.validationFailed(31);
              PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
              PC0LM002.XXXPRCNM = "PC0L143"; /* Process name*/
              set PC0LM002.PC0LMPMO cursor, bold; /* Highlight*/
              set PC0LM002.PC0LMDMO cursor, bold; /* Highlight*/
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* DATE VALIDATION*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/
    PC0LW01.PC0LWPYC = PC0LM002.PC0LMPYR; /* Year*/
    PC0LW01.PC0LWPMC = PC0LM002.PC0LMPMO; /* Buy mo*/
    PC0LW01.PC0LWDMC = PC0LM002.PC0LMDMO; /* Del. lmo*/
    set TA2REC empty; /* Clear date record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
    TA2REC.TA2GRTYP = "E"; /* Move in date type*/
    TA2REC.TA2GRGE = PC0LW01.PC0LWCDA; /* Move in date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation*/

    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC0LW01.PC0LWODT = TA2REC.TA2GRGGN; /* Beginning date*/
      PC0LW01.PC3POIDT = TA2REC.TA2GRGGN; /* Beginning date*/
    else
      if (TA2REC.TA2RTNCD == 0222) /* Invalid date*/
        set PC0LM002.PC0LMPYR cursor, bold; /* Highlight error*/
        set PC0LM002.PC0LMPMO bold; /* Highlight error*/
        set PC0LM002.PC0LMDMO bold; /* Highlight error*/
        converseLib.validationFailed(313); /* Invalid poid*/
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
      else
        set PC0LM002.PC0LMPYR cursor, bold; /* Highlight error*/
        set PC0LM002.PC0LMPMO bold; /* Highlight error*/
        set PC0LM002.PC0LMDMO bold; /* Highlight error*/
        converseLib.validationFailed(10); /* System error*/
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP == "QQ"
   || PC0LM002.PC4ORTYP == "OR")
    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC0LM002.PC0LMPYR >= "00"
       && PC0LM002.PC0LMPYR <= "99")
        PC0LW01.PC0LMPYR = PC0LM002.PC0LMPYR;
        /* *****************Y2K IN************************/
        if (PC0LW01.PC0LMPYR > 57)
          PC0LW01.PC0LMPCC = 19;
        else
          PC0LW01.PC0LMPCC = 20;
        end

        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT - 2;/* GE CUR. YR - 2*/
        /* IF PC0LW01.PC0LMPYR GE PC0LW01.PC0LWCY1;*/
        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT + 1;/* LE CUR. YR + 1*/
        /* IF PC0LW01.PC0LMPYR LE PC0LW01.PC0LWCYT;*/
        PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY - 2; /* GE CUR. YR - 2*/
        if (PC0LW01.PC0LWOWY >= PC0LW01.PC0LWYR1)
          PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY + 1; /* LE CUR. YR + 1*/
          if (PC0LW01.PC0LWOWY <= PC0LW01.PC0LWYR1)
            /* *****************Y2K OUT***********************/

             /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(30); /* Must enter current year or + 1*/
            PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
            PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
            set PC0LM002.PC0LMPYR cursor, bold; /* Highlight*/
          end
        else
          converseLib.validationFailed(30); /* Must enter current year or + 1*/
          PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
          PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
          set PC0LM002.PC0LMPYR cursor, bold; /* Highlight*/
        end
      end
    end
  else

    if (converseVar.validationMsgNum == 0) /* No message*/
      if (PC0LM002.PC0LMPYR >= "00"
       && PC0LM002.PC0LMPYR <= "99")
        PC0LW01.PC0LMPYR = PC0LM002.PC0LMPYR;

        /* ***************Y2K IN**************************/
        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT + 1;/* One year greater*/
                                  /* IF PC0LW01.PC0LMPYR LE*/
                                   /* PC0LW01.PC0LWCY1;/*one year greater*/
                                   /* than cur*/
        /* PC0LW01.PC0LWCY1 = PC0LW01.PC0LWCYT - 1;/* One year less*/
        /* IF PC0LW01.PC0LMPYR GE PC0LW01.PC0LWCY1; /* One year less*/
        PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY + 1; /* One year greater*/
        if (PC0LW01.PC0LWOWY <= PC0LW01.PC0LWYR1) /* one year greater than cur*/
          PC0LW01.PC0LWYR1 = PC0LW01.PC0LWCCY - 1; /* One year less*/
          if (PC0LW01.PC0LWOWY >= PC0LW01.PC0LWYR1) /* One year less*/

            /* ***************Y2K OUT*************************/
            /* NEXT SENTENCE*/

          else
            converseLib.validationFailed(392); /* Must enter current year or + 1*/
            PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
            PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
            set PC0LM002.PC0LMPYR cursor, bold; /* Highlight*/
          end
        else
          converseLib.validationFailed(392); /* Must enter current year or + 1*/
          PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
          PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
          set PC0LM002.PC0LMPYR cursor, bold; /* Highlight*/
        end
      else
        converseLib.validationFailed(392); /* Must enter current year or + 1*/
        PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
        PC0LM002.XXXPRCNM = "PC0L454"; /* Process name*/
        set PC0LM002.PC0LMPYR cursor, bold; /* Highlight*/
      end
    end
  end



end // end PC0L454

// PROCESS VALID INPUT
Function PC0L460()

   /* ------------------------------------------------------------*/
   /* PROCESS THE VALID ENTRY*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message to display*/
    if (PC0LW01.PC0LWHAC == "N") /* Change flag not on*/
      if (PC0LM002.XGPCD == "01"
       || PC0LM002.XGPCD == "07")
        set PCYREC empty; /* Clear record*/
        PCYREC.PCYFUNC = "S "; /* IOMOD funciton, select unique*/
        VPOHDR03.XGPCD = PC0LM002.XGPCD;
        VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD;
        VPOHDR03.PC3PONBR = PC0LM002.PC3PONBR;


        PC0LS02(); /* Verify the p.o. number*/


        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          converseLib.validationFailed(36); /* P.O. exists*/
          set PC0LM002.PC3PONBR cursor, bold; /* Highlight error*/
          PC0LM002.XXXPRCNM = "PC0L460"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Set error flag to N*/
        else

          PC0LW01.PC3PONBR = PC0LM002.PC3PONBR; /* Move in p.o. nbr*/

        end
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* No message to display*/
    if (converseVar.eventKey is enter /* Enter key pressed*/
     || converseVar.eventKey is pf6   /* Pf6 pressed*/
     || converseVar.eventKey is pf13) /* Pf13 pressed*/
      if (PC0LW01.PC0LWHAC == "N") /* Change flag not on*/
        if (PC0LM002.XGPCD == "02")
          if (PC0LM002.PC4ORTYP == "S1"
           || PC0LM002.PC4ORTYP == "S4"
           || PC0LM002.PC4ORTYP == "OS")
            PC0LW01.PC0LWGON = "N"; /* Can continue*/

            set PCYREC empty;
            set VPOHDR03 empty;
            VPOHDR03.XGPCD = PC0LW01.XGPCD;
            VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD;
            VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC;
            VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT;
            VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP;
            PCYREC.PCYFUNC = "SA";


            PC0LS02(); /* Select alternate p.o. header*/


            if (SQLCA.VAGen_SQLCODE == 0)
              converseLib.validationFailed(43); /* P.O. id/type exists*/
              set PC0LM002.PC0LMPYR cursor, bold;
              set PC0LM002.PC0LMPMO bold;
              set PC0LM002.PC0LMDMO bold;
              set PC0LM002.FY1FCTYC bold;
              PC0LM002.XXXPRCNM = "PC0L460"; /* Process name*/
              PC0LW01.PC0LWINF = "Y"; /* Set error flag to N*/
              exit stack; /* Exit to redisplay screen*/
            else

              PC0LW01.PC0LWGON = "Y"; /* Can continue*/
              set VPOHDR03 empty; /* Clear record*/

            end
          else
            if (PC0LM002.PC4ORTYP == "FT"
             || PC0LM002.PC4ORTYP == "OR"
             || PC0LM002.PC4ORTYP == "QQ")
              PC0LW01.PC0LWGON = "N"; /* Can continue*/
              PC0LW01.PC0LWVFL = "N"; /* INITIALISE*/

              set PCYREC empty;
              set VPOHDR03 empty;
              VPOHDR03.XGPCD = PC0LW01.XGPCD;
              VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD;
              VPOHDR03.FY1FCTYC = PC0LW01.FY1FCTYC;
              VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT;
              VPOHDR03.PC4ORTYP = PC0LW01.PC4ORTYP;
              PCYREC.PCYFUNC = "S1";

              PC0LS02(); /* DECLARE CURSOR on P.O header*/

              PC0LS21(); /* FETCH CUSRSOR from P.O header*/

              if (SQLCA.VAGen_SQLCODE == 0)
                while (SQLCA.VAGen_SQLCODE == 0
                 && PC0LW01.PC0LWVFL == "N"
                )
                  if (VPOHDR03.YPUCD != "CX")

                    PC0L325();

                    if (PCYREC.PCYCOUNT == 0)
                      PC0LW01.PC0LWVFL = "Y";
                    else

                      PC0LW01.PC0LWEOF = "N";
                      PC0LW01.PC0LWSPO = "N";
                      PC0LW01.PC0LWMPO = "N";
                      set VPOITM05 empty; /* ===>initialize record*/
                      set PCYREC empty; /* ===>initialize record*/

                      /* SET THE KEY*/
                      VPOITM05.XGPCD = VPOHDR03.XGPCD;
                      VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD;
                      VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR; /* PO NBR*/

                      PC0LS09(); /* OPEN CUSOR*/

                      PC0LS10(); /* Fetch selected rows*/

                      while (PC0LW01.PC0LWEOF == "N"
                       && (PC0LW01.PC0LWSPO == "N" || 
                      PC0LW01.PC0LWMPO == "N"))

                        if (VPOITM05.PC-SAP-PO-NBR > " "
                         && VPOITM05.XGPCD != "01 ") /* vramac*/
                          PC0LW01.PC0LWSPO = "Y";
                        else
                          PC0LW01.PC0LWMPO = "Y";
                        end

                        PC0LS10();

                      end
                      PC0LS61(); /* Close the cursor*/
                      if (PC0LW01.PC0LWSPO == "Y"
                       && PC0LW01.PC0LWMPO == "Y")
                        PC0LW01.PC0LWVFL = "Y";
                      end
                    end
                  end

                  PC0LS21();
                    /* ----> Driving read*/
                end
              end

              PC0LS62(); /* CLOSE CURSOR on P.O header*/

              if (PC0LW01.PC0LWVFL == "Y")
                converseLib.validationFailed(43); /* P.O. id/type exists*/
                set PC0LM002.PC0LMPYR cursor, bold;
                set PC0LM002.PC0LMPMO bold;
                set PC0LM002.PC0LMDMO bold;
                set PC0LM002.FY1FCTYC bold;
                PC0LM002.XXXPRCNM = "PC0L460"; /* Process name*/
                PC0LW01.PC0LWINF = "Y"; /* Set error flag to N*/
                exit stack; /* Exit to redisplay screen*/
              else

                PC0LW01.PC0LWGON = "Y"; /* Can continue*/
                set VPOHDR03 empty; /* Clear record*/

              end
            end
          end
        end


        XX0XS01(); /* ==> get current date and time for*/
                                   /* D.B. Updates*/


        if (PC0LM002.XGPCD != "01"
         && PC0LM002.XGPCD != "07")
          PC1REC.XGPCD = PC0LM002.XGPCD;


          PC0LS20(); /* Get next p.o. number*/


          if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
            PC0LW01.PO-REG-CD = "01"; /* Move new po region*/
            PC0LW01.PC3PONBR = PC1REC.PC1PONBR; /* Move new P.O. nbr*/
          end
        end

        PC0L461(); /* Add the row*/
        PC0L462(); /* Process the input request*/

      else

        /* ------------------------------------------------------------*/
           /* PROCESS THE REQUESTED INPUT AND EITHER TRANSFER TO*/
           /* ANOTHER PROGRAM, RESHOW THE ADD SCREEN OR CANCEL.*/
        /* ------------------------------------------------------------*/

        if (PC0LW01.PC0LWHAC == "Y") /* Header add/chg. flag eq y*/
          if (converseVar.eventKey is enter) /* Enter key pressed*/

            COMMAREA.CATOAP = "PC0E"; /* To application*/
            PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
            PCWREC.PCWFNC[1] = "A"; /* Function code*/
            COMMAREA.CAITEM = " "; /* Clear item*/

            PCWREC.XGPCD = PC0LW01.XGPCD; /* GPC code*/
            PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. reg*/
            PCWREC.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. date*/
            PCWREC.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
            PCWREC.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
            PCWREC.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. type*/
            PC0LW01.PC0LWHAC = "N"; /* Header add/chg. flag eq y*/

            XSPCS01();
                                   /* Transfer to the requested application*/

            set PC0LM002 initial;
            PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

          end

          if (converseVar.eventKey is pf6) /* PF6 key pressed*/

            COMMAREA.CATOAP = "PC0H"; /* To application*/
            PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
            PCWREC.PCWFNC[1] = "A"; /* Function code*/
            COMMAREA.CAITEM = " "; /* Clear item*/

            if (PC0LM002.XGPCD == "03") /* Apparel*/
              PCWREC.PCFSECD = PC0LM002.PC0LMPYR;
                                   /* Apparel season year code*/
            end
            PCWREC.XGPCD = PC0LW01.XGPCD; /* GPC code*/
            PCWREC.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. date*/
            PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
            PCWREC.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
            PCWREC.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
            PCWREC.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. type*/
            PC0LW01.PC0LWHAC = "N"; /* Header add/chg. flag eq y*/

            XSPCS01();
                                   /* Transfer to the requested application*/

            set PC0LM002 initial;
            PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

          end
        end
      end

      if (converseVar.eventKey is pf13 /* PF13 key pressed*/
       && COMMAREA.CAFROMAP == "PC0H") /* Came back from special inst.*/

        VPOHDR03.YPUCD = "IN"; /* Map status codeis incomplete*/

        /* ------------------------------------------------------------*/
         /* Select a unique row from the P.O. header row.*/
         /* If not available, return an error message to the user.*/
         /* If any other, indicate system error.*/
        /* ------------------------------------------------------------*/

        set PCYREC empty; /* Clear record*/
        PCYREC.PCYFUNC = "U "; /* Move U to function for update*/

        PC0LS02(); /* Update pc3rec*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit the update*/
          set PC0LM002 initial; /* Clear the map before redisplay*/
          converseLib.validationFailed(1); /* Update successful*/
          PC0LW01.PC0LWHAC = "N"; /* Move N to header c/a flag*/
          PC0LW01.PC0LWINF = "N"; /* Turn on error flag*/
          COMMAREA.CAFROMAP = " "; /* Came back from special inst.*/
        end

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back the update*/
          converseLib.validationFailed(12); /* Update done by someone else*/
          PC0LM002.XXXPRCNM = "PC0L460"; /* Process name*/
          PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/
        end
      end
    end
  end


end // end PC0L460

// ADD NEW P.O. ROW
Function PC0L461()

   /* ------------------------------------------------------------*/
   /* MOVE THE MAP INFORMATION TO THE VPOHDR03*/
   /* ------------------------------------------------------------*/

  VPOHDR03.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
  PC0LW01.PO-REG-CD = "01";
  VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
  VPOHDR03.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/
  VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. id*/
  VPOHDR03.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
  VPOHDR03.XCTCD = PC0LW01.XCTCD; /* Country code*/
  VPOHDR03.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    VPOHDR03.PCFSECD = PC0LW01.PCFSECD; /* P.O. season code*/
    VPOHDR03.PCFSEYR = PC0LW01.PCFSEYR; /* P.O. season year*/
    VPOHDR03.XSECD = PC0LW01.XSECD; /* Season code*/
  end

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    VPOHDR03.PCFSEYR = PC0LW01.PC0LWAYR; /* P.O. season year*/
    VPOHDR03.XSECD = PC0LM002.XSECD; /* Season code*/
  end

   /* ------------------------------------------------------------*/
   /* Do a "S1" to find out if a "Y" in the PC_LOCR_DET_IND*/
                                  /* and/or PC_NISSHO_SNT_FL*/
   /* If it is,  move "Y" to the appropriate PO Header field*/
   /* Else       leave it as is*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "S1";

  PC0LS02(); /* Open Set of P.O. Header rows*/

  PC0LW01.PC0LWEOF = "N"; /* End of file flag*/
  PC0LW01.PC0LWLCF = "N"; /* init Letter of credit flag*/
  PC0LW01.PC3NISFL = "N"; /* init Nissho flag*/
  PCWREC.PCWAUDFL = "N"; /* init Create Audit flag*/

  PC0LS21(); /* Select next P.O. Header row*/
   /* ----> Prime read*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PCWREC.PCWAUDFL == "N") /* Pass record Create Audit flag*/

    if (VPOHDR03.PO-REG-CD == "01"
    )
      PCWREC.PCWAUDFL = "Y"; /* Pass record Create Audit flag*/

    else

      PC0LS21(); /* Select next P.O. Header row*/
      /* ----> Driving read*/
    end

  end

   /* ------------------------------------------------------------*/
    /* Set appropriate flags for later processing*/
   /* ------------------------------------------------------------*/

   /* IF VPOHDR03.PC3NISFL EQ 'Y';     /* Nissho flag  eq "Y"*/
  PC0LW01.PC3NISFL = "N"; /* Nissho Sent flag*/
  PC0LW01.PC3NISDT = 000000000; /* Nissho Sent date*/
  PC0LW01.PC3NISTM = 000000000; /* Nissho Sent time*/
   /* END;*/

  PC0LS62(); /* Close Set of PO Headers*/

  set VPOHDR03 empty; /* Clear record*/

   /* ------------------------------------------------------------*/
   /* MOVE THE MAP INFORMATION TO THE VPOHDR03*/
   /* ------------------------------------------------------------*/

  VPOHDR03.XGPCD = PC0LM002.XGPCD; /* Gpc code*/
  VPOHDR03.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. REGION CODE*/
  VPOHDR03.PC4ORTYP = PC0LM002.PC4ORTYP; /* P.O. type*/
  VPOHDR03.PC3POIDT = PC0LW01.PC0LWODT; /* P.O. id*/
  VPOHDR03.FY1FCTYC = PC0LM002.FY1FCTYC; /* Factory code*/
  VPOHDR03.XCTCD = PC0LW01.XCTCD; /* Country code*/
  VPOHDR03.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    VPOHDR03.PCFSECD = PC0LW01.PCFSECD; /* P.O. season code*/
    VPOHDR03.PCFSEYR = PC0LW01.PCFSEYR; /* P.O. season year*/
    VPOHDR03.XSECD = PC0LW01.XSECD; /* Season code*/
    VPOHDR03.TSEOXCC = PC0LM002.TSEOXCC; /* ctry of origin*/
    VFCTY003.XGPCD = PC0LM002.XGPCD; /* Populate GPC code*/
    VFCTY003.FY1FCTYC = PC0LM002.FY1FCTYC; /* Populate Fcty cd*/
    PC0LS46();
    if (PC0LM002.PC0LM-XCT-ORIG-CD == " ") /* MCO is not entered*/
      if (VFCTY003.PC-XCT-ORIG-CD != " ")
        VPOHDR03.PC-XCT-ORIG-CD = VFCTY003.PC-XCT-ORIG-CD;
                                   /* default the MCO*/
      else
        VPOHDR03.PC-XCT-ORIG-CD = PC0LW01.XCTCD;
      end
    else
      VPOHDR03.PC-XCT-ORIG-CD = PC0LM002.PC0LM-XCT-ORIG-CD;
                                   /* mfg ctry of origin*/
    end
  end

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    VPOHDR03.PCFSEYR = PC0LW01.PC0LWAYR; /* P.O. season year*/
    VPOHDR03.XSECD = PC0LM002.XSECD; /* Season code*/
    VPOHDR03.PC-XCT-ORIG-CD = PC0LW01.XCTCD;
                                   /* mfg ctry of origin*/
  end

  if (PC0LW01.FY1FRGN == "Y") /* Foreign Factory Flag*/
    if (PC0LW01.PC3NISFL == "Y") /* Nissho sent flag*/
      VPOHDR03.PC3NISFL = "Y"; /* Nissho flag*/
      VPOHDR03.PC3LCDSF = "Y"; /* l/c det sum flag*/
      VPOHDR03.PC3LCDIN = "Y"; /* l/c det flag*/
      VPOHDR03.PC3NISDT = PC0LW01.PC3NISDT; /* Nissho Sent date*/
      VPOHDR03.PC3NISTM = PC0LW01.PC3NISTM; /* Nissho Sent time*/
    else
      VPOHDR03.PC3NISFL = "N"; /* Nissho flag*/
      PC0LW01.PC3NISFL = "N"; /* Nissho flag*/
      VPOHDR03.PC3LCDSF = "N"; /* l/c det sum flag*/
      VPOHDR03.PC3LCDIN = "N"; /* l/c det flag*/
    end
  else /* ===> Non-foreign*/
    if (PC0LM002.XGPCD == "03") /* Field office*/
      if (PC0LW01.FY6FOCD == "EU") /* Field office*/
        if (PC0LW01.PC3NISFL == "Y") /* Nissho sent flag*/
          VPOHDR03.PC3NISFL = "Y"; /* Nissho flag*/
          VPOHDR03.PC3LCDSF = "Y"; /* l/c det sum flag*/
          VPOHDR03.PC3LCDIN = "Y"; /* l/c det flag*/
          VPOHDR03.PC3NISDT = PC0LW01.PC3NISDT; /* Nissho*/
          VPOHDR03.PC3NISTM = PC0LW01.PC3NISTM; /* Nissho*/
        else
          VPOHDR03.PC3NISFL = "N"; /* Nissho flag*/
          PC0LW01.PC3NISFL = "N"; /* Nissho flag*/
          VPOHDR03.PC3LCDSF = "N"; /* l/c det sum flag*/
          VPOHDR03.PC3LCDIN = "N"; /* l/c det flag*/
        end
      else
        VPOHDR03.PC3NISFL = " "; /* Nissho flag*/
        VPOHDR03.PC3LCDSF = " "; /* L/C det sum flag*/
        VPOHDR03.PC3LCDIN = " "; /* L/C det flag*/
      end
    else
      VPOHDR03.PC3NISFL = " "; /* Nissho flag*/
      VPOHDR03.PC3LCDSF = " "; /* L/C det sum flag*/
      VPOHDR03.PC3LCDIN = " "; /* L/C det flag*/
    end
  end

   /* ------------------------------------------------------------*/
    /* CALCULATE THE BUY YEAR/MONTH*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    PC0LW01.PC0LWCYR = PC0LW01.PC0LWOWY; /* Centry year*/
    PC0LW01.PC0LWNMO = PC0LW01.PC0LMDMO; /* Delivery/prod. month*/

    if (PC0LW01.PC0LMDMO < PC0LW01.PC0LMPMO) /* Del. mo gt prod. mo*/
      PC0LW01.PC0LWCYR = PC0LW01.PC0LWCYR + 1; /* Add one to year*/
      VPOHDR03.PC3BUYMO = PC0LW01.PC0LWBYM; /* Buy month*/
    else

      VPOHDR03.PC3BUYMO = PC0LW01.PC0LWBYM; /* Buy month*/
    end
  end

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    PC0LW01.PC0LWCYR = PC0LW01.PC0LWOWY; /* Centry year*/
    PC0LW01.PC0LWNMO = PC0LW01.PC0LMPMO; /* Delivery/prod. month*/
    VPOHDR03.PC3BUYMO = PC0LW01.PC0LWBYM; /* Buy month*/
  end

  if (PC0LM002.XGPCD == "01" /* Promo*/
   || PC0LM002.XGPCD == "07") /* Posters*/
    PC0LW01.PC0LWCYR = 0; /* Centry year*/
    PC0LW01.PC0LWNMO = 0; /* Delivery/prod. month*/
    VPOHDR03.PC3BUYMO = PC0LW01.PC0LWBYM; /* Buy month*/
  end


   /* ------------------------------------------------------------*/
   /* P.O. STATUS CODES FOR NEWLY ADDED P.O.'s*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* Pf 13 pressed*/
    VPOHDR03.YPUCD = "IN"; /* Status new '03' or '02' P.O.s*/
  else
    VPOHDR03.YPUCD = "OP"; /* Status new '03' or '02' P.O.s*/
  end

  if (PC0LM002.XGPCD == "02") /* Footwear*/
    if (PC0LM002.PC4ORTYP == "FT" /* Footwear first*/
     || PC0LM002.PC4ORTYP == "OR" /* Footwear overrun*/
     || PC0LM002.PC4ORTYP == "S1" /* Side 1   first*/
     || PC0LM002.PC4ORTYP == "S4") /* Side 1   overrun*/
      VPOHDR03.YPUCD = "IN"; /* Status '02' P.O. types*/
    end
  end

  VPOHDR03.PC3SHVIA = PC0LM002.PC3SHVIA; /* Ship via*/

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    if (PC0LM002.PC4ORTYP == "XD" /* DOMESTIC EXPORT*/
     && VFCTY003.XCTCD == "MEXI")
      PC0LM002.PC3SHVIA = "CALL ACS MEXICO CITY"; /* SHIP VIA*/
      VPOHDR03.PC3SHVIA = PC0LM002.PC3SHVIA;
    else
      if (PC0LM002.PC4ORTYP == "XD" /* DOMESTIC EXPORT*/
       && VFCTY003.XCTCD == "USA")  /* domestic factory*/
        VPOHDR03.PC3SHVIA = "CALL ACS ATLANTA"; /* SHIP VIA*/
      else
        if ((PC0LM002.PC4ORTYP == "XI" /* CANADA*/
         || PC0LM002.PC4ORTYP == "MX") /* CANADA SMU*/
         && (VFCTY003.XCTCD == "USA"   /* domestic factory*/
         || VFCTY003.XCTCD == "MEXI")) /* Mexico factory*/
          VPOHDR03.PC3SHVIA = "DIRECT SHIP"; /* SHIP VIA*/
        else
          if (PC0LM002.PC4ORTYP == "AD" /* asia pacific direct ship*/
           && VFCTY003.XCTCD == "USA")  /* domestic factory*/
            VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* SHIP VIA*/
          else
            if (PC0LM002.PC4ORTYP == "SX" /* DOMESTIC EXPORT OF SS*/
             && VFCTY003.XCTCD == "USA")  /* domestic factory*/
              VPOHDR03.PC3SHVIA = "CALL AIRBORNE"; /* SHIP VIA*/
            else
              if (PC0LM002.PC3SHVIA == " ") /* Ship via is spaces*/
                if (PC0LM002.PC4ORTYP == "SS" /* Salesman sample*/
                 || PC0LM002.PC4ORTYP == "S7" /* Salesman sample Side 1*/
                 || PC0LM002.PC4ORTYP == "SX" /* Salesman sample Side 1*/
                 || PC0LM002.PC4ORTYP == "PX") /* NIL Promo*/
                  VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* SHIP VIA*/
                else
                  if (PC0LM002.PC4ORTYP == "MP") /* makeup-indirect*/
                    VPOHDR03.PC3SHVIA = "AIR FREIGHT"; /* SHIP VIA*/
                  else
                    if (PC0LM002.PC4ORTYP == "MD" /* direct ship - makeup*/
                     || PC0LM002.PC4ORTYP == "MM" 
                     /* direct ship - makeup mult*/
                     || PC0LM002.PC4ORTYP == "DS" /* direct ship*/
                     || PC0LM002.PC4ORTYP == "DC")
                                   /* direct deliv - case lot*/
                      VPOHDR03.PC3SHVIA = "DIRECT DELIVERY";
                                   /* SHIP VIA*/
                    else
                      VPOHDR03.PC3SHVIA = "STAND. SHIP. INSTR. ";
                                   /* SHIP VIA*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


  if (PC0LM002.XGPCD == "03" /* Apparel*/
   && PC0LM002.PC3FOBLC == " ") /* fob loc  is spaces*/
    PC0LS39();
  end

  VPOHDR03.PC3ATTEN = PC0LM002.PC3ATTEN; /* Attention name*/
  VPOHDR03.PC3ACKDT = PC0LW01.PC0LWADT; /* Acknowledge date*/
  VPOHDR03.PC3MAILD = PC0LW01.PC0LWMDT; /* Mail date*/
  VPOHDR03.YOHCD = PC0LM002.YOHCD; /* Hold code*/
  VPOHDR03.PC3ORDBY = PC0LM002.PC3ORDBY; /* P.O. ordered by*/
  VPOHDR03.PC3FOBLC = PC0LM002.PC3FOBLC; /* FOB shipping point*/
  VPOHDR03.PC3REQNO = PC0LM002.PC3REQNO; /* Requisition number*/
  VPOHDR03.PC3REQDP = PC0LM002.PC3REQDP; /* Requisition department*/
  VPOHDR03.PC3CMPNT = PC0LM002.PC3CMPNT; /* Component*/
  VPOHDR03.PC3LCPCT = PC0LM002.PC3LCPCT / 100; /* dom nego. l/c %*/
  VPOHDR03.PC3LCNPC = PC0LM002.PC3LCNPC / 100; /* nil nego. l/c %*/


  VPOHDR03.PC3SIFL = "N"; /* Special inst flag*/
  VPOHDR03.PC3ENTBY = COMMAREA.CAUSERID; /* Entered by*/

  VPOHDR03.PC3COMP = PC0LM002.PC3COMP; /* Comp. number*/
  VPOHDR03.PC3BLPO = PC0LM002.PC3BLPO; /* Blank p.o. number*/
  VPOHDR03.IN7STNBR = PC0LM002.IN7STNBR; /* Stock xfer number*/

  if (PC0LM002.XGPCD == "03") /* Apparel*/
    VPOHDR03.PC3RCRFL = "N"; /* default for revolving credit flag*/
  else
    VPOHDR03.PC3RCRFL = PC0LM002.PC3RCRFL; /* Revolving credit flag*/
  end

  VPOHDR03.PO-LOCR-PMT-IND = " ";

   /* IF PC0LM002.XGPCD EQ '03';       /* Apparel*/
   /* MOVE 'L' TO VPOHDR03.PO-LOCR-PMT-IND;*/
   /* ELSE;*/
   /* MOVE ' ' TO VPOHDR03.PO-LOCR-PMT-IND;*/
   /* END;*/

  VPOHDR03.PC3STADT = XX0XW01.XX0XWDAT; /* Status date*/
  VPOHDR03.PC3CRDT = XX0XW01.XX0XWDAT; /* Creation date*/

  VPOHDR03.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOHDR03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOHDR03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOHDR03.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "A "; /* IOMOD passing function, add*/

  PC0LS63(); /* Insert row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    return; /* Return to previous process*/

  end


end // end PC0L461

// PROCESS REQUEST
Function PC0L462()

   /* ------------------------------------------------------------*/
     /* PROCESS THE REQUESTED INPUT AND EITHER TRANSFER TO*/
     /* ANOTHER PROGRAM, RESHOW THE ADD SCREEN OR CANCEL.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No message*/
    if (PC0LW01.PC0LWHAC == "N") /* Header add/chg. flag eq n*/
      if (converseVar.eventKey is enter) /* Enter key pressed*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* Commit the add*/

        COMMAREA.CATOAP = "PC0E"; /* To application*/
        PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
        PCWREC.PCWFNC[1] = "A"; /* Function code*/
        COMMAREA.CAITEM = " "; /* Clear item field*/

        PC0LW01.PC0LWHAC = "Y"; /* Header add/chg. flag eq y*/
        PCWREC.XGPCD = PC0LW01.XGPCD; /* GPC code*/
        PCWREC.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. date*/
        PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
        PCWREC.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
        PCWREC.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
        PCWREC.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. type*/
        PCWREC.PCFSECD = PC0LW01.PCFSECD; /* P.O. season code*/

        if (PC0LM002.XGPCD == "02") /* ===> Footwear*/

          /* ------------------------------------------------------------*/
            /* Save entered map data so on the return from PC0E*/
            /* the user will have default data entered on map 2.*/
          /* ------------------------------------------------------------*/

          PC0LW08.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. date*/
          PC0LW08.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
          PC0LW08.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. type*/
          PC0LW08.PC3ORDBY = PC0LM002.PC3ORDBY; /* ==> Ordered by*/
          PC0LW08.PC3SHVIA = PC0LM002.PC3SHVIA; /* ==> Ship via*/
          PC0LW08.FY1FCTSN = PC0LM002.FY1FCTSN; /* Factory short name*/
          PC0LW08.XSECD = PC0LM002.XSECD; /* Season code*/
          PC0LW08.PC0LMSYR = PC0LM002.PC0LMSYR;

          PCWREC.PCWUSER1 = PC0LW08.PC0LWUSR; /* ==> user 1 position*/

        end /* ===> save pass data for return*/


        XSPCS01();
                                   /* Transfer to the requested application*/

        set PC0LM002 initial;
        PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

      end
    end

    if (converseVar.eventKey is pf6) /* PF6 key pressed*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit the add*/
      PC0LW01.PC0LWHAC = "Y"; /* Header add/chg. flag eq y*/

      COMMAREA.CATOAP = "PC0H"; /* To application*/
      PCWREC.CAFROMAP[1] = "PC0L"; /* From application*/
      PCWREC.PCWFNC[1] = "A"; /* Function code*/
      COMMAREA.CAITEM = " "; /* Clear item field*/

      if (PC0LM002.XGPCD == "03") /* APPAREL*/
        PCWREC.PCFSECD = PC0LM002.PC0LMPYR; /* Apparel season year code*/
      end
      PCWREC.XGPCD = PC0LW01.XGPCD; /* GPC code*/
      PCWREC.PC3POIDT = PC0LW01.PC3POIDT; /* P.O. date*/
      PCWREC.PO-REG-CD = PC0LW01.PO-REG-CD; /* P.O. region*/
      PCWREC.PC3PONBR = PC0LW01.PC3PONBR; /* P.O. number*/
      PCWREC.FY1FCTYC = PC0LW01.FY1FCTYC; /* Factory code*/
      PCWREC.PC4ORTYP = PC0LW01.PC4ORTYP; /* P.O. type*/

      XSPCS01();
                                   /* Transfer to the requested application*/

      set PC0LM002 initial;
      PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/

    end
    if (converseVar.eventKey is pf13) /* PF13 key pressed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit the add*/
      set PC0LM002 initial;
      PC0LW01.PC0LWHAC = "Y"; /* Header add/chg. flag eq y*/
      PC0LW01.PC0LWSWR = "Y"; /* Set request for data to yes*/
      converseLib.validationFailed(143); /* Add successful/press 21 for new*/
      set PC0LM002.XXXPRCNM cursor; /* Place cursor out of the way*/
    end
  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback*/
    converseLib.validationFailed(36); /* P.O number already exists*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    PC0LM002.XXXPRCNM = "PC0L462"; /* Process name*/
  end


end // end PC0L462

// FACTORY EDIT
Function PC0LS01()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "S "; /* Move in function code*/

  try
    call "VFCTY003" (PCYREC, SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS01 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM001.XXXPRCNM = "PC0LS01"; /* Process name*/
  else
    if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0LS01"; /* Process name*/
    end
  end

  exit stack;


end // end PC0LS01

// Select (S ) (S1) (SA) VPOHDR03
Function PC0LS02()

   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Duplicate entries found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOHDR03.VPOHDR03-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    PC0LM001.XXXPRCNM = "PC0LS02"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    PC0LM002.XXXPRCNM = "PC0LS02"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 2*/
  end

  exit stack; /* Exit to redisplay map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS02 ***********************/
end // end PC0LS02

// DATE SWITCH ROUTINE
Function PC0LS03()

   /* ------------------------------------------------------------*/
   /* SWITCH DATE AROUND*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "G"; /* Move in date type*/
  TA2REC.TA2GRGGN = PC0LW01.PC0LWDAT; /* Move in date*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000" /* Good call*/
   && TA2REC.TA2RTNCD == 0000)       /* Valid date*/
    PC0LW01.PC0LWMDY = TA2REC.TA2GRGAN; /* mm/dd/yy*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
    TA1REC.TA1LOC = "PC0LS03 SELECT DATE ROUTINE     ";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes}; /* Error diagnosis routine*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM002.XXXPRCNM = "PC0LS03"; /* Process name*/

  end


end // end PC0LS03

// SELECT ROW PC4REC
Function PC0LS04()

   /* ------------------------------------------------------------*/
   /* Select a unique p.o. type row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS04 SELECT UNIQUE P.O. TYPE ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM001.XXXPRCNM = "PC0LS04"; /* Process name*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM002.XXXPRCNM = "PC0LS04"; /* Process name*/
  end

  exit stack; /* Exit to redisplay map*/


end // end PC0LS04

// CHECK STOCK TRAN. TABLE
Function PC0LS05()

   /* ------------------------------------------------------------*/
   /* Select a unique row from the stock transfer table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0720" ("S ", SQLCA, IN7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS05 SELECT UNIQUE STOCK TRAN. NBR  ";
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTFHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0LM002.XXXPRCNM = "PC0LS05"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC0LS05

// CHECK WAREHOUSE CODE
Function PC0LS06()

   /* ------------------------------------------------------------*/
   /* WAREHOUSE CODE CHECK*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.XWHCD > " ") /* Something there*/
    if (PC0LM002.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* Apparel*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03") /* Apparel*/

        PC0LW01.XWHCD = PC0LM002.XWHCD; /* Whse. code*/
        PC0LM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Whse. abrv.*/
        PC0LW01.YSMXDV = "10"; /* Division code*/

      else
        converseLib.validationFailed(145); /* Whse. code not valid for 03*/
        set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
        PC0LM002.XWHABRV = " "; /* Clear abrv.*/
        PC0LM002.XXXPRCNM = "PC0LS06"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
        return;
      end
    else
      converseLib.validationFailed(59); /* Whse. code missing/invalid*/
      set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
      PC0LM002.XWHABRV = " "; /* Clear abrv.*/
      PC0LM002.XXXPRCNM = "PC0LS06"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
      return;
    end
  else
    converseLib.validationFailed(59); /* Whse. code missing/invalid*/
    set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
    PC0LM002.XWHABRV = " "; /* Clear abrv.*/
    PC0LM002.XXXPRCNM = "PC0LS06"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
    return;
  end

  if (PC0LM002.XWHCD == "12"
   || PC0LM002.XWHCD == "60"
   || PC0LM002.XWHCD == "61")
    PC0LW01.YSMXDV = "20"; /* make it div 20 (intl)*/
  end

end // end PC0LS06

// CHECK CUST. XREF.
Function PC0LS07()

   /* ----------------------------------------------------------*/
   /* CUSTOMER CROSS REFERENCE CHECK*/
   /* ----------------------------------------------------------*/

  if (PC0LM002.PC2CUXID > " ") /* Something is in here*/

    set PC2REC empty; /* Clear record*/
    PC2REC.PC2CUXID = PC0LM002.PC2CUXID;
    PC2REC.XGPCD = PC0LM002.XGPCD;

    PC0LS08(); /* Call Customer Cross Ref. Table*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Something there*/
      if (PC2REC.XXXSTAT == "A") /* Active status*/

        PC0LW01.PC2CUXID = PC0LM002.PC2CUXID;
        PC0LW01.YSMXDV = PC2REC.YSMXDV; /* Division code*/

      else
        set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
        converseLib.validationFailed(45); /* Cust. xref. invalid*/
        PC0LM002.XXXPRCNM = "PC0LS07"; /* Process name*/
        PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
      end
    else
      set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
      converseLib.validationFailed(45); /* Cust. xref. invalid for GPC*/
      PC0LM002.XXXPRCNM = "PC0LS07"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
    end
  else
    set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
    converseLib.validationFailed(45); /* Cust. xref. invalid*/
    PC0LM002.XXXPRCNM = "PC0LS07"; /* Process name*/
    PC0LW01.PC0LWINF = "Y"; /* Move y to error flag*/
  end


end // end PC0LS07

// SELECT ROW PC2REC
Function PC0LS08()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS08 SELECT UNIQUE CUST XREF ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS08"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC0LS08

// Open  (S2)  Set/Open  VPOITM05
Function PC0LS09()
   /* ------------------------------------------------------------*/
   /* Select the set of rows from Production Order Dest. Item*/
   /* Plan Table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "S2"; /* IOMOD function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, continue to fetch the first selected row.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS09 SELECT ITEM NUMBER SET";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS09"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/


   /* **                                                        ***/
   /* ********************** End of PC0LS09 ***********************/
end // end PC0LS09

// Fetch (N2)  Next row  VPOITM05
Function PC0LS10()
   /* ------------------------------------------------------------*/
   /* Fetch the first row from Production Order Dest. Item*/
   /* Plan Table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "N2"; /* IOMOD function*/


  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* Save the CSP return code and SQL commarea from the fetch.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* and row not found*/

      PC0LW01.PC0LWEOF = "Y"; /* Set end of file to 'y'*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
    
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS10 FETCH NEXT ITEM NUMBER";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS10"; /* Process name*/

  exit stack; /* Return to display map*/



   /* **                                                        ***/
   /* ********************** End of PC0LS10 ***********************/
end // end PC0LS10

// Select (SA)           VPOITM05
Function PC0LS11()
   /* ------------------------------------------------------------*/
   /* Select the row from Production Order Dest. Item*/
   /* Plan Table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "SA"; /* IOMOD function*/


  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch table row*/

   /* ------------------------------------------------------------*/
   /* Save the CSP return code and SQL commarea from the fetch.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0LS11 SELECT UNIQUE ALTERNATE";
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key convesion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS11"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/



   /* **                                                        ***/
   /* ********************** End of PC0LS11 ***********************/
end // end PC0LS11

// Insert (A )           VPOAIT01
Function PC0LS12()

   /* ------------------------------------------------------------*/
   /* PERFORM AUDIT UPDATE OF ITEM ROWS, IF ITEMS HAVE CHANGED*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/
  PC0LW01.PC0L-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0LW01.PC0L-ZZHHMMSS)
    XX0XS01(); /* Get date and time*/
  end

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* SET UP TIME*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "A"; /* Move in function*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    VPOAIT02.PCJNETQT = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIAFTN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRA = " "; /* ===> reset audit field*/
    VPOAIT02.PCIAFTA = " "; /* ===> reset audit field*/
    return;

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS12 ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0LW03.PC0LWFKJ = VPOAIT02.VPOAIT02-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LWFKJ; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS12"; /* Process name*/

  exit stack;


end // end PC0LS12

// Update (UA)           VPOITM05
Function PC0LS13()

   /* ------------------------------------------------------------*/
   /* Update the row from Production Order Dest. Item*/
   /* Plan Table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "UA"; /* ===> pass record data*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch table row*/

   /* ------------------------------------------------------------*/
   /* Save the CSP return code and SQL commarea from the fetch.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end



  PC0LM002.XXXPRCNM = "PC0LS13"; /* Process name*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* and not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/
      converseLib.validationFailed(12); /* updated by another*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      exit stack; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* System error available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0LS13";
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS13"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/


end // end PC0LS13

// Do Audit Header GPC     = "03"
Function PC0LS15()

   /* ------------------------------------------------------------*/
   /* WRITE AN AUDIT RECORD FOR CHANGES IN P.O. HEADER*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
                    /* REQUSITION DEPT.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3REQDP != VPOHDR03.PC3REQDP) /* Requisition dept. changed*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3REQDP; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3REQDP; /* After picture*/
    VPOAHD02.YOACD = "51"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* REQUSITION NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3REQNO != VPOHDR03.PC3REQNO) /* Requisition number*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3REQNO; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3REQNO; /* After picture*/
    VPOAHD02.YOACD = "52"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* FOB SHIPPING POINT*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3FOBLC != VPOHDR03.PC3FOBLC) /* FOB shipping point*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3FOBLC; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3FOBLC; /* After picture*/
    VPOAHD02.YOACD = "53"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* dom & nil l/c percent*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3LCPCT != VPOHDR03.PC3LCPCT /* dom L/C percent changed*/
   || PC0LM002.PC3LCNPC != VPOHDR03.PC3LCNPC) /* nil L/C percent changed*/
    set VPOAHD02 empty; /* Clear record*/
    PC0LW01.PC0LWDLC = VPOHDR03.PC3LCPCT * 100; /* dom l/c% reformated*/
    PC0LW01.PC0LWNLC = VPOHDR03.PC3LCNPC * 100; /* nil l/c% reformated*/
    VPOAHD02.PCIBFRN = PC0LW01.PC0LWLCP; /* Before picture*/
    PC0LW01.PC0LWDLC = PC0LM002.PC3LCPCT; /* dom l/c% to ws*/
    PC0LW01.PC0LWNLC = PC0LM002.PC3LCNPC; /* nil l/c% to ws*/
    VPOAHD02.PCIAFTN = PC0LW01.PC0LWLCP; /* After picture*/
    VPOAHD02.YOACD = "54"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                      /* BLANK P.O.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3BLPO != VPOHDR03.PC3BLPO) /* Blank P.O. has changed*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRN = VPOHDR03.PC3BLPO; /* Before picture*/
    VPOAHD02.PCIAFTN = PC0LM002.PC3BLPO; /* After picture*/
    VPOAHD02.YOACD = "55"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                     /* STOCK TRANSFER NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.IN7STNBR != VPOHDR03.IN7STNBR) /* Stock transfer number*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRN = VPOHDR03.IN7STNBR; /* Before picture*/
    VPOAHD02.PCIAFTN = PC0LM002.IN7STNBR; /* After picture*/
    VPOAHD02.YOACD = "56"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                     /* COUNTRY OF ORIGIN*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.TSEOXCC != VPOHDR03.TSEOXCC) /* country of origin*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.TSEOXCC; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.TSEOXCC; /* After picture*/
    VPOAHD02.YOACD = "83"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
               /* MANUFACTURING COUNTRY OF ORIGIN*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC0LM-XCT-ORIG-CD != VPOHDR03.PC-XCT-ORIG-CD)
                                   /* mfg ctry of origin*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC-XCT-ORIG-CD; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC0LM-XCT-ORIG-CD; /* After picture*/
    VPOAHD02.YOACD = "83"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                         /* SHIP VIA*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3SHVIA != VPOHDR03.PC3SHVIA) /* Ship Via*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3SHVIA; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3SHVIA; /* After picture*/
    VPOAHD02.YOACD = "58"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                          /* STATUS*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.YPUCD != VPOHDR03.YPUCD) /* Status has changed*/

    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.YPUCD; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.YPUCD; /* After picture*/

    if (PC0LM002.YPUCD == "CX" /* ===> After picture*/
     && VPOHDR03.YPUCD == "OP") /* ===> Before picture*/
      VPOAHD02.YOACD = "50"; /* Change code (OP --> CX)*/
    else
      VPOAHD02.YOACD = "79"; /* Change code (other)*/
    end

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                        /* ORDER TYPE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC4ORTYP != VPOHDR03.PC4ORTYP) /* order type has changed*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC4ORTYP; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC4ORTYP; /* After picture*/
    VPOAHD02.YOACD = "62"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS15 ***********************/
end // end PC0LS15

// Insert (A )           VPOAHD01
Function PC0LS16()

   /* ------------------------------------------------------------*/
   /* WRITE AN AUDIT RECORD FOR CHANGES IN P.O. HEADER*/
   /* ------------------------------------------------------------*/

  VPOAHD02.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
  VPOAHD02.PO-REG-CD = VPOHDR03.PO-REG-CD; /* P.O. REGION CODE*/
  VPOAHD02.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/
  VPOAHD02.PC3POIDT = VPOHDR03.PC3POIDT; /* P.O. id*/
  VPOAHD02.FY1FCTYC = VPOHDR03.FY1FCTYC; /* P.O. Factory code*/
  VPOAHD02.PCFSECD = VPOHDR03.PCFSECD; /* Apparel season code*/
  VPOAHD02.PC3BUYMO = VPOHDR03.PC3BUYMO; /* Apparel buy month*/

  VPOAHD02.XXXPGUID = COMMAREA.CAUSERID; /* User id.*/
  VPOAHD02.PC4ORTYP = VPOHDR03.PC4ORTYP; /* P.O. type code*/

  XX0XS01(); /* Get date and time*/
  PC0LW01.PC0L-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0LW01.PC0L-ZZHHMMSS)
    XX0XS01(); /* Get date and time*/
  end

  VPOAHD02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAHD02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* SET UP TIME*/
  VPOAHD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAHD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAHD02.ZZZCHGCT = 0; /* Change count*/

  PC0LSA8(); /* get o/a and c/m flags*/

  try
    call "VPOAHD02" ("A ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS16 ADD HEADER AUDIT ROW ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOAHD02.VPOAHD02-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS16";

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PC0LS16 ***********************/
end // end PC0LS16

// Do Audit Header GPC NOT = "03"
Function PC0LS17()

   /* ------------------------------------------------------------*/
   /* WRITE AN AUDIT RECORD FOR CHANGES IN P.O. HEADER IF GPC*/
   /* NOT APPAREL.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
                    /* HEADER HOLD CODE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.YOHCD != VPOHDR03.YOHCD) /* Hold code*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.YOHCD; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.YOHCD; /* After picture*/
    VPOAHD02.YOACD = "01"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* HEADER STATUS CODE*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.YPUCD != VPOHDR03.YPUCD) /* Status has changed*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.YPUCD; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.YPUCD; /* After picture*/
    VPOAHD02.YOACD = "02"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                  /* L/C REVOLVING CREDIT FLAG*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3RCRFL != VPOHDR03.PC3RCRFL) /* L/C revolving credit flag*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3RCRFL; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3RCRFL; /* After picture*/
    VPOAHD02.YOACD = "22"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* REQUSITION DEPT.*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3REQDP != VPOHDR03.PC3REQDP) /* Department number*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3REQDP; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3REQDP; /* After picture*/
    VPOAHD02.YOACD = "23"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                    /* REQUSITION NUMBER*/
   /* ------------------------------------------------------------*/


  if (PC0LM002.PC3REQNO != VPOHDR03.PC3REQNO) /* Requsition number*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3REQNO; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3REQNO; /* After picture*/
    VPOAHD02.YOACD = "24"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                       /* ATTENTION TO*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3ATTEN != VPOHDR03.PC3ATTEN) /* Attention To*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3ATTEN; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3ATTEN; /* After picture*/
    VPOAHD02.YOACD = "25"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                        /* SEASON/YEAR*/
   /* ------------------------------------------------------------*/


  if (PC0LW01.PC0LWAYR != VPOHDR03.PCFSEYR) /* Season/year*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRN = VPOHDR03.PCFSEYR; /* Before picture*/
    VPOAHD02.PCIAFTN = PC0LW01.PC0LWAYR; /* After picture*/
    VPOAHD02.YOACD = "26"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                         /* SHIP VIA*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3SHVIA != VPOHDR03.PC3SHVIA) /* Ship Via*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3SHVIA; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3SHVIA; /* After picture*/
    VPOAHD02.YOACD = "27"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                     /* FOB SHIPPING POINT*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3FOBLC != VPOHDR03.PC3FOBLC) /* FOB shipping point*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3FOBLC; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3FOBLC; /* After picture*/
    VPOAHD02.YOACD = "28"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                         /* COMPONENTS*/
   /* ------------------------------------------------------------*/

  if (PC0LM002.PC3CMPNT != VPOHDR03.PC3CMPNT) /* Components*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRA = VPOHDR03.PC3CMPNT; /* Before picture*/
    VPOAHD02.PCIAFTA = PC0LM002.PC3CMPNT; /* After picture*/
    VPOAHD02.YOACD = "29"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* ------------------------------------------------------------*/
                  /* DOM & NIL L/C PERCENT*/
   /* ------------------------------------------------------------*/

  PC0LW01.PC0LWDLC = VPOHDR03.PC3LCPCT * 100; /* dom l/c% screen format*/
  PC0LW01.PC0LWNLC = VPOHDR03.PC3LCNPC * 100; /* nil l/c% screen format*/
  if (PC0LM002.PC3LCPCT != PC0LW01.PC0LWDLC /* dom L/C percent changed*/
   || PC0LM002.PC3LCNPC != PC0LW01.PC0LWNLC) /* nil L/C percent changed*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIBFRN = PC0LW01.PC0LWLCP; /* Before picture*/
    PC0LW01.PC0LWDLC = PC0LM002.PC3LCPCT; /* map dom l/c% to w/s*/
    PC0LW01.PC0LWNLC = PC0LM002.PC3LCNPC; /* map nil l/c% to w/s*/
    VPOAHD02.PCIAFTN = PC0LW01.PC0LWLCP; /* After picture*/
    VPOAHD02.YOACD = "30"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end

   /* ------------------------------------------------------------*/
                  /* DOM ADJ. QTY AND PRC*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC3DMQTY != 0 /* dom L/C adj qty entered*/
   || PC0LW01.PC3DMPRC != 0) /* dom L/C adj prc entered*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIAFTN = PC0LW01.PC3DMQTY; /* dom qty to after nbr*/
    VPOAHD02.PCIAADNB = PC0LW01.PC3DMPRC; /* dom prc to after prc*/
    VPOAHD02.PCJAMEND = "1"; /* amendment print indicator*/
    VPOAHD02.YOACD = "40"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end

   /* ------------------------------------------------------------*/
                  /* NIL ADJ. QTY AND PRC*/
   /* ------------------------------------------------------------*/

  if (PC0LW01.PC3NLQTY != 0 /* nil L/C adj qty entered*/
   || PC0LW01.PC3NLPRC != 0) /* nil L/C adj prc entered*/
    set VPOAHD02 empty; /* Clear record*/
    VPOAHD02.PCIAFTN = PC0LW01.PC3NLQTY; /* nil qty to after nbr*/
    VPOAHD02.PCIAADNB = PC0LW01.PC3NLPRC; /* nil prc to after prc*/
    VPOAHD02.PCJAMEND = "1"; /* amendment print indicator*/
    VPOAHD02.YOACD = "41"; /* Change code*/

    PC0LS16(); /* Write out audit*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS17 ***********************/
end // end PC0LS17

// P.O. ID EDIT CALL ROUTINE
Function PC0LS19()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS19 P.O. ID EDIT FOR APPAREL  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0LW03.PC0LWFKY = PCFREC.PCFKEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LWFKY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS19"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


end // end PC0LS19

// GET NEXT P.O. NUMBER
Function PC0LS20()

   /* ------------------------------------------------------------*/
   /* Select a unique row from the p.o. nbr table.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  PC1REC.XGPCD = PC0LM002.XGPCD;

  PC1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3250" ("SU", SQLCA, PC1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error*/

  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS20 SELECT UNIQUE P.O. NUMBER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1")
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM001.XXXPRCNM = "PC0LS20"; /* Process name*/
  else
    if (PC0LW01.PC0LWMAP == "2")
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0LM002.XXXPRCNM = "PC0LS20"; /* Process name*/
    end
  end

  exit stack; /* Exit to redisplay map*/


end // end PC0LS20

// Fetch  (N1)           VPOHDR03
Function PC0LS21()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "N1"; /* IOMOD function*/


  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0LW01.PC0LWEOF = "Y"; /* Turn on eof*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS21"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOHDR03.VPOHDR03-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    PC0LM001.XXXPRCNM = "PC0LS21"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    PC0LM002.XXXPRCNM = "PC0LS21"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 2*/
  end

  exit stack; /* Exit to redisplay map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS21 ***********************/
end // end PC0LS21

// Insert (A )           VPOITM05
Function PC0LS22()

   /* ------------------------------------------------------------*/
   /* PERFORM item insert for the destination change and P.O*/
   /* Type change.*/
   /* ------------------------------------------------------------*/


  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "A"; /* Move in function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS22 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LWFKJ = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LWFKJ; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS22"; /* Process name*/

  exit stack;


end // end PC0LS22

// Insert (A )           VPOSIZ01
Function PC0LS23()

   /* ------------------------------------------------------------*/
   /* PERFORM AUDIT UPDATE OF ITEM ROWS, IF ITEMS HAVE CHANGED*/
   /* ------------------------------------------------------------*/


  try
    call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/



  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS23 ADD SIZE ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  PC0LW03.PC0LWFKJ = VPOSIZ02.VPOSIZ02-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LWFKJ; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS23"; /* Process name*/

  exit stack;


end // end PC0LS23

// Update (U )           VPOSIZ01
Function PC0LS24()

   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0LM002.XXXPRCNM = "PC0LS24"; /* Module identification*/
  set PC0LM002.PC3PONBR cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> data updated by another*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0LM002 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PC0LM002.XXXPRCNM = "PC0LS24"; /* Module identification*/
  set PC0LM002.PC3PONBR cursor;
  PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0LM002.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS24 ***********************/
end // end PC0LS24

// Insert (A )           VPOASZ01
Function PC0LS25()

   /* ------------------------------------------------------------*/
   /* Insert/add the formatted size audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/
  PC0LW01.PC0L-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0LW01.PC0L-ZZHHMMSS)
    XX0XS01(); /* Get date and time*/
  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOASZ02.ZZZCHGCT = 0; /* Change count*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS25 ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS25"; /* Process name*/

  exit stack;


end // end PC0LS25

// Select (S )           VPOSIZ01
Function PC0LS26()

   /* ------------------------------------------------------------*/
   /* PERFORM Size selection for associated item*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty;
  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB;

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS26 SELECT UNIQUE SIZE ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS26"; /* Process name*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PC0LS26 ***********************/
end // end PC0LS26

// Direct Ship Code Edits
Function PC0LS27()

   /* ----------------------------------------------------------*/
   /* WAREHOUSE CODE AND CUSTOMER CROSS REFERENCE CHECK*/
   /* ----------------------------------------------------------*/

  if (PC4REC.XDSCD == " ") /* Direct ship code*/

    PC0LS06(); /* Warehouse code check*/

    if (PC0LM002.PC2CUXID > " ") /* Something there*/
      set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
      converseLib.validationFailed(133); /* Cannot enter custormer*/
      PC0LM002.XXXPRCNM = "PC0LS27"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    end
  end
  if (PC4REC.XDSCD == "1" /* Direct ship code*/
   || PC4REC.XDSCD == "3") /* Direct ship code*/
    if (PC0LM002.XWHCD > " ") /* Something there*/
      converseLib.validationFailed(132); /* Cannot enter warehouse*/
      set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
      PC0LM002.XWHABRV = " "; /* Clear any abrev.*/
      PC0LM002.XXXPRCNM = "PC0LS27"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move n to error flag*/
    end

    PC0LS07(); /* Customer xref. check*/

  end
  if (PC4REC.XDSCD == "2") /* Direct ship code*/
    if (PC0LM002.PC2CUXID > " " /* Something there*/
     && PC0LM002.XWHCD > " ")   /* Something there*/

      PC0LS06(); /* Whse code check*/
      PC0LS07(); /* Customer cross ref. check*/

    else
      converseLib.validationFailed(213); /* Must enter cust./whse*/
      PC0LM002.XXXPRCNM = "PC0LS27"; /* Process name*/
      PC0LW01.PC0LWINF = "Y"; /* Move Y to error flag*/
      if (PC0LM002.XWHCD == " ") /* Nothing there*/
        set PC0LM002.XWHCD cursor, bold; /* Highlight error*/
        PC0LM002.XWHABRV = " "; /* Clear any abrev.*/
      end
      if (PC0LM002.PC2CUXID == " ") /* Nothing there*/
        set PC0LM002.PC2CUXID cursor, bold; /* Highlight error*/
      end
    end
  end

   /* ********************** End of PC0LS27 ***********************/
end // end PC0LS27

// Driver (set audit rec. flags)
Function PC0LS31()
   /* ------------------------------------------------------------*/
   /* This module is preformed to process and load audits flags*/
   /* for an  audit on the cancelled item row.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* L/C Amend print indicator*/
   /* ------------------------------------------------------------*/

  if ((PC0LM002.PC2CUXID != VPOITM05.PC2CUXID /* ===> Cust. Xref code*/
   || PC0LM002.XWHCD != VPOITM05.XWHCD)       /* ===> Warehouse code*/
   || (PC0LM002.PC2CUXID == VPOITM05.PC2CUXID /* ===> Cust. Xref code*/
   && PC0LM002.XWHCD == VPOITM05.XWHCD        /* ===> Warehouse code*/
   && PC0LM002.XGPCD == "03"                  /* ===> GPC code*/
   && VPOAIT02.YOACD == "60"))                /* ===> AUDIT code*/

    PC0LS33(); /* ===> Get and Load L/C Amend print*/
                                   /* indicator*/

  else

    PC0LS34(); /* ===> Get and Load L/C Amend print*/
                                   /* indicator*/

  end


   /* ------------------------------------------------------------*/
                     /* Change Memo flag*/
   /* ------------------------------------------------------------*/

  PC0LS35(); /* ===> Get and Load Change Memo Flag*/


   /* ------------------------------------------------------------*/
                    /* Order Adjustment flag*/
   /* ------------------------------------------------------------*/

  PC0LS36(); /* ===> Get and Load Order adjustment*/
                                   /* flag*/


   /* **                                                        ***/
   /* ********************** End of PC0LS31 ***********************/
end // end PC0LS31

// Get & Load L/C Amend (1,2,3,5)
Function PC0LS33()
   /* ------------------------------------------------------------*/
   /* Determine if the L/C flag is set and load the appropriate*/
   /* L/C amendment indicator accordingly*/
   /* ------------------------------------------------------------*/


  if (VPOAIT02.YOACD in YOATBL.YOACD /* ===> Cose is in table*/
   && YOATBL.XGPCD[sysVar.arrayIndex] == VPOAIT02.XGPCD)

    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y")

      if (VPOHDR03.PC3NISFL == "Y") /* ===> If PC_LOCR_DET_IND*/
        VPOAIT02.PCJAMEND = "1"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR03.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "2";
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    else /* ===> L/C Flag set to "N"*/

      if (VPOHDR03.PC3NISFL == "Y") /* ===> If PC_LOCR_DET_IND*/
        VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR03.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    end /* ===> L/C Flag check*/

  else /* ===> code not in table*/


    converseLib.validationFailed(139); /* Indicate missing or invalid*/
    PC0LM002.XXXPRCNM = "PC0LS33"; /* Module identification*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> rollback all changes*/

    exit stack;

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS33 ***********************/
end // end PC0LS33

// Get & Load L/C Amend (5,3)
Function PC0LS34()
   /* ------------------------------------------------------------*/
   /* The size record was not updated so load the appropriate*/
   /* L/C Amendment Print Indicator accordingly*/
   /* ------------------------------------------------------------*/


  if (VPOHDR03.PC3NISFL == "Y") /* ===> If PC_LOCR_DET_IND*/
    VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
  else
    if (VPOHDR03.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end /* ===> code not in table*/



   /* **                                                        ***/
   /* ********************** End of PC0LS34 ***********************/
end // end PC0LS34

// Get & Load "Change Memo Flag"
Function PC0LS35()
   /* ------------------------------------------------------------*/
   /* Determine if the change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* ------------------------------------------------------------*/


  if (VPOHDR03.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        if (PC0LW06.PC2CUXID != PC0LM002.PC2CUXID
         || PC0LW06.XWHCD != PC0LM002.XWHCD)
          VPOAIT02.PCJMEMO = " ";
        else
          VPOAIT02.PCJMEMO = "N";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end

    else /* ===> code not in table*/


      converseLib.validationFailed(139); /* Indicate missing or invalid*/
      PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/
      PC0LM002.XXXPRCNM = "PC0LS35"; /* Module identification*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0LS35 ***********************/
end // end PC0LS35

// Get & Load "Order Adj. Flag"
Function PC0LS36()
   /* ------------------------------------------------------------*/
   /* Determine if the L/C flag is set and load the appropriate*/
   /* Order Adjustment flag accordingly*/
   /* ------------------------------------------------------------*/


  if (VPOHDR03.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> Order adjustment flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end

    else /* ===> code not in table*/

      PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
      PC0LM002.XXXPRCNM = "PC0LS36"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0LS36 ***********************/
end // end PC0LS36

// Get & Load "FOB location"
Function PC0LS39()
   /* ------------------------------------------------------------*/
   /* Determine if the po type is 'xd' 'xi' 's8' 's9'*/
     /* if so move the country of origin to the FOB location*/
   /* ------------------------------------------------------------*/
   /* 04-05-91 Request made to do this for all po-types.*/
   /* ------------------------------------------------------------*/


  if (PC0LM002.PC4ORTYP == "XD" /* ===> po type is xd xi s8 or s9*/
   || PC0LM002.PC4ORTYP == "AD" /* ===> po type is xd xi s8 or s9*/
   || PC0LM002.PC4ORTYP == "XI" /* ===> po type is xd xi s8 or s9*/
   || PC0LM002.PC4ORTYP == "S8" /* ===> po type is xd xi s8 or s9*/
   || PC0LM002.PC4ORTYP == "S9" /* ===> po type is xd xi s8 or s9*/
   || PC0LM002.PC4ORTYP == "MX")

    if (PC0LW01.XCTCD in XCTTBL.XCTCD) /* xct country in table*/
      PC0LM002.PC3FOBLC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

  else /* non-nil po type*/
     /* IF PC0LW01.XCTCD = 'USA'      ; domestic*/
       /* ;next sentence*/
     /* ELSE                          ;foreign origin country*/

    if (PC0LW01.XCTCD in XCTTBL.XCTCD) /* xct country in table*/
      PC0LM002.PC3FOBLC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
     /* END ;*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS39 ***********************/
end // end PC0LS39

// check po items for multi dests
Function PC0LS40()
   /* ------------------------------------------------------------*/
   /* IF GPC IS 03 , determine if multiple destinations exist for*/
   /* a given po header's items.  if they do exist, the whse and*/
   /* cust xref fields will be displayed as blanks and a warning*/
   /* message will flash on the screen.*/
   /* ------------------------------------------------------------*/

  PC0LS50(); /* table po items*/

  PC0LW01.PC0LW1FL = "Y"; /* initialize first time flag*/
  PC0LW01.PC0LWMFL = "N"; /* initialize multiple dest. fl*/
  PC0LW01.PC0LW-SO-FL = "N"; /* initialize multiple so fl*/
  PC0LW01.XWHCD = " "; /* clear whse work area*/
  PC0LW01.PC2CUXID = " "; /* clear xref work area*/
  PC0LW01.OP1CUOID = 0; /* clear so work area*/
  PC0LW01.OP1NORID = 0; /* clear so work area*/

  PC0LW01.PC0LWINX = 1; /* set index to one*/

  while (PC0LW09.PC6ITMNB[PC0LWINX] > 0 /* item seq nbr is there*/
   && PC0LW01.PC0LWMFL == "N") /* single dests. exist*/

    if (PC0LW09.PC6STAT[PC0LWINX] != "CX") /* po item is not cancelled*/
      if (PC0LW01.PC0LW1FL == "Y") /* first po item selected*/
        PC0LW01.PC0LW1FL = "N"; /* not first po item*/
        PC0LW01.XWHCD = PC0LW09.XWHCD[PC0LWINX]; /* save whse*/
        PC0LW01.PC2CUXID = PC0LW09.PC2CUXID[PC0LWINX]; /* save xref*/
        PC0LW01.OP1CUOID = PC0LW09.OP1CUOID[PC0LWINX]; /* save so*/
        PC0LW01.OP1NORID = PC0LW09.OP1NORID[PC0LWINX]; /* save so*/
      else
        /* ------------------------------------------------------------*/
         /* compare po item whse & cust xref to saved whse & cust xref*/
         /* codes.  if they are different, this indicates multiple*/
         /* destinations exists for this po header and the whse & xref*/
         /* fields on the map will be blank and a warning message will*/
         /* flash on the screen.  otherwise, if they are identical, the*/
         /* whse & xref codes will be displayed.*/
        /* ------------------------------------------------------------*/
        if (PC0LW09.XWHCD[PC0LWINX] != PC0LW01.XWHCD
         || PC0LW09.PC2CUXID[PC0LWINX] != PC0LW01.PC2CUXID)
          PC0LW01.XWHCD = " "; /* clear whse work area*/
          PC0LW01.PC2CUXID = " "; /* clear xref work area*/
          PC0LW01.PC0LWMFL = "Y"; /* set multiple dest. flag*/
        end
        /* ------------------------------------------------------------*/
         /* compare po item so to saved so*/
         /* if they are different, this indicates multiple*/
         /* so's exit for this po header.  the so fields on the map will*/
         /* blank and a warning message will flash on the screen.*/
         /* otherwise, if they are identical, the so will be displayed*/
        /* ------------------------------------------------------------*/
        if (PC0LW09.OP1CUOID[PC0LWINX] != PC0LW01.OP1CUOID
         || PC0LW09.OP1NORID[PC0LWINX] != PC0LW01.OP1NORID)
          PC0LW01.OP1CUOID = 0; /* clear so work area*/
          PC0LW01.OP1NORID = 0; /* clear so work area*/
          PC0LW01.PC0LW-SO-FL = "Y"; /* set multiple so flag*/
        end
      end
    end /* ==> check po item status*/

    PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* add 1 to index*/

  end /* ==> end of po item array or multiple*/
                                   /* dests exists*/

end // end PC0LS40

// check po items for multi dests
Function PC0LS44()
   /* ------------------------------------------------------------*/
   /* IF GPC IS 03 , validate the items whse/own grp codes*/
   /* against the owner group table.*/
   /* ------------------------------------------------------------*/

  PC0LS50(); /* table po items*/

  PC0LW01.PC0LWINX = 1; /* set index to one*/

  if (PC0LW01.PC0LWMFL == "N") /* single dests. exist*/
    PC0LW01.XWHCD = PC0LM002.XWHCD; /* move map whse to work*/
    if (PC0LM002.XWHCD == " ")
      PC0LW01.XWHCD = "51"; /* use whse 51 for blank whses*/
    end
    if (PC0LW01.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
      PC0LW01.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    end
  end

  PC0LW01.PC0LWINX = 1; /* initialize po item index*/

  while (PC0LW09.PC6ITMNB[PC0LWINX] > 0 /* item seq nbr found*/
   && converseVar.validationMsgNum == 0) /* no message*/

    if (PC0LW09.PC6STAT[PC0LWINX] != "CX") /* po item is not cancelled*/
      PC0LW01.XOWCD = PC0LW09.XOWCD[PC0LWINX]; /* save own grp*/
      if (PC0LW01.PC0LWMFL == "Y") /* multiple dests. exist*/
        PC0LW01.XWHCD = PC0LW09.XWHCD[PC0LWINX];
        if (PC0LW01.XWHCD == " ")
          PC0LW01.XWHCD = "51"; /* use 51 for blank whse*/
        end
        if (PC0LW01.XWHCD in XWHTBL.XWHCD
         && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
          PC0LW01.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
        end
      end

      if (PC0LW01.XWHOWNGF == "Y" /* owner grps allowed*/
       && PC0LW01.XOWCD != "00")  /* items owner grp is not '00'*/
        if (PC0LW01.XOWKEY in XOWTBL.XOWKEY
         && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
           /* valid owner grp code for whse*/
        else
          converseLib.validationFailed(405); /* owner group invalid for whse*/
          set PC0LM002.XWHCD cursor, bold; /* highlight error*/
          PC0LM002.XWHABRV = " "; /* clear abrev.*/
          PC0LM002.XXXPRCNM = "PC0LS45"; /* process name*/
          PC0LW01.PC0LWINF = "Y"; /* move y to error flag*/
          PC0LW01.PC0LWEOF = "Y"; /* set po item eof flag*/
          return;
        end
      else
        if (PC0LW01.XOWCD != "00") /* items owner grp is not '00'*/
          converseLib.validationFailed(405); /* only owner group '00' is valid*/
          set PC0LM002.XWHCD cursor, bold; /* highlight error*/
          PC0LM002.XWHABRV = " "; /* clear abrev.*/
          PC0LM002.XXXPRCNM = "PC0LS45"; /* process name*/
          PC0LW01.PC0LWINF = "Y"; /* move y to error flag*/
          PC0LW01.PC0LWEOF = "Y"; /* set po item eof flag*/
          return;
        end
      end /* ==> check owner grp flag*/
    end /* ==> cancelled po item, no action*/
                                   /* taken*/

    PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* add 1 to index*/

  end /* ==> end of file on po item table*/

end // end PC0LS44

// chk whse/own grp/bal to shp
Function PC0LS45()
   /* ------------------------------------------------------------*/
   /* IF GPC IS 03 and po type is 'sd' or 'cd', validate the*/
   /* items whse/own grp codes against the owner group table.*/
   /* ------------------------------------------------------------*/

  PC0LS50(); /* table po item records*/

  PC0LW01.PC0LWINX = 1; /* initialize po item index*/
  while (PC0LW09.PC6ITMNB[PC0LWINX] > 0 /* item seq nbr found*/
   && converseVar.validationMsgNum == 0) /* no message*/

    if (PC0LW09.PC6STAT[PC0LWINX] != "CX") /* po item is not cancelled*/

      PC0LS47(); /* checks bal. to ship qtys*/

      if (PC5REC.PC5TRECV != 0 /* If received*/
       || PC5REC.PC5TSHIP != 0) /* or shipped*/
        converseLib.validationFailed(359); /* can't process*/
        set PC0LM002.PC4ORTYP cursor, bold; /* highlight error*/
        PC0LM002.XXXPRCNM = "PC0LS45"; /* process name*/
        PC0LW01.PC0LWINF = "Y"; /* move y to error flag*/
        PC0LW01.PC0LWEOF = "Y"; /* set po item eof flag*/
        return;
      end /* ==> check bal. to ship qtys*/
    end /* ==> cancelled po item, no action*/
                                   /* taken*/

    PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* add 1 to index*/

  end /* ==> end of file on po item table*/
end // end PC0LS45

// FACTORY EDIT
Function PC0LS46()

   /* ------------------------------------------------------------*/
   /* FACTORY CODE CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Fetch the row from the factory set.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "S "; /* Move in function code*/

  try
    call "VFCTY003" (PCYREC, SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch  row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    PC0LW01.PC0LWINF = "Y"; /* Turn off soft error*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Process name*/
  TA1REC.TA1LOC = "PC0LS46 SELECT UNIQUE FACTORY TABLE ROW";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    PC0LM002.XXXPRCNM = "PC0LS46"; /* Process name*/
  end

  exit stack;


end // end PC0LS46

// checks bal. to ship qtys
Function PC0LS47()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  set PC5REC empty; /* ===> initialize record*/

  if (PC4REC.PC4ORTYP == "SD"
   || PC4REC.PC4ORTYP == "CD")
    PC5REC.XGPCD = VPOHDR03.XGPCD; /* ===>*/
    PC5REC.PO-REG-CD = VPOHDR03.PO-REG-CD; /* ===>*/
    PC5REC.PC3PONBR = VPOHDR03.PC3PONBR; /* ===>*/

    /* ============>PRODUCT FIELDS*/
    /* ============>--------------*/
    PC5REC.SY1STNBR = PC0LW09.SY1STNBR[PC0LWINX]; /* ===>*/
    PC5REC.SY2CLRID = PC0LW09.SY2CLRID[PC0LWINX]; /* ===>*/
    PC5REC.XDMCD = PC0LW09.XDMCD[PC0LWINX]; /* ===>*/
    PC5REC.XQACD = PC0LW09.XQACD[PC0LWINX]; /* ===>*/
    PC5REC.XOWCD = PC0LW09.XOWCD[PC0LWINX]; /* ===>*/
    PC5REC.PC2INSEG = PC0LW09.PC2INSEG[PC0LWINX]; /* ===>*/
    PC5REC.XPGCD = PC0LW09.XPGCD[PC0LWINX]; /* ===>*/
    PC5REC.XUMCD = PC0LW09.XUMCD[PC0LWINX]; /* ===>*/
    PC5REC.PC5ERFL = "N";

    /* ============>DESTINATION FIELDS*/
    /* ============>------------------*/
    PC5REC.PC2CUXID = PC0LW09.PC2CUXID[PC0LWINX]; /* ===>*/
    PC5REC.OP1PARTN = PC0LW09.OP1PARTN[PC0LWINX]; /* ===>*/
    PC5REC.OP1CUOID = PC0LW09.OP1CUOID[PC0LWINX]; /* ===>*/
    PC5REC.OP1NORID = PC0LW09.OP1NORID[PC0LWINX]; /* ===>*/
    PC5REC.XWHCD = PC0LW09.XWHCD[PC0LWINX]; /* ===>*/
    PC5REC.YMTCD = PC0LW09.YMTCD[PC0LWINX]; /* ===>*/

    XPPC030(); /* ===> call subroutine to calc.*/
                                   /* "Balance to Ship"*/

  end

end // end PC0LS47

// tabled the po items per hdr
Function PC0LS50()
   /* ----------------------------------------------------------*/
           /* TABLES THE PO ITEMS FOR AN APPAREL HEADER*/
   /* This table will contain selected po item fields for a*/
   /* particular po header.  This table then will be used*/
   /* whenever validation is required at the item level.*/
   /* By tabling the items, PC0l will not be so I/O intensive.*/

   /* ----------------------------------------------------------*/

  set VPOITM05 empty; /* Clear record*/
  PC0LW01.PC0LWEOF = "N"; /* Set end of set to n*/
  VPOITM05.XGPCD = VPOHDR03.XGPCD; /* Gpc code*/
  VPOITM05.PO-REG-CD = VPOHDR03.PO-REG-CD; /* P.O. REGION CODE*/
  VPOITM05.PC3PONBR = VPOHDR03.PC3PONBR; /* P.O. number*/

  set PC0LW09 empty; /* Clear array record*/

  PC0LW01.PC0LWINX = 1; /* Set index to one*/

  PC0LS09(); /* Open cursor on item row*/

  while (PC0LW01.PC0LWEOF == "N") /* Not end of set*/

    PC0LS10(); /* Select next pc6row*/

    if (PC0LW01.PC0LWEOF == "N") /* Not end of set*/
      PC0LW09.PC6ITMNB[PC0LWINX] = VPOITM05.PC6ITMNB;
      PC0LW09.SY1STNBR[PC0LWINX] = VPOITM05.SY1STNBR;
      PC0LW09.SY2CLRID[PC0LWINX] = VPOITM05.SY2CLRID;
      PC0LW09.XDMCD[PC0LWINX] = VPOITM05.XDMCD;
      PC0LW09.XQACD[PC0LWINX] = VPOITM05.XQACD;
      PC0LW09.XWHCD[PC0LWINX] = VPOITM05.XWHCD;
      PC0LW09.XOWCD[PC0LWINX] = VPOITM05.XOWCD;
      PC0LW09.PC2INSEG[PC0LWINX] = VPOITM05.PC2INSEG;
      PC0LW09.XPGCD[PC0LWINX] = VPOITM05.XPGCD;
      PC0LW09.XUMCD[PC0LWINX] = VPOITM05.XUMCD;
      PC0LW09.PC2CUXID[PC0LWINX] = VPOITM05.PC2CUXID;
      PC0LW09.YSMXDV[PC0LWINX] = VPOITM05.YSMXDV;
      PC0LW09.OP1PARTN[PC0LWINX] = VPOITM05.OP1PARTN;
      PC0LW09.OP1CUOID[PC0LWINX] = VPOITM05.OP1CUOID;
      PC0LW09.OP1NORID[PC0LWINX] = VPOITM05.OP1NORID;
      PC0LW09.PC6STAT[PC0LWINX] = VPOITM05.PC6STAT;
      PC0LW09.YMTCD[PC0LWINX] = VPOITM05.YMTCD;
      PC0LW01.PC0LWINX = PC0LW01.PC0LWINX + 1; /* Add 1 to index*/
    end
  end

  PC0LS61(); /* Close VPOITM05*/
end // end PC0LS50

// save ("Maintenance" Item Row)
Function PC0LS51()
   /* ----------------------------------------------------------*/
    /* Saved copy of the Tabled Item row. (This will be the*/
    /* source data for the Item insert with changes*/
    /* appropriate fields (ie. PC4ORTYP,XWHSE,PC2CUXID,XDSCD,*/
     /* (ie. PC4ORTYP,XWHSE,PC2CUXID,XDSCD,XSDCD,PC6XCTCD)*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0LW06 and is a mirror image of the VPOITM05.*/
   /* ----------------------------------------------------------*/

  PC0LW06.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0LW06.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0LW06.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0LW06.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0LW06.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0LW06.PC3POIDT = VPOITM05.PC3POIDT;
  PC0LW06.PCFSECD = VPOITM05.PCFSECD;
  PC0LW06.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0LW06.XCTCD = VPOITM05.XCTCD;
  PC0LW06.SY1STNBR = VPOITM05.SY1STNBR;
  PC0LW06.SY2CLRID = VPOITM05.SY2CLRID;
  PC0LW06.XDMCD = VPOITM05.XDMCD;
  PC0LW06.XQACD = VPOITM05.XQACD;
  PC0LW06.XOWCD = VPOITM05.XOWCD;
  PC0LW06.PC2INSEG = VPOITM05.PC2INSEG;
  PC0LW06.XPGCD = VPOITM05.XPGCD;
  PC0LW06.XUMCD = VPOITM05.XUMCD;
  PC0LW06.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0LW06.PC6OETS = VPOITM05.PC6OETS;
  PC0LW06.PC6RTADT = VPOITM05.PC6RTADT;
  PC0LW06.YMTCD = VPOITM05.YMTCD;
  PC0LW06.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0LW06.PC6PLAN = VPOITM05.PC6PLAN;
  PC0LW06.XPLCD = VPOITM05.XPLCD;
  PC0LW06.XPRCD = VPOITM05.XPRCD;
  PC0LW06.XPCCD = VPOITM05.XPCCD;
  PC0LW06.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0LW06.XGACD = VPOITM05.XGACD;
  PC0LW06.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0LW06.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0LW06.XWHCD = VPOITM05.XWHCD;
  PC0LW06.PC2CUXID = VPOITM05.PC2CUXID;
  PC0LW06.YSMXDV = VPOITM05.YSMXDV;
  PC0LW06.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0LW06.OP1CUPO = VPOITM05.OP1CUPO;
  PC0LW06.OP1PARTN = VPOITM05.OP1PARTN;
  PC0LW06.OP1CUOID = VPOITM05.OP1CUOID;
  PC0LW06.OP1NORID = VPOITM05.OP1NORID;
  PC0LW06.OP1CUNDT = VPOITM05.OP1CUNDT;
  PC0LW06.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0LW06.PC61TMSH = VPOITM05.PC61TMSH;
  PC0LW06.XDSCD = VPOITM05.XDSCD;
  PC0LW06.PC6STAT = VPOITM05.PC6STAT;
  PC0LW06.PC6STADT = VPOITM05.PC6STADT;
  PC0LW06.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0LW06.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0LW06.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0LW06.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0LW06.PC6NILRF = VPOITM05.PC6NILRF;
  PC0LW06.YOHCD = VPOITM05.YOHCD;
  PC0LW06.PC3SIFL = VPOITM05.PC3SIFL;
  PC0LW06.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0LW06.PC6CONNO = VPOITM05.PC6CONNO;
  PC0LW06.PC6PETS = VPOITM05.PC6PETS;
  PC0LW06.PC6OETAL = VPOITM05.PC6OETAL;
  PC0LW06.PC6ETALF = VPOITM05.PC6ETALF;
  PC0LW06.PC6MICHG = VPOITM05.PC6MICHG;
  PC0LW06.PC6TORIG = VPOITM05.PC6TORIG;
  PC0LW06.PC6TORDE = VPOITM05.PC6TORDE;
  PC0LW06.PC6TADD = VPOITM05.PC6TADD;
  PC0LW06.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0LW06.PC6PREFL = VPOITM05.PC6PREFL;
  PC0LW06.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0LW06.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0LW06.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0LW06.XXXUSRID = VPOITM05.XXXUSRID;
  PC0LW06.ZZZSDT = VPOITM05.ZZZSDT;
  PC0LW06.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0LW06.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0LW06.ZZZCHGCT = VPOITM05.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PC0LS51 ***********************/
end // end PC0LS51

// save ("Maintenance" Size Row)
Function PC0LS52()
   /* ----------------------------------------------------------*/
    /* Saved copy of the Tabled Item row. (This will be the*/
    /* source data for the Item's size insert with changed*/
    /* appropriate fields (ie. PC6ITMNB)*/

    /* This module moves everything, like "move corresponding",*/
    /* to pc0lw07 and is a mirror image of the VPOSIZ02.*/
   /* ----------------------------------------------------------*/

  PC0LW07.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PC0LW07.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* PO REGION CODE*/
  PC0LW07.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PC0LW07.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PC0LW07.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD; /* new jun-93*/
  move VPOSIZ02.PC7ORIGQ to PC0LW07.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PC0LW07.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PC0LW07.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PC0LW07.FY4FOBPR[1] for all;
  PC0LW07.ZZZSDT = VPOSIZ02.ZZZSDT;
  PC0LW07.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PC0LW07.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PC0LW07.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;


   /* **                                                        ***/
   /* ********************** End of PC0LS52 ***********************/
end // end PC0LS52

// Load VPOITM05 data-->PCJREC
Function PC0LS53()
   /* ----------------------------------------------------------*/
    /* Load the tabled P.O. Item's data to Item audit record*/
    /* to process the audit for the P.O. item.*/
   /* ----------------------------------------------------------*/


  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR;
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID;
  VPOAIT02.XDMCD = VPOITM05.XDMCD;
  VPOAIT02.XQACD = VPOITM05.XQACD;
  VPOAIT02.XOWCD = VPOITM05.XOWCD;
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOAIT02.XPGCD = VPOITM05.XPGCD;
  VPOAIT02.XUMCD = VPOITM05.XUMCD;
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD;
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT;
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.YMTCD = VPOITM05.YMTCD;
  VPOAIT02.XWHCD = VPOITM05.XWHCD;
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR;
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN;
  VPOAIT02.XDSCD = VPOITM05.XDSCD;
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV;
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP;
  VPOAIT02.XPRCD = VPOITM05.XPRCD;
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;


  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "Y";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;


  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0LS53 ***********************/
end // end PC0LS53

// Select (M1) audit seq VPOAIT01
Function PC0LS55()
   /* ----------------------------------------------------------*/
    /* Do a select max count on the item audit sequence number*/
    /* and add 1 to the count.*/
   /* ----------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the SEQ NBR returned*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date and time*/
  PC0LW01.PC0L-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0LW01.PC0L-ZZHHMMSS)
    XX0XS01(); /* Get date and time*/
  end

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* SET UP TIME*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "M1";

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      VPOAIT02.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      VPOAIT02.PCJSEQNO = 1;
      return;
    end
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/
  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS55 ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0LW03.PC0LWFKJ = VPOAIT02.VPOAIT02-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LWFKJ; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS55"; /* Process name*/

  exit stack;



   /* **                                                        ***/
   /* ********************** End of PC0LS55 ***********************/
end // end PC0LS55

// Select (M2) Seq Nbr   VPOITM05
Function PC0LS56()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
     /* the iomod record VPOITM05 already has loaded data.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "M2";

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* load the display record with the new sequence number.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      VPOITM05.PC6ITMNB = PCYREC.PCYCOUNT + 1;
                                             /* ===> seq number ror new row*/

      return; /* Return to previous process*/

    end

  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error occured*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0LS56 FETCH NEXT ITEM NUMBER";
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key convesion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS56"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/



   /* **                                                        ***/
   /* ********************** End of PC0LS56 ***********************/
end // end PC0LS56

// Load saved Item data -->PCJREC
Function PC0LS57()
   /* ----------------------------------------------------------*/
    /* Load the saved tabled item's data to Item audit record*/
    /* to process and audit for the item was cancelled*/
   /* ----------------------------------------------------------*/


  VPOAIT02.XGPCD = PC0LW06.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0LW06.PO-REG-CD; /* PO REGION*/
  VPOAIT02.PC3PONBR = PC0LW06.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0LW06.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0LW06.SY2CLRID;
  VPOAIT02.XDMCD = PC0LW06.XDMCD;
  VPOAIT02.XQACD = PC0LW06.XQACD;
  VPOAIT02.XOWCD = PC0LW06.XOWCD;
  VPOAIT02.PC2INSEG = PC0LW06.PC2INSEG;
  VPOAIT02.XPGCD = PC0LW06.XPGCD;
  VPOAIT02.XUMCD = PC0LW06.XUMCD;
  VPOAIT02.PCFSECD = PC0LW06.PCFSECD;
  VPOAIT02.PC3POIDT = PC0LW06.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0LW06.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0LW06.PC6ETSDT;
  VPOAIT02.YMTCD = PC0LW06.YMTCD;
  VPOAIT02.XWHCD = PC0LW06.XWHCD;
  VPOAIT02.PC2CUXID = PC0LW06.PC2CUXID;
  VPOAIT02.PC6OETS = PC0LW06.PC6OETS;
  VPOAIT02.PC6RTADT = PC0LW06.PC6RTADT;
  VPOAIT02.PC6CXNBR = PC0LW06.PC6CXNBR;
  VPOAIT02.PC6XCTCD = PC0LW06.PC6XCTCD;
  VPOAIT02.PC6PLAN = PC0LW06.PC6PLAN;
  VPOAIT02.XDSCD = PC0LW06.XDSCD;
  VPOAIT02.YSMXDV = PC0LW06.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0LW06.PC4ORTYP;
  VPOAIT02.XPRCD = PC0LW06.XPRCD;


  VPOAIT02.PG1SC4CD = PC0LW06.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "Y";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;


  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0LS57 ***********************/
end // end PC0LS57

// Load saved Item  -->VPOITM05
Function PC0LS58()
   /* ----------------------------------------------------------*/
    /* Load the Saved copy of the item row before it was*/
    /* was cancelled. It will be the data for the new item*/
    /* inserted with new sequence number and other update item*/
    /* feilds.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05 and is a mirror image of the VPOITM05.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PC0LW06.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0LW06.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0LW06.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0LW06.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PC0LW06.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PC0LW06.PC3POIDT;
  VPOITM05.PCFSECD = PC0LW06.PCFSECD;
  VPOITM05.FY1FCTYC = PC0LW06.FY1FCTYC;
  VPOITM05.XCTCD = PC0LW06.XCTCD;
  VPOITM05.SY1STNBR = PC0LW06.SY1STNBR;
  VPOITM05.SY2CLRID = PC0LW06.SY2CLRID;
  VPOITM05.XDMCD = PC0LW06.XDMCD;
  VPOITM05.XQACD = PC0LW06.XQACD;
  VPOITM05.XOWCD = PC0LW06.XOWCD;
  VPOITM05.PC2INSEG = PC0LW06.PC2INSEG;
  VPOITM05.XPGCD = PC0LW06.XPGCD;
  VPOITM05.XUMCD = PC0LW06.XUMCD;
  VPOITM05.PC6ETSDT = PC0LW06.PC6ETSDT;
  VPOITM05.PC6OETS = PC0LW06.PC6OETS;
  VPOITM05.PC6RTADT = PC0LW06.PC6RTADT;
  VPOITM05.YMTCD = PC0LW06.YMTCD;
  VPOITM05.PC6CXNBR = PC0LW06.PC6CXNBR;
  VPOITM05.PC6PLAN = PC0LW06.PC6PLAN;
  VPOITM05.XPLCD = PC0LW06.XPLCD;
  VPOITM05.XPRCD = PC0LW06.XPRCD;
  VPOITM05.XPCCD = PC0LW06.XPCCD;
  VPOITM05.SYBSTGNB = PC0LW06.SYBSTGNB;
  VPOITM05.XGACD = PC0LW06.XGACD;
  VPOITM05.PG1SC4CD = PC0LW06.PG1SC4CD;
  VPOITM05.PC6CLVAR = PC0LW06.PC6CLVAR;
  VPOITM05.XWHCD = PC0LW06.XWHCD;
  VPOITM05.PC2CUXID = PC0LW06.PC2CUXID;
  VPOITM05.YSMXDV = PC0LW06.YSMXDV;
  VPOITM05.PC6XCTCD = PC0LW06.PC6XCTCD;
  VPOITM05.OP1CUPO = PC0LW06.OP1CUPO;
  VPOITM05.OP1PARTN = PC0LW06.OP1PARTN;
  VPOITM05.OP1CUOID = PC0LW06.OP1CUOID;
  VPOITM05.OP1NORID = PC0LW06.OP1NORID;
  VPOITM05.OP1CUNDT = PC0LW06.OP1CUNDT;
  VPOITM05.PC4ORTYP = PC0LW06.PC4ORTYP;
  VPOITM05.PC61TMSH = "N";
  VPOITM05.XDSCD = PC0LW06.XDSCD;
  VPOITM05.PC6STAT = PC0LW06.PC6STAT;
  VPOITM05.PC6STADT = PC0LW06.PC6STADT;
  VPOITM05.PC6AIRNB = PC0LW06.PC6AIRNB;
  VPOITM05.PC6AIRDT = PC0LW06.PC6AIRDT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0LW06.PC-FCTY-AFRGT-PCT;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0LW06.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC6NILRF = PC0LW06.PC6NILRF;
  VPOITM05.YOHCD = PC0LW06.YOHCD;
  VPOITM05.PC3SIFL = "N";
  VPOITM05.PC6SZAVL = PC0LW06.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0LW06.PC6CONNO;
  VPOITM05.PC6PETS = PC0LW06.PC6PETS;
  VPOITM05.PC6OETAL = PC0LW06.PC6OETAL;
  VPOITM05.PC6ETALF = PC0LW06.PC6ETALF;
  VPOITM05.PC6MICHG = PC0LW06.PC6MICHG;
  VPOITM05.PC6TORIG = PC0LW06.PC6TORIG;
  VPOITM05.PC6TORDE = PC0LW06.PC6TORDE;
  VPOITM05.PC6TADD = PC0LW06.PC6TADD;
  VPOITM05.PC6TCNCL = PC0LW06.PC6TCNCL;
  VPOITM05.PC6PREFL = "N";
  VPOITM05.XIB-IBANK-CD = PC0LW06.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PC0LW06.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PC0LW06.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PC0LW06.XXXUSRID;
  VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPOITM05.ZZZCHGCT = 0;


   /* **                                                        ***/
   /* ********************** End of PC0LS58 ***********************/
end // end PC0LS58

// Update (U )           VPOHDR03
Function PC0LS60()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the VPOHDR03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "U "; /* Move U to function for update*/

  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS60"; /* Process name*/
  TA1REC.TA1LOC = "UPDATE UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOHDR03.VPOHDR03-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    PC0LM001.XXXPRCNM = "PC0LS60"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    PC0LM002.XXXPRCNM = "PC0LS60"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 2*/
  end

  exit stack; /* Exit to redisplay map*/



   /* **                                                        ***/
   /* ********************** End of PC0LS60 ***********************/
end // end PC0LS60

// Close (C2)  Set       VPOITM05
Function PC0LS61()
   /* ------------------------------------------------------------*/
   /* Select the set of rows from Production Order Dest. Item*/
   /* Plan Table.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "C2"; /* IOMOD function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, continue to fetch the first selected row.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0L"; /* Program name*/
  TA1REC.TA1LOC = "PC0LS61 CLOSE ITEM NUMBER SET";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LS61"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/


   /* **                                                        ***/
   /* ********************** End of PC0LS61 ***********************/
end // end PC0LS61

// Close  (C1) Set       VPOHDR03
Function PC0LS62()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "C1"; /* IOMOD function*/

  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS62"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE P.O. HEADER SET  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOHDR03.VPOHDR03-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    PC0LM001.XXXPRCNM = "PC0LS62"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    PC0LM002.XXXPRCNM = "PC0LS62"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 2*/
  end

  exit stack; /* Exit to redisplay map*/



   /* **                                                        ***/
   /* ********************** End of PC0LS62 ***********************/
end // end PC0LS62

// Insert (A )           VPOHDR03
Function PC0LS63()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the VPOHDR03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear record*/
  PCYREC.PCYFUNC = "A "; /* IOMOD function*/


  try
    call "VPOHDR03" (PCYREC, SQLCA, VPOHDR03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS63"; /* Process name*/
  TA1REC.TA1LOC = "INSERT P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR03"; /* Table view name*/
  PC0LW03.PC0LW3KY = VPOHDR03.VPOHDR03-KEY; /* Table key conversion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW3KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  if (PC0LW01.PC0LWMAP == "1") /* Map 1*/
    PC0LM001.XXXPRCNM = "PC0LS63"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 1*/
  end

  if (PC0LW01.PC0LWMAP == "2") /* Map 2*/
    PC0LM002.XXXPRCNM = "PC0LS63"; /* Process name*/
    converseLib.clearScreen();
     /* Reset map 2*/
  end

  exit stack; /* Exit to redisplay map*/



   /* **                                                        ***/
   /* ********************** End of PC0LS63 ***********************/
end // end PC0LS63

// Select (S ) Unique    VPRDCU01
Function PC0LS72()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = VPOITM05.XGPCD; /* ===> GPC*/
  PC2REC.PC2CUXID = PC0LM002.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    set PC0LM002.PC2CUXID cursor, bold;

    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    PC0LM002.XXXPRCNM = "PC0LS72"; /* Module identification*/
    converseLib.validationFailed(45);

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  PC0LM002.XXXPRCNM = "PC0LS72"; /* Module identification*/

  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0LM002.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS72 ***********************/
end // end PC0LS72

// Select (S ) Unique    VPRDCU01
Function PC0LS73()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* Row storage area*/

  PC2REC.XGPCD = VPOITM05.XGPCD; /* ===> GPC*/
  PC2REC.KUCCOID = OP1REC.KUCCOID; /* company #*/
  PC2REC.KUMSTRID = OP1REC.KUMSTRID; /* store*/
  PC2REC.XNXCD = OP1REC.XNXCD; /* department*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    PC0LM002.PC2CUXID = PC2REC.PC2CUXID; /* move xref to map*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    set PC0LM002.PC2CUXID cursor, bold;

    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    PC0LM002.XXXPRCNM = "PC0LS72"; /* Module identification*/
    converseLib.validationFailed(45);

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  PC0LM002.XXXPRCNM = "PC0LS73"; /* Module identification*/

  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0LM002.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
   /* MOVE PC2REC.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS73 ***********************/
end // end PC0LS73

// get shipped quantities
Function PC0LS80()
   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped*/
     /* (for product/destination of current Item row)*/
        /* - cannot change dest. if products have been shipped*/
          /* go to split item application.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - Accumulate the the total quantities shipped for*/
     /* the given ---> Product & Destination*/
   /* ------------------------------------------------------------*/


  PC0LS81(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Balance to Ship" until EOF*/
   /* ------------------------------------------------------------*/

  PC0LS82(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC0LW01.PC0LWSWT == "N") /* ===>Until end of cursor temp for*/
                                   /* "CPL"*/

    if (TSTREC.YSSCD == "IT" /* ===> Shipped quantities*/
     || TSTREC.YSSCD == "RC" /* ===> Recieved quantities*/
     || TSTREC.YSSCD == "CC") /* ===> Custom carried quantities*/

      PC0LW01.TSISHPQT = PC0LW01.TSISHPQT + TSTREC.TSISHPQT;

    end

    PC0LS82(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0LS83(); /* ===> Close the selected set cursor*/


   /* ------------------------------------------------------------*/
   /* Check for shipped/in transit qtys.*/
   /* ------------------------------------------------------------*/


  if (PC0LW01.TSISHPQT > 0) /* ===>products have been shipped*/

    PC0LM002.XXXPRCNM = "PC0LS80"; /* Module identification*/
    set PC0LM002.PC2CUXID cursor, bold; /* Customer highlighted*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/

    converseLib.validationFailed(262); /* ===>cannot change destination QTYs shipped*/
    exit stack; /* ===> exit to display error on the map*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS80 ***********************/
end // end PC0LS80

// Select (S1)  Set/Open VCPLHD02
Function PC0LS81()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/


  set TSTREC empty; /* ===> initialize record*/

  PC0LW01.TSISHPQT = 0; /* ===>reset total shipped qtys*/
  PC0LW01.PC0LWSWT = "N"; /* ===> initialize temp cursor "CPLHD"'*/


  TSTREC.XGPCD = VPOITM05.XGPCD; /* ===>*/
  TSTREC.PC3PONBR = VPOITM05.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  TSTREC.SY1STNBR = VPOITM05.SY1STNBR; /* ===>*/
  TSTREC.SY2CLRID = VPOITM05.SY2CLRID; /* ===>*/
  TSTREC.XDMCD = VPOITM05.XDMCD; /* ===>*/
  TSTREC.XQACD = VPOITM05.XQACD; /* ===>*/
  TSTREC.XOWCD = VPOITM05.XOWCD; /* ===>*/
  TSTREC.XPGCD = VPOITM05.XPGCD; /* ===>*/
  TSTREC.XUMCD = VPOITM05.XUMCD; /* ===>*/

   /* ============>destination feilds*/
   /* ============>------------------*/
  TSTREC.PC2CUXID = VPOITM05.PC2CUXID; /* ===>*/
  TSTREC.XWHCD = VPOITM05.XWHCD; /* ===>*/


   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("S1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0LM002.XXXPRCNM = "PC0LS81"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0LS81"; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS81 ***********************/
end // end PC0LS81

// Fetch  (N1)  Next row VCPLHD02
Function PC0LS82()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("N1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0LW01.PC0LWSWT = "Y"; /* Indicate end of temp cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0LM002.XXXPRCNM = "PC0LS82"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0LS82"; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS82 ***********************/
end // end PC0LS82

// Close  (C1)  Set      VCPLHD02
Function PC0LS83()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("C1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0LM002.XXXPRCNM = "PC0LS83"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
  converseLib.clearScreen();
   /* Reset map2 before redisplay*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0LS83"; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0LS83 ***********************/
end // end PC0LS83

// get item receipt data
Function PC0LS90()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of recieved QTYs*/
   /* - process the set of rows for value in receipt array*/
     /* - cannot change plans because receipt data exists*/
   /* ------------------------------------------------------------*/


  PC0LS91(); /* ===>Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  PC0LS92(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC0LW01.PC0LWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* for received data in working storage set end of cursor and*/
     /* signify error for merging plans not allowed if either plan*/
     /* has receipt data.*/
    /* ------------------------------------------------------------*/

    if (VFYPO002.YRSCD == "10") /* ===> good status code*/

      PC0LW01.PC0LWIXT = 1; /* Initialize general index*/

      while (PC0LW01.PC0LWIXT <= 40
       && PC0LW01.PC0LWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/
        if (VFYPO002.PCMRCPTQ[PC0LWIXT] != 0)
          PC0LW01.PCMRCPTQ = VFYPO002.PCMRCPTQ[PC0LWIXT];
          PC0LW01.PC0LWSWT = "Y";
                                   /* ===> force  EOF temp cursor "FYPO"*/
        end
        PC0LW01.PC0LWIXT = PC0LW01.PC0LWIXT + 1;
      end

    end /* ===> status of record check*/

    PC0LS92(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/

  end /* ====> while EOF of temp cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0LS93(); /* ===> Close the selected set cursor*/


   /* ------------------------------------------------------------*/
   /* check for a QTYs recivied value and display error in it*/
   /* QTYs exists*/
   /* ------------------------------------------------------------*/


  if (PC0LW01.PCMRCPTQ != 0) /* ===>products has reciepts*/

    PC0LM002.XXXPRCNM = "PC0LS90"; /* Module identification*/
    converseLib.validationFailed(262); /* ===>cannot change dest. when products shipped*/
    set PC0LM002.PC2CUXID cursor, bold; /* Customer highlighted*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on error flag*/

    exit stack; /* ===> exit to display error on the map*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0LS90 ***********************/
end // end PC0LS90

// Select (S1) Set/Open  VFYPO001
Function PC0LS91()
   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  set VFYPO002 empty;


  PC0LW01.PC0LWSWT = "N"; /* Set EOF Temp cursor flag to no*/
  PC0LW01.PCMRCPTQ = 0; /* reciept data accumulator*/

   /* =========> PRODUCT FIELDS*/
   /* =========> ------------------*/
  VFYPO002.XGPCD = VPOITM05.XGPCD;
  VFYPO002.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VFYPO002.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VFYPO002.SY1STNBR = VPOITM05.SY1STNBR; /* Style number*/
  VFYPO002.SY2CLRID = VPOITM05.SY2CLRID; /* Color code*/
  VFYPO002.XDMCD = VPOITM05.XDMCD; /* Dimension code*/
  VFYPO002.XQACD = VPOITM05.XQACD; /* Quality code*/
  VFYPO002.XPGCD = VPOITM05.XPGCD; /* Package code*/
  VFYPO002.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VFYPO002.PC2INSEG = VPOITM05.PC2INSEG; /* Spec code*/

   /* =========> owner group FIELDS*/
   /* =========> ------------------*/
  VFYPO002.XOWCD = "*"; /* Owner group code*/
  if (VPOITM05.XWHCD == "09") /* if promo warehouse*/
       /* leave OG = '*'*/
  else
    if (VPOITM05.XGPCD == "03") /* if apparel item*/
      set PG2REC empty;
      PG2REC.XGPCD = VPOITM05.XGPCD;
      PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style number*/
      PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color code*/
      PG2REC.XDMCD = VPOITM05.XDMCD; /* Dimension code*/
      XSPG202(); /* -->read syclr*/
      if (PG2REC.XFMCD == "21" /* if finshed good*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = VPOITM05.XOWCD; /* use og of po item*/
      end
    end
  end

   /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.XWHCD = VPOITM05.XWHCD; /* ===>*/
   /* ==> customer not part of VFYPO002 D.B.*/

  try
    call "VFYPO002" ("S1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  PC0LM002.XXXPRCNM = "PC0LS91"; /* Process name*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS91"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PC0LS91 ***********************/
end // end PC0LS91

// Fetch  (N1) Next row  VFYPO001
Function PC0LS92()
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("N1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0LW01.PC0LWSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0LM002.XXXPRCNM = "PC0LS92";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS92"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;


   /* **                                                        ***/
   /* ********************** End of PC0LS92 ***********************/
end // end PC0LS92

// Close  (C1) Set       VFYPO001
Function PC0LS93()
   /* ------------------------------------------------------------*/
   /* Close cursor for VFYPO002*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("C1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  PC0LM002.XXXPRCNM = "PC0LS93"; /* ===> process identification*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0LS93"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0LS93 ***********************/
end // end PC0LS93

// re-format saved level data
Function PC0LS98()
   /* ------------------------------------------------------------*/
    /* this module will re-format the date this program saved*/
    /* before it transfered control to PC0E.*/
   /* ------------------------------------------------------------*/

  PC0LW08.PC0LWUSR = PCWREC.PCWUSER1; /* load saved level data*/

  PC0LW01.PC0LWODT = PC0LW08.PC3POIDT; /* P.O. id*/
  PC0LM002.PC0LMPYR = PC0LW01.PC0LMPYR; /* P.O. id*/
  PC0LM002.PC0LMPMO = PC0LW01.PC0LMPMO; /* P.O. id*/
  PC0LM002.PC0LMDMO = PC0LW01.PC0LMDMO; /* P.O. id*/

  PC0LM002.PC4ORTYP = PC0LW08.PC4ORTYP; /* P.O. type*/

  PC0LM002.FY1FCTYC = PC0LW08.FY1FCTYC; /* Factory code*/
  PC0LM002.FY1FCTSN = PC0LW08.FY1FCTSN; /* Factory short name*/

  PC0LM002.PC3ORDBY = PC0LW08.PC3ORDBY; /* Ordered by*/
  PC0LM002.PC3SHVIA = PC0LW08.PC3SHVIA; /* Ship via*/

  PC0LM002.XSECD = PC0LW08.XSECD; /* Season code*/
  PC0LM002.PC0LMSYR = PC0LW08.PC0LMSYR; /* season year display*/



   /* **                                                        ***/
   /* ********************** End of PC0LS98 ***********************/
end // end PC0LS98

// Load change memo flag
Function PC0LSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR03.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAHD02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAHD02.PCJMEMO = " ";
      else
        VPOAHD02.PCJMEMO = "N";
      end /* =====>*/
      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAHD02.PCJOAPRT = " ";
      else
        VPOAHD02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0LM002.XXXPRCNM = "PC0LSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAHD02.PCJMEMO = "N";
    VPOAHD02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0lsa8 ***********************/
end // end PC0LSA8

// Create FOB Price Templete
Function PC0LSB0()
   /* ------------------------------------------------------------*/

   /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* The prices found from this set of processes will be loaded*/
   /* to the PC0LW07 record which is the source for size insert.*/
      /* The item being used is the saved copy before cancel*/
   /* was performed.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0LW01.PC0LWEOF = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/
   /* ==> load saved copy*/


  VPOITM05.XGPCD = PC0LW06.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0LW06.PO-REG-CD; /* ===>*/
  VPOITM05.PC3PONBR = PC0LW06.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0LW06.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0LW06.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0LW06.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0LW06.XQACD; /* ===>*/
  VPOITM05.PC2INSEG = PC0LW06.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = PC0LW06.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0LW06.XUMCD; /* ===>*/


  if (PC0LM002.PC2CUXID > " ")
    VPOITM05.PC2INSEG = PC2REC.PC2INSEG;
    VPOITM05.YSMXDV = PC2REC.YSMXDV;
  else /* ===>Cust = blank*/
    VPOITM05.PC2INSEG = "000";
    if (PC0LM002.XWHCD == "12"
     || PC0LM002.XWHCD == "60"
     || PC0LM002.XWHCD == "61") /* if intl whse*/
      VPOITM05.YSMXDV = "20"; /* div 20*/
    else
      VPOITM05.YSMXDV = "10"; /* div '10'*/
    end
  end


   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.PC2CUXID = "*"; /* ===>*/
  VPOITM05.XWHCD = "*"; /* ===>*/

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/


  PC0LSB1(); /* ========> select set and open cursor*/

  PC0LSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate FOB ovrd data asso. with each row.*/
     /* Load the FOB price tempelete with flag and price*/
     /* for the 40 size bucket associated with each item.*/
   /* Fetch and accumulate the total QTYs asso. with each row.*/

   /* ------------------------------------------------------------*/

  while (PC0LW01.PC0LWEOF == "N") /* Until end of temp. item cursor*/

    if (VPOITM05.PC6STAT == "OP" /* ===> item status code*/
     || VPOITM05.PC6STAT == "FC") /* ===> item status code*/

      PC0LSB6(); /* ==========> get size record row*/

      PC0LW01.PC0LWIXT = 1; /* ===> initialize temp. index*/

      while (PC0LW01.PC0LWIXT <= 40) /* Until all sizes read*/

        /* ------------------------------------------------------------*/
         /* accumulate FOB ovrd data asso. with each row.*/
        /* ------------------------------------------------------------*/

        if (PC0LW07.PC7ORDEQ[PC0LWIXT] > 0)

          if (VPOSIZ02.PC7FOBFL[PC0LWIXT] == "Y")
                                   /* ===> load FOB override data*/

            PC0LW07.FY4FOBPR[PC0LWIXT] = VPOSIZ02.FY4FOBPR[PC0LWIXT];
            PC0LW07.PC7FOBFL[PC0LWIXT] = VPOSIZ02.PC7FOBFL[PC0LWIXT];

          else

            PC0LW07.FY4FOBPR[PC0LWIXT] = PCOREC.FY4FOBPR[PC0LWIXT];
            PC0LW07.PC7FOBFL[PC0LWIXT] = "N";

          end

        end /* ===> QTYs existed for new item's*/
                                   /* sizes*/




        PC0LW01.PC0LWIXT = PC0LW01.PC0LWIXT + 1;
                                   /* ===> increment temp. index*/

      end /* ===> while more sizes*/

    end /* ===> status check*/

    PC0LSB2(); /* ==========> Fetch next item row*/
    /* ========================================> driving read*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0LSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0LSB0 ***********************/
end // end PC0LSB0

// Select (S7) Set/Open  VPOITM05
Function PC0LSB1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/



  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMNM = "PC0LSB1"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key convesion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LSB1"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/



   /* **                                                        ***/
   /* ********************** End of PC0LSB1 ***********************/
end // end PC0LSB1

// Fetch  (N7) Next row  VPOITM05
Function PC0LSB2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /**/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      PC0LW01.PC0LWEOF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0LSB2 FETCH NEXT ITEM NUMBER";
  TA1REC.TA1PGMNM = "PC0LSB2"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key convesion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LSB2"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/


   /* **                                                        ***/
   /* ********************** End of PC0LSB2 ***********************/
end // end PC0LSB2

// Close  (N7) Set       VPOITM05
Function PC0LSB3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM05" ("C7", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMNM = "PC0LSB3"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0LW03.PC0LW6KY = VPOITM05.VPOITM05-KEY; /* Table key convesion*/
  TA1REC.TA1TBLKE = PC0LW03.PC0LW6KY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  PC0LM002.XXXPRCNM = "PC0LSB3"; /* Process name*/

  exit stack; /* Exit to redisplay map2*/



   /* **                                                        ***/
   /* ********************** End of PC0LSB3 ***********************/
end // end PC0LSB3

// Select (S ) Unique    VPOSIZ01
Function PC0LSB6()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    PC0LW01.PC0LWINF = "Y"; /* Turn on hard error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end


  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/


  PC0LM002.XXXPRCNM = "PC0LSB6"; /* module identifier*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0LSB6"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0LSB6 ***********************/
end // end PC0LSB6

// Set-up/get Factory FOB Prices
Function PC0LSB7()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/


  set PCOREC empty;
  PCOREC.XGPCD = PC0LW06.XGPCD;
  PCOREC.FY1FCTYC = PC0LW06.FY1FCTYC;
  PCOREC.SY1STNBR = PC0LW06.SY1STNBR;
  PCOREC.SY2CLRID = PC0LW06.SY2CLRID;
  PCOREC.XDMCD = PC0LW06.XDMCD;
  PCOREC.XQACD = PC0LW06.XQACD;
  PCOREC.XUMCD = PC0LW06.XUMCD;
  PCOREC.XPGCD = PC0LW06.XPGCD;
  PCOREC.PC3POIDT = PC0LW06.PC3POIDT;
  PCOREC.PC3CRDT = PC0LW01.PC3CRDT;
  PCOREC.PCFSEYR = PC0LW01.PCFSEYR;
  PCOREC.XSECD = PC0LW01.XSECD;

  if (PC0LM002.PC2CUXID > " ")
    VPOITM05.PC2INSEG = PC2REC.PC2INSEG;
  else /* ===>Cust = blank*/
    VPOITM05.PC2INSEG = "000";
  end

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* set appropriate flag and messages*/
   /* the PCOREC will contain the data necessary for FOB price*/
   /* processing and will not be modified until the next item*/
   /* is processed.*/
   /* ------------------------------------------------------------*/


  if (PCOREC.PCORECPF == "N")

  end


   /* **                                                        ***/
   /* ********************** End of PC0LSB7 ***********************/
end // end PC0LSB7

//*** RECORD=PC0LW01 ****
// **************** MAIN WORKING STORAGE FOR PC0L *************
// *
// *     THIS RECORD CONTAINS THE DATA FIELDS THAT NEED
// *     TO BE MANIPULATED WITHIN THE PC0L PROGRAM
// *
// *
// *     DATE         NAME           DESCRIPTION OF CHANGE
// *    --------     --------      ---------------------------
// *    06/04/89     GWITZI NEW RECORD
// *    12/21/90     kdenne added pc0l1fl to use in comparing
// *                        whse & xref fields
// *    01/18/91     kdenne added whse and owner grp codes to
// *                        item array.
// *    01/07/93     KSANFO Added PC0LWFLD to use in new PO ID
// *                        month edit for QQ's.
// *    08/09/00     vramac Added PC0LWNSC for sap flag
// *    10/18/00     MANDEL ADDED PC0LWVFL,PC0LWSPO,PC0LWMPO
// *                              FOR NSC
// *    01/10/01     kkarla added pc0lmpdt touse for validating
// *                        print date entered by the user.
// ************************************************************
// ***********************
Record PC0LW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 FY1FRGN FY1FRGN ; 
  10 FY6FOCD FY6FOCD ; 
  10 XCTCD XCTCD ; 
  10 XDSCD XDSCD ; 
  10 YSMXDV YSMXDV ; 
  10 PC2INSEG PC2INSEG ; 
  10 YPUCD YPUCD ; 
  10 YPUDESC YPUDESC ; 
  10 YOHCD YOHCD ; 
  10 YOHSDESC YOHSDESC ; 
  10 PCFSEYR PCFSEYR ; 
  10 PCFSECD PCFSECD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC0L-ZZHHMMSS PC0L-ZZHHMMSS ; 
  10 PC0LWYR1 PC0LWYR1 ; 
    15 PC0LWCC1 PC0LWCC1 ; 
    15 PC0LWCY1 PC0LWCY1 ; 
  10 PC0LWCDT PC0LWCDT ; 
    15 PC0LWCCY PC0LWCCY ; 
      20 PC0LWCCT PC0LWCCT ; 
      20 PC0LWCYT PC0LWCYT ; 
    15 PC0LWCMT PC0LWCMT ; 
    15 PC0LWCAT PC0LWCAT ; 
  10 PC0LWWDT PC0LWWDT ; 
    15 PC0LWWMT PC0LWWMT ; 
    15 PC0LWWAT PC0LWWAT ; 
    15 PC0LWWYT PC0LWWYT ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC0LWODT PC0LWODT ; 
    15 PC0LWOWY PC0LWOWY ; 
      20 PC0LMPCC PC0LMPCC ; 
      20 PC0LMPYR PC0LMPYR ; 
    15 PC0LMPMO PC0LMPMO ; 
    15 PC0LMDMO PC0LMDMO ; 
  10 PC0LWBYM PC0LWBYM ; 
    15 PC0LWCYR PC0LWCYR ; 
    15 PC0LWNMO PC0LWNMO ; 
  10 PC0LWAYR PC0LWAYR ; 
    15 PC0LWACY PC0LWACY ; 
    15 PC0LWAYE PC0LWAYE ; 
  10 PC0LWAYC PC0LWAYC ; 
    15 PC0LWACN PC0LWACN ; 
    15 PC0LWAYN PC0LWAYN ; 
  10 PC6ITMNB PC6ITMNB ; 
  10 IN7STNBR IN7STNBR ; 
  10 PC3BLPO PC3BLPO ; 
  10 PC3COMP PC3COMP ; 
  10 PC3SHVIA PC3SHVIA ; 
  10 PC3FOBLC PC3FOBLC ; 
  10 PC3RCRFL PC3RCRFL ; 
  10 PC3REQNO PC3REQNO ; 
  10 PC3REQDP PC3REQDP ; 
  10 PC3ATTEN PC3ATTEN ; 
  10 PC3MAILD PC3MAILD ; 
  10 PC3ACKDT PC3ACKDT ; 
  10 PC3CRDT PC3CRDT ; 
  10 PC3PRTDT PC3PRTDT ; 
  10 PC0LMMDT PC0LMMDT ; 
  10 PC0LMADT PC0LMADT ; 
  10 PC0LMPDT PC0LMPDT ; 
  10 PC0LWMDT PC0LWMDT ; 
    15 PC0LWMCC PC0LWMCC ; 
    15 PC0LWMDA PC0LWMDA ; 
      20 PC0LWMYY PC0LWMYY ; 
      20 PC0LWMMM PC0LWMMM ; 
      20 PC0LWMDD PC0LWMDD ; 
  10 PC0LWADT PC0LWADT ; 
    15 PC0LWACC PC0LWACC ; 
    15 PC0LWADA PC0LWADA ; 
      20 PC0LWAYY PC0LWAYY ; 
      20 PC0LWAMM PC0LWAMM ; 
      20 PC0LWADD PC0LWADD ; 
  10 PC0LWEDT PC0LWEDT ; 
    15 PC0LWECC PC0LWECC ; 
    15 PC0LWEDA PC0LWEDA ; 
      20 PC0LWEYY PC0LWEYY ; 
      20 PC0LWEMM PC0LWEMM ; 
      20 PC0LWEDD PC0LWEDD ; 
  10 PC0LWPDT PC0LWPDT ; 
    15 PC0LWPCC PC0LWPCC ; 
    15 PC0LWPDA PC0LWPDA ; 
      20 PC0LWPYY PC0LWPYY ; 
      20 PC0LWPMM PC0LWPMM ; 
      20 PC0LWPDD PC0LWPDD ; 
  10 PC0LWDAT PC0LWDAT ; 
    15 PC0LWDCC PC0LWDCC ; 
    15 PC0LWDYY PC0LWDYY ; 
    15 PC0LWDMM PC0LWDMM ; 
    15 PC0LWDDD PC0LWDDD ; 
  10 PC0LWMDY PC0LWMDY ; 
    15 PC0LWSMM PC0LWSMM ; 
    15 PC0LWSDD PC0LWSDD ; 
    15 PC0LWSYY PC0LWSYY ; 
  10 PC3ENTBY PC3ENTBY ; 
  10 PC3ORDBY PC3ORDBY ; 
  10 PC3PRTIN PC3PRTIN ; 
  10 PC3NISFL PC3NISFL ; 
  10 PC3NISDT PC3NISDT ; 
  10 PC3NISTM PC3NISTM ; 
  10 PC3SIFL PC3SIFL ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XWHABRV XWHABRV ; 
  10 XWHOWNGF XWHOWNGF ; 
  10 PC0LWSDT PC0LWSDT ; 
    15 PC0LWSCC PC0LWSCC ; 
    15 PC0LWSDA PC0LWSDA ; 
  10 PC0LWSWR PC0LWSWR ; 
  10 PC0LWMAP PC0LWMAP ; 
  10 PC0LWMLT PC0LWMLT ; 
  10 PC0LWFNC PC0LWFNC ; 
  10 PC0LWINF PC0LWINF ; 
  10 PC0LWHAC PC0LWHAC ; 
  10 PC0LWSWT PC0LWSWT ; 
  10 PC0LWSWF PC0LWSWF ; 
  10 PC0LWUPD PC0LWUPD ; 
  10 PC0LWCCF PC0LWCCF ; 
  10 PC0LWGON PC0LWGON ; 
  10 PC0LWEOF PC0LWEOF ; 
  10 PC0LW1FL PC0LW1FL ; 
  10 PC0LWMFL PC0LWMFL ; 
  10 PC0LW-SO-FL PC0LW-SO-FL ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 PC0LWUID PC0LWUID ; 
    15 PC0LWID1 PC0LWID1 ; 
    15 PC0LWID2 PC0LWID2 ; 
  10 PC2CUXID PC2CUXID ; 
  10 XSECD XSECD ; 
  10 PC0LMSYR PC0LMSYR ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 PC0LWINX PC0LWINX ; 
  10 XXX1 XXX1 ; 
  10 PC0LWIXT PC0LWIXT ; 
  10 PC0LWLCF PC0LWLCF ; 
  10 PC0LWLCP PC0LWLCP ; 
    15 PC0LWDLC PC0LWDLC ; 
    15 PC0LWNLC PC0LWNLC ; 
  10 PC3DMPRC PC3DMPRC ; 
  10 PC3DMQTY PC3DMQTY ; 
  10 PC3NLPRC PC3NLPRC ; 
  10 PC3NLQTY PC3NLQTY ; 
  10 PC0LWCDA PC0LWCDA ; 
    15 PC0LWPYC PC0LWPYC ; 
    15 PC0LWPMC PC0LWPMC ; 
    15 PC0LWDMC PC0LWDMC ; 
  10 PC0LW-FRMT-CUST-ORD PC0LW-FRMT-CUST-ORD ; 
    15 * num(8) ; 
    15 PC0LW-FRMT-PART-NBR PC0LW-FRMT-PART-NBR ; 
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 PC0LWACM PC0LWACM ; 
    15 PC0LWAC1 PC0LWAC1 ; 
    15 PC0LWAC2 PC0LWAC2 ; 
    15 * char(1) ; 
    15 PC0LWAC3 PC0LWAC3 ; 
    15 PC0LWAC4 PC0LWAC4 ; 
    15 * char(1) ; 
    15 PC0LWAC5 PC0LWAC5 ; 
    15 PC0LWAC6 PC0LWAC6 ; 
    15 * char(1) ; 
    15 PC0LWAC7 PC0LWAC7 ; 
  10 PC0LWFLD PC0LWFLD ; 
  10 PC0LWNSC PC0LWNSC ; 
  10 PC0LWVFL PC0LWVFL ; 
  10 PC0LWSPO PC0LWSPO ; 
  10 PC0LWMPO PC0LWMPO ; 
end // end PC0LW01

//*** RECORD=PC0LW02 ****
// ************* PRODUCTION ORDER TYPE TABLE CLONE ************
// 
// THIS RECORD WILL ALLOW THE COMPARISIONS BETWEEN A NEW P.O.
// TYPE AND AN OLD P.O. TYPE.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/22/89   Gwitzi   New record.
// ************************************************************
// ***********************
Record PC0LW02 type basicRecord
  5 PC0LWGRP PC0LWGRP ; 
    10 PC0LWKEY PC0LWKEY ; 
      15 XGPCD XGPCD ; 
      15 PC4ORTYP PC4ORTYP ; 
    10 PC4DESC PC4DESC ; 
    10 PC4SDESC PC4SDESC ; 
    10 PC4ABRV PC4ABRV ; 
    10 XQACD XQACD ; 
    10 XDSCD XDSCD ; 
    10 PC4CUSFL PC4CUSFL ; 
    10 PC4SPCFL PC4SPCFL ; 
    10 XWHCD XWHCD ; 
    10 PC4LCSFL PC4LCSFL ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0LW02

//*** RECORD=PC0LW03 ****
// ******************** DB2 KEY CONVERSION RECORDS ************
// *
// *       THIS RECORD HOLDS THE CONVERTED KEY VALUES
// *       FOR TRANSFERING TO TA1REC WHEN A CALL ERROR
// *       HAS HAPPENED.
// *
// *
// *  DATE            NAME            DESCRIPTION OF CHANGE
// * --------       --------         ------------------------
// * 06/28/89       GWITZI           NEW RECORD
// *
// ************************************************************
// ***********************
Record PC0LW03 type basicRecord
  5 PC0LW3KY PC0LW3KY ; 
    10 PC0LWGP3 PC0LWGP3 ; 
    10 PC0LW3-PO-REG-CD PC0LW3-PO-REG-CD ; 
    10 PC0LWPNB PC0LWPNB ; 
    10 PC0LWPOI PC0LWPOI ; 
    10 PC0LWSE3 PC0LWSE3 ; 
    10 PC0LWFC3 PC0LWFC3 ; 
  5 PC0LW6KY PC0LW6KY ; 
    10 PC0LWGP6 PC0LWGP6 ; 
    10 PC0LW6-PO-REG-CD PC0LW6-PO-REG-CD ; 
    10 PC0LWPN6 PC0LWPN6 ; 
    10 PC0LWIN6 PC0LWIN6 ; 
    10 PC0LWPO6 PC0LWPO6 ; 
    10 PC0LWSE6 PC0LWSE6 ; 
  5 PC0LWFKY PC0LWFKY ; 
    10 PC0LWSEF PC0LWSEF ; 
    10 PC0LWBMF PC0LWBMF ; 
  5 PC0LWFKJ PC0LWFKJ ; 
    10 PC0LWGPJ PC0LWGPJ ; 
    10 PC0LWPNJ PC0LWPNJ ; 
end // end PC0LW03

//*** RECORD=PC0LW04 ****
// *************** PRODUCTION ORDER HEADER TABLE **************
// 
//    THIS IS A WORKING STORAGE RECORD FOR P.O. HEADER TABLE
//    WHICH WILL BE USED TO RESTORE THE ORGINAL OF THIS RECORD
//    WHEN CHECKING TO FIND OUT IF THE BLANK P.O. NUMBER IS
//    VALID.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 07/07/89   GWITZI   CLONE RECORD
// 08/24/98   DRAMSE   ADDED PO-LOCR-PMT-IND
// ***********************
Record PC0LW04 type basicRecord
  5 VPOHDR03-GROUP VPOHDR03-GROUP ; 
    10 VPOHDR03-KEY VPOHDR03-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 TSEOXCC TSEOXCC ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 PC3BUYMO PC3BUYMO ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XSECD XSECD ; 
    10 PCFSEYR PCFSEYR ; 
    10 YPUCD YPUCD ; 
    10 PC3STADT PC3STADT ; 
    10 PC3ATTEN PC3ATTEN ; 
    10 PC3MAILD PC3MAILD ; 
    10 PC3ACKDT PC3ACKDT ; 
    10 PC3CRDT PC3CRDT ; 
    10 PC3ENTBY PC3ENTBY ; 
    10 PC3ORDBY PC3ORDBY ; 
    10 PC3PRTIN PC3PRTIN ; 
    10 PC3PRTDT PC3PRTDT ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 PC3COMP PC3COMP ; 
    10 PC3SHVIA PC3SHVIA ; 
    10 PC3FOBLC PC3FOBLC ; 
    10 PC3RCRFL PC3RCRFL ; 
    10 PC3REQNO PC3REQNO ; 
    10 PC3REQDP PC3REQDP ; 
    10 YOHCD YOHCD ; 
    10 PC3NISFL PC3NISFL ; 
    10 PC3NISDT PC3NISDT ; 
    10 PC3NISTM PC3NISTM ; 
    10 PC3CMPNT PC3CMPNT ; 
    10 PC3DMPRC PC3DMPRC ; 
    10 PC3DMQTY PC3DMQTY ; 
    10 PC3NLPRC PC3NLPRC ; 
    10 PC3NLQTY PC3NLQTY ; 
    10 PC3LCPCT PC3LCPCT ; 
    10 PC3LCNPC PC3LCNPC ; 
    10 PC3LCDSF PC3LCDSF ; 
    10 PC3LCDIN PC3LCDIN ; 
    10 PC3LASDT PC3LASDT ; 
    10 PC3LASTM PC3LASTM ; 
    10 PO-LOCR-PMT-IND PO-LOCR-PMT-IND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0LW04

//*** RECORD=PC0LW06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0LW06   (----> Mirrors VPOITM05 )
// 
//    This record is a mirror image of the item row
// order type warrents an item update.
//   It is used in the update and audit processes to maximize
// coding and D.B. resources.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PC0LW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0LW06

//*** RECORD=PC0LW07 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/05/88   MCHRIS   New record.
// 06/15/93   lsutto   add crcy-cd w/june 93 db2 chngs
// --------   ------   ---------------------------------------
// 
//    This records is a copy of the size record associated with
// the item that is updated due to a order type change.
// 
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// ***********************
Record PC0LW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0LW07

//*** RECORD=PC0LW08 ****
// **************** PRODUCTION ORDER ITEM  RECORD *************
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      PC0LM.PC0LM002
// 
//    RECORD NAME:      PC0LW08
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the data that was entered
//    the user at the start of this application.
// 
//       The desired saved data is loaded to this record
//    when a transfer to PC0E is requested and then
//    loaded to the first user area in the RCWREC.
// 
//      On the return from PC0E, the
//    user area is loaded to this record
//    and processed accordingly.
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER ITEM  RECORD *************
// ***********************
Record PC0LW08 type basicRecord
  5 PC0LWUSR PC0LWUSR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 FY1FCTSN FY1FCTSN ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XSECD XSECD ; 
    10 PC0LMSYR PC0LMSYR ; 
    10 PC3ORDBY PC3ORDBY ; 
    10 PC3SHVIA PC3SHVIA ; 
    10 * char(434) ; 
end // end PC0LW08

//*** RECORD=PC0LW09 ****
// **************** MAIN WORKING STORAGE FOR PC0L *************
// *
// *     THIS RECORD CONTAINS AN ARRAY OF PO ITEM FIELDS
// *     TO BE USED THROUGHOUT THE PC0L PROGRAM
// *
// *
// *     DATE         NAME           DESCRIPTION OF CHANGE
// *    --------     --------      ---------------------------
// *    01/23/91     kdenne        new record
// *
// ************************************************************
// ***********************
Record PC0LW09 type basicRecord
  10 PC0LWITA PC0LWITA [400] ; 
    15 PC6ITMNB PC6ITMNB ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWKEY XOWKEY ; 
      20 XWHCD XWHCD ; 
      20 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 PC2CUXID PC2CUXID ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 YSMXDV YSMXDV ; 
    15 PC6STAT PC6STAT ; 
    15 YMTCD YMTCD ; 
end // end PC0LW09

// Setup HHMMSS
DataItem PC0L-ZZHHMMSS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ack. date check
DataItem PC0LMADT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery mo
DataItem PC0LMDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Mail date check
DataItem PC0LMMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// centry
DataItem PC0LMPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ack. date check
DataItem PC0LMPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC0LMPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0LMPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Season year (map display)
DataItem PC0LMSYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format for order part char
DataItem PC0LW-FRMT-CUST-ORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order part char
DataItem PC0LW-FRMT-PART-NBR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple dest. flag
DataItem PC0LW-SO-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem PC0LW1FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po region
DataItem PC0LW3-PO-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Passing key for error
DataItem PC0LW3KY char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po region
DataItem PC0LW6-PO-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Passing key for error
DataItem PC0LW6KY char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po literal
DataItem PC0LWAC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number
DataItem PC0LWAC2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style literal
DataItem PC0LWAC3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PC0LWAC4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color literal
DataItem PC0LWAC5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem PC0LWAC6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// avlrec action
DataItem PC0LWAC7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ackn. centry
DataItem PC0LWACC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// av comment area
DataItem PC0LWACM char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem PC0LWACN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cc
DataItem PC0LWACY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ackn. yy/mm/dd
DataItem PC0LWADA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWADD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ACKNOWLEDGE date
DataItem PC0LWADT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0LWAMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Apparel buy yr
DataItem PC0LWAYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem PC0LWAYE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy
DataItem PC0LWAYN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Apparel buy yr
DataItem PC0LWAYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC0LWAYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po buy month
DataItem PC0LWBMF num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC buy month
DataItem PC0LWBYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current day
DataItem PC0LWCAT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0LWCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cancel confirm flag
DataItem PC0LWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current centry
DataItem PC0LWCCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0LWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy/mm/mm cha. poid date
DataItem PC0LWCDA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date
DataItem PC0LWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current month
DataItem PC0LWCMT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current plus 1
DataItem PC0LWCY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pc centry/year
DataItem PC0LWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current year
DataItem PC0LWCYT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Switching date
DataItem PC0LWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// centry
DataItem PC0LWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dom lc % in screen format
DataItem PC0LWDLC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// del mo
DataItem PC0LWDMC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC0LWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC0LWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry centry
DataItem PC0LWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entry yy/mm/dd
DataItem PC0LWEDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ENTRY date
DataItem PC0LWEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0LWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of file flag
DataItem PC0LWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0LWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FY_FCTY_CD
DataItem PC0LWFC3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Passing key for error
DataItem PC0LWFKJ char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Passing key for error
DataItem PC0LWFKY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// computation work field
DataItem PC0LWFLD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FUNCTION CODE
DataItem PC0LWFNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Go on flag
DataItem PC0LWGON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod code
DataItem PC0LWGP3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod cls
DataItem PC0LWGP6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc code
DataItem PC0LWGPJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC0LWGRP char(73)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HEADER ADD/CHG. SWITCH
DataItem PC0LWHAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User id code
DataItem PC0LWID1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User id rest of id
DataItem PC0LWID2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item number
DataItem PC0LWIN6 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR SWITCH
DataItem PC0LWINF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for item numbers
DataItem PC0LWINX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item number array
DataItem PC0LWITA char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp index
DataItem PC0LWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PC0LWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lc flag
DataItem PC0LWLCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dom/nil lc% reformated
DataItem PC0LWLCP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP NUMBER
DataItem PC0LWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mail centry
DataItem PC0LWMCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mail yy/mm/dd
DataItem PC0LWMDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAIL date
DataItem PC0LWMDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm/dd/yy switched date
DataItem PC0LWMDY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple dest. flag
DataItem PC0LWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mulitplier
DataItem PC0LWMLT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0LWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem PC0LWMPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0LWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nil lc % in screen format
DataItem PC0LWNLC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pc new month
DataItem PC0LWNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem PC0LWNSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC PO date
DataItem PC0LWODT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC centry/year
DataItem PC0LWOWY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print centry
DataItem PC0LWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print yy/mm/dd
DataItem PC0LWPDA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PRINT date
DataItem PC0LWPDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy mo
DataItem PC0LWPMC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC0LWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po number
DataItem PC0LWPN6 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po number
DataItem PC0LWPNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po number
DataItem PC0LWPNJ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date
DataItem PC0LWPO6 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date
DataItem PC0LWPOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC0LWPYC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0LWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mail centry
DataItem PC0LWSCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mail yy/mm/dd
DataItem PC0LWSDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0LWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// STATUS date
DataItem PC0LWSDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_SESN_CD
DataItem PC0LWSE3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_SESN_CD
DataItem PC0LWSE6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_SESN_CD
DataItem PC0LWSEF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC0LWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// computation work field
DataItem PC0LWSPO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map switch
DataItem PC0LWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REQUEST FOR DATA
DataItem PC0LWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0LWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0LWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// User id
DataItem PC0LWUID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item change flag
DataItem PC0LWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PC0LWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// computation work field
DataItem PC0LWVFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Area Day
DataItem PC0LWWAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Area for Current Date
DataItem PC0LWWDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Area Month
DataItem PC0LWWMT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work Area Year
DataItem PC0LWWYT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0LWYR1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

