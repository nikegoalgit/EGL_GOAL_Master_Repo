package pc0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PC0B ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//                P.O. TYPE INQUIRY/MAINTENANCE
// 
//    This program will allow the user to inquire/maintain
// add P.O. TYPE information.  What the user will be doing is
// accessing a browse screen by entering Option 11 from the
// P.O. Order Menu.  In doing so, the user has the ability to
// browse all the production types, currently on the system,
// for their General Product Class.
// 
//    From the browse screen, the program allows the user to
// inquire, change and add a number of P.O. Types.
// 
//    The user may inquire, change, or inactivate existing P.O.
// Type rows by placing an 'S' in the selection column field/
// fields and pressing an appropriate PF-Key. This action will
// place the user in the appropriate detailed screen, and the
// program will be ready for the desired process.  Certain
// fields will be protected and thus can not be changed,
// dependent on security and GPC code.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 05/01/89   SFORD    New Application
// 07/10/89   SFORD    Made various changes per user request.
// 09/17/90   lsutto   Allow GPC 07
// 11/12/97   nfield   Regen for Y2K compliance (XX0XS01)
// *********************
Program PC0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC0BW00 PC0BW00; // record
  PC0BW01 PC0BW01; // record
  PC0BW02 PC0BW02; // record
  PC4REC PC4REC; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PC0BM.PC0BM001,  // forms
      PC0BM.PC0BM002, 
      PC0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0BM001 initial;
    set PC0BM002 initial;
    set PC0BW00 empty;
    set PC0BW01 empty;
    set PC0BW02 empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    PC0BW00.PC0BWSWF = "Y"; /* ===>format map switch*/
    PC0BW00.PC0BWSWR = "Y"; /* ===>request for data switch*/
    PC0BW00.PC0BWSWM = "1"; /* ===>map switch*/
    PC0BW00.PC0BWERR = "N"; /* ===>contention error flag*/
    PC0BW00.PC0BWDTA = "Y"; /* ===>is there data per gpc code*/
    PC0BW00.PC0BWXIT = "N"; /* ===>exit application flag*/
    PCWREC.PCWMAP = 1;

    if (COMMAREA.XGPCD > " ")
      PC0BM001.XGPCD = COMMAREA.XGPCD;
    else
      PC0BM001.XGPCD = " ";
      COMMAREA.XGPCD = " ";
    end

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[1] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0BW00.PC0BWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[2] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0BW00.PC0BWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[3] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0BW00.PC0BWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ======= Next Senetence ===============>*/
      else
        if (COMMAREA.CAILVL[7] != "Y")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0BW00.PC0BWXIT = "Y";
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PC0BW00.PC0BWXIT = "Y";
    end

    if (PC0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PC0BM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/


      PC0BW01.XGPCD = PC0BM001.XGPCD;
      set PC0BM001 initial;
      set PC0BM001.XGPCD cursor, bold; /* Highlight*/
      PC0BM001.XGPCD = PC0BW01.XGPCD;

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

      PC0BW00.XXXPRCNM = "XPPC001"; /* Module identification*/
      set PC0BM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end

     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0B001;

     /* **                                                        ***/
     /* ****************** End of XPPC001 FLOW **********************/
    PC0B001: PC0B001();
    goto PC0B001;
  end // end main
end // end PC0B

// Main process to display a map
Function PC0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, exit application.*/
   /* 2) If specified, display the first map.*/
   /* 3) Otherwise, if specified, display the second map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWXIT == "Y") /* exit application flag*/

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
    set PC0BM001 initial;
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/
    set PC0BW01 empty; /* ==>reset map display record*/
    PC0BW01.XGPCD = COMMAREA.XGPCD;
    PC0BW00.PC0BWSWM = "1"; /* Map 1 was requested*/

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

  end

   /* ------------------------------------------------------------*/
    /* Process the maps*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWSWM == "1") /* Map 1 was requested*/

    PC0B100(); /* Display map 1*/

  else

    if (PC0BW00.PC0BWSWM == "2") /* ===> Map 2 was requested*/

      if (PC0BW00.PC0BWMAP == "C") /* ===> change function type mode*/
        PC0B200(); /* ===> Display map 2*/
      end

      if (PC0BW00.PC0BWMAP == "I") /* ===> inquiry function type mode*/
        PC0B400(); /* ===> Display map 2*/
      end

      if (PC0BW00.PC0BWMAP == "A") /* ===> add function type mode*/
        PC0B500(); /* ===> Display map 2*/
      end

    else



      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PC0B001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PC0BW00.PC0BWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PC0BW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PC0BW00.PC0BWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end


   /* **                                                        ***/
   /* ********************** End of PC0B001 ***********************/
end // end PC0B001

// =======> List map function
Function PC0B100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0B110(); /* Obtain the data to display*/

  PC0B120(); /* Format and display the map*/

  PC0B130(); /* Check attention identifier*/

  PC0B140(); /* Reset fields to normal intensity*/

  PC0B150(); /* Verify the entered data*/

  PC0B160(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of PC0B100 ***********************/
end // end PC0B100

// -->Obtain the data to display
Function PC0B110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PC0BW00.XXXTSLEN = 698; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PC0B111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PC0BW01.XGPCD = PC0BM001.XGPCD; /* ===>GPC code*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PC0B112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC0BW00.PC0BWSWC == "N") /* Until end of cursor*/

    PC0B113(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PC0BW00.PC0BWIXM >= 16) /* Page is full*/
      PC0B114(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWIXM > 1) /* Page was formatted*/
    PC0B114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0B115(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.TA5TSQIX == 0) /* No pages formatted*/


    PC0BW01.XGPCD = PC0BM001.XGPCD;
    set PC0BM001 initial;
    set PC0BM001.XGPCD cursor;
    PC0BM001.XGPCD = PC0BW01.XGPCD;
    if (PC0BM001.XGPCD in XGPTBL.XGPCD)
      PC0BM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

    PC0BW00.PC0BWDTA = "N"; /* ======>data per GPC Code exists?*/
    PC0BW00.XXXPRCNM = "PC0B110"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PC0BW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/


   /* **                                                        ***/
   /* ********************** End of PC0B110 ***********************/
end // end PC0B110

// purge any temporary storage
Function PC0B111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0BW01 empty; /* M001 display storage*/

  PC0BW00.PC0BWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0BW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0BW00.XXXPRCNM = "PC0B111"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0B111 ***********************/
end // end PC0B111

// Select set and open cursor
Function PC0B112()
   /* ------------------------------------------------------------*/
   /* Select the information needed for the map heading.*/
   /* ------------------------------------------------------------*/

   /* PC0BS01                        ; Select heading information*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWIXM = 1; /* Display line index*/
  PC0BW00.PC0BWSWC = "N"; /* End of cursor switch*/

  set PC4REC empty; /* ====> Clear CSP record area*/

  PC4REC.XGPCD = PC0BM001.XGPCD; /* ====>search key--> GPC*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S1", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0BW00.XXXPRCNM = "PC0B112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0BM001 initial; /* Clear screen before display*/

  end

  while (PC0BW00.PC0BWIXM <= 15)
    set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTPY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0B112 ***********************/
end // end PC0B112

// Fetch next row in the cursor
Function PC0B113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("N1", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PC0BS02(); /* Save in display storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      PC0BW00.PC0BWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0BW00.XXXPRCNM = "PC0B113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0B113 ***********************/
end // end PC0B113

// Add page to temporary storage
Function PC0B114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0BW01.XXXTSLEN = PC0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0BW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0BW01 empty; /* M001 display storage*/

    PC0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0BW00.PC0BWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0BW00.XXXPRCNM = "PC0B114"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0B114 ***********************/
end // end PC0B114

// Close selected set cursor
Function PC0B115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("C1", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0BW00.XXXPRCNM = "PC0B115"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0B115 ***********************/
end // end PC0B115

// -->Format and converse the map
Function PC0B120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0BW00.PC0BWSWF == "Y") /* Map must be formatted*/
      PC0B121(); /* Format the data on the map*/
      PC0B122(); /* Format the PF-keys on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0BM001.XXXPRCNM = PC0BW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0BM001 alarm; /* Indicate sound alarm*/

  end

  converse PC0BM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0BW00.XXXPRCNM = " "; /* Module identification*/
  PCWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = PC0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0BM001.CAITEM; /* Application data*/

  if (converseVar.eventKey is enter)
    PC0B123(); /* ========> process ? for pop-up window*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B120 ***********************/
end // end PC0B120

// Format the display data
Function PC0B121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PC0BM001 initial;

  PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0BW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PC0BW00.PC0BWSWU == "Y") /* Current page was changed*/

        PC0BS03(); /* Update temporary storage page*/

        PC0BW00.PC0BWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0BW00.XXXTSPAG > PC0BW00.TA5TSQIX) /* Desired greater highest*/
        PC0BW00.XXXTSPAG = PC0BW00.TA5TSQIX; /* Default to highest*/
      end

      PC0BS04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PC0BM001.XXXLITPG skip; /* "PAGE" literal*/
    set PC0BM001.XXXTSPAG skip; /* "Current PAGE" value*/
    set PC0BM001.XXXLITOF skip; /* "OF" literal*/
    set PC0BM001.TA5TSQIX skip; /* "Highest PAGE" value*/
    PC0BM001.XXXTSPAG = PC0BW00.XXXTSPAG; /* Current page*/
    PC0BM001.TA5TSQIX = PC0BW00.TA5TSQIX; /* Highest page*/

  end


   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 25; /* ====> please select a line message*/
  PC0BW00.XXXPRCNM = "PC0B121";

  PC0BM001.XGPCD = PC0BW01.XGPCD; /* GPC code*/
  if (PC0BM001.XGPCD in XGPTBL.XGPCD)
    PC0BM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  if (PC0BW01.XGPCD == "01"
   || PC0BW01.XGPCD == "02"
   || PC0BW01.XGPCD == "07")
    set PC0BM001.PC0BMDL1 skip, invisible; /* ==>DESTINATION LITERAL*/
    set PC0BM001.PC0BMDL2 skip, invisible; /* ==>method literal*/
    set PC0BM001.PC0BMCL1 skip, invisible; /* ==>customer literal*/
    set PC0BM001.PC0BMCL2 skip, invisible; /* ==>req? literal*/
    set PC0BM001.PC0BMSL1 skip, invisible; /* ==>spec literal*/
    set PC0BM001.PC0BMSL2 skip, invisible; /* ==>req? literal*/
  end

  if (PC0BW01.XGPCD == "01"
   || PC0BW01.XGPCD == "07")
    set PC0BM001.PC0BMLL1 skip, invisible; /* ==>L/C  literal*/
    set PC0BM001.PC0BMLL2 skip, invisible; /* ==>req? literal*/
  end

  PC0BW00.PC0BWIXM = 1; /* Initialize line index*/

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0BW00.PC0BWIXM <= 15 /* Until screen is full*/
   && PC0BW01.XGPCD[PC0BWIXM] > " ") /* or end of data*/

    PC0BM001.PC0BMSEL[PC0BWIXM] = PC0BW01.PC0BWSEL[PC0BWIXM];
    PC0BM001.PC4ORTYP[PC0BWIXM] = PC0BW01.PC4ORTYP[PC0BWIXM];
    PC0BM001.PC4DESC[PC0BWIXM] = PC0BW01.PC4DESC[PC0BWIXM];
    PC0BM001.XQACD[PC0BWIXM] = PC0BW01.XQACD[PC0BWIXM];
    PC0BM001.XWHCD[PC0BWIXM] = PC0BW01.XWHCD[PC0BWIXM];

    if (PC0BW01.XGPCD == "03"
     || PC0BW01.XGPCD == "02")
      PC0BM001.PC4LCSFL[PC0BWIXM] = PC0BW01.PC4LCSFL[PC0BWIXM];
    end

    if (PC0BW01.XGPCD == "03")
      PC0BM001.XDSCD[PC0BWIXM] = PC0BW01.XDSCD[PC0BWIXM];
      PC0BM001.PC4CUSFL[PC0BWIXM] = PC0BW01.PC4CUSFL[PC0BWIXM];
      PC0BM001.PC4SPCFL[PC0BWIXM] = PC0BW01.PC4SPCFL[PC0BWIXM];
    end

    PC0BM001.XXXSTAT[PC0BWIXM] = PC0BW01.XXXSTAT[PC0BWIXM];

    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map selection fields askip*/
   /* ------------------------------------------------------------*/

  while (PC0BW00.PC0BWIXM <= 15) /* Until screen is full*/

    set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;

    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1; /* ===>Increment line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B121 ***********************/
end // end PC0B121

// Check authorization & format
Function PC0B122()
   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/


  if (PCWREC.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "N") /* =======> not Authorized to change*/
      set PC0BM001.PC0BMCHG skip, invisible; /* ====> chg literal*/
      set PC0BM001.PC0BMADD skip, invisible; /* ====> add literal*/
    end
  end

  if (PCWREC.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "N") /* =======> not Authorized to change*/
      set PC0BM001.PC0BMCHG skip, invisible; /* ====> chg literal*/
      set PC0BM001.PC0BMADD skip, invisible; /* ====> add literal*/
    end
  end

  if (PCWREC.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "N") /* =======> not Authorized to change*/
      set PC0BM001.PC0BMCHG skip, invisible; /* ====> chg literal*/
      set PC0BM001.PC0BMADD skip, invisible; /* ====> add literal*/
    end
  end

  if (PCWREC.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "N") /* =======> not Authorized to change*/
      set PC0BM001.PC0BMCHG skip, invisible; /* ====> chg literal*/
      set PC0BM001.PC0BMADD skip, invisible; /* ====> add literal*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0B122 ***********************/
end // end PC0B122

// process ? for pop-up windows
Function PC0B123()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0BM001.XGPCD == "?") /* if any ? entered*/

    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "    GPC TABLE     "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* =======> perform GPC code window*/
    end




     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0BM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
       /* PERFORM PC0B111             ;==========>purge temp storage*/
    else
      PC0BM001.XGPCD = PC0BW01.XGPCD; /* restore field*/
    end

    converseLib.clearScreen();
     /* ===>restore the map*/

    /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
    /* ---------------------------------------------------------*/

    if (PC0BM001.XGPCD == "01"
     && COMMAREA.CACLVL[1] != "Y")
      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      PC0BW00.XXXPRCNM = "PC0B123";
      PC0B124(); /* ===> Format map for display*/
      return;
    end

    if (PC0BM001.XGPCD == "07"
     && COMMAREA.CACLVL[7] != "Y")
      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      PC0BW00.XXXPRCNM = "PC0B123";
      PC0B124(); /* ===> Format map for display*/
      return;
    end

    if (PC0BM001.XGPCD == "02"
     && COMMAREA.CACLVL[2] != "Y")
      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      PC0BW00.XXXPRCNM = "PC0B123";
      PC0B124(); /* ===> Format map for display*/
      return;
    end

    if (PC0BM001.XGPCD == "03"
     && COMMAREA.CACLVL[3] != "Y")
      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      PC0BW00.XXXPRCNM = "PC0B123";
      PC0B124(); /* ===> Format map for display*/
      return;
    end

    /* ------------------------------------------------------------*/
     /* Verify the General Product Class code.*/
    /* ------------------------------------------------------------*/

    if (PC0BM001.XGPCD == "01"
     || PC0BM001.XGPCD == "02"
     || PC0BM001.XGPCD == "03"
     || PC0BM001.XGPCD == "07")

      PC0BW00.PC0BWSWR = "Y";
      PC0BW00.PC0BWSWF = "Y";

    else

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table and status is active.*/
      /* ------------------------------------------------------------*/

      if (PC0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/

      else
        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        converseLib.validationFailed(28); /* Indicate missing or invalid*/

      end

      PC0BW00.PC0BWSWR = "N";
      PC0BW00.PC0BWSWF = "N";
      PC0BW00.XXXPRCNM = "PC0B123"; /* Module identification*/

      PC0B124(); /* ===> Format map for display*/

    end


     /* EZEFLO;*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0B123 ***********************/
end // end PC0B123

// set up map for display
Function PC0B124()
   /* ------------------------------------------------------------*/
   /* Invalid GPC Process*/
    /* 1. purge any temporary storage*/
    /* 2. indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  PC0B111(); /* ====>purge any temporary storage*/

  COMMAREA.XGPCD = PC0BM001.XGPCD;
  set PC0BM001 initial;
  set PC0BM001.XGPCD cursor, bold; /* Highlight*/
  PC0BM001.XGPCD = COMMAREA.XGPCD;

  PC0BW00.PC0BWIXM = 1;
  while (PC0BW00.PC0BWIXM <= 15)
    set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
  end


   /* **                                                        ***/
   /* ********************** End of PC0B124 ***********************/
end // end PC0B124

// -->Check attention identifier
Function PC0B130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0BW00.PC0BWSWR == "Y") /* Request for data*/
      set PC0BW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
    
    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PC0BW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0B111(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/

      set PC0BM001 initial;
      set PC0BM001.CATOAP cursor, bold; /* Highlight*/

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

      PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
      PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    else

      PC0BW00.XXXPRCNM = "PC0B130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0BM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* TO application*/
    end



    PC0B111(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    set PC0BM001 initial;
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/


    exit stack; /* Exit to display map*/

  end



   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PC0BW00.XXXPRCNM = "PC0B130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf13 /* and PF13 was pressed*/
   || converseVar.eventKey is pf14) /* and PF14 was  pressed*/

    PC0B131(); /* ===> Check security*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0B130 ***********************/
end // end PC0B130

// Check PF Key security
Function PC0B131()
   /* ------------------------------------------------------------*/
   /* verify valid PF key pressed, if the user is authorized*/
   /* to perform various functions continue else error.*/
   /* ------------------------------------------------------------*/


  if (PCWREC.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "N") /* =======> not Authorized to change*/
      PC0BW00.XXXPRCNM = "PC0B131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
      exit stack;
    end
  end

  if (PCWREC.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "N") /* =======> not Authorized to change*/
      PC0BW00.XXXPRCNM = "PC0B131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
      exit stack;
    end
  end

  if (PCWREC.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "N") /* =======> not Authorized to change*/
      PC0BW00.XXXPRCNM = "PC0B131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
    end
  end

  if (PCWREC.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "N") /* =======> not Authorized to change*/
      PC0BW00.XXXPRCNM = "PC0B131"; /* Module identification*/
      converseLib.validationFailed(4); /* ===>invalid PF Key*/
    end
  end



   /* **                                                        ***/
   /* ********************** End of PC0B131 ***********************/
end // end PC0B131

// -->Reset highlighted fields
Function PC0B140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0BM001.XGPCD initialAttributes; /* GPC code*/

  PC0BW00.PC0BWIXM = 1; /* Initialize line index*/

  while (PC0BW00.PC0BWIXM <= 15 /* Until end of lines*/
   && PC0BW01.XGPCD[PC0BWIXM] > " ") /* or end of display*/

    set PC0BM001.PC0BMSEL[PC0BWIXM] initialAttributes; /* RESET SELECT FLAG*/

    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1; /* Increment line index*/

  end

  set PC0BM001.CATOAP initialAttributes; /* TO application*/
  set PC0BM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  PC0B122(); /* ===> reset map security fields*/

   /* **                                                        ***/
   /* ********************** End of PC0B140 ***********************/
end // end PC0B140

// -->Verify the entered data
Function PC0B150()
   /* ------------------------------------------------------------*/
   /* if the GPC code has changed*/
    /* verify the entered data*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.XGPCD != PC0BW01.XGPCD) /* GPC changed*/

    if (converseVar.eventKey is enter)

      if ("S" in PC0BM001.PC0BMSEL) /* =====> Line was selected*/
        converseLib.validationFailed(174); /* Selections not allowed on GPC Change*/
        PC0BW00.XXXPRCNM = "PC0B150"; /* Module identification*/
        set PC0BM001.XGPCD cursor, bold; /* Highlight*/
        exit stack;
      end

    else /* ===>not enter*/

      if (converseVar.eventKey is pf13)
        converseLib.validationFailed(108); /* Modifications not allowed on add*/
      else
        if (converseVar.eventKey is pf14)
          converseLib.validationFailed(175); /* PF Key not valid on GPC Code change*/
        else
          converseLib.validationFailed(171); /* Modifications not allowed on scroll*/
        end
      end

      PC0BW00.XXXPRCNM = "PC0B150"; /* Module identification*/
      set PC0BM001.XGPCD cursor, bold; /* Highlight*/
      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf13) /* or add function   request*/

    PC0B151(); /* Verify scroll/add request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (PC0BW00.TA5TSQIX > 0) /* Page was formatted*/

      PC0BW00.PC0BWIXM = 15; /* Initialize line index*/

      while (PC0BW00.PC0BWIXM > 0) /* Until end of lines*/

        PC0B152(); /* Verify data in the line*/

        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM - 1; /* Decrement line number*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Highlight any application data that was entered.*/
    /* ------------------------------------------------------------*/

    if (PC0BM001.CAITEM > " ") /* Application data was entered*/

      PC0BW00.XXXPRCNM = "PC0B150"; /* Module identification*/
      set PC0BM001.CAITEM cursor, bold; /* Highlight*/
      converseLib.validationFailed(7); /* Enter only with FAST PATH*/
      if (PC0BW00.PC0BWDTA == "N") /* ===> ie.)--> no data exists for GPC code*/
        set PC0BM001.PC0BMSEL[01] skip, invisible;
                                   /* ===>reset selection field*/
      end
      exit stack;

    end


    /* ------------------------------------------------------------*/
     /* Verify the General Product Class code.*/
    /* ------------------------------------------------------------*/


    if (PC0BM001.XGPCD == PC0BW01.XGPCD /* GPC not changed*/
     && PC0BW00.PC0BWDTA == "N"         /* ===> ie.)--> no data exists for GPC*/
     /* code*/
     && converseVar.eventKey not pf13)  /* ===> add not requested*/

      set PC0BM001.XGPCD cursor;
      set PC0BM001.PC0BMSEL[01] skip, invisible; /* ===>reset selection field*/
      PC0BW00.XXXPRCNM = "PC0B150"; /* Module identification*/
      converseLib.validationFailed(18);

    else

      PC0B153(); /* Verify GPC Code and security*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.CAITEM > " ") /* Application data was entered*/

    PC0BW00.XXXPRCNM = "PC0B150"; /* Module identification*/
    set PC0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B150 ***********************/
end // end PC0B150

// Verify scroll request
Function PC0B151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0BW00.XXXTSPAG < 2)       /* and no previous pages*/

    if (PC0BM001.XGPCD in XGPTBL.XGPCD) /* ===>GPC Code exist*/
      /* ========== Next Sentence =========>*/
    else
      set PC0BM001.PC0BMSEL[1] skip, invisible;
    end

    if (PC0BW00.PC0BWDTA == "N") /* ===>no data exist for gpc code*/
      set PC0BM001.PC0BMSEL[1] skip, invisible;
    end

    PC0BW00.XXXPRCNM = "PC0B151"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PC0BM001.XGPCD cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PC0BW00.XXXTSPAG >= PC0BW00.TA5TSQIX) /* and no more pages*/

    if (PC0BM001.XGPCD in XGPTBL.XGPCD) /* ===>GPC Code exist*/
      /* ========== Next Sentence =========>*/
    else
      set PC0BM001.PC0BMSEL[1] skip, invisible;
    end

    if (PC0BW00.PC0BWDTA == "N") /* ===>no data exist for gpc code*/
      set PC0BM001.PC0BMSEL[1] skip, invisible;
    end

    PC0BW00.XXXPRCNM = "PC0B151"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    set PC0BM001.XGPCD cursor;

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWIXM = 15; /* Initialize line index*/

  while (PC0BW00.PC0BWIXM > 0) /* Until end of lines*/

    if (PC0BM001.PC0BMSEL[PC0BWIXM] != PC0BW01.PC0BWSEL[PC0BWIXM])

      PC0BW00.XXXPRCNM = "PC0B151"; /* Module identification*/
      set PC0BM001.PC0BMSEL[PC0BWIXM] cursor, bold; /* Highlight*/
      if (converseVar.eventKey is pf13) /* add function request*/
        converseLib.validationFailed(108); /* ==> Modifications not allowed*/
      else
        converseLib.validationFailed(14); /* ==> selections not allowed with*/
                                   /* scroll*/

      end

    end

    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM - 1; /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of PC0B151 ***********************/
end // end PC0B151

// Verify data in the line
Function PC0B152()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.PC0BMSEL[PC0BWIXM] != PC0BW01.PC0BWSEL[PC0BWIXM]
   && PC0BM001.PC0BMSEL[PC0BWIXM] != "S") /* and is not a "S"*/

    if (PC0BM001.PC0BMSEL[PC0BWIXM] == " " /* and is a " "*/
     && PC0BW01.PC0BWSEL[PC0BWIXM] == "V") /* and display rec field = "V"*/
      PC0BM001.PC0BMSEL[PC0BWIXM] = "V"; /* reset map selection field*/
      return;
    end

    PC0BW00.XXXPRCNM = "PC0B152"; /* Module identification*/
    set PC0BM001.PC0BMSEL[PC0BWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/

  end

   /* **                                                        ***/
   /* ********************** End Of PC0B152 ***********************/
end // end PC0B152

// Verify GPC Code and security
Function PC0B153()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PC0BM001.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] != "Y")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0BW00.XXXPRCNM = "PC0B153";
        PC0B154(); /* ===> purge T.S. and format map for display*/
        return;
      end
    end
  end

  if (PC0BM001.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] != "Y")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0BW00.XXXPRCNM = "PC0B153";
        PC0B154(); /* ===> purge T.S. and format map for display*/
        return;
      end
    end
  end

  if (PC0BM001.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] != "Y")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0BW00.XXXPRCNM = "PC0B153";
        PC0B154(); /* ===> purge T.S. and format map for display*/
        return;
      end
    end
  end

  if (PC0BM001.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] != "Y")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0BW00.XXXPRCNM = "PC0B153";
        PC0B154(); /* ===> purge T.S. and format map for display*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.XGPCD == "01"
   || PC0BM001.XGPCD == "02"
   || PC0BM001.XGPCD == "03"
   || PC0BM001.XGPCD == "07")

    if (PC0BM001.XGPCD in XGPTBL.XGPCD)
      PC0BM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
    PC0BW00.XXXPRCNM = "PC0B153"; /* Module identification*/

  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end

    PC0BW00.XXXPRCNM = "PC0B153"; /* Module identification*/
    PC0B154(); /* ===> purge T.S. and format map for display*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0B153 ***********************/
end // end PC0B153

// invalid GPC "Reset" process
Function PC0B154()
   /* ------------------------------------------------------------*/
   /* Invalid GPC Process*/
    /* 1. purge any temporary storage*/
    /* 2. indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  PC0B111(); /* ====>purge any temporary storage*/

  COMMAREA.XGPCD = PC0BM001.XGPCD;
  set PC0BM001 initial;
  set PC0BM001.XGPCD cursor, bold; /* Highlight*/
  PC0BM001.XGPCD = COMMAREA.XGPCD;

  PC0BW00.PC0BWIXM = 1;
  while (PC0BW00.PC0BWIXM <= 15)
    set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
  end


   /* **                                                        ***/
   /* ********************** End of PC0B154 ***********************/
end // end PC0B154

// -->Process valid input request
Function PC0B160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    set PC0BM001 initial;
    PC0BW00.XXXTSPAG = PC0BW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    set PC0BM001 initial;
    PC0BW00.XXXTSPAG = PC0BW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (PC0BM001.XGPCD != PC0BW01.XGPCD) /* GPC changed*/

    COMMAREA.XGPCD = PC0BM001.XGPCD; /* GPC code*/
    PC0BW00.PC0BWDTA = "Y"; /* ===> reset data exist for GPC code*/

    /* ------------------------------------------------------------*/
     /* Format the search information in the map input/output area.*/
    /* ------------------------------------------------------------*/

    set PC0BM001 initial;
    set PC0BM001.XGPCD cursor; /* Highlight*/

    PC0BM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    /* ------------------------------------------------------------*/
     /* Purge any existing pages from the temporary storage queue.*/
    /* ------------------------------------------------------------*/

    PC0B111(); /* Purge any temporary storage*/

    /* ------------------------------------------------------------*/
     /* Default request for data switch and COMMAREA information.*/
    /* ------------------------------------------------------------*/

    PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/
    PC0BW01.XGPCD = COMMAREA.XGPCD; /* GPC code*/


    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields, and clear the map input/output area*/
   /* and save type of function flag.*/
   /* ------------------------------------------------------------*/

  PC0B161();

   /* **                                                        ***/
   /* ********************** End Of PC0B160 ***********************/
end // end PC0B160

// Process selected input request
Function PC0B161()

   /* ------------------------------------------------------------*/
             /* Set the add function request flag*/
              /* and skip save select fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* add mode requested*/


    /* ------------------------------------------------------------*/
     /* Verify the General Product Class code.*/
    /* ------------------------------------------------------------*/


    if (PC0BM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      /* ======= NEXT SENTENCE =================>*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/


      PC0BW01.XGPCD = PC0BM001.XGPCD;
      set PC0BM001 initial;
      set PC0BM001.XGPCD cursor, bold; /* Highlight*/
      PC0BM001.XGPCD = PC0BW01.XGPCD;

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

      PC0BW00.XXXPRCNM = "PC0B161"; /* Module identification*/
      set PC0BM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(28); /* Indicate missing or invalid*/
      return;

    end

    PC0BW00.PC0BWSWM = "2"; /* ==>Map to be displayed switch*/
    PC0BW00.PC0BWMAP = "A"; /* ==>set the add function flag*/
    PC0BW00.PC0BWDTA = "Y"; /* ==>reset the data per GPC code*/
    PC0BW02.XGPCD = PC0BW01.XGPCD; /* ==>set GPC code*/
    return;
  end


   /* ------------------------------------------------------------*/
             /* Set the inquire function request flag*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* inquire mode requested*/

    PC0BW00.PC0BWMAP = "I"; /* ==>set the inquire function flag*/

  end

   /* ------------------------------------------------------------*/
             /* Set the change function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* change mode requested*/

    PC0BW00.PC0BWMAP = "C"; /* ==>set the change function flag*/
    PC0BW00.PC0BWMOD = "N"; /* ==>initialize modified data switch*/

  end
   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWIXM = 1; /* Initialize line index*/

  while (PC0BW00.PC0BWIXM <= 15) /* Until end of lines*/

    if (PC0BM001.PC0BMSEL[PC0BWIXM] != PC0BW01.PC0BWSEL[PC0BWIXM])

      PC0BW01.PC0BWSEL[PC0BWIXM] = PC0BM001.PC0BMSEL[PC0BWIXM];
      PC0BW00.PC0BWSWU = "Y"; /* Storage update switch*/

    end

    PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in PC0BW01.PC0BWSEL) /* =====> Line was selected*/

    PC0BW00.PC0BWIXM = sysVar.arrayIndex; /* map index*/
    PC0BW00.PC0BWIXS = sysVar.arrayIndex; /* save map index*/

    PC0BM002.XGPCD = PC0BW01.XGPCD[PC0BWIXM];
    PC0BM002.PC4ORTYP = PC0BW01.PC4ORTYP[PC0BWIXM];

    PC0BW00.PC0BWSWM = "2"; /* ==>Map to be displayed switch*/
    PC0BW00.PC0BWSWR = "Y"; /* ==>Request for data switch*/
  else
    PC0BW00.XXXPRCNM = "PC0B161";
    set PC0BM001.PC0BMSEL[1] cursor, bold; /* ====>highlight*/
    converseLib.validationFailed(25);
    return; /* Return to previous process*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B161 ***********************/
end // end PC0B161

// =======> Change function type
Function PC0B200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0B210(); /* Obtain the data to display*/

  PC0B220(); /* Format and display the map*/

  PC0B230(); /* Check attention identifier*/

  PC0B240(); /* Reset fields to normal intensity*/

  PC0B250(); /* Verify the entered data*/

  PC0B260(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0B200 ***********************/
end // end PC0B200

// -->Obtain the data to display
Function PC0B210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in the map display storage area.*/
   /* ------------------------------------------------------------*/

  set PC0BW02 empty; /* M002 display storage*/

  PC0BW02.XGPCD = PC0BM002.XGPCD; /* ===> GPC*/
  PC0BW02.PC4ORTYP = PC0BM002.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  PC0B211(); /* ==========> Obtain the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PC0B212(); /* ==========> Save in display storage*/

  if (PC0BW00.PC0BWERR == "Y")
    PC0B213(); /* ==========> Save data in W01 map  T.S*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0B210 ***********************/
end // end PC0B210

// Select the table row
Function PC0B211()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0BW02.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0BW02.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0BM001 initial;
      set PC0BM001.XGPCD cursor;
      PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/
      PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BM001.XGPCD = COMMAREA.XGPCD;

      PC0BW00.XXXPRCNM = "PC0B211"; /* Module identification*/
      PCWREC.XXXMSGNO = 26; /* Indicate updated by another*/

      exit stack; /* =============> Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

  PC0BW00.XXXPRCNM = "PC0B211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* ================> Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0B211 ***********************/
end // end PC0B211

// Save data in display rec W02
Function PC0B212()
   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (PC4REC.XGPCD in XGPTBL.XGPCD)
    PC0BW02.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

   /* MOVE PC4REC.PC4ORTYP TO PC0BW02.PC4ORTYP; p.o. type*/
  PC0BW02.PC4DESC = PC4REC.PC4DESC; /* p.o. type desc*/
  PC0BW02.PC4SDESC = PC4REC.PC4SDESC; /* p.o. type short desc*/
  PC0BW02.PC4ABRV = PC4REC.PC4ABRV; /* p.o. type short desc*/

  PC0BW02.XQACD = PC4REC.XQACD; /* Quality code*/
  if (PC4REC.XQACD in XQATBL.XQACD)
    PC0BW02.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
  end

  PC0BW02.XWHCD = PC4REC.XWHCD; /* Warehouse code*/
  if (PC4REC.XWHCD in XWHTBL.XWHCD)
    PC0BW02.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  end

  PC0BW02.XDSCD = PC4REC.XDSCD; /* Destination code*/
  if (PC4REC.XDSCD in XDSTBL.XDSCD)
    PC0BW02.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex];
  end

  PC0BW02.PC4CUSFL = PC4REC.PC4CUSFL; /* Customer req. flag*/
  PC0BW02.PC4SPCFL = PC4REC.PC4SPCFL; /* Spec. req. flag*/
  PC0BW02.PC4LCSFL = PC4REC.PC4LCSFL; /* L/C flag*/
  PC0BW02.XXXSTAT = PC4REC.XXXSTAT; /* row status code*/
  if (PC4REC.XXXSTAT == "A")
    PC0BW02.PC0BWSTA = "ACTIVE"; /* status literal*/
  else
    PC0BW02.PC0BWSTA = "INACTIVE"; /* status literal*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B212 ***********************/
end // end PC0B212

// Save data in display rec W01
Function PC0B213()
   /* ------------------------------------------------------------*/
   /* Save the data in list map storage*/
   /* ------------------------------------------------------------*/


  PC0BW01.PC4DESC[PC0BWIXM] = PC4REC.PC4DESC; /* p.o. type desc*/

  PC0BW01.XQACD[PC0BWIXM] = PC4REC.XQACD; /* Quality code*/

  PC0BW01.XWHCD[PC0BWIXM] = PC4REC.XWHCD; /* Warehouse code*/

  PC0BW01.XDSCD[PC0BWIXM] = PC4REC.XDSCD; /* Destination code*/

  PC0BW01.PC4CUSFL[PC0BWIXM] = PC4REC.PC4CUSFL; /* Customer req. flag*/
  PC0BW01.PC4SPCFL[PC0BWIXM] = PC4REC.PC4SPCFL; /* Spec. req. flag*/
  PC0BW01.PC4LCSFL[PC0BWIXM] = PC4REC.PC4LCSFL; /* L/C flag*/
  PC0BW01.XXXSTAT[PC0BWIXM] = PC4REC.XXXSTAT; /* row status code*/

   /* **                                                        ***/
   /* ********************** End of PC0B213 ***********************/
end // end PC0B213

// -->Format and converse the map
Function PC0B220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0BW00.PC0BWSWF == "Y") /* Map must be formatted*/
      PC0B221(); /* ========> Format the data on the map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to change, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PC0B222(); /* =========> Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0BM002.XXXPRCNM = PC0BW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0BM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0BM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0BW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0B223(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0BM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  PC0BW01.PC0BWSEL[PC0BWIXM] = "V"; /* Select indicator*/

   /* **                                                        ***/
   /* ********************** End of PC0B220 ***********************/
end // end PC0B220

// Format the display data
Function PC0B221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PC0BM002 initial; /* M002 input/output area*/

  PC0BM002.PC0BMTYP = "CHANGE"; /* map type literal*/
  PCWREC.XXXMSGNO = 87; /* map type instruction msg*/

  PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XGPCD = PC0BW02.XGPCD; /* GPC code*/
  PC0BM002.XGPDESC = PC0BW02.XGPDESC; /* gpc description*/

  set PC0BM002.PC4ORTYP skip; /* p.o. type*/
  PC0BM002.PC4ORTYP = PC0BW02.PC4ORTYP; /* p.o. type*/
  PC0BM002.PC4DESC = PC0BW02.PC4DESC; /* p.o. type desc*/
  PC0BM002.PC4SDESC = PC0BW02.PC4SDESC; /* p.o. type short desc*/
  PC0BM002.PC4ABRV = PC0BW02.PC4ABRV; /* p.o. type abreviated desc*/

  PC0BM002.XQACD = PC0BW02.XQACD; /* quality code*/
  PC0BM002.XQADESC = PC0BW02.XQADESC; /* quality description*/

  PC0BM002.XWHCD = PC0BW02.XWHCD; /* warehouse code*/
  PC0BM002.XWHNM = PC0BW02.XWHNM; /* warehouse name*/

  if (PC0BW02.XGPCD == "03")

    PC0BM002.XDSCD = PC0BW02.XDSCD; /* distribution method code*/
    PC0BM002.XDSDESC = PC0BW02.XDSDESC; /* distribution method desc*/
    PC0BM002.PC4CUSFL = PC0BW02.PC4CUSFL; /* customer req. flag*/
    PC0BM002.PC4SPCFL = PC0BW02.PC4SPCFL; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "03")

    PC0BM002.PC4LCSFL = PC0BW02.PC4LCSFL; /* l/c flag*/

  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "07")

    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSCD skip, invisible; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
  end

  PC0BM002.XXXSTAT = PC0BW02.XXXSTAT; /* row status flag*/
  PC0BM002.PC0BMSTA = PC0BW02.PC0BWSTA; /* row status literal*/

   /* ------------------------------------------------------------*/
   /* If the status is inactive protect all fields except status.*/
   /* ------------------------------------------------------------*/

  if (PC0BW02.XXXSTAT == "I")
    set PC0BM002.XXXSTAT cursor;
    set PC0BM002.PC4DESC skip; /* p.o. type desc*/
    set PC0BM002.PC4SDESC skip; /* p.o. type short desc*/
    set PC0BM002.PC4ABRV skip; /* p.o. type abreviated desc*/
    set PC0BM002.XQACD skip; /* quality code*/
    set PC0BM002.XWHCD skip; /* warehouse code*/

    if (PC0BW02.XGPCD == "03")
      set PC0BM002.XDSCD skip; /* distribution code*/
      set PC0BM002.PC4CUSFL skip; /* customer req. flag*/
      set PC0BM002.PC4SPCFL skip; /* spec req. flag*/
    end

    if (PC0BW02.XGPCD == "03"
     || PC0BW02.XGPCD == "02")
      set PC0BM002.PC4LCSFL skip; /* l/c flag*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0B221 ***********************/
end // end PC0B221

// Check authorization & format
Function PC0B222()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && PC0BW00.PC0BWMAP == "C") /* map function type flag*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to autoskip.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(29); /* ===>not authorized message*/

  set PC0BM002.CATOAP cursor;
  set PC0BM002.PC4DESC skip; /* p.o. type desc*/
  set PC0BM002.PC4SDESC skip; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV skip; /* p.o. type abreviated desc*/
  set PC0BM002.XQACD skip; /* quality code*/
  set PC0BM002.XWHCD skip; /* warehouse code*/
  set PC0BM002.XXXSTAT skip; /* status code*/

  if (PC0BW02.XGPCD == "03")
    set PC0BM002.XDSCD skip; /* distribution code*/
    set PC0BM002.PC4CUSFL skip; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip; /* spec req. flag*/
  end

  if (PC0BW02.XGPCD == "03"
   || PC0BW02.XGPCD == "02")
    set PC0BM002.PC4LCSFL skip; /* l/c flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B222 ***********************/
end // end PC0B222

// Check for ? inquiry by user
Function PC0B223()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0BM002.XQACD == "?" /* if any ? entered*/
   || PC0BM002.XWHCD == "?" 
   || PC0BM002.XDSCD == "?")


    if (PC0BM002.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
        PC0BM002.XQADESC = XQATBL.XQADESC[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XQACD = PC0BW02.XQACD; /* clear fields*/
        if (PC0BM002.XQACD in XQATBL.XQACD)
          PC0BM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
        end
      end
    end



    if (PC0BM002.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        PC0BM002.XWHNM = XWHTBL.XWHNM[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XWHCD = PC0BW02.XWHCD; /* clear fields*/
        if (PC0BM002.XWHCD in XWHTBL.XWHCD)
          PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
        end
      end
    end


    if (PC0BM002.XDSCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIRECT SHIP TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDS01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the direct ship**/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* move code*/
        PC0BM002.XDSDESC = XDSTBL.XDSDESC[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XDSCD = PC0BW02.XDSCD; /* clear fields*/
        if (PC0BM002.XDSCD in XDSTBL.XDSCD)
          PC0BM002.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex];
        end
      end
    end


    converseLib.clearScreen();
     /* restore the original map*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0B223 ***********************/
end // end PC0B223

// -->Check attention identifier
Function PC0B230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0BW00.PC0BWSWR == "Y") /* Request for data*/
      set PC0BW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* M002 display storage*/
    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0B111(); /* Purge any temporary storage*/

      XSPCS01(); /* Exit to another application*/

      set PC0BM001.CATOAP cursor, bold; /* Highlight*/

      PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

      set PC0BM001 initial;
      set PC0BM001.CATOAP cursor, bold; /* Highlight*/

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

    else

      PC0BW00.XXXPRCNM = "PC0B230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/


    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0BM002"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

      if (PC0BW00.PC0BWMOD == "Y")
        PC0BW00.PC0BWSWU = "Y"; /* update temp storage switch*/
      end

      if (PC0BW00.PC0BWERR == "Y") /* ===> error occured*/
        PC0BW00.PC0BWSWU = "Y";
                                   /* ====>update temp storage switch*/
        PC0BW00.PC0BWERR = "N"; /* ====>error switch*/
      end

      PC0B231(); /* ===>reset any changes prior to return*/
                                   /* to list map*/
      set PC0BM001.PC0BMSEL[PC0BWIXM] cursor;
      while ("S" in PC0BW01.PC0BWSEL)
                                   /* =======> removes remaining 'S's*/
        PC0BW01.PC0BWSEL[sysVar.arrayIndex] = " ";
      end

      exit stack; /* Exit to display map*/

    end


    PC0B111(); /* Purge any temporary storage*/


    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    set PC0BM001 initial;
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

    exit stack; /* =================> Exit to display*/
                                   /* map*/


  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    PC0BW00.XXXPRCNM = "PC0B230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B230 ***********************/
end // end PC0B230

// reset T.S map1 display record
Function PC0B231()
   /* ------------------------------------------------------------*/
   /* reset the data in display storage on return to list map*/
   /* ------------------------------------------------------------*/


  PC0BW01.PC4DESC[PC0BWIXM] = PC4REC.PC4DESC; /* P.O. description*/

  PC0BW01.XQACD[PC0BWIXM] = PC4REC.XQACD; /* Quality code*/

  PC0BW01.XWHCD[PC0BWIXM] = PC4REC.XWHCD; /* Warehouse code*/

  PC0BW01.XDSCD[PC0BWIXM] = PC4REC.XDSCD; /* Destination code*/

  PC0BW01.PC4CUSFL[PC0BWIXM] = PC4REC.PC4CUSFL; /* Customer req. flag*/
  PC0BW01.PC4SPCFL[PC0BWIXM] = PC4REC.PC4SPCFL; /* Spec. req. flag*/
  PC0BW01.PC4LCSFL[PC0BWIXM] = PC4REC.PC4LCSFL; /* L/C flag*/
  PC0BW01.XXXSTAT[PC0BWIXM] = PC4REC.XXXSTAT; /* row status code*/

   /* **                                                        ***/
   /* ********************** End of PC0B231 ***********************/
end // end PC0B231

// -->Reset highlighted fields
Function PC0B240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set PC0BM002.PC4ORTYP skip; /* p.o. type code*/
  set PC0BM002.PC4DESC initialAttributes; /* p.o. type desc*/
  set PC0BM002.PC4SDESC initialAttributes; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV initialAttributes; /* p.o. type abreviated desc*/
  set PC0BM002.XQACD initialAttributes; /* quality code*/
  set PC0BM002.XWHCD initialAttributes; /* warehouse code*/

  if (PC0BW02.XGPCD == "03")
    set PC0BM002.XDSCD initialAttributes; /* destination code*/
    set PC0BM002.PC4CUSFL initialAttributes; /* customer req. flag*/
    set PC0BM002.PC4SPCFL initialAttributes; /* spec req. flag*/
    set PC0BM002.PC4LCSFL initialAttributes; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")

    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSCD skip, invisible; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
  end

  set PC0BM002.XXXSTAT initialAttributes; /* row status flag*/
  set PC0BM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0BM002.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PC0B240 ***********************/
end // end PC0B240

// -->Verify the entered data
Function PC0B250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0BW00.XXXPRCNM = "PC0B250"; /* Module identification*/
    set PC0BM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/


    /* ------------------------------------------------------------*/
     /* If status field has been modified verify, set mod flag*/
    /* ------------------------------------------------------------*/

    if (PC0BM002.XXXSTAT != PC0BW02.XXXSTAT)
      PC0B255();
      PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
    end

    /* ------------------------------------------------------------*/
     /* If GPC code = 02 or 03, verify the L/C Subscript*/
    /* ------------------------------------------------------------*/

    if (PC0BW02.XGPCD == "02"
     || PC0BW02.XGPCD == "03")
      PC0B256(); /* =========> Verify L/C Subscript*/
    end

    /* ------------------------------------------------------------*/
     /* If GPC code = 03, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0BW02.XGPCD == "03")
      PC0B253(); /* =========> Verify other entered code*/
    end

    /* ------------------------------------------------------------*/
     /* If warehouse was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0BM002.XWHCD != PC0BW02.XWHCD) /* warehouse changed*/
      PC0B252(); /* =========> Verify warehouse code*/
      PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
    end

    /* ------------------------------------------------------------*/
     /* If quality was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0BM002.XQACD != PC0BW02.XQACD) /* quality changed*/
      PC0B251(); /* ===========> Verify quality code*/
      PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
    end

    /* ------------------------------------------------------------*/
     /* If P.O Types descs have been modified verify, set mod flag*/
    /* ------------------------------------------------------------*/

    if (PC0BM002.PC4DESC != PC0BW02.PC4DESC
     || PC0BM002.PC4SDESC != PC0BW02.PC4SDESC
     || PC0BM002.PC4ABRV != PC0BW02.PC4ABRV)
      PC0B254();
      PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
    end

    /* ------------------------------------------------------------*/
     /* check modified field flag*/
    /* ------------------------------------------------------------*/

    if (PC0BW00.PC0BWMOD == "N") /* ==>modified field flag*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update and*/
   /* exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PC0BW00.XXXPRCNM = "PC0B250"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* ===============> Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B250 ***********************/
end // end PC0B250

// Verify Product Quality
Function PC0B251()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BW01.XQACD[PC0BWIXM] = PC0BM002.XQACD;
    PC0BM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XQADESC = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B251"; /* Module identification*/
    set PC0BM002.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B251 ***********************/
end // end PC0B251

// Verify Product Warehouse
Function PC0B252()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XWHCD == " ")
    PC0BW01.XWHCD[PC0BWIXM] = PC0BM002.XWHCD;
    if (PC0BM002.XWHCD in XWHTBL.XWHCD)
      PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
    return;
  end

  if (PC0BM002.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BW01.XWHCD[PC0BWIXM] = PC0BM002.XWHCD;
    PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XWHNM = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B252"; /* Module identification*/
    set PC0BM002.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B252 ***********************/
end // end PC0B252

// Verify the other entered data
Function PC0B253()
   /* ------------------------------------------------------------*/
   /* If spec required flag changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4SPCFL != PC0BW02.PC4SPCFL) /* spec required flag*/
    PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/

    if (PC0BM002.PC4SPCFL == "Y"
     || PC0BM002.PC4SPCFL == "N")
      PC0BW01.PC4SPCFL[PC0BWIXM] = PC0BM002.PC4SPCFL;
    else

      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PC0B253"; /* MODULE IDENTIFICATION*/
      set PC0BM002.PC4SPCFL cursor, bold; /* Highlight*/
      converseLib.validationFailed(42);
    end

  end

   /* ------------------------------------------------------------*/
   /* If customer required flag changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4CUSFL != PC0BW02.PC4CUSFL) /* customer required flag*/

    PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
    if (PC0BM002.PC4CUSFL == "Y"
     || PC0BM002.PC4CUSFL == "N")
      PC0BW01.PC4CUSFL[PC0BWIXM] = PC0BM002.PC4CUSFL;
    else

      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/


      PC0BW00.XXXPRCNM = "PC0B253"; /* Module identification*/
      set PC0BM002.PC4CUSFL cursor, bold; /* Highlight*/
      converseLib.validationFailed(42);
    end

  end


   /* ------------------------------------------------------------*/
   /* If distribution method changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XDSCD != PC0BW02.XDSCD) /* distribution method*/
    PC0B257(); /* ==========> Verify distribution code*/
    PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/
  end


   /* **                                                        ***/
   /* ********************** End of PC0B253 ***********************/
end // end PC0B253

// verify p.o. type descriptions
Function PC0B254()
   /* ------------------------------------------------------------*/
   /* verify P.O. Type abbreviated description*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4ABRV != PC0BW02.PC4ABRV)

    if (PC0BM002.PC4ABRV == " ")

      /* ------------------------------------------------------------*/
       /* If blank, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PC0B254"; /* Module identification*/
      set PC0BM002.PC4ABRV cursor, bold; /* Highlight*/
      converseLib.validationFailed(68); /* Indicate missing or invalid*/

    end

  end
   /* ------------------------------------------------------------*/
   /* verify P.O. Type short description*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4SDESC != PC0BW02.PC4SDESC)

    if (PC0BM002.PC4SDESC == " ")

      /* ------------------------------------------------------------*/
       /* If blank, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PC0B254"; /* Module identification*/
      set PC0BM002.PC4SDESC cursor, bold; /* Highlight*/
      converseLib.validationFailed(68); /* Indicate missing or invalid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* verify P.O. Type description*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4DESC != PC0BW02.PC4DESC)

    if (PC0BM002.PC4DESC != " ")
      PC0BW01.PC4DESC[PC0BWIXM] = PC0BM002.PC4DESC;
    else

      /* ------------------------------------------------------------*/
       /* If blank, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PCOB254"; /* Module identification*/
      set PC0BM002.PC4DESC cursor, bold; /* Highlight*/
      converseLib.validationFailed(68); /* Indicate missing or invalid*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of PC0B254 ***********************/
end // end PC0B254

// Verify the status code
Function PC0B255()

   /* ------------------------------------------------------------*/
      /* Status Required Flag        , verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XXXSTAT == "A"
   || PC0BM002.XXXSTAT == "I")

    PC0BW01.XXXSTAT[PC0BWIXM] = PC0BM002.XXXSTAT;

    if (PC0BM002.XXXSTAT == "A") /* ===>refresh map*/
      PC0BM002.PC0BMSTA = "ACTIVE";
    else
      PC0BM002.PC0BMSTA = "INACTIVE";
    end

  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.PC0BMSTA = "        ";
    PC0BW00.XXXPRCNM = "PC0B255"; /* Module identification*/
    set PC0BM002.XXXSTAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(103); /* ====>invalid data message*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B255 ***********************/
end // end PC0B255

// Verify L/C Subscript
Function PC0B256()
   /* ------------------------------------------------------------*/
   /* If l/c required flag changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4LCSFL != PC0BW02.PC4LCSFL) /* spec required flag*/
    PC0BW00.PC0BWMOD = "Y"; /* ==>modified field flag*/

    if (PC0BM002.PC4LCSFL == "Y"
     || PC0BM002.PC4LCSFL == "N")
      PC0BW01.PC4LCSFL[PC0BWIXM] = PC0BM002.PC4LCSFL;
    else

      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0BW00.XXXPRCNM = "PC0B256"; /* Module identification*/
      set PC0BM002.PC4LCSFL cursor, bold; /* Highlight*/
      converseLib.validationFailed(42);
    end

  end


   /* **                                                        ***/
   /* ********************** End of PC0B256 ***********************/
end // end PC0B256

// Verify Product Destination
Function PC0B257()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XDSCD in XDSTBL.XDSCD /* Code in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BW01.XDSCD[PC0BWIXM] = PC0BM002.XDSCD;
    PC0BM002.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XDSDESC = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B257"; /* Module identification*/
    set PC0BM002.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(60); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B257 ***********************/
end // end PC0B257

// -->Process valid input request
Function PC0B260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any modifiable data was changed, update the table row.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWMOD == "Y") /* ===>modified data flag*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    PC0B261(); /* =======> Update table row*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/

    PC0BW00.XXXPRCNM = "PC0B260"; /* Module identification*/
    PCWREC.XXXMSGNO = 1; /* Indicate update completed*/


    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* Commit all changes*/

  end

   /* ------------------------------------------------------------*/
    /* determine if any other selections were made.*/
   /* ------------------------------------------------------------*/

  PC0B262(); /* =======> Search for next selection*/

   /* **                                                        ***/
   /* ********************** End of PC0B260 ***********************/
end // end PC0B260

// Update the table row
Function PC0B261()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = PC0BM002.XGPCD; /* GPC code*/
  PC4REC.PC4ORTYP = PC0BM002.PC4ORTYP; /* P.O. type*/
  PC4REC.PC4DESC = PC0BM002.PC4DESC; /* P.O. type desc*/
  PC4REC.PC4SDESC = PC0BM002.PC4SDESC; /* P.O. type short desc*/
  PC4REC.PC4ABRV = PC0BM002.PC4ABRV; /* P.O. type short desc*/
  PC4REC.XQACD = PC0BM002.XQACD; /* Quality code*/
  PC4REC.XWHCD = PC0BM002.XWHCD; /* Warehouse code*/
  PC4REC.XDSCD = PC0BM002.XDSCD; /* Destination code*/

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    PC4REC.PC4LCSFL = "N"; /* l/c flag*/
  else
    PC4REC.PC4LCSFL = PC0BM002.PC4LCSFL; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")
    PC4REC.PC4CUSFL = "N"; /* Customer req. flag*/
    PC4REC.PC4SPCFL = "N"; /* Spec. req. flag*/
  else
    PC4REC.PC4CUSFL = PC0BM002.PC4CUSFL; /* Customer req. flag*/
    PC4REC.PC4SPCFL = PC0BM002.PC4SPCFL; /* Spec. req. flag*/
  end
  PC4REC.XXXSTAT = PC0BM002.XXXSTAT; /* row status code*/
  PC4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("U ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    else
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/
      PC0BW00.PC0BWERR = "Y"; /* =====>   error flag*/

      PC0BW00.XXXPRCNM = "PC0B261"; /* Module identification*/
      PCWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* =============> Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0BW00.XXXPRCNM = "PC0B261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0B261 ***********************/
end // end PC0B261

// Search for next selection
Function PC0B262()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/


  if ("S" in PC0BW01.PC0BWSEL) /* Line was selected*/

    PC0BW00.PC0BWIXM = sysVar.arrayIndex; /* Map line index*/
    PC0BW00.PC0BWSWR = "Y";
    PCWREC.XXXMSGNO = 0;

    PC0BM002.XGPCD = PC0BW01.XGPCD[PC0BWIXM]; /* GPC*/
    PC0BM002.PC4ORTYP = PC0BW01.PC4ORTYP[PC0BWIXM]; /* P.O. Type Code*/
    PC0BW00.PC0BWIXS = PC0BW00.PC0BWIXM; /* ===>Save map index*/

  else

    PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/

    set PC0BM001 initial;
    set PC0BM001.PC0BMSEL[PC0BWIXS] cursor;

    PC0BW00.PC0BWSWR = "N";

    if (PC0BW00.PC0BWMOD == "Y")
      PC0BW00.PC0BWSWU = "Y";
    end

    if (PC0BW00.PC0BWERR == "Y") /* =====> if  error*/
      PC0BW00.PC0BWSWU = "Y";
      PC0BW00.PC0BWERR = "N"; /* =====> reset err flag*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0B262 ***********************/
end // end PC0B262

// =======> Inquire Function Type
Function PC0B400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0B410(); /* Obtain the data to display*/

  PC0B420(); /* Format and display the map*/

  PC0B430(); /* Check attention identifier*/

  PC0B440(); /* Reset fields to normal intensity*/

  PC0B450(); /* Verify the entered data*/

  PC0B460(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0B400 ***********************/
end // end PC0B400

// -->Obtain the data to display
Function PC0B410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0BW00.PC0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in the map display storage area.*/
   /* ------------------------------------------------------------*/

  set PC0BW02 empty; /* M002 display storage*/

  PC0BW02.XGPCD = PC0BM002.XGPCD; /* ===> GPC*/
  PC0BW02.PC4ORTYP = PC0BM002.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  PC0B411(); /* Obtain the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  PC0B412(); /* Save in display storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0B410 ***********************/
end // end PC0B410

// Select the table row
Function PC0B411()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0BW02.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0BW02.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0BM001 initial;
      set PC0BM001.XGPCD cursor;
      PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/
      PC0BM001.XGPCD = COMMAREA.XGPCD;

      PC0BW00.XXXPRCNM = "PC0B411"; /* Module identification*/
      PCWREC.XXXMSGNO = 26; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

  PC0BW00.XXXPRCNM = "PC0B411"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0B411 ***********************/
end // end PC0B411

// Save data in display storage
Function PC0B412()
   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (PC4REC.XGPCD in XGPTBL.XGPCD)
    PC0BW02.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

   /* MOVE PC4REC.PC4ORTYP TO PC0BW02.PC4ORTYP; p.o. type*/
  PC0BW02.PC4DESC = PC4REC.PC4DESC; /* p.o. type desc*/
  PC0BW02.PC4SDESC = PC4REC.PC4SDESC; /* p.o. type short desc*/
  PC0BW02.PC4ABRV = PC4REC.PC4ABRV; /* p.o. type short desc*/

  PC0BW02.XQACD = PC4REC.XQACD; /* Category code*/
  if (PC4REC.XQACD in XQATBL.XQACD)
    PC0BW02.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
  end

  PC0BW02.XWHCD = PC4REC.XWHCD; /* Category code*/
  if (PC4REC.XWHCD in XWHTBL.XWHCD)
    PC0BW02.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  end

  PC0BW02.XDSCD = PC4REC.XDSCD; /* Category code*/
  if (PC4REC.XDSCD in XDSTBL.XDSCD)
    PC0BW02.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex];
  end

  PC0BW02.PC4CUSFL = PC4REC.PC4CUSFL; /* customer req. flag*/
  PC0BW02.PC4SPCFL = PC4REC.PC4SPCFL; /* spec. req. flag*/
  PC0BW02.PC4LCSFL = PC4REC.PC4LCSFL; /* l/c flag*/
  PC0BW02.XXXSTAT = PC4REC.XXXSTAT; /* row status code*/
  if (PC4REC.XXXSTAT == "A")
    PC0BW02.PC0BWSTA = "ACTIVE"; /* status literal*/
  else
    PC0BW02.PC0BWSTA = "INACTIVE"; /* status literal*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B412 ***********************/
end // end PC0B412

// -->Format and converse the map
Function PC0B420()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0BW00.PC0BWSWF == "Y") /* Map must be formatted*/
      PC0B421(); /* Format the data on the map*/
    end

    set PC0BM002.CATOAP cursor; /* On to application*/

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to change, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PC0B422(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0BM002.XXXPRCNM = PC0BW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0BM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0BM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0BW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0BM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  PC0BW01.PC0BWSEL[PC0BWIXM] = "V"; /* Select indicator*/

   /* **                                                        ***/
   /* ********************** End of PC0B420 ***********************/
end // end PC0B420

// Format the display data
Function PC0B421()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/


  set PC0BM002 initial;

  PC0BM002.PC0BMTYP = "INQUIRY"; /* map type literal*/

  PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XGPCD = PC0BW02.XGPCD; /* GPC code*/
  PC0BM002.XGPDESC = PC0BW02.XGPDESC; /* gpc description*/

  set PC0BM002.PC4ORTYP skip; /* p.o. type*/
  PC0BM002.PC4ORTYP = PC0BW02.PC4ORTYP; /* p.o. type*/
  PC0BM002.PC4DESC = PC0BW02.PC4DESC; /* p.o. type desc*/
  PC0BM002.PC4SDESC = PC0BW02.PC4SDESC; /* p.o. type short desc*/
  PC0BM002.PC4ABRV = PC0BW02.PC4ABRV; /* p.o. type abreviated desc*/

  PC0BM002.XQACD = PC0BW02.XQACD; /* quality code*/
  PC0BM002.XQADESC = PC0BW02.XQADESC; /* quality description*/

  PC0BM002.XWHCD = PC0BW02.XWHCD; /* warehouse code*/
  PC0BM002.XWHNM = PC0BW02.XWHNM; /* warehouse name*/

  if (PC0BW02.XGPCD == "03")

    PC0BM002.XDSCD = PC0BW02.XDSCD; /* distribution method code*/
    PC0BM002.XDSDESC = PC0BW02.XDSDESC; /* distribution method desc*/
    PC0BM002.PC4CUSFL = PC0BW02.PC4CUSFL; /* customer req. flag*/
    PC0BM002.PC4SPCFL = PC0BW02.PC4SPCFL; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "03")
    PC0BM002.PC4LCSFL = PC0BW02.PC4LCSFL; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")

    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSCD skip, invisible; /* distribution method*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/

  end

  set PC0BM002.XXXSTAT skip;
  PC0BM002.XXXSTAT = PC0BW02.XXXSTAT; /* row status flag*/
  PC0BM002.PC0BMSTA = PC0BW02.PC0BWSTA; /* row status literal*/

   /* **                                                        ***/
   /* ********************** End of PC0B421 ***********************/
end // end PC0B421

// Check authorization & format
Function PC0B422()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAINQFL == "Y" /* Authorized to inquiry*/
   && PC0BW00.PC0BWMAP == "I") /* map function type flag*/

    /* ==== next sentence ====>*/

  else

    converseLib.validationFailed(29); /* ===>not authorized message*/

  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to autoskip.*/
   /* ------------------------------------------------------------*/

  set PC0BM002.PC4DESC skip; /* p.o. type desc*/
  set PC0BM002.PC4SDESC skip; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV skip; /* p.o. type abreviated desc*/
  set PC0BM002.XQACD skip; /* quality code*/
  set PC0BM002.XWHCD skip; /* warehouse code*/
  set PC0BM002.XXXSTAT skip; /* status code*/

  if (PC0BW02.XGPCD == "03")

    set PC0BM002.XDSCD skip; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "03")

    set PC0BM002.PC4LCSFL skip; /* l/c flag*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B422 ***********************/
end // end PC0B422

// -->Check attention identifier
Function PC0B430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0BW00.PC0BWSWR == "Y") /* Request for data*/
      set PC0BW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* restore map*/

    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0B111(); /* Purge any temporary storage*/

      XSPCS01(); /* Exit to another application*/

      PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

      set PC0BM001 initial;
      set PC0BM001.CATOAP cursor, bold; /* Highlight*/

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

    else

      PC0BW00.XXXPRCNM = "PC0B430"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/


    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0BM002"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/

      set PC0BM001 initial;
      set PC0BM001.PC0BMSEL[PC0BWIXM] cursor;
      while ("S" in PC0BW01.PC0BWSEL)
        PC0BW01.PC0BWSEL[sysVar.arrayIndex] = " ";
      end
      exit stack; /* Exit to display map*/

    end


    PC0B111(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    set PC0BM001 initial;
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

    exit stack; /* Exit to display map*/


  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    PC0BW00.XXXPRCNM = "PC0B430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B430 ***********************/
end // end PC0B430

// -->Reset highlighted fields
Function PC0B440()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set PC0BM002.PC4ORTYP skip; /* p.o. type code*/
  set PC0BM002.PC4DESC initialAttributes; /* p.o. type desc*/
  set PC0BM002.PC4SDESC initialAttributes; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV initialAttributes; /* p.o. type abreviated desc*/
  set PC0BM002.XQACD initialAttributes; /* quality code*/
  set PC0BM002.XWHCD initialAttributes; /* warehouse code*/

  if (PC0BW02.XGPCD == "03")
    set PC0BM002.XDSCD initialAttributes; /* distribution method code*/
    set PC0BM002.PC4CUSFL initialAttributes; /* customer req. flag*/
    set PC0BM002.PC4SPCFL initialAttributes; /* spec req. flag*/
  end

  if (PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "03")
    set PC0BM002.PC4LCSFL initialAttributes; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")

    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSCD skip, invisible; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/

  end
  set PC0BM002.XXXSTAT skip; /* status flag*/
  set PC0BM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0BM002.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PC0B440 ***********************/
end // end PC0B440

// -->Verify the entered data
Function PC0B450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0BW00.XXXPRCNM = "PC0B450"; /* Module identification*/
    set PC0BM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update and*/
   /* exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PC0BW00.XXXPRCNM = "PC0B450"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B450 ***********************/
end // end PC0B450

// -->Process valid input request
Function PC0B460()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
    /* determine if any other selections were made.*/
   /* ------------------------------------------------------------*/

  PC0B462(); /* =========> SEARCH FOR NEXT SELECTION*/

   /* **                                                        ***/
   /* ********************** End of PC0B460 ***********************/
end // end PC0B460

// Search for next selection
Function PC0B462()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in PC0BW01.PC0BWSEL) /* Line was selected*/

    PC0BW00.PC0BWIXM = sysVar.arrayIndex; /* Map line index*/

    PC0BM002.XGPCD = PC0BW01.XGPCD[PC0BWIXM]; /* GPC*/
    PC0BM002.PC4ORTYP = PC0BW01.PC4ORTYP[PC0BWIXM]; /* p.o. type code*/
    PC0BW00.PC0BWIXS = PC0BW00.PC0BWIXM; /* ===> save index*/

    PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/

  else

    set PC0BM001 initial;
    set PC0BM001.PC0BMSEL[PC0BWIXS] cursor;
    PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B462 ***********************/
end // end PC0B462

// =======> Add function type
Function PC0B500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0B520(); /* Format and display the map*/

  PC0B530(); /* Check attention identifier*/

  PC0B540(); /* Reset fields to normal intensity*/

  PC0B550(); /* Verify the entered data*/

  PC0B560(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0B500 ***********************/
end // end PC0B500

// -->Format and converse map
Function PC0B520()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0BW00.PC0BWSWF == "Y") /* Map must be formatted*/
      PC0B521(); /* ==========> Format the data on the*/
                                   /* map*/
    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If authorized to add data, unprotect any modifiable fields.*/
   /* ------------------------------------------------------------*/

  PC0B522(); /* ============> Check add authorization*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0BM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0BM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0BM002.XXXPRCNM = PC0BW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0BM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0BM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0BW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0B523(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0BM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0BM002.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of PC0B520 ***********************/
end // end PC0B520

// Format the display data
Function PC0B521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PC0BM002 initial;

  PC0BM002.PC0BMTYP = "  ADD "; /* map type literal*/
  PCWREC.XXXMSGNO = 88; /* map type instruction msg*/

  PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0BM002.XGPCD = PC0BW02.XGPCD; /* GPC code*/
  if (PC0BW02.XGPCD in XGPTBL.XGPCD)
    PC0BM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end
  set PC0BM002.PC4ORTYP cursor, normal;

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")

    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSDESC skip, invisible; /* distribution desc*/
    set PC0BM002.XDSCD skip, invisible; /* distribution code*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/
  end

   /* ------------------------------------------------------------*/
   /* set map data defaults*/
   /* ------------------------------------------------------------*/

  PC0BM002.XQACD = "01";
  if (PC0BM002.XQACD in XQATBL.XQACD)
    PC0BM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
  end

  PC0BM002.XWHCD = "  ";
  if (PC0BM002.XWHCD in XWHTBL.XWHCD)
    PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  end

  if (PC0BM002.XDSCD in XDSTBL.XDSCD)
    PC0BM002.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex];
  end
  PC0BM002.PC4CUSFL = "N";
  PC0BM002.PC4SPCFL = "N";
  PC0BM002.PC4LCSFL = "N";

  set PC0BM002.XXXSTAT skip; /* status flag*/
  PC0BM002.XXXSTAT = "A"; /* row status flag*/
  PC0BM002.PC0BMSTA = "ACTIVE"; /* row status literal*/

   /* **                                                        ***/
   /* ********************** End of PC0B521 ***********************/
end // end PC0B521

// Check authorization & format
Function PC0B522()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && PC0BW00.PC0BWMAP == "A") /* map function type flag*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to autoskip.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(29); /* ===>not authorized message*/

  set PC0BM002.CATOAP cursor;
  set PC0BM002.PC4DESC skip; /* p.o. type desc*/
  set PC0BM002.PC4SDESC skip; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV skip; /* p.o. type abbreviated desc*/
  set PC0BM002.XQACD skip; /* quality code*/
  set PC0BM002.XWHCD skip; /* warehouse code*/

  if (PC0BW02.XGPCD == "03"
   || PC0BW02.XGPCD > "03")
    set PC0BM002.XDSCD skip; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip; /* spec req. flag*/
    set PC0BM002.PC4LCSFL skip; /* l/c flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B522 ***********************/
end // end PC0B522

// Check for ? inquiry by user
Function PC0B523()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0BM002.XQACD == "?" /* if any ? entered*/
   || PC0BM002.XWHCD == "?" 
   || PC0BM002.XDSCD == "?")


    if (PC0BM002.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
        PC0BM002.XQADESC = XQATBL.XQADESC[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XQACD = PC0BW02.XQACD; /* clear fields*/
        if (PC0BM002.XQACD in XQATBL.XQACD)
          PC0BM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
        end
      end
    end



    if (PC0BM002.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        PC0BM002.XWHNM = XWHTBL.XWHNM[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XWHCD = PC0BW02.XWHCD; /* clear fields*/
        if (PC0BM002.XWHCD in XWHTBL.XWHCD)
          PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
        end
      end
    end


    if (PC0BM002.XDSCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIRECT SHIP TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDS01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the direct ship**/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0BM002.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* move code*/
        PC0BM002.XDSDESC = XDSTBL.XDSDESC[XX0XWPIX]; /* move name*/
      else
        PC0BM002.XDSCD = PC0BW02.XDSCD; /* clear fields*/
        if (PC0BM002.XDSCD in XDSTBL.XDSCD)
          PC0BM002.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex];
        end
      end
    end


    converseLib.clearScreen();
     /* restore the original map*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0B523 ***********************/
end // end PC0B523

// -->Check attention identifier
Function PC0B530()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0BW00.PC0BWSWR == "Y") /* Request for data*/
      set PC0BW02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* M002 display storage*/
    set PC0BM001.PC4ORTYP cursor, bold; /* Highlight*/
    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    PC0BW02.XGPCD = COMMAREA.XGPCD;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0B111(); /* Purge any temporary storage*/

      XSPCS01(); /* Exit to another application*/


      PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

      set PC0BM001 initial;
      set PC0BM001.CATOAP cursor, bold; /* Highlight*/

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

    else

      PC0BW00.XXXPRCNM = "PC0B530"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/


    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0BM002"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      set PC0BM001 initial;
      PC0BW00.PC0BWSWR = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/
      PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
      PC0BM001.XGPCD = PC0BW02.XGPCD;

      PC0BW00.PC0BWIXM = 1;
      while (PC0BW00.PC0BWIXM <= 15)
        set PC0BM001.PC0BMSEL[PC0BWIXM] initialAttributes;
        PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
      end

      exit stack; /* Exit to display map*/

    end


    PC0B111(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/
    PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
    PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

    set PC0BM001 initial;
    set PC0BM001.CATOAP cursor, bold; /* Highlight*/

    PC0BW00.PC0BWIXM = 1;
    while (PC0BW00.PC0BWIXM <= 15)
      set PC0BM001.PC0BMSEL[PC0BWIXM] skip, invisible;
      PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1;
    end

    exit stack; /* Exit to display map*/


  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    PC0BW00.XXXPRCNM = "PC0B530"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0B530 ***********************/
end // end PC0B530

// -->Reset highlighted fields
Function PC0B540()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set PC0BM002.PC4ORTYP initialAttributes; /* p.o. type code*/
  set PC0BM002.PC4DESC initialAttributes; /* p.o. type desc*/
  set PC0BM002.PC4SDESC initialAttributes; /* p.o. type short desc*/
  set PC0BM002.PC4ABRV initialAttributes; /* p.o. type abreviated desc*/
  set PC0BM002.XQACD initialAttributes; /* quality code*/
  set PC0BM002.XQADESC initialAttributes; /* quality description*/
  set PC0BM002.XWHCD initialAttributes; /* warehouse code*/
  set PC0BM002.XWHNM initialAttributes; /* warehouse name*/

  if (PC0BW02.XGPCD == "03")
    set PC0BM002.XDSCD initialAttributes; /* destination code*/
    set PC0BM002.XDSDESC initialAttributes; /* destination discription*/
    set PC0BM002.PC4CUSFL initialAttributes; /* customer req. flag*/
    set PC0BM002.PC4SPCFL initialAttributes; /* spec req. flag*/
  end

  if (PC0BW02.XGPCD == "02"
   || PC0BW02.XGPCD == "03")
    set PC0BM002.PC4LCSFL initialAttributes; /* l/c flag*/
  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07"
   || PC0BW02.XGPCD == "02")

    set PC0BM002.PC0BMDML skip, invisible; /* literal*/
    set PC0BM002.PC0BMCUL skip, invisible; /* literal*/
    set PC0BM002.PC0BMSPL skip, invisible; /* literal*/

    set PC0BM002.XDSDESC skip, invisible; /* distribution method desc*/
    set PC0BM002.XDSCD skip, invisible; /* distribution method code*/
    set PC0BM002.PC4CUSFL skip, invisible; /* customer req. flag*/
    set PC0BM002.PC4SPCFL skip, invisible; /* spec req. flag*/

  end

  if (PC0BW02.XGPCD == "01"
   || PC0BW02.XGPCD == "07")
    set PC0BM002.PC0BMLCL skip, invisible; /* literal*/
    set PC0BM002.PC4LCSFL skip, invisible; /* l/c flag*/
  end

  set PC0BM002.XXXSTAT skip; /* status field*/
  set PC0BM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0BM002.CAITEM initialAttributes; /* Commarea application data*/


   /* **                                                        ***/
   /* ********************** End of PC0B540 ***********************/
end // end PC0B540

// -->Verify the entered data
Function PC0B550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0BW00.XXXPRCNM = "PC0B550"; /* Module identification*/
    set PC0BM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify fields entered for new P.O. Type*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If GPC code = 3, verify the other entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0BW02.XGPCD == "03" /* VERIFY THE OTHER ENTERED CODE.*/
     || PC0BW02.XGPCD > "03") /* to handle all other GPC codes*/
      PC0B553(); /* ==========> Verify other entered code*/
    end

    /* ------------------------------------------------------------*/
        /* Warehouse            , verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0BM002.XWHCD == " ")
      if (PC0BM002.XWHCD in XWHTBL.XWHCD)
        PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
      end
    else
      PC0B552(); /* =========> Verify warehouse code*/
    end

    /* ------------------------------------------------------------*/
        /* Quality              , verify the entered code.*/
    /* ------------------------------------------------------------*/

    PC0B551(); /* ==========> Verify quality code*/


    /* ------------------------------------------------------------*/
        /* P.O. Type Code & descriptions, verify the entered code.*/
    /* ------------------------------------------------------------*/

    PC0B554(); /* ==========> Verify  code*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ===============> Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If PF12 was pressed, indicate press enter to update and*/
   /* exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/

    PC0BW00.XXXPRCNM = "PC0B550"; /* Module identification*/
    converseLib.validationFailed(17); /* Indicate press enter to update*/

    exit stack; /* Exit to display map*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0B550 ***********************/
end // end PC0B550

// Verify Product Quality
Function PC0B551()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XQADESC = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B551"; /* Module identification*/
    set PC0BM002.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end


   /* **                                                        ***/
   /* ********************** End of PC0B551 ***********************/
end // end PC0B551

// Verify Product Warehouse
Function PC0B552()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BM002.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XWHNM = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B552"; /* Module identification*/
    set PC0BM002.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end


   /* ********************** End Of PC0B552 ***********************/
end // end PC0B552

// Verify the other entered data
Function PC0B553()
   /* ------------------------------------------------------------*/
      /* L/C required flag        , verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4LCSFL == "Y"
   || PC0BM002.PC4LCSFL == "N")
    /* ======= Next Sentence ==========>*/
  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BW00.XXXPRCNM = "PC0B553"; /* Module identification*/
    set PC0BM002.PC4LCSFL cursor, bold; /* Highlight*/
    converseLib.validationFailed(42);
  end
   /* ------------------------------------------------------------*/
      /* Spec Required Flag        , verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4SPCFL == "Y"
   || PC0BM002.PC4SPCFL == "N")
    /* ======= Next Sentence ==========>*/
  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BW00.XXXPRCNM = "PC0B553"; /* Module identification*/
    set PC0BM002.PC4SPCFL cursor, bold; /* Highlight*/
    converseLib.validationFailed(42);
  end


   /* ------------------------------------------------------------*/
      /* Customer Required Flag        , verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4CUSFL == "Y"
   || PC0BM002.PC4CUSFL == "N")
    /* ======= Next Sentence ==========>*/
  else

    /* ------------------------------------------------------------*/
     /* If not valid, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BW00.XXXPRCNM = "PC0B553"; /* Module identification*/
    set PC0BM002.PC4CUSFL cursor, bold; /* Highlight*/
    converseLib.validationFailed(42);
  end


   /* ------------------------------------------------------------*/
      /* Distribution Method    , verify the entered code.*/
   /* ------------------------------------------------------------*/

  PC0B555(); /* verify distribution method code*/


   /* **                                                        ***/
   /* ********************** End of PC0B553 ***********************/
end // end PC0B553

// verify P.O. Type/descriptions
Function PC0B554()
  if (PC0BM002.PC4ABRV == " ") /* ====>P.O. Abbrevation*/
    set PC0BM002.PC4ABRV cursor, bold;
    PC0BW00.XXXPRCNM = "PC0B554"; /* Module identification*/
    converseLib.validationFailed(68); /* Indicate missing or invalid*/
  end

  if (PC0BM002.PC4SDESC == " ") /* ====>P.O. Short Description*/
    set PC0BM002.PC4SDESC cursor, bold;
    PC0BW00.XXXPRCNM = "PC0B554"; /* Module identification*/
    converseLib.validationFailed(68); /* Indicate missing or invalid*/
  end

  if (PC0BM002.PC4DESC == " ") /* ====>P.O.Description*/
    set PC0BM002.PC4DESC cursor, bold;
    PC0BW00.XXXPRCNM = "PC0B554"; /* Module identification*/
    converseLib.validationFailed(68); /* Indicate missing or invalid*/
  end


   /* ------------------------------------------------------------*/
   /* verify P.O. Type code and descriptions*/
       /* If blank, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.PC4ORTYP == " ") /* ====>P.O. Type*/
    set PC0BM002.PC4ORTYP cursor, bold;
    PC0BW00.XXXPRCNM = "PC0B554"; /* Module identification*/
    converseLib.validationFailed(33); /* Indicate missing or invalid*/
  else
    PC0B556(); /* =========>verify P.O. Type does not exist*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0B554 ***********************/
end // end PC0B554

// Verify Product Destination
Function PC0B555()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0BM002.XDSCD in XDSTBL.XDSCD /* Code in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0BM002.XDSDESC = XDSTBL.XDSDESC[sysVar.arrayIndex]; /* Save description*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0BM002.XDSDESC = " "; /* Clear description*/

    PC0BW00.XXXPRCNM = "PC0B555"; /* Module identification*/
    set PC0BM002.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(60); /* Indicate missing or invalid*/

  end


   /* ********************** End Of PC0B555 ***********************/
end // end PC0B555

// verify P.O.Type does not exist
Function PC0B556()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0BW02.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0BM002.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row found, indicate the P.O. Type already exists.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      converseLib.clearScreen();
      
      set PC0BM002.PC4ORTYP cursor, bold;
      PC0BW00.PC0BWSWF = "N"; /* Format the map switch*/

      PC0BW00.XXXPRCNM = "PC0B556"; /* Module identification*/
         /* MOVE 43 TO PCWREC.XXXMSGNO  ; P.O. Type already exists*/
      converseLib.validationFailed(43);

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0BW00.PC0BWSWM = "1"; /* Map to be displayed switch*/
  PC0BW00.PC0BWSWR = "N"; /* Request for data switch*/

  PC0BW00.XXXPRCNM = "PC0B556"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0b556 ***********************/
end // end PC0B556

// -->Process valid input request
Function PC0B560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
      /* add the row to the data base table*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* add the table row.*/
   /* ------------------------------------------------------------*/

  PC0B561(); /* Add table row*/

   /* ------------------------------------------------------------*/
   /* Indicate that the update was successfully completed.*/
   /* ------------------------------------------------------------*/

  PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/

  PC0BW00.XXXPRCNM = "PC0B560"; /* Module identification*/
  PCWREC.XXXMSGNO = 1; /* Indicate update completed*/


   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit(); /* Commit all changes*/

   /* **                                                        ***/
   /* ********************** End of PC0B560 ***********************/
end // end PC0B560

// add the table row
Function PC0B561()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = PC0BM002.XGPCD; /* GPC code*/
  PC4REC.PC4ORTYP = PC0BM002.PC4ORTYP; /* p.o. type*/
  PC4REC.PC4DESC = PC0BM002.PC4DESC; /* p.o. type desc*/
  PC4REC.PC4SDESC = PC0BM002.PC4SDESC; /* p.o. type short desc*/
  PC4REC.PC4ABRV = PC0BM002.PC4ABRV; /* p.o. type short desc*/
  PC4REC.XQACD = PC0BM002.XQACD; /* Category code*/
  PC4REC.XWHCD = PC0BM002.XWHCD; /* Category code*/
  PC4REC.XDSCD = PC0BM002.XDSCD; /* Category code*/
  PC4REC.PC4CUSFL = PC0BM002.PC4CUSFL; /* customer req. flag*/
  PC4REC.PC4SPCFL = PC0BM002.PC4SPCFL; /* spec. req. flag*/
  PC4REC.PC4LCSFL = PC0BM002.PC4LCSFL; /* l/c flag*/
  PC4REC.XXXSTAT = PC0BM002.XXXSTAT; /* row status code*/
  PC4REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Add date*/
  PC4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* add row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("A ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0BW00.PC0BWSWR = "Y"; /* Request for data switch*/

      PC0BW00.XXXPRCNM = "PC0B561"; /* Module identification*/
      PCWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0BW00.XXXPRCNM = "PC0B561"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0B561 ***********************/
end // end PC0B561

// Save data in display storage
Function PC0BS02()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

   /* IF PC0BW00.PC0BWIXM EQ 1        ; First line on page*/

   /* MOVE PC0BM001.xgpcd TO PC0BW01.xgpcd; ===>GPC code*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the display storage area.*/
   /* ------------------------------------------------------------*/

  PC0BW01.XGPCD[PC0BWIXM] = PC0BM001.XGPCD; /* ===>GPC code*/
  PC0BW01.PC4ORTYP[PC0BWIXM] = PC4REC.PC4ORTYP; /* ==>order type code*/
  PC0BW01.PC4DESC[PC0BWIXM] = PC4REC.PC4DESC; /* ==>order type desc.*/
  PC0BW01.XQACD[PC0BWIXM] = PC4REC.XQACD; /* =====>quality code*/
  PC0BW01.XWHCD[PC0BWIXM] = PC4REC.XWHCD; /* =====>warehouse code*/
  PC0BW01.XDSCD[PC0BWIXM] = PC4REC.XDSCD; /* ==>destination code*/
  PC0BW01.PC4CUSFL[PC0BWIXM] = PC4REC.PC4CUSFL; /* ==>customer req. flag*/
  PC0BW01.PC4SPCFL[PC0BWIXM] = PC4REC.PC4SPCFL; /* ==>spec req. flag*/
  PC0BW01.PC4LCSFL[PC0BWIXM] = PC4REC.PC4LCSFL; /* ==>l/c flag*/
  PC0BW01.XXXSTAT[PC0BWIXM] = PC4REC.XXXSTAT; /* ===>row status flag*/

  PC0BW00.PC0BWIXM = PC0BW00.PC0BWIXM + 1; /* Increment line index*/


   /* ********************** End Of PC0BS02 ***********************/
end // end PC0BS02

// update temporary storage page
Function PC0BS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0BW00.XXXPRCNM = "PC0BS03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of PC0BS03 ***********************/
end // end PC0BS03

// Read temporary storage page
Function PC0BS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0BW01.XXXTSLEN = PC0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0BW00.XXXPRCNM = "PC0BS04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0BW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of PC0BS04 ***********************/
end // end PC0BS04

//*** RECORD=PC0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PC0BW00 type basicRecord
  10 PC0BWIXM PC0BWIXM ; 
  10 PC0BWIXS PC0BWIXS ; 
  10 PC0BWSWC PC0BWSWC ; 
  10 PC0BWSWF PC0BWSWF ; 
  10 PC0BWSWM PC0BWSWM ; 
  10 PC0BWSWR PC0BWSWR ; 
  10 PC0BWSWU PC0BWSWU ; 
  10 PC0BWMAP PC0BWMAP ; 
  10 PC0BWMOD PC0BWMOD ; 
  10 PC0BWERR PC0BWERR ; 
  10 PC0BWDTA PC0BWDTA ; 
  10 PC0BWXIT PC0BWXIT ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PC0BW00

//*** RECORD=PC0BW01 ****
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// **                      LIST SCREEN                       **
// **                                                        **
// 
//         Map:         PC0BM001
// 
// Record Name:         PC0BM01
// 
//    This record is a working storage record to load and
// extract data for the P.O. Type list screen.
//    It holds only the data which represents 15 rows, P.O.
// Types, equal to one list map --> PC0BM001.
// 
// **                                                        **
// **                                                        **
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// ***********************
Record PC0BW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0BWRC1 PC0BWRC1 [15] ; 
    10 XGPCD XGPCD ; 
    10 PC0BWSEL PC0BWSEL ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC4DESC PC4DESC ; 
    10 XQACD XQACD ; 
    10 XWHCD XWHCD ; 
    10 XDSCD XDSCD ; 
    10 PC4CUSFL PC4CUSFL ; 
    10 PC4SPCFL PC4SPCFL ; 
    10 PC4LCSFL PC4LCSFL ; 
    10 XXXSTAT XXXSTAT ; 
end // end PC0BW01

//*** RECORD=PC0BW02 ****
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// **                    DETAIL SCREEN                       **
// **                                                        **
// 
//         Map:         PC0BM002
// 
// Record Name:         PC0BM02
// 
//    This record is a working storage record to load and
// extract data for the P.O. Type detail screens.
//    It holds only the data which represents one row
// equal to the detail map --> PC0BM002.
// 
// **                                                        **
// **                                                        **
// ************ PRODUCTION ORDER TYPE MAP RECORD **************
// ***********************
Record PC0BW02 type basicRecord
  5 PC0BWRC2 PC0BWRC2 ; 
    10 XGPCD XGPCD ; 
    10 XGPDESC XGPDESC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC4DESC PC4DESC ; 
    10 PC4SDESC PC4SDESC ; 
    10 PC4ABRV PC4ABRV ; 
    10 XQACD XQACD ; 
    10 XQADESC XQADESC ; 
    10 XWHCD XWHCD ; 
    10 XWHNM XWHNM ; 
    10 XDSCD XDSCD ; 
    10 XDSDESC XDSDESC ; 
    10 PC4CUSFL PC4CUSFL ; 
    10 PC4SPCFL PC4SPCFL ; 
    10 PC4LCSFL PC4LCSFL ; 
    10 XXXSTAT XXXSTAT ; 
    10 PC0BWSTA PC0BWSTA ; 
    10 PC0BWMAP PC0BWMAP ; 
end // end PC0BW02

// data exist for GPC code
DataItem PC0BWDTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// contention error flag
DataItem PC0BWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PC0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved Index for map fields
DataItem PC0BWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem PC0BWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PC0BWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data record for temp. storage
DataItem PC0BWRC1 char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data record for temp. storage
DataItem PC0BWRC2 char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PC0BWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0BWSTA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PC0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PC0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC0BWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PC0BWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PC0BWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

