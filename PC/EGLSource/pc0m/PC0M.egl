package pc0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0M ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//       P.O. PRODUCT INQUIRY/MAINTENANCE SELECTION/LIST
// 
//    This program will allow the user to bring up a list of
// P.O. Products for inquiry/maintenance functions. Access
// this application by entering option 4 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to
// enter desired criteria on a particular P.O. Product and be
// transfered to an application according to the entered data.
// 
//    This program will allow inquiring, changing, and
// splitting of P.O. Product rows, based on the criteria above,
// by transfering them to another application with the selected
// row information.
// 
//    The user can select one or more rows for inquiry with the
// ENTER key. The user will then be transfered to PC0K in
// inquiry mode, where they can view the selected data.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can select one or more rows for change with the
// PF12 key. The user will then be transfered to PC0K in
// change mode, where they can change the selected data.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can select one or more rows for split with the
// PF20 key. The user will then be transfered to PC0N in
// split mode, where they can split the selected P.O. Product
// to another P.O. Product.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can also obtain more detailed information for
// the list by pressing PF17, which will transfer them to PC0U
// for footwear, and PC0R for all others.
// 
//    Curtain fields will be protected and thus can not be
// changed dependent on security and GPC code.
// 
// 
//    Program Notes:
//    --------------
// 
// 1.)    There are two Select Sets in this program which have
//        identifing cursors.
// 
//    D.B. Table       Cursor
//   ------------     --------------
//    VPOITM04   ----> PC0MWSWC
//    VCPLHD02   ----> PC0MCSWC
// 
// 
// 
// 2.)    There are three indexes used in this program, each
//        having a specific purposes.
// 
//    Index:         Purpose:
//   ---------      -------------------------------------------
//    PC0MWIXM ----> Map index for loading the list maps.
//    PC0MWIXT ----> Temporary index for saving a set of Item
//                      rows, by control break, to calculate
//                      the "Balance to Ship" values.
//    PC0MWIXR ----> Row index for loading the pass record with
//                      the selected rows.
// 
// 
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// 
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 06/01/89   SFORD    New Application
// 08/02/90   SFORD    Remove hard coded color '00' for ftwr
// 09/14/90   mpisto   reduced P.O. field to 6 digits
// 09/19/90   lsutto   allow gpc 07 access
// 01/14/91   ZLefko   A77B - modify Status cd request 'CX' to
//                     display only user cancelled items and
//                     allow for status cd request '*X' to
//                     display all cancelled items.
// 02/11/91   ZLefko   Re-gen for table changes.
// 02/18/91   ZLefko   Modify to pass status request '*X' on a
// 09/03/91   Gamen    Move ta2rtncd check from pc0vs31 to
//                     where it is called from and be more
//                     specific.
// 10/15/91   DFRANC   Skip over check of ETS if map and work-
//                     ing storage fields are blank or zeroes.
//                     Allow return from PC0R and PC0O using
//                     PF3.
// 12/27/91   Gamen    Add s.o. to list screen.
// 04/23/92   CHAERT   Add ysmxdv to pcprec. etal calc for intl
//                     for DANSAS.
// 10/22/92   CHAERT   delete pc5rec from records.  not used.
// 12/22/92   CHAERT   ADD NOBEEP LOGIC TO PC0M120,224,225
// 06/23/93   dhales   change to xspcs05 requires regen
// 02/04/94   dhales   prevent po nbrs < 300000 to go to pc0k
//                     or pc0n
// 02/23/94   dhales   prevent po nbrs < 300000 but greater
//                     than 99999 from going to pc0k or pc0n
// 03/09/94   GAMEN    DB2 CHANGES FOR MARCH '94.
// 11/02/94   MSMIT2   FOR GPC = '01' DON'T CHECK PO NUMBER RNG
// 01/20/95   GAMEN    change ETAL calc (xspcs07) for aprl.
// 03/23/95   sford    change s.o. to 9.3 format
// 07/19/96   jniese   pcy199 - air freight percent
// 12/06/96   jniese   recompile to get new xspcs05.
// 04/29/97   asunda   recompile to get new xspcs05.
// 06/02/97   PHARRWO  CHANGED PO VIEWS - PCA367 - PPR PROJECT
// 07/02/97   jniese   ppr fixes
// 10/21/97   DRAMSE   generated for the changed XPPC001
// 02/10/98   DRAMSE   Changed to use VPRDCU03 instead of
//                     PC2REC.Also changed to call VPRDCU03
//                     instead of IO3340.
//                     Changed XPPC001(flow),PC0M153,PC0M158
// 02/13/98   DRAMSE   generated to get new xspcs05/XSPCS07
// 06/10/98   drammo   PCF147 - Regen appln to get new
//                     XSPCS05 & XSPCS06 which are changed to
//                     include ST po type in ETAL calculation
// 09/01/98   BCHELL   Add Item Seq. Number on to PC0M
//                     screen
// 07/26/99   DRAMMO   Disabled the split option for FTWR POs
//                     of 'LP' type.
// 09/24/99   vsanka   regenerated due to changes to xspcs05
// 09/30/99   SBUNGO   CHANGED TO USE VIEW VPOITM04 AND
//                     INTRODUCED A NEW FIELD LCBNK IN PC0MM002
// 01/19/2000 VMATT    CLEANED UP VPOITM03
// 02/04/00   SBUNGO   CHANGED TO USE VIEW VFCTY003
// 03/24/00   SBUNGO   CHANGED TO USE VIEW VPOITM05
// 08/02/00   RSELVA   Modified XSPCS05 for zeroing out of MADD
//                     from 20001012 onwards
// 12/21/00   RMURTH   Compiled for change in SGRP XSPCS07
//                     XSPCS07 modified to have hardcoded PADD
//                     for WHSE '51' and Origin USA for GPC 03
// 11/28/01   averma   Increased the length of the item seq nbr
//                     on the map from 3 to 4.Also removed the
//                     dimension code from the map to make
//                     space for the increased item seq nbr.
// 02/13/03   MNADEL   Remove range check for footwear po's
//                     in PC0M261.
// 07/10/02   spitch        compiled due to XSPCS07 changes
// 10/18/02   psarka       allow transfer from NY0P
// 10/27/03   averma    allow all PO numbers, irrespective of
//  the PO range.
// *********************
Program PC0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC0MW00 PC0MW00; // record
  PC0MW01 PC0MW01; // record
  PC0MW02 PC0MW02; // record
  PC0MW03 PC0MW03; // record
  PC0MW04 PC0MW04; // record
  PC0MW06 PC0MW06; // record
  PC4REC PC4REC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSEREC TSEREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PC9TBL {deleteAfterUse = yes}; // table
  use PC0MM.PC0MM001,  // forms
      PC0MM.PC0MM002, 
      PC0MM.PC0MM003, 
      PC0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0MM001 initial;
    set PC0MM002 initial;
    set PC0MM003 initial;
    set PC0MW00 empty;
    set PC0MW01 empty;
    set PC0MW02 empty;
    set PC0MW03 empty;
    set PC0MW04 empty;
    set VPRDCU03 empty;
    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM05 empty;
    set PCYREC empty;
    set VFCTY003 empty;
    set PG2REC empty;
    set TSTREC empty;
    set TSEREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;

    PC0MW00.PC0MWSWR = "Y"; /* ===>request for data*/
    PC0MW00.PC0MWSWF = "Y"; /* ===>format map switch*/
    PC0MW00.PC0MWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PC0MW00.PC0MWMOD = "N"; /* ===>MODified data flag*/
    PC0MW00.PC0MWMLT = "N"; /* ===>Multiple styles flag*/
    PC0MW00.PC0MWIXM = 1; /* ===>Map row index*/
    PC0MW00.PC0MWIXT = 1; /* ===>Temp row index for "Balance to*/
                                     /* ship"*/
    PC0MW00.PC0MWIXR = 1; /* ===>Row index for selected row to*/
                                     /* pass record*/

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[1] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0MW00.PC0MWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[2] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0MW00.PC0MWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[3] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0MW00.PC0MWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[7] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0MW00.PC0MWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07"
     && PCWREC.XGPCD != "  ")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PC0MW00.PC0MWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end

     /* ------------------------------------------------------------*/
     /* Load the PC system common pass data to the selection map*/
     /* and the selection map display record & Set requested map*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PC0L"
     || COMMAREA.CAFROMAP == "PC0E"
     || COMMAREA.CAFROMAP == "PC0J"
     || COMMAREA.CAFROMAP == "NY0P")

      move PCWREC to PC0MW01 byName; /* ===> load corresponding data "Display*/
                                     /* Rec 1"*/
      move PCWREC to PC0MM001 byName; /* ===> load corresponding data "Map 1"*/
      if (COMMAREA.CAFROMAP == "NY0P")
        PC0MW00.PC0MWSWM = "2"; /* ===>set  requested select map TO 2*/
      else
        PC0MW00.PC0MWSWM = "1"; /* ===>set  requested select map*/
      end

    else

      if (COMMAREA.CAFROMAP == "PC0K"
       || COMMAREA.CAFROMAP == "PC0N"
       || COMMAREA.CAFROMAP == "PC0R"
       || COMMAREA.CAFROMAP == "PC0U")

        /* ------------------------------------------------------------*/
        /* %GET XSPC003*/
         /* On reentry into your applicaton from a 'called'*/
         /* application find your appl id in the cafrommap*/
         /* array and use the corresponding pcwuser(n). Move*/
         /* spaces to the  cafromap field containing the name of*/
         /* the 'called' application.*/
        /* ------------------------------------------------------------*/

        if (PCWREC.CAFROMAP[1] == "PC0M")
          PC0MW04.PC0MWUSR = PCWREC.PCWUSER1;
          PCWREC.CAFROMAP[1] = " ";
          PCWREC.PCWUSER1 = " ";
          move PC0MW04 to PC0MW01 byName; /* ===> load corr data "Display Rec 1"*/
          move PC0MW04 to PC0MM001 byName; /* ===> load corr data "Map 1"*/
          if (PC0MW04.PC0MMPYR > " ") /* ===> Prod Yr present*/
            PC0MM001.PC3PONBR = 0; /* ===> Clear map field p.o. nbr*/
          end

        else
          if (PCWREC.CAFROMAP[2] == "PC0M")
            PC0MW04.PC0MWUSR = PCWREC.PCWUSER2;
            PCWREC.CAFROMAP[2] = " ";
            PCWREC.PCWUSER2 = " ";
            move PC0MW04 to PC0MW01 byName; /* ===> load corr data "Display Rec 1"*/
            move PC0MW04 to PC0MM001 byName; /* ===> load corr data "Map 1"*/
            if (PC0MW04.PC0MMPYR > " ") /* ===> Prod Yr present*/
              PC0MM001.PC3PONBR = 0; /* ===> Clear map field p.o. nbr*/
            end

          else
            if (PCWREC.CAFROMAP[3] == "PC0M")
              PC0MW04.PC0MWUSR = PCWREC.PCWUSER3;
              PCWREC.CAFROMAP[3] = " ";
              PCWREC.PCWUSER3 = " ";
              move PC0MW04 to PC0MW01 byName; /* ===> load corr data "Display Rec 1"*/
              move PC0MW04 to PC0MM001 byName; /* ===> load corr data "Map 1"*/
              if (PC0MW04.PC0MMPYR > " ") /* ===> Prod Yr present*/
                PC0MM001.PC3PONBR = 0; /* ===> Clear map field p.o. nbr*/
              end

            else
              if (PCWREC.CAFROMAP[4] == "PC0M")
                PC0MW04.PC0MWUSR = PCWREC.PCWUSER4;
                PCWREC.CAFROMAP[4] = " ";
                PCWREC.PCWUSER4 = " ";
                move PC0MW04 to PC0MW01 byName;
                                     /* ===> load corr data "Display Rec 1"*/
                move PC0MW04 to PC0MM001 byName; /* ===> load corr data "Map 1"*/
                if (PC0MW04.PC0MMPYR > " ") /* ===> Prod Yr present*/
                  PC0MM001.PC3PONBR = 0;
                                     /* ===> Clear map field p.o. nbr*/
                end

              else
                move PCWREC to PC0MW01 byName; /* ===> load corr data "Display Rec 1"*/
                move PCWREC to PC0MM001 byName; /* ===> load corr data "Map 1"*/

              end
            end
          end
        end

        if (PC0MW04.PC0MWSWM < "1"
         || PC0MW04.PC0MWSWM > "3")
          PC0MW00.PC0MWSWM = "1"; /* ===>set  requested select map*/
          PC0MW04.XXXTSPAG = 0; /* ===>set  requested page*/
        end

        if (PC0MW04.PC0MWSWM == "2"
         || COMMAREA.CAFROMAP == "PC0R")
          PC0MW00.PC0MWSWM = "2"; /* ===>set  requested left map*/
        end

        if (PC0MW04.PC0MWSWM == "3")
          PC0MW00.PC0MWSWM = "3"; /* ===>set requested right map*/
        end

      else /* ===> not from (PC0K,PC0N,PC0R,PC0U)*/

        if (COMMAREA.XGPCD > " ")
          PC0MM001.XGPCD = COMMAREA.XGPCD;
          PC0MW01.XGPCD = COMMAREA.XGPCD;
        else
          set PC0MM001.XGPCD cursor;
        end
        PC0MW00.PC0MWSWM = "1"; /* ===>set  requested select map*/

      end /* ===> from (PC0K,PC0N,PC0R,PC0U)*/

    end /* ===> from (PC0L,PC0E)*/

     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0M001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PC0M001: PC0M001();
    goto PC0M001;
  end // end main
end // end PC0M

// Application main line
Function PC0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.PC0MWXIT == "Y")

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PC0MW00.PC0MWSWF = "Y"; /* Format the map switch*/
    set PC0MM001 initial;
    set PC0MM001.CATOAP cursor, bold; /* Highlight*/
    set PC0MW01 empty; /* ==>reset map display record*/
    PC0MW01.XGPCD = COMMAREA.XGPCD;
    PC0MW00.PC0MWSWM = "1"; /* Map 1 was requested*/

  end

  if (PC0MW00.PC0MWSWM == "1") /* Map 1 was requested*/

    PC0M100(); /* ===> process Display map 1*/

  else

    if (PC0MW00.PC0MWSWM == "2" /* ===> Map 2 was requested*/
     || PC0MW00.PC0MWSWM == "3") /* ===> Map 3 was requested*/

      PC0M200(); /* ===> process Display map 2 or 3 logic*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PC0MW00.XXXPRCNM = "PC0M001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PC0MW00.PC0MWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PC0MW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PC0MW00.PC0MWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M001 ***********************/
end // end PC0M001

// ========>Process map 1 logic
Function PC0M100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0M120(); /* Format and display the map*/

  PC0M130(); /* Check attention identifier*/

  PC0M140(); /* Reset fields to normal intensity*/

  PC0M150(); /* Verify the entered data*/

  PC0M160(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0M100 ***********************/
end // end PC0M100

// -->Format and converse the map
Function PC0M120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0MW00.PC0MWSWF == "Y") /* Map must be formatted*/

      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the data in the map from the display storage.*/
      /* ------------------------------------------------------------*/

      PC0MM001.XGPCD = PC0MW01.XGPCD; /* GPC code*/
      /* MOVE PC0MW01.po-reg-cd TO PC0MM001.po-reg-cd;/* region code*/

      if (COMMAREA.CAILVL[5] == "Y") /* =======>Authorized for DIV 20 only*/
        set PC0MM001.YSMXDV skip; /* ====> Division Code*/
        PC0MM001.YSMXDV = "20"; /* division code*/
        PC0MW01.YSMXDV = "20"; /* division code*/
      else
        PC0MM001.YSMXDV = "10"; /* division code*/
        PC0MW01.YSMXDV = "10"; /* division code*/
      end

      PC0MM001.XDSCD = "*"; /* ship code*/
      PC0MW01.XDSCD = "*"; /* direct ship code*/
      PC0MM001.PC6STAT = "OP"; /* status*/
      PC0MW01.PC6STAT = "OP"; /* status*/

      if (COMMAREA.CAFROMAP == "NY0P")
        PC0MM001.PC6STAT = PCWREC.PC6STAT; /* status*/
        PC0MW01.PC6STAT = PCWREC.PC6STAT; /* status*/
        PC0MM001.YSMXDV = PCWREC.YSMXDV; /* division code*/
        PC0MW01.YSMXDV = PCWREC.YSMXDV; /* division code*/
      end

      if (PC0MW01.XGPCD == "02"
       && PC0MW01.PC3POIDT != 0
       && COMMAREA.CAFROMAP != "PC0J"
       && COMMAREA.CAFROMAP != "PC0E"
       && COMMAREA.CAFROMAP != "PC0L")
        PC0MW00.TA2GRGGN = PC0MW01.PC3POIDT; /* ===> numeric date*/
        PC0MW00.TA2GRGG = PC0MW00.PC0MWDT; /* ===> character date*/
        PC0MM001.PC0MMPYR = PC0MW00.PC0MMPYR;
        PC0MM001.PC0MMPMO = PC0MW00.PC0MMPMO;
        PC0MM001.PC0MMPDM = PC0MW00.PC0MMPDM;
      else
        PC0MM001.PC0MMPYR = " ";
        PC0MM001.PC0MMPMO = " ";
        PC0MM001.PC0MMPDM = " ";
        PC0MM001.FY1FCTYC = " ";
        PC0MM001.PC4ORTYP = " ";

      end

    end

  else /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0MM001.XXXPRCNM = PC0MW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (PCWREC.XXXMSGNO in PC9TBL.XXXMSGNO)
      /* NEXT SENTENCE*/
    else
      set PC0MM001 alarm; /* Indicate sound alarm*/
    end

  end

  converse PC0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0MW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0M121(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0MM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0M120 ***********************/
end // end PC0M120

// Check for ? inquiry by user
Function PC0M121()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0MM001.PC6STAT == "?" /* ===> if any ? entered*/
   || PC0MM001.XWHCD == "?"   
   || PC0MM001.YMTCD == "?"   
   || PC0MM001.XDSCD == "?"   
   || PC0MM001.XGPCD == "?"   
   || PC0MM001.XDMCD == "?"   
   || PC0MM001.XQACD == "?"   
   || PC0MM001.XOWCD == "?"   
   || PC0MM001.XPGCD == "?"   
   || PC0MM001.XUMCD == "?") 

    /* ------------------------------------------------------------*/
             /* STATUS CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC6STAT == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  STATUS CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPU01(); /* perform status code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.PC6STAT = PC0MW01.PC6STAT; /* ===> reset map field*/
      end
      set PC0MM001.PC6STAT cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XWHCD = PC0MW01.XWHCD; /* ===> reset map field*/
      end
      set PC0MM001.XWHCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.YMTCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.YMTCD = PC0MW01.YMTCD; /* ===> reset map field*/
      end
      set PC0MM001.YMTCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* DIRECT SHIP TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XDSCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIRECT SHIP TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDS01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XDSCD = PC0MW01.XDSCD; /* ===> reset map field*/
      end
      set PC0MM001.XDSCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
                   /* GPC CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XGPCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "       GPC TABLE          "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XGPCD = PC0MW01.XGPCD; /* ===> reset map field*/
      end
      set PC0MM001.XGPCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* DIMENSION TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIMENSION TABLE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XDMCD = PC0MW01.XDMCD; /* ===> reset map field*/
      end
      set PC0MM001.XDMCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* QUALITY TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XQACD = PC0MW01.XQACD; /* ===> reset map field*/
      end
      set PC0MM001.XQACD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
            /* OWNER GROUP CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XOWCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window initialize*/

      XX0XW02.XWHCD = PC0MM001.XWHCD; /* ===> reset map field*/
      XX0XW02.XX0XWHDR = " OWNER GROUP CODE TABLE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XOWCD = PC0MW01.XOWCD; /* ===> reset map field*/
      end
      set PC0MM001.XOWCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
             /* PACKAGE TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XPGCD == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  PACKAGE TYPE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XPGCD = PC0MW01.XPGCD; /* ===> reset map field*/
      end
      set PC0MM001.XPGCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
            /* UNIT OF MEASURE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XUMCD == "?") /* if ? in unit of measurefield*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " UNIT OF MEASURE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform unit of measure window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0MM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* move code*/
      else
        PC0MM001.XUMCD = PC0MW01.XUMCD; /* ===> reset map field*/
      end
      set PC0MM001.XUMCD cursor; /* ===> reset map field*/
    end

    converseLib.clearScreen();
     /* restore the original map*/

    converseLib.validationFailed(84); /* ===> press same key to process data*/

    exit stack; /* =====> exit to  display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M223 ***********************/
end // end PC0M121

// -->Check attention identifier
Function PC0M130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PC0MW00.PC0MWSWF = "Y"; /* Format the map switch*/
      set PC0MM001 initial;
      set PC0MM001.CATOAP cursor, bold; /* Highlight*/
      set PC0MW01 empty; /* ==>reset map display record*/
      PC0MW01.XGPCD = COMMAREA.XGPCD;
      PC0MW00.XXXPRCNM = "PC0M130"; /* Module identification*/

    else

      PC0MW00.XXXPRCNM = "PC0M130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5) /* or PF5  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0MM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PC0MW00.PC0MWSWF = "Y"; /* Format the map switch*/

    set PC0MM001 initial;
    set PC0MM001.CATOAP cursor, bold; /* Highlight*/
    PC0MW01.XGPCD = COMMAREA.XGPCD;
    PC0MW00.XXXPRCNM = "PC0M130"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PC0MW00.XXXPRCNM = "PC0M130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M130 ***********************/
end // end PC0M130

// -->Reset highlighted fields
Function PC0M140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0MM001.PC4ORTYP initialAttributes; /* P.O. Type code*/
   /* ==========>protect P.O. ID*/
  set PC0MM001.PC0MMPYR initialAttributes; /* ====> production year*/
  set PC0MM001.PC0MMPMO initialAttributes; /* ====> production month*/
  set PC0MM001.PC0MMPDM initialAttributes; /* ====> delivery month*/
  set PC0MM001.FY1FCTYC initialAttributes; /* ====> factory code*/

  set PC0MM001.XGPCD initialAttributes; /* GPC code*/
   /* SET PC0MM001.po-reg-cd DEFINED;    /* P.O. region*/
  set PC0MM001.PC3PONBR initialAttributes; /* P.O. Number*/
  set PC0MM001.XWHCD initialAttributes; /* warehouse code*/
  set PC0MM001.YMTCD initialAttributes; /* transportation mode*/
  set PC0MM001.PC2INSEG initialAttributes; /* spec diff code*/
  set PC0MM001.XQACD initialAttributes; /* quality code*/
  set PC0MM001.XOWCD initialAttributes; /* owner group code*/
  set PC0MM001.XPGCD initialAttributes; /* package type code*/
  set PC0MM001.XDMCD initialAttributes; /* dimension code*/
  set PC0MM001.XDSCD initialAttributes; /* direct ship code*/
  set PC0MM001.XUMCD initialAttributes; /* unit of measure code*/

  set PC0MM001.SY1STNBR initialAttributes; /* style number*/
  set PC0MM001.SY2CLRID initialAttributes; /* color code*/
  set PC0MM001.PC6PLAN initialAttributes; /* plan code*/
  set PC0MM001.PC6STAT initialAttributes; /* status code*/
  set PC0MM001.PC0MMETS initialAttributes; /* Est time of shipment display*/
  set PC0MM001.PC2CUXID initialAttributes; /* customer xref id*/

  set PC0MM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0MM001.CAITEM initialAttributes; /* Commarea application data*/

  if (COMMAREA.CAILVL[5] == "Y") /* =======> Authorized for DIV 20 only*/
    /* ============ Next Sentence =======>*/
  else
    set PC0MM001.YSMXDV initialAttributes; /* ====> Division Code*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0M140 ***********************/
end // end PC0M140

// -->Verify the entered data
Function PC0M150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0MW00.XXXPRCNM = "PC0M150"; /* Module identification*/
    set PC0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If unit of measure code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/
    if (PC0MM001.XUMCD != PC0MW01.XUMCD)
      PC0M151(); /* =========> package type code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If package type code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XPGCD != PC0MW01.XPGCD)
      PC0M152(); /* =========> package type code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If ISEG Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC2INSEG != PC0MW01.PC2INSEG)
      PC0M153(); /* =========> Verify ISEG Code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If owner group or warehouse changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XWHCD != PC0MW01.XWHCD
     || PC0MM001.XOWCD != PC0MW01.XOWCD)
      PC0M154(); /* =========> Verify owner group code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If quality was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XQACD != PC0MW01.XQACD) /* quality code*/
      PC0M155(); /* ===========> Verify quality code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XDMCD != PC0MW01.XDMCD) /* dimension code*/
      PC0M156(); /* ===========> Verify dimension code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.YSMXDV != PC0MW01.YSMXDV) /* division code*/
      PC0M157(); /* ===========> Verify division code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dist method changed, verify the entered code.*/
     /* If estemated time of shipment entered.*/
     /* If customer xref changed, verify the entered code.*/

      /* note: formated/grouped this way for map edit logic reasons*/
            /* for error displays to the user*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XDSCD != PC0MW01.XDSCD       
     || PC0MM001.PC2CUXID != PC0MW01.PC2CUXID /* customer xref id*/
     || PC0MM001.PC0MMETS != PC0MW01.PC0MMETS) /* est time of shipment*/

      PC0M158(); /* ===========> Verify xref-id on table*/

      if (PC0MM001.PC0MMETS != " "
       && PC0MW01.PC0MMETS != 000000)

        PC0M159(); /* ===========> Verify date*/

      end

      PC0M180(); /* =========> Verify dist method code*/

      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If trans mode changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.YMTCD != PC0MW01.YMTCD)
      PC0M181(); /* =========> Verify trans mode*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If warehouse was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XWHCD != PC0MW01.XWHCD)
      PC0M182(); /* =========> Verify warehouse code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC6STAT != PC0MW01.PC6STAT)
      PC0M183(); /* =========> Verify warehouse code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Plan was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC6PLAN != PC0MW01.PC6PLAN)
      PC0MW01.PC6PLAN = PC0MM001.PC6PLAN; /* ===>save in display rec*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If color code changed, verify the entered code.*/
     /* or related required fields changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.SY2CLRID != PC0MW01.SY2CLRID
     || PC0MM001.SY1STNBR != PC0MW01.SY1STNBR)
      PC0M184(); /* =========> Verify color code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.SY1STNBR != PC0MW01.SY1STNBR)
         /* OR PC0MM001.SY1STNBR EQ ' ';*/

      PC0M185(); /* =========> Verify style code*/
      /* MOVE 'Y' TO PC0MW00.PC0MWMOD       ;===> data modified*/

    end

    /* ------------------------------------------------------------*/
     /* If P.O. Number is not entered*/
     /* --->  verify P.O. TYPE and P.O. ID*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC3PONBR == 0)

      PC0M186(); /* =========> Verify P.O. Type code*/

      PC0M187(); /* =========> verify P.O. ID*/

    else

      /* ------------------------------------------------------------*/
      /* ====> verify  secondary key info not entered*/
      /* ------------------------------------------------------------*/

      if (PC0MM001.PC4ORTYP > " "
       || PC0MM001.PC0MMPYR > " "
       || PC0MM001.PC0MMPMO > " "
       || PC0MM001.PC0MMPDM > " "
       || PC0MM001.FY1FCTYC > " ")

        set PC0MM001.PC3PONBR cursor, bold;
        set PC0MM001.PC4ORTYP bold;
        set PC0MM001.PC0MMPYR bold;
        set PC0MM001.PC0MMPMO bold;
        set PC0MM001.PC0MMPDM bold;
        set PC0MM001.FY1FCTYC bold;
        PC0MW00.XXXPRCNM = "PC0M150"; /* Module identification*/
        converseLib.validationFailed(158); /* ===> cannot both primary and secondary key*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If GPC Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XGPCD != PC0MW01.XGPCD
     || PC0MM001.XGPCD == " ")

      PC0M190(); /* =========> Verify GPC Code & security*/

    end
    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

    /* ------------------------------------------------------------*/
     /* If P.O. Number was changed, verify the entered code.*/
     /* or is not entered, verify the data request.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC3PONBR != PC0MW01.PC3PONBR
     || PC0MM001.PC3PONBR == 0)

      PC0M191(); /* =========> Verify P.O. Number code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> data modified*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors occured above & P.O. Number = 0,*/
   /* then verify & obtain an unique P.O. Number from P.O. Header*/
   /* by use of the secondary key: ---> P.O.Type & P.O.ID/Factory*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC3PONBR == 0)

    PC0M192(); /* verify unique P.O. number*/

    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M150  **********************/
end // end PC0M150

// Verify Unit of Measure
Function PC0M151()
  if (PC0MM001.XUMCD == " ")
    PC0MW01.XUMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XUMCD = PC0MM001.XUMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M151"; /* Module identification*/
    set PC0MM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(56); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M151 ***********************/
end // end PC0M151

// Verify Package type
Function PC0M152()
  if (PC0MM001.XPGCD == " ")
    PC0MW01.XPGCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XPGCD = PC0MM001.XPGCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M152"; /* Module identification*/
    set PC0MM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(55); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M152 ***********************/
end // end PC0M152

// Verify ISEG Code
Function PC0M153()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC2INSEG == " ")
    PC0MW01.PC2INSEG = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* Row storage area*/

  VPRDCU03.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  VPRDCU03.PC2INSEG = PC0MM001.PC2INSEG; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("SG", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.PC2INSEG = PC0MM001.PC2INSEG;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0MM001.PC2INSEG cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      PC0MW00.XXXPRCNM = "PC0M153"; /* Module identification*/
      converseLib.validationFailed(51); /* ===> inventory segment code*/
                                   /* missing/invalid*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0MW00.XXXPRCNM = "PC0M153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M153 ***********************/
end // end PC0M153

// Verify Owner Group code
Function PC0M154()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XOWCD == " ")
    PC0MW01.XOWCD = " ";
    return;
  end

  if (PC0MM001.XOWCD == "00")
    PC0MW01.XOWCD = "00";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "N") /* and owner group flag set*/
      if (PC0MM001.XOWCD == "00")

        PC0MW01.XOWCD = "00";

      else

        PC0MW00.XXXPRCNM = "PC0M154"; /* Module identification*/
        set PC0MM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end

    end

    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* and owner group flag set*/

      PC0MW00.PC0MWWHC = PC0MM001.XWHCD;
      PC0MW00.PC0MWOWC = PC0MM001.XOWCD;

      if (PC0MW00.XOWKEY in XOWTBL.XOWKEY /* Code in table*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PC0MW01.XOWCD = PC0MM001.XOWCD;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0MW00.XXXPRCNM = "PC0M154"; /* Module identification*/
        set PC0MM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Indicate missing or invalid*/

      end

    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M154"; /* Module identification*/
    set PC0MM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(119); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M154 ***********************/
end // end PC0M154

// Verify Quality code
Function PC0M155()
  if (PC0MM001.XQACD == " ")
    PC0MW01.XQACD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XQACD = PC0MM001.XQACD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M155"; /* Module identification*/
    set PC0MM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M155 ***********************/
end // end PC0M155

// Verify Dimension code
Function PC0M156()
  if (PC0MM001.XDMCD == " ")
    PC0MW01.XDMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XDMCD = PC0MM001.XDMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M156"; /* Module identification*/
    set PC0MM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M156 ***********************/
end // end PC0M156

// Verify Division code
Function PC0M157()
  if (PC0MM001.YSMXDV == " ")
    PC0MW01.YSMXDV = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PC0MM001.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PC0M157";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine to verify division group*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PC0MW01.YSMXDV = PC0MM001.YSMXDV;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M157"; /* Module identification*/
    set PC0MM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M157 ***********************/
end // end PC0M157

// Verify Cust Xref ID
Function PC0M158()
   /* ------------------------------------------------------------*/
   /* Determine if the entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC2CUXID == " ")
    PC0MW01.PC2CUXID = " ";
    return;
  else

    if (PC0MM001.PC2INSEG > " "
     && PC0MM001.PC2CUXID != VPRDCU03.PC2CUXID)
      converseLib.clearScreen();
      
      set PC0MM001.PC2INSEG bold;
      set PC0MM001.PC2CUXID cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/
      PC0MW00.XXXPRCNM = "PC0M158"; /* Module identification*/
      converseLib.validationFailed(289); /* ===> Cust Xref does not match ISEG*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* Row storage area*/

  VPRDCU03.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  VPRDCU03.PC2CUXID = PC0MM001.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.PC2CUXID = PC0MM001.PC2CUXID;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0MM001.PC2CUXID cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      PC0MW00.XXXPRCNM = "PC0M158"; /* Module identification*/
      converseLib.validationFailed(45);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0MW00.XXXPRCNM = "PC0M158"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M158 ***********************/
end // end PC0M158

// Verify ETS 'date'
Function PC0M159()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested.*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMETS == " ")
    PC0MW01.PC0MMETS = " "; /* ===> clear ETS Date map record*/
    PC0MW01.PC6ETSDT = 0; /* ===> clear ETS Date display record*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "C"; /* ===>     move date type to record*/
                                   /* -->(mmddccyy)*/

  PC0MW01.PC0MMETS = PC0MM001.PC0MMETS; /* ===> save ETS Date display*/
  PC0MW00.PC0MWMM = PC0MW01.PC0MWMM; /* ===> ETS Date Month display*/
  PC0MW00.PC0MWDD = PC0MW01.PC0MWDD; /* ===> ETS Date Day   display*/
  PC0MW00.PC0MWYY = PC0MW01.PC0MWYY; /* ===> ETS Date Year  display*/
  if (PC0MW01.PC0MWYY > 85) /* ===> set up ETS Century*/
    PC0MW00.PC0MWCC = 19;
  else
    PC0MW00.PC0MWCC = 20;
  end

  TA2REC.TA2GRECN = PC0MW00.TA2GRECN; /* ===> move date -->(mmddccyy)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PC0MW01.PC6ETSDT = TA2REC.TA2GRGGN; /* ===> save ETS Date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW01.PC0MMETS = " "; /* ===> clear ETS Date map record*/
    PC0MW00.XXXPRCNM = "PC0M159"; /* Module identification*/
    set PC0MM001.PC0MMETS cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M159 ***********************/
end // end PC0M159

// -->Process valid input request
Function PC0M160()
  if (converseVar.eventKey is enter)

    PC0MW00.PC0MWSWM = "2"; /* ==>map requested*/
    PC0MW00.PC0MWSWR = "Y"; /* ==>request for data*/
    PC0MW00.PC0MWSWF = "Y"; /* ==>format map requested*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M180 ***********************/
end // end PC0M160

// Verify Dist Method Code
Function PC0M180()
   /* ------------------------------------------------------------*/
   /* Determine if the code is requested/entered*/
      /* and both related codes are not entered*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XDSCD == "*")
    PC0MW01.XDSCD = "*";
    return;
  end

  if (PC0MM001.XWHCD > " " /* Code entered*/
   && PC0MM001.PC2CUXID > " ") /* Code entered*/

    PC0MW00.XXXPRCNM = "PC0M180"; /* Module identification*/
    set PC0MM001.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(74); /* invalid*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XDSCD in XDSTBL.XDSCD /* Code in table*/
   && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XDSCD = PC0MM001.XDSCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M180"; /* Module identification*/
    set PC0MM001.XDSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(60); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M180 ***********************/
end // end PC0M180

// Verify Trans Mode
Function PC0M181()
   /* ------------------------------------------------------------*/
   /* Determine is reguested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.YMTCD == " ")
    PC0MW01.YMTCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.YMTCD in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.YMTCD = PC0MM001.YMTCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M181"; /* Module identification*/
    set PC0MM001.YMTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M181 ***********************/
end // end PC0M181

// Verify Warehouse
Function PC0M182()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XWHCD == " ")
    PC0MW01.XWHCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0MW01.XWHCD = PC0MM001.XWHCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M182"; /* Module identification*/
    set PC0MM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M182 ***********************/
end // end PC0M182

// Verify Status Code
Function PC0M183()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC6STAT == " ")
    PC0MW01.PC6STAT = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the request is for Status 'UX' or '*X'*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC6STAT == "*X") /* Request is for User Cancelled only*/

    if (PC0MM001.XGPCD == "03") /* Apparel only*/

      PC0MM001.PC6STAT = "CX"; /* Set to code in table*/

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table and status is active.*/
      /* ------------------------------------------------------------*/

      if (PC0MM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
       && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PC0MW01.PC6STAT = PC0MM001.PC6STAT;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0MW00.XXXPRCNM = "PC0M183"; /* Module identification*/
        set PC0MM001.PC6STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Indicate missing or invalid*/

      end

      PC0MM001.PC6STAT = "*X"; /* Set stat cd back to reqst*/

    else

      /* ------------------------------------------------------------*/
       /* If not apparel, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0MW00.XXXPRCNM = "PC0M183"; /* Module identification*/
      set PC0MM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PC0MW01.PC6STAT = PC0MM001.PC6STAT;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0MW00.XXXPRCNM = "PC0M183"; /* Module identification*/
      set PC0MM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M183 ***********************/
end // end PC0M183

// Verify Color Code
Function PC0M184()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.SY2CLRID == " ")

    PC0MW01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.SY1STNBR == " ")

    PC0MW00.XXXPRCNM = "PC0M184"; /* Module identification*/
    set PC0MM001.SY1STNBR cursor, bold; /* Highlight*/
    set PC0MM001.SY2CLRID bold; /* Highlight*/
    converseLib.validationFailed(52); /* data entry required*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PC0MM001.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PC0MM001.SY1STNBR; /* ===> style code*/

  if (PC0MW01.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PC0MM001.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.SY2CLRID = PC0MM001.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M184"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0MM001.SY2CLRID cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      converseLib.validationFailed(197); /* ===>style,color,dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PC0MM001.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0M184 ***********************/
end // end PC0M184

// Verify Style Code
Function PC0M185()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.SY1STNBR != PC0MW01.SY1STNBR)
    PC0MW00.PC0MWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.SY1STNBR == " ")

    PC0MW01.SY1STNBR = PC0MM001.SY1STNBR;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PC0MM001.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC0MW01.SY1STNBR = PC0MM001.SY1STNBR; /* ===> style code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/

  PC0MW00.XXXPRCNM = "PC0M185"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PC0MM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PC0MM001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PC0M185 ***********************/
end // end PC0M185

// Verify P.O.Type    (footwear)
Function PC0M186()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type modified.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC4ORTYP != PC0MW01.PC4ORTYP
   || PC0MM001.XGPCD != PC0MW01.XGPCD)

    if (PC0MM001.XGPCD == "03"
     && PC0MM001.PC4ORTYP != " ")

      PC0MW01.PC4ORTYP = " ";
      set PC0MM001.PC4ORTYP cursor, bold; /* Highlight*/
      PC0MW00.XXXPRCNM = "PC0M186"; /* Module identification*/
      converseLib.validationFailed(162); /* ===> can not be entered with GPC*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC4ORTYP == " ")

    if (PC0MM001.XGPCD == "02"
     || PC0MM001.XGPCD == "01"
     || PC0MM001.XGPCD == "07")
      set PC0MM001.PC4ORTYP cursor, bold; /* Highlight*/
      converseLib.validationFailed(110); /* data entry required*/
    else
      PC0MW01.PC4ORTYP = " "; /* ===> p.o. type code*/
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0MM001.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.PC4ORTYP = PC0MM001.PC4ORTYP; /* ===> p.o. type code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> modified data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0MM001.PC4ORTYP cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      PC0MW00.XXXPRCNM = "PC0M186"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0MW00.XXXPRCNM = "PC0M186"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M186 ***********************/
end // end PC0M186

// Verify the P.O. ID (footwear)
Function PC0M187()
   /* ------------------------------------------------------------*/
    /* if any P.O. ID fields  modified*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPYR != PC0MW01.PC0MMPYR /* ====> production year*/
   || PC0MM001.PC0MMPMO != PC0MW01.PC0MMPMO /* ====> production month*/
   || PC0MM001.PC0MMPDM != PC0MW01.PC0MMPDM /* ====> delivery month*/
   || PC0MM001.FY1FCTYC != PC0MW01.FY1FCTYC /* ====> factory code*/
   || PC0MM001.PC4ORTYP != PC0MW01.PC4ORTYP /* ====> order type*/
   || PC0MM001.XGPCD != PC0MW01.XGPCD)     

    if (PC0MM001.XGPCD == "03")

         /* IF PC0MM001.PC4ORTYP NE ' ' ;====> Highlight*/
           /* SET PC0MM001.PC4ORTYP CURSOR,BRIGHT;====> Highlight*/
         /* END ;*/

      if (PC0MM001.FY1FCTYC != " ") /* ====> factory code*/
        set PC0MM001.FY1FCTYC cursor, bold; /* Highlight*/
      end

      if (PC0MM001.PC0MMPDM != " ") /* ====> delivery month*/
        set PC0MM001.PC0MMPDM cursor, bold; /* Highlight*/
      end

      if (PC0MM001.PC0MMPMO != " ") /* ====> production month*/
        set PC0MM001.PC0MMPMO cursor, bold; /* Highlight*/
      end

      if (PC0MM001.PC0MMPYR != " ") /* ====> production year*/
        set PC0MM001.PC0MMPYR cursor, bold; /* Highlight*/
      end

      PC0MW01.PC0MMPYR = " ";
      PC0MW01.PC0MMPMO = " ";
      PC0MW01.PC0MMPDM = " ";
      PC0MW01.FY1FCTYC = " ";

      PC0MW00.XXXPRCNM = "PC0M187"; /* Module identification*/
      converseLib.validationFailed(162); /* can not be entered with GPC*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
    /* if any P.O. ID fields are left blank then error*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPYR == " " /* ====> production year*/
   || PC0MM001.PC0MMPMO == " " /* ====> production month*/
   || PC0MM001.PC0MMPDM == " " /* ====> delivery month*/
   || PC0MM001.FY1FCTYC == " " /* ====> factory code*/
   || PC0MM001.PC4ORTYP == " ") /* ====> order type*/

    if (PC0MM001.XGPCD == "02"
     || PC0MM001.XGPCD == "01"
     || PC0MM001.XGPCD == "07")
         /* SET PC0MM001.PC0MMPYR CURSOR,BRIGHT; Highlight*/
         /* SET PC0MM001.PC0MMPMO BRIGHT       ; Highlight*/
         /* SET PC0MM001.PC0MMPDM BRIGHT       ; Highlight*/
         /* SET PC0MM001.FY1FCTYC BRIGHT       ; Highlight*/
         /* SET PC0MM001.PC4ORTYP BRIGHT       ; Highlight*/

      PC0M188(); /* =====>verify factory code*/

      PC0M189(); /* =====>verify date*/

      PC0MW00.XXXPRCNM = "PC0M187"; /* Module identification*/
      converseLib.validationFailed(110); /* invalid*/
      return;

    else

      set PC0MM001.PC3PONBR cursor, bold; /* Highlight*/
      set PC0MM001.PC4ORTYP initialAttributes; /* reset field*/
      PC0MW00.XXXPRCNM = "PC0M187"; /* Module identification*/
      converseLib.validationFailed(35); /* P.O. Number must be entered*/
      return;

    end

  else /* ===> secondary key fields requested/entered*/

    PC0M188(); /* =====>verify factory code*/

    PC0M189(); /* =====>verify date*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M187 ***********************/
end // end PC0M187

// P.O. ID, factory   (footwear)
Function PC0M188()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VFCTY003 empty; /* Row storage area*/

  VFCTY003.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
  VFCTY003.FY1FCTYC = PC0MM001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.FY1FCTYC = PC0MM001.FY1FCTYC; /* ===> factory code*/
      PC0MW00.PC0MWMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0MM001.FY1FCTYC cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      PC0MW00.XXXPRCNM = "PC0M188"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0MW00.XXXPRCNM = "PC0M188"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* EZEFLO                          ; Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M188 ***********************/
end // end PC0M188

// P.O. ID, date      (footwear)
Function PC0M189()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Verify that the date yy & mm is valid and convert it to*/
      /* numeric form using TA0040*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPDM < "01" /* ====> production delivery month*/
   || PC0MM001.PC0MMPDM > "12") /* ====> production delevery month*/

    set PC0MM001.PC0MMPDM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PC0MM001.PC0MMPMO < "01" /* ====> production month*/
   || PC0MM001.PC0MMPMO > "12") /* ====> production month*/

    set PC0MM001.PC0MMPMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PC0MM001.PC0MMPYR > "99" /* ====> production year month*/
   || PC0MM001.PC0MMPYR < "00") /* ====> production year month*/

    set PC0MM001.PC0MMPYR cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum == 38 /* date error in P.O. ID*/
   || converseVar.validationMsgNum == 31) /* date error in P.O. ID*/
    PC0MW00.XXXPRCNM = "PC0M189"; /* Module identification*/
    return;
  end

   /* ===>set-up gregorian date in working storage*/

  PC0MW00.PC0MMPYR = PC0MM001.PC0MMPYR; /* ====> production year*/
  PC0MW00.PC0MMPMO = PC0MM001.PC0MMPMO; /* ====> production month*/
  PC0MW00.PC0MMPDM = PC0MM001.PC0MMPDM; /* ====> delivery month*/

  if (PC0MW00.PC0MMPYR > "85")
    PC0MW00.PC0MMPCC = "19"; /* ===>century*/
  else
    PC0MW00.PC0MMPCC = "20"; /* ===>century*/
  end

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ====> move date type to record-->(ccyymmdd)*/
  TA2REC.TA2GRGG = PC0MW00.TA2GRGG; /* ==> move production date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PC0MW01.PC0MMPYR = PC0MM001.PC0MMPYR; /* ====> production year*/
    PC0MW01.PC0MMPMO = PC0MM001.PC0MMPMO; /* ====> production month*/
    PC0MW01.PC0MMPDM = PC0MM001.PC0MMPDM; /* ====> delivery month*/
    PC0MW01.PC3POIDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    PC0MW00.PC0MWMOD = "Y"; /* ====> modified data flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0MW00.XXXPRCNM = "PC0M189"; /* Module identification*/
    set PC0MM001.PC0MMPYR cursor, bold; /* Highlight*/
    set PC0MM001.PC0MMPMO bold; /* Highlight*/
    set PC0MM001.PC0MMPDM bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M189 ***********************/
end // end PC0M189

// Verify GPC Code & security
Function PC0M190()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PC0MM001.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0MW00.XXXPRCNM = "PC0M190";
        return;
      end
    end
  end

  if (PC0MM001.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0MW00.XXXPRCNM = "PC0M190";
        return;
      end
    end
  end

  if (PC0MM001.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0MW00.XXXPRCNM = "PC0M190";
        return;
      end
    end
  end

  if (PC0MM001.XGPCD == "07") /* posters*/
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        PC0MW00.XXXPRCNM = "PC0M190";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XGPCD == "01"
   || PC0MM001.XGPCD == "02"
   || PC0MM001.XGPCD == "03"
   || PC0MM001.XGPCD == "07")

    PC0MW01.XGPCD = PC0MM001.XGPCD;
    COMMAREA.XGPCD = PC0MM001.XGPCD;

  else /* ===> not valid for this application*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0MM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(28); /* Indicate missing or invalid*/

    end /* ===> GPC in Table*/

    PC0MW00.XXXPRCNM = "PC0M190"; /* Module identification*/

  end /* ===> GPC in ('01','02','03','07') & valid*/

   /* **                                                        ***/
   /* ********************** End of PC0M190 ***********************/
end // end PC0M190

// Verify the P.O. Number
Function PC0M191()
   /* ------------------------------------------------------------*/
   /* check if P.O. number  field modified*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC3PONBR != PC0MW01.PC3PONBR)

    PC0MW00.PC0MWMOD = "Y";

  end

   /* ------------------------------------------------------------*/
   /* check if P.O. Number  0*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC3PONBR == 0)

    PC0MW01.PC3PONBR = 0; /* ===> p.o. number*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = PC0MM001.XGPCD; /* ===> GPC*/
   /* MOVE PC0Mm001.PO-REG-CD TO VPOHDR02.PO-REG-CD;/* ===> p.o. REGION CODE*/
  VPOHDR02.PC3PONBR = PC0MM001.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0MW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* ===> P.O. REGION CODE*/
      PC0MW01.PC3PONBR = VPOHDR02.PC3PONBR; /* ===> P.O. number*/
      PC0MW00.PC3POIDT = VPOHDR02.PC3POIDT; /* ===> P.O. ID Date*/
      PC0MW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* ===> P.O. order type*/
      PC0MW00.FY1FCTYC = VPOHDR02.FY1FCTYC; /* ===> factory code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0MM001.PC3PONBR cursor, bold;
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

      PC0MW00.XXXPRCNM = "PC0M191"; /* Module identification*/
      converseLib.validationFailed(69);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0MW00.XXXPRCNM = "PC0M191"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M191 ***********************/
end // end PC0M191

// Verify unique P.O. NBR 2nd key
Function PC0M192()
   /* ------------------------------------------------------------*/
   /* Initialize the secondary key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC0MW01.XGPCD;
  VPOHDR02.PC3POIDT = PC0MW01.PC3POIDT;
  VPOHDR02.FY1FCTYC = PC0MW01.FY1FCTYC;
  VPOHDR02.PC4ORTYP = PC0MW01.PC4ORTYP;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SA";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0MW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC0MW01.PC3PONBR = VPOHDR02.PC3PONBR;

    return; /* Return to previous process*/

  end

  PC0MW00.XXXPRCNM = "PC0M192"; /* Module identification*/
  set PC0MM001.PC0MMPYR cursor, bold; /* Highlight*/
  set PC0MM001.PC0MMPMO bold; /* Highlight*/
  set PC0MM001.PC0MMPDM bold; /* Highlight*/
  set PC0MM001.FY1FCTYC bold; /* Highlight*/
  set PC0MM001.PC4ORTYP bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -811)   /* and not unique*/

    converseLib.validationFailed(112); /* =======> mulituple P.O.'s*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0MM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0m192 ***********************/
end // end PC0M192

// ========>Process Map 2&3 logic
Function PC0M200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0M210(); /* Obtain the data to display*/

  PC0M220(); /* Format and display the map*/

  PC0M230(); /* Check attention identifier*/

  PC0M240(); /* Reset fields to normal intensity*/

  PC0M250(); /* Verify the entered data*/

  PC0M260(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0M200 ***********************/
end // end PC0M200

// -->Obtain the data to display
Function PC0M210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.PC0MWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PC0MW00.XXXTSLEN = 2054; /* Temporary storage page length*/
   /* ==> (13 display lines) * (158 length of display line) = 2054*/
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PC0M211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PC0MW02.XGPCD = PC0MM001.XGPCD; /* ===> GPC code*/

  if (COMMAREA.CAFROMAP == "NY0P")
    PC0MM001.PC6STAT = PCWREC.PC6STAT; /* status*/
    PC0MW01.PC6STAT = PCWREC.PC6STAT; /* status*/
    PC0MM001.YSMXDV = PCWREC.YSMXDV; /* division code*/
    PC0MW01.YSMXDV = PCWREC.YSMXDV; /* division code*/
    PC0MM001.XDSCD = "*"; /* direct ship code*/
    PC0MW01.XDSCD = "*"; /* direct ship code*/
         /**/
    if (PC0MW01.XGPCD == "02"
     && PC0MW01.PC3POIDT != 0)
      PC0MW00.TA2GRGGN = PC0MW01.PC3POIDT; /* ===> numeric date*/
      PC0MW00.TA2GRGG = PC0MW00.PC0MWDT; /* ===> character date*/
      PC0MM001.PC0MMPYR = PC0MW00.PC0MMPYR;
      PC0MM001.PC0MMPMO = PC0MW00.PC0MMPMO;
      PC0MM001.PC0MMPDM = PC0MW00.PC0MMPDM;
    else
      PC0MM001.PC0MMPYR = " ";
      PC0MM001.PC0MMPMO = " ";
      PC0MM001.PC0MMPDM = " ";
      PC0MM001.FY1FCTYC = " ";
      PC0MM001.PC4ORTYP = " ";

    end
  end
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Item Rows.*/
   /* ------------------------------------------------------------*/

  PC0M212(); /* ===> Select set and open cursor for items*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PC0M213(); /* ===> Fetch next selected row*/

  if (PC0MM001.PC6STAT > " ") /* ===> status selection specified*/

    PC0M216(); /* ===> Fetch next selected row loop*/

  end

  if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/

    PC0M219(); /* ===> Fetch next selected row loop*/

  end

  PC0MW01.PCFSECD = VPOITM05.PCFSECD;

  while (PC0MW00.PC0MWSWC == "N") /* ===> Until end of cursor*/

    set PC0MW03 empty; /* ===>reset the temp array*/

    if (PC0MM001.XGPCD == "03")
      if (PC0MM001.PC6STAT == " ")
        if (PC0MW06.PC6STAT == "CX"
         && PC0MW06.XXXUSRID > " ")
          PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/
          PC0M218(); /* =========> save data in temp array*/
        else
          if (PC0MW06.PC6STAT != "CX")
            PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/
            PC0M218(); /* =========> save data in temp array*/
          end
        end
      else
        if (PC0MM001.PC6STAT == "CX"
         && PC0MW06.XXXUSRID > " ")
          PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/
          PC0M218(); /* =========> save data in temp array*/
        else
          if (PC0MM001.PC6STAT != "CX")
            PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/
            PC0M218(); /* =========> save data in temp array*/
          end
        end
      end
    else
      PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/
      PC0M218(); /* =========> save data in temp array*/
    end

    PC0M217(); /* ===> read-next row loop until control break*/

    PC0MW00.PC0MWIXT = 1; /* ===> reset temp index for load*/

    while (PC0MW03.PC3PONBR[PC0MWIXT] > 0)

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (PC0MW00.PC0MWIXM <= 13) /* ===> Page has room for more rows*/
        PC0MW02.PC0MWRC2[PC0MWIXM] = PC0MW03.PC0MWRC2[PC0MWIXT];
        PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1; /* ===>temp-index*/
        PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM + 1; /* ===>row-index*/
      else
        PC0M214(); /* Add page to temporary storage*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.PC0MWIXM > 1) /* Page was formatted*/
    PC0M214(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC3POIDT = VPOITM05.PC3POIDT;
  PC0MW00.PC4ORTYP = VPOITM05.PC4ORTYP; /* ===> P.O. order type*/
  PC0MW00.FY1FCTYC = VPOITM05.FY1FCTYC; /* ===> factory code*/

  PC0M215(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* and redisplay Map 1*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0MW00.PC0MWSWM = "1"; /* ======>set map switch*/
    PC0MW00.PC0MWSWF = "N"; /* Request for data switch*/
    PC0MW00.XXXPRCNM = "PC0M210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PC0MM001.PC3PONBR cursor;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PC0MW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC0MWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0M210 ***********************/
end // end PC0M210

// purge any temporary storage
Function PC0M211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0MW02 empty; /* Map 2 & 3 display storage record*/

  PC0MW00.PC0MWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0MW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0MW00.XXXPRCNM = "PC0M211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  if (PC0MW00.PC0MWSWM == "2")
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  else
    TA1REC.TA1MAPNO = "M003"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M211 ***********************/
end // end PC0M211

// Select set & open ITEM cursor
Function PC0M212()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC0MWIXM = 1; /* Display line index*/
  PC0MW00.PC0MWSWC = "N"; /* End of cursor switch*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = PC0MW01.XGPCD;
  VPOITM05.PO-REG-CD = PC0MW01.PO-REG-CD;
  VPOITM05.PC3PONBR = PC0MW01.PC3PONBR;
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6CXNBR = -1;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XUMCD > " ")
    VPOITM05.XUMCD = PC0MW01.XUMCD;
  else
    VPOITM05.XUMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XPGCD > " ")
    VPOITM05.XPGCD = PC0MW01.XPGCD;
  else
    VPOITM05.XPGCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2INSEG > " ")
    VPOITM05.PC2INSEG = PC0MW01.PC2INSEG;
  else
    VPOITM05.PC2INSEG = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XOWCD > " ") /* owner group code*/
    VPOITM05.XOWCD = PC0MW01.XOWCD;
  else
    VPOITM05.XOWCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If quality, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XQACD > " ") /* quality code*/
    VPOITM05.XQACD = PC0MW01.XQACD;
  else
    VPOITM05.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If dimension, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDMCD > " ") /* dimension code*/
    VPOITM05.XDMCD = PC0MW01.XDMCD;
  else
    VPOITM05.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If division, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YSMXDV > " ") /* division code*/
    VPOITM05.YSMXDV = PC0MW01.YSMXDV;
  else
    VPOITM05.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer xref, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2CUXID > " ") /* customer xref id*/
    VPOITM05.PC2CUXID = PC0MW01.PC2CUXID;
  else
    VPOITM05.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If estemated time of shipment, load select record*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6ETSDT > 0) /* est time of shipment*/
    VPOITM05.PC6ETSDT = PC0MW01.PC6ETSDT;
  else
    VPOITM05.PC6ETSDT = -1;
  end

   /* ------------------------------------------------------------*/
      /* dist method, load select record.*/
   /* ------------------------------------------------------------*/

  VPOITM05.XDSCD = PC0MW01.XDSCD;

   /* ------------------------------------------------------------*/
   /* If trans mode, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YMTCD > " ")
    VPOITM05.YMTCD = PC0MW01.YMTCD;
  else
    VPOITM05.YMTCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XWHCD > " ")
    VPOITM05.XWHCD = PC0MW01.XWHCD;
  else
    VPOITM05.XWHCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If plan code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6PLAN > 0)
    VPOITM05.PC6PLAN = PC0MW01.PC6PLAN;
  else
    VPOITM05.PC6PLAN = -1;
  end

   /* ------------------------------------------------------------*/
   /* If color code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY2CLRID > " ")
    VPOITM05.SY2CLRID = PC0MW01.SY2CLRID;
  else
    VPOITM05.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If style code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY1STNBR > " ")
    VPOITM05.SY1STNBR = PC0MW01.SY1STNBR;
  else
    VPOITM05.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.XGPCD == "02"
   || VPOITM05.XGPCD == "01"
   || VPOITM05.XGPCD == "07")
    PCYREC.PCYFUNC = "S7";
  else
    PCYREC.PCYFUNC = "S8";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0MW00.XXXPRCNM = "PC0M212"; /* Module identification*/
  PC0MW00.PC0MWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0MW00.PC0MWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0MM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M212 ***********************/
end // end PC0M212

// Fetch next row in ITEM cursor
Function PC0M213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XGPCD == "02"
   || PC0MW01.XGPCD == "01"
   || PC0MW01.XGPCD == "07")
    PCYREC.PCYFUNC = "N7";
  else
    PCYREC.PCYFUNC = "N8";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* ------------------------------------------------------------*/
       /* Save the next record's control break data so the*/
           /* "Balance To Ship" values can be calculated*/
                      /* --->   Product*/
                      /* --->   Destination*/
      /* ------------------------------------------------------------*/

      PC0MS06(); /* ===> save copy of VPOITM05 in PC0MW06*/

      /* ============>PRODUCT FIELDS --  for next row record*/
      /* ============>--------------------------------------*/
      PC0MW00.SY1STNBR = VPOITM05.SY1STNBR; /* ===>*/
      PC0MW00.SY2CLRID = VPOITM05.SY2CLRID; /* ===>*/
      PC0MW00.XDMCD = VPOITM05.XDMCD; /* ===>*/
      PC0MW00.XQACD = VPOITM05.XQACD; /* ===>*/
      PC0MW00.XOWCD = VPOITM05.XOWCD; /* ===>*/
      PC0MW00.PC2INSEG = VPOITM05.PC2INSEG; /* ===>*/
      PC0MW00.XPGCD = VPOITM05.XPGCD; /* ===>*/
      PC0MW00.XUMCD = VPOITM05.XUMCD; /* ===>*/

      /* ============>DESTINATION FIELDS  -- for next row record*/
      /* ============>------------------------------------------*/
      PC0MW00.PC2CUXID = VPOITM05.PC2CUXID; /* ===>*/
      PC0MW00.XWHCD = VPOITM05.XWHCD; /* ===>*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0MW00.PC0MWSPD = " "; /* reset next product field*/
      PC0MW00.PC0MWSST = " "; /* reset nest destination field*/
      PC0MW00.PC0MWSWC = "Y"; /* Indicate end of cursor "ITEM"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0MW00.XXXPRCNM = "PC0M213"; /* Module identification*/
  PC0MW00.PC0MWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC0MW00.PC0MWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M213 ***********************/
end // end PC0M213

// Add page to temporary storage
Function PC0M214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0MW02.XXXTSLEN = PC0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0MW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0MW02 empty; /* M002 & M003 display storage*/

    PC0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0MW00.PC0MWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0MW00.XXXPRCNM = "PC0M214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M214 ***********************/
end // end PC0M214

// Close Select Set Item cursor
Function PC0M215()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XGPCD == "02"
   || PC0MW01.XGPCD == "01"
   || PC0MW01.XGPCD == "07")
    PCYREC.PCYFUNC = "C7";
  else
    PCYREC.PCYFUNC = "C8";
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0MW00.XXXPRCNM = "PC0M215"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0M215 ***********************/
end // end PC0M215

// fetch next row loop for status
Function PC0M216()
   /* ------------------------------------------------------------*/
   /* Fetch the data until matching status or end cursor*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6STAT == "*X")
    PC0MW01.PC6STAT = "CX";
  end

  while (VPOITM05.PC6STAT != PC0MW01.PC6STAT
   && PC0MW00.PC0MWSWC == "N") /* ===> Until end of cursor*/

    PC0M213(); /* ===> Fetch next selected row*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M216 ***********************/
end // end PC0M216

// process read-next record loop
Function PC0M217()
   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PC0M213(); /* ===> Fetch next selected row*/

  if (PC0MM001.PC6STAT > " ") /* ===> status selection specified*/
    PC0M216(); /* ===> Fetch next row loop for status*/
  end

  if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security flag set*/
    PC0M219(); /* ===> Fetch next selected row loop*/
  end

  while (PC0MW00.PC0MWSPD == PC0MW03.PC0MWPRD[PC0MWIXT]
   && PC0MW00.PC0MWSST == PC0MW03.PC0MWDST[PC0MWIXT]
   && PC0MW00.PC0MWSWC == "N") /* ===> Until end of cursor*/

    if (PC0MM001.XGPCD == "03") /* If apparell*/
      if (PC0MM001.PC6STAT == " ") /* If all statuses requested*/
        if (PC0MW06.PC6STAT == "CX" /* If status is cancelled*/
         && PC0MW06.XXXUSRID > " ") /* Then select only user can'd*/
          PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1;
          PC0M218(); /* =================> save data in temp array*/
        else
          if (PC0MW06.PC6STAT != "CX")
            PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1;
            PC0M218(); /* =================> save data in temp array*/
          end
        end
      else
        if (PC0MM001.PC6STAT == "CX"
         && PC0MW06.XXXUSRID > " ")
          PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1;
          PC0M218(); /* =================> save data in temp array*/
        else
          if (PC0MM001.PC6STAT != "CX")
            PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1;
            PC0M218(); /* =================> save data in temp array*/
          end
        end
      end
    else
      PC0MW00.PC0MWIXT = PC0MW00.PC0MWIXT + 1;
      PC0M218(); /* =================> save data in temp array*/
    end

    PC0M213(); /* ===> Fetch next selected row*/

    if (PC0MM001.PC6STAT > " ") /* ===> status selection specified*/
      PC0M216(); /* ===> Fetch next row loop for status*/
    end

    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security flag set*/
      PC0M219(); /* ===> Fetch next selected row loop*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M217 ***********************/
end // end PC0M217

// Save the data in temp array
Function PC0M218()
   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in temp array so "Balance to*/
   /* Ship" can be calculated on control break-->(product fields*/
                                  /* destination)*/
   /* ------------------------------------------------------------*/

  PC0MW03.XGPCD[PC0MWIXT] = PC0MW06.XGPCD; /* GPC Code*/
  PC0MW03.PO-REG-CD[PC0MWIXT] = PC0MW06.PO-REG-CD; /* PO REGION CODE*/
  PC0MW03.PC3PONBR[PC0MWIXT] = PC0MW06.PC3PONBR; /* PO Number*/
  PC0MW03.PC6ITMNB[PC0MWIXT] = PC0MW06.PC6ITMNB;
                                   /* PO Sequence number*/
  PC0MW03.XQACD[PC0MWIXT] = PC0MW06.XQACD;
                                   /* ===>part of product field*/
  PC0MW03.XUMCD[PC0MWIXT] = PC0MW06.XUMCD;
                                   /* ===>part of product field*/

   /* ------------------------------------------------------------*/
    /* Format the display record with Left map Info--> M002*/
   /* ------------------------------------------------------------*/

  PC0MW03.SY1STNBR[PC0MWIXT] = PC0MW06.SY1STNBR; /* ===> left map col: 2*/
  PC0MW03.SY2CLRID[PC0MWIXT] = PC0MW06.SY2CLRID; /* ===> left map col: 3*/
  PC0MW03.XDMCD[PC0MWIXT] = PC0MW06.XDMCD; /* ===> left map col: 4*/
  PC0MW03.PC6PLAN[PC0MWIXT] = PC0MW06.PC6PLAN; /* ===> left map col: 5*/
  if (PC0MM001.PC6STAT == "*X")
    if (PC0MW06.XXXUSRID == " ")
      PC0MW03.PC6STAT[PC0MWIXT] = PC0MW06.PC6STAT; /* ===>left map col: 6*/
    else
      PC0MW03.PC6STAT[PC0MWIXT] = "UX"; /* ===>left map col: 6*/
    end
  else
    PC0MW03.PC6STAT[PC0MWIXT] = PC0MW06.PC6STAT;
                                   /* ===>left map col: 6*/
  end
  PC0MW03.XWHCD[PC0MWIXT] = PC0MW06.XWHCD; /* ===> left map col: 7*/
  PC0MW03.YMTCD[PC0MWIXT] = PC0MW06.YMTCD; /* ===> left map col: 8*/
  PC0MW03.YSMXDV[PC0MWIXT] = PC0MW06.YSMXDV; /* ===> left map col: 9*/
  PC0MW03.XDSCD[PC0MWIXT] = PC0MW06.XDSCD; /* ===> left map col: 10*/
  PC0MW03.PC2CUXID[PC0MWIXT] = PC0MW06.PC2CUXID; /* ===> left map col: 11*/
  PC0MW03.XIB-IBANK-CD[PC0MWIXT] = PC0MW06.XIB-IBANK-CD; /* MAP COL:12*/
  PC0MW03.PC6ETSDT[PC0MWIXT] = PC0MW06.PC6ETSDT; /* ===> left map col: 13*/
   /* ---> ETAL  calc. below ===> left map col: 14*/
  PC0MW03.PC6OETAL[PC0MWIXT] = PC0MW06.PC6OETAL; /* ===> left map col: 14*/
  PC0MW03.PC6OETS[PC0MWIXT] = PC0MW06.PC6OETS;
                                   /* ===> left map col: 15*/
  PC0MW03.PC6TORDE[PC0MWIXT] = PC0MW06.PC6TORDE; /* ===> left map col: 16*/

   /* ------------------------------------------------------------*/
   /* ===> ETS date;===>  left map col: 12*/
   /* ------------------------------------------------------------*/
  if (PC0MW06.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PC0MW06.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0MS31(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/

      PC0MW00.PC0MWSWM = "1"; /* ===> map request switch*/
      PC0MW00.XXXPRCNM = "PC0M218"; /* Module identification*/
      converseLib.validationFailed(430); /* Indicate invalid ETS found*/
      exit stack; /* ===> exit to display map with date*/
                                  /* error*/
    end

    PC0MW03.PC0MMEST[PC0MWIXT] = TA2REC.TA2GRGA; /* ===>ETS Date display*/
  else
    PC0MW03.PC0MMEST[PC0MWIXT] = " "; /* ===>*/
  end

   /* ------------------------------------------------------------*/
   /* ===> Original ETS date;===>  left map col: 14*/
   /* ------------------------------------------------------------*/
  if (PC0MW06.PC6OETS != 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PC0MW06.PC6OETS; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0MS31(); /* ===> Call date calculation routine*/
    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/

      PC0MW00.PC0MWSWM = "1"; /* ===> map request switch*/
      PC0MW00.XXXPRCNM = "PC0M218"; /* Module identification*/
      converseLib.validationFailed(431); /* Indicate invalid ETS found*/
      exit stack; /* ===> exit to display map with date*/
    end /* error*/
    PC0MW03.PC0MMOET[PC0MWIXT] = TA2REC.TA2GRGA; /* ===>OETS Date display*/
  else
    PC0MW03.PC0MMOET[PC0MWIXT] = " "; /* ===>*/
  end

   /* ------------------------------------------------------------*/
   /* ===> Sales order/nike order  Right map*/
   /* ------------------------------------------------------------*/

  if (PC0MW06.OP1CUOID != 0)
    PC0MW00.PC0MWCOR = PC0MW06.OP1CUOID; /* Cust ord id*/
    PC0MW00.PC0MWDOT = "."; /* Dot*/
    PC0MW00.PC0MWNOR = PC0MW06.OP1NORID; /* Nike ord id*/
    PC0MW03.PC0MMSOR[PC0MWIXT] = PC0MW00.PC0MWORD; /* sales order/nike*/
  else
    PC0MW00.PC0MWORD = " ";
    PC0MW03.PC0MMSOR[PC0MWIXT] = " "; /* ===>*/
  end

   /* ------------------------------------------------------------*/
    /* Format the display record with Right map Info--> M003*/
   /* ------------------------------------------------------------*/

   /* SY1STNBR(PC0MWIXT);------->saved above ===> right map col: 2*/
   /* SY2CLRID(PC0MWIXT);------->saved above ===> right map col: 3*/
  PC0MW03.PC2INSEG[PC0MWIXT] = PC0MW06.PC2INSEG; /* ===> r map col: 4*/
  PC0MW03.XPGCD[PC0MWIXT] = PC0MW06.XPGCD; /* ===> right map col: 5*/
  PC0MW03.XOWCD[PC0MWIXT] = PC0MW06.XOWCD; /* ===> right map col: 6*/

  PC0MS11(); /* ==============> get style name &*/
                                   /* color desc*/
  PC0MW03.SY1SSTNM[PC0MWIXT] = PG2REC.SY1SSTNM;
                                   /* ==> right map col: 7*/
  PC0MW03.SY2CLRAB[PC0MWIXT] = PG2REC.SY2CLRAB;
                                   /* ==> right map col: 8*/

  PC0MW03.YOHCD[PC0MWIXT] = PC0MW06.YOHCD; /* ===> right map col: 9*/

   /* ------------------------------------------------------------*/
   /* ===> RTA date;===>  right map col: 12*/
   /* ------------------------------------------------------------*/
  if (PC0MW06.PC6RTADT > 0) /* ===> date present-->(ccyymmdd)*/

    set TA2REC empty;
    TA2REC.TA2GRGGN = PC0MW06.PC6RTADT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0MS31(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
      PC0MW00.PC0MWSWM = "1"; /* ===> map request switch*/
      PC0MW00.XXXPRCNM = "PC0M218"; /* Module identification*/
      converseLib.validationFailed(432); /* Indicate invalid ETS found*/
      exit stack; /* ===> exit to display map with date*/
    end
                                  /* error*/
    PC0MW03.PC0MMRTA[PC0MWIXT] = TA2REC.TA2GRGA; /* ===>RTA Date display*/

  else

    PC0MW03.PC0MMRTA[PC0MWIXT] = " "; /* ===>*/

  end

   /* ===> ship order;===>  right map col: 13*/
   /* ===> calculated after each control break*/

   /* ------------------------------------------------------------*/
   /* Always calculate ETAL, RTS, ETA.*/
     /* using XSPCS05*/
   /* ------------------------------------------------------------*/

  set PCPREC empty;

  PCPREC.XGPCD = PC0MW06.XGPCD;
  PCPREC.XWHCD = PC0MW06.XWHCD;
  PCPREC.PC2CUXID = PC0MW06.PC2CUXID;
  PCPREC.FY1FCTYC = PC0MW06.FY1FCTYC;
  PCPREC.YMTCD = PC0MW06.YMTCD;
  PCPREC.PC6RTADT = PC0MW06.PC6RTADT;
  PCPREC.PC6ETSDT = PC0MW06.PC6ETSDT;
  PCPREC.PCPPOIDT = VPOITM05.PC3POIDT;
  PCPREC.PC6ETALF = VPOITM05.PC6ETALF;
  PCPREC.PC4ORTYP = VPOITM05.PC4ORTYP;
  PCPREC.YSMXDV = VPOITM05.YSMXDV;

  XSPCS05(); /* ===> call date subroutine*/

   /* ------------------------------------------------------------*/
          /* ETA (estimated time of arrival - for PO items)*/
    /* PCPREC.PCPETADT  = ETA  date (ETS + MADD + ETT)*/
   /* ------------------------------------------------------------*/

  PC0MW03.PC0MWETA[PC0MWIXT] = PCPREC.PCPETADT; /* ===>ETA Date*/
  if (PCPREC.PCPETADT > 0) /* ===>ETA Date*/
    PC0MW03.PC0MMETA[PC0MWIXT] = PCPREC.PCPMETA; /* ===>ETA Date display*/
  end

   /* ------------------------------------------------------------*/
          /* RTS (requested time of shipment)*/
    /* PCPREC.PCPRTSDT  = RTS  date (RTA - ETT)*/
   /* ------------------------------------------------------------*/

  PC0MW03.PC0MMRTS[PC0MWIXT] = PCPREC.PCPMRTS; /* ===>RTS Date display*/

   /* ------------------------------------------------------------*/
   /* ===> ETAL override -----> left map col: 13*/
   /* ------------------------------------------------------------*/

  if (PC0MW06.PC6OETAL > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PC0MW06.PC6OETAL; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0MS31(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
      PC0MW00.PC0MWSWM = "1"; /* ===> map request switch*/
      PC0MW00.XXXPRCNM = "PC0M218"; /* Module identification*/
      converseLib.validationFailed(433); /* Indicate invalid ETS found*/
      exit stack; /* ===> exit to display map with date*/
    end /* error*/
    PC0MW03.PC0MMETL[PC0MWIXT] = TA2REC.TA2GRGA; /* ===>ETAL Date display*/
  else

    /* ------------------------------------------------------------*/
            /* ETAL (Estimated time of arrival)*/
      /* PCPREC.PCPETALD  = ETAL date (ETA + PADD)*/
    /* ------------------------------------------------------------*/

    PC0MW03.PC0MMETL[PC0MWIXT] = PCPREC.PCPMETAL;
                                   /* ===> ETAL Date display*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M218 ***********************/
end // end PC0M218

// fetch next row loop for D.S.
Function PC0M219()
   /* ------------------------------------------------------------*/
   /* Fetch the data until valid direct ship code is '1' or '2'*/
   /* ------------------------------------------------------------*/

  while (VPOITM05.XDSCD != "1" /* ===> direct ship whse only*/
   && VPOITM05.XDSCD != "2" /* ===> direct ship*/
   && PC0MW00.PC0MWSWC == "N") /* ===> Until end of cursor*/

    PC0M213(); /* ===> Fetch next selected row*/

    if (PC0MM001.PC6STAT > " ") /* ===> status selection specified*/

      PC0M216(); /* ===> Fetch next selected row loop*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M219 ***********************/
end // end PC0M219

// -->Format and converse map 2&3
Function PC0M220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0MW00.PC0MWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0MM002 initial;
      set PC0MM003 initial;

      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/
      /* ------------------------------------------------------------*/
       /* Format the LEFT AND RIGHT maps*/
      /* ------------------------------------------------------------*/

      PC0M221(); /* ===> Format the data from T.S.*/

      PC0M222(); /* ===> Format the literals*/

      PC0M223();
                                   /* ===> Format fields entered from map 1*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map (LEFT or RIGHT)*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.PC0MWSWM == "2")

    PC0M224(); /* ========> converse left half of list map*/

  else

    PC0M225(); /* =======> converse right half of list map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M220 ***********************/
end // end PC0M220

// Format the display data
Function PC0M221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (COMMAREA.CAFROMAP == "PC0K"
     || COMMAREA.CAFROMAP == "PC0N"
     || COMMAREA.CAFROMAP == "PC0R"
     || COMMAREA.CAFROMAP == "PC0U")

      if (PC0MW04.XXXTSPAG > 0) /* ===> desired page was passed*/
        PC0MW00.XXXTSPAG = PC0MW04.XXXTSPAG; /* ===>load desired page*/
        PC0MW04.XXXTSPAG = 0; /* ===>reset desired page*/
      end

    end

    if (PC0MW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PC0MW00.PC0MWSWU == "Y") /* Current page was changed*/

        PC0MS03(); /* Update temporary storage page*/

        PC0MW00.PC0MWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0MW00.XXXTSPAG > PC0MW00.TA5TSQIX) /* Desired > highest*/
        PC0MW00.XXXTSPAG = PC0MW00.TA5TSQIX; /* Default to highest*/
      end

      PC0MS04(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 25; /* ====> please select a line message*/
  PC0MW00.XXXPRCNM = "PC0M221"; /* Module identification*/

  PC0MW00.PC0MWIXM = 1; /* Initialize line index*/

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0MW00.PC0MWIXM <= 13 /* Until screen is full*/
   && PC0MW02.XGPCD[PC0MWIXM] > " ") /* or end of data*/

    /* ------------------------------------------------------------*/
     /* LEFT Map ---> M002*/
    /* ------------------------------------------------------------*/

    PC0MM002.PC0MMSEL[PC0MWIXM] = PC0MW02.PC0MMSEL[PC0MWIXM];
                                   /* => col: 1*/

    if (PC0MW02.PC0MWPRD[PC0MWIXM] != PC0MW00.PC0MWSPD
     || PC0MW02.PC0MWDST[PC0MWIXM] != PC0MW00.PC0MWSST
     || PC0MW00.PC0MWIXM == 1)

      PC0MM002.PC0MMSTY[PC0MWIXM] = PC0MW02.SY1STNBR[PC0MWIXM];
                                   /* => col: 2*/
      PC0MM002.PC0MMCOL[PC0MWIXM] = PC0MW02.SY2CLRID[PC0MWIXM];
                                   /* => col: 3*/
   /* MOVE PC0MW02.XDMCD(PC0MWIXM) PC0MM002.PC0MMDIM(PC0MWIXM);/* col: 4*/
    else
      PC0MM002.PC0MMSTY[PC0MWIXM] = " "; /* => col: 2*/
      PC0MM002.PC0MMCOL[PC0MWIXM] = " "; /* => col: 3*/
   /* MOVE ' ' TO PC0MM002.PC0MMDIM(PC0MWIXM);/* => col: 4*/
    end

    PC0MM002.PC0MMPLN[PC0MWIXM] = PC0MW02.PC6PLAN[PC0MWIXM]; /* => col: 5*/
    PC0MM003.PC0MMSOR[PC0MWIXM] = PC0MW02.PC0MMSOR[PC0MWIXM]; /* s.o.*/

    if (PC0MM001.PC6STAT == "*X")
      if (PC0MW06.XXXUSRID == " ")
        PC0MM002.PC0MMSTA[PC0MWIXM] = PC0MW02.PC6STAT[PC0MWIXM];
                                   /* => col: 6*/
      else
        PC0MM002.PC0MMSTA[PC0MWIXM] = "UX"; /* => col: 6*/
      end
    else
      PC0MM002.PC0MMSTA[PC0MWIXM] = PC0MW02.PC6STAT[PC0MWIXM];
                                   /* => col: 6*/
    end
    PC0MM002.PC0MMISQ[PC0MWIXM] = PC0MW02.PC6ITMNB[PC0MWIXM];
    PC0MM002.PC0MMWHS[PC0MWIXM] = PC0MW02.XWHCD[PC0MWIXM];
                                   /* => col: 7*/
    PC0MM002.PC0MMMOD[PC0MWIXM] = PC0MW02.YMTCD[PC0MWIXM];
                                   /* => col: 8*/
    PC0MM002.PC0MMDIV[PC0MWIXM] = PC0MW02.YSMXDV[PC0MWIXM]; /* => col: 9*/
    PC0MM002.PC0MMDIR[PC0MWIXM] = PC0MW02.XDSCD[PC0MWIXM]; /* => col: 10*/
    PC0MM002.PC0MMCUS[PC0MWIXM] = PC0MW02.PC2CUXID[PC0MWIXM];
                                   /* => col: 11*/
    PC0MM002.PC0MMBNK[PC0MWIXM] = PC0MW02.XIB-IBANK-CD[PC0MWIXM];
                                   /* => col: 12*/
    PC0MM002.PC0MMEST[PC0MWIXM] = PC0MW02.PC0MMEST[PC0MWIXM];
                                   /* => col: 13*/
    PC0MM002.PC0MMETL[PC0MWIXM] = PC0MW02.PC0MMETL[PC0MWIXM];
                                   /* => col 14*/

    /* ------------------------------------------------------------*/
     /* non-apparel users do not use original ETS date and they*/
     /* request that the RTA date to replace it.*/
    /* ------------------------------------------------------------*/

    if (PC0MW01.XGPCD == "03")
      PC0MM002.PC0MMOET[PC0MWIXM] = PC0MW02.PC0MMOET[PC0MWIXM];
                                   /* => col: 15*/
    else /* ===> load RTA date*/
      PC0MM002.PC0MMOET[PC0MWIXM] = PC0MW02.PC0MMRTA[PC0MWIXM];
                                   /* =>RTA Date*/
    end

    PC0MM002.PC0MMORD[PC0MWIXM] = PC0MW02.PC6TORDE[PC0MWIXM];
                                   /* => col: 16*/

    if (PC0MW02.PC6OETAL[PC0MWIXM] > 0) /* ===> ETAL override date*/
      set PC0MM002.PC0MMETL[PC0MWIXM] skip, bold; /* ===>*/
    else
      set PC0MM002.PC0MMETL[PC0MWIXM] initialAttributes; /* ===>*/
    end

    /* ------------------------------------------------------------*/
     /* RIGHT Map ---> M003*/
    /* ------------------------------------------------------------*/

    PC0MM003.PC0MMSEL[PC0MWIXM] = PC0MW02.PC0MMSEL[PC0MWIXM];
                                   /* => col: 1*/

    if (PC0MW02.PC0MWPRD[PC0MWIXM] != PC0MW00.PC0MWSPD
     || PC0MW02.PC0MWDST[PC0MWIXM] != PC0MW00.PC0MWSST
     || PC0MW00.PC0MWIXM == 1)

      PC0MM003.PC0MMSTY[PC0MWIXM] = PC0MW02.SY1STNBR[PC0MWIXM];
                                   /* => col: 2*/
      PC0MM003.PC0MMCOL[PC0MWIXM] = PC0MW02.SY2CLRID[PC0MWIXM];
                                   /* => col: 3*/
      PC0MM003.PC0MMSPC[PC0MWIXM] = PC0MW02.PC2INSEG[PC0MWIXM];
                                   /* => col: 4*/
      PC0MM003.PC0MMPKG[PC0MWIXM] = PC0MW02.XPGCD[PC0MWIXM]; /* => col: 5*/
      PC0MM003.PC0MMOWN[PC0MWIXM] = PC0MW02.XOWCD[PC0MWIXM]; /* => col: 6*/
      PC0MM003.PC0MMSNM[PC0MWIXM] = PC0MW02.SY1SSTNM[PC0MWIXM];
                                   /* => col: 7*/
      PC0MM003.PC0MMCNM[PC0MWIXM] = PC0MW02.SY2CLRAB[PC0MWIXM];
                                   /* => col: 8*/

    else

      PC0MM003.PC0MMSTY[PC0MWIXM] = " "; /* => col: 2*/
      PC0MM003.PC0MMCOL[PC0MWIXM] = " "; /* => col: 3*/
      PC0MM003.PC0MMSPC[PC0MWIXM] = " "; /* => col: 4*/
      PC0MM003.PC0MMPKG[PC0MWIXM] = " "; /* => col: 5*/
      PC0MM003.PC0MMOWN[PC0MWIXM] = " "; /* => col: 6*/
      PC0MM003.PC0MMSNM[PC0MWIXM] = " "; /* => col: 7*/
      PC0MM003.PC0MMCNM[PC0MWIXM] = " "; /* => col: 8*/

    end

    PC0MM003.PC0MMHLD[PC0MWIXM] = PC0MW02.YOHCD[PC0MWIXM];
                                   /* => col: 9*/
    /* => RTS date;=>  col: 10*/
    PC0MM003.PC0MMRTS[PC0MWIXM] = PC0MW02.PC0MMRTS[PC0MWIXM];
                                   /* =>RTS Date*/
    /* => ETA date;=>  col: 11*/
    PC0MM003.PC0MMETA[PC0MWIXM] = PC0MW02.PC0MMETA[PC0MWIXM];
    /* => RTA date;=>  col: 12*/
    PC0MM003.PC0MMRTA[PC0MWIXM] = PC0MW02.PC0MMRTA[PC0MWIXM];
                                   /* =>RTA Date*/

    PC0MM003.PC0MMORD[PC0MWIXM] = PC0MW02.PC6TORDE[PC0MWIXM]; /* =>col:13*/

    PC0MW00.PC0MWSPD = PC0MW02.PC0MWPRD[PC0MWIXM];
    PC0MW00.PC0MWSST = PC0MW02.PC0MWDST[PC0MWIXM];

    PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map selection fields askip*/
   /* ------------------------------------------------------------*/

  while (PC0MW00.PC0MWIXM <= 13) /* Until screen is full*/

    set PC0MM002.PC0MMSEL[PC0MWIXM] skip, invisible;
    set PC0MM003.PC0MMSEL[PC0MWIXM] skip, invisible;

    PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is not*/
   /* authorized to perform various functions.*/
   /* ------------------------------------------------------------*/

   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* iF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* iF PCWREC.XGPCD EQ '07';*/
    /* IF COMMAREA.CACLVL(7) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* **                                                        ***/
   /* ********************** End of PC0M221 ***********************/
end // end PC0M221

// Format the display literals
Function PC0M222()
   /* ------------------------------------------------------------*/
   /* Display the page information on both of the screens*/
   /* ------------------------------------------------------------*/

  set PC0MM002.XXXLITPG skip; /* "PAGE" literal*/
  set PC0MM003.XXXLITPG skip; /* "PAGE" literal*/
  set PC0MM002.XXXTSPAG skip; /* "Current PAGE" value*/
  set PC0MM003.XXXTSPAG skip; /* "Current PAGE" value*/
  set PC0MM002.XXXLITOF skip; /* "OF" literal*/
  set PC0MM003.XXXLITOF skip; /* "OF" literal*/
  set PC0MM002.TA5TSQIX skip; /* "Highest PAGE" value*/
  set PC0MM003.TA5TSQIX skip; /* "Highest PAGE" value*/
  PC0MM002.XXXTSPAG = PC0MW00.XXXTSPAG; /* Current page*/
  PC0MM003.XXXTSPAG = PC0MW00.XXXTSPAG; /* Current page*/
  PC0MM002.TA5TSQIX = PC0MW00.TA5TSQIX; /* Highest page*/
  PC0MM003.TA5TSQIX = PC0MW00.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is not*/
   /* authorized to perform various functions.*/
   /* ------------------------------------------------------------*/

   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* iF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* SET PC0MM002.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM002.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
      /* SET PC0MM003.PC0MMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0MM003.PC0MMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* ------------------------------------------------------------*/
   /* Set the split PF key (PF20) DARK for POs of LP PO-TYPE*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02" && 
  PC0MW00.PC4ORTYP == "LP")
    set PC0MM002.PC0MMSPL skip, invisible; /* ====> spl literal*/
    set PC0MM003.PC0MMSPL skip, invisible; /* ====> spl literal*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0M222 ***********************/
end // end PC0M222

// format the map header data
Function PC0M223()
  PC0MM002.XGPCD = PC0MW01.XGPCD;
  set PC0MM002.XGPCD skip, bold;
  PC0MM003.XGPCD = PC0MW01.XGPCD;
  set PC0MM003.XGPCD skip, bold;

   /* ------------------------------------------------------------*/
   /* If Unit of measure code, load map & display <ecord*/
   /* ------------------------------------------------------------*/
  if (PC0MW01.XUMCD > " ")
    PC0MM002.XUMCD = PC0MW01.XUMCD;
    set PC0MM002.XUMCD skip, bold;
    PC0MM003.XUMCD = PC0MW01.XUMCD;
    set PC0MM003.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XPGCD > " ")
    PC0MM002.XPGCD = PC0MW01.XPGCD;
    set PC0MM002.XPGCD skip, bold;
    PC0MM003.XPGCD = PC0MW01.XPGCD;
    set PC0MM003.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2INSEG > " ")
    PC0MM002.PC2INSEG = PC0MW01.PC2INSEG;
    set PC0MM002.PC2INSEG skip, bold;
    PC0MM003.PC2INSEG = PC0MW01.PC2INSEG;
    set PC0MM003.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XOWCD > " ") /* owner group code*/
    PC0MM002.XOWCD = PC0MW01.XOWCD;
    set PC0MM002.XOWCD skip, bold;
    PC0MM003.XOWCD = PC0MW01.XOWCD;
    set PC0MM003.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XQACD > " ") /* quality code*/
    PC0MM002.XQACD = PC0MW01.XQACD;
    set PC0MM002.XQACD skip, bold;
    PC0MM003.XQACD = PC0MW01.XQACD;
    set PC0MM003.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDMCD > " ")
    PC0MM002.XDMCD = PC0MW01.XDMCD;
    set PC0MM002.XDMCD skip, bold;
    PC0MM003.XDMCD = PC0MW01.XDMCD;
    set PC0MM003.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YSMXDV > " ")
    PC0MM002.YSMXDV = PC0MW01.YSMXDV;
    set PC0MM002.YSMXDV skip, bold;
    PC0MM003.YSMXDV = PC0MW01.YSMXDV;
    set PC0MM003.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2CUXID > " ")
    PC0MM002.PC2CUXID = PC0MW01.PC2CUXID;
    set PC0MM002.PC2CUXID skip, bold;
    PC0MM003.PC2CUXID = PC0MW01.PC2CUXID;
    set PC0MM003.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, load map & display record*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6ETSDT > 0)

    if (COMMAREA.CAFROMAP == "PC0K") /* ==> return from lower level*/
      set TA2REC empty;
      TA2REC.TA2GRGGN = PC0MW01.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
      TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
      PC0MS31(); /* ===> Call date calculation routine*/

      if (TA2REC.TA2RTNCD != 0) /* invalid date entered*/
        PC0MW00.PC0MWSWM = "1"; /* ===> map request switch*/
        PC0MW00.XXXPRCNM = "PC0M223"; /* Module identification*/
        converseLib.validationFailed(430); /* Indicate missing or invalid*/
        exit stack; /* ===> exit to display map with date*/
                                   /* error*/
      end

      PC0MM001.PC0MMETS = TA2REC.TA2GRGA; /* ===>ETS Date display*/
    end

    PC0MM002.PC0MMETS = PC0MM001.PC0MMETS;
    set PC0MM002.PC0MMETS skip, bold;
    PC0MM003.PC0MMETS = PC0MM001.PC0MMETS;
    set PC0MM003.PC0MMETS skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Dist method, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDSCD > " ")
    PC0MM002.XDSCD = PC0MW01.XDSCD;
    set PC0MM002.XDSCD skip, bold;
    PC0MM003.XDSCD = PC0MW01.XDSCD;
    set PC0MM003.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YMTCD > " ")
    PC0MM002.YMTCD = PC0MW01.YMTCD;
    set PC0MM002.YMTCD skip, bold;
    PC0MM003.YMTCD = PC0MW01.YMTCD;
    set PC0MM003.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XWHCD > " ")
    PC0MM002.XWHCD = PC0MW01.XWHCD;
    set PC0MM002.XWHCD skip, bold;
    PC0MM003.XWHCD = PC0MW01.XWHCD;
    set PC0MM003.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6PLAN > 0)
    PC0MM002.PC6PLAN = PC0MW01.PC6PLAN;
    set PC0MM002.PC6PLAN skip, bold;
    PC0MM003.PC6PLAN = PC0MW01.PC6PLAN;
    set PC0MM003.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Status, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6STAT > " ")
    if (PC0MM001.PC6STAT == "*X")
      PC0MM002.PC6STAT = "*X";
      PC0MM003.PC6STAT = "*X";
    else
      PC0MM002.PC6STAT = PC0MW01.PC6STAT;
      PC0MM003.PC6STAT = PC0MW01.PC6STAT;
    end
    set PC0MM002.PC6STAT skip, bold;
    set PC0MM003.PC6STAT skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY2CLRID > " ")
    PC0MM002.SY2CLRID = PC0MW01.SY2CLRID;
    set PC0MM002.SY2CLRID skip, bold;
    PC0MM003.SY2CLRID = PC0MW01.SY2CLRID;
    set PC0MM003.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY1STNBR > " ")
    PC0MM002.SY1STNBR = PC0MW01.SY1STNBR;
    set PC0MM002.SY1STNBR skip, bold;
    PC0MM003.SY1STNBR = PC0MW01.SY1STNBR;
    set PC0MM003.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If PO ID, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPYR > " ")

    if (PC0MW01.XGPCD == "03")
      PC0MM002.PC0MMPYR = PC0MW01.PCFSECD;
      set PC0MM002.PC0MMPYR skip, bold;
      PC0MM003.PC0MMPYR = PC0MW01.PCFSECD;
      set PC0MM003.PC0MMPYR skip, bold;
    else
      PC0MM002.PC0MMPYR = PC0MW01.PC0MMPYR;
      set PC0MM002.PC0MMPYR skip, bold;
      PC0MM003.PC0MMPYR = PC0MW01.PC0MMPYR;
      set PC0MM003.PC0MMPYR skip, bold;
    end

    PC0MM002.PC0MMPMO = PC0MW01.PC0MMPMO;
    set PC0MM002.PC0MMPMO skip, bold;
    PC0MM003.PC0MMPMO = PC0MW01.PC0MMPMO;
    set PC0MM003.PC0MMPMO skip, bold;

    PC0MM002.PC0MMPDM = PC0MW01.PC0MMPDM;
    set PC0MM002.PC0MMPDM skip, bold;
    PC0MM003.PC0MMPDM = PC0MW01.PC0MMPDM;
    set PC0MM003.PC0MMPDM skip, bold;

  else

    PC0MW00.TA2GRGGN = PC0MW00.PC3POIDT;
    PC0MW00.TA2GRGG = PC0MW00.PC0MWDT;

    if (PC0MW01.XGPCD == "03")
      PC0MM002.PC0MMPYR = PC0MW01.PCFSECD;
      PC0MM003.PC0MMPYR = PC0MW01.PCFSECD;
    else
      PC0MM002.PC0MMPYR = PC0MW00.PC0MMPYR;
      PC0MM003.PC0MMPYR = PC0MW00.PC0MMPYR;
    end

    PC0MM002.PC0MMPMO = PC0MW00.PC0MMPMO;
    PC0MM003.PC0MMPMO = PC0MW00.PC0MMPMO;

    PC0MM002.PC0MMPDM = PC0MW00.PC0MMPDM;
    PC0MM003.PC0MMPDM = PC0MW00.PC0MMPDM;

  end

   /* ------------------------------------------------------------*/
   /* If Factory , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.FY1FCTYC > " ")

    PC0MM002.FY1FCTYC = PC0MW01.FY1FCTYC;
    set PC0MM002.FY1FCTYC skip, bold;
    PC0MM003.FY1FCTYC = PC0MW01.FY1FCTYC;
    set PC0MM003.FY1FCTYC skip, bold;

  else

    PC0MM002.FY1FCTYC = PC0MW00.FY1FCTYC;
    PC0MM003.FY1FCTYC = PC0MW00.FY1FCTYC;

  end

   /* ------------------------------------------------------------*/
   /* If Order type , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC4ORTYP > " ")

    PC0MM002.PC4ORTYP = PC0MW01.PC4ORTYP;
    set PC0MM002.PC4ORTYP skip, bold;
    PC0MM003.PC4ORTYP = PC0MW01.PC4ORTYP;
    set PC0MM003.PC4ORTYP skip, bold;

  else

    PC0MM002.PC4ORTYP = PC0MW00.PC4ORTYP;
    PC0MM003.PC4ORTYP = PC0MW00.PC4ORTYP;

  end

   /* ------------------------------------------------------------*/
   /* If P.O. Number, always valued, load map & display record*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPYR > " ")

    /* MOVE PC0MW01.po-reg-cd TO PC0MM002.po-reg-cd;*/
    /* MOVE PC0MW01.po-reg-cd TO PC0MM003.po-reg-cd;*/
    PC0MM002.PC3PONBR = PC0MW01.PC3PONBR;
    PC0MM003.PC3PONBR = PC0MW01.PC3PONBR;

  else

    /* MOVE PC0MW01.po-reg-cd TO PC0MM002.po-reg-cd;*/
    /* SET PC0MM002.po-reg-cd AUTOSKIP,BRIGHT;*/
    /* MOVE PC0MW01.po-reg-cd TO PC0MM003.po-reg-cd;*/
    /* SET PC0MM003.po-reg-cd AUTOSKIP,BRIGHT;*/
    PC0MM002.PC3PONBR = PC0MW01.PC3PONBR;
    set PC0MM002.PC3PONBR skip, bold;
    PC0MM003.PC3PONBR = PC0MW01.PC3PONBR;
    set PC0MM003.PC3PONBR skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* hide rta, rts literals for Apparel*/
   /* replace orig ETS literals with RTA date for Footwear*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.XGPCD == "03")
    set PC0MM003.PC0MMRSL protect, invisible;
    set PC0MM003.PC0MMRAL protect, invisible;
    set PC0MM002.PC0MMLT1 initialAttributes; /* ===> set up original ETS date literal*/
    PC0MM002.PC0MMLT2 = "-ETS-"; /* ===> set up original ETS date literal*/
  else
    set PC0MM002.PC0MMLT1 skip, invisible; /* ===> hide original literal*/
    PC0MM002.PC0MMLT2 = "-RTA- "; /* ===> set up RTA date literal*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0M223 ***********************/
end // end PC0M223

// converse left half (List Map)
Function PC0M224()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0MM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0MM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0MM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0MM002.XXXPRCNM = PC0MW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (PCWREC.XXXMSGNO in PC9TBL.XXXMSGNO)
      /* NEXT SENTENCE*/
    else
      set PC0MM002 alarm; /* Indicate sound alarm*/
    end

  end

  converse PC0MM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0MW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0MM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0MM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0M224 ***********************/
end // end PC0M224

// converse right half (List Map)
Function PC0M225()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0MM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0MM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0MM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0MM003.XXXPRCNM = PC0MW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (PCWREC.XXXMSGNO in PC9TBL.XXXMSGNO)
      /* NEXT SENTENCE         /* DON'T SOUND ALARM*/
    else
      set PC0MM003 alarm; /* Indicate sound alarm*/
    end

  end

  converse PC0MM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0MW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0MM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0MM003.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0M225 ***********************/
end // end PC0M225

// -->Check attention identifier
Function PC0M230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0MW00.PC0MWSWR == "Y") /* Request for data*/
      set PC0MW02 empty; /* M002 display storage*/
      set PC0MW03 empty; /* M003 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/
    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/
    PC0MW00.PC0MWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0MM002.CATOAP > " " /* FAST PATH was requested*/
   || PC0MM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PC0M211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PC0MM001 initial;
      set PC0MM001.CATOAP cursor, bold; /* Highlight*/
      PC0MM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/

      PC0MW00.PC0MWSWM = "1"; /* request for map switch*/
      PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/
      PC0MW00.PC0MWSWR = "N"; /* Request for data switch*/

    else

      PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0MM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    PC0M211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PC0MM001 initial;
    set PC0MM001.CATOAP cursor, bold; /* Highlight*/
    PC0MM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/

    PC0MW00.PC0MWSWM = "1"; /* request for map switch*/
    PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/
    PC0MW00.PC0MWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, check invalid PF key*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* Scroll left request*/
   && PC0MW00.PC0MWSWM == "2")     /* and presently in left map*/

    PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/
    converseLib.validationFailed(4); /* invalid PF Key*/
    converseLib.clearScreen();
    
    set PC0MM002.PC0MMSEL[1] cursor;
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll right was requested, check invalid PF Key*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && PC0MW00.PC0MWSWM == "3")     /* and presently in right map*/

    PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/
    converseLib.validationFailed(4); /* invalid PF Key*/
    converseLib.clearScreen();
    
    set PC0MM003.PC0MMSEL[1] cursor;
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Invalidate PF20 (Split option) for FTWR POs of LP type*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02" && 
  PC0MW00.PC4ORTYP == "LP" && 
  converseVar.eventKey is pf20) /* Split option*/

    PC0MW00.XXXPRCNM = "PC0M230"; /* Module identification*/
    converseLib.validationFailed(4); /* invalid PF Key*/
    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf12 /* change function requested*/
   || converseVar.eventKey is pf20) /* split function requested*/

    PC0M231(); /* ===> check security/authorization*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M230 ***********************/
end // end PC0M230

// Check PF Key security
Function PC0M231()
   /* ------------------------------------------------------------*/
   /* verify valid PF key pressed, if the user is authorized*/
   /* to perform various functions continue else error.*/
   /* ------------------------------------------------------------*/

   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* MOVE 'PC0M15N' TO PC0MW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
     /* MOVE 'PC0M15N' TO PC0MW00.XXXPRCNM ;*/
     /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
   /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* MOVE 'PC0M15N' TO PC0MW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
    /* END ;*/
   /* END ;*/

   /* **                                                        ***/
   /* ********************** End of PC0M15N ***********************/
end // end PC0M231

// -->Reset highlighted fields
Function PC0M240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC0MWIXM = 1; /* Initialize line index*/

  while (PC0MW00.PC0MWIXM <= 13 /* Until end of lines*/
   && PC0MW02.XGPCD[PC0MWIXM] > " ") /* or end of display*/

    set PC0MM002.PC0MMSEL[PC0MWIXM] initialAttributes; /* RESET SELECT FLAG*/
    set PC0MM003.PC0MMSEL[PC0MWIXM] initialAttributes; /* RESET SELECT FLAG*/

    PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM + 1; /* Increment line index*/

  end

  set PC0MM002.CATOAP initialAttributes; /* TO application*/
  set PC0MM002.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End Of PC0M240 ***********************/
end // end PC0M240

// -->Verify the entered data
Function PC0M250()

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    PC0M251(); /* Verify scroll*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (PC0MW00.TA5TSQIX > 0) /* Page was formatted*/

      PC0MW00.PC0MWSPD = " ";
                                   /* ===>init. save fields (product)*/
      PC0MW00.PC0MWSST = " "; /* ===>init. save fields (dest)*/
      PC0MW00.SY1STNBR = " "; /* ===>init. save field*/

      PC0MW00.PC0MWIXM = 13; /* Initialize line index*/

      while (PC0MW00.PC0MWIXM > 0) /* Until end of lines*/

        PC0M252(); /* Verify data in the line*/

        PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0MM002.CAITEM > " " /* Application data was entered*/
   || PC0MM003.CAITEM > " ") /* Application data was entered*/

    PC0MW00.XXXPRCNM = "PC0M250"; /* Module identification*/
    set PC0MM002.CAITEM cursor, bold; /* Highlight*/
    set PC0MM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0M250 ***********************/
end // end PC0M250

// Verify scroll request
Function PC0M251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0MW00.XXXTSPAG < 2)       /* and no previous pages*/

    PC0MW00.XXXPRCNM = "PC0M251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PC0MM002.PC0MMSEL[1] cursor;
    converseLib.clearScreen();
    
    set PC0MM003.PC0MMSEL[1] cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PC0MW00.XXXTSPAG >= PC0MW00.TA5TSQIX) /* and no more pages*/

    converseLib.clearScreen();
    
    set PC0MM002.PC0MMSEL[1] cursor;
    converseLib.clearScreen();
    
    set PC0MM003.PC0MMSEL[1] cursor;
    PC0MW00.XXXPRCNM = "PC0M251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC0MWIXM = 13; /* Initialize line index*/

  while (PC0MW00.PC0MWIXM > 0) /* Until end of lines*/

    if (PC0MM002.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM]
     || PC0MM003.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM])

      PC0MW00.XXXPRCNM = "PC0M251"; /* Module identification*/
      set PC0MM002.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
      set PC0MM003.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/

      if (converseVar.eventKey is pf7 /* Scroll back request*/
       || converseVar.eventKey is pf8) /* Scroll forward request*/
        converseLib.validationFailed(14); /* can't page back/forward*/
      else
        converseLib.validationFailed(239); /* can't page left or right*/
      end

    end

    PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM - 1; /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of PC0M251 ***********************/
end // end PC0M251

// Verify data in the line
Function PC0M252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PC0MW00.PC0MWSWM == "2")
    if (PC0MM002.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM]
     && PC0MM002.PC0MMSEL[PC0MWIXM] != "S") /* and is not a "S"*/

      PC0MW00.XXXPRCNM = "PC0M252"; /* Module identification*/
      set PC0MM002.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/
      return;

    end

  else

    if (PC0MM003.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM]
     && PC0MM003.PC0MMSEL[PC0MWIXM] != "S") /* and is not a "S"*/

      PC0MW00.XXXPRCNM = "PC0M252"; /* Module identification*/
      set PC0MM003.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
   /* GPC Code and PF Keys.*/
   /* ------------------------------------------------------------*/

  if (PC0MM002.PC0MMSEL[PC0MWIXM] == "S"
   || PC0MM003.PC0MMSEL[PC0MWIXM] == "S")

    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf20)

      PC0MW00.SY1STNBR = PC0MW02.SY1STNBR[PC0MWIXM]; /* ==>save style*/

    end

    if (converseVar.eventKey is pf17
     && PC0MW02.XGPCD[PC0MWIXM] != "03")

      if (PC0MW00.PC0MWSPD == " ") /* ===> saved fields (product)*/
        PC0MW00.PC0MWSPD = PC0MW02.PC0MWPRD[PC0MWIXM];
        PC0MW00.PC0MWSST = PC0MW02.PC0MWDST[PC0MWIXM];
        return;
      end

      if (PC0MW02.PC0MWPRD[PC0MWIXM] != PC0MW00.PC0MWSPD)
        set PC0MM002.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        set PC0MM003.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        PC0MW00.XXXPRCNM = "PC0M252"; /* Module identification*/
        converseLib.validationFailed(96); /* ===>multiple product selected not allowed*/
      end

      if (PC0MW02.PC0MWDST[PC0MWIXM] == PC0MW00.PC0MWSST)
        set PC0MM002.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        set PC0MM003.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        PC0MW00.XXXPRCNM = "PC0M252"; /* Module identification*/
        converseLib.validationFailed(107); /* ===>Duplicate dest. for style not allowed*/
      end

      PC0MW00.PC0MWSST = PC0MW02.PC0MWDST[PC0MWIXM]; /* ==> save dest.*/

    end

    if (converseVar.eventKey is pf17
     && PC0MW02.XGPCD[PC0MWIXM] == "03")

      if (PC0MW00.PC0MWSPD == " ") /* ===> saved fields (product)*/
        PC0MW00.PC0MWSPD = PC0MW02.PC0MWPRD[PC0MWIXM];
      else
        set PC0MM002.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        set PC0MM003.PC0MMSEL[PC0MWIXM] cursor, bold; /* Highlight*/
        PC0MW00.XXXPRCNM = "PC0M252"; /* Module identification*/
        converseLib.validationFailed(96); /* ===>multiple styles selected*/
      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M252 ***********************/
end // end PC0M252

// -->Process valid input request
Function PC0M260()
   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PC0MW00.PC0MWSWM = "1"; /* ===> Set request for Sel map*/
    set PC0MM001.PC3PONBR cursor;
    PC0MM001.XXXPRCNM = "PC0M"; /* ===> Reset field*/
    PC0MW00.PC0MWSWF = "N"; /* Format the map switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0MW00.PC0MWSWF = "Y"; /* Format the map switch*/
    set PC0MM002 initial;
    set PC0MM003 initial;
    PC0MW00.XXXTSPAG = PC0MW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0MW00.PC0MWSWF = "Y"; /* Format the map switch*/
    set PC0MM002 initial;
    set PC0MM003 initial;
    PC0MW00.XXXTSPAG = PC0MW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf10 /* ===> Left map requested*/
   && PC0MW00.PC0MWSWM == "3")     /* ===> and in right map*/

    PC0MW00.PC0MWSWM = "2"; /* ===>set request for left map*/
    PCWREC.XXXMSGNO = 25; /* ===>set (Please 'S'elect a line)*/
    PC0MW00.XXXPRCNM = "PC0M260";

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11 /* ===> Right map requested*/
   && PC0MW00.PC0MWSWM == "2")     /* ===> and in left map*/

    PC0MW00.PC0MWSWM = "3"; /* ===>set request for right map*/
    PCWREC.XXXMSGNO = 25; /* ===> (Please 'S'elect a line)*/
    PC0MW00.XXXPRCNM = "PC0M260";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/

  if ("S" in PC0MM002.PC0MMSEL /* =====> Line was selected*/
   || "S" in PC0MM003.PC0MMSEL) /* =====> Line was selected*/

    PC0M261(); /* ===> load pcwrec with selected data*/
                                   /* and function*/

    if (converseVar.eventKey not pf17)
      PC0M262(); /* ===> load pcwrec with entered data (map 1)*/
    end

    PC0M263(); /* ===> load pcwrec with from appl return data*/

    COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

    PC0M211(); /* ===> Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PC0MW00.PC0MWSWM = "1"; /* ===> Set request for Sel map*/
    PC0MW00.PC0MWSWF = "Y"; /* ===>format the data*/
    set PC0MM001 initial; /* set map clear*/
    set PC0MM001.CATOAP cursor, bold; /* Highlight*/
    set PC0MW01 empty; /* reset map display record*/
    PC0MW01.XGPCD = COMMAREA.XGPCD;
    PC0MW00.XXXPRCNM = "PC0M260";

    exit stack; /* =================> Exit to display*/
                                   /* map*/

  else
    PC0MW00.XXXPRCNM = "PC0M260";
    set PC0MM002.PC0MMSEL[1] cursor, bold; /* ====>highlight*/
    set PC0MM003.PC0MMSEL[1] cursor, bold; /* ====>highlight*/
    converseLib.validationFailed(25);
    return; /* Return to previous process*/
  end
   /* **                                                        ***/
   /* ********************** End of PC0M260 ***********************/
end // end PC0M260

// Process selected input request
Function PC0M261()
   /* ------------------------------------------------------------*/
             /* Set the inquire function request flag*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* inquire mode requested*/
    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "I";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/
  end

   /* ------------------------------------------------------------*/
             /* Set the change function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* change mode requested*/

    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "C";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/

  end

   /* ------------------------------------------------------------*/
      /* Set the inquiry of detail information according to GPC*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* change mode requested*/

    PCWREC.XGPCD = PC0MW01.XGPCD;
    PCWREC.PO-REG-CD = PC0MW01.PO-REG-CD;
    PCWREC.PC3PONBR = PC0MW01.PC3PONBR;

    if (PC0MW01.XGPCD == "03")
      COMMAREA.CATOAP = "PC0U";
    else
      COMMAREA.CATOAP = "PC0R";
      move " " to PCWREC.PCWWHSE[1] for all; /* ===> init. dest array*/
      move " " to PCWREC.PCWCUST[1] for all;
    end

  end

   /* ------------------------------------------------------------*/
             /* Set the split function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* change mode requested*/

    COMMAREA.CATOAP = "PC0N";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields in the pass record.*/
      /* according to PF Key pressed*/
   /* ------------------------------------------------------------*/

  PC0MW00.PC0MWIXM = 1; /* Initialize map line index*/
  PC0MW00.PC0MWIXR = 1; /* Initialize record line index*/

  while (PC0MW00.PC0MWIXM <= 13) /* Until end of lines*/

    if (PC0MM002.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM]
     || PC0MM003.PC0MMSEL[PC0MWIXM] != PC0MW02.PC0MMSEL[PC0MWIXM])

      if (converseVar.eventKey is enter /* inquiry mode requested*/
       || converseVar.eventKey is pf12  /* change  mode requested*/
       || converseVar.eventKey is pf20) /* split   mode requested*/

        PCWREC.PC6ITMNB[PC0MWIXR] = PC0MW02.PC6ITMNB[PC0MWIXM];

      end

      if (PC0MW02.XGPCD == "03")
        if (converseVar.eventKey is pf12 /* change  mode requested*/
         || converseVar.eventKey is pf20) /* split   mode requested*/
  /*          IF PC0MW02.PC3PONBR < 300000 /* out of range*/
  /*          OR PC0MW02.PC3PONBR > 699999; /*  */
  /*            MOVE 'PC0MS261' TO PC0MW00.XXXPRCNM;*/
  /*            MOVE '        ' TO COMMAREA.CATOAP;*/
  /*            MOVE 509 TO EZEMNO;*/
  /*            SET PC0MM002.PC0MMSEL[PC0MWIXM] CURSOR,BRIGHT;*/
  /*            SET PC0MM003.PC0MMSEL[PC0MWIXM] CURSOR,BRIGHT;*/
  /*            EZEFLO;*/
  /*          END;*/
        end
      end

      if (converseVar.eventKey is pf17) /* detail requested*/

        /* ------------------------------------------------------------*/
         /* Load the product key data into the pass record*/
        /* ------------------------------------------------------------*/

        PCWREC.SY1STNBR = PC0MW02.SY1STNBR[PC0MWIXM];
        PCWREC.YSMXDV = PC0MW02.YSMXDV[PC0MWIXM];

        if (PC0MW02.XGPCD[PC0MWIXM] == "03")
          /* --------------------------------------------------*/
          /* apparel wants to wild card all fields except for*/
          /* division and style*/
          /* --------------------------------------------------*/

          PCWREC.SY2CLRID = "*";
          PCWREC.XDMCD = "*";
          PCWREC.XQACD = "*";
          PCWREC.XOWCD = "*";
          PCWREC.PC2INSEG = "*";
          PCWREC.XPGCD = "*";
          PCWREC.XUMCD = "*";

        else
          /* --------------------------------------------------*/
          /* footwear wants to send specific information*/
          /* including customer and warehouse*/
          /* --------------------------------------------------*/

          PCWREC.SY2CLRID = PC0MW02.SY2CLRID[PC0MWIXM];
          PCWREC.XDMCD = PC0MW02.XDMCD[PC0MWIXM];
          PCWREC.XQACD = PC0MW02.XQACD[PC0MWIXM];
          PCWREC.XOWCD = PC0MW02.XOWCD[PC0MWIXM];
          PCWREC.PC2INSEG = PC0MW02.PC2INSEG[PC0MWIXM];
          PCWREC.XPGCD = PC0MW02.XPGCD[PC0MWIXM];
          PCWREC.XUMCD = PC0MW02.XUMCD[PC0MWIXM];
          PCWREC.PCWWHSE[PC0MWIXR] = PC0MW02.XWHCD[PC0MWIXM];
          PCWREC.PCWCUST[PC0MWIXR] = PC0MW02.PC2CUXID[PC0MWIXM];

        end

      end

      PC0MW00.PC0MWIXR = PC0MW00.PC0MWIXR + 1;
                                   /* Increment pcwrec row index*/

    end
    PC0MW00.PC0MWIXM = PC0MW00.PC0MWIXM + 1; /* Increment line map index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0M261 ***********************/
end // end PC0M261

// save key data entered (map1)
Function PC0M262()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0MW01.XGPCD;
  PCWREC.PO-REG-CD = PC0MW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0MW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PC0MW01.XUMCD > " ")
    PCWREC.XUMCD = PC0MW01.XUMCD;
  else
    PCWREC.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XPGCD > " ")
    PCWREC.XPGCD = PC0MW01.XPGCD;
  else
    PCWREC.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2INSEG > " ")
    PCWREC.PC2INSEG = PC0MW01.PC2INSEG;
  else
    PCWREC.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XOWCD > " ") /* owner group code*/
    PCWREC.XOWCD = PC0MW01.XOWCD;
  else
    PCWREC.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XQACD > " ") /* quality code*/
    PCWREC.XQACD = PC0MW01.XQACD;
  else
    PCWREC.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDMCD > " ")
    PCWREC.XDMCD = PC0MW01.XDMCD;
  else
    PCWREC.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YSMXDV > " ")
    PCWREC.YSMXDV = PC0MW01.YSMXDV;
  else
    PCWREC.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2CUXID > " ")
    PCWREC.PC2CUXID = PC0MW01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6STAT > " ")
    if (PC0MW01.PC6STAT == "CX")
      if (PC0MM001.PC6STAT == "*X")
        PCWREC.PC6STAT = "*X";
      else
        PCWREC.PC6STAT = PC0MW01.PC6STAT;
      end
    else
      PCWREC.PC6STAT = PC0MW01.PC6STAT;
    end
  else
    PCWREC.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
    /* IF ESTEMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6ETSDT > 0)
    PCWREC.PC6ETSDT = PC0MW01.PC6ETSDT;
  else
    PCWREC.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF DIST METHOD, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDSCD > " ")
    PCWREC.XDSCD = PC0MW01.XDSCD;
  else
    PCWREC.XDSCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YMTCD > " ")
    PCWREC.YMTCD = PC0MW01.YMTCD;
  else
    PCWREC.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XWHCD > " ")
    PCWREC.XWHCD = PC0MW01.XWHCD;
  else
    PCWREC.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6PLAN > 0)
    PCWREC.PC6PLAN = PC0MW01.PC6PLAN;
  else
    PCWREC.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY2CLRID > " ")
    PCWREC.SY2CLRID = PC0MW01.SY2CLRID;
  else
    PCWREC.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY1STNBR > " ")
    PCWREC.SY1STNBR = PC0MW01.SY1STNBR;
  else
    PC0MW04.SY1STNBR = " ";
  end

   /* **                                                        ***/
   /* ********************** End of PC0M262 ***********************/
end // end PC0M262

// save data for return from appl
Function PC0M263()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/

  PC0MW04.PC0MWSWM = PC0MW00.PC0MWSWM;
  PC0MW04.XXXTSPAG = PC0MW00.XXXTSPAG; /* ==>T.S. Page to displayed*/

  PC0MW04.XGPCD = PC0MW01.XGPCD;
  PC0MW04.PO-REG-CD = PC0MW01.PO-REG-CD;
  PC0MW04.PC3PONBR = PC0MW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* If unit of measure code,*/
   /* ------------------------------------------------------------*/
  if (PC0MW01.XUMCD > " ")
    PC0MW04.XUMCD = PC0MW01.XUMCD;
  else
    PC0MW04.XUMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XPGCD > " ")
    PC0MW04.XPGCD = PC0MW01.XPGCD;
  else
    PC0MW04.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If spec diff code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2INSEG > " ")
    PC0MW04.PC2INSEG = PC0MW01.PC2INSEG;
  else
    PC0MW04.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group,  load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XOWCD > " ") /* owner group code*/
    PC0MW04.XOWCD = PC0MW01.XOWCD;
  else
    PC0MW04.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XQACD > " ") /* quality code*/
    PC0MW04.XQACD = PC0MW01.XQACD;
  else
    PC0MW04.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDMCD > " ")
    PC0MW04.XDMCD = PC0MW01.XDMCD;
  else
    PC0MW04.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YSMXDV > " ")
    PC0MW04.YSMXDV = PC0MW01.YSMXDV;
  else
    PC0MW04.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC2CUXID > " ")
    PC0MW04.PC2CUXID = PC0MW01.PC2CUXID;
  else
    PC0MW04.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6STAT > " ")
    if (PC0MM001.PC6STAT == "*X")
      PC0MW04.PC6STAT = "*X";
    else
      PC0MW04.PC6STAT = PC0MW01.PC6STAT;
    end
  else
    PC0MW04.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
    /* IF ESTEMATED TIME OF SHIPMENT, LOAD SELECT RECORD*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6ETSDT > 0)
    PC0MW04.PC6ETSDT = PC0MW01.PC6ETSDT;
  else
    PC0MW04.PC6ETSDT = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF DIST METHOD, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XDSCD > " ")
    PC0MW04.XDSCD = PC0MW01.XDSCD;
  else
    PC0MW04.XDSCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF TRANS MODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.YMTCD > " ")
    PC0MW04.YMTCD = PC0MW01.YMTCD;
  else
    PC0MW04.YMTCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.XWHCD > " ")
    PC0MW04.XWHCD = PC0MW01.XWHCD;
  else
    PC0MW04.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF PLAN CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.PC6PLAN > 0)
    PC0MW04.PC6PLAN = PC0MW01.PC6PLAN;
  else
    PC0MW04.PC6PLAN = 0;
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY2CLRID > " ")
    PC0MW04.SY2CLRID = PC0MW01.SY2CLRID;
  else
    PC0MW04.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0MW01.SY1STNBR > " ")
    PC0MW04.SY1STNBR = PC0MW01.SY1STNBR;
  else
    PC0MW04.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. ID fields entered (P.O. ID Date/Factory/po type*/
   /* ------------------------------------------------------------*/

  if (PC0MM001.PC0MMPYR > " ")
    PC0MW04.PC0MMPYR = PC0MM001.PC0MMPYR;
    PC0MW04.PC0MMPMO = PC0MM001.PC0MMPMO;
    PC0MW04.PC0MMPDM = PC0MM001.PC0MMPDM;
    PC0MW04.FY1FCTYC = PC0MM001.FY1FCTYC;
    PC0MW04.PC4ORTYP = PC0MM001.PC4ORTYP;
  else
    PC0MW04.PC0MMPYR = " ";
    PC0MW04.PC0MMPMO = " ";
    PC0MW04.PC0MMPDM = " ";
    PC0MW04.FY1FCTYC = " ";
    PC0MW04.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PC0M"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PC0MW04.PC0MWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PC0M"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PC0MW04.PC0MWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PC0M"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PC0MW04.PC0MWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PC0M"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PC0MW04.PC0MWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0M263 ***********************/
end // end PC0M263

// update temporary storage page
Function PC0MS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PC0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0MW00.XXXPRCNM = "PC0MS03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End Of PC0MS03 ***********************/
end // end PC0MS03

// Read temporary storage page
Function PC0MS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0MW02.XXXTSLEN = PC0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0MW00.XXXPRCNM = "PC0MS04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0MW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End of PC0MS04 ***********************/
end // end PC0MS04

// Save VPOITM05 in PC0MW06
Function PC0MS06()
   /* ----------------------------------------------------------*/
    /* Save copy of the "Split to" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0MW06 and is a mirror image of the VPOITM05.*/
   /* ----------------------------------------------------------*/

  PC0MW06.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0MW06.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0MW06.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0MW06.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0MW06.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0MW06.PC3POIDT = VPOITM05.PC3POIDT;
  PC0MW06.PCFSECD = VPOITM05.PCFSECD;
  PC0MW06.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0MW06.XCTCD = VPOITM05.XCTCD;
  PC0MW06.SY1STNBR = VPOITM05.SY1STNBR;
  PC0MW06.SY2CLRID = VPOITM05.SY2CLRID;
  PC0MW06.XDMCD = VPOITM05.XDMCD;
  PC0MW06.XQACD = VPOITM05.XQACD;
  PC0MW06.XOWCD = VPOITM05.XOWCD;
  PC0MW06.PC2INSEG = VPOITM05.PC2INSEG;
  PC0MW06.XPGCD = VPOITM05.XPGCD;
  PC0MW06.XUMCD = VPOITM05.XUMCD;
  PC0MW06.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0MW06.PC6OETS = VPOITM05.PC6OETS;
  PC0MW06.PC6RTADT = VPOITM05.PC6RTADT;
  PC0MW06.YMTCD = VPOITM05.YMTCD;
  PC0MW06.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0MW06.PC6PLAN = VPOITM05.PC6PLAN;
  PC0MW06.XPLCD = VPOITM05.XPLCD;
  PC0MW06.XPRCD = VPOITM05.XPRCD;
  PC0MW06.XPCCD = VPOITM05.XPCCD;
  PC0MW06.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0MW06.XGACD = VPOITM05.XGACD;
  PC0MW06.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0MW06.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0MW06.XWHCD = VPOITM05.XWHCD;
  PC0MW06.PC2CUXID = VPOITM05.PC2CUXID;
  PC0MW06.YSMXDV = VPOITM05.YSMXDV;
  PC0MW06.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0MW06.OP1CUPO = VPOITM05.OP1CUPO;
  PC0MW06.OP1PARTN = VPOITM05.OP1PARTN;
  PC0MW06.OP1CUOID = VPOITM05.OP1CUOID;
  PC0MW06.OP1NORID = VPOITM05.OP1NORID;
  PC0MW06.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0MW06.PC61TMSH = VPOITM05.PC61TMSH;
  PC0MW06.XDSCD = VPOITM05.XDSCD;
  PC0MW06.PC6STAT = VPOITM05.PC6STAT;
  PC0MW06.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0MW06.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0MW06.PC-AIR-FRGT-PMTIND = VPOITM05.PC-AIR-FRGT-PMTIND;
  PC0MW06.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0MW06.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0MW06.PC6NILRF = VPOITM05.PC6NILRF;
  PC0MW06.YOHCD = VPOITM05.YOHCD;
  PC0MW06.PC3SIFL = VPOITM05.PC3SIFL;
  PC0MW06.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0MW06.PC6CONNO = VPOITM05.PC6CONNO;
  PC0MW06.PC6PETS = VPOITM05.PC6PETS;
  PC0MW06.PC6OETAL = VPOITM05.PC6OETAL;
  PC0MW06.PC6TORIG = VPOITM05.PC6TORIG;
  PC0MW06.PC6TORDE = VPOITM05.PC6TORDE;
  PC0MW06.PC6TADD = VPOITM05.PC6TADD;
  PC0MW06.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0MW06.PC6PREFL = VPOITM05.PC6PREFL;
  PC0MW06.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0MW06.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0MW06.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0MW06.XXXUSRID = VPOITM05.XXXUSRID;
  PC0MW06.ZZZSDT = VPOITM05.ZZZSDT;
  PC0MW06.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0MW06.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0MW06.ZZZCHGCT = VPOITM05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0MS06 ***********************/
end // end PC0MS06

// get style name and color desc
Function PC0MS11()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PC0MW01.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* ===> style code*/
  PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* ===> color code*/
  PG2REC.XDMCD = VPOITM05.XDMCD;

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  converseLib.clearScreen();
  
  set PC0MM001.SY2CLRID cursor, bold;

  if (converseVar.validationMsgNum != -911)
    converseLib.validationFailed(10);
  end

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0MS11 ***********************/
end // end PC0MS11

// call calc.  "date routine"
Function PC0MS31()
   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    return; /* === return with date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, error occured. Exit and display map*/
    /* ------------------------------------------------------------*/

  /* MOVE '1' TO PC0MW00.PC0MWSWM;  /* ===> map request switch*/
  /* MOVE 'PC0MS31' TO PC0MW00.XXXPRCNM;    /* Module identification*/
  /* MOVE 38 TO EZEMNO;              /* Indicate missing or invalid*/
  /* EZEFLO;              /* ===> exit to display map with date error*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0MS31 ***********************/
end // end PC0MS31

//*** RECORD=PC0MW00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -control break save fields
//    -W.S. date fields
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PC0MW00 type basicRecord
  10 PC0MWSWR PC0MWSWR ; 
  10 PC0MWSWM PC0MWSWM ; 
  10 PC0MWSWF PC0MWSWF ; 
  10 PC0MWSWC PC0MWSWC ; 
  10 PC0MWCWC PC0MWCWC ; 
  10 PC0MWSWU PC0MWSWU ; 
  10 PC0MWXIT PC0MWXIT ; 
  10 PC0MWMOD PC0MWMOD ; 
  10 PC0MWMLT PC0MWMLT ; 
  10 * char(1) ; 
  10 PC0MWIXR PC0MWIXR ; 
  10 PC0MWIXM PC0MWIXM ; 
  10 PC0MWIXT PC0MWIXT ; 
  10 PC0MWIXS PC0MWIXS ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PC0MWSTY PC0MWSTY ; 
  10 * char(1) ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 * char(1) ; 
  10 PC0MWDT PC0MWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC0MMPCC PC0MMPCC ; 
    15 PC0MMPYR PC0MMPYR ; 
    15 PC0MMPMO PC0MMPMO ; 
    15 PC0MMPDM PC0MMPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC0MWMM PC0MWMM ; 
    15 PC0MWDD PC0MWDD ; 
    15 PC0MWCC PC0MWCC ; 
    15 PC0MWYY PC0MWYY ; 
  10 * char(1) ; 
  10 XOWKEY XOWKEY ; 
    15 PC0MWWHC PC0MWWHC ; 
    15 PC0MWOWC PC0MWOWC ; 
  10 * char(1) ; 
  10 PC0MWSPD PC0MWSPD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 * char(1) ; 
  10 PC2INSEG PC2INSEG ; 
  10 * char(1) ; 
  10 PC0MWSST PC0MWSST ; 
    15 XWHCD XWHCD ; 
    15 PC2CUXID PC2CUXID ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PC0MWSUM PC0MWSUM ; 
  10 XWHPAD XWHPAD ; 
  10 * char(1) ; 
  10 PC0MWORD char(13) ; // Cust/Nike sales order
    15 PC0MWCOR PC0MWCOR ; 
    15 PC0MWDOT PC0MWDOT ; 
    15 PC0MWNOR PC0MWNOR ; 
end // end PC0MW00

//*** RECORD=PC0MW01 ****
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PC0MM.PC0MM001
// 
//    RECORD NAME:      PC0MW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list maps.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list maps PC0MM002 & PC0MM003.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER DESTINATION ITEM PLAN MAP RECORD ****
// ***********************
Record PC0MW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 TA2GRGE TA2GRGE ; 
    15 PC0MMPYR PC0MMPYR ; 
    15 PC0MMPMO PC0MMPMO ; 
    15 PC0MMPDM PC0MMPDM ; 
  10 PCFSECD PCFSECD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XSECD XSECD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XWHCD XWHCD ; 
  10 YSMXDV YSMXDV ; 
  10 XDSCD XDSCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 YMTCD YMTCD ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 PC0MMETS PC0MMETS ; 
    15 PC0MWMM PC0MWMM ; 
    15 PC0MWDD PC0MWDD ; 
    15 PC0MWYY PC0MWYY ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC6STAT PC6STAT ; 
  10 PC2CUXID PC2CUXID ; 
  10 PC4ORTYP PC4ORTYP ; 
end // end PC0MW01

//*** RECORD=PC0MW02 ****
// ************** PRODUCTION ORDER ITEM RECORD ****************
// **                  Display Record                        **
// **                                                        **
// 
// 
//    RECORD NAME:      PC0MW02
// 
//    MAP   NAMES:      PC0MM002 & pc0MM003
// 
//       This record is a working storage record used to
//    hold data that is pertinent to maps PC0MM002 & PC0MM003.
//       It holds information  that relates to a P.O. Item
//    It is used to the load temp. storage, the list maps,
//    and the pass record PCWREC
//       It is loaded from PC0MW03 after all of the figures
//    for the control break set of rows have been calculated.
//       The control break is based on (product & destination).
// 
// **                                                        **
// **                                                        **
// ************** PRODUCTION ORDER ITEM RECORD ****************
// ***********************
Record PC0MW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0MWRC2 PC0MWRC2 [13] ; 
    10 PC0MMSEL PC0MMSEL ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 * char(1) ; 
    10 PC0MWPRD PC0MWPRD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 * char(1) ; 
    10 PC2INSEG PC2INSEG ; 
    10 * char(1) ; 
    10 PC0MWDST PC0MWDST ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 YMTCD YMTCD ; 
    10 YOHCD YOHCD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6STAT PC6STAT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC0MMEST PC0MMEST ; 
    10 PC0MWETA PC0MWETA ; 
    10 PC0MMETA PC0MMETA ; 
    10 PC0MMETL PC0MMETL ; 
    10 PC6OETS PC6OETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC0MMOET PC0MMOET ; 
    10 PC0MWRTS PC0MWRTS ; 
    10 PC0MMRTS PC0MMRTS ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC0MMRTA PC0MMRTA ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 PC0MMSOR PC0MMSOR ; 
end // end PC0MW02

//*** RECORD=PC0MW03 ****
// ************** PRODUCTION ORDER ITEM RECORD ****************
// **                   Temporary record                     **
// **                                                        **
// 
// 
//    RECORD NAME:      PC0MW03
// 
//       This record is a working storage record used to
//    temporarily hold rows for control break calcualtions.
//       It holds information  that relates to a P.O. Item
//    and is used to calculate (balance to ship) figures for
//    each row, according to a control break on the Product
//    and destination.
//       It is loaded to PC0MW02 after the all the figures
//    for the rows in the control break have been calculated.
//       It is reset to empty, and is ready for the next set
//    of control break rows to process.
// 
// **                                                        **
// **                                                        **
// ************** PRODUCTION ORDER ITEM RECORD ****************
// ***********************
Record PC0MW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0MWRC2 PC0MWRC2 [100] ; 
    10 PC0MMSEL PC0MMSEL ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 * char(1) ; 
    10 PC0MWPRD PC0MWPRD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 * char(1) ; 
    10 PC2INSEG PC2INSEG ; 
    10 * char(1) ; 
    10 PC0MWDST PC0MWDST ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 YMTCD YMTCD ; 
    10 YOHCD YOHCD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6STAT PC6STAT ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC0MMEST PC0MMEST ; 
    10 PC0MWETA PC0MWETA ; 
    10 PC0MMETA PC0MMETA ; 
    10 PC0MMETL PC0MMETL ; 
    10 PC6OETS PC6OETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC0MMOET PC0MMOET ; 
    10 PC0MWRTS PC0MWRTS ; 
    10 PC0MMRTS PC0MMRTS ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC0MMRTA PC0MMRTA ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 PC0MMSOR PC0MMSOR ; 
end // end PC0MW03

//*** RECORD=PC0MW04 ****
// **************** PRODUCTION ORDER ITEM  RECORD *************
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      PC0MM.PC0MM001
// 
//    RECORD NAME:      PC0MW04
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the data that was entered
//    the user at the start of this application.  Also, map and
//    temp storage pages are saved for the return from a lower
//    level application.
// 
//       The desired saved data is loaded to this record when
//    when a transfer to PC0K,PC0N,PC0R, or PC0U is requested
//    and then loaded to the first available user area in the
//    PCWREC.
// 
//      On the return from one of the above applications, the
//    appropraite user area is laoded to this record and
//    processed accordingly.
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER ITEM  RECORD *************
// ***********************
Record PC0MW04 type basicRecord
  5 PC0MWUSR PC0MWUSR ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PC0MWSWM PC0MWSWM ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XSECD XSECD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XWHCD XWHCD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YMTCD YMTCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6STAT PC6STAT ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC0MMPYR PC0MMPYR ; 
    10 PC0MMPMO PC0MMPMO ; 
    10 PC0MMPDM PC0MMPDM ; 
    10 * char(425) ; 
end // end PC0MW04

//*** RECORD=PC0MW06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
//                      "Saved Copy"
// 
//    Record Name:      PC0MW06   (----> Mirrors VPOITM05 )
// 
//    This record is a mirror image of the next to item row
// to process.
//   It is used in because the "Balance to Ship" subroutine
// needs to use the VPOITM05 in its processing.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PC0MW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0MW06

// ETS date display
DataItem PC0MMEST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA Date display
DataItem PC0MMETA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETAL Date display
DataItem PC0MMETL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_EST_HDT map display
DataItem PC0MMETS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Orig. ETS date display
DataItem PC0MMOET char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production century
DataItem PC0MMPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PC0MMPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Month
DataItem PC0MMPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Year
DataItem PC0MMPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// RTS Date display
DataItem PC0MMRTA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated RTS date display
DataItem PC0MMRTS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0MMSEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales order/nike order
DataItem PC0MMSOR char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC0MWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer order number
DataItem PC0MWCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch CPLH
DataItem PC0MWCWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date day map display
DataItem PC0MWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Period literal
DataItem PC0MWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level Dest. 'CURRENT'
DataItem PC0MWDST char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHAR data form
DataItem PC0MWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA Date
DataItem PC0MWETA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PC0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PC0MWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PC0MWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp array (break)
DataItem PC0MWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// multiple styles flag
DataItem PC0MWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PC0MWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PC0MWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike order number
DataItem PC0MWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// owner group code
DataItem PC0MWOWC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level Product 'CURRENT'
DataItem PC0MWPRD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level array
DataItem PC0MWRC2 char(161)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated RTS date
DataItem PC0MWRTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Group level product "SAVED"
DataItem PC0MWSPD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level dest. "SAVED"
DataItem PC0MWSST char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved/previous style number
DataItem PC0MWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MADD + ETT (temp accumulator)
DataItem PC0MWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PC0MWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PC0MWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC0MWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PC0MWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PC0MWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse code
DataItem PC0MWWHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PC0MWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PC0MWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end