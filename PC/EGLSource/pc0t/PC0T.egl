package pc0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=PC0T ****
// ************************************************************
// *
// *   THIS PROGRAM IS USED TO SUBMIT THE FOOTWEAR BATCH AUTO-
// *   LOAD OF THE INLINE (PO TYPE 'FT').  ALL FACTORIES WILL
// *   LOAD AT THE SAME TIME.
// *
// *   THE USER  WILL ENTER THE BUY YEAR YY AND THE BUY MONTH
// *   MM ON THE MAP, THE PROGRAM WILL SUPPLY THE CENTRY.
// *
// *   THE USER WILL HIT THE ENTER KEY TO SUBMIT THE JOB.
// *
// *   DATE       USERID           COMMENTS
// *  _______    ________         ________________________
// *  9/13/89    GWITZI           NEW APPLICATION
// * 12/05/89    JWOOD            REMOVED TARREC FROM LIST
// * 12/05/89    JWOOD            REPLACED TA0PM001 WITH NEW
// * 07/17/90    JWOOD            REmoved ut2rec form t&l list
// * 09/18/90    mchris f51       added condition to run gener
// *                              step for obssum rpt
// * 10/30/90    mchris   ?       fixed autoload submit bug.
// *                              ta0230 was called in wrong
// *                              spot.
// * 04/15/91    kdenne           added jcl submit logic for
// *                              footwear buy report.
// * 04/29/91    kdenne           changed print class to 'n'
// *                              for the order summary by ctry
// * 07/11/91    DFRANC           Modified JCL tables and code
// *                              to send the reports only to
// *                              the laser printer.
// * 10/09/91    lsutto           changed implicits allowed
// *                              flag to = no in appl pc0t
// * 10/22/91    lsutto           changed copies and dest on
// *                              several reports
// *                              PC0TT01 and PC0TT11
// * 11/20/91    chaert           add new report to pc0tt01/11
// *                              for pc110d
// * 12/19/91    chaert           changed copies and dest on
// *                              several reports
// *                              PC0TT01 and PC0TT11
// * 01/03/92    chaert           added gdg to repts, autoload
// * 08/07/92    KSANFO           F131 - add add'l rpt step to
// *                              PC0TT01 and PC0TT11 - removed
// *                              condition codes logic.
// * 10/08/92    KSANFO           bug fix - fixed obsd rpt for
// *                              china only parm
// * 02/05/93    KSANFO           F179 - create 5 new OBSD by
// * country report files, for Indonesia, Thailand, China
// * Korea and Taiwan.  Created additional JOB & PROC executed
// * by PC0T named PC1103.  Added new jcl tables PC0TT03, and
// * PC0TT33 and new modules PC0T630 AND 631.
// * 03/02/93    KSANFO           F179 - create 3 add'l OBSD
// *                              ctry rpt files; for Brazil,
// *                              Italy and the USA. Turn-of;
// *                              5 copies china, OBSD to rmt18
// * 05/03/93    KSANFO           Move PC1103 proc into
// *                              PC0TT11, PC0TT01 jcl tables.
// * 12/08/93    LDELUH           Added overrides to test jcl
// *                              table pc0tt22.
// * 01/10/93    GAMEN            Add theater of ops code
// * 03/18/94    JALLE1           Added overrides to test jcl
// *                              table pc0tt22.
// * 12/21/94    chaert           pg82-increase occurs on
// *                              dfbuy.vfsctl01, fbmrec
// * 06/08/95    eraymo           added country-VIET
// * 06/23/95    GAMEN            FIX PC0T620 JCL SETUP.
// * 11-21-97    oricha           y2k modifications:  pc0t510
// *                              pc0t610, pc0tw01, pc0twtbt
// *                              adjusted to handle date
// *                              calculations using century
// *                              as part of the calc.
// * 01/29/99    MSEVAL           Call FB1520 to check for
//                                duplicate rows in VMFBUY01.
// ************************************************************
// *********************
Program PC0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB7REC FB7REC; // record
  FBMREC FBMREC; // record
  FBNREC FBNREC; // record
  PC0TW01 PC0TW01; // record
  PC0TW02 PC0TW02; // record
  PC0TWTBO PC0TWTBO; // record
  PC0TWTBT PC0TWTBT; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PC0TT01 {deleteAfterUse = yes}; // table
  use PC0TT11 {deleteAfterUse = yes}; // table
  use PC0TT02 {deleteAfterUse = yes}; // table
  use PC0TT22 {deleteAfterUse = yes}; // table
  use PC0TT03 {deleteAfterUse = yes}; // table
  use PC0TT33 {deleteAfterUse = yes}; // table
  use PC0TM.PC0TM010,  // forms
      PC0TM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/

    set PC0TW01 empty; /* Initialize working storage*/
    set PC0TW02 empty; /* Initialize jcl working storage*/
    set PC0TWTBO empty; /* Initialize pram compare ws*/
    set PC0TWTBT empty; /* Initialize parm ws array*/
    set PCYREC empty; /* Initialize IOMOD passing record*/

    set ERRSQLCA empty; /* Initialize*/
    set SQLCA empty; /* Initialize*/

    set TA1REC empty; /* Initialize*/
    set TA2REC empty; /* Initialize date record*/
    set XCTHREC empty; /* Initialize theater of ops record*/
    set TA6REC empty; /* Initialize Jcl record*/
    set TAEREC empty; /* Initialize*/

    set PC0TM010 initial; /* Initialize map*/
    set XX0XW01 empty; /* Initialize*/


    PC0TWLIX = 0; /* Initialize line index*/
    PC0TWAIX = 0; /* Initialize array index*/


    PC0T000: PC0T000();
     /* no flow*/
    PC0T050: PC0T050();
    goto PC0T050;
  end // end main
end // end PC0T

// GET CURRENT DATE
Function PC0T000()

   /* ----------------------------------------------------------*/
   /* CURRENT DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* Move in option*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC0TW01.PC0TWCDT = TA2REC.TA2GRGGN; /* Current date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0TM010.XXXPRCNM = "PC0T000"; /* Process name*/

    end
  end


end // end PC0T000

// MAIN PROCESS TO DISPLAY MAP
Function PC0T050()

   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/

  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PC0TM010.XXXPRCNM = "PC0T050"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* This is the main process used to show the Map. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.*/

   /* In all PF Key, "EZEFLO" is used to exit to redisplay the*/
   /* map when a PF Key is pressed.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD == "02" /* Footware*/
   && COMMAREA.CACLVL[2] == "Y") /* User can enter*/

    PC0T080(); /* Report generation pcocess*/

  else
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/
    XSPCS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* IF FOR SOME REASON THE USER IN NOT AUTHORIZED TO GET INTO*/
     /* THIS PROGRAM AND IS NO AUTHORIZED TO GET TO THE PC0A MENU*/
     /* THE USER WILL BE KICKED OUT TO THE MAIN MENU. THIS WILL*/
     /* ALLOW THE PROGRAM TO TERMINATE AND NOT RESULT IN AN*/
     /* INFINITE LOOP.*/
    /* ------------------------------------------------------------*/
    PCWREC.XXXMSGNO = 138; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "MN0M"; /* To application*/
    XSPCS01(); /* Exit to another application*/
  end



end // end PC0T050

// PROGRAM PROCESS CONTROL
Function PC0T080()

   /* ------------------------------------------------------------*/
   /* This is the main process used for this program. Process-*/
   /* ing always returns to the top of this process and falls to*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to be later displayed on the map.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/

   /* In all PF Key functions "EZEFLO" is used to redisplay the*/
   /* map when an error is found.*/

   /* "EZEFLO" is also used to redisplay the map when a major*/
   /* error occurs.*/
   /* ------------------------------------------------------------*/


  PC0T200(); /* Format and display the map*/

  PC0T300(); /* Check attention identifier*/

  PC0T400(); /* Reset fields to normal intensity*/

  PC0T500(); /* Verify the entered data*/

  PC0T600(); /* Process the entered data*/


end // end PC0T080

// DISPLAY SELECT MAP
Function PC0T200()


  if (converseVar.validationMsgNum == 0)

      /* NEXT SENTENCE*/

  else

    if (converseVar.validationMsgNum == 190
     && COMMAREA.CAMSG > " ") /* ===> Job info message*/
      converseLib.validationFailed(0); /* ===> reset Job submitted message*/
      PC0TM010.XXXPRCNM = "PC0T200"; /* PROCESS NAME*/
      PC0TM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info message*/
      COMMAREA.CAMSG = " "; /* ===> reset Job info message*/
    end

    set PC0TM010 alarm; /* Sound alarm*/

  end

  PC0TM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  converse PC0TM010 ;


end // end PC0T200

// CHECK ATTENTION IDENTIFIERS
Function PC0T300()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (PC0TM010.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty; /* Clear the system record*/
      COMMAREA.CATOAP = PC0TM010.CATOAP; /* To application*/
      COMMAREA.CAITEM = PC0TM010.CAITEM; /* To application*/

      XSPCS01(); /* Exit to another application*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    end

    set PC0TM010.CATOAP cursor, bold; /* Highlight*/
    PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    return; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD0G";
    XSPCS01();
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PC0A";
    XSPCS01();

    PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    XSPCS01(); /* Exit to another application*/

    PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    exit stack; /* Redisplay map*/

  end

  if (converseVar.eventKey is pf21) /* PF21 was pressed*/
    COMMAREA.CAITEM = " "; /* Clear item field*/
    COMMAREA.CATOAP = "PC0X"; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to another application*/

    PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    exit stack; /* Redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PC0TM010.XXXPRCNM = "PC0T300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to redisplay map*/
  end


end // end PC0T300

// RESET HIGHLIGHTED FIELDS
Function PC0T400()

   /* ------------------------------------------------------------*/
   /* RESET FIELD ATTRIBUTES TO NORMAL*/
   /* ------------------------------------------------------------*/

  set PC0TM010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0TM010.CAITEM initialAttributes; /* Commarea application data*/

  set PC0TM010.PC0TMBYY initialAttributes; /* P.O. id production year*/
  set PC0TM010.PC0TMBMM initialAttributes; /* P.O. id buy month*/


end // end PC0T400

// PROCESS THE ENTERED DATA
Function PC0T500()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0TM010.CAITEM > " ") /* Application data was entered*/

    set PC0TM010.CAITEM cursor, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0TM010.XXXPRCNM = "PC0T500"; /* Process name*/

  else

    PC0T510(); /* Verify the entered data*/
    PC0T520(); /* Process parm. edits*/
    PC0T530(); /* Process call edits*/

  end


end // end PC0T500

// DO EDITS
Function PC0T510()

   /* ------------------------------------------------------------*/
    /* EDIT THE ENTERED DATA REQUESTED*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* SEE IF MM & YY ENTERED*/
   /* ------------------------------------------------------------*/

  if (PC0TM010.PC0TMBYY == 00 /* Nothing there*/
   && PC0TM010.PC0TMBMM == 00) /* Nothing there*/
    set PC0TM010.PC0TMBYY cursor, bold; /* Highlight error*/
    converseLib.validationFailed(17); /* Parms. must be entered*/
    PC0TM010.XXXPRCNM = "PC0T510"; /* Process name*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* MONTH CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0TM010.PC0TMBMM > 00 /* Something there*/
   && PC0TM010.PC0TMBMM <= 12)

    PC0TW01.PC0TWBMM = PC0TM010.PC0TMBMM;

  else
    converseLib.validationFailed(31); /* Must enter month*/
    PC0TM010.XXXPRCNM = "PC0T510"; /* Process name*/
    set PC0TM010.PC0TMBMM cursor, bold; /* Highlight*/
    PC0TW01.PC0TWBMM = "00";
  end

   /* ------------------------------------------------------------*/
   /* YEAR CHECK--REQUIRED*/
   /* ------------------------------------------------------------*/

  if (PC0TM010.PC0TMBYY >= 00
   && PC0TM010.PC0TMBYY <= 99)
    PC0TW01.PC0TWBYY = PC0TM010.PC0TMBYY;

    /* ---------------- y2k out begin ----------------*/
    /* PC0TW01.PC0TWCY1 = PC0TW01.PC0TWYYY + 1; /* One year greater*/
    /* PC0TW01.PC0TWCY2 = PC0TW01.PC0TWYYY - 1; /* One year less*/
    /* ;*/
    /* IF PC0TW01.PC0TWBYY GE PC0TW01.PC0TWCY2  /* One year less or equal*/
     /* AND PC0TW01.PC0TWBYY LE PC0TW01.PC0TWCY1;*/
    /* ---------------- y2k out end ------------------*/
    /* ---------------- y2k in  begin ----------------*/
    if (PC0TW01.PC0TWBYY > 60)
      PC0TW01.PC0TWBZC = 19;
    else
      PC0TW01.PC0TWBZC = 20;
    end

    PC0TW01.PC0TW1CY = PC0TW01.PC0TWCCY + 1; /* One year greater*/
    PC0TW01.PC0TW2CY = PC0TW01.PC0TWCCY - 1; /* One year less*/

    if (PC0TW01.PC0TWBCY >= PC0TW01.PC0TW2CY /* One year less or equal*/
     && PC0TW01.PC0TWBCY <= PC0TW01.PC0TW1CY)
      /* ---------------- y2k in end --------------------*/
                                  /* One year greater or equal*/

      PC0TW01.PC0TWBDD = 01; /* Buy day*/

    else
      converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
      PC0TM010.XXXPRCNM = "PC0T510"; /* Process name*/
      set PC0TM010.PC0TMBYY cursor, bold; /* Highlight*/
      PC0TW01.PC0TWBYY = 00;
    end
  else
    converseLib.validationFailed(235); /* Must enter current year +1 or -1*/
    PC0TM010.XXXPRCNM = "PC0T510"; /* Process name*/
    set PC0TM010.PC0TMBYY cursor, bold; /* Highlight*/
    PC0TW01.PC0TWBYY = 00;
  end

  if (converseVar.validationMsgNum == 0) /* No message*/
    PC0TS99(); /* Set up p.o. id date*/
  end


end // end PC0T510

// EDIT THE PARAMETERS
Function PC0T520()

  if (converseVar.validationMsgNum == 0) /* No message*/

    set PC0TWTBO empty; /* Clear record*/
    PC0TWTBO.XGPCD = "02"; /* Gpc code*/
    PC0TWTBO.PC0TWBCC = PC0TW01.PC0TWBDC; /* Centry*/
    PC0TWTBO.PC0TWBYY = PC0TW01.PC0TWBDY; /* Year*/
    PC0TWTBO.PC0TWBMM = PC0TW01.PC0TWBDM; /* Month*/
    PC0TWTBO.PC0TWIDT = 0; /* PO ID*/
    PC0TWTBO.PCFSECD = " "; /* season code*/
    PC0TWTBO.PC4ORTYP = " "; /* p.o. type*/
    PC0TWTBO.FY1FCTYC = " "; /* Factory*/
    PC0TWTBO.XCTCD = " "; /* Country code*/
    PC0TWTBO.PC0TWAFL = "T"; /* Application req. flag*/


    /* ------------------------------------------------------------*/
      /* CHECK AND SEE IF THE PARAMETERS ARE ALREADY SET*/
    /* ------------------------------------------------------------*/


    if (PC0TWTBO.PC0TWTBK in PC0TWTBT.PC0TWT2K) /* Parm in table*/
      set PC0TM010.PC0TMBYY cursor, bold; /* Highlight*/
      converseLib.validationFailed(127); /* Parm already in table*/
      PC0TM010.XXXPRCNM = "PC0T520"; /* Process name*/
      return; /* Return to previous process*/
    end
  end


end // end PC0T520

// CHECK TABLES
Function PC0T530()

   /* ------------------------------------------------------------*/
     /* DO A SELECT COUNT "SC" ON THE DFBUY.VFSCTL01 TABLE*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum == 0) /* No message*/


    set FBNREC empty; /* Clear passing record*/
    set FBMREC empty; /* Clear Buy Scheduler record*/

    FBNREC.FBNFUNC = "SC"; /* Passing record*/
    FBMREC.FBMALAFL = "N"; /* Scheduler flag*/


    PC0TS98(); /* See if all Schedulers ready*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      if (FBNREC.FBNCOUNT > 0)
        converseLib.validationFailed(258); /* Not all schedulers ready to autoload*/
        PC0TM010.XXXPRCNM = "PC0T530"; /* Process name*/
      end

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

        converseLib.validationFailed(18); /* No row found*/
        PC0TM010.XXXPRCNM = "PC0T530"; /* Process name*/

      end
    end
  end


   /* ------------------------------------------------------------*/
     /* DO A SELECT COUNT "SC" ON THE DFBUY.VMFBUY01 TABLE*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/


    set FBNREC empty; /* Clear passing record*/
    set FB7REC empty; /* Clear Factory buy record*/

    FBNREC.FBNFUNC = "SC"; /* Passing record*/
    FB7REC.FB8BUYDT = PC0TW01.PC0TWFAT; /* Buy date*/
    FB7REC.FB7BUYST = " "; /* Buy status*/


    PC0TS97(); /* See if buy data exists*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      if (FBNREC.FBNCOUNT == 0)
        converseLib.validationFailed(259); /* No data exists for buy date*/
        PC0TM010.XXXPRCNM = "PC0T530"; /* Process name*/
      end

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

        converseLib.validationFailed(18); /* No row found*/
        PC0TM010.XXXPRCNM = "PC0T530"; /* Process name*/

      end
    end
  end

   /* ---------------------------------------------------------------*/
     /* DO A CHECK FOR THE EXISTENCE OF DUPLICATES IN VMFBUY TABLE*/
   /* ---------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/

    set FBNREC empty; /* Clear passing record*/

    FBNREC.FBNFUNC = "S2"; /* Passing record*/
    PC0TS92();

    FBNREC.FBNFUNC = "N2"; /* Passing record*/
    PC0TS93();

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      converseLib.validationFailed(561); /* Duplicates exist in VMFBUY table*/
      PC0TM010.XXXPRCNM = "PC0T530"; /* Process name*/
    end

    FBNREC.FBNFUNC = "C2"; /* Passing record*/
    PC0TS94();

  end
end // end PC0T530

// PROCESS THE VALID DATA
Function PC0T600()
   /* ------------------------------------------------------------*/
       /* PROCESS THE INPUT*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter pressed*/
   && converseVar.validationMsgNum == 0) /* No message*/

    PC0T610(); /* Save parms.*/

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* production system*/
      PC0T622(); /* format production jcl ftwr buy*/
      PC0T620(); /* format production jcl autoload*/
    else
      PC0T623(); /* format development jcl ftwr buy*/
      PC0T621(); /* format development jcl autoload*/
    end

    PC0TW01.PC0TWLIX = 0; /* Line index*/
    PC0TW01.PC0TWMLX = 10; /* Max lines*/
    set PC0TWTBO empty; /* Clear checking array*/

  end


end // end PC0T600

// SAVE THE PARMS.
Function PC0T610()

   /* ------------------------------------------------------------*/
      /* IF NO ERRORS SAVE THE PARMETERS*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message*/

    PC0TW01.PC0TWAIX = PC0TW01.PC0TWAIX + 1; /* Add 1 to index*/

    PC0TWTBT.XGPCD[PC0TWAIX] = "02"; /* Gpc code*/
    PC0TWTBT.PC0TWBCC[PC0TWAIX] = PC0TW01.PC0TWBDC; /* Centry*/
    PC0TWTBT.PC0TWBYY[PC0TWAIX] = PC0TW01.PC0TWBDY; /* Year*/
    PC0TWTBT.PC0TWBMM[PC0TWAIX] = PC0TW01.PC0TWBDM; /* Month*/
    PC0TWTBT.PC0TWIDT[PC0TWAIX] = 0; /* PO ID*/
    PC0TWTBT.PC0TWPCC[PC0TWAIX] = PC0TW01.PC0TWBDC; /* po id cc*/
    PC0TWTBT.PC0TWPDM[PC0TWAIX] = PC0TW01.PC0TWBDM; /* delivry mth*/
   /* --------------- y2k out begin --------------------*/
   /* IF PC0TW01.PC0TWBDM = 01;*/
      /* MOVE 11 TO PC0TWTBT.PC0TWPPM(PC0TWAIX);   /* production mth*/
      /* PC0TWTBT.PC0TWPYY(PC0TWAIX) = PC0TW01.PC0TWBDY - 1;*/
   /* ELSE;*/
      /* IF PC0TW01.PC0TWBDM = 02;*/
        /* MOVE 12 TO PC0TWTBT.PC0TWPPM(PC0TWAIX); /* production mth*/
        /* PC0TWTBT.PC0TWPYY(PC0TWAIX) = PC0TW01.PC0TWBDY - 1;*/
      /* ELSE;*/
        /* PC0TWTBT.PC0TWPPM(PC0TWAIX) = PC0TW01.PC0TWBDM - 2; /* prod mth*/
        /* MOVE PC0TW01.PC0TWBDY TO*/
                                  /* PC0TWTBT.PC0TWPYY(PC0TWAIX); /* po id*/
                                  /* yy*/
      /* END;*/
   /* --------------- y2k out begin --------------------*/
   /* --------------- y2k in  begin --------------------*/
    if (PC0TW01.PC0TWBDM == 01)
      PC0TWTBT.PC0TWPPM[PC0TWAIX] = 11; /* production mth*/
      PC0TWTBT.PC0TWP1C[PC0TWAIX] = PC0TW01.PC0TWB1C - 1;
    else
      if (PC0TW01.PC0TWBDM == 02)
        PC0TWTBT.PC0TWPPM[PC0TWAIX] = 12; /* production mth*/
        PC0TWTBT.PC0TWP1C[PC0TWAIX] = PC0TW01.PC0TWB1C - 1;
      else
        PC0TWTBT.PC0TWPPM[PC0TWAIX] = PC0TW01.PC0TWBDM - 2; /* prod mth*/
        PC0TWTBT.PC0TWPYY[PC0TWAIX] = PC0TW01.PC0TWBDY; /* po id yy*/
      end
   /* --------------- y2k out end ----------------------*/
    end
    PC0TWTBT.PCFSECD[PC0TWAIX] = " "; /* season code*/
    PC0TWTBT.PC4ORTYP[PC0TWAIX] = " "; /* p.o. type*/
    PC0TWTBT.FY1FCTYC[PC0TWAIX] = "ALL "; /* Factory*/
    PC0TWTBT.PC0TWAFL[PC0TWAIX] = "T"; /* Application req. flag*/


    /* ----------------------------------------------------------*/
      /* ADD ONE TO THE COUNTER AND CHECK INDEX*/
    /* ----------------------------------------------------------*/


    if (PC0TW01.PC0TWAIX == 10) /* Max amount for table*/
      converseLib.validationFailed(126); /* Max amount reached*/
      PC0TM010.XXXPRCNM = "PC0T610"; /* Process name*/
    end
  end


end // end PC0T610

// SUBMIT PROD FTWR JCL
Function PC0T620()

   /* ------------------------------------------------------------*/
   /* CREATE & SUBMIT THE PROD FTWR AUTOLOAD JCL - JOB PC1102*/
   /* ------------------------------------------------------------*/


  if (PC0TWTBT.PC0TWT2K[PC0TWAIX] > " ") /* Something in the table*/


    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/

    PC0TW01.PC0TWOIX = 0; /* Initialize over. index*/
    PC0TW01.PC0TWLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC0TW01.PC0TWLIX > 0) /* Until end of table*/

      if (PC0TT01.TARTYPE[PC0TWLIX] == "J") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT01.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT01.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT01.TARTYPE[PC0TWLIX] == "N") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT01.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT01.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "A") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for china only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "CHIN";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "B") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for indonesia only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "INDO";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "C") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Thailand only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "THAI";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "D") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for korea only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "KORE";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT01.TARTYPE[PC0TWLIX] == "E") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Taiwan only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "TAIW";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "F") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Brazil only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "BRAZ";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "G") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Italy only  - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "ITAL";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT01.TARTYPE[PC0TWLIX] == "H") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for USA only    - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "USA";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT01.TARTYPE[PC0TWLIX] == "I") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Vietnam only    - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "VIET";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT01.TARTYPE[PC0TWLIX] == " ") /* no tartype*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT01.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT01.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


       /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
       /* ------------------------------------------------------------*/

      if (PC0TT01.TARJCL[PC0TWLIX] == "/*EOF") /* End of table*/

        PC0TW01.PC0TWLIX = 0; /* Indicate end of table*/

      else

        PC0TW01.PC0TWLIX = PC0TW01.PC0TWLIX + 1;

      end


    end /* *** END WHILE LOOP*/

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC0TS96(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC0TM010.XXXPRCNM = "PC0T620"; /* Process name*/
      PC0TM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
         /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

    else

      PC0TM010.XXXPRCNM = "PC0T620"; /* Process name*/
      converseLib.validationFailed(10); /* Error encountered with print request*/

      exit stack;

    end

  end /* END IF SOMETHING IN TABLE*/


end // end PC0T620

// SUBMIT TEST FTWR JCL
Function PC0T621()

   /* ------------------------------------------------------------*/
   /* CREATE AND SUBMIT TEST FTWR AUTOLOAD JCL - JOB PC1102T*/
   /* ------------------------------------------------------------*/

  if (PC0TWTBT.PC0TWT2K[PC0TWAIX] > " ") /* Something in the table*/


    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/

    PC0TW01.PC0TWOIX = 0; /* Initialize over. index*/
    PC0TW01.PC0TWLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC0TW01.PC0TWLIX > 0) /* Until end of table*/

      if (PC0TT11.TARTYPE[PC0TWLIX] == "J") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT11.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT11.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT11.TARTYPE[PC0TWLIX] == "N") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT11.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT11.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "P") /* Parameters statement*/

          /* ------------------------------------------------------------*/
           /* Format parameters*/
          /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "A") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for china only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "CHIN";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "B") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for indonesia only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "INDO";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "C") /* Parameters statement*/

        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Thailand only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "THAI";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "D") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for korea only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "KORE";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end

      if (PC0TT11.TARTYPE[PC0TWLIX] == "E") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Taiwan only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "TAIW";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "F") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Brazil only - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "BRAZ";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "G") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Italy only  - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "ITAL";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "H") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for USA only    - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "USA";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == "I") /* Parameters statement*/


        /* ------------------------------------------------------------*/
        /* Format parameter for step that creates order by size rpt*/
        /* for Vietnam only    - setting application flag to '9'*/
        /* tells PC100D to extract by po id, fcty and ctry*/
        /* ------------------------------------------------------------*/

        PC0TW02.PC0TWTYP = "P"; /* Type*/
        PC0TWTBT.PC0TWAFL = "9"; /* Application flag*/
        PC0TWTBT.XCTCD = "VIET";
        TA6REC.TARJCL[TA6INDEX] = PC0TWTBT.PC0TWT2K; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TW02.PC0TWTYP; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


      if (PC0TT11.TARTYPE[PC0TWLIX] == " ") /* no tartype*/

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC0TT11.TARJCL[PC0TWLIX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC0TT11.TARTYPE[PC0TWLIX]; /* Typ*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end


       /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
       /* ------------------------------------------------------------*/

      if (PC0TT11.TARJCL[PC0TWLIX] == "/*EOF") /* End of table*/

        PC0TW01.PC0TWLIX = 0; /* Indicate end of table*/

      else

        PC0TW01.PC0TWLIX = PC0TW01.PC0TWLIX + 1;

      end


    end /* *** END WHILE LOOP*/

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC0TS96(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      PC0TM010.XXXPRCNM = "PC0T621"; /* Process name*/
      PC0TM010.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
         /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

    else

      PC0TM010.XXXPRCNM = "PC0T621"; /* Process name*/
      converseLib.validationFailed(10); /* Error encountered with print request*/

      exit stack;

    end

  end /* END IF SOMETHING IN TABLE ***/

   /* *************************** END PC0T621 ***************************/
end // end PC0T621

// prod. jcl for fwtr buy rpt
Function PC0T622()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

  if (PC0TWTBT.PC0TWT2K[PC0TWAIX] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/

    PC0TW01.PC0TWLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC0TW01.PC0TWLIX > 0) /* Until end of table*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PC0TT02.TARJCL[PC0TWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC0TT02.TARTYPE[PC0TWLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      if (PC0TT02.TARJCL[PC0TWLIX] == "/*EOF") /* End of table*/

        PC0TW01.PC0TWLIX = 0; /* Indicate end of table*/

      else

        PC0TW01.PC0TWLIX = PC0TW01.PC0TWLIX + 1; /* Increment table index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC0TS95(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      /* MOVE 'PC0T622' TO PC0TM010.XXXPRCNM; Process name*/
      /* MOVE COMMAREA.CAMSG TO PC0TM010.EZEMSG;===> Job info messege*/
         /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

    else

      PC0TM010.XXXPRCNM = "PC0T622"; /* Process name*/
      converseLib.validationFailed(10); /* Error encountered with print request*/

      exit stack;

    end
  end


end // end PC0T622

// test jcl for ftwr buy rpt
Function PC0T623()

   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

  if (PC0TWTBT.PC0TWT2K[PC0TWAIX] > " ") /* Something in the table*/

    /* ------------------------------------------------------------*/
     /* Initialize the work areas and indexes to be used.*/
    /* ------------------------------------------------------------*/

    set TA6REC empty; /* Subroutine work area*/

    PC0TW01.PC0TWLIX = 1; /* Initialize table index*/
    TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

    /* ------------------------------------------------------------*/
     /* Format JCL and parameters into the subroutine work area.*/
    /* ------------------------------------------------------------*/

    while (PC0TW01.PC0TWLIX > 0) /* Until end of table*/

      /* ------------------------------------------------------------*/
       /* If not end of table, increment the table index.*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PC0TT22.TARJCL[PC0TWLIX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PC0TT22.TARTYPE[PC0TWLIX]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      if (PC0TT22.TARJCL[PC0TWLIX] == "/*EOF") /* End of table*/

        PC0TW01.PC0TWLIX = 0; /* Indicate end of table*/

      else

        PC0TW01.PC0TWLIX = PC0TW01.PC0TWLIX + 1; /* Increment table index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Submit the JCL and parameters for batch execution.*/
    /* ------------------------------------------------------------*/

    PC0TS95(); /* Submit the JCL*/

    /* ------------------------------------------------------------*/
     /* Display results of print request.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* If print was successful*/
     && SQLCA.VAGen_SQLCODE == 0)     

      /* MOVE 'PC0T623' TO PC0TM010.XXXPRCNM; Process name*/
      /* MOVE COMMAREA.CAMSG TO PC0TM010.EZEMSG;===> Job info messege*/
         /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

    else

      PC0TM010.XXXPRCNM = "PC0T623"; /* Process name*/
      converseLib.validationFailed(10); /* Error encountered with print request*/

      exit stack;

    end
  end


end // end PC0T623

// SELECT COUNT FBMREC
Function PC0TS92()

   /* ------------------------------------------------------------*/
   /* Declare cursor to check for duplicates in VMFBUY table*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "FB1520" ("S2", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
  TA1REC.TA1LOC = "PC0TS92 \"S2\" CURSOR FOR VMFBUY ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0TM010.XXXPRCNM = "PC0TS92"; /* Process name*/

  exit stack;


end // end PC0TS92

// SELECT COUNT FBMREC
Function PC0TS93()

   /* ------------------------------------------------------------*/
   /* Fetch a row from VMFBUY table*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "FB1520" ("N2", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
  TA1REC.TA1LOC = "PC0TS93 \"N2\" FETCH ROW FROM VMF";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0TM010.XXXPRCNM = "PC0TS93"; /* Process name*/

  exit stack;


end // end PC0TS93

// SELECT COUNT FBMREC
Function PC0TS94()

   /* ------------------------------------------------------------*/
   /* Close the cursor opened on VMFBUY table*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "FB1520" ("C2", SQLCA) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
  TA1REC.TA1LOC = "PC0TS94 \"C2\" CLOSE CURSOR      ";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0TM010.XXXPRCNM = "PC0TS94"; /* Process name*/

  exit stack;


end // end PC0TS94

// bypass prt scrn to submit jcl
Function PC0TS95()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PC0TM010.XXXPRCNM = "PC0TS95"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PC0TM010.XXXPRCNM = "PC0TS95"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0TM010.XXXPRCNM = "PC0TS95"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PC0TS95

// SUBMIT JCL TO INTERNAL READER
Function PC0TS96()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PC0TM010.XXXPRCNM = "PC0TS96"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PC0TM010.XXXPRCNM = "PC0TS96"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0TM010.XXXPRCNM = "PC0TS96"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PC0TS96

// SELECT COUNT FB7REC
Function PC0TS97()

   /* ------------------------------------------------------------*/
   /* FACTORY BUY MERGED QTY TO BUY RECORD*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select count the row from the factory buy merged qty to buy*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3490" (FBNREC, SQLCA, FB7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
  TA1REC.TA1LOC = "PC0TS97 \"SC\" FACTORY BUY ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFBUY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0TM010.XXXPRCNM = "PC0TS97"; /* Process name*/

  exit stack;


end // end PC0TS97

// SELECT COUNT FBMREC
Function PC0TS98()

   /* ------------------------------------------------------------*/
   /* FACTORY BUY SCHEDULER RECORD*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select count the row from the factory scheduler record*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4670" (FBNREC, SQLCA, FBMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
     || SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0T"; /* Process name*/
  TA1REC.TA1LOC = "PC0TS98 \"SC\" FACTORY SCHED. ROW";
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFSCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  PC0TM010.XXXPRCNM = "PC0TS98"; /* Process name*/

  exit stack;


end // end PC0TS98

// FORMAT THE BUY DATE
Function PC0TS99()

   /* ----------------------------------------------------------*/
   /* SET UP BUY DATE*/
   /* ----------------------------------------------------------*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* Move in option*/
  TA2REC.TA2GRTYP = "E"; /* Move in type*/

  TA2REC.TA2GRGEN = PC0TW01.PC0TWDAT;

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date validation*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (TA2REC.TA2RTNCD == 0000) /* Valid date*/
      PC0TW01.PC0TWBAT = TA2REC.TA2GRCYM; /* Buy date*/
      PC0TW01.PC0TWBDT = TA2REC.TA2GRCYM; /* Buy date*/
      PC0TW01.PC0TWFAT = TA2REC.TA2GRGGN; /* Pass Buy date*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "PC0TS99"; /* Process name*/
      TA1REC.TA1LOC = "SELECT DATE ROUTINE     ";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0TM010.XXXPRCNM = "PC0TS99"; /* Process name*/

    end
  end




end // end PC0TS99

//*** RECORD=FBNREC ****
// ***************** po date pass record *********************
// 
//   This record contains a function to be passed for po
//   footwear buy,and  any factory load applications.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/08/89   jmclau   New record.
// 11/30/89   jmclau   added fbnsmtot fld...
// **********************
Record FBNREC type basicRecord
  5 FBNGROUP FBNGROUP ; 
    10 FBNFUNC FBNFUNC ; 
    10 FBNCOUNT FBNCOUNT ; 
    10 FBNSMTOT FBNSMTOT ; 
end // end FBNREC

//*** RECORD=PC0TW01 ****
// ************************************************************
// *
// *     WORKING STORAGE FOR PC0T
// *
// *
// *   DATE             USERID        COMMENTS
// * ________         __________     ________________________
// * 09/20/89          gwitzi         new record
// * 11-20-97      y2k oricha         century levels added to
// *                                  dates for calculations.
// *
// ************************************************************
// ***********************
Record PC0TW01 type basicRecord
  10 PC0TWDAT PC0TWDAT ; 
    15 PC0TWBCY PC0TWBCY ; 
      20 PC0TWBZC PC0TWBZC ; 
      20 PC0TWBYY PC0TWBYY ; 
    15 PC0TWBMM PC0TWBMM ; 
    15 PC0TWBDD PC0TWBDD ; 
  10 PC0TWBAT PC0TWBAT ; 
    15 PC0TWB1C PC0TWB1C ; 
      20 PC0TWBDC PC0TWBDC ; 
      20 PC0TWBDY PC0TWBDY ; 
    15 PC0TWBDM PC0TWBDM ; 
  10 PC0TW1CY PC0TW1CY ; 
    15 PC0TW1CC PC0TW1CC ; 
    15 PC0TWCY1 PC0TWCY1 ; 
  10 PC0TW2CY PC0TW2CY ; 
    15 PC0TW2CC PC0TW2CC ; 
    15 PC0TWCY2 PC0TWCY2 ; 
  10 PC0TWLIX PC0TWLIX ; 
  10 PC0TWAIX PC0TWAIX ; 
  10 PC0TWMLX PC0TWMLX ; 
  10 PC0TWBDT PC0TWBDT ; 
  10 PC0TWFAT PC0TWFAT ; 
  10 PC0TWCDT PC0TWCDT ; 
    15 PC0TWCCY PC0TWCCY ; 
      20 PC0TWCCC PC0TWCCC ; 
      20 PC0TWYYY PC0TWYYY ; 
    15 PC0TWMMM PC0TWMMM ; 
    15 PC0TWDDD PC0TWDDD ; 
  10 PC0TWLTC PC0TWLTC ; 
  10 PC0TWOIX PC0TWOIX ; 
end // end PC0TW01

//*** RECORD=PC0TW02 ****
// ************************************************************
// *
// *      JCL WORKING STORAGE FOR  PC0T
// *
// *  DATE              USERID       COMMENTS
// * ________          _________    _______________________
// * 09/20/89          gwitzi       new record
// *
// ************************************************************
// ***********************
Record PC0TW02 type basicRecord
  10 PC0TWJCE PC0TWJCE ; 
    15 PC0TWEX1 PC0TWEX1 ; 
    15 PC0TWPGM PC0TWPGM ; 
    15 * char(58) ; 
  10 PC0TWJCP PC0TWJCP ; 
  10 PC0TWTYP PC0TWTYP ; 
  10 PC0TWOVR PC0TWOVR [7] ; 
  10 PC0TWJCC PC0TWJCC [7] ; 
    15 * char(19) ; 
    15 PC0TWCLG PC0TWCLG ; 
    15 * char(36) ; 
end // end PC0TW02

//*** RECORD=PC0TWTBO ****
// ************************************************************
// *
// *     COMPARE ARRAY RECORD AREA TO WORK WITH PC0TTB2
// *
// ************************************************************
// ************************
Record PC0TWTBO type basicRecord
  10 PC0TWTBK PC0TWTBK ; 
    15 XGPCD XGPCD ; 
    15 PC0TWBCC PC0TWBCC ; 
    15 PC0TWBYY PC0TWBYY ; 
    15 PC0TWBMM PC0TWBMM ; 
    15 PC0TWIDT PC0TWIDT ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC0TWAFL PC0TWAFL ; 
    15 * char(50) ; 
end // end PC0TWTBO

//*** RECORD=PC0TWTBT ****
// ************************************************************
// *
// *     ARRAY TABLE FOR STORING PARMS. TO PASS TO TA6REC
// *   DATE     USERID           COMMENTS
// *  ______   ________         ______________________
// *  9/14/89  gwitzi           new array record
// *  7/31/92 ksanfo            added redefines for PC0TWIDT
// *                            (pc-po-id-mo-rng)
// *  11-21-97 oricha y2k       added pc0twp1c century/year
// *                            level for date calcs.
// *
// ************************************************************
// ************************
Record PC0TWTBT type basicRecord
  10 PC0TWT2K PC0TWT2K [20] ; 
    15 XGPCD XGPCD ; 
    15 PC0TWBUY PC0TWBUY ; 
      20 PC0TWBCC PC0TWBCC ; 
      20 PC0TWBYY PC0TWBYY ; 
      20 PC0TWBMM PC0TWBMM ; 
    15 PC0TWIDT PC0TWIDT ; 
      20 * num(1) ; //        filler
      20 PC0TWP1C PC0TWP1C ; 
        25 PC0TWPCC PC0TWPCC ; 
        25 PC0TWPYY PC0TWPYY ; 
      20 PC0TWPPM PC0TWPPM ; 
      20 PC0TWPDM PC0TWPDM ; 
    15 PCFSECD PCFSECD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
    15 PC0TWAFL PC0TWAFL ; 
    15 * char(50) ; 
end // end PC0TWTBT

DataItem FBNCOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FBNFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FBNGROUP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FBNSMTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century cc
DataItem PC0TW1CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year ccyy
DataItem PC0TW1CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century cc
DataItem PC0TW2CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year ccyy
DataItem PC0TW2CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Application flag
DataItem PC0TWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array index
DataItem PC0TWAIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0TWB1C num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working buy date
DataItem PC0TWBAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        centry
DataItem PC0TWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year ccyy
DataItem PC0TWBCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        centry
DataItem PC0TWBDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        day
DataItem PC0TWBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        month
DataItem PC0TWBDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy date
DataItem PC0TWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        year
DataItem PC0TWBDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        month
DataItem PC0TWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0TWBUY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        year
DataItem PC0TWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century cc
DataItem PC0TWBZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      centry
DataItem PC0TWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year ccyy
DataItem PC0TWCCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem PC0TWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition logic
DataItem PC0TWCLG char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year +1
DataItem PC0TWCY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year -1
DataItem PC0TWCY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working date
DataItem PC0TWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      day
DataItem PC0TWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// execute stat. constants
DataItem PC0TWEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem PC0TWFAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id mo rng
DataItem PC0TWIDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Condition statement
DataItem PC0TWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// execute statement
DataItem PC0TWJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm. statement
DataItem PC0TWJCP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line index
DataItem PC0TWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Less than condition
DataItem PC0TWLTC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max. lines
DataItem PC0TWMLX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      month
DataItem PC0TWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Override index
DataItem PC0TWOIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// override statement
DataItem PC0TWOVR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyy
DataItem PC0TWP1C num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        centry
DataItem PC0TWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        delivery month
DataItem PC0TWPDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// program name
DataItem PC0TWPGM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//        production month
DataItem PC0TWPPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//        year
DataItem PC0TWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table key
DataItem PC0TWT2K char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem PC0TWTBK char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl type
DataItem PC0TWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//      year
DataItem PC0TWYYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

