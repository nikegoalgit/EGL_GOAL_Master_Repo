package pc0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0I ****
// This program will allow the user to inquire/maintain
// p.o. itm special instruction information. The database
// will return 0 to n rows based upon the selection criteria.
// This program will format the screen with the data returned
// from the database.
// 
// This program enables the user to inquiry, add, change, or
// delete p.o. itm special instruction rows.
// 
//   A user can select p.o. itm special instruction rows
// for inquiry by general product group, style/clr/dim, quality
// code, p.o. number, spec code, pkg code, and own code.  By
// pressing enter p.o. item special instruction rows will be
// displayed for viewing by the user.
// 
//   A user may add new rows by pressing PF13 from the list
// screen (blank or filled with rows).  This will position
// them in an ADD screen.  A row can then be added ( if
// entries pass edit criteria) by pressing ENTER.  The user
// may continue adding or exit to the list screen.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(non-key data only)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
//   A user may select one or more rows for delete and press
// PF15.  The user will then be positioned in an DELETE
// screen where they will hit enter to confrim delete and
// cycle to the next row selected, or, PF3 to return to the
// list screen.
// ;
// -------   --------  ------   ------------------------------
// control     date     name    description
// -------   --------  ------   -------------------------------
//           06/26/89  rgilli   created
//           09/19/90  lsutto   allow gpc 07 access
//           04/10/91  lsutto   init new itm-seq-number
//           04/18/91  mpisto   utilize new itm-seq-number
//           05/08/91  mpisto   handle multi records from pc0k
//           06/10/91  lsutto   DB2 changes,S22,update PCJREC
//           10/16/91  CHAERT   SPACE IN STYLE/CLR DISPLAY
//           11/21/91  CHAERT   oets label s/b non-enterable
//           03/10/92  lsutto   db2 chg/ add so# to pcgrec
//                              in pc0i350
//           12/03/92  lsutto   add no-beep logic in PC0I120,
//                              220,310,420,520
//           03/25/96  jniese   add loop to help prevent audits
//                              with the same time stamp.
//           06/02/97  PHARWO   Chaned PO view names - PCA367,
//                              PPR project.
//           07/12/97  jniese   pca367 - ppr corrections
//   PCA398  10/17/97  kgraha   Change to allow FC po's to
//                              process like OP po's.
// *********************
Program PC0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC0IW01 PC0IW01; // record
  PC0IW02 PC0IW02; // record
  PC0IW03 PC0IW03; // record
  PCBREC PCBREC; // record
  PCDREC PCDREC; // record
  PCGREC PCGREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YSITBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PC9TBL {deleteAfterUse = yes}; // table
  use PC0IM.PC0IM001,  // forms
      PC0IM.PC0IM002, 
      PC0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PC0I001;

    PC0I001: PC0I001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0I002;

    PC0I002: PC0I002();
     /* ------------------------------------------------------------*/
      /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0I002;

  end // end main
end // end PC0I

// first time processing
Function PC0I001()
   /* ------------------------------------------------------------*/
   /* check commarea security fields*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.XGPCD != "01"
   && COMMAREA.XGPCD != "02"
   && COMMAREA.XGPCD != "03"
   && COMMAREA.XGPCD != "07")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

  if (COMMAREA.CAFROMAP != "PC0E"
   && COMMAREA.CAFROMAP != "PC05"
   && COMMAREA.CAFROMAP != "PC0G"
   && COMMAREA.CAFROMAP != "PC0F"
   && COMMAREA.CAFROMAP != "PC0R"
   && COMMAREA.CAFROMAP != "PC0K"
   && COMMAREA.CAFROMAP != "PC0U")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 191; /* security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

   /* ------------------------------------------------------------*/
   /* do not allow entrance if coming from pc0f and pc0g and*/
   /* not in copy mode*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0F"
   || COMMAREA.CAFROMAP == "PC0G")
    if (PCWREC.PCWFNC[4] != "C")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 191; /* security violation*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A";
      XSEXIT();
    end
  end

   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PC0IW01 empty;
  set PC0IW02 empty;
  set PC0IW03 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set VPOITM03 empty;
  set PCBREC empty;
  set PCDREC empty;
  set PCGREC empty;
  set PCYREC empty;

  PC0IW01.PC0IWCIX = 1; /* init cursor index*/
  PC0IW01.PC0IWMAP = "1"; /* init to map 1*/
  PC0IW01.PC0IWSWR = "Y"; /* init request for data switch*/
  PC0IW01.PC0IWBYF = "N"; /* init bypass processing flag*/
  PC0IW01.PC0IWINQ = "N"; /* reset inquiry flag*/
  PC0IW01.PC0IWUPD = "N"; /* reset update flag*/
  PC0IW01.PC0IWLDF = "Y";

  if (COMMAREA.CAFROMAP == "PC0F"
   || COMMAREA.CAFROMAP == "PC0G"
   || COMMAREA.CAFROMAP == "PC05")
    if (PCWREC.CAFROMAP[1] == "PC0I")
      PC0IW03.PC0IW3GP = PCWREC.PCWUSER1;
      PCWREC.CAFROMAP[1] = " ";
    else
      if (PCWREC.CAFROMAP[2] == "PC0I")
        PC0IW03.PC0IW3GP = PCWREC.PCWUSER2;
        PCWREC.CAFROMAP[2] = " ";
      else
        if (PCWREC.CAFROMAP[3] == "PC0I")
          PC0IW03.PC0IW3GP = PCWREC.PCWUSER3;
          PCWREC.CAFROMAP[3] = " ";
        else
          if (PCWREC.CAFROMAP[4] == "PC0I")
            PC0IW03.PC0IW3GP = PCWREC.PCWUSER4;
            PCWREC.CAFROMAP[4] = " ";
          else
            PC0IW01.PC0IWLDF = "N";
          end
        end
      end
    end

    if (PC0IW01.PC0IWLDF == "Y")
      PCWREC.PC6ETSDT = PC0IW03.PC0IWETS;
      PCWREC.PC6RTADT = PC0IW03.PC0IWRTA;
      PCWREC.PC6OETS = PC0IW03.PC0IWOET;
      PCWREC.PC2CUXID = PC0IW03.PC2CUXID;
      PCWREC.XWHCD = PC0IW03.XWHCD;
      PCWREC.YMTCD = PC0IW03.YMTCD;
      COMMAREA.CAFROMAP = PC0IW03.CAFROMAP;
    end
  end

  if (COMMAREA.CAFROMAP == "PC0E"
   || COMMAREA.CAFROMAP == "PC0K"
   || COMMAREA.CAFROMAP == "PC0R"
   || COMMAREA.CAFROMAP == "PC0U"
   || PC0IW01.PC0IWLDF == "N")
    PC0IW03.XGPCD = COMMAREA.XGPCD;
    PC0IW03.PO-REG-CD = PCWREC.PO-REG-CD;
    PC0IW03.CAFROMAP = COMMAREA.CAFROMAP;
    PC0IW03.PC0IWPID = PCWREC.PC3POIDT;
    PC0IW03.PC3PONBR = PCWREC.PC3PONBR;
    PC0IW03.PC6ITMNB = PCWREC.PC6ITMNB[1];
    PC0IW03.SY1STNBR = PCWREC.SY1STNBR;
    PC0IW03.SY2CLRID = PCWREC.SY2CLRID;
    PC0IW03.XDMCD = PCWREC.XDMCD;
    PC0IW03.XQACD = PCWREC.XQACD;
    PC0IW03.XOWCD = PCWREC.XOWCD;
    PC0IW03.PC2INSEG = PCWREC.PC2INSEG;
    PC0IW03.XPGCD = PCWREC.XPGCD;
    PC0IW03.XUMCD = PCWREC.XUMCD;
    PC0IW03.PC0IWETS = PCWREC.PC6ETSDT;
    PC0IW03.PC0IWRTA = PCWREC.PC6RTADT;
    PC0IW03.PC0IWOET = PCWREC.PC6OETS;
    PC0IW03.YMTCD = PCWREC.YMTCD;
    PC0IW03.XWHCD = PCWREC.XWHCD;
    PC0IW03.PC2CUXID = PCWREC.PC2CUXID;

    if (COMMAREA.CAFROMAP == "PC0K")
      PC0IW03.PC6ITMNB = PCWREC.PC6ITMNB[PCWSYIDX];
    end

     /* reformat p.o. id for display*/

    if (PC0IW03.PC0IWPID > 0)
      if (PC0IW03.XGPCD == "03")
        PC0IW03.PC0IWFPY = PCWREC.PCFSECD;
      else
        PC0IW03.PC0IWFPY = PC0IW03.PC0IWPOY;
      end
      PC0IW03.PC0IWFPM = PC0IW03.PC0IWPOM;
      PC0IW03.PC0IWFPD = PC0IW03.PC0IWPDM;
      PC0IW03.PC0IWFFC = PCWREC.FY1FCTYC;
      PC0IW03.PC0IWDS1 = "-";
      PC0IW03.PC0IWDS2 = "-";
      PC0IW03.PC0IWDS3 = "-";
    end

     /* reformat estimate ship date*/

    PC0IW03.PC0IWFEM = PC0IW03.PC0IWETM;
    PC0IW03.PC0IWFED = PC0IW03.PC0IWETD;
    PC0IW03.PC0IWFEY = PC0IW03.PC0IWETY;

     /* reformat rta date*/

    PC0IW03.PC0IWFRM = PC0IW03.PC0IWRTM;
    PC0IW03.PC0IWFRD = PC0IW03.PC0IWRTD;
    PC0IW03.PC0IWFRY = PC0IW03.PC0IWRTY;

     /* reformat oets date*/

    PC0IW03.PC0IWFOM = PC0IW03.PC0IWOEM;
    PC0IW03.PC0IWFOD = PC0IW03.PC0IWOED;
    PC0IW03.PC0IWFOY = PC0IW03.PC0IWOEY;

  end

   /* ------------------------------------------------------------*/
   /* If from application equals pc0r, pc0u or pc0k w/function*/
   /* code ne 'c' allow inquiry only.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0R"
   || COMMAREA.CAFROMAP == "PC0U")
    PC0IW01.PC0IWINQ = "Y";
  end

  if (COMMAREA.CAFROMAP == "PC0K")
    PC0IW01.PC0IWCIX = 1;
    while (PC0IW01.PC0IWCIX <= 4)
      if (PCWREC.CAFROMAP[PC0IWCIX] == "PC0K"
       && PCWREC.PCWFNC[PC0IWCIX] != "C")
        PC0IW01.PC0IWINQ = "Y";
      end
      PC0IW01.PC0IWCIX = PC0IW01.PC0IWCIX + 1;
    end
    PC0IW01.PC0IWCIX = 1;
  end

   /* ------------------------------------------------------------*/
   /* If from application equals pc0e or pc0k w/function*/
   /* code of 'c' allow update*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PC0E"
   || COMMAREA.CAFROMAP == "PC05")
    PC0IW01.PC0IWUPD = "Y";
  end

  if (COMMAREA.CAFROMAP == "PC0K")
    PC0IW01.PC0IWCIX = 1;
    while (PC0IW01.PC0IWCIX <= 4)
      if (PCWREC.CAFROMAP[PC0IWCIX] == "PC0K"
       && PCWREC.PCWFNC[PC0IWCIX] == "C")
        PC0IW01.PC0IWUPD = "Y";
      end
      PC0IW01.PC0IWCIX = PC0IW01.PC0IWCIX + 1;
    end
    PC0IW01.PC0IWCIX = 1;
  end

end // end PC0I001

// p.o. product spec instr maint
Function PC0I002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Display the p.o. product special instr - list screen*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "1") /* Map 1 was requested*/
    PC0I100(); /* Display map 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the p.o. product special instr - INQUIRY screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "2" /* Map 2 was selected*/
   && PC0IW01.PC0IWFSW == "I") /* and INQUIRE function*/

    if (converseVar.validationMsgNum == 0
     && PC0IW01.PC0IWBYF == "N")
      PC0IW01.PC0IWIXM = 1; /* Initialize index*/
    end

    while (PC0IW01.PC0IWIXM <= 12 /* Until end of page*/
     && PC0IW01.PC0IWMAP == "2") /* and map 2*/

      if (PC0IM001.PC0IMSEL[PC0IWIXM] == "S") /* If line selected*/
        PC0I200(); /* Display INQUIRY Map*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0IW01.PC0IWBYF == "N")         
        PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Increment index*/
      end
    end
    PC0IW01.PC0IWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the p.o. product special instr - ADD screen*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "2" /* Map 2 was requested*/
   && PC0IW01.PC0IWFSW == "A") /* and ADD function*/
    PC0I300(); /* Display Add Map*/
  end

   /* ------------------------------------------------------------*/
   /* Display the p.o. product special instr - CHANGE screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "2" /* Map 2 was selected*/
   && PC0IW01.PC0IWFSW == "C") /* and CHANGE function*/

    if (converseVar.validationMsgNum == 0
     && PC0IW01.PC0IWBYF == "N")
      PC0IW01.PC0IWIXM = 1; /* Initialize index*/
    end

    while (PC0IW01.PC0IWIXM <= 12 /* Until end of page*/
     && PC0IW01.PC0IWMAP == "2") /* and map 2*/

      if (PC0IM001.PC0IMSEL[PC0IWIXM] == "S") /* If line selected*/
        PC0I400(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0IW01.PC0IWBYF == "N")         
        PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Incr index*/
      end

    end
    PC0IW01.PC0IWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* Display the p.o. product special instr - DELETE screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "2" /* Map 2 was selected*/
   && PC0IW01.PC0IWFSW == "D") /* and DELETE function*/

    if (converseVar.validationMsgNum == 0
     && PC0IW01.PC0IWBYF == "N")
      PC0IW01.PC0IWIXM = 1; /* Initialize index*/
    end

    while (PC0IW01.PC0IWIXM <= 12 /* Until end of page*/
     && PC0IW01.PC0IWMAP == "2") /* and map 2*/

      if (PC0IM001.PC0IMSEL[PC0IWIXM] == "S") /* If line selected*/
        PC0I500(); /* Display DELETE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0IW01.PC0IWBYF == "N")         
        PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Increment index*/
      end

    end
    PC0IW01.PC0IWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid map number terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "1"
   || PC0IW01.PC0IWMAP == "2")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0I002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PC0IW01.PC0IWMAP; /* Map name*/
    TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid function switch terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMAP == "2")
    if (PC0IW01.PC0IWFSW == "A"
     || PC0IW01.PC0IWFSW == "I"
     || PC0IW01.PC0IWFSW == "C"
     || PC0IW01.PC0IWFSW == "D")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "PC0I002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PC0IW01.PC0IWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP FUNCTION IS INVALID";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    end
  end

end // end PC0I002

// p.o. product spec instr list
Function PC0I100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PC0I110(); /* Obtain the data to display*/

  PC0I120(); /* Format and display the map*/

  PC0I130(); /* Check attention identifier*/

  PC0I140(); /* Reset fields to normal intensity*/

  PC0I150(); /* Verify the entered data*/

  PC0I160(); /* Process valid input request*/


end // end PC0I100

// Obtain the data to display
Function PC0I110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWSWR == "N") /* Data not requested*/

    return;

  end


  PC0IS01(); /* Purge any temporary storage*/

  set PCGREC empty; /* Clear p.o. itm spec instr record*/
  set PC0IW02 empty; /* Clear temporary storage record*/
  set PC0IM001 initial; /* Clear map pc0im001*/
  PC0IW01.PC0IWCIX = 1; /* reset cursor index*/
  PC0IW01.PC0IWPSW = "N"; /* reset problem switch*/

   /* ------------------------------------------------------------*/
   /* load data passed for display*/
   /* ------------------------------------------------------------*/

  PC0IM001.XGPCD = PC0IW03.XGPCD;
  PC0IM001.PC3PONBR = PC0IW03.PC3PONBR;
  PC0IM001.PC0IMPOI = PC0IW03.PC0IWFPI;
   /* == EDIT OUT 10/16/91 MOVE PC0IW03.PC0IMSCL TO PC0IM001.PC0IMSCL;*/
  PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
  PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
  PC0IM001.PC0IMSCL = PC0IW03.PC0IMSTC;
  PC0IM001.XDMCD = PC0IW03.XDMCD;
  PC0IM001.XQACD = PC0IW03.XQACD;
  PC0IM001.PC2INSEG = PC0IW03.PC2INSEG;
  PC0IM001.XPGCD = PC0IW03.XPGCD;
  PC0IM001.XUMCD = PC0IW03.XUMCD;
  if (PC0IW03.PC0IWFET > 0)
    PC0IM001.PC0IMFET = PC0IW03.PC0IWFET;
  end
  if (PC0IW03.PC0IWFRT > 0)
    PC0IM001.PC0IMFRT = PC0IW03.PC0IWFRT;
  end

  if (PC0IW03.XGPCD != "03") /* do not show oets if not apparel*/
    set PC0IM001.PC0IMLOE skip, invisible;
    set PC0IM001.PC0IMFOE skip, invisible;
  else
    set PC0IM001.PC0IMLOE skip;
    set PC0IM001.PC0IMFOE normal;
    if (PC0IW03.PC0IWFOE > 0)
      PC0IM001.PC0IMFOE = PC0IW03.PC0IWFOE;
    end
  end

  PC0IM001.XWHCD = PC0IW03.XWHCD;
  PC0IM001.YMTCD = PC0IW03.YMTCD;
  PC0IM001.PC2CUXID = PC0IW03.PC2CUXID;

   /* Select requested p.o. product special instruction rows*/

  PCGREC.XGPCD = PC0IW03.XGPCD;
  PCGREC.PC3PONBR = PC0IW03.PC3PONBR;
  PCGREC.PC6ITMNB = PC0IW03.PC6ITMNB;
  PCGREC.SY1STNBR = PC0IW03.SY1STNBR;
  PCGREC.SY2CLRID = PC0IW03.SY2CLRID;
  PCGREC.XDMCD = PC0IW03.XDMCD;
  PCGREC.XOWCD = PC0IW03.XOWCD;
  PCGREC.XQACD = PC0IW03.XQACD;
  PCGREC.PC2INSEG = PC0IW03.PC2INSEG;
  PCGREC.XPGCD = PC0IW03.XPGCD;
  PCGREC.XUMCD = PC0IW03.XUMCD;
  PCGREC.PC6ETSDT = PC0IW03.PC0IWETS;
  PCGREC.PC6RTADT = PC0IW03.PC0IWRTA;
  PCGREC.PC6OETS = PC0IW03.PC0IWOET;
  PCGREC.YMTCD = PC0IW03.YMTCD;
  PCGREC.XWHCD = PC0IW03.XWHCD;
  PCGREC.PC2CUXID = PC0IW03.PC2CUXID;

  PC0IS02(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    PC0IW01.PC0IWIXM = 1; /* Initialize display line number*/
    PC0IW01.PC0IWPOI = "N"; /* Initialize end of file switch*/

    PC0IS03(); /* Fetch pcgrec row*/

    while (PC0IW01.PC0IWPOI == "N") /* Until end of set or problem found*/

       /* load temporary storage record pc0iw02*/

      PC0IW02.XGPCD[PC0IWIXM] = PCGREC.XGPCD;
      PC0IW02.PCASINBR[PC0IWIXM] = PCGREC.PCASINBR;
      PC0IW02.YSICD[PC0IWIXM] = PCGREC.YSICD;
      PC0IW02.PCASIDSC[PC0IWIXM] = PCGREC.PCASIDSC;
      PC0IW02.PCEPRSEQ[PC0IWIXM] = PCGREC.PCEPRSEQ;

       /* load source description*/

      if (PCGREC.PCESIID == "N")
        PC0IW02.PC0IMSRC[PC0IWIXM] = "NIKE";
      else
        if (PCGREC.PCESIID == "C")
          PC0IW02.PC0IMSRC[PC0IWIXM] = "CUST";
        else
          if (PCGREC.PCESIID == "P")
            PC0IW02.PC0IMSRC[PC0IWIXM] = "P.O.";
          else
            PC0IW02.PC0IMSRC[PC0IWIXM] = " ";
          end
        end
      end

      PC0IW02.ZZZCHGCT[PC0IWIXM] = PCGREC.ZZZCHGCT;

      if (PC0IW01.PC0IWIXM >= 12)
        PC0IS04(); /* Add page to temp storage*/
      else
        PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Incr. index*/
      end

      PC0IS03(); /* Fetch pcgrec row*/

    end

    PC0IW01.PC0IWTSP = 1; /* Initialize page number*/

    PC0IS05(); /* Close set of pcgrec rows*/

  end

  if (PC0IW01.PC0IWPSW == "N" /* no errors*/
   && PC0IW01.PC0IWIXM > 1)   /* additional data for temp storage*/

    PC0IS04(); /* add page to temp storage*/

  end

  if (PC0IW01.TA5TSQIX == 0) /* No data to display*/
    PC0IW01.PC0IWPSW = "Y"; /* indicate error exists*/
    if (PC0IW01.PC0IWUPD == "Y") /* if in update mode*/
      converseLib.validationFailed(312); /* no instructions - need to add*/
    else
      converseLib.validationFailed(18); /* Indicate no data to display*/
    end
    PC0IM001.XXXPRCNM = "PC0I110"; /* process name*/
  else
    PC0IW01.PC0IWSWR = "N"; /* Request for data completed*/
  end

end // end PC0I110

// Format and display the LIST ma
Function PC0I120()

   /* ------------------------------------------------------------*/
   /* If no error(s) to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If data has no message to display load list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no message to display*/
   && PC0IW01.PC0IWBYF == "N")         

    PC0I121(); /* Format the selected data*/

  end

   /* ------------------------------------------------------------*/
   /* The problem switch is set if: -invalid request*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWPSW == "Y") /* Error message to display*/
    set PC0IM001.PC0IMPGL initialAttributes; /* Turn off "PAGE" literal*/
    set PC0IM001.PC0IMOFL initialAttributes; /* Turn off "OF" literal*/
    set PC0IM001.PC0IWTSP initialAttributes; /* turn off current page number*/
    set PC0IM001.TA5TSQIX initialAttributes; /* Turn off highest page number*/

  end

   /* ------------------------------------------------------------*/
   /* Display PF key options*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWUPD == "Y")
    if (COMMAREA.CAFROMAP == "PC0E"
     || COMMAREA.CAFROMAP == "PC0K")
      PC0IM001.PC0IMPOT = "3:PO ITM";
    else
      PC0IM001.PC0IMPOT = "3:PO ADR";
    end

    PC0IW01.PC0IWAUP = "Y"; /* allow updates security check*/
    set PC0IM001.PC0IMADD skip;
    set PC0IM001.PC0IMCHG skip;
    set PC0IM001.PC0IMDEL skip;
  else
    PC0IM001.PC0IMPOT = "3:PO INQ";
    set PC0IM001.PC0IMNKE skip, invisible;
    set PC0IM001.PC0IMCST skip, invisible;
    set PC0IM001.PC0IMPOA skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* if data successful updated display message*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWMFL == "Y") /* update flag on*/
    converseLib.validationFailed(1);
    PC0IM001.XXXPRCNM = "PC0I120"; /* process name*/
    PC0IW01.PC0IWMFL = "N"; /* reset message flag*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors sound the alarm*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
    /* NEXT SENTENCE*/
    else
      set PC0IM001 alarm; /* Indicate sound alarm*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Display p.o. product list screen*/
   /* ------------------------------------------------------------*/

  PC0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0IM001 ;

  PC0IW01.PC0IWPSW = "N"; /* Reset problem switch*/
  PC0IW01.PC0IWBYF = "N"; /* Reset bypass processing flag*/

end // end PC0I120

// Format the selected data
Function PC0I121()

   /* ------------------------------------------------------------*/
   /* Obtain temporary storage, load and display map fields.*/
   /* ------------------------------------------------------------*/

  set PC0IM001 initial;

  PC0IM001.XGPCD = PC0IW03.XGPCD;
  if (PC0IW03.XGPCD in XGPTBL.XGPCD)
    PC0IM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  end
  PC0IM001.PC3PONBR = PC0IW03.PC3PONBR;
  PC0IM001.PC0IMPOI = PC0IW03.PC0IWFPI;
  PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
  PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
  PC0IM001.PC0IMSCL = PC0IW03.PC0IMSTC;
  PC0IM001.XDMCD = PC0IW03.XDMCD;
  PC0IM001.XQACD = PC0IW03.XQACD;
  PC0IM001.PC2INSEG = PC0IW03.PC2INSEG;
  PC0IM001.XPGCD = PC0IW03.XPGCD;
  PC0IM001.XUMCD = PC0IW03.XUMCD;
  if (PC0IW03.PC0IWFET > 0)
    PC0IM001.PC0IMFET = PC0IW03.PC0IWFET;
  end
  if (PC0IW03.PC0IWFRT > 0)
    PC0IM001.PC0IMFRT = PC0IW03.PC0IWFRT;
  end

  if (PC0IW03.XGPCD != "03")
    set PC0IM001.PC0IMLOE skip, invisible;
    set PC0IM001.PC0IMFOE skip, invisible;
  else
    set PC0IM001.PC0IMLOE skip;
    set PC0IM001.PC0IMFOE normal;
    if (PC0IW03.PC0IWFOE > 0)
      PC0IM001.PC0IMFOE = PC0IW03.PC0IWFOE;
    end
  end

  PC0IM001.XWHCD = PC0IW03.XWHCD;
  PC0IM001.YMTCD = PC0IW03.YMTCD;
  PC0IM001.PC2CUXID = PC0IW03.PC2CUXID;

  PC0IS06(); /* Obtain temporary storage page*/

  set PC0IM001.PC0IMPGL skip; /* Display "PAGE" literal*/
  set PC0IM001.PC0IMOFL skip; /* Display "OF" literal*/

  PC0IM001.PC0IWTSP = PC0IW01.PC0IWTSP; /* Current page number*/
  set PC0IM001.PC0IWTSP skip; /* Display number*/
  PC0IM001.TA5TSQIX = PC0IW01.TA5TSQIX; /* Highest page number*/
  set PC0IM001.TA5TSQIX skip; /* Display number*/

  PC0IW01.PC0IWIXM = 1; /* Initialize line index*/
  while (PC0IW01.PC0IWIXM <= 12 /* Until end of lines or*/
   && PC0IW02.YSICD[PC0IWIXM] != " ") /* all special instr displayed*/

    set PC0IM001.PC0IMSEL[PC0IWIXM] normal; /* Display select flag*/
    PC0IM001.PC0IMSEL[PC0IWIXM] = PC0IW02.PC0IMSEL[PC0IWIXM];
    PC0IM001.YSICD[PC0IWIXM] = PC0IW02.YSICD[PC0IWIXM];
    PC0IM001.PCASIDSC[PC0IWIXM] = PC0IW02.PCASIDSC[PC0IWIXM];
    PC0IM001.PCEPRSEQ[PC0IWIXM] = PC0IW02.PCEPRSEQ[PC0IWIXM];
    PC0IM001.PC0IMSRC[PC0IWIXM] = PC0IW02.PC0IMSRC[PC0IWIXM];

    PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Increment line index*/

  end

  set PC0IM001.PC0IMSEL[PC0IWCIX] cursor; /* Last row viewed*/

end // end PC0I121

// Check attention identifier
Function PC0I130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0im001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0IW01.PC0IWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to calling application*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Set to p.o. menu*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0IW01.PC0IWSWR = "Y"; /* request data*/
    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF13 - Verify if user is authorized to add p.o. product*/
          /* special instruction data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0IW01.PC0IWAUP == "N"      /* and user add not authorized*/
   && PC0IW01.PC0IWUPD == "Y")     /* update allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0IW01.PC0IWUPD != "Y")     /* update not allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF14 - Verify if user is authorized to change p.o. product*/
          /* special instruction data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0IW01.PC0IWAUP == "N"      /* and user chg not authorized*/
   && PC0IW01.PC0IWUPD == "Y")     /* update allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0IW01.PC0IWUPD != "Y")     /* update not allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF15 - Verify if user is authorized to delete p.o. product*/
          /* special instruction data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && PC0IW01.PC0IWAUP == "N"      /* and user del not authorized*/
   && PC0IW01.PC0IWUPD == "Y")     /* update allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && PC0IW01.PC0IWUPD != "Y")     /* update not allowed*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* The record PC0IW03 contains data passed from application*/
   /* PC0E, this data is loaded in routine PC0I001.  The data*/
   /* must be saved for the return journey.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    if (PC0IW01.PC0IWUPD == "Y" /* update requested*/
     && PC0IW01.PC0IWAUP == "Y") /* update allowed*/
      if (PCWREC.CAFROMAP[1] == " "
       || PCWREC.CAFROMAP[1] == "PC0I")
        PCWREC.CAFROMAP[1] = "PC0I"; /* From application id*/
        PCWREC.PCWUSER1 = PC0IW03.PC0IW3GP;

      else
        if (PCWREC.CAFROMAP[2] == " "
         || PCWREC.CAFROMAP[2] == "PC0I")
          PCWREC.CAFROMAP[2] = "PC0I"; /* From application id*/
          PCWREC.PCWUSER2 = PC0IW03.PC0IW3GP;
        else
          if (PCWREC.CAFROMAP[3] == " "
           || PCWREC.CAFROMAP[3] == "PC0I")
            PCWREC.CAFROMAP[3] = "PC0I"; /* From application id*/
            PCWREC.PCWUSER3 = PC0IW03.PC0IW3GP;
          else
            if (PCWREC.CAFROMAP[4] == " "
             || PCWREC.CAFROMAP[4] == "PC0I")
              PCWREC.CAFROMAP[4] = "PC0I"; /* From application id*/
              PCWREC.PCWUSER4 = PC0IW03.PC0IW3GP;
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* PF16 - transfer to nike special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   && PC0IW01.PC0IWUPD == "Y"      /* update requested*/
   && PC0IW01.PC0IWAUP == "Y")     /* update allowed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0G"; /* SET TO NIKE SPECIAL INSTRUCTION*/

    XSPCS01(); /* Exit to nike special instruction*/

    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF17 - transfer to customer special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PF17 was pressed*/
   && PC0IW01.PC0IWUPD == "Y"      /* update requested*/
   && PC0IW01.PC0IWAUP == "Y")     /* update allowed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0F"; /* SET TO cust SPECIAL INSTRUCTION*/

    XSPCS01(); /* Exit to cust special instruction*/

    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* PF18 - transfer to po item address override application*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18 /* PF18 was pressed*/
   && PC0IW01.PC0IWUPD == "Y"      /* update requested*/
   && PC0IW01.PC0IWAUP == "Y")     /* update allowed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC05"; /* SET TO p.o. itm address override*/

    XSPCS01(); /* Exit to cust special instruction*/

    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF17 was not pressed*/

    PC0IM001.XXXPRCNM = "PC0I130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0IW01.PC0IWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0I130

// Reset highlighted fields
Function PC0I140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWIXM = 1; /* Initialize line index*/

  while (PC0IW01.PC0IWIXM <= 12 /* Until end of lines*/
   && PC0IM001.YSICD[PC0IWIXM] != " ")
                                   /* and special instr. type exists*/
    set PC0IM001.PC0IMSEL[PC0IWIXM] normal; /* Reset select flag*/
    PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM + 1; /* Increment line index*/
  end

end // end PC0I140

// Verify the entered data
Function PC0I150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0I151(); /* Verify scroll request*/

  else
    if (converseVar.eventKey not pf13)

      PC0I152(); /* Verify any changed data*/

    end
  end

end // end PC0I150

// Verify scroll request
Function PC0I151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWIXM = 12; /* Initialize line index*/

  while (PC0IW01.PC0IWIXM > 0) /* Until end of lines*/
    if (PC0IM001.PC0IMSEL[PC0IWIXM] > " "
     && PC0IM001.PC0IMSEL[PC0IWIXM] != "V")
      set PC0IM001.PC0IMSEL[PC0IWIXM] cursor, modified, bold; /* Highlight*/
      PC0IM001.XXXPRCNM = "PC0I151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0IW01.PC0IWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* no errors*/
    PC0IM001.XXXPRCNM = "PC0I151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PC0IW01.PC0IWTSP >= PC0IW01.TA5TSQIX /* and no more pages*/
   && converseVar.validationMsgNum == 0)   /* no errors*/
    PC0IM001.XXXPRCNM = "PC0I151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum == 0)
    PC0IW01.PC0IWCIX = 1; /* set cursor at first row*/
  end

end // end PC0I151

// Verify any changed data
Function PC0I152()

  if (converseVar.validationMsgNum != 0) /* error message*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if data has been selected off the list screen*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWSFL = "N"; /* Initialize selection flag*/
  PC0IW01.PC0IWIXM = 12; /* Initialize index*/

  while (PC0IW01.PC0IWIXM > 0) /* Until end of lines*/
    if (PC0IM001.PC0IMSEL[PC0IWIXM] != " ") /* If selection not blank*/
      if (PC0IM001.PC0IMSEL[PC0IWIXM] == "S")
        PC0IW01.PC0IWSFL = "Y"; /* Initialize selection flag*/
      else
        if (PC0IM001.PC0IMSEL[PC0IWIXM] != "V") /* invalid entry*/
          converseLib.validationFailed(13); /* Error message and highlight*/
          PC0IM001.XXXPRCNM = "PC0I152"; /* Process name*/
          PC0IW01.PC0IWSFL = "Y"; /* Initialize selection flag*/
          set PC0IM001.PC0IMSEL[PC0IWIXM] cursor, modified, bold;
        end
      end
    end

    PC0IW01.PC0IWIXM = PC0IW01.PC0IWIXM - 1; /* Decrement line index*/
  end

   /* ------------------------------------------------------------*/
   /* If PF14 or 15 was pressed and no data was selected*/
   /* display error message*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 change request*/
   || converseVar.eventKey is pf15) /* pf15 deletion request*/
    if (PC0IW01.PC0IWSFL == "N") /* and selection was not made*/
      PC0IM001.XXXPRCNM = "PC0I152"; /* Process name*/
      converseLib.validationFailed(25); /* enter 's' for selection*/
    end
  end
end // end PC0I152

// Process valid input request
Function PC0I160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error message set up*/
   || PC0IW01.PC0IWBYF == "Y")         
    return;
  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PC0IW01.PC0IWTSP = PC0IW01.PC0IWTSP - 1; /* Decrement page number*/
    return;
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PC0IW01.PC0IWTSP = PC0IW01.PC0IWTSP + 1; /* Increment page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Inquiry function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0IW01.PC0IWSFL == "Y")      /* and selection was made*/
    PC0IW01.PC0IWMAP = "2"; /* Select Map #2*/
    PC0IW01.PC0IWFSW = "I"; /* Select inquiry function*/
    converseLib.validationFailed(0); /* Clear error message field*/
  end

   /* ------------------------------------------------------------*/
   /* Add function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    PC0IW01.PC0IWMAP = "2"; /* Select Map #2*/
    PC0IW01.PC0IWFSW = "A"; /* Select add function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Change function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0IW01.PC0IWSFL == "Y")     /* and selection was made*/
    PC0IW01.PC0IWMAP = "2"; /* Select Map #2*/
    PC0IW01.PC0IWFSW = "C"; /* Select change function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Delete function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && PC0IW01.PC0IWSFL == "Y")     /* and selection was made*/
    PC0IW01.PC0IWMAP = "2"; /* Select Map #2*/
    PC0IW01.PC0IWFSW = "D"; /* Select delete function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

end // end PC0I160

// p.o. product spec instr - inq
Function PC0I200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0I210(); /* obtain data*/

  PC0I220(); /* Format and display the map*/

  PC0I230(); /* Check attention identifier*/

  PC0I240(); /* Reset fields to normal intensity*/

end // end PC0I200

// Obtain spec instr text
Function PC0I210()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0IW01.PC0IWBYF == "N")         

    set PC0IM002 initial; /* clear screen pc0im002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
    PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

    PC0IS07(); /* select set and open the cursor*/

    PC0IW01.PC0IWSIX = 1; /* init spec.instr. line index*/
    PC0IW01.PC0IWSTW = "N"; /* init spec. instr. text switch*/

    PC0IS08(); /* fetch pcbrec row*/

    while (PC0IW01.PC0IWSTW == "N" /* until end of special text or*/
     && PC0IW01.PC0IWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/

      PC0IM002.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;

      PC0IS08(); /* fetch pcbrec row*/

      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/

    end

    PC0IS09(); /* close pcbrec row*/

  end

end // end PC0I210

// Format and display the INQ map
Function PC0I220()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0IW01.PC0IWBYF == "N")         

     /* load p.o. product special instruction from temp storage*/

    PC0IM002.XGPCD = PC0IW03.XGPCD;
    if (PC0IW03.XGPCD in XGPTBL.XGPCD)
      PC0IM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0IM002.PC3PONBR = PC0IW03.PC3PONBR;
    PC0IM002.PC0IMPOI = PC0IW03.PC0IWFPI;
    PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
    PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
    PC0IM002.PC0IMSCL = PC0IW03.PC0IMSTC;
    PC0IM002.XDMCD = PC0IW03.XDMCD;
    PC0IM002.XQACD = PC0IW03.XQACD;
    PC0IM002.PC2INSEG = PC0IW03.PC2INSEG;
    PC0IM002.XPGCD = PC0IW03.XPGCD;
    PC0IM002.XUMCD = PC0IW03.XUMCD;
    if (PC0IW03.PC0IWFET > 0)
      PC0IM002.PC6ETSDT = PC0IW03.PC0IWFET;
    end
    PC0IM002.XWHCD = PC0IW03.XWHCD;
    PC0IM002.PC2CUXID = PC0IW03.PC2CUXID;
    PC0IM002.YSICD = PC0IW02.YSICD[PC0IWIXM];
    if (PC0IW02.YSICD[PC0IWIXM] in YSITBL.YSICD)
      PC0IM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0IM002.PCASIDSC = PC0IW02.PCASIDSC[PC0IWIXM];
    PC0IM002.PCEPRSEQ = PC0IW02.PCEPRSEQ[PC0IWIXM];
    PC0IM002.PC0IMSRC = PC0IW02.PC0IMSRC[PC0IWIXM];

    PC0IW01.PC0IWCIX = PC0IW01.PC0IWIXM; /* save to position cursor*/
    PC0IW02.PC0IMSEL[PC0IWIXM] = "V";

    PC0IS10(); /* update temp storage*/

  end

   /* protect all enterable fields*/

  set PC0IM002.YSICD protect; /* special instr. type code*/
  set PC0IM002.PCASIDSC protect; /* special instr. type desc*/
  set PC0IM002.PCEPRSEQ protect; /* print sequence*/
  set PC0IM002.PC6ETSDT protect; /* estimated time of shipment*/
  set PC0IM002.XWHCD protect; /* whse code*/
  set PC0IM002.PC2CUXID protect; /* customer xref code*/

  PC0IW01.PC0IWSIX = 1; /* init spec. text line index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] protect; /* spec text*/
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/
  end

  PC0IM002.PC0IMFNC = "INQUIRY"; /* Move inquiry literal to map*/
  PC0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
      set PC0IM002 alarm; /* sound the alarm*/
    end
  end

  converse PC0IM002 ;

  PC0IW01.PC0IWPSW = "N"; /* Initialize problem switch*/
  PC0IW01.PC0IWBYF = "N"; /* Initialize bypass processing*/

end // end PC0I220

// Check attention identifier
Function PC0I230()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0im002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to p.o. product list screen pc0im001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0IW01.PC0IWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0IM002.XXXPRCNM = "PC0I230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0I230

// Reset highlighted fields
Function PC0I240()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0IM002.YSICD initialAttributes; /* special instruction type*/
  set PC0IM002.PCASIDSC initialAttributes; /* special instruction description*/
  set PC0IM002.PC6ETSDT initialAttributes; /* estimated time of shipment*/
  set PC0IM002.XWHCD initialAttributes; /* whse code*/
  set PC0IM002.PC2CUXID initialAttributes; /* customer xref number*/

  PC0IW01.PC0IWSIX = 1; /* init spec text index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] initialAttributes;
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
  end

end // end PC0I240

// p.o. product spec. instr - add
Function PC0I300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0I310(); /* Format and display the map*/

  PC0I320(); /* Check attention identifier*/

  PC0I330(); /* Reset fields to normal intensity*/

  PC0I340(); /* verify the entered data*/

  PC0I350(); /* process valid input request*/

end // end PC0I300

// Format and display the ADD map
Function PC0I310()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0IW01.PC0IWBYF == "N")         

    set PC0IM002 initial; /* clear map pc0im002*/
    PC0IM002.XGPCD = PC0IW03.XGPCD;
    if (PC0IW03.XGPCD in XGPTBL.XGPCD)
      PC0IM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0IM002.PC3PONBR = PC0IW03.PC3PONBR;
    PC0IM002.PC0IMPOI = PC0IW03.PC0IWFPI;
    PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
    PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
    PC0IM002.PC0IMSCL = PC0IW03.PC0IMSTC;
    PC0IM002.XDMCD = PC0IW03.XDMCD;
    PC0IM002.XQACD = PC0IW03.XQACD;
    PC0IM002.PC2INSEG = PC0IW03.PC2INSEG;
    PC0IM002.XPGCD = PC0IW03.XPGCD;
    PC0IM002.XUMCD = PC0IW03.XUMCD;
    if (PC0IW03.PC0IWFET > 0)
      PC0IM002.PC6ETSDT = PC0IW03.PC0IWFET;
    end
    PC0IM002.XWHCD = PC0IW03.XWHCD;
    PC0IM002.PC2CUXID = PC0IW03.PC2CUXID;
    PC0IM002.PCEPRSEQ = 1;
    PC0IM002.PC0IMSRC = "P.O.";

    set PC0IM002.YSICD cursor, normal; /* Position cursor*/
    PC0IM002.PC0IMFNC = "ADD";

  end

  if (PC0IW01.PC0IWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0IM002.XXXPRCNM = "PC0I310"; /* process name*/
    PC0IW01.PC0IWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
      /* NEXT SENTENCE*/
    else
      set PC0IM002 alarm; /* sound the alarm*/
    end
  end

  set PC0IM002.PC0IMCST skip; /* display customer pf literal*/
  set PC0IM002.PC0IMNKE skip; /* display nike pf literal*/

  PC0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0IM002 ;

  PC0IW01.PC0IWPSW = "N"; /* Initialize problem switch*/
  PC0IW01.PC0IWBYF = "N"; /* Initialize bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0I311();
  end
end // end PC0I310

// Check for ? inquiry by user
Function PC0I311()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0IM002.YSICD == "?")

    /* *************************************************************/
     /* Check special instruction type for ?*/
    /* *************************************************************/


    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "  SPECIAL INSTRUCTION TYPE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYSI01(); /* perform special instr type window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the xref type  **/
     /* *  table code and description to the map.               **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      PC0IM002.YSICD = YSITBL.YSICD[XX0XWPIX]; /* move code*/
      PC0IM002.YSISDESC = YSITBL.YSIDESC[XX0XWPIX]; /* move name*/
    else
      PC0IM002.YSICD = PC0IW01.YSICD;
      if (PC0IW01.YSICD in YSITBL.YSICD)
        PC0IM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
      end
    end

    set PC0IM002.YSICD cursor; /* set cursor*/

    converseLib.clearScreen();

    PC0IW01.PC0IWBYF = "Y";

  end


end // end PC0I311

// Check attention identifier
Function PC0I320()

   /* ------------------------------------------------------------*/
   /* Check attention identifier.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0im002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to p.o. product list screen pc0im001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0IW01.PC0IWSWR = "Y"; /* request for data yes*/
    PC0IW01.PC0IWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end


   /* ------------------------------------------------------------*/
   /* The record PC0IW03 contains data passed from application*/
   /* PC0E, this data is loaded in routine PC0I001.  The data*/
   /* must be saved for the return journey.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    if (PCWREC.CAFROMAP[1] == " "
     || PCWREC.CAFROMAP[1] == "PC0I")
      PCWREC.CAFROMAP[1] = "PC0I"; /* From application id*/
      PCWREC.PCWUSER1 = PC0IW03.PC0IW3GP;

    else
      if (PCWREC.CAFROMAP[2] == " "
       || PCWREC.CAFROMAP[2] == "PC0I")
        PCWREC.CAFROMAP[2] = "PC0I"; /* From application id*/
        PCWREC.PCWUSER2 = PC0IW03.PC0IW3GP;
      else
        if (PCWREC.CAFROMAP[3] == " "
         || PCWREC.CAFROMAP[3] == "PC0I")
          PCWREC.CAFROMAP[3] = "PC0I"; /* From application id*/
          PCWREC.PCWUSER3 = PC0IW03.PC0IW3GP;
        else
          if (PCWREC.CAFROMAP[4] == " "
           || PCWREC.CAFROMAP[4] == "PC0I")
            PCWREC.CAFROMAP[4] = "PC0I"; /* From application id*/
            PCWREC.PCWUSER4 = PC0IW03.PC0IW3GP;
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* PF16 - transfer to nike special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   && PC0IW01.PC0IWUPD == "Y")     /* update allowed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0G"; /* SET TO NIKE SPECIAL INSTRUCTION*/

    XSPCS01(); /* Exit to nike special instruction*/

    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I320"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF17 - transfer to customer special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17 /* PF17 was pressed*/
   && PC0IW01.PC0IWUPD == "Y")     /* update allowed*/

    PC0IS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0F"; /* SET TO cust SPECIAL INSTRUCTION*/

    XSPCS01(); /* Exit to cust special instruction*/

    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IM001.XXXPRCNM = "PC0I320"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0IM002.XXXPRCNM = "PC0I320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0I320

// Reset highlighted fields
Function PC0I330()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0IM002.YSICD initialAttributes; /* special instr. type*/
  set PC0IM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0IM002.XWHCD initialAttributes; /* whse code*/
  set PC0IM002.PC6ETSDT initialAttributes; /* estimated time of shipment*/
  set PC0IM002.PC2CUXID initialAttributes; /* customer xref*/

  PC0IW01.PC0IWSIX = 1; /* init spec text index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] initialAttributes;
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
  end

end // end PC0I330

// Verify the entered data
Function PC0I340()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0IW01.PC0IWDEF = "N"; /* initialize data entered flag*/

  if (converseVar.eventKey is enter) /* if enter was pressed*/
    PC0I341(); /* validate input data*/
  end

end // end PC0I340

// validate input data
Function PC0I341()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWSIX = 13;
  PC0IW01.PC0IWTEF = "N";
  while (PC0IW01.PC0IWSIX >= 1
   && PC0IW01.PC0IWTEF == "N")
    if (PC0IM002.PCBSITXT[PC0IWSIX] != " ")
      PC0IW01.PC0IWTEF = "Y";
    end

    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1; /* incr. index*/

  end

  if (PC0IW01.PC0IWTEF == "N")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    PC0IW01.PC0IWSIX = 13;
    while (PC0IW01.PC0IWSIX >= 1)
      set PC0IM002.PCBSITXT[PC0IWSIX] cursor, modified, bold;

      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Validate print sequence*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PCEPRSEQ == 0)
    converseLib.validationFailed(157); /* print seq must be gt zero*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    set PC0IM002.PCEPRSEQ cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate p.o. product special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PCASIDSC == " ")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    set PC0IM002.PCASIDSC cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* customer xref code must equal passed data or equal ' '*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PC2CUXID != " "
   && PC0IM002.PC2CUXID != PC0IW03.PC2CUXID)
    converseLib.validationFailed(156); /* invalid customer xref code*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    set PC0IM002.PC2CUXID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* whse code must must equal passed data or equal ' '*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.XWHCD != " "
   && PC0IM002.XWHCD != PC0IW03.XWHCD)
    converseLib.validationFailed(155); /* invalid whse code*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    set PC0IM002.XWHCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* estimated time of shipment must equal passed data or*/
   /* equal zero.*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PC6ETSDT != "0"
   && PC0IM002.PC6ETSDT != PC0IW03.PC0IWFET
   && PC0IM002.PC6ETSDT != " ")
    converseLib.validationFailed(154); /* invalid estimated time of shipment*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    set PC0IM002.PC6ETSDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate special instruction type*/
   /* ------------------------------------------------------------*/

  PC0IW01.YSICD = " ";
  if (PC0IM002.YSICD != " ")
    if (PC0IM002.YSICD in YSITBL.YSICD
     && YSITBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active spec instr type*/
      PC0IM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
      PC0IW01.YSICD = PC0IM002.YSICD;
    else
      converseLib.validationFailed(67); /* missing/invalid spec instr type*/
      PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
      PC0IM002.YSISDESC = " "; /* clear map spec instr desc*/
      set PC0IM002.YSICD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(67); /* missing/invalid spec instr type*/
    PC0IM002.XXXPRCNM = "PC0I341"; /* load process name*/
    PC0IM002.YSISDESC = " "; /* clear map spec instr desc*/
    set PC0IM002.YSICD cursor, modified, bold;
  end

end // end PC0I341

// process valid input request
Function PC0I350()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWDEF == "N"           /* data not entered*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0IW01.PC0IWBYF == "Y")          /* errors*/
    return;
  end

  set VPOITM03 empty; /* init p.o. item rec*/
  set PCGREC empty; /* init p.o. product spec instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

   /* ------------------------------------------------------------*/
   /* obtain p.o. item row(s)*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC0IW03.XGPCD;
  VPOITM03.PO-REG-CD = PC0IW03.PO-REG-CD;
  VPOITM03.PC3PONBR = PC0IW03.PC3PONBR;
  VPOITM03.SY1STNBR = PC0IW03.SY1STNBR;
  VPOITM03.SY2CLRID = PC0IW03.SY2CLRID;
  VPOITM03.XDMCD = PC0IW03.XDMCD;
  VPOITM03.XQACD = PC0IW03.XQACD;
  VPOITM03.XOWCD = PC0IW03.XOWCD;
  VPOITM03.PC2INSEG = PC0IW03.PC2INSEG;
  VPOITM03.XPGCD = PC0IW03.XPGCD;
  VPOITM03.XUMCD = PC0IW03.XUMCD;

  if (PC0IM002.PC6ETSDT == 0)
    VPOITM03.PC6ETSDT = -1;
  else
    VPOITM03.PC6ETSDT = PC0IW03.PC0IWETS;
  end

  if (PC0IM002.XWHCD == " ")
    VPOITM03.XWHCD = "*";
  else
    VPOITM03.XWHCD = PC0IW03.XWHCD;
  end

  if (PC0IM002.PC2CUXID == " ")
    VPOITM03.PC2CUXID = "*";
  else
    VPOITM03.PC2CUXID = PC0IW03.PC2CUXID;
  end

  VPOITM03.PC6PLAN = -1;
  VPOITM03.PC6RTADT = -1;
  VPOITM03.PC6OETS = -1;
  VPOITM03.YMTCD = "*";
  VPOITM03.XDSCD = "*";
  VPOITM03.YSMXDV = "*";

  PC0IS11(); /* select set and open the cursor*/

  PC0IW01.PC0IWPOI = "N"; /* set po item eof switch*/
  PC0IW01.PC0IWPSW = "N"; /* reset problem switch*/

  PC0IS12(); /* fetch po item*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IW01.PC0IWPOI = "N"; /* set end of file switch*/
    converseLib.validationFailed(169); /* po item deleted by another appl*/
  else

    while (PC0IW01.PC0IWPOI == "N") /* until end of po item*/

      if (VPOITM03.PC6STAT == "OP"
       || VPOITM03.PC6STAT == "FC")
        VPOITM03.PC3SIFL = "Y";
        VPOITM03.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PC0IS13(); /* update po item row*/

        if (SQLCA.VAGen_SQLCODE == 100)
          PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
          PC0IW01.PC0IWPOI = "N"; /* set end of file switch*/
          converseLib.validationFailed(171); /* po item updated by another appl*/
        else
          PCDREC.XGPCD = PC0IW03.XGPCD;

          PC0IS14(); /* select next spec instr number*/

          PCGREC.XGPCD = PC0IW03.XGPCD;
          PCGREC.PCASINBR = PCDREC.PCDSINBR;
          PCGREC.PC3PONBR = PC0IW03.PC3PONBR;
          PCGREC.SY1STNBR = VPOITM03.SY1STNBR;
          PCGREC.PC6ITMNB = VPOITM03.PC6ITMNB;
          PCGREC.SY2CLRID = VPOITM03.SY2CLRID;
          PCGREC.XDMCD = VPOITM03.XDMCD;
          PCGREC.XQACD = VPOITM03.XQACD;
          PCGREC.XOWCD = VPOITM03.XOWCD;
          PCGREC.PC2INSEG = VPOITM03.PC2INSEG;
          PCGREC.XPGCD = VPOITM03.XPGCD;
          PCGREC.XUMCD = VPOITM03.XUMCD;
          PCGREC.XWHCD = VPOITM03.XWHCD;
          PCGREC.PC6ETSDT = VPOITM03.PC6ETSDT;
          PCGREC.PC6RTADT = VPOITM03.PC6RTADT;
          PCGREC.PC6OETS = VPOITM03.PC6OETS;
          PCGREC.PC2CUXID = VPOITM03.PC2CUXID;
          PCGREC.OP1CUOID = VPOITM03.OP1CUOID;
          PCGREC.OP1NORID = VPOITM03.OP1NORID;
          PCGREC.OP1PARTN = VPOITM03.OP1PARTN;
          PCGREC.YMTCD = VPOITM03.YMTCD;
          PCGREC.YSICD = PC0IM002.YSICD;
          PCGREC.PCASIDSC = PC0IM002.PCASIDSC;
          PCGREC.PCEPRSEQ = PC0IM002.PCEPRSEQ;
          PCGREC.PCESIID = "P";
          PCGREC.ZZZSDT = XX0XW01.XX0XWDAT;
          PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
          PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

          PC0IS15(); /* add p.o. product spec instr*/

          PC0IS22(); /* add item audit for spec instr*/

           /* determine the number of special msg text lines to be added*/

          PC0IW01.PC0IWSIX = 13;
          while (PC0IM002.PCBSITXT[PC0IWSIX] == " ")
            PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1;
          end

           /* load special instruction text*/

          PCBREC.XGPCD = PC0IW03.XGPCD;
          PCBREC.PCASINBR = PCDREC.PCDSINBR;
          PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
          PC0IW01.PC0IWLIX = PC0IW01.PC0IWSIX;
          PC0IW01.PC0IWSIX = 1;
          while (PC0IW01.PC0IWSIX <= PC0IW01.PC0IWLIX)

            PCBREC.PCBSISEQ = PC0IW01.PC0IWSIX;
            PCBREC.PCBSITXT = PC0IM002.PCBSITXT[PC0IWSIX];

            PC0IS16(); /* add special instruction text*/

            PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;

          end
        end
      end

      PC0IS12(); /* fetch next po item*/

    end

  end

  PC0IS17(); /* close po item cursor*/

  if (PC0IW01.PC0IWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0IW01.PC0IWMFL = "N"; /* reset message flag*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0IW01.PC0IWMFL = "Y"; /* message flag*/
  end

  PC0IM002.XXXPRCNM = "PC0I350"; /* process name*/
end // end PC0I350

// p.o. product spec instr - chg
Function PC0I400()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) verify the data that was entered.*/
   /* 6) process a valid request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0I410(); /* obtain data*/

  PC0I420(); /* Format and display the map*/

  PC0I430(); /* Check attention identifier*/

  PC0I440(); /* Reset fields to normal intensity*/

  PC0I450(); /* verify data entered data*/

  PC0I460(); /* process valid input request*/

end // end PC0I400

// Obtain spec instr text
Function PC0I410()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0IW01.PC0IWBYF == "N")         

    set PC0IM002 initial; /* clear screen pc0im002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/
    move " " to PC0IWTXT[1] for all; /* clear w/s table*/

    PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
    PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

    PC0IS07(); /* select set and open the cursor*/

    PC0IW01.PC0IWSIX = 1; /* init spec.instr. line index*/
    PC0IW01.PC0IWSTW = "N"; /* init spec. instr. text switch*/

    PC0IS08(); /* fetch pcbrec row*/

    while (PC0IW01.PC0IWSTW == "N" /* until end of special text or*/
     && PC0IW01.PC0IWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/

      PC0IM002.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;
      PC0IW01.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;

      PC0IS08(); /* fetch pcbrec row*/

      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/

    end

    PC0IS09(); /* close pcbrec row*/

  end

end // end PC0I410

// Format and display the CHG map
Function PC0I420()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0IW01.PC0IWBYF == "N")         

     /* load p.o. product special instruction from temp storage*/

    PC0IM002.XGPCD = PC0IW03.XGPCD;
    if (PC0IW03.XGPCD in XGPTBL.XGPCD)
      PC0IM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0IM002.PC3PONBR = PC0IW03.PC3PONBR;
    PC0IM002.PC0IMPOI = PC0IW03.PC0IWFPI;
    PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
    PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
    PC0IM002.PC0IMSCL = PC0IW03.PC0IMSTC;
    PC0IM002.XDMCD = PC0IW03.XDMCD;
    PC0IM002.XQACD = PC0IW03.XQACD;
    PC0IM002.PC2INSEG = PC0IW03.PC2INSEG;
    PC0IM002.XPGCD = PC0IW03.XPGCD;
    PC0IM002.XUMCD = PC0IW03.XUMCD;
    if (PC0IW03.PC0IWFET > 0)
      PC0IM002.PC6ETSDT = PC0IW03.PC0IWFET;
    end
    PC0IM002.XWHCD = PC0IW03.XWHCD;
    PC0IM002.PC2CUXID = PC0IW03.PC2CUXID;
    PC0IM002.YSICD = PC0IW02.YSICD[PC0IWIXM];
    if (PC0IW02.YSICD[PC0IWIXM] in YSITBL.YSICD)
      PC0IM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0IM002.PCASIDSC = PC0IW02.PCASIDSC[PC0IWIXM];
    PC0IM002.PCEPRSEQ = PC0IW02.PCEPRSEQ[PC0IWIXM];
    PC0IM002.PC0IMSRC = PC0IW02.PC0IMSRC[PC0IWIXM];

    set PC0IM002.PCASIDSC cursor; /* position cursor on change screen*/
    PC0IW01.PC0IWCIX = PC0IW01.PC0IWIXM; /* save to position cursor*/
    PC0IW02.PC0IMSEL[PC0IWIXM] = "V";

    PC0IS10(); /* update temp storage*/

  end

  PC0IM002.PC0IMFNC = "CHANGE"; /* Move inquiry literal to map*/
  PC0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* protect enterable fields*/

  set PC0IM002.YSICD protect;
  set PC0IM002.XWHCD protect;
  set PC0IM002.PC6ETSDT protect;
  set PC0IM002.PC2CUXID protect;

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
      set PC0IM002 alarm; /* sound the alarm*/
    end
  end

  converse PC0IM002 ;

  PC0IW01.PC0IWPSW = "N"; /* Initialize problem switch*/
  PC0IW01.PC0IWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0I420

// Check attention identifier
Function PC0I430()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0im002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to p.o. product list screen pc0im001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0IW01.PC0IWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0IM002.XXXPRCNM = "PC0I430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0I430

// Reset highlighted fields
Function PC0I440()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set PC0IM002.YSICD initialAttributes; /* special instruction type*/
  set PC0IM002.PCASIDSC initialAttributes; /* special instruction description*/
  set PC0IM002.PC6ETSDT initialAttributes; /* estimated time of shipment*/
  set PC0IM002.XWHCD initialAttributes; /* whse code*/
  set PC0IM002.PC2CUXID initialAttributes; /* customer xref number*/

  PC0IW01.PC0IWSIX = 1; /* init spec text index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] initialAttributes;
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
  end

end // end PC0I440

// Verify the entered data
Function PC0I450()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0IW01.PC0IWDEF = "N"; /* initialize data entered flag*/

  if (PC0IM002.PCASIDSC == PC0IW02.PCASIDSC
   && PC0IM002.PCEPRSEQ == PC0IW02.PCEPRSEQ)
    PC0IW01.PC0IWSIX = 1;
    PC0IW01.PC0IWTEF = "N";
    while (PC0IW01.PC0IWSIX <= 13)
      if (PC0IW01.PCBSITXT[PC0IWSIX] != PC0IM002.PCBSITXT[PC0IWSIX])
        PC0IW01.PC0IWTEF = "Y";
      end
      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
    end

    if (PC0IW01.PC0IWTEF == "N")
      return;
    end
  end

  PC0I451(); /* validate input data*/

end // end PC0I450

// validate input data
Function PC0I451()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0IW01.PC0IWSIX = 13;
  PC0IW01.PC0IWTEF = "N";
  while (PC0IW01.PC0IWSIX >= 1
   && PC0IW01.PC0IWTEF == "N")
    if (PC0IM002.PCBSITXT[PC0IWSIX] != " ")
      PC0IW01.PC0IWTEF = "Y";
    end

    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1; /* incr. index*/

  end

  if (PC0IW01.PC0IWTEF == "N")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0IM002.XXXPRCNM = "PC0I451"; /* load process name*/
    PC0IW01.PC0IWSIX = 13;
    while (PC0IW01.PC0IWSIX >= 1)
      set PC0IM002.PCBSITXT[PC0IWSIX] cursor, modified, bold;

      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Validate print sequence*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PCEPRSEQ == 0)
    converseLib.validationFailed(157); /* print seq must be gt zero*/
    PC0IM002.XXXPRCNM = "PC0I451"; /* load process name*/
    set PC0IM002.PCEPRSEQ cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate p.o. product special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0IM002.PCASIDSC == " ")
    converseLib.validationFailed(161); /* special instructions missing/invalid*/
    PC0IM002.XXXPRCNM = "PC0I451"; /* load process name*/
    set PC0IM002.PCASIDSC cursor, modified, bold;
  end

end // end PC0I451

// process valid input request
Function PC0I460()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWDEF == "N"           /* data not entered*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0IW01.PC0IWBYF == "Y")          /* errors*/
    return;
  end

  set PCGREC empty; /* init p.o. product spec instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

   /* ------------------------------------------------------------*/
   /* udpate p.o. product special instruction data*/
   /* ------------------------------------------------------------*/

  PCGREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
  PCGREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

  PC0IS18(); /* select p.o. product spec instr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* p.o. product spec instr has been del*/
    PC0IM001.XXXPRCNM = "PC0I460";
    PC0IW01.PC0IWMAP = 1; /* reset map*/
    PC0IW01.PC0IWSWR = "Y"; /* request data*/
    converseLib.validationFailed(26); /* data deleted by another application*/
    exit stack;
  else
    PCGREC.PCEPRSEQ = PC0IM002.PCEPRSEQ;
    PCGREC.PCASIDSC = PC0IM002.PCASIDSC;
    PCGREC.PCESIID = "P";
    PCGREC.ZZZCHGCT = PC0IW02.ZZZCHGCT[PC0IWIXM];
    PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0IS19(); /* upd p.o. product spec instr*/

    if (SQLCA.VAGen_SQLCODE == 100)

      PC0I461(); /* upd temp storage/screen w/upd data*/

    else

      PC0IS24(); /* add po item audit f/ spec instr*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If p.o. product special instruction text changed*/
   /* update table row*/
   /* ------------------------------------------------------------*/

  if (PC0IW01.PC0IWPSW == "N")
    PC0IW01.PC0IWSIX = 1;
    PC0IW01.PC0IWTEF = "N";
    while (PC0IW01.PC0IWSIX <= 13)
      if (PC0IW01.PCBSITXT[PC0IWSIX] != PC0IM002.PCBSITXT[PC0IWSIX])
        PC0IW01.PC0IWTEF = "Y";
      end
      PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
    end

    if (PC0IW01.PC0IWTEF == "Y") /* special message text changed*/

      PCBREC.XGPCD = PC0IM002.XGPCD;
      PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

      PC0IS20(); /* delete pcbrec set*/

       /* Determine how many message text lines to add*/
       /* (bypass blank lines)*/

      PC0IW01.PC0IWSIX = 13;
      while (PC0IM002.PCBSITXT[PC0IWSIX] == " ") /* determine load index*/
        PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX - 1;
      end

       /* Load special message text data*/

      PC0IW01.PC0IWLIX = PC0IW01.PC0IWSIX; /* max entries*/
      PC0IW01.PC0IWSIX = 1;
      PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
      PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];
      PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
      while (PC0IW01.PC0IWSIX <= PC0IW01.PC0IWLIX)
        PCBREC.PCBSISEQ = PC0IW01.PC0IWSIX;
        PCBREC.PCBSITXT = PC0IM002.PCBSITXT[PC0IWSIX];

        PC0IS16(); /* add special instruction text*/

        PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;

      end
    end
  end

  if (PC0IW01.PC0IWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0IW01.PC0IWMFL = "N"; /* reset message flag*/
  else

     /* update temp storage (p.o.product special instruction info)*/

    PC0IW02.PCASIDSC[PC0IWIXM] = PCGREC.PCASIDSC;
    PC0IW02.PCEPRSEQ[PC0IWIXM] = PCGREC.PCEPRSEQ;
    PC0IW02.ZZZCHGCT[PC0IWIXM] = PCGREC.ZZZCHGCT;

    PC0IS10(); /* update temp storage*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0IW01.PC0IWMFL = "Y"; /* message flag*/
  end

  PC0IM002.XXXPRCNM = "PC0I460"; /* process name*/
end // end PC0I460

// upd temp storage/map
Function PC0I461()

   /* ------------------------------------------------------------*/
   /* if p.o. itm special instruction data changed obtain both*/
   /* the p.o. itm special instruction hdr and text to update*/
   /* temporary storage and map fields.*/
   /* ------------------------------------------------------------*/

  PCGREC.XGPCD = PC0IM002.XGPCD;
  PCGREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

  PC0IS18(); /* select p.o. product spec instr.*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0IM001.XXXPRCNM = "PC0I461"; /* load process name*/
    PC0IW01.PC0IWMAP = 1; /* display list screen*/
    PC0IW01.PC0IWSWR = "Y"; /* request data load*/
    converseLib.validationFailed(26); /* data deleted by another appl.*/
    exit stack; /* exit*/
  end

  PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
  converseLib.validationFailed(12); /* data updated by another appl.*/

   /* update temp storage*/

  PC0IW02.PCASIDSC[PC0IWIXM] = PCGREC.PCASIDSC;
  PC0IW02.PCEPRSEQ[PC0IWIXM] = PCGREC.PCEPRSEQ;
  PC0IW02.ZZZCHGCT[PC0IWIXM] = PCGREC.ZZZCHGCT;

  PC0IS10(); /* update temp storage*/

   /* update pc0im002 map*/

  PC0IM002.PCASIDSC = PCGREC.PCASIDSC;
  PC0IM002.PCEPRSEQ = PCGREC.PCEPRSEQ;

   /* reload message text for display*/

  set PCBREC empty; /* init spec. text rec pcbrec*/
  move " " to PC0IWTXT[1] for all; /* clear w/s text table*/

  PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
  PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

  PC0IS07(); /* select set and open the cursor*/

  PC0IW01.PC0IWSIX = 1; /* init spec.instr. line index*/
  PC0IW01.PC0IWSTW = "N"; /* init spec. instr. text switch*/

  PC0IS08(); /* fetch pcbrec row*/

  while (PC0IW01.PC0IWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

     /* load special instruction text for display and compare use*/

    if (PC0IW01.PC0IWSTW == "N")
      PC0IM002.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;
      PC0IW01.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;
    else
      PC0IM002.PCBSITXT[PC0IWSIX] = " ";
    end

    PC0IS08(); /* fetch pcbrec row*/

    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/

  end

  PC0IS09(); /* close pcbrec row*/

end // end PC0I461

// p.o. product spec instr - del
Function PC0I500()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) verify data entered.*/
   /* 4) process valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0I510(); /* obtain data*/

  PC0I520(); /* Format and display the map*/

  PC0I530(); /* Check attention identifier*/

  PC0I540(); /* Reset fields to normal intensity*/

  PC0I550(); /* verify data entered*/

  PC0I560(); /* process valid input request*/

end // end PC0I500

// Obtain spec instr text
Function PC0I510()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0IW01.PC0IWBYF == "N")         

    set PC0IM002 initial; /* clear screen pc0im002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
    PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

    PC0IS07(); /* select set and open the cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0IW01.PC0IWSIX = 1; /* init spec.instr. line index*/
      PC0IW01.PC0IWSTW = "N"; /* init spec. instr. text switch*/

      PC0IS08(); /* fetch pcbrec row*/

      while (PC0IW01.PC0IWSTW == "N" /* until end of special text or*/
       && PC0IW01.PC0IWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

         /* load special instruction text for display*/

        PC0IM002.PCBSITXT[PC0IWSIX] = PCBREC.PCBSITXT;

        PC0IS08(); /* fetch pcbrec row*/

        PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/

      end

      PC0IS09(); /* close pcbrec row*/

    end
  end

end // end PC0I510

// Format and display the DEL map
Function PC0I520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0IW01.PC0IWBYF == "N")         

     /* load p.o. product special instruction from temp storage*/

    PC0IM002.XGPCD = PC0IW03.XGPCD;
    if (PC0IW03.XGPCD in XGPTBL.XGPCD)
      PC0IM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0IM002.PC3PONBR = PC0IW03.PC3PONBR;
    PC0IM002.PC0IMPOI = PC0IW03.PC0IWFPI;
    PC0IW03.PC0IMSTY = PC0IW03.SY1STNBR;
    PC0IW03.PC0IMCLR = PC0IW03.SY2CLRID;
    PC0IM002.PC0IMSCL = PC0IW03.PC0IMSTC;
    PC0IM002.XDMCD = PC0IW03.XDMCD;
    PC0IM002.XQACD = PC0IW03.XQACD;
    PC0IM002.PC2INSEG = PC0IW03.PC2INSEG;
    PC0IM002.XPGCD = PC0IW03.XPGCD;
    PC0IM002.XUMCD = PC0IW03.XUMCD;
    PC0IM002.PC6ETSDT = PC0IW03.PC0IWFET;
    PC0IM002.XWHCD = PC0IW03.XWHCD;
    PC0IM002.PC2CUXID = PC0IW03.PC2CUXID;
    PC0IM002.YSICD = PC0IW02.YSICD[PC0IWIXM];
    if (PC0IW02.YSICD[PC0IWIXM] in YSITBL.YSICD)
      PC0IM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0IM002.PCASIDSC = PC0IW02.PCASIDSC[PC0IWIXM];
    PC0IM002.PCEPRSEQ = PC0IW02.PCEPRSEQ[PC0IWIXM];
    PC0IM002.PC0IMSRC = PC0IW02.PC0IMSRC[PC0IWIXM];

    converseLib.validationFailed(27);

  end

   /* protect all enterable fields*/

  set PC0IM002.YSICD protect; /* special instr. type code*/
  set PC0IM002.PCASIDSC protect; /* special instr. type desc*/
  set PC0IM002.PCEPRSEQ protect; /* print sequence*/
  set PC0IM002.PC6ETSDT protect; /* estimated time of shipment*/
  set PC0IM002.XWHCD protect; /* whse code*/
  set PC0IM002.PC2CUXID protect; /* customer xref code*/

  PC0IW01.PC0IWSIX = 1; /* init spec. text line index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] protect; /* spec text*/
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1; /* incr. index*/
  end

  PC0IM002.PC0IMFNC = "DELETE "; /* Move inquiry literal to map*/
  PC0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum != 27) /* bypass alarm for delete msg*/
      if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
        /* NEXT SENTENCE*/
      else
        set PC0IM002 alarm; /* sound the alarm*/
      end
    end
  end

  converse PC0IM002 ;

  PC0IW01.PC0IWPSW = "N"; /* Initialize problem switch*/
  PC0IW01.PC0IWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0I520

// Check attention identifier
Function PC0I530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0im002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to p.o. product list screen pc0im001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0IW01.PC0IWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0IM002.XXXPRCNM = "PC0I530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0IW01.PC0IWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0I530

// Reset highlighted fields
Function PC0I540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set PC0IM002.YSICD initialAttributes; /* special instruction type*/
  set PC0IM002.PCASIDSC initialAttributes; /* special instruction description*/
  set PC0IM002.PC6ETSDT initialAttributes; /* estimated time of shipment*/
  set PC0IM002.XWHCD initialAttributes; /* whse code*/
  set PC0IM002.PC2CUXID initialAttributes; /* customer xref number*/

  PC0IW01.PC0IWSIX = 1; /* init spec text index*/
  while (PC0IW01.PC0IWSIX <= 13)
    set PC0IM002.PCBSITXT[PC0IWSIX] initialAttributes;
    PC0IW01.PC0IWSIX = PC0IW01.PC0IWSIX + 1;
  end

end // end PC0I540

// verify the entered data
Function PC0I550()

   /* ------------------------------------------------------------*/
   /* Verify deletion request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    PCGREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
    PCGREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

    PC0IS18(); /* select the po item special instr*/

    if (SQLCA.VAGen_SQLCODE == 100)
      PC0IM002.XXXPRCNM = "PC0I550"; /* load process name*/
      PC0IW01.PC0IWMAP = 1; /* display list screen*/
      converseLib.validationFailed(26);
    end
  end

end // end PC0I550

// process valid input request
Function PC0I560()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0 /* errors exist*/
   || PC0IW01.PC0IWBYF == "Y")         
    return;
  end

  PC0IS21(); /* delete  p.o. product instr hdr*/

   /* delete special instruction text*/

  PCBREC.XGPCD = PC0IW02.XGPCD[PC0IWIXM];
  PCBREC.PCASINBR = PC0IW02.PCASINBR[PC0IWIXM];

  PC0IS20(); /* delete special instruction text*/

   /* ------------------------------------------------------------*/
   /* if no errors and all p.o. product spec instr. deleted*/
   /* update the p.o. item table*/
   /* ------------------------------------------------------------*/

  PCGREC.XGPCD = PC0IW03.XGPCD;
  PCGREC.PC3PONBR = PC0IW03.PC3PONBR;

  PC0IS02(); /* select set for pcgrec*/

  PC0IS03(); /* fetch pcgrec record*/

  if (SQLCA.VAGen_SQLCODE == 100) /* all special instructions have been deleted*/

    XX0XS01(); /* obtain date and time*/

    set VPOITM03 empty; /* init p.o. item rec*/

    /* ------------------------------------------------------------*/
     /* obtain p.o. item row(s)*/
    /* ------------------------------------------------------------*/

    VPOITM03.XGPCD = PC0IW03.XGPCD;
    VPOITM03.PO-REG-CD = PC0IW03.PO-REG-CD;
    VPOITM03.PC3PONBR = PC0IW03.PC3PONBR;
    VPOITM03.SY1STNBR = PC0IW03.SY1STNBR;
    VPOITM03.SY2CLRID = PC0IW03.SY2CLRID;
    VPOITM03.XDMCD = PC0IW03.XDMCD;
    VPOITM03.XQACD = PC0IW03.XQACD;
    VPOITM03.XOWCD = PC0IW03.XOWCD;
    VPOITM03.PC2INSEG = PC0IW03.PC2INSEG;
    VPOITM03.XPGCD = PC0IW03.XPGCD;
    VPOITM03.XUMCD = PC0IW03.XUMCD;
    VPOITM03.XWHCD = PC0IW03.XWHCD;
    VPOITM03.PC6ETSDT = PC0IW03.PC0IWETS;
    VPOITM03.PC6RTADT = PC0IW03.PC0IWRTA;
    VPOITM03.PC6OETS = PC0IW03.PC0IWOET;
    VPOITM03.PC2CUXID = PC0IW03.PC2CUXID;
    VPOITM03.YMTCD = PC0IW03.YMTCD;

    VPOITM03.PC6PLAN = -1;
    VPOITM03.XDSCD = "*";
    VPOITM03.YSMXDV = "*";

    PC0IS11(); /* select set and open the cursor*/

    PC0IW01.PC0IWPOI = "N"; /* set po item eof switch*/
    PC0IW01.PC0IWPSW = "N"; /* reset problem switch*/

    PC0IS12(); /* fetch po item*/

    while (PC0IW01.PC0IWPOI == "N") /* until end of po item*/

      VPOITM03.PC3SIFL = "N";
      VPOITM03.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PC0IS13(); /* update po item row*/

      if (SQLCA.VAGen_SQLCODE == 100)
        PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
        PC0IW01.PC0IWPOI = "N"; /* set eof switch*/
        converseLib.validationFailed(171);
      end

      PC0IS12(); /* fetch next po item*/

    end

    PC0IS17(); /* close po item cursor*/
  end

  PC0IS05(); /* close pcgrec*/

  if (PC0IW01.PC0IWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0IW01.PC0IWMFL = "N"; /* reset message flag*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0IW01.PC0IWSWR = "Y"; /* set data request flag*/
    PC0IW01.PC0IWMFL = "Y"; /* message flag*/
  end

  PC0IM002.XXXPRCNM = "PC0I560"; /* process name*/
end // end PC0I560

// Purge temp storage
Function PC0IS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PC0I"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0IS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PC0IW01.PC0IWTSP = 0; /* Reset current page number*/
  PC0IW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PC0IS01

// Select Set pcgrec (S1)
Function PC0IS02()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("S2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM001.XXXPRCNM = "PC0IS02"; /* Process name*/

  exit stack;

end // end PC0IS02

// Fetch pcgrec row
Function PC0IS03()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("N2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0IW01.PC0IWPOI = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS03"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM001.XXXPRCNM = "PC0IS03"; /* Process name*/

  exit stack;

end // end PC0IS03

// Add page to temp storage
Function PC0IS04()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0IW02.PC0IWLEN = 564; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0I"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PC0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* everything is a-ok*/
    PC0IW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PC0IW01.PC0IWIXM = 1; /* Reset display line number*/
    set PC0IW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS04"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IM001.XXXPRCNM = "PC0IS04"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0IW01.PC0IWSWR = "Y"; /* request data*/

  end

end // end PC0IS04

// Close selected pcgrec set
Function PC0IS05()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("C2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS05"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IM001.XXXPRCNM = "PC0IS05"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0IW01.PC0IWSWR = "Y"; /* request data*/

    exit stack;

  end

end // end PC0IS05

// Obtain lines from temp storage
Function PC0IS06()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0IW02.PC0IWLEN = 564; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0I"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0IW01.PC0IWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PC0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS06"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0IM001"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IW01.PC0IWSWR = "Y"; /* request data*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0IM001.XXXPRCNM = "PC0IS06"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0IS06

// Select Set pcbrec (S1)
Function PC0IS07()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS07"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IW01.PC0IWMAP = "1"; /* display list map*/
  PC0IM001.XXXPRCNM = "PC0IS07"; /* Process name*/

  exit stack;

end // end PC0IS07

// Fetch pcbrec row
Function PC0IS08()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0IW01.PC0IWSTW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS08"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM001.XXXPRCNM = "PC0IS08"; /* Process name*/

  exit stack;

end // end PC0IS08

// Close selected pcbrec set
Function PC0IS09()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS09"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IM001.XXXPRCNM = "PC0IS09"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0IW01.PC0IWSWR = "Y"; /* request data*/

    exit stack;

  end

end // end PC0IS09

// update temporary storage
Function PC0IS10()

   /* ------------------------------------------------------------*/
   /* Update the temp storage page.*/
   /* ------------------------------------------------------------*/

  PC0IW02.PC0IWLEN = 564; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0I"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0IW01.PC0IWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PC0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS10"; /* Process name*/
    TA1REC.TA1LOC = "UPD PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0IM002"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IW01.PC0IWSWR = "Y"; /* request data*/
    PC0IW01.PC0IWMAP = 1; /* redisplay list screen*/
    PC0IM001.XXXPRCNM = "PC0IS10"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0IS10

// Select Set pc6rec (S7)
Function PC0IS11()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S7*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0IS11"; /* Process name*/

  exit stack;

end // end PC0IS11

// Fetch pc6rec row
Function PC0IS12()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0IW01.PC0IWPOI = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS12"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0IS12"; /* Process name*/

  exit stack;

end // end PC0IS12

// upd po item row
Function PC0IS13()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "U ";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS13"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0CS13"; /* Process name*/

  exit stack;

end // end PC0IS13

// Select next spec inst nbr
Function PC0IS14()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS14"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT INSTR. NBR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.PCDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
  PC0IM002.XXXPRCNM = "PC0IS14"; /* Process name*/

  exit stack;

end // end PC0IS14

// Add p.o. item spec instr row
Function PC0IS15()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("A ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback update*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS15"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0IS15"; /* Process name*/

  exit stack;

end // end PC0IS15

// Add spec instr text row
Function PC0IS16()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS16"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0CS16"; /* Process name*/

  exit stack;

end // end PC0IS16

// Close selected pc6rec set
Function PC0IS17()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Close table set C7*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0IS17"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0IM002.XXXPRCNM = "PC0IS17"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    exit stack;

  end

end // end PC0IS17

// Select p.o. instr row
Function PC0IS18()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("S ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0IW01.PC0IWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS18"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. SPEC INSTR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0IS18"; /* Process name*/

  exit stack;

end // end PC0IS18

// upd p.o. special instr row
Function PC0IS19()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("U ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS19"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0IS19"; /* Process name*/

  exit stack;

end // end PC0IS19

// del spec instr text rows
Function PC0IS20()

   /* ------------------------------------------------------------*/
   /* This module deletes table rows*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("D ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* del table rows*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS20"; /* Process name*/
  TA1REC.TA1LOC = "DEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0CS20"; /* Process name*/

  exit stack;

end // end PC0IS20

// del p.o. product spec instr
Function PC0IS21()

   /* ------------------------------------------------------------*/
   /* This module deletes table rows*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("D ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* del table rows*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS21"; /* Process name*/
  TA1REC.TA1LOC = "DEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM002.XXXPRCNM = "PC0CS21"; /* Process name*/

  exit stack;

end // end PC0IS21

// Insert item audit row VPOAIT01
Function PC0IS22()

   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* Init audit record*/
  VPOAIT02.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM03.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM03.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM03.XOWCD; /* Owner group*/
  VPOAIT02.XPRCD = VPOITM03.XPRCD; /* product type*/
  VPOAIT02.PC2INSEG = VPOITM03.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM03.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM03.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM03.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM03.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM03.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM03.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM03.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM03.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM03.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = VPOITM03.PC6XCTCD; /* dest country*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM03.PC4ORTYP; /* PO type*/
  VPOAIT02.PA1OANBR = 0; /* PA_ORD_ADJ_NBR*/
  VPOAIT02.YACCD = " "; /* Audit comment code*/
  VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  VPOAIT02.PCIBFRA = "SPECIAL INSTR"; /* Before image*/
  VPOAIT02.PCIAFTA = " "; /* After image*/

  VPOAIT02.OP1CUOID = VPOITM03.OP1CUOID; /* Cust ord-id*/
  VPOAIT02.OP1NORID = VPOITM03.OP1NORID; /* Nike ord-id*/
  VPOAIT02.OP1PARTN = VPOITM03.OP1PARTN; /* Order part*/

   /* SAVE SEQUENCE NUMBER IN AFTER NUMBER*/

  VPOAIT02.PCIAFTN = PCGREC.PCASINBR; /* after number*/

  if (VPOITM03.XGPCD == "02")
    VPOAIT02.YOACD = "32"; /* Audit code*/
  else
    VPOAIT02.YOACD = "78"; /* Audit code*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header*/
   /* ------------------------------------------------------------*/
  PC0IS23(); /* Obtain P.O. header*/
  if (VPOHDR02.PC3NISFL == "Y"
   || VPOHDR02.PC3NISFL == "N")
    VPOAIT02.PCJAMEND = "5";
  else
    VPOAIT02.PCJAMEND = "3";
  end

  PC0ISA8(); /* get and load change memo and order*/
                                   /* adj memo flags*/

  VPOAIT02.XDSCD = VPOITM03.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM03.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM03.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM03.PG1SC4CD; /* Scheduler code*/

   /* Because the program uses the timestamp as part of the*/
   /* key it is possible to get dups.  When the user adds*/
   /* several special instructions they are processed one after*/
   /* another.  To prevent dups this loop was added ensure that*/
   /* the time has changed.*/

  XX0XS01(); /* Get date and time*/
  while (PC0IW01.PC0IW-PREV-HHMMSS == XX0XW01.XX0XWHMS)
    XX0XS01(); /* Get date and time*/
  end
  PC0IW01.PC0IW-PREV-HHMMSS = XX0XW01.XX0XWHMS;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0IS22"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0IM001.XXXPRCNM = "PC0IS22"; /* Module identification*/
  exit stack;

end // end PC0IS22

// Get PO header  DPRODC.VPOHDR01
Function PC0IS23()
   /* ------------------------------------------------------------*/
   /* Select unique PO number xref row from table.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init P.O. header record*/
  VPOHDR02.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0IM001.XXXPRCNM = "PC0IS23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0IS23"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0IS23

// add audits for si for po rows
Function PC0IS24()
  set VPOITM03 empty; /* init p.o. item rec*/
   /* ------------------------------------------------------------*/
   /* obtain p.o. item row(s)*/
   /* - add an audit for each po item that has had this*/
   /* - special instruction updated*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC0IW03.XGPCD;
  VPOITM03.PO-REG-CD = PC0IW03.PO-REG-CD; /* PO REGION CODE*/
  VPOITM03.PC3PONBR = PC0IW03.PC3PONBR;
  VPOITM03.SY1STNBR = PC0IW03.SY1STNBR;
  VPOITM03.SY2CLRID = PC0IW03.SY2CLRID;
  VPOITM03.XDMCD = PC0IW03.XDMCD;
  VPOITM03.XQACD = PC0IW03.XQACD;
  VPOITM03.XOWCD = PC0IW03.XOWCD;
  VPOITM03.PC2INSEG = PC0IW03.PC2INSEG;
  VPOITM03.XPGCD = PC0IW03.XPGCD;
  VPOITM03.XUMCD = PC0IW03.XUMCD;

  if (PC0IM002.PC6ETSDT == 0)
    VPOITM03.PC6ETSDT = -1;
  else
    VPOITM03.PC6ETSDT = PC0IW03.PC0IWETS;
  end

  if (PC0IM002.XWHCD == " ")
    VPOITM03.XWHCD = "*";
  else
    VPOITM03.XWHCD = PC0IW03.XWHCD;
  end

  if (PC0IM002.PC2CUXID == " ")
    VPOITM03.PC2CUXID = "*";
  else
    VPOITM03.PC2CUXID = PC0IW03.PC2CUXID;
  end

  VPOITM03.PC6PLAN = -1;
  VPOITM03.PC6RTADT = -1;
  VPOITM03.PC6OETS = -1;
  VPOITM03.YMTCD = "*";
  VPOITM03.XDSCD = "*";
  VPOITM03.YSMXDV = "*";

  PC0IS11(); /* select set and open the cursor*/

  PC0IW01.PC0IWPOI = "N"; /* set po item eof switch*/
  PC0IW01.PC0IWPSW = "N"; /* reset problem switch*/

  PC0IS12(); /* fetch po item*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0IW01.PC0IWPSW = "Y"; /* set problem switch*/
    PC0IW01.PC0IWPOI = "N"; /* set end of file switch*/
    converseLib.validationFailed(169); /* po item deleted by another appl*/
  else

    while (PC0IW01.PC0IWPOI == "N") /* until end of po item*/

      if (VPOITM03.PC6STAT == "OP"
       || VPOITM03.PC6STAT == "FC")

        PC0IS22(); /* add item audit for spec instr*/

      end

      PC0IS12(); /* fetch next po item*/

    end

  end

  PC0IS17(); /* close po item cursor*/

end // end PC0IS24

// load chg memo and oa memo flag
Function PC0ISA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0IM001.XXXPRCNM = "PC0ISA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0iSA8 ***********************/
end // end PC0ISA8

//*** RECORD=PC0IW01 ****
// Working storage for pc0f - p.o. customer special instruction
// ***********************
Record PC0IW01 type basicRecord
  5 PC0IW1GP PC0IW1GP ; 
    10 PC0IWIXM PC0IWIXM ; 
    10 PC0IWLIX PC0IWLIX ; 
    10 PC0IWCIX PC0IWCIX ; 
    10 PC0IWSIX PC0IWSIX ; 
    10 PC0IWSTW PC0IWSTW ; 
    10 PC0IWPOI PC0IWPOI ; 
    10 PC0IWSFL PC0IWSFL ; 
    10 PC0IWTEF PC0IWTEF ; 
    10 PC0IWPSW PC0IWPSW ; 
    10 PC0IWLDF PC0IWLDF ; 
    10 PC0IWSWR PC0IWSWR ; 
    10 PC0IWTSP PC0IWTSP ; 
    10 PC0IWMAP PC0IWMAP ; 
    10 PC0IWFSW PC0IWFSW ; 
    10 PC0IWTXT PC0IWTXT [13] ; 
      15 PCBSITXT PCBSITXT ; 
    10 PC0IMSCL PC0IMSCL ; 
    10 PC0IWMFL PC0IWMFL ; 
    10 PC0IWDEF PC0IWDEF ; 
    10 PC0IWUPD PC0IWUPD ; 
    10 PC0IWAUP PC0IWAUP ; 
    10 PC0IWINQ PC0IWINQ ; 
    10 PC0IWBYF PC0IWBYF ; 
    10 YSICD YSICD ; 
    10 PC0IW-PREV-HHMMSS PC0IW-PREV-HHMMSS ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end PC0IW01

//*** RECORD=PC0IW02 ****
// Temp. storage record for pc0f - p.o. customer spec inst list
// ***********************
Record PC0IW02 type basicRecord
  10 PC0IWLEN PC0IWLEN ; 
  10 PC0IWLIN PC0IWLIN [12] ; 
    15 PC0IMSEL PC0IMSEL ; 
    15 XGPCD XGPCD ; 
    15 PCASINBR PCASINBR ; 
    15 YSICD YSICD ; 
    15 PCASIDSC PCASIDSC ; 
    15 PCEPRSEQ PCEPRSEQ ; 
    15 PC0IMSRC PC0IMSRC ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PC0IW02

//*** RECORD=PC0IW03 ****
// Temp. storage record for pc0I - p.o. customer spec inst list
// ***********************
Record PC0IW03 type basicRecord
  5 PC0IW3GP PC0IW3GP ; 
    10 CAFROMAP CAFROMAP ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC0IWPID PC0IWPID ; 
      15 PC0IWPOC PC0IWPOC ; 
      15 PC0IWPOY PC0IWPOY ; 
      15 PC0IWPOM PC0IWPOM ; 
      15 PC0IWPDM PC0IWPDM ; 
    10 PC0IWFPI PC0IWFPI ; 
      15 PC0IWFPY PC0IWFPY ; 
      15 PC0IWDS1 PC0IWDS1 ; 
      15 PC0IWFPM PC0IWFPM ; 
      15 PC0IWDS2 PC0IWDS2 ; 
      15 PC0IWFPD PC0IWFPD ; 
      15 PC0IWDS3 PC0IWDS3 ; 
      15 PC0IWFFC PC0IWFFC ; 
    10 PC0IMSCL PC0IMSCL ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC0IWETS PC0IWETS ; 
      15 PC0IWETC PC0IWETC ; 
      15 PC0IWETY PC0IWETY ; 
      15 PC0IWETM PC0IWETM ; 
      15 PC0IWETD PC0IWETD ; 
    10 PC0IWFET PC0IWFET ; 
      15 PC0IWFEM PC0IWFEM ; 
      15 PC0IWFED PC0IWFED ; 
      15 PC0IWFEY PC0IWFEY ; 
    10 PC0IWRTA PC0IWRTA ; 
      15 PC0IWRTC PC0IWRTC ; 
      15 PC0IWRTY PC0IWRTY ; 
      15 PC0IWRTM PC0IWRTM ; 
      15 PC0IWRTD PC0IWRTD ; 
    10 PC0IWFRT PC0IWFRT ; 
      15 PC0IWFRM PC0IWFRM ; 
      15 PC0IWFRD PC0IWFRD ; 
      15 PC0IWFRY PC0IWFRY ; 
    10 PC0IWOET PC0IWOET ; 
      15 PC0IWOEC PC0IWOEC ; 
      15 PC0IWOEY PC0IWOEY ; 
      15 PC0IWOEM PC0IWOEM ; 
      15 PC0IWOED PC0IWOED ; 
    10 PC0IWFOE PC0IWFOE ; 
      15 PC0IWFOM PC0IWFOM ; 
      15 PC0IWFOD PC0IWFOD ; 
      15 PC0IWFOY PC0IWFOY ; 
    10 XWHCD XWHCD ; 
    10 YMTCD YMTCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC0IMSTC PC0IMSTC ; 
      15 PC0IMSTY PC0IMSTY ; 
      15 * char(1) ; // FILLER
      15 PC0IMCLR PC0IMCLR ; 
end // end PC0IW03

// COLOR
DataItem PC0IMCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color/style
DataItem PC0IMSCL char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0IMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0IMSRC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE COLOR W/SPACE
DataItem PC0IMSTC char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STYLE
DataItem PC0IMSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YSI-TYP-CD
DataItem PC0IW-PREV-HHMMSS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc0iw01 group level
DataItem PC0IW1GP char(832)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc0iw03 group level
DataItem PC0IW3GP char(124)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update allowed
DataItem PC0IWAUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bypass processing flag
DataItem PC0IWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor index
DataItem PC0IWCIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// data entered flag
DataItem PC0IWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 1
DataItem PC0IWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 2
DataItem PC0IWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash 3
DataItem PC0IWDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PC0IWETC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0IWETD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0IWETM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s pc estimate ship date
DataItem PC0IWETS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0IWETY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0IWFED num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0IWFEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ets display format
DataItem PC0IWFET num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0IWFEY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory
DataItem PC0IWFFC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PC0IWFOD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// oets display format
DataItem PC0IWFOE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem PC0IWFOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC0IWFOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delivery month
DataItem PC0IWFPD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. id display format
DataItem PC0IWFPI char(12)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po month
DataItem PC0IWFPM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po year
DataItem PC0IWFPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem PC0IWFRD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0IWFRM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rta display format
DataItem PC0IWFRT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0IWFRY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add/del function switch
DataItem PC0IWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inquiry flag
DataItem PC0IWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem PC0IWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load data flag
DataItem PC0IWLDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage length
DataItem PC0IWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage line
DataItem PC0IWLIN char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load special msg text index
DataItem PC0IWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// map to be displayed
DataItem PC0IWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message flag
DataItem PC0IWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PC0IWOEC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0IWOED num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0IWOEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s pc oets date
DataItem PC0IWOET num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem PC0IWOEY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// p.o. delivery month
DataItem PC0IWPDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reformat po id date
DataItem PC0IWPID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// p.o. century
DataItem PC0IWPOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of p.o. itm spec instr
DataItem PC0IWPOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p.o. month
DataItem PC0IWPOM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// p.o. year
DataItem PC0IWPOY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// problem switch
DataItem PC0IWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s pc rta date
DataItem PC0IWRTA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PC0IWRTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PC0IWRTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PC0IWRTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PC0IWRTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection flag
DataItem PC0IWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr text index
DataItem PC0IWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of special instr text
DataItem PC0IWSTW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem PC0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special text data entered
DataItem PC0IWTEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0IWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// verify chg in spec text
DataItem PC0IWTXT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update requested
DataItem PC0IWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

