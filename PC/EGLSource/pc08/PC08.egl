package pc08;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC08 ****
// ***************** PRODUCTION ORDER SYSTEM ******************
// **                                                        **
// 
//              Print P.O. Forms Selection/List
//              -------------------------------
// 
// 
//    This program will allow the user to bring up a list
// of P.O. Numbers and select, from the list, certain P.O.'s
// for print.  From the list display, the user will be able
// to select one to many P.O.'s for print on either Green Bar
// or P.O. Forms.  The report format being the same in either
// case.
//    For Footwear only, the user will also have the option
// to print a particular set of P.O.'s in another P.O. Type's
// report format. (ie. a "Salesman Sample (SS)" report in
//                    a "Overruns (OR)" report format.)
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// ************************************************************
// **                                                        **
// *                                                          *
// *   DATE      NAME    DESCRIPTION OF CHANGE                *
// * --------   -------  ------------------------------------ *
// * 11/21/89   SFORD    New Application                      *
// * 08/28/90   CHAERT   Add new P.O. Type "TO" to PC08T02    *
// * 09/21/90   MPISTO   always print to rmt46                *
// * 06/05/91   LSUTTO   add print of UPC label order forms   *
// * 09/16/91   LSUTTO   fix "SS-upc-print-1-style" bug       *
// * 03/30/92   LSUTTO   change upc printer to rmt34          *
// * 10/08/92   SDIFLE   changed to display po's with only    *
// *                     OP status to print                   *
// * 11/19/92   gamen    Allow p.o. type 'EM' and 'TS' to     *
// *                     print.                               *
// * 01/13/93   SDIFLE   logic added to print only PO, not    *
// *                     the UPC for MEM(phis) factory.       *
// *                     Modified PC08540.                    *
// * 03/09/93   SDIFLE   logic changed to be able to print    *
// *                     PO with "P" without printing with    *
// *                     "G" first(pc08252).                  *
// * 06/11/93   KSANFO   Allow print of new po type "AD".     *
// * 06/21/93   chaert   message when PO not OP status        *
// * 12/30/93   gamen    add theater of ops code.             *
// * 06/03/94   dhuffm   Add 'PX' type to PC08T02.            *
// * 02/06/95   gamen    turn off job notification.           *
// * 03/04/96   kbrads   Allow UPC print option (Y/N).        *
// * 03/12/96   kbrads   Add message when printing a PO with  *
// *                     no FOB data.                         *
// * 04/18/96   kbrads   Add edit check for Sales Order.      *
// * 08/20/96   RMCAFE   added upc table edit for print form  *
// * 10/22/96   RMCAFE   added price order ticket form        *
// * 01/13/97   RMCAFE   added new printer rmt's to pc08t04   *
// *                     remote printer table.                *
// * 02/19/97   jniese   Correct select of po items.  Was     *
// *                     processing canceled rows.            *
// * 02/25/97   jniese   increase size of remote printer      *
// *                     field to hold 6 char remote ids.     *
// * 03/20/97   jniese   pca380 - change default printer      *
// *                     for gpc 03 po types ss and sx.       *
// * 04/18/97   jniese   pca352 - change default upc print    *
// *                     option to 'n'                        *
// * 06/10/97   PHARWO   PCA367 - PPR PROJECT - P.O. VIEWS    *
// * 07/07/97   jniese   PCA367 - PPR PROJECT fixes           *
// * 01/08/97   GREDDY   PCS002 - INCORPORATING BIG BOARD     *
// *                              CHANGES IN  JCL's PC08T11   *
// *                     PC08T22, PC08T33, PC08T55            *
// * 06/02/98   jniese   pca442 - change default printer      *
// *                     for gpc 03 po types xi and xd.       *
// * 08/10/98   KGRAHA   PCA434 - Change JCL for new forms.   *
// * 11/23/98   KGRAHA   PCA999 - fix PA2 cancel.             *
// * 03/25/99   DRAMSE   PCF180 - overridden form codes       *
// * 12/14/99   VSANKA   Add 'SM' po type.                   *
// * 08/21/00   VSANKA   incorporate cover sheet for Open Text*
// * 10/26/00   MNADEL   ALLOWED THE OPEN TEXT OUTPUT TO R299 *
// * 12/06/00   DRAMSE   Changed PC08158. Allowed printing of *
// *                     POs with status 'FC'                 *
// * 12/11/00   DRAMSE   ALLOWED THE OPEN TXT OUPUT TO DUMMY  *
// * 07/23/01   spitch   changes for phk fcty not to print    *
// *                     for rd po type                       *
// * 09/25/01   spitch   changes for phh fcty not to print    *
// *                     for rd po type                       *
// * 11/15/01   spitch   change not to validate sales order   *
// *                     for sap po
// *  01/15/03  NPULUG    Changed pc08355 not to validate
//  SAF22 orders.                         *
// *  01/28/03  spitch   changed to due to dataset contention
// *  03/28/03  spitch   Removed printing option G.
// ************************************************************
// *********************
Program PC08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC08W00 PC08W00; // record
  PC08W01 PC08W01; // record
  PC08W02 PC08W02; // record
  PC08W04 PC08W04; // record
  PC08W05 PC08W05; // record
  PC08W06 PC08W06; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VFDOFC02 VFDOFC02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOITM06 VPOITM06; // record
  VPOSIZ02 VPOSIZ02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use PC08T01; // table
  use PC08T02; // table
  use PC08T03; // table
  use PC08T04 {deleteAfterUse = yes}; // table
  use PC08T05 {deleteAfterUse = yes}; // table
  use PC08T11; // table
  use PC08T22; // table
  use PC08T33; // table
  use PC08T55 {deleteAfterUse = yes}; // table
  use PCCTTBL {deleteAfterUse = yes}; // table
  use PC08M.PC08M001,  // forms
      PC08M.PC08M002, 
      PC08M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ******************** XPPC001 FLOW ***************************/
     /* **                                                        ***/
                                                              /* --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC08M001 initial;
    set PC08M002 initial;

    set PC08W00 empty;
    set PC08W01 empty; /* ===> Map 1 display W.S. record*/
    set PC08W02 empty; /* ===> Map 2 display W.S and T.S. page*/
    set PC08W04 empty; /* ===> W.S. Pass record*/

    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM03 empty;
    set PCFREC empty;
    set PCYREC empty;

    set FY1REC empty;
    set PG1REC empty;
    set PG2REC empty;

    set SQLCA empty;

    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set TA6REC empty;

    set XX0XW01 empty;

    goto PC08050; /* ==================> flow to special initialization*/

     /* **                                                        ***/
     /* **************** End of XPPC001 FLOW ************************/
    PC08050: PC08050();
     /* *****************   PC08050 FLOW ****************************/
     /* **                                                        ***/

    goto PC08001; /* ======================> flow to application main line*/

     /* **                                                        ***/
     /* ************** End of PC08050 FLOW **************************/
    PC08001: PC08001();
     /* ****************** PC08001 FLOW *****************************/
     /* **                                                        ***/

    goto PC08001; /* ======================> flow to application main line*/

     /* **                                                        ***/
     /* *************** End of PC08001 FLOW *************************/
  end // end main
end // end PC08

// ===> Application Main Line <==
Function PC08001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WSWM == "1") /* Map 1 was requested*/

    PC08100(); /* ===> process Display map 1*/

  else

    if (PC08W00.PC08WSWM == "2") /* ===> Map 2 was requested*/

      PC08200(); /* ===> process Display map 2 logic*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PC08W00.XXXPRCNM = "PC08001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PC08W00.PC08WSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PC08W00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0X"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PC08W00.PC08WSWM = "1"; /* Map 1 was requested*/

         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of pc08001 ***********************/
end // end PC08001

// Special initialization
Function PC08050()
   /* ------------------------------------------------------------*/
    /* This process does all the necessary security checks for*/
    /* entry to this application.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XGPCD != "02"
   && PCWREC.XGPCD != "03")
    PCWREC.XXXMSGNO = 28; /* GPC is invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* To application*/

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    PC08W00.PC08WSWR = "N"; /* request for data switch*/
    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    PC08W00.XXXPRCNM = "PC08050"; /* Module identification*/

  end

  if (PCWREC.XGPCD == "02"
   && COMMAREA.CACLVL[2] == "N") /* User can not enter*/
    PCWREC.XXXMSGNO = 163; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0X"; /* To application*/

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    PC08W00.PC08WSWR = "N"; /* request for data switch*/
    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    PC08W00.XXXPRCNM = "PC08050"; /* Module identification*/

  end

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CACLVL[3] == "N") /* User can not enter*/
    PCWREC.XXXMSGNO = 163; /* Request for application invalid*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0X"; /* To application*/

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    PC08W00.PC08WSWR = "N"; /* request for data switch*/
    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    PC08W00.XXXPRCNM = "PC08050"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Allow a supervisor to change the user id*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[9] == "Y")
    set PC08M001.CAUSERID initialAttributes;
  else
    set PC08M001.CAUSERID skip;
  end

   /* ------------------------------------------------------------*/
   /* Initialization of flags and indexes*/
   /* ------------------------------------------------------------*/

  PC08W01.CAUSERID = COMMAREA.CAUSERID; /* ===> default userid*/
  PC08M001.CAUSERID = COMMAREA.CAUSERID; /* ===> default userid*/
  PC08W00.PC08WSWR = "Y"; /* ===> request for data*/
  PC08W00.PC08WSWF = "Y"; /* ===> request format*/
  PC08W00.PC08WP20 = "N"; /* ===> PF20 flag*/
  PC08W00.PC08WSWM = "1"; /* ===> request map 1*/
  PC08W00.PC08WMAX = 75; /* ===> Max allowable DD * cards*/
  PC08W00.PC08WCTR = 0; /* ===> counter of # of DD * cards*/
  PC08W01.XGPCD = COMMAREA.XGPCD; /* ===> load GPC code*/

   /* ------------------------------------------------------------*/
   /* Initialize W05 rec for upc label order form printing*/
   /* ------------------------------------------------------------*/

  PC08W05.XGPCD = "03";
  PC08W05.FY1FCTYC = "    ";
  PC08W05.PC4ORTYP = "  ";
  PC08W05.SY1STNBR = "      ";
  PC08W05.SY2CLRID = "   ";
  PC08W05.PC08WABS = " ";

   /* ------------------------------------------------------------*/
   /* Initialize W06 rec for PTO Price Ticket Order Form print*/
   /* ------------------------------------------------------------*/

  PC08W06.XGPCD = "03";
  PC08W06.FY1FCTYC = "    ";
  PC08W06.PC4ORTYP = "  ";
  PC08W06.SY1STNBR = "      ";
  PC08W06.SY2CLRID = "   ";
  PC08W06.PC08WABS = " ";

   /* ------------------------------------------------------------*/
   /* Verify the userid that we have in the commarea*/
   /* ------------------------------------------------------------*/

  if (PC08W01.XGPCD == "03")
    PC08S03();
  end

   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PC08M001.XXXPRCNM = "PC0D600"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

   /* **                                                        ***/
   /* ********************** End of PC08050 ***********************/
end // end PC08050

// ========>Process map 1 logic
Function PC08100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC08120(); /* Format and display the map*/

  PC08130(); /* Check attention identifier*/

  PC08140(); /* Reset fields to normal intensity*/

  PC08150(); /* Verify the entered data*/

  PC08160(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC08100 ***********************/
end // end PC08100

// -->Format and converse the map
Function PC08120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WSWF == "Y") /* Map must be formatted*/

    PC08W00.PC08WSWF = "N"; /* Format the map switch*/

    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

    PC08M001.XGPCD = PC08W01.XGPCD; /* GPC code*/
    if (PC08M001.XGPCD in XGPTBL.XGPCD)
      PC08M001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
    PC08M001.CAUSERID = PC08W01.CAUSERID;

    if (PC08W01.XGPCD == "02")
      set PC08M001.CAUSERID skip;
    end

    if (PC08W01.XGPCD == "03")
      set PC08M001.PC08MLT1 skip, invisible; /* ===>type format literal*/
      set PC08M001.PC08MTYP skip, invisible; /* ===>type format desc.*/
      set PC08M001.PC08MDSC skip, invisible; /* ===>type format desc.*/
      set PC08M001.PC08MCLT skip, invisible; /* ===>comment literal*/
      set PC08M001.PC08MCMT skip, invisible, noHighLight; /* ===>comment line*/
    end

  /* MOVE 'N' TO PC08M001.PC08MUPC; /* Default print upc to no*/
    PC08W01.PC08MUPC = "N";
  /* MOVE 'N' TO PC08M001.PC08MPTO; /* Default print pto to no*/
    PC08W01.PC08MPTO = "N";

  end

  if (converseVar.validationMsgNum != 0) /* No error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC08M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC08M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC08M001.XXXPRCNM = PC08W00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC08M001 alarm; /* Indicate sound alarm*/

  end

  converse PC08M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC08W00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC08M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC08M001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC08120 ***********************/
end // end PC08120

// -->Check attention identifier
Function PC08130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PC08W00.PC08WSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
      set PC08M001 initial;
      set PC08M001.CATOAP cursor, bold; /* Highlight*/
      set PC08W01 empty; /* ==>reset map display record*/
      PC08W01.XGPCD = COMMAREA.XGPCD;
      PC08W00.XXXPRCNM = "PC08130"; /* Module identification*/

    else

      PC08W00.XXXPRCNM = "PC08130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1   was pressed*/
   || converseVar.eventKey is pf3 /* or PF3   was pressed*/
   || converseVar.eventKey is pf4 /* or PF4   was pressed*/
   || converseVar.eventKey is pf5 /* or PF5   was pressed*/
   || converseVar.eventKey is pf21) /* or PF21  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC08M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0X"; /* Application to application*/
    end

    if (converseVar.eventKey is pf21) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/

    set PC08M001 initial;
    set PC08M001.CATOAP cursor, bold; /* Highlight*/
    PC08W01.XGPCD = COMMAREA.XGPCD;
    PC08W00.XXXPRCNM = "PC08130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PC08W00.XXXPRCNM = "PC08130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08130 ***********************/
end // end PC08130

// -->Reset highlighted fields
Function PC08140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC08M001.PC4ORTYP initialAttributes; /* P.O. Type code*/
   /* ==========>protect P.O. ID*/
  set PC08M001.PC08MPYR initialAttributes; /* ====> production year*/
  set PC08M001.PC08MPMO initialAttributes; /* ====> production month*/
  set PC08M001.PC08MPDM initialAttributes; /* ====> delivery month*/
  set PC08M001.FY1FCTYC initialAttributes; /* ====> factory code*/

  if (PC08W01.XGPCD == "02")
    set PC08M001.PC08MTYP initialAttributes; /* P.O. Type format code*/
    set PC08M001.PC08MCLT initialAttributes; /* ====> Comment literal*/
    set PC08M001.PC08MCMT initialAttributes; /* ====> Comment line*/
  end

  set PC08M001.PC3PONBR initialAttributes; /* P.O. Number*/
  set PC08M001.SY1STNBR initialAttributes; /* style number*/

  if (PC08W01.XGPCD == "03"
   && COMMAREA.CACLVL[9] == "Y")
    set PC08M001.CAUSERID initialAttributes; /* user id*/
  end

  set PC08M001.PC3PRTIN initialAttributes; /* print status indicater*/

  set PC08M001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC08M001.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of PC08140 ***********************/
end // end PC08140

// -->Verify the entered data
Function PC08150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC08W00.XXXPRCNM = "PC08150"; /* Module identification*/
    set PC08M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If  Print Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.PC3PRTIN != PC08W01.PC3PRTIN)
      PC08151(); /* =========> Verify warehouse code*/
      PC08W00.PC08WMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If UPC Print Indicator was changed, load map display record.*/
    /* ------------------------------------------------------------*/

  /* IF PC08M001.PC08MUPC NE PC08W01.PC08MUPC;*/
  /* PERFORM PC08149;             /* =========> Verify UPC Print Ind.*/
  /* MOVE 'Y' TO PC08W00.PC08WMOD;/* ===> data modified*/
  /* END;*/

    /* ------------------------------------------------------------*/
     /* If PTO Print Indicator was changed, load map display record.*/
    /* ------------------------------------------------------------*/

  /* IF PC08M001.PC08MPTO NE PC08W01.PC08MPTO;*/
  /* PERFORM PC08161;             /* =========> Verify PTO Print Ind.*/
  /* MOVE 'Y' TO PC08W00.PC08WMOD;/* ===> data modified*/
  /* END;*/

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.SY1STNBR != PC08W01.SY1STNBR)

      PC08152(); /* =========> Verify style code*/

    end

    /* ------------------------------------------------------------*/
     /* If userid changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.CAUSERID != PC08W01.CAUSERID)
      if (PC08M001.CAUSERID > " ")
        PC08S02(); /* =========> verify userid*/
      else
        PC08W01.CAUSERID = " "; /* blank scheduler field*/
        PC08W01.PG1SC4CD = " "; /* blank scheduler code*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If P.O. Number is not entered*/
     /* --->  Verify P.O. TYPE*/
     /* --->  Verify Factory*/
     /* --->  Verify P.O. ID*/
    /* ------------------------------------------------------------*/

    if (PC08M001.PC3PONBR == 0)

      if (PC08M001.PC3PONBR != PC08W01.PC3PONBR)
        PC08W01.PC3PONBR = 0;
      end

      PC08153(); /* =========> Verify P.O. Type code*/

      PC08157(); /* =====>Verify factory code*/

      PC08154(); /* =========> Verify P.O. ID*/

    else

      /* ------------------------------------------------------------*/
      /* ====> verify  secondary key info not entered*/
            /* if not entered verify P.O. Number exists*/
      /* ------------------------------------------------------------*/

      if (PC08M001.PC4ORTYP > " "
       || PC08M001.PC08MPYR > " "
       || PC08M001.PC08MPMO > " "
       || PC08M001.PC08MPDM > " "
       || PC08M001.FY1FCTYC > " ")

        set PC08M001.PC3PONBR cursor, bold;
        set PC08M001.PC4ORTYP bold;
        set PC08M001.PC08MPYR bold;
        set PC08M001.PC08MPMO bold;
        set PC08M001.PC08MPDM bold;
        set PC08M001.FY1FCTYC bold;

        PC08W00.XXXPRCNM = "PC08150"; /* Module identification*/
        converseLib.validationFailed(158); /* ===> cannot both primary and*/
                                   /* secondary key*/

      else /* ===> verify P.O. Number exists*/

        PC08M001.PC4SDESC = " "; /* ===> reset typed desc.*/
        PC08W01.PC3POIDT = 0; /* ===> reset display record*/
        PC08W01.PC4ORTYP = " "; /* ===> reset display record*/
        PC08W01.PC08MPYR = " "; /* ===> reset display record*/
        PC08W01.PC08MPMO = " "; /* ===> reset display record*/
        PC08W01.PC08MPDM = " "; /* ===> reset display record*/
        PC08W01.FY1FCTYC = " "; /* ===> reset display record*/

        /* ------------------------------------------------------------*/
         /* If P.O. Number was changed, verify the entered code.*/
         /* or is not entered, verify the data request.*/
        /* ------------------------------------------------------------*/

        if (PC08M001.PC3PONBR != PC08W01.PC3PONBR)

          PC08158(); /* =========> Verify P.O. Number code*/
          PC08W00.PC08WMOD = "Y"; /* ===> data modified*/

        end /* ====> check secondary key entered*/

      end

    end /* ===> P.O. Number zero*/

    /* ------------------------------------------------------------*/
     /* If GPC Code is FOOTWEAR*/
      /* - check P.O. Type Format.*/
    /* ------------------------------------------------------------*/

    if (PC08W01.XGPCD == "02")
      PC08159(); /* =========> Verify P.O. Type format*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC08150  **********************/
end // end PC08150

// Verify Print indicator
Function PC08151()
  if (PC08M001.PC3PRTIN == " " /* print status indicater*/
   /* OR PC08M001.PC3PRTIN EQ 'G'     /* print status indicater*/
   || PC08M001.PC3PRTIN == "P" /* print status indicater*/
   || PC08M001.PC3PRTIN == "*") /* print status indicater*/
    /**/
    PC08W01.PC3PRTIN = PC08M001.PC3PRTIN;
    /**/
  else
    /**/
     /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
     /* ------------------------------------------------------------*/
    /**/
    PC08W00.XXXPRCNM = "PC08151"; /* Module identification*/
    set PC08M001.PC3PRTIN cursor, bold; /* Highlight*/
    converseLib.validationFailed(305); /* Indicate missing or invalid*/
    /**/
  end

   /* **                                                        ***/
   /* ********************** End of PC08151 ***********************/
end // end PC08151

// Verify Style Code
Function PC08152()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PC08M001.SY1STNBR != PC08W01.SY1STNBR)
    PC08W00.PC08WMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PC08M001.SY1STNBR == " ")

    PC08W01.SY1STNBR = PC08M001.SY1STNBR;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PC08M001.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PC08M001.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC08W01.SY1STNBR = PC08M001.SY1STNBR; /* ===> style code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/

  PC08W00.XXXPRCNM = "PC08152"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    set PC08M001.SY1STNBR cursor, bold;
    converseLib.validationFailed(52);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PC08M001.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PC08152 ***********************/
end // end PC08152

// Verify P.O. Type
Function PC08153()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC4ORTYP == " ")

    if (PC08M001.PC4ORTYP != PC08W01.PC4ORTYP)
      PC08W01.PC4ORTYP = " ";
      PC08W01.PC4SDESC = " ";
      PC08M001.PC4SDESC = " ";
    end

    return; /* ====> return to previous process*/

  end

  PC08W01.PC08TONE = PC08W01.XGPCD; /* setup table key*/
  PC08W01.PC08TTWO = PC08M001.PC4ORTYP;
  if (PC08W01.PC08TKEY in PC08T02.PC08TKEY) /* gpc/type check*/
     /* next sentence*/
  else

    PC08M001.PC4SDESC = " ";
    converseLib.validationFailed(304); /* ===> cannot use this application*/
    PC08W00.XXXPRCNM = "PC08153"; /* Module identification*/
    set PC08M001.PC4ORTYP cursor, bold;
    return; /* ==============> Exit to display map*/

  end

  if (PC08M001.PC4ORTYP == PC08W01.PC4ORTYP) /* ===> p.o. type code*/
    PC08M001.PC4SDESC = PC08W01.PC4SDESC;
                                   /* ===> p.o. type description*/
    return; /* ==============> No edit required*/
  end

   /* ------------------------------------------------------------*/
   /* Verify  P.O. Type is valid and active.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty;
  PC4REC.XGPCD = PC08W01.XGPCD; /* ===> GPC Code*/
  PC4REC.PC4ORTYP = PC08M001.PC4ORTYP; /* ===> P.O. Type code*/
  PC08M001.PC4SDESC = " ";

  PC08S01(); /* ===> call P.O. Type D.B. from I.O.*/
                                   /* MODE*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && PC4REC.XXXSTAT == "A")  
    PC08W01.PC4ORTYP = PC08M001.PC4ORTYP; /* ===> p.o. type code*/
    PC08M001.PC4SDESC = PC4REC.PC4SDESC; /* ===> p.o. type description*/
    PC08W01.PC4SDESC = PC4REC.PC4SDESC; /* ===> p.o. type description*/
    PC08W00.PC08WMOD = "Y"; /* ===> modified data*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the P.O. Type invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
   || PC4REC.XXXSTAT != "A")    

    set PC08M001.PC4ORTYP cursor, bold;
    PC08M001.PC4SDESC = " ";

    PC08W00.XXXPRCNM = "PC08153"; /* Module identification*/
    converseLib.validationFailed(33);

    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08153 ***********************/
end // end PC08153

// Verify the P.O. ID
Function PC08154()
   /* ------------------------------------------------------------*/
    /* if all secondary key fields are left blank and*/
     /* P.O. Number is also not entered (ie. zero)*/
    /* then error ---> must enter key data*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPYR == " " /* ====> production year*/
   && PC08M001.PC08MPMO == " " /* ====> production month*/
   && PC08M001.PC08MPDM == " " /* ====> delivery month*/
   && PC08M001.PC3PONBR == 0)  /* ====> P.O. Number*/

    converseLib.validationFailed(307); /* required to enter some key data*/
    PC08W00.XXXPRCNM = "PC08154"; /* Module identification*/
    set PC08M001.PC08MPYR cursor, bold; /* ===> production year*/

    if (PC08W01.XGPCD == "02")
      set PC08M001.PC08MPMO bold; /* ====> production month*/
      set PC08M001.PC08MPDM bold; /* ====> delivery month*/
    end

    return;

  end

   /* ------------------------------------------------------------*/
    /* if P.O. Date fields are left blank then verify the*/
     /* correct order for selection requirements.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.XGPCD == "03" /* ====>*/
   && PC08M001.PC08MPYR == "  ") /* ====> production year*/

    PC08W00.XXXPRCNM = "PC08154"; /* Module identification*/
    converseLib.validationFailed(31); /* required to enter some key data*/
    return;

  end

  if (PC08M001.PC08MPYR > " "  /* ====> production year*/
   && PC08M001.PC08MPMO == " " /* ====> production month*/
   && PC08M001.PC08MPDM > " ") /* ====> delivery month*/

    set PC08M001.PC08MPMO cursor, bold; /* ====> production month*/
    PC08W00.XXXPRCNM = "PC08154"; /* Module identification*/
    converseLib.validationFailed(31); /* required to enter some key data*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Verify P.O. ID fields, providing the above conditions valid*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPYR != PC08W01.PC08MPYR /* ====> production year*/
   || PC08M001.PC08MPMO != PC08W01.PC08MPMO /* ====> production month*/
   || PC08M001.PC08MPDM != PC08W01.PC08MPDM) /* ====> delivery month*/

    if (PC08W01.XGPCD == "03")
      PC08155(); /* =====>verify date*/
    else
      PC08156(); /* =====>verify date*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC08154 ***********************/
end // end PC08154

// P.O. ID  date "Apparel"
Function PC08155()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Verify that the date yy & mm is valid*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* ====> Production Delivery Month*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPDM > "  ") /* ====> production delivery month*/
    if (PC08M001.PC08MPDM < "01" /* ====> production delivery month*/
     || PC08M001.PC08MPDM > "12")
                                   /* ====> production delevery month*/
      converseLib.validationFailed(31); /* Indicate month missing or invalid*/
      set PC08M001.PC08MPDM cursor, bold; /* Highlight*/
      PC08W00.XXXPRCNM = "PC08155"; /* Module identification*/
    end
  end

   /* ------------------------------------------------------------*/
   /* ====> Production Month*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPMO > "  ") /* ====> production month*/

    if (PC08M001.PC08MPMO < "01" /* ====> production month*/
     || PC08M001.PC08MPMO > "12") /* ====> production month*/

      converseLib.validationFailed(31); /* Indicate month missing or invalid*/
      set PC08M001.PC08MPMO cursor, bold; /* Highlight*/
      PC08W00.XXXPRCNM = "PC08155"; /* Module identification*/
      return; /* ===> no need to verify Season code for this invalid month*/

    end

  else

    if (PC08M001.PC08MPYR > " "  /* ====> production year*/
     && PC08M001.PC08MPMO == " " /* ====> production month*/
     && PC08M001.PC08MPDM > " ") /* ====> delivery month*/

      converseLib.validationFailed(31); /* required to enter some key data*/
      PC08W00.XXXPRCNM = "PC08155"; /* Module identification*/
      set PC08M001.PC08MPYR cursor, bold; /* ====> production year*/

    end

  end

   /* ------------------------------------------------------------*/
   /* ====> Production Month*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPYR == "  ") /* ====> production year*/

    set PC08M001.PC08MPYR cursor, bold; /* ====> production year*/
    PC08W00.XXXPRCNM = "PC08155"; /* Module identification*/
    converseLib.validationFailed(80); /* ===> season code required*/

  else

    PC08S10(); /* ===> verify season code*/

  end

   /* ------------------------------------------------------------*/
   /* If errors detected, do not load display record*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 31 /* date error in P.O. ID*/
   || converseVar.validationMsgNum == 80) /* date error in P.O. ID*/
    /* ===>*/
    /* =========  Next Sentence =========>*/
    /* ===>*/
  else /* ===> load display record*/
    PC08W01.PC08MPYR = PC08M001.PC08MPYR; /* ====> production year*/
    PC08W01.PC08MPMO = PC08M001.PC08MPMO; /* ====> production month*/
    PC08W01.PC08MPDM = PC08M001.PC08MPDM; /* ====> delivery month*/
  end

   /* **                                                        ***/
   /* ********************** End of PC08155 ***********************/
end // end PC08155

// P.O. ID  date "Footwear"
Function PC08156()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Verify that the date yy & mm is valid and convert it to*/
      /* numeric form using TA0040*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPDM < "01" /* ====> production delivery month*/
   || PC08M001.PC08MPDM > "12") /* ====> production delevery month*/

    set PC08M001.PC08MPDM cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PC08M001.PC08MPMO < "01" /* ====> production month*/
   || PC08M001.PC08MPMO > "12") /* ====> production month*/

    set PC08M001.PC08MPMO cursor, bold; /* Highlight*/
    converseLib.validationFailed(31); /* Indicate month missing or invalid*/

  end

  if (PC08M001.PC08MPYR > "99" /* ====> production year month*/
   || PC08M001.PC08MPYR < "00") /* ====> production year month*/

    set PC08M001.PC08MPYR cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum == 38 /* date error in P.O. ID*/
   || converseVar.validationMsgNum == 31) /* date error in P.O. ID*/
    PC08W00.XXXPRCNM = "PC08156"; /* Module identification*/
    return;
  end

   /* ===>set-up gregorian date in working storage*/

  PC08W00.PC08MPYR = PC08M001.PC08MPYR; /* ====> production year*/
  PC08W00.PC08MPMO = PC08M001.PC08MPMO; /* ====> production month*/
  PC08W00.PC08MPDM = PC08M001.PC08MPDM; /* ====> delivery month*/

  if (PC08W00.PC08MPYR > "85")
    PC08W00.PC08MPCC = "19"; /* ===>century*/
  else
    PC08W00.PC08MPCC = "20"; /* ===>century*/
  end

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ====> move date type to record-->(ccyymmdd)*/
  TA2REC.TA2GRGG = PC08W00.TA2GRGG; /* ==> move production date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    PC08W01.PC08MPYR = PC08M001.PC08MPYR; /* ====> production year*/
    PC08W01.PC08MPMO = PC08M001.PC08MPMO; /* ====> production month*/
    PC08W01.PC08MPDM = PC08M001.PC08MPDM; /* ====> delivery month*/
    PC08W01.PC3POIDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    PC08W00.PC08WMOD = "Y"; /* ====> modified data flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC08W00.XXXPRCNM = "PC08156"; /* Module identification*/
    set PC08M001.PC08MPYR cursor, bold; /* Highlight*/
    set PC08M001.PC08MPMO bold; /* Highlight*/
    set PC08M001.PC08MPDM bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08156 ***********************/
end // end PC08156

// Verify factory        VFCTY001
Function PC08157()
   /* ------------------------------------------------------------*/
   /* Apparel Must Enter a Factory If Only the Season is Entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.XGPCD == "03"   /* ===> apparel*/
   && PC08M001.PC08MPYR != " " /* ===> season year entered*/
   && PC08M001.FY1FCTYC == " ") /* ===> factory not entered*/
    if (PC08M001.PC08MPMO == " " /* ===> production month not entered*/
     || PC08M001.PC08MPDM == " ") /* ===> delivery month not entered*/
      set PC08M001.FY1FCTYC cursor, bold;
      PC08W00.PC08WSWF = "N"; /* Format the map switch*/
      PC08W00.XXXPRCNM = "PC08157"; /* Module identification*/
      converseLib.validationFailed(381); /* ===> factory must be entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* check to see if the user spaces out the factory*/
   /* ------------------------------------------------------------*/

  if (PC08M001.FY1FCTYC == " ") /* ===> factory code*/
    if (PC08M001.FY1FCTYC != PC08W01.FY1FCTYC) /* ===> factory code*/
      PC08W01.FY1FCTYC = " "; /* ===> factory code*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Row storage area*/

  FY1REC.XGPCD = PC08M001.XGPCD; /* ===> GPC*/
  FY1REC.FY1FCTYC = PC08M001.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC08W01.FY1FCTYC = PC08M001.FY1FCTYC; /* ===> factory code*/
      PC08W00.PC08WMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC08M001.FY1FCTYC cursor, bold;
      PC08W00.PC08WSWF = "N"; /* Format the map switch*/

      PC08W00.XXXPRCNM = "PC08157"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.XXXPRCNM = "PC08157"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc08157 ***********************/
end // end PC08157

// Verify P.O. NBR       VPOHDR01
Function PC08158()
   /* ------------------------------------------------------------*/
   /* check if P.O. number  field modified*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC3PONBR != PC08W01.PC3PONBR)

    PC08W00.PC08WMOD = "Y";

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = PC08M001.XGPCD; /* ===> GPC*/
   /* MOVE PC08m001.PO-REG-CD TO VPOHDR02.PO-REG-CD;/* ===> p.o. REGION CODE*/
  VPOHDR02.PO-REG-CD = "01"; /* ===> p.o. REGION CODE*/
  VPOHDR02.PC3PONBR = PC08M001.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PC08W01.PC08TONE = VPOHDR02.XGPCD; /* setup table key*/
      PC08W01.PO-REG-CD = VPOHDR02.PO-REG-CD;
      PC08W01.PC08TTWO = VPOHDR02.PC4ORTYP;
      if (PC08W01.PC08TKEY in PC08T02.PC08TKEY) /* valid gpc/type*/
        if (VPOHDR02.YPUCD == "OP" || 
        VPOHDR02.YPUCD == "FC")
          PC08W01.PC3PONBR = PC08M001.PC3PONBR; /* ===> P.O. number*/

        else /* ===> invalid status for printing*/

          converseLib.validationFailed(503); /* ===> request not found*/
          PC08W00.XXXPRCNM = "PC08158"; /* Module identification*/
          set PC08M001.PC3PONBR cursor, bold;
          PC08W01.PC3PONBR = 0; /* ===> P.O. number*/

        end /* ===> Status check*/
      else
        converseLib.validationFailed(304);
        PC08W00.XXXPRCNM = "PC08158"; /* Module identification*/
        set PC08M001.PC3PONBR cursor, bold;
        PC08W01.PC3PONBR = 0; /* ===> P.O. number*/

      end /* ===> 'FT' check*/

      return; /* Return to previous process*/

    end /* ===> normal R.C. on select unique*/
                                   /* P.O. Number*/

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      PC08W00.PC08WSWF = "N"; /* Format the map switch*/

      converseLib.validationFailed(69); /* ===> P.O. number does not exist*/
      PC08W00.XXXPRCNM = "PC08158"; /* Module identification*/
      set PC08M001.PC3PONBR cursor, bold;
      PC08W01.PC3PONBR = 0; /* ===> P.O. number*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.XXXPRCNM = "PC08158"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08158 ***********************/
end // end PC08158

// Verify P.O. Type Format
Function PC08159()
   /* ------------------------------------------------------------*/
   /* check if P.O. Type ' ' and if it required.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MTYP == " ")

    PC08W01.PC08MTYP = PC08W01.PC4ORTYP; /* ===> default format*/
    PC08M001.PC08MTYP = PC08W01.PC4ORTYP; /* ===> default format*/
    PC08M001.PC08MDSC = PC08W01.PC4SDESC; /* ==> DEFAULT FORMAT*/
    PC08W01.PC08MDSC = PC08W01.PC4SDESC; /* ==> DEFAULT FORMAT*/

    return;
  end

  PC08W01.PC08TONE = PC08W01.XGPCD; /* setup table key*/
  PC08W01.PC08TTWO = PC08M001.PC08MTYP;
  if (PC08W01.PC08TKEY in PC08T02.PC08TKEY) /* valid gpc/typ*/
     /* next sentence*/
  else

    converseLib.validationFailed(304); /* ===> cannot use this application*/
    PC08W00.XXXPRCNM = "PC08153"; /* Module identification*/
    set PC08M001.PC08MTYP cursor, bold;
    PC08M001.PC08MDSC = " "; /* ==> DEFAULT FORMAT*/
    return; /* ==============> Exit to display map*/

  end

  if (PC08M001.PC08MTYP == PC08W01.PC08MTYP) /* ===> p.o. type code*/
    PC08M001.PC08MDSC = PC08W01.PC08MDSC; /* ===> p.o. type code*/
    return; /* ==============> No edit required*/
  end

   /* ------------------------------------------------------------*/
   /* Verify  P.O. Type is valid and active.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty;
  PC4REC.XGPCD = PC08W01.XGPCD; /* ===> GPC Code*/
  PC4REC.PC4ORTYP = PC08M001.PC08MTYP; /* ===> P.O. Type code*/
  PC08M001.PC08MDSC = " "; /* ===> p.o. type code*/

  PC08S01(); /* ===> call P.O. Type D.B. from I.O.*/
                                   /* MODE*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   && PC4REC.XXXSTAT == "A")  
    PC08W01.PC08MTYP = PC08M001.PC08MTYP; /* ===> p.o. type code*/
    PC08M001.PC08MDSC = PC4REC.PC4SDESC; /* ===> p.o. type code*/
    PC08W01.PC08MDSC = PC4REC.PC4SDESC; /* ===> p.o. type code*/
    PC08W00.PC08WMOD = "Y"; /* ===> modified data*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the P.O. Type invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
   || PC4REC.XXXSTAT != "A")    

    set PC08M001.PC08MTYP cursor, bold;

    PC08W00.XXXPRCNM = "PC08159"; /* Module identification*/
    converseLib.validationFailed(33);

    return; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08159 ***********************/
end // end PC08159

// -->Process valid input request
Function PC08160()
  if (converseVar.eventKey is enter)

    PC08W00.PC08WSWM = "2"; /* ==>map requested*/
    PC08W00.PC08WSWR = "Y"; /* ==>request for data*/
    PC08W00.PC08WSWF = "Y"; /* ==>format map requested*/
    PC08W00.PC08WPFL = "N"; /* ==>print flag confirmation flag*/
    PC08W00.PC08WP20 = "N"; /* ==>print flag confirmation flag*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08180 ***********************/
end // end PC08160

// ========>Process Map 2 logic
Function PC08200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC08210(); /* Obtain the data to display*/

  PC08220(); /* Format and display the map*/

  PC08230(); /* Check attention identifier*/

  PC08240(); /* Reset fields to normal intensity*/

  PC08250(); /* Verify the entered data*/

  PC08260(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC08200 ***********************/
end // end PC08200

// -->Obtain the data to display
Function PC08210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PC08W00.XXXTSLEN = 520; /* ===> Temporary storage page length*/
   /* ==> (13 display lines) * (40 length of display line) = 520*/
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PC08211(); /* Purge any temporary storage*/

  set PC08W05 empty; /* Clear upc form parm record*/

  set PC08W06 empty; /* Clear PTO form parm record*/

  PC08W00.PC08WCTR = 0; /* ===>init counter for " " print*/
                                   /* indicaters*/
  PC08W00.PC08WMFL = "N"; /* ===> Multiple Order types flag*/
  PC08W00.PC4ORTYP = " "; /* ===> initialize Order type*/

   /* ------------------------------------------------------------*/
   /* If P.O. Number was not entered do:*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Header Rows.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC3PONBR == 0)

    PC08212(); /* ===> calc high and low dates*/

    PC08S21(); /* ===> Select set and open cursor for*/
                                   /* header rows*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
     /* providing the following:*/
     /* - For GPC Code = '02'*/
       /* - P.O. type is not "FT"*/
       /* - Style on an Item level matches (If style entered)*/
       /* - print indicator matches (If not "*")*/
     /* - For GPC Code = '03'*/
       /* - Scheduler on an item level matches*/
       /* - Style on an Item level matches (If style entered)*/
       /* - print indicator matches (If not "*")*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* ===>init row-index*/
  PC08W00.PC08WSWC = "N"; /* ===>init EOF cursor for VPOHDR02*/

  if (PC08M001.PC3PONBR == 0)

    PC08W00.PC08WFLG = "N"; /* ===> Init gpc/po type flag*/
    PC08S22(); /* ===> Fetch next row VPOHDR02*/
    PC08W01.PC08TONE = PC08W01.XGPCD;
    PC08W01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC08W01.PC08TTWO = VPOHDR02.PC4ORTYP;
    if (PC08W01.PC08TKEY in PC08T02.PC08TKEY)
      if (VPOHDR02.YPUCD != "CX")
        PC08W00.PC08WFLG = "Y"; /* ===> Valid gpc/typ/stat*/
      end
    end

    while (PC08W00.PC08WFLG == "N" /* ===> Loop until good gpc/po type*/
     && PC08W00.PC08WSWC == "N") /* ===> EOF cursor for VPOHDR02*/
      PC08W00.PC08WFLG = "N"; /* ===> Init gpc/po type flag*/
      PC08S22(); /* ===> Fetch next row VPOHDR02*/
      PC08W01.PC08TONE = PC08W01.XGPCD;
      PC08W01.PO-REG-CD = VPOHDR02.PO-REG-CD;
      PC08W01.PC08TTWO = VPOHDR02.PC4ORTYP;
      if (PC08W01.PC08TKEY in PC08T02.PC08TKEY)
        if (VPOHDR02.YPUCD != "CX")
          PC08W00.PC08WFLG = "Y"; /* ===> Valid gpc/typ/stat*/
        end
      end
    end

  end

  if (PC08W00.PC08WSWC == "N"
   && PC08W01.PC4ORTYP == " ")
    PC08W01.PC4ORTYP = VPOHDR02.PC4ORTYP;
  end

  while (PC08W00.PC08WSWC == "N") /* ===> Until end of cursor*/

    if (PC08W01.PC3PRTIN == "*"
     || PC08W01.PC3PRTIN == VPOHDR02.PC3PRTIN)

      if (VPOHDR02.YPUCD != "TN")

        PC08W00.PC08WFL1 = "N"; /* ===>flag 1 (print authority flag)*/

        PC08S30(); /* ===> check item rows for header print*/
                                   /* authority*/

        /* ------------------------------------------------------------*/
         /* Load the record with the selected Header row providing*/
         /* that the print authority flag was set to yes*/
        /* ------------------------------------------------------------*/

        if (PC08W00.PC08WFL1 == "Y") /* ===>flag 1 (print authority flag)*/

          PC08213(); /* ===> save/load temp storage row*/

          /* ------------------------------------------------------------*/
           /* If the page is full, add the page to the storage queue.*/
          /* ------------------------------------------------------------*/

          if (PC08W00.PC08WIXM <= 12) /* ===> Page has room for more rows*/
            PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* ===>row-index*/
          else
            PC08214(); /* Add page to temporary storage*/
          end

        end /* ===>check (print authority flag)*/

      end /* ===> check hdr status=tn excluded*/

    end /* ===> check print indicator request*/

    if (PC08M001.PC3PONBR > 0)

      PC08W00.PC08WSWC = "Y"; /* ===>EOF cursor for VPOHDR02*/

    else

      PC08W00.PC08WFLG = "N"; /* ===> Init gpc/po type flag*/
      PC08S22(); /* ===> Fetch next row VPOHDR02*/
      PC08W01.PC08TONE = PC08W01.XGPCD;
      PC08W01.PO-REG-CD = VPOHDR02.PO-REG-CD;
      PC08W01.PC08TTWO = VPOHDR02.PC4ORTYP;
      if (PC08W01.PC08TKEY in PC08T02.PC08TKEY)
        if (VPOHDR02.YPUCD != "CX")
          PC08W00.PC08WFLG = "Y"; /* ===> Valid gpc/typ/stat*/
        end
      end

      while (PC08W00.PC08WFLG == "N" /* ===> Loop*/
       && PC08W00.PC08WSWC == "N") /* ===> EOF cursor for VPOHDR02*/
        PC08W00.PC08WFLG = "N"; /* ===> Init gpc/po type flag*/
        PC08S22(); /* ===> Fetch next row VPOHDR02*/
        PC08W01.PC08TONE = PC08W01.XGPCD;
        PC08W01.PO-REG-CD = VPOHDR02.PO-REG-CD;
        PC08W01.PC08TTWO = VPOHDR02.PC4ORTYP;
        if (PC08W01.PC08TKEY in PC08T02.PC08TKEY)
          if (VPOHDR02.YPUCD != "CX")
            PC08W00.PC08WFLG = "Y"; /* ===> Valid gpc/typ/stat*/
          end
        end
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WIXM > 1) /* Page was formatted*/
    PC08214(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set for VPOHDR02.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC3PONBR == 0)
    PC08S23(); /* Close the selected set cursor*/
  end
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* and redisplay Map 1*/
   /* ------------------------------------------------------------*/

  if (PC08W00.TA5TSQIX == 0) /* No pages formatted*/

    PC08W00.PC08WSWM = "1"; /* ======>set map switch*/
    PC08W00.PC08WSWF = "N"; /* Request for data switch*/
    PC08W00.XXXPRCNM = "PC08210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PC08M001.PC3PONBR cursor;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PC08W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC08210 ***********************/
end // end PC08210

// purge any temporary storage
Function PC08211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC08W02 empty; /* Map 2 display storage record*/

  PC08W00.PC08WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC08W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
  PC08W00.XXXPRCNM = "PC08211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08211 ***********************/
end // end PC08211

// Calc. HI/LO P.O. ID Dates
Function PC08212()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) Calculate the date for the high and low values for the*/
      /* select set of Header rows and save the dates in the*/
      /* PC08W01 display record for map 1.*/

      /* For GPC code = '02'*/
      /* - intire date was required*/
          /* - Therefore load PC3POIDT to High & Low Date fields*/

      /* For GPC code = '03'*/
      /* - Season code required and the month fields optional*/
          /* - Use saved season year for High & Low "CCYY" field*/
          /* - if both months left blank*/
             /* - do load High/Low dates*/
          /* - if delivery month left blank*/
             /* - do load High/Low dates*/
          /* - if both months entered*/
             /* - do load High/Low dates*/
   /* ------------------------------------------------------------*/

  if (PC08W01.XGPCD == "02")

    PC08W01.PC08WLOW = PC08W01.PC3POIDT; /* ===> low P.O. ID Date*/
    PC08W01.PC08WHGH = PC08W01.PC3POIDT; /* ===> high P.O. ID Date*/

  else
    /* ------------------------------------------------------------*/
     /* Calculate High & Low dates for both months left blank.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.PC08MPMO == "  " /* ====> production month*/
     && PC08M001.PC08MPDM == "  ")
                                   /* ====> production delivery month*/

      /* ===> setup begin month/year*/

      PC08W00.PC08WYY1 = PC08W01.PC08WYR1; /* ====> season year*/
      PC08W00.PC08WMM1 = PC08W01.PC08WMO1; /* ====> production month*/
      PC08W00.PC08WDD1 = 1; /* ====> W.S. delivery month*/
      PC08W01.PC08WLOW = PC08W00.PC08WDT1; /* ===> low P.O. ID Date*/

      /* ===> setup end month/year*/

      PC08W00.PC08WYY1 = PC08W01.PC08WYR2; /* ====> season year*/
      PC08W00.PC08WMM1 = PC08W01.PC08WMO2; /* ====> production month*/
      PC08W00.PC08WDD1 = 12; /* ====> W.S. delivery month*/
      PC08W01.PC08WHGH = PC08W00.PC08WDT1; /* ===> high P.O. ID Date*/

    end

    /* ------------------------------------------------------------*/
     /* Calculate High & Low dates for Delivery month left blank.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.PC08MPMO > "  " /* ====> production month*/
     && PC08M001.PC08MPDM == "  ")
                                   /* ====> production delivery month*/

      PC08W00.PC08WYY1 = PC08W01.PC08WYR1; /* ====> season year*/
      PC08W00.PC08WMM1 = PC08W01.PC08WMO1; /* ====> production month*/
      PC08W00.PC08WDD1 = 1; /* ====> delivery month*/
      PC08W01.PC08WLOW = PC08W00.PC08WDT1; /* ===> low P.O. ID Date*/

      PC08W00.PC08WDD1 = 12; /* ====> delivery month*/
      PC08W01.PC08WHGH = PC08W00.PC08WDT1; /* ===> high P.O. ID Date*/

    end

    /* ------------------------------------------------------------*/
     /* Calculate High & Low dates for entire date entered.*/
    /* ------------------------------------------------------------*/

    if (PC08M001.PC08MPMO > "  " /* ====> production month*/
     && PC08M001.PC08MPDM > "  ")
                                   /* ====> production delivery month*/

      PC08W00.PC08WYY1 = PC08W01.PC08WYR1; /* ====> season year*/
      PC08W00.PC08WMM1 = PC08W01.PC08WMO1; /* ====> production month*/
      PC08W00.PC08WMMA = PC08M001.PC08MPDM; /* ====> alpha month form*/
      PC08W00.PC08WDD1 = PC08W00.PC08WMMN; /* ====> delivery month*/

      PC08W01.PC08WLOW = PC08W00.PC08WDT1; /* ===> low P.O. ID Date*/
      PC08W01.PC08WHGH = PC08W00.PC08WDT1; /* ===> high P.O. ID Date*/

    end

  end /* ===> GPC Code check*/

   /* **                                                        ***/
   /* ********************** End of PC08212 ***********************/
end // end PC08212

// Load/save row in temp storage
Function PC08213()
   /* ------------------------------------------------------------*/
   /* Load/save the row in Temp. Storage. ---> (PC08W02)*/
   /* in both cases:*/
   /* 1. P.O.Number entered    ---> (Select Unique was preformed)*/
      /* - PC3REC was loaded in Verify P.O. Number process*/
      /* - one row will be loaded to the T.S. record PC08W02.*/
   /* 2. P.O.Number not entered --> (Select Set was performed)*/
      /* - PC3REC was loaded in Select set of Header rows*/
      /* - many rows will be loaded to the T.S. record PC08W02.*/
   /* ------------------------------------------------------------*/

  PC08W02.XGPCD[PC08WIXM] = VPOHDR02.XGPCD;
  PC08W02.PO-REG-CD[PC08WIXM] = VPOHDR02.PO-REG-CD;
  PC08W02.PC3PONBR[PC08WIXM] = VPOITM06.PC3PONBR;
  PC08W02.PC4ORTYP[PC08WIXM] = VPOHDR02.PC4ORTYP;
  PC08W02.YPUCD[PC08WIXM] = VPOHDR02.YPUCD;
  PC08W02.FY1FCTYC[PC08WIXM] = VPOHDR02.FY1FCTYC;
  PC08W02.SY1STNBR[PC08WIXM] = VPOITM06.SY1STNBR;
  PC08W02.XWHCD[PC08WIXM] = VPOITM06.XWHCD;
  PC08W02.PC2CUXID[PC08WIXM] = VPOITM06.PC2CUXID;
  PC08W02.PC3PRTIN[PC08WIXM] = VPOHDR02.PC3PRTIN;

   /* ------------------------------------------------------------*/
    /* Format the P.O ID in display form*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2GRGGN = VPOHDR02.PC3POIDT; /* ===> CCYYMMDD numeric*/
  PC08W00.TA2GRGG = TA2REC.TA2GRGG; /* ===> CCYYMMDD alpha*/

  if (PC08W01.XGPCD == "02")
    PC08W02.PC08MPYR[PC08WIXM] = PC08W00.PC08MPYR; /* ==> prod year*/
  else
    PC08W02.PC08MPYR[PC08WIXM] = VPOHDR02.PCFSECD; /* ==> prod year*/
  end

  PC08W02.PC08MPMO[PC08WIXM] = PC08W00.PC08MPMO; /* ====> prod month*/
  PC08W02.PC08MPDM[PC08WIXM] = PC08W00.PC08MPDM; /* ====> delivery month*/

  PC08W02.PC08WDH1[PC08WIXM] = "-"; /* ===> dash literal 1*/
  PC08W02.PC08WDH2[PC08WIXM] = "-"; /* ===> dash literal 2*/
  PC08W02.PC08WDH3[PC08WIXM] = "-"; /* ===> dash literal 3*/

   /* ------------------------------------------------------------*/
    /* - accumulate the number of " " print indicators for the*/
      /* the PF20 function key.*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == " ")

    PC08W00.PC08WCTR = PC08W00.PC08WCTR + 1; /* ====> incr. counter*/

    if (PC08M001.PC08MTYP > " " /* ===> type format specified*/
     || PC08M001.PC4ORTYP > " ") /* ===> type specified*/

      /* =========== Next Sentence ==================>*/

    else /* ===> check for multiple order types*/

      if (PC08W00.PC4ORTYP == " ") /* ===> save intial type*/
        PC08W00.PC4ORTYP = VPOHDR02.PC4ORTYP;
      else
        if (PC08W00.PC4ORTYP != VPOHDR02.PC4ORTYP)
          PC08W00.PC08WMFL = "Y";
        end
      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0M213 ***********************/
end // end PC08213

// Add page to temporary storage
Function PC08214()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC08W02.XXXTSLEN = PC08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC08W00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC08W02 empty; /* M002 display storage*/

    PC08W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC08W00.PC08WIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08214 ***********************/
end // end PC08214

// -->Format and converse map 2
Function PC08220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC08W00.PC08WSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC08M002 initial;

      PC08W00.PC08WSWF = "N"; /* Format the map switch*/
      /* ------------------------------------------------------------*/
       /* Format the LEFT AND RIGHT maps*/
      /* ------------------------------------------------------------*/

      PC08221(); /* ===> Format the data from T.S.*/

      PC08222(); /* ===> Format the literals*/

      PC08223();
                                   /* ===> Format fields entered from map 1*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map (LEFT or RIGHT)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC08M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC08M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC08M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC08M002.XXXPRCNM = PC08W00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC08M002 alarm; /* Indicate sound alarm*/

  end

  converse PC08M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC08W00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC08M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC08M002.CAITEM; /* Application data*/
  PC08W00.PC08WFLG1 = "N";
  PC08W00.PC08WRMT4 = " ";

   /* **                                                        ***/
   /* ********************** End of PC08220 ***********************/
end // end PC08220

// Format the display data
Function PC08221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC08W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC08W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PC08W00.PC08WSWU == "Y") /* Current page was changed*/

        PC08S43(); /* Update temporary storage page*/

        PC08W00.PC08WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC08W00.XXXTSPAG > PC08W00.TA5TSQIX) /* Desired > highest*/
        PC08W00.XXXTSPAG = PC08W00.TA5TSQIX; /* Default to highest*/
      end

      PC08S44(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* Initialize line index*/

  if (PC08W00.PC08WP20 == "N") /* ==> PF20 Switch*/

    if (PCWREC.XXXMSGNO == 0) /* ====> no previous messages*/
      PCWREC.XXXMSGNO = 387; /* ====> please select a line message*/
      PC08W00.XXXPRCNM = "PC08221"; /* Module identification*/
    end

  else /* ===> JCL Submitted info message*/

    PC08M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> job info message*/
    COMMAREA.CAMSG = " "; /* ===> reset job info message*/
    PC08M002.XXXPRCNM = "PC08642"; /* ===> Process name*/
    set PC08M002 alarm; /* ===> set alarm*/

  end

  set PC08M002.PC08MSEL[PC08WIXM] cursor;

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXM <= 13 /* Until screen is full*/
   && PC08W02.XGPCD[PC08WIXM] > " ") /* or end of data*/

    /* ------------------------------------------------------------*/
     /* LEFT Map ---> M002*/
    /* ------------------------------------------------------------*/

    PC08M002.PC08MSEL[PC08WIXM] = PC08W02.PC08MSEL[PC08WIXM];
    PC08M002.PC08MPID[PC08WIXM] = PC08W02.PC08MPID[PC08WIXM];
    PC08M002.PC08MPNB[PC08WIXM] = PC08W02.PC3PONBR[PC08WIXM];
    PC08M002.PC08MTPE[PC08WIXM] = PC08W02.PC4ORTYP[PC08WIXM];
    PC08M002.PC08MSTA[PC08WIXM] = PC08W02.YPUCD[PC08WIXM];
    PC08M002.PC08MSTY[PC08WIXM] = PC08W02.SY1STNBR[PC08WIXM];
    PC08M002.PC08MCUS[PC08WIXM] = PC08W02.PC2CUXID[PC08WIXM];
    PC08M002.PC08MWHS[PC08WIXM] = PC08W02.XWHCD[PC08WIXM];
    PC08M002.PC08MPRT[PC08WIXM] = PC08W02.PC3PRTIN[PC08WIXM];

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set the unused map selection fields askip*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXM <= 13) /* Until screen is full*/

    set PC08M002.PC08MSEL[PC08WIXM] skip, invisible;

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* ===>Increment line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08221 ***********************/
end // end PC08221

// Format the display literals
Function PC08222()
   /* ------------------------------------------------------------*/
   /* Display the page information on both of the screens*/
   /* ------------------------------------------------------------*/

  if (PC08W01.XGPCD == "03")
    set PC08M002.PC08MLT1 skip, invisible; /* ===>type format literal*/
    set PC08M002.PC08MTYP skip, invisible; /* ===>type format desc.*/
    set PC08M002.PC08MDSC skip, invisible; /* ===>type format desc.*/
  end

  if (PC08W01.PC3PRTIN == "*")
    PC08M002.PC08MPRL = "('*' = ALL         )";
  end

  /* IF PC08W01.PC3PRTIN EQ 'G';*/
  /* MOVE "('G' = GREENBAR    )" TO PC08M002.PC08MPRL;*/
  /* END;*/

  if (PC08W01.PC3PRTIN == "P")
    PC08M002.PC08MPRL = "('P' = P.O. FORMS  )";
  end

  if (PC08W01.PC3PRTIN == " ")
    PC08M002.PC08MPRL = "(' ' = NOT PRINTED )";
  end

  PC08M002.XXXTSPAG = PC08W00.XXXTSPAG; /* Current page*/
  PC08M002.TA5TSQIX = PC08W00.TA5TSQIX; /* Highest page*/

   /* **                                                        ***/
   /* ********************** End of PC08222 ***********************/
end // end PC08222

// Format the map header data
Function PC08223()
   /* ------------------------------------------------------------*/
   /* If PO ID entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC08MPYR > " ")

    if (PC08W01.XGPCD == "03")
      PC08M002.PC08MPYR = PC08W01.PCFSECD;
    else
      PC08M002.PC08MPYR = PC08W01.PC08MPYR;
    end

    PC08M002.PC08MPMO = PC08W01.PC08MPMO;
    PC08M002.PC08MPDM = PC08W01.PC08MPDM;

  end

   /* ------------------------------------------------------------*/
   /* If Factory entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.FY1FCTYC > " ")
    PC08M002.FY1FCTYC = PC08W01.FY1FCTYC;
  end

   /* ------------------------------------------------------------*/
   /* If Order Type entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC4ORTYP > " ")
    PC08M002.PC4ORTYP = PC08W01.PC4ORTYP;
    PC08M002.PC4SDESC = PC08M001.PC4SDESC;
  end

   /* ------------------------------------------------------------*/
   /* If Order Type format entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.XGPCD == "02"
   && PC08M001.PC08MTYP > " ")
    PC08M002.PC08MTYP = PC08W01.PC08MTYP;
    PC08M002.PC08MDSC = PC08M001.PC08MDSC;
  end

   /* ------------------------------------------------------------*/
   /* If Style entered*/
   /* ------------------------------------------------------------*/

  if (PC08M001.SY1STNBR > " ")
    PC08M002.SY1STNBR = PC08W01.SY1STNBR;
  end

   /* ------------------------------------------------------------*/
   /* Load other entered header data*/
   /* ------------------------------------------------------------*/

  if (PC08M001.PC3PRTIN > " ")
    PC08M002.PC3PRTIN = PC08M001.PC3PRTIN;
  end

   /* ------------------------------------------------------------*/
   /* Load other common header data*/
   /* ------------------------------------------------------------*/

  PC08M002.XGPCD = PC08M001.XGPCD;
  PC08M002.XGPDESC = PC08M001.XGPDESC;
  PC08M002.CAUSERID = PC08M001.CAUSERID;

   /* ------------------------------------------------------------*/
   /* If P.O. Number entered valued*/
     /* - Load all associated data to map*/
   /* ------------------------------------------------------------*/

  if (PC08W01.PC3PONBR > 0)

    PC08M002.PC3PONBR = PC08W01.PC3PONBR;
    PC08M002.FY1FCTYC = VPOHDR02.FY1FCTYC;

    /* ------------------------------------------------------------*/
      /* Load the P.O Order Type ID*/
     /* If Order Type format not entered load default value*/
    /* ------------------------------------------------------------*/

    PC08M002.PC4ORTYP = VPOHDR02.PC4ORTYP;

    set PC4REC empty; /* ===> initialize select record*/
    PC4REC.XGPCD = VPOHDR02.XGPCD;
    PC4REC.PC4ORTYP = VPOHDR02.PC4ORTYP;
    PC08S01(); /* ===> get order type desc.*/
    PC08M002.PC4SDESC = PC4REC.PC4SDESC;

    if (PC08M001.PC08MTYP == " ") /* ===> Print type format not entered*/
      PC08M002.PC08MTYP = VPOHDR02.PC4ORTYP;
      PC08M002.PC08MDSC = PC4REC.PC4SDESC;
    end

    /* ------------------------------------------------------------*/
      /* Format and load the P.O ID in display form*/
    /* ------------------------------------------------------------*/

    TA2REC.TA2GRGGN = VPOHDR02.PC3POIDT; /* ===> CCYYMMDD numeric*/
    PC08W00.TA2GRGG = TA2REC.TA2GRGG; /* ===> CCYYMMDD alpha*/

    if (PC08W01.XGPCD == "02")
      PC08M002.PC08MPYR = PC08W00.PC08MPYR; /* ====> production year*/
    else
      PC08M002.PC08MPYR = VPOHDR02.PCFSECD; /* ====> production year*/
    end

    PC08M002.PC08MPMO = PC08W00.PC08MPMO; /* ====> production month*/
    PC08M002.PC08MPDM = PC08W00.PC08MPDM; /* ====> delivery month*/

  end /* ===> P.O. Number was entered*/

   /* **                                                        ***/
   /* ********************** End of PC08223 ***********************/
end // end PC08223

// -->Check attention identifier
Function PC08230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC08W00.PC08WSWR == "Y") /* Request for data*/
      set PC08W02 empty; /* M002 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC08W00.PC08WSWF = "N"; /* Format the map switch*/
    PC08W00.PC08WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC08M002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PC08211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PC08M001 initial;
      set PC08M001.CATOAP cursor, bold; /* Highlight*/
      PC08M001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC08W00.XXXPRCNM = "PC08230"; /* Module identification*/

      PC08W00.PC08WSWM = "1"; /* request for map switch*/
      PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
      PC08W00.PC08WSWR = "N"; /* Request for data switch*/

    else

      PC08W00.XXXPRCNM = "PC08230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC08M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    PC08211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PC08M001 initial;
    set PC08M001.CATOAP cursor, bold; /* Highlight*/
    PC08W01.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PC08W00.XXXPRCNM = "PC08230"; /* Module identification*/

    PC08W00.PC08WSWM = "1"; /* request for map switch*/
    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    PC08W00.PC08WSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    PC08W00.XXXPRCNM = "PC08230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08230 ***********************/
end // end PC08230

// -->Reset highlighted fields
Function PC08240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* Initialize line index*/

  while (PC08W00.PC08WIXM <= 13 /* Until end of lines*/
   && PC08W02.PC3PONBR[PC08WIXM] > 0) /* or end of display*/

    set PC08M002.PC08MSEL[PC08WIXM] initialAttributes; /* ===>Reset select field*/

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line index*/

  end

  set PC08M002.CATOAP initialAttributes; /* TO application*/
  set PC08M002.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End Of PC08240 ***********************/
end // end PC08240

// -->Verify the entered data
Function PC08250()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC08251(); /* Verify scroll*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
    if (converseVar.eventKey is enter /* ===>selection print requested*/
     || converseVar.eventKey is pf20) /* ===>global green bar print*/

      if (PC08W00.TA5TSQIX > 0) /* Page was formatted*/

        PC08W00.PC08WIXM = 13; /* Initialize line index*/
        PC08W00.PC08MSEL = " "; /* Initialize save selection*/
        PC08W00.PC4ORTYP = " "; /* Initialize save Order Type*/

        while (PC08W00.PC08WIXM > 0) /* Until end of lines*/

          PC08252(); /* Verify data in the line*/

          PC08W00.PC08WIXM = PC08W00.PC08WIXM - 1; /* Decrement line number*/

        end

      end /* ===> if Page was formatted*/

      if (converseVar.eventKey is pf20) /* Scroll back request*/

        if (PC08W00.PC08WCTR == 0)
          PC08W00.XXXPRCNM = "PC08250"; /* Module identification*/
          set PC08M002.PC08MSEL[1] cursor; /* Highlight*/
          converseLib.validationFailed(302); /* ===> No reports to submit/print*/
        end /* ===> PF20 check*/

        if (PC08W00.PC08WMFL == "Y") /* ===> multiple Order types*/
          PC08W00.XXXPRCNM = "PC08250"; /* Module identification*/
          set PC08M002.PC08MSEL[1] cursor; /* Highlight*/
          converseLib.validationFailed(303); /* ===> Multiple order types exist*/
        end /* ===> PF20 check*/

      end /* ===> PF20 check*/

    end /* ===> <enter> or <PF20> check*/

  end /* ===> PF7 or PF8 check*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC08M002.CAITEM > " ") /* Application data was entered*/

    PC08W00.XXXPRCNM = "PC08250"; /* Module identification*/
    set PC08M002.CAITEM cursor, bold; /* ===>set cursor*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC08250 ***********************/
end // end PC08250

// Verify scroll request
Function PC08251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC08W00.XXXTSPAG < 2)       /* and no previous pages*/

    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PC08M002.PC08MSEL[1] cursor;
    PC08W00.XXXPRCNM = "PC08251"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PC08W00.XXXTSPAG >= PC08W00.TA5TSQIX) /* and no more pages*/

    converseLib.validationFailed(3); /* No more pages to display*/
    converseLib.clearScreen();
    
    set PC08M002.PC08MSEL[1] cursor;
    PC08W00.XXXPRCNM = "PC08251"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 13; /* Initialize line index*/

  while (PC08W00.PC08WIXM > 0) /* Until end of lines*/

    if (PC08M002.PC08MSEL[PC08WIXM] != PC08W02.PC08MSEL[PC08WIXM])

      if (PC08W02.PC08MSEL[PC08WIXM] == "V")
        PC08M002.PC08MSEL[PC08WIXM] = "V";
      else
        PC08W00.XXXPRCNM = "PC08251"; /* Module identification*/
        set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(14); /* can't page back/forward*/
      end

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM - 1; /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of PC08251 ***********************/
end // end PC08251

// Verify data in the line
Function PC08252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "G" OR "P",*/
   /* indicate only "G" OR "P"  may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PC08M002.PC08MSEL[PC08WIXM] == " ") /* ===> reload viewed indicator*/
    if (PC08W02.PC08MSEL[PC08WIXM] == "V")
      PC08M002.PC08MSEL[PC08WIXM] = "V";
    end
    return;
  end

  if (PC08M002.PC08MSEL[PC08WIXM] != PC08W02.PC08MSEL[PC08WIXM])
    /**/
    if (PC08M002.PC08MSEL[PC08WIXM] != "P" /* and is not a "P"*/
     /* AND PC08M002.PC08MSEL[PC08WIXM] NE 'G'; /* and is not a "G"*/
    )                                     
      PC08W00.XXXPRCNM = "PC08252"; /* Module identification*/
      set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(299); /* Indicate only "G" or "P"*/
      return;
      /**/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
    /* - Uniqueness, May only select "G"s or "P"s, not both in on*/
      /* session*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    /**/
    if (PC08M002.PC08MSEL[PC08WIXM] == "G"
     || PC08M002.PC08MSEL[PC08WIXM] == "P")
      /**/
      if (PC08M002.PC08MSEL[PC08WIXM] != PC08W00.PC08MSEL /* ===>*/
       && PC08W00.PC08MSEL != " ")                       
        set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
        PC08W00.XXXPRCNM = "PC08252"; /* Module identification*/
        converseLib.validationFailed(300); /* ===>cannot mix codes*/
      else
        PC08W00.PC08MSEL = PC08M002.PC08MSEL[PC08WIXM];
                                   /* ==>save code*/
      end
      /**/
       /* ------------------------------------------------------------*/
       /* PCA230 - changed to print PO's without printing 'g' first.*/
       /* ------------------------------------------------------------*/
         /* If the Apparel and trying to "P" a P.O. with a print*/
         /* indicator of ' ' set error*/
       /* ------------------------------------------------------------*/
      /**/
       /* IF PC08W01.XGPCD EQ '03';    /* ===> P.O. Type format entered*/
       /* AND PC08M002.PC08MSEL(PC08WIXM) EQ 'P';*/
       /* AND PC08W02.PC3PRTIN(PC08WIXM) EQ ' ';/* ===> Print indicator*/
      /**/
       /* SET PC08M002.PC08MSEL(PC08WIXM) CURSOR,BRIGHT; /* Highlight*/
       /* MOVE 'PC08252' TO PC08W00.XXXPRCNM; /* Module identification*/
       /* MOVE 306 TO EZEMNO;   /* ===> cannot select this line with 'P'*/
      /**/
       /* END;                    /* ===> type not specified*/
       /* ------------------------------------------------------------*/
         /* If the P.O. Type or type format was not specified*/
         /* verify the P.O. Type's selected ar the same*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC08W01.XGPCD == "03" /* ===> P.O. Type format entered*/
       || PC08W01.PC08MTYP == " ") /* ===> P.O. Type format entered*/
        /**/
        if (PC08M002.PC08MTPE[PC08WIXM] != PC08W00.PC4ORTYP /* ===> one type*/
         && PC08W00.PC4ORTYP != " ")                       
          /**/
          set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
          PC08W00.XXXPRCNM = "PC08252"; /* Module identification*/
          converseLib.validationFailed(303); /* ===>multiple P.O. types selected*/
          /**/
        else
           /* ==> save type*/
          PC08W00.PC4ORTYP = PC08M002.PC08MTPE[PC08WIXM];
        end
        /**/
      end /* ===> type not specified*/
      /**/
       /* Verify Sales Order and PTO if Apparel*/
      /**/
      if (PC08W01.XGPCD == "03")
        PC08S66(); /* ===> select scan on VPOITM06*/
        PC08S67(); /* ===> fetch initial record*/
        PC08W00.PC08WSWT = "N"; /* initialize end of cursor*/
        /**/
        while (PC08W00.PC08WSWT == "N") /* ===> until end of temp cursor*/
                                  /* ===> (VPOITM06)*/
          if (VPOITM06.PC6XCTCD in PCCTTBL.XCTCD)
          else
            if (VPOITM06.PC6STAT == "OP"
             && VPOITM06.OP1CUOID != 0)
              /**/
              PC08355(); /* ===> verify sales order*/
              if (PC08W01.PC08MPTO == "Y")
                PC08546(); /* ===> verify if PTO allowed*/
              end
            end /* ===> line selected*/
          end /* ===> line selected*/
          PC08S67(); /* ===> fetch next record*/
        end
        PC08S33(); /* ===> close VPOITM06 cursor*/
      end
    end
    /**/
  end /* ===> enter pressed*/

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
    /* - PFkey (cannot make selections  with a PF20 request)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)
    /**/
    if (PC08M002.PC08MSEL[PC08WIXM] == "G"
     || PC08M002.PC08MSEL[PC08WIXM] == "P")
      /**/
      PC08W00.PC08WPFL = "N"; /* ===> reset print confirm flag*/
      /**/
      set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
      PC08W00.XXXPRCNM = "PC08252"; /* Module identification*/
      converseLib.validationFailed(301); /* ===>cannot make selection and press*/
                                   /* PF20*/
      /**/
    end /* ===> line selected*/
    /**/
  end /* ===> enter pressed*/

   /* **                                                        ***/
   /* ********************** End of PC08252 ***********************/
end // end PC08252

// -->Process valid input request
Function PC08260()
   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PC08W00.PC08WSWM = "1"; /* ===> Set request for Sel map*/
    set PC08W02 empty;
    set PC08M002 initial;
    set PC08M001.PC08MPYR cursor;
    PC08M001.XXXPRCNM = "PC08"; /* ===> Reset field*/

    /* Save off Selection Field*/

    PC08W00.PC08WIXM = 1;

    while (PC08W00.PC08WIXM <= 13)

      PC08W00.PC08WFSE[PC08WIXM] = " ";
      PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1;

    end

    PC08W00.PC08MFTT = 0; /* Reset previous message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    set PC08M002 initial;
    PC08W00.XXXTSPAG = PC08W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC08W00.PC08WSWF = "Y"; /* Format the map switch*/
    set PC08M002 initial;
    PC08W00.XXXTSPAG = PC08W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Check if any new selection was made on the screen.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WCMF = "N";
  PC08W00.PC08WIXM = 1;
  while (PC08W00.PC08WIXM <= 13 /* Process P.O.s on map*/
   && PC08W02.XGPCD[PC08WIXM] > " ")

    if (PC08M002.PC08MSEL[PC08WIXM] != PC08W00.PC08WFSE[PC08WIXM]
     && PC08W00.PC08WFSE[PC08WIXM] != "C") /* already confirmed*/
      PC08W00.PC08WCMF = "Y";
    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1;
  end

   /* ------------------------------------------------------------*/
   /* Open VPOITM01 cursor to get the Seq Nbrs for PO to query*/
   /* FOB data on the VPOSIZ02 database.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && PC08W01.XGPCD == "03") /* apparel*/
    if (PC08W00.PC08WCMF == "Y" /* something entered*/
     || PC08W00.PC08MFTT != 517) /* No FOB data*/

      VPOITM06.XGPCD = PC08W01.XGPCD; /* Set up Sel. crit.*/
      VPOITM06.PO-REG-CD = PC08W01.PO-REG-CD; /* Set up Sel.*/
      move "N" to PC08W00.PC08WNFO[1] for all; /* Initialize FOB data flag*/
      PC08W00.PC08WFOB = "N"; /* Initialize FOB screen error*/
      PC08W00.PC08WSWT = "N"; /* Initialize end of cursor flag*/
      PC08W00.PC08WIXM = 1; /* Initialize line index*/

      while (PC08W00.PC08WIXM <= 13) /* Until end of lines on map*/

        if (PC08M002.PC08MSEL[PC08WIXM] != " "
         && PC08M002.PC08MSEL[PC08WIXM] != "V") /* already processed*/
          VPOITM06.PC3PONBR = PC08M002.PC08MPNB[PC08WIXM];
          PC08261(); /* Check for FOB data*/
        end

        PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line number*/
      end

      if (PC08W00.PC08WFOB == "Y")
        PC08269(); /* position cursor on P.O. with no FOB*/
                                  /* data.*/
      end
    end
  end

   /* Save off Selection Field*/

  PC08W00.PC08WIXM = 1;

  while (PC08W00.PC08WIXM <= 13)

    PC08W00.PC08WFSE[PC08WIXM] = PC08M002.PC08MSEL[PC08WIXM];
    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1;

  end

   /* If No FOB Data already displayed set to zero*/
  if (PC08W00.PC08MFTT == 517) /* No FOB Data*/
    PC08W00.PC08MFTT = 0;
  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and call routine to submit JCL.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    PC08W00.PC08WPFL = "N"; /* ===> Print confirmation flag*/
    PC08W00.PC08WP20 = "N"; /* ===> PF20 flag*/

    if ("G" in PC08M002.PC08MSEL /* =====> Line was selected*/
     || "P" in PC08M002.PC08MSEL) /* =====> Line was selected*/

      /* ------------------------------------------------------------*/
       /* Determine if the called print program has been coded.*/
      /* ------------------------------------------------------------*/

      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        PC08S60(); /* ===> driver to verify print program*/
      else /* ;===>   (prod region)*/
        PC08S64(); /* ===> driver to verify print program*/
      end /* ;===>   (test region)*/

      PC08500(); /* ===> process JCL Job submit routine*/

      if (PC08W00.PC08WMOD == "Y")
        PC08W00.PC08WSWU = "Y"; /* ===> update temp storage*/
      end

    else

      PC08W00.XXXPRCNM = "PC08260";
      set PC08M002.PC08MSEL[1] cursor, bold; /* ====>highlight*/
      converseLib.validationFailed(25); /* ====> selection must be made*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a PF20 fuction was requested save key fields and*/
    /* set up the pass record and call routine to submit JCL.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)

    /* ------------------------------------------------------------*/
     /* Determine if the called print program has been coded.*/
    /* ------------------------------------------------------------*/

    sysVar.arrayIndex = 1; /* ====>position index for 1st position*/

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
      PC08S60(); /* ===> driver to verify print program*/
    else /* ;===>   (prod region)*/
      PC08S61(); /* ===> driver to verify print program*/
    end /* ;===>   (test region)*/

    PC08600(); /* ===> process JCL Job submit routine*/

  end
                                  /* ***/
   /* **                                                        ***/
   /* ********************** End of PC08260 ***********************/
end // end PC08260

// -->Check for FOB data
Function PC08261()
  PC08S66(); /* Declare vpoitm06 cursor*/
  PC08S67(); /* Fetch vpoitm06*/

  PC08W00.PC08WSWT = "N"; /* initialize end of cursor*/

  while (PC08W00.PC08WSWT == "N") /* ===> until end of temp cursor*/
                                  /* (vpoitm06)*/
    if (VPOITM06.PC6STAT == "OP")
      /**/
       /* set up for query*/
      VPOSIZ02.XGPCD = VPOITM06.XGPCD;
      VPOSIZ02.PO-REG-CD = VPOITM06.PO-REG-CD;
      VPOSIZ02.PC3PONBR = VPOITM06.PC3PONBR;
      VPOSIZ02.PC6ITMNB = VPOITM06.PC6ITMNB;
      /**/
      PC08S68(); /* Select size record*/
      /**/
      PC08W00.PC08WIX2 = 1;
      while (PC08W00.PC08WIX2 <= 40)
        /**/
        if (VPOSIZ02.PC7ORDEQ[PC08WIX2] > 0) /* if any on order*/
          if (VPOSIZ02.FY4FOBPR[PC08WIX2] <= 0) /* no price*/
            PC08W00.PC08WSWT = "Y"; /* Read next record*/
            PC08W00.PC08WNFO[PC08WIXM] = "Y"; /* Flag P.O. line*/
            PC08W00.PC08WFOB = "Y"; /* Position cursor flag*/
            PC08W00.PC08WIX2 = 40; /* Exit while*/
          end
        end
        PC08W00.PC08WIX2 = PC08W00.PC08WIX2 + 1;
        /**/
      end /* End of While*/
      PC08S67(); /* Fetch next row*/
    else
      PC08S67(); /* Fetch next row*/
    end
  end

  PC08S33(); /* Close vpoitm06 cursor*/

  return; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of PC08261 ***********************/
end // end PC08261

// Indicate no FOB on app. P.O.
Function PC08269()
  PC08W00.PC08WIXM = 1; /* Initialize line index*/

  while (PC08W00.PC08WIXM <= 13) /* Until end of lines*/

    if (PC08W00.PC08WNFO[PC08WIXM] == "Y" /* someting entered*/
     && PC08W00.PC08WFSE[PC08WIXM] != "C") /* not comfirmed already*/
      PC08W00.XXXPRCNM = "PC08269"; /* Module Identification*/
      set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Hilight*/
      converseLib.validationFailed(517); /* No FOB Data!*/
      PC08W00.PC08MFTT = 517; /* Save No FOB Data error msg*/
      PC08W00.PC08WFSE[PC08WIXM] = "C"; /* comfirmed flag*/
      PC08W00.PC08WIXM = 13; /* stop processing*/
    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* increment line number*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC08269 ***********************/
end // end PC08269

// VERIFY SALES ORDER NUMBER
Function PC08355()
   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1PARTN = VPOITM06.OP1PARTN;
  OP1REC.OP1CUOID = VPOITM06.OP1CUOID;
  OP1REC.OP1NORID = VPOITM06.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      /* sales order exists. do nothing*/
      return;
    else

      /* ------------------------------------------------------------*/
      /* If row not found, indicate no sales order.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE == 100)
        if (VPOITM06.PC2CUXID == "SAF22"
         && VPOITM06.PC6XCTCD == "SOUT")
          return;
        else
          converseLib.validationFailed(520); /* ===> Sales Order mis-match*/
          PC08M002.XXXPRCNM = "PC08355";
          set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
          return;
        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC08M002.XXXPRCNM = "PC08355";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC08M002.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08355 ***********************/
end // end PC08355

// ===>Do JCL Job submit <ENTER>
Function PC08500()
   /* ------------------------------------------------------------*/
   /* Process JCL JOB submit.*/
   /* - Do load data to the pass record (P.O. request for print)*/
   /* - Do set-up and submit job*/
   /* - Do Header update*/
   /* - Load the map & temp storage with "V"s*/
   /* ------------------------------------------------------------*/

  PC08510(); /* ====> Load pass record with*/
                                   /* selections*/

  PC08W00.PC08WCTR2 = 1;
  PC08W00.PC08WCTR3 = 1;

  while (PC08W00.PC08WCTR2 < PC08W00.PC08WCTR1)
    /* IF PC08W00.PC08WFSE(PC08WCTR2) = 'P'*/
     /* OR PC08W00.PC08WFSE(PC08WCTR2) = 'G';*/
    if (PC08W00.PC08WFSE[PC08WCTR3] == "P"
     || PC08W00.PC08WFSE[PC08WCTR3] == "G")
      if (PC08W04.PC08WRC4[PC08WCTR2] > 0)
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          PC08520(); /* format production jcl*/
        else
          PC08521(); /* format development jcl*/
        end
      end
      PC08W00.PC08WCTR2 = PC08W00.PC08WCTR2 + 1;
      PC08W00.PC08WCTR3 = PC08W00.PC08WCTR3 + 1;
    else
      PC08W00.PC08WCTR3 = PC08W00.PC08WCTR3 + 1;
    end
  end

  if ("P" in PC08M002.PC08MSEL)
    if (PC08W01.PC08MUPC == "Y")
      PC08540(); /* ====> Load UPC pass records*/
      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        PC08541(); /* format production jcl*/
      else /* for upc labels*/
        PC08542(); /* format development jcl*/
      end /* for upc labels*/
    end
    if (PC08W01.PC08MPTO == "Y")
      PC08545(); /* ====> Load PTO pass records*/
      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        PC08543(); /* format production jcl*/
      else /* for pto labels*/
        PC08544(); /* format development jcl*/
      end
    end
  end

  if (PC08W04.XGPCD[1] > " "         /* ===> DD * loaded to W.S. pass record*/
   && sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return, JCL Submitted*/

    XX0XS01(); /* ==> get current date and time for*/
                                   /* D.B. Updates*/

    PC08530(); /* ====> Update the P.O. Header*/

  end

  PC08W00.PC08WIXM = 1; /* Initialize line index*/

  while (PC08W00.PC08WIXM <= 13 /* Until end of lines*/
   && PC08W02.XGPCD[PC08WIXM] > " ") /* ===> data exists*/

    if (PC08M002.PC08MSEL[PC08WIXM] == "P"
     || PC08M002.PC08MSEL[PC08WIXM] == "G")

      PC08W02.PC08MSEL[PC08WIXM] = "V";
      PC08M002.PC08MSEL[PC08WIXM] = "V";
      PC08W00.PC08WMOD = "Y"; /* ===> (T.S. update)*/

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Decrement line number*/

  end

  set PC08W04 empty; /* ===> reset DD * W.S. Pass record*/

   /* **                                                        ***/
   /* ********************** End of PC08500 ***********************/
end // end PC08500

// Load pass record
Function PC08510()
   /* ------------------------------------------------------------*/
   /* - Do load DD * cards/data to the W.S. pass record*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08W-PRT-FORM-FL = "P"; /* Initialize print select flag*/
  PC08W00.PC08WIXM = 1; /* Initialize line index*/
  PC08W00.PC08WIX1 = 1; /* Initialize temp load index*/

  while (PC08W00.PC08WIXM <= 13) /* Until end of lines*/

    if (PC08M002.PC08MSEL[PC08WIXM] == "P"
     || PC08M002.PC08MSEL[PC08WIXM] == "G")

      if (PC08M002.PC08MSEL[PC08WIXM] == "G") /* Greenbar print selected*/
        PC08W00.PC08W-PRT-FORM-FL = "G"; /* Print form flag*/
      end

      PC08W04.XGPCD[PC08WIX1] = PC08W02.XGPCD[PC08WIXM];
      PC08W04.PO-REG-CD[PC08WIX1] = PC08W02.PO-REG-CD[PC08WIXM];
      PC08W04.PC08WNBR[PC08WIX1] = PC08W02.PC3PONBR[PC08WIXM];
      PC08W04.PC08WCMT[PC08WIX1] = PC08M001.PC08MCMT;

      PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* Increment temp load index*/

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line index*/

  end
  PC08W00.PC08WCTR1 = PC08W00.PC08WIX1;

   /* **                                                        ***/
   /* ********************** End of PC08510 ***********************/
end // end PC08510

// Set-up & submit the prod JCL
Function PC08520()
   /* ------------------------------------------------------------*/
     /* Set-up and Submit the JCL Built from this module by*/
       /* formatting the JCL statements and DD * cards into*/
       /* into the subroutine work area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* ===> Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* ===> Initialize parameters index*/
  PC08W00.PC08WIXT = 1; /* ===> Initialize JCL W.S. Table index*/

  while (PC08T01.TARJCL[PC08WIXT] != "            /*EOF" /* ===> End of table*/
   && TA6REC.TA6INDEX < 100) /* ===> max JCL stmt index*/
    /**/
    if (PC08T01.TARTYPE[PC08WIXT] == "J") /* ===> Job card statement*/
      /**/
      TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCJ; /* JCL Exec card*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/
      /**/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
      /**/
    else /* ===>Table TAR type not "J"*/
      /**/
      if (PC08T01.TARTYPE[PC08WIXT] == "E") /* ===> Execute statement*/
        /**/
        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCE; /* JCL Exec card*/
        TA6REC.TARTYPE[TA6INDEX] = "E"; /* Type*/
        /**/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
        /**/
      else /* ===>Table TAR type not "J" or "E"*/
        /**/
        /**/
        if (PC08T01.TARTYPE[PC08WIXT] == "P") /* Parameter statement*/
          /**/
           /* ------------------------------------------------------------*/
                           /* Load the DD *  Cards*/
          /**/
           /* Load the DD * cards, formatted in the pass record W.S area,*/
           /* to the record used by the JCL submit subroutine.*/
           /* ------------------------------------------------------------*/
          /**/
           /* MOVE 1 TO PC08W00.PC08WIX1;/* ===> init temp load index*/
          /**/
           /* WHILE PC08W00.PC08WIX1 LE 70/* ==> max DD * for JCL*/
           /* AND PC08W04.XGPCD(PC08WIX1) GT ' ';/* ===> DD * card to load*/
          /**/
          TA6REC.TA6ROW[TA6INDEX] = PC08W04.PC08WRC4[PC08WCTR2];
          TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/
          /**/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr index*/
           /* PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;/* ===> incr index*/
          /**/
           /* END;                     /* ===> while DD * available to load*/
          /**/
          PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr index*/
          /**/
        else /* ===>Table TAR type not "J" or "E" or*/
                                   /* "P"*/
          /**/
          if (PC08T01.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/
            /**/
  /* IF PC08W01.XGPCD = '03';*/
            if ((PC08W00.PC08WPNM == "PC1221,"
             && PC08W01.XGPCD == "03") || 
            (PC08W00.PC08WPNM == "PC1231,"))
              /**/
              TA6REC.TARJCL[TA6INDEX] = "//OUT01  OUTPUT FORMDEF=PC15,PAGEDEF=PC15"; /* JCL output card*/
              TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
              /**/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
              PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
              /**/
            else
              /**/
              TA6REC.TARJCL[TA6INDEX] = "//OUT01  OUTPUT FORMDEF=PC14,PAGEDEF=PC14"; /* JCL output card*/
              TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
               /* MOVE PC08W00.PC08WJCO TA6REC.TARJCL(TA6INDEX);*/
                                  /* JCL output card*/
               /* MOVE 'O' TO TA6REC.TARTYPE(TA6INDEX);/* Type*/
              /**/
              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
              PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
              /**/
            end
            /**/
          else /* ===>TAR type not "J","E","P" or "O"*/
            /**/
            if (PC08T01.TARTYPE[PC08WIXT] == "D" /* Remote printer card*/
             && PC08W01.XGPCD == "03")           /* Apparel only*/
              /**/
              TA6REC.TA6SUBSW = "N";
                                   /* ===> display printer selection map*/
              TA6REC.XURDEST = "RMT999"; /* ===> print distrabution*/
              TA6REC.XURCOPY = 1; /* ===>number of copies*/
              PC08W00.PC08W-SAV-IDX = TA6INDEX;
                               /* save idx before displaying map*/
              /**/
              if (PC08W00.PC08WFLG1 != "Y")
                while (TA6REC.TA6RTNCD < "0")
                                   /* ===> Until subroutine completed*/
                  XPTA0P(); /* ===> Print Request Subroutine*/
                  PC08W00.PC08WFLG1 = "Y";
                end
              end
              /**/
              TA6INDEX = PC08W00.PC08W-SAV-IDX; /* reset index*/
              /**/
              /**/
               /* ---------------------------------------------------------*/
               /* If CANCEL was requested, clear the map fields and exit.*/
               /* ---------------------------------------------------------*/
              /**/
              /**/
              if (converseVar.eventKey is pa2) /* PA2 was pressed*/
                /**/
                converseLib.clearScreen();
                 /* m002 display storage*/
                /**/
                COMMAREA.CATOAP = " "; /* TO application*/
                COMMAREA.CAITEM = " "; /* Application data*/
                /**/
                exit stack; /* Exit to display map*/
                /**/
              end
              /**/
              /**/
              if (TA6REC.XURDEST == "RMT999" /* No printer selected*/
               && PC08W00.PC08W-PRT-FORM-FL == "P") /* Form print selected*/
                /**/
                FY1REC.XGPCD = VPOHDR02.XGPCD;
                FY1REC.FY1FCTYC = VPOHDR02.FY1FCTYC;
                PC08S24(); /* Get field office code*/
                /**/
                VFDOFC02.XGPCD = VPOHDR02.XGPCD;
                VFDOFC02.FY6FOCD = FY1REC.FY6FOCD;
                PC08S25(); /* Get field office printer*/
                /**/
                if (VFDOFC02.XROPDEST == " ")
                  /**/
                  PC08W00.XXXPRCNM = "PC08520";
                                   /* Module identification*/
                  set PC08M002.CAITEM cursor, bold; /* ===>set cursor*/
                  converseLib.validationFailed(557); /* Field office printer cd not setup*/
                  exit stack;
                  /**/
                else
                  /**/
                  PC08W00.PC08WRMT = VFDOFC02.XROPDEST;
                                /* Default field office printer cd*/
                end
                /**/
              else /* Rmt printer selected from TA0PM001*/
                /**/
                PC08W00.PC08WRMT = TA6REC.XURDEST;
                                /* Selected printer cd*/
                /**/
              end
              /**/
              if (PC08W00.PC08WRMT4 == " ")
                PC08W00.PC08WRMT4 = PC08W00.PC08WRMT;
              end
              if (PC08W01.XGPCD == "03")
                PC08W00.PC08WALN1 = "//REPT001  DD  DSN=PC.F1221.REPT.A1,";
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WALN1; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN18 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN18; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN19 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN19; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN20 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN20; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN21 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN21; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN3 = "//REPT002  DD  DSN=PC.F1221.REPT.A2,";
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN3; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN22 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN22; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN23 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN23; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN24 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN24; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN25 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN25; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN5 = "//P0020   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN5; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F1221.REPT.A3,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN6; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN13 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN13; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN14 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN14; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN15 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN15; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN16 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN16; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A2,DISP=SHR";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN7; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN8 = "//         DD  DSN=PC.F1221.REPT.A1,DISP=SHR";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN8; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN27 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN27; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN28 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN28; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/

                PC08W00.PC08WLN9 = "//P0030   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN9; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A3,DISP=SHR";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN10; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                 /* MOVE '//SYSUT2   DD  SYSOUT=A,DEST='*/
                 /* TO PC08W00.PC08WLN11;*/
                 /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT2;*/
                 /* MOVE 'RMT299' TO PC08W00.PC08WRMT2;*/
                           /* Selected printer cd*/
                 /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN12;*/
                PC08W00.PC08WLN11 = "//SYSUT2   DD  DUMMY";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD2; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN29 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN29; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN30 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN30; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                  /* Increment parms index*/
                /**/
                PC08W00.PC08WLN31 = "//P0040   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN31; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A1,DISP=SHR";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN32; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                if ((PC08W02.FY1FCTYC[PC08WCTR3] == "PHK" || 
                PC08W02.FY1FCTYC[PC08WCTR3] == "PHH") && 
                PC08W02.PC4ORTYP[PC08WCTR3] == "RD" && 
                TA6REC.XURDEST == "RMT999")

                  PC08W00.PC08WLN33 = "//SYSUT2   DD  DUMMY";
                  PC08W00.PC08WRMT3 = " ";
                  PC08W00.PC08WLN34 = " ";
                else
                  PC08W00.PC08WLN33 = "//SYSUT2   DD  SYSOUT=A,DEST=";
                   /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT3;*/
                   /* MOVE PC08W00.PC08WRMT TO PC08W00.PC08WRMT3;*/
                  PC08W00.PC08WRMT3 = PC08W00.PC08WRMT4;
                            /* Selected printer cd*/
                  PC08W00.PC08WLN34 = ",OUTPUT=*.OUT01";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD3; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN35 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN35; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN36 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN36; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                  /* Increment parms index*/
                /**/
              else
                /**/
                PC08W00.PC08WLN1 = "//REPT001  DD  SYSOUT=A,DEST=";
                PC08W00.PC08WLN2 = ",OUTPUT=*.OUT01";
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                             /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                             /* Increment parms index*/
                /**/
              end
            else /* ===>TAR type not "J","E","P","O","D"*/
              if (PC08T01.TARTYPE[PC08WIXT] == "D" /* Remote printer card*/
               && PC08W01.XGPCD == "02")           /* footwear*/
                /**/
                TA6REC.TA6SUBSW = "N";
                                   /* ===> display printer selection map*/
                TA6REC.XURDEST = "RMT999"; /**/
                                   /* ===> print distrabution*/
                TA6REC.XURCOPY = 1; /* ===>number of copies*/
                PC08W00.PC08W-SAV-IDX = TA6INDEX;
                               /* save idx before displaying map*/
                /**/
                if (PC08W00.PC08WFLG1 != "Y")
                  while (TA6REC.TA6RTNCD < "0")
                                   /* ===> Until subroutine completed*/
                    XPTA0P(); /* ===> Print Request Subroutine*/
                    if (PC08W00.PC08WRMT4 == " ")
                      PC08W00.PC08WRMT4 = TA6REC.XURDEST;
                    end
                    PC08W00.PC08WFLG1 = "Y";
                  end
                end
                /**/
                /**/
                TA6INDEX = PC08W00.PC08W-SAV-IDX; /* reset index*/
                /**/
                /**/
                /**/
               /* ---------------------------------------------------------*/
                 /* If CANCEL was requested, clear the map fields and exit.*/
                /**/
               /* ---------------------------------------------------------*/
                /**/
                /**/
                if (converseVar.eventKey is pa2) /* PA2 was pressed*/
                  /**/
                  converseLib.clearScreen();
                   /* m002 display storage*/
                  /**/
                  COMMAREA.CATOAP = " "; /* TO application*/
                  COMMAREA.CAITEM = " "; /* Application data*/
                  exit stack; /* Exit to display map*/
                end
                /**/
                 /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT;*/
                PC08W00.PC08WRMT = PC08W00.PC08WRMT4;
                                /* Selected printer cd*/
                /**/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WALN1 = "//P0010.REPT001  DD  DSN=PC.F3001.REPT.A1,";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WALN1 = "//P0010.REPT001  DD  DSN=PC.F3101.REPT.A1,";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WALN1 = "//P0010.REPT001  DD  DSN=PC.F1211.REPT.A1,";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WALN1 = "//P0010.REPT001  DD  DSN=PC.F1231.REPT.A1,";
                end
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WALN1; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN18 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN18; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN19 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN19; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN20 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN20; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                 /* Increment parms index*/
                /**/
                PC08W00.PC08WLN21 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN21; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                 /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
  /* MOVE '//REPT002  DD  DSN=PC.F1221.REPT.A2,' TO*/
  /* PC08W00.PC08WLN3;*/
                /**/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN3 = "//REPT002  DD  DSN=PC.F3001.REPT.A2,";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN3 = "//REPT002  DD  DSN=PC.F3101.REPT.A2,";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN3 = "//REPT002  DD  DSN=PC.F1211.REPT.A2,";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN3 = "//REPT002  DD  DSN=PC.F1231.REPT.A2,";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN3; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN22 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN22; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN23 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN23; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN24 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN24; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN25 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN25; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN5 = "//P0020   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN5; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
  /* MOVE '//SYSUT2   DD  DSN=PC.F1221.REPT.A3,'*/
  /* TO PC08W00.PC08WLN6;*/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F3001.REPT.A3,";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F3101.REPT.A3,";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F1211.REPT.A3,";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F1231.REPT.A3,";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN6; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN13 = "//         DISP=(NEW,CATLG,KEEP),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN13; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN14 = "//            UNIT=SYSDA,";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN14; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN15 = "//         SPACE=(82,(24,6),RLSE),";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN15; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                /**/
                PC08W00.PC08WLN16 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN16; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
  /* MOVE '//SYSUT1   DD  DSN=PC.F1221.REPT.A2,DISP=SHR'*/
  /* TO PC08W00.PC08WLN7;*/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F3001.REPT.A2,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F3101.REPT.A2,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F1211.REPT.A2,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F1231.REPT.A2,DISP=SHR";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN7; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
  /* MOVE '//         DD  DSN=PC.F1221.REPT.A1,DISP=SHR'*/
  /* TO PC08W00.PC08WLN8;*/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN8 = "//         DD  DSN=PC.F3001.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN8 = "//         DD  DSN=PC.F3101.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN8 = "//         DD  DSN=PC.F1211.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN8 = "//         DD  DSN=PC.F1231.REPT.A1,DISP=SHR";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN8; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN27 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN27; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN28 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN28; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/

                PC08W00.PC08WLN9 = "//P0030   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN9; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
  /* MOVE '//SYSUT1   DD  DSN=PC.F1221.REPT.A3,DISP=SHR'*/
  /* TO PC08W00.PC08WLN10;*/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F3001.REPT.A3,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F3101.REPT.A3,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F1211.REPT.A3,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F1231.REPT.A3,DISP=SHR";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN10; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                 /* MOVE '//SYSUT2   DD  SYSOUT=A,DEST='*/
                 /* TO PC08W00.PC08WLN11;*/
                 /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT2;*/
                 /* MOVE 'RMT299' TO PC08W00.PC08WRMT2;*/
                           /* Selected printer cd*/
                 /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN12;*/
                PC08W00.PC08WLN11 = "//SYSUT2   DD  DUMMY";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD2; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN29 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN29; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN30 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN30; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                  /* Increment parms index*/
                /**/
                PC08W00.PC08WLN31 = "//P0040   EXEC PGM=NKEGENER";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN31; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
  /* MOVE '//SYSUT1   DD  DSN=PC.F1221.REPT.A1,DISP=SHR'*/
  /* TO PC08W00.PC08WLN32;*/
                if (PC08W00.PC08WPNM == "PC3001,")
                  PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F3001.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC3101,")
                  PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F3101.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1211,")
                  PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F1211.REPT.A1,DISP=SHR";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F1231.REPT.A1,DISP=SHR";
                end
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN32; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                               /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* Increment parms index*/
                /**/
                PC08W00.PC08WLN33 = "//SYSUT2   DD  SYSOUT=A,DEST=";
                 /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT3;*/
                 /* MOVE PC08W00.PC08WRMT TO PC08W00.PC08WRMT3;*/
                PC08W00.PC08WRMT3 = PC08W00.PC08WRMT4;
                            /* Selected printer cd*/
                PC08W00.PC08WLN34 = ",OUTPUT=*.OUT01";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD3; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN35 = "//SYSIN DD *";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN35; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                /* Increment parms index*/
                /**/
                PC08W00.PC08WLN36 = "//SYSPRINT DD SYSOUT=*";
                TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN36; /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                /* Increment table index*/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                  /* Increment parms index*/
                /**/
                 /* commented out by vsanka for testing*/
                                  /* MOVE '//REPT001  DD  SYSOUT=A,DEST='*/
                                   /* TO PC08W00.PC08WLN1;*/
                 /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN2;*/
                 /* ;*/
                 /* MOVE PC08W00.PC08WJCD TO TA6REC.TARJCL(TA6INDEX);/* JCL*/
                 /* MOVE ' ' TO TA6REC.TARTYPE(TA6INDEX);/* Type*/
                 /* ;*/
                 /* PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;*/
                                  /* Increment table index*/
                 /* TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;*/
                                  /* Increment parms index*/
                /**/
              else /* ===>TAR type not "J","E","P","O","D"*/
                /**/
                /**/
                /**/
            /* ------------------------------------------------------------*/
                     /* Load the JCL W.S. Table Statement*/
                /**/
                 /* Load the current JCL statement from the JCL W.S. Table*/
                 /* to the record used by the JCL submit subroutine.*/
                /**/
            /* ------------------------------------------------------------*/
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT];
                                   /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];
                /**/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
                /**/
                /**/
              end /* ===>Table TAR type check "D"*/
            end /* ===>Table TAR type check "D"*/
            /**/
            /**/
          end /* ===>Table TAR type check "O"*/
          /**/
          /**/
        end /* ===>Table TAR type check "P"*/
        /**/
        /**/
      end /* ===>Table TAR type check "E"*/
      /**/
      /**/
    end /* ===>Table TAR type check "J"*/
    /**/
    /**/
  end /* ===> while not '/*EOF'; End of table*/

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC08T01.TARJCL[PC08WIXT] == "/*EOF") /* ===> End of table*/
    /**/
    TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];
    /**/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr. JCL stmt index*/
    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  if (PC08W04.XGPCD == "03")
    TA6REC.TA6SUBSW = "S"; /* ===> Tailor & submit JCL*/
    TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job switch*/
    TA6REC.TA6RTNCD = " "; /* Initialize return code*/
  else
    TA6REC.TA6SUBSW = "S"; /* ===> Tailor & submit JCL*/
                                  /* MOVE 'Y' TO TA6REC.TA6SUBSW;   /**/
                                   /* ===> Display map, Tailor & submit JCL*/
    TA6REC.TA6RTNCD = " "; /* Initialize return code*/
    TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job switch*/
     /* MOVE 'Y' TO TA6REC.TA6MSGSW;   /* ===> Set the End-of-Job switch*/
  end

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
    PC08W00.PC08WFLG1 = "Y";
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/
    /**/
    PC08M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> job info message*/
    PC08M002.XXXPRCNM = "PC08520"; /* ===> Process name*/
    set PC08M002 alarm; /* ===> alarm*/
    return; /* ===> Return to previous process*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/
    /**/
    converseLib.validationFailed(86); /* ===> Cancelled by user*/
    PC08W00.XXXPRCNM = "PC08520"; /* ===> Process name*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* ===> Indicate system error*/
    PC08W00.XXXPRCNM = "PC08520"; /* ===> Process name*/
    exit stack;
    /**/
  end

   /* **                                                        ***/
   /* ********************** End of PC08520 ***********************/
end // end PC08520

// Set-up & submit the devl JCL
Function PC08521()
   /* ------------------------------------------------------------*/
     /* Set-up and Submit the JCL Built from this module by*/
       /* formatting the JCL statements and DD * cards into*/
       /* into the subroutine work area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* ===> Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* ===> Initialize parameters index*/
  PC08W00.PC08WIXT = 1; /* ===> Initialize JCL W.S. Table index*/

  while (PC08T11.TARJCL[PC08WIXT] != "            /*EOF" /* ===> End of table*/
   && TA6REC.TA6INDEX < 100) /* ===> max JCL stmt index*/
    /**/
    if (PC08T11.TARTYPE[PC08WIXT] == "J") /* ===> Job card statement*/
      /**/
      TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCJ; /* JCL Exec card*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/
      /**/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
      /**/
    else /* ===>Table TAR type not "J"*/
      /**/
      if (PC08T11.TARTYPE[PC08WIXT] == "E") /* ===> Execute statement*/
        /**/
        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCE; /* JCL Exec card*/
        TA6REC.TARTYPE[TA6INDEX] = "E"; /* Type*/
        /**/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
        /**/
      else /* ===>Table TAR type not "J" or "E"*/
        if (PC08T11.TARTYPE[PC08WIXT] == "V")
          if (PC08W00.PC08WPNM == "PC3001,")
            TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC300D)";
          else
            if (PC08W00.PC08WPNM == "PC3101,")
              TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC310D)";
            else
              if (PC08W00.PC08WPNM == "PC1211,")
                TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC121D)";
              else
                if (PC08W00.PC08WPNM == "PC1221,")
                  TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC122D)";
                end
                if (PC08W00.PC08WPNM == "PC1231,")
                  TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC122D)";
                end
              end
            end
          end
          TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/
          /**/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
          PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
        else /* ===>Table TAR type not "J" or "E"*/
          if (PC08T11.TARTYPE[PC08WIXT] == "P") /* Parameter statement*/
            /**/
            /**/
            /* ------------------------------------------------------------*/
                           /* Load the DD *  Cards*/
            /**/
             /* Load the DD * cards, formatted in the pass record W.S area,*/
             /* to the record used by the JCL submit subroutine.*/
            /**/
            /* ------------------------------------------------------------*/
            /**/
             /* MOVE 1 TO PC08W00.PC08WIX1;/* ===> init temp load index*/
            /**/
             /* WHILE PC08W00.PC08WIX1 LE 70/* ==> max DD * for JCL*/
                                  /* AND PC08W04.XGPCD(PC08WIX1) GT ' ';/**/
                                   /* ===> DD * card to load*/
            /**/
            TA6REC.TA6ROW[TA6INDEX] = PC08W04.PC08WRC4[PC08WCTR2];
            TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/
            /**/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
             /* PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;*/
                                   /* ===> incr. temp index*/
            /**/
             /* END;                   /* ===> while DD * available to load*/
            /**/
            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
            /**/
          else /* ===>Table TAR type not "J" or "E" or*/
                                   /* "P"*/
            /**/
            if (PC08T11.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/
              /**/
              if ((PC08W00.PC08WPNM == "PC1221,"
               && PC08W01.XGPCD == "03") || 
              (PC08W00.PC08WPNM == "PC1231,"))
  /* AND PC08T02.PC08TKEY = '02FT')*/

                /**/
                /**/
                TA6REC.TARJCL[TA6INDEX] = "//OUT01   OUTPUT  FORMDEF=PC15,PAGEDEF=PC15"; /* JCL output card*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                /**/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                  /* ==> incr JCL table index*/
                /**/
              else
                /**/
                TA6REC.TARJCL[TA6INDEX] = "//OUT01   OUTPUT  FORMDEF=PC14,PAGEDEF=PC14"; /* JCL output card*/
                TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                 /* MOVE PC08W00.PC08WJCO TA6REC.TARJCL(TA6INDEX);*/
                                  /* JCL output card*/
                 /* MOVE 'O' TO TA6REC.TARTYPE(TA6INDEX);/* Type*/
                /**/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                  /* ==> incr JCL table index*/
              end
              /**/
            else /* ===>TAR type not "J","E","P" or "O"*/
              /**/
              if (PC08T11.TARTYPE[PC08WIXT] == "D") /* ===> rept  statement*/
  /* RDD*/
                 /* from here*/
                TA6REC.TA6SUBSW = "N";
                                   /* ===> display printer selection map*/
                TA6REC.XURDEST = "RMT999";
                                   /* ===> print distrabution*/
                TA6REC.XURCOPY = 1;
                                   /* ===>number of copies*/
                PC08W00.PC08W-SAV-IDX = TA6INDEX;
                               /* save idx before displaying map*/
                /**/
                  /* IF PC08W01.XGPCD ^= '03';*/
                    /* WHILE TA6REC.TA6RTNCD LT '0';*/
                      /* ; /* ===> Until subroutine completed*/
                      /* PERFORM XPTA0P;/* ===> Print Request Subroutine*/
                    /* END;*/
                  /* END;*/
                  /* IF PC08W01.XGPCD = '03';*/
                if (PC08W00.PC08WFLG1 != "Y")
                  while (TA6REC.TA6RTNCD < "0")
                      /* ===> Until subroutine completed*/
                    XPTA0P(); /* ===> Print Request Subroutine*/
                    PC08W00.PC08WFLG1 = "Y";
                  end
                end
                  /* END;*/
                /**/
                TA6INDEX = PC08W00.PC08W-SAV-IDX;
                                   /* reset index*/
                /**/
                /**/
                /**/
               /* ---------------------------------------------------------*/
                                  /* If CANCEL was requested, clear the*/
                                   /* map fields and exit.*/
                /**/
               /* ---------------------------------------------------------*/
                /**/
                /**/
                if (converseVar.eventKey is pa2) /* PA2 was pressed*/
                  /**/
                  converseLib.clearScreen();
                   /* m002 display storage*/
                  /**/
                  COMMAREA.CATOAP = " ";
                                   /* TO application*/
                  COMMAREA.CAITEM = " ";
                                   /* Application data*/
                  exit stack; /* Exit to display map*/
                end
                /**/
                                  /* / to here - if condition to check if*/
                                   /* map has been thrown*/
                if (PC08W00.PC08WRMT4 == " ")
                  PC08W00.PC08WRMT4 = TA6REC.XURDEST;
                end
                if (PC08W01.XGPCD == "03"
                 || PC08W01.XGPCD == "02")
                   /* AND (PC08W01.PC08MTYP = 'SS'*/
                   /* OR PC08W01.PC08MTYP = 'CR'*/
                   /* OR PC08W01.PC08MTYP = 'PS');*/
                  /**/
  /* MOVE '//REPT001  DD  DSN=T.PC.F1221.REPT.A1,' TO*/
  /* PC08W00.PC08WALN1;*/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F3001.REPT.A1,";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F3101.REPT.A1,";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F1211.REPT.A1,";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F1221.REPT.A1,";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F1231.REPT.A1,";
                  end
                  /**/
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WALN1; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN18 = "//         DISP=(NEW,CATLG,KEEP),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN18; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN19 = "//            UNIT=SYSDA,";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN19; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN20 = "//         SPACE=(82,(24,6),RLSE),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN20; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN21 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN21; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
  /* MOVE '//REPT002  DD  DSN=T.PC.F1221.REPT.A2,' TO*/
  /* PC08W00.PC08WLN3;*/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F3001.REPT.A2,";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F3101.REPT.A2,";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F1211.REPT.A2,";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F1221.REPT.A2,";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F1231.REPT.A2,";
                  end
                  /**/
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN3; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN22 = "//         DISP=(NEW,CATLG,KEEP),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN22; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN23 = "//            UNIT=SYSDA,";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN23; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN24 = "//         SPACE=(82,(24,6),RLSE),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN24; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN25 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN25; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN5 = "//P0020   EXEC PGM=NKEGENER";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN5; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F3001.REPT.A3,";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F3101.REPT.A3,";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F1211.REPT.A3,";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F1221.REPT.A3,";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F1231.REPT.A3,";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN6; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN13 = "//         DISP=(NEW,CATLG,KEEP),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN13; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN14 = "//            UNIT=SYSDA,";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN14; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN15 = "//         SPACE=(82,(24,6),RLSE),";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN15; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN16 = "//          DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN16; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
  /* MOVE '//SYSUT1   DD  DSN=T.PC.F1221.REPT.A2,DISP=SHR'*/
  /* TO PC08W00.PC08WLN7;*/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F3001.REPT.A2,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F3101.REPT.A2,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F1211.REPT.A2,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A2,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F1231.REPT.A2,DISP=SHR";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN7; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
  /* MOVE '//         DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR'*/
  /* TO PC08W00.PC08WLN8;*/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F3001.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F3101.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F1211.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F1231.REPT.A1,DISP=SHR";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN8; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN27 = "//SYSIN DD *";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN27; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN28 = "//SYSPRINT DD SYSOUT=*";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN28; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/

                  PC08W00.PC08WLN9 = "//P0030   EXEC PGM=NKEGENER";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN9; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F3001.REPT.A3,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F3101.REPT.A3,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F1211.REPT.A3,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A3,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F1231.REPT.A3,DISP=SHR";
                  end
  /* MOVE '//SYSUT1   DD  DSN=T.PC.F1221.REPT.A3,DISP=SHR'*/
  /* TO PC08W00.PC08WLN10;*/
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN10; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                   /* MOVE '//SYSUT2   DD  SYSOUT=A,DEST='*/
                   /* TO PC08W00.PC08WLN11;*/
                  PC08W00.PC08WLN11 = "//SYSUT2   DD  DUMMY";
                   /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT2;*/
                   /* MOVE 'RMT299' TO PC08W00.PC08WRMT2;*/
                               /* Selected printer cd*/
                   /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN12;*/
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD2; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN29 = "//SYSIN DD *";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN29; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN30 = "//SYSPRINT DD SYSOUT=*";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN30; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN31 = "//P0040   EXEC PGM=NKEGENER";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN31; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                     /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                     /* Increment parms index*/
                  /**/
  /* MOVE '//SYSUT1   DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR'*/
  /* TO PC08W00.PC08WLN32;*/
                  if (PC08W00.PC08WPNM == "PC3001,")
                    PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F3001.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC3101,")
                    PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F3101.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1211, ")
                    PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F1211.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1221, ")
                    PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR";
                  end
                  if (PC08W00.PC08WPNM == "PC1231, ")
                    PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F1231.REPT.A1,DISP=SHR";
                  end
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN32; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                     /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                     /* Increment parms index*/
                  /**/
                  if ((PC08W02.FY1FCTYC[PC08WCTR3] == "PHK" || 
                  PC08W02.FY1FCTYC[PC08WCTR3] == "PHH") && 
                  PC08W02.PC4ORTYP[PC08WCTR3] == "RD" && 
                  PC08W00.PC08WRMT4 == "RMT999")

                    PC08W00.PC08WLN33 = "//SYSUT2   DD  DUMMY";
                    PC08W00.PC08WRMT3 = " ";
                    PC08W00.PC08WLN34 = " ";
                  else
                    PC08W00.PC08WLN33 = "//SYSUT2   DD  SYSOUT=A,DEST=";
                     /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT3;*/
                    PC08W00.PC08WRMT3 = PC08W00.PC08WRMT4;
                    PC08W00.PC08WLN34 = ",OUTPUT=*.OUT01";
                  /* Selected printer cd*/
                  end
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD3;
                                   /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                      /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                      /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN35 = "//SYSIN DD *";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN35; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                      /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                      /* Increment parms index*/
                  /**/
                  PC08W00.PC08WLN36 = "//SYSPRINT DD SYSOUT=*";
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WLN36; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                      /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                            /* Increment parms index*/
                  /**/
                else
                   /* MOVE TA6REC.XURDEST TO PC08W00.PC08WRMT;*/
                  PC08W00.PC08WRMT = PC08W00.PC08WRMT4;
                           /* Selected printer cd*/
                  /**/
                  PC08W00.PC08WLN1 = "//REPT001  DD  SYSOUT=A,DEST=";
                  PC08W00.PC08WLN2 = ",OUTPUT=*.OUT01";
                  /**/
                  TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCD; /* JCL*/
                  TA6REC.TARTYPE[TA6INDEX] = " "; /* Type*/
                  /**/
                  PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* Increment table index*/
                  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                              /* Increment parms index*/
                  /**/
                end

              else /* ===>TAR type not "J","E","P","O","R"*/
                /**/
            /* ------------------------------------------------------------*/
                     /* Load the JCL W.S. Table Statement*/
                /**/
                 /* Load the current JCL statement from the JCL W.S. Table*/
                 /* to the record used by the JCL submit subroutine.*/
                /**/
            /* ------------------------------------------------------------*/
                /**/
                TA6REC.TARJCL[TA6INDEX] = PC08T11.TARJCL[PC08WIXT];
                                   /* JCL*/
                TA6REC.TARTYPE[TA6INDEX] = PC08T11.TARTYPE[PC08WIXT];
                /**/
                TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
                PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
                /**/
                /**/
              end /* ===>Table TAR type check "D"*/
              /**/
            end /* ===>Table TAR type check "O"*/
            /**/
            /**/
          end /* ===>Table TAR type check "P"*/
          /**/
          /**/
        end /* ===>Table TAR type check "E"*/
      end /* ===>Table TAR type check "E"*/
      /**/
      /**/
    end /* ===>Table TAR type check "J"*/
    /**/
    /**/
  end /* ===> while not '/*EOF'; End of table*/

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC08T11.TARJCL[PC08WIXT] == "/*EOF") /* ===> End of table*/
    /**/
    TA6REC.TARJCL[TA6INDEX] = PC08T11.TARJCL[PC08WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC08T11.TARTYPE[PC08WIXT];
    /**/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr. JCL stmt index*/
    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* request for*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " ";
  TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job switch*/
  if (PC08W00.PC08WPNM == "PC1221,"
   && PC08W01.XGPCD == "03")
    /**/
    TA6REC.TA6SUBSW = "S"; /* ===> Tailor & submit JCL*/
    /**/
  else
    /**/
    TA6REC.TA6SUBSW = "S"; /* ===> Display map, Tailor & submit JCL*/
    /**/
  end

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
      /* ;*/
    XPTA0P(); /* ===> Print Request Subroutine*/
    PC08W00.PC08WFLG1 = "Y";
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/
    /**/
    PC08M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> job info message*/
    PC08M002.XXXPRCNM = "PC08521"; /* ===> Process name*/
    set PC08M002 alarm; /* ===> alarm*/
    return; /* ===> Return to previous process*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/
    /**/
    converseLib.validationFailed(86); /* ===> Cancelled by user*/
    PC08W00.XXXPRCNM = "PC08521"; /* ===> Process name*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* ===> Indicate system error*/
    PC08W00.XXXPRCNM = "PC08521"; /* ===> Process name*/
    exit stack;
    /**/
  end

   /* **                                                        ***/
   /* ********************** End of PC08521 ***********************/
end // end PC08521

// Do P.O. Header updates
Function PC08530()
   /* ------------------------------------------------------------*/
   /* - Do Header update for the print indicaters*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* Initialize line index*/

  while (PC08W00.PC08WIXM <= 13 /* Until end of lines*/
   && PC08W02.XGPCD[PC08WIXM] > " ")

    if (PC08M002.PC08MSEL[PC08WIXM] == "P" /* ===> print requested*/
     || PC08M002.PC08MSEL[PC08WIXM] == "G")

      /* ------------------------------------------------------------*/
       /* - If current Header row in T.S. indicater is not 'P'*/
         /* the header might need to be updated*/
         /* - select a header row*/
           /* if indicator on selected header row is the same as*/
             /* the indicator saved in the T.S. Row*/
             /* - no update the header row is needed.*/
           /* if indicator on selected header row not the same as*/
             /* the indicator saved in the T.S. Row*/
             /* - update header row as needed.*/
      /* ------------------------------------------------------------*/

      if (PC08W02.PC3PRTIN[PC08WIXM] != "P")

        set VPOHDR02 empty;
        set PCYREC empty;

        VPOHDR02.XGPCD = PC08W02.XGPCD[PC08WIXM]; /* ===> GPC*/
        VPOHDR02.PO-REG-CD = PC08W02.PO-REG-CD[PC08WIXM];
                                   /* ===> P.O. REG CODE*/
        VPOHDR02.PC3PONBR = PC08W02.PC3PONBR[PC08WIXM];
                                   /* ===> P.O. number*/

        PC08S80(); /* ====================> Select Unique*/
                                   /* header row*/

        /* ------------------------------------------------------------*/
             /* if indicator on selected header row is the same as*/
               /* the indicator saved in the T.S. Row*/
        /* ------------------------------------------------------------*/

        if (VPOHDR02.PC3PRTIN == PC08M002.PC08MSEL[PC08WIXM])

          /* ============ Next Sentence ================>*/

        else /* ===> update might be needed*/

          /* ------------------------------------------------------------*/
               /* Indicator on selected header row not the same as*/
                 /* the indicator saved in the T.S. Row*/
          /* ------------------------------------------------------------*/

          if (VPOHDR02.PC3PRTIN == "P")

            /* ============ Next Sentence ================>*/

          else

            if (VPOHDR02.PC3PRTIN == "G"
             && PC08M002.PC08MSEL[PC08WIXM] == "P")

              VPOHDR02.PC3PRTIN = "P";

              PC08S81(); /* ====================> Update Unique*/
                                   /* header row*/

              PC08M002.PC08MPRT[PC08WIXM] = PC08M002.PC08MSEL[PC08WIXM];
              PC08W02.PC3PRTIN[PC08WIXM] = PC08M002.PC08MSEL[PC08WIXM];

            end /* ===>"P" requested and "G" on header*/

            if (VPOHDR02.PC3PRTIN == " ")
              VPOHDR02.PC3PRTIN = PC08M002.PC08MSEL[PC08WIXM];

              PC08S81(); /* ====================> Update Unique*/
                                   /* header row*/

              PC08M002.PC08MPRT[PC08WIXM] = PC08M002.PC08MSEL[PC08WIXM];
              PC08W02.PC3PRTIN[PC08WIXM] = PC08M002.PC08MSEL[PC08WIXM];

            /* ------------------------------------------------------------*/
                /* Decriment the counter for the number of " " print*/
                /* indicators which isused with the PF20 function key.*/

            /* ------------------------------------------------------------*/

              PC08W00.PC08WCTR = PC08W00.PC08WCTR - 1;
                                   /* ====> incr. counter*/

            end /* ===> " " on header & print requested*/

          end /* ====> T.S. ind. NE Header ind.*/

        end
      end /* ===> print request was selected*/

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/

                   /* COMMIT ALL DATA BASE UPDATES*/

   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* ===> commit all updates*/

   /* **                                                        ***/
   /* ********************** End of PC08530 ***********************/
end // end PC08530

// load UPC form pass records
Function PC08540()
   /* ------------------------------------------------------------*/
   /* - Do load DD * cards/data to the W.S. pass record*/
   /* (01/13/93 change - load UPC parm data to the pass record*/
   /* for all other factories except MEMPHIS)*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* Initialize line index*/
  PC08W00.PC08WIX1 = 1; /* Initialize temp load index*/

  while (PC08W00.PC08WIXM <= 13) /* Until end of lines*/

    if (PC08M002.PC08MSEL[PC08WIXM] == "P"
     && PC08W02.FY1FCTYC[PC08WIXM] != "MEM") /* skip if MEM*/

      PC08W05.XGPCD[PC08WIX1] = PC08W02.XGPCD[PC08WIXM];
      PC08W05.PCFSECD[PC08WIX1] = VPOITM06.PCFSECD;
      PC08W05.FY1FCTYC[PC08WIX1] = PC08W02.FY1FCTYC[PC08WIXM];
      PC08W05.PC08WPON[PC08WIX1] = PC08W02.PC3PONBR[PC08WIXM];
      PC08W05.PC4ORTYP[PC08WIX1] = PC08W02.PC4ORTYP[PC08WIXM];
     /* MOVE PC08W02.SY1STNBR(PC08WIXM) TO PC08W05.SY1STNBR(PC08WIX1);*/
      PC08W05.PC08WABS[PC08WIX1] = " ";

      PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* Increment temp load index*/

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08540 ***********************/
end // end PC08540

// PROCESS THE PROD JCL
Function PC08541()
   /* ------------------------------------------------------------*/
   /* CREATE THE prod JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC08W00.PC08WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXT > 0) /* Until end of table*/

    if (PC08T03.TARTYPE[PC08WIXT] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PC08W00.PC08WIX1 = 1; /* ===> init temp load index*/

      while (PC08W00.PC08WIX1 <= 70 /* ==> max DD * for JCL*/
       && PC08W05.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

        TA6REC.TARJCL[TA6INDEX] = PC08W05.PC08WJCL[PC08WIX1];
        TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      end /* ===> while DD * available to load*/

    else

      if (PC08T03.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

        PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
        PC08W00.PC08WFM1 = "PC59"; /* ==>Form code*/
        PC08W00.PC08WFM2 = "PC59"; /* ==>Form code*/
        PC08W00.PC08WFR1 = "/*OUTPUT  ";
        PC08W00.PC08WFR2 = " FORMS=";
        PC08W00.PC08WFR3 = ",";
        PC08W00.PC08WDS1 = "COPIES=1,DEST=";
        if (TA0PM001.XURDEST in PC08T04.PC08TKEY-PO-RMT)
          PC08W00.PC08WDS2 = PC08T04.PC08TUPC-RMT[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          PC08W00.PC08WDS2 = "RMT49";
        end

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC08T03.TARJCL[PC08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC08T03.TARTYPE[PC08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC08T03.TARJCL[PC08WIXT] == "/*EOF") /* End of table*/

      PC08W00.PC08WIXT = 0; /* Indicate end of table*/

    else

      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC08S55(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If print was successful*/
    /* next sentence*/
  else
    PC08M002.XXXPRCNM = "PC08541"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/
    exit stack;
  end

end // end PC08541

// PROCESS THE test JCL
Function PC08542()
   /* ------------------------------------------------------------*/
   /* CREATE THE test JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC08W00.PC08WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXT > 0) /* Until end of table*/

    if (PC08T33.TARTYPE[PC08WIXT] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PC08W00.PC08WIX1 = 1; /* ===> init temp load index*/

      while (PC08W00.PC08WIX1 <= 70 /* ==> max DD * for JCL*/
       && PC08W05.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

        TA6REC.TARJCL[TA6INDEX] = PC08W05.PC08WJCL[PC08WIX1];
        TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      end /* ===> while DD * available to load*/

    else /* ===>Table TAR type not "J" or "E" or*/
                              /* "P"*/
      if (PC08T33.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

        PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
        PC08W00.PC08WFM1 = "PC59"; /* ==>Form code*/
        PC08W00.PC08WFM2 = "PC59"; /* ==>Form code*/
        PC08W00.PC08WFR1 = "/*OUTPUT  ";
        PC08W00.PC08WFR2 = " FORMS=";
        PC08W00.PC08WFR3 = ",";
        PC08W00.PC08WDS1 = "COPIES=1,DEST=";
        if (TA0PM001.XURDEST in PC08T04.PC08TKEY-PO-RMT)
          PC08W00.PC08WDS2 = PC08T04.PC08TUPC-RMT[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          PC08W00.PC08WDS2 = "RMT49";
        end

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
                             /* JCL output card*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* ===> incr JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* ==> incr JCL table index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC08T33.TARJCL[PC08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC08T33.TARTYPE[PC08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC08T33.TARJCL[PC08WIXT] == "/*EOF") /* End of table*/

      PC08W00.PC08WIXT = 0; /* Indicate end of table*/

    else

      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC08S55(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If print was successful*/
    /* next sentence*/
  else
    PC08M002.XXXPRCNM = "PC08542"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/
    exit stack;
  end

end // end PC08542

// PROCESS PTO PROD JCL
Function PC08543()
   /* ------------------------------------------------------------*/
   /* CREATE THE prod JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC08W00.PC08WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXT > 0) /* Until end of table*/

    if (PC08T05.TARTYPE[PC08WIXT] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PC08W00.PC08WIX1 = 1; /* ===> init temp load index*/

      while (PC08W00.PC08WIX1 <= 70 /* ==> max DD * for JCL*/
       && PC08W06.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

        TA6REC.TARJCL[TA6INDEX] = PC08W06.PC08WJCL[PC08WIX1];
        TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      end /* ===> while DD * available to load*/

    else

      if (PC08T05.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

        PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
        PC08W00.PC08WFM1 = "PC57"; /* ==>Form code*/
        PC08W00.PC08WFM2 = "PC57"; /* ==>Form code*/
        PC08W00.PC08WFR1 = "/*OUTPUT  ";
        PC08W00.PC08WFR2 = " FORMS=";
        PC08W00.PC08WFR3 = ",";
        PC08W00.PC08WDS1 = "COPIES=1,DEST=";
        if (TA0PM001.XURDEST in PC08T04.PC08TKEY-PO-RMT)
          PC08W00.PC08WDS2 = PC08T04.PC08TUPC-RMT[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          PC08W00.PC08WDS2 = "RMT49";
        end

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC08T05.TARJCL[PC08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC08T05.TARTYPE[PC08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC08T05.TARJCL[PC08WIXT] == "/*EOF") /* End of table*/

      PC08W00.PC08WIXT = 0; /* Indicate end of table*/

    else

      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC08S55(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If print was successful*/
    /* next sentence*/
  else
    PC08M002.XXXPRCNM = "PC08543"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/
    exit stack;
  end

end // end PC08543

// PROCESS PTO TEST JCL
Function PC08544()
   /* ------------------------------------------------------------*/
   /* CREATE THE TEST JCL*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC08W00.PC08WIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC08W00.PC08WIXT > 0) /* Until end of table*/

    if (PC08T55.TARTYPE[PC08WIXT] == "P") /* Parameters statement*/
      /* ------------------------------------------------------------*/
                       /* Load the DD *  Cards*/

       /* Load the DD * cards, formatted in the pass record W.S area,*/
       /* to the record used by the JCL submit subroutine.*/
      /* ------------------------------------------------------------*/

      PC08W00.PC08WIX1 = 1; /* ===> init temp load index*/

      while (PC08W00.PC08WIX1 <= 70 /* ==> max DD * for JCL*/
       && PC08W06.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

        TA6REC.TARJCL[TA6INDEX] = PC08W06.PC08WJCL[PC08WIX1];
        TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr index*/
        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* ===> incr index*/
      end /* ===> while DD * available to load*/

    else /* ===>Table TAR type not "J" or "E" or*/
                              /* "P"*/
      if (PC08T55.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

        PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
        PC08W00.PC08WFM1 = "PC57"; /* ==>Form code*/
        PC08W00.PC08WFM2 = "PC57"; /* ==>Form code*/
        PC08W00.PC08WFR1 = "/*OUTPUT  ";
        PC08W00.PC08WFR2 = " FORMS=";
        PC08W00.PC08WFR3 = ",";
        PC08W00.PC08WDS1 = "COPIES=1,DEST=";
        if (TA0PM001.XURDEST in PC08T04.PC08TKEY-PO-RMT)
          PC08W00.PC08WDS2 = PC08T04.PC08TUPC-RMT[sysVar.arrayIndex];
        end
        if (sysVar.arrayIndex == 0)
          PC08W00.PC08WDS2 = "RMT49";
        end

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
                             /* JCL output card*/
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                               /* ===> incr JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                              /* ==> incr JCL table index*/
      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC08T55.TARJCL[PC08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PC08T55.TARTYPE[PC08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC08T55.TARJCL[PC08WIXT] == "/*EOF") /* End of table*/

      PC08W00.PC08WIXT = 0; /* Indicate end of table*/

    else

      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC08S55(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If print was successful*/
    /* next sentence*/
  else
    PC08M002.XXXPRCNM = "PC08544"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/
    exit stack;
  end

end // end PC08544

// load PTO form pass records
Function PC08545()
   /* ------------------------------------------------------------*/
   /* - Do load DD * cards/data to the W.S. pass record for PTO*/
   /* parm data*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1; /* Initialize line index*/
  PC08W00.PC08WIX1 = 1; /* Initialize temp load index*/

  while (PC08W00.PC08WIXM <= 13) /* Until end of lines*/

    if (PC08M002.PC08MSEL[PC08WIXM] == "P"
    )
      PC08W06.XGPCD[PC08WIX1] = PC08W02.XGPCD[PC08WIXM];
      PC08W06.PCFSECD[PC08WIX1] = VPOITM06.PCFSECD;
      PC08W06.FY1FCTYC[PC08WIX1] = PC08W02.FY1FCTYC[PC08WIXM];
      PC08W06.PC08WPON[PC08WIX1] = PC08W02.PC3PONBR[PC08WIXM];
      PC08W06.PC4ORTYP[PC08WIX1] = PC08W02.PC4ORTYP[PC08WIXM];
      PC08W06.PC08WABS[PC08WIX1] = " ";

      PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1; /* Increment temp load index*/

    end

    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC08545 ***********************/
end // end PC08545

// check if PTO allowed
Function PC08546()
   /* ------------------------------------------------------------*/
  if (VPOITM06.PC4ORTYP == "MD"
   || VPOITM06.PC4ORTYP == "MM"
   || VPOITM06.PC4ORTYP == "DS"
   || VPOITM06.PC4ORTYP == "DC")
    PC08547(); /* check handle codes on sales order*/
  else
    PC08W00.PC08WHDL = " ";
    PC08W00.XXXPRCNM = "PC08546"; /* Module identification*/
    set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(525); /* Indicate invalid so handles*/
  end

   /* ------------- End of PC08546 -------------------------------*/
end // end PC08546

// validate handles
Function PC08547()
   /* ------------------------------------------------------------*/

  OP2REC.OP1PARTN = VPOITM06.OP1PARTN;
  OP2REC.OP1CUOID = VPOITM06.OP1CUOID;
  OP2REC.OP1NORID = VPOITM06.OP1NORID;
  OP2REC.SY1STNBR = VPOITM06.SY1STNBR;
  OP2REC.SY2CLRID = VPOITM06.SY2CLRID;
  OP2REC.XDMCD = VPOITM06.XDMCD;
  OP2REC.OP2CGPCD = " ";

  call "IO0440" ("SA", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
      if (OP2REC.XHDCD[1] == "LBL"
       || OP2REC.XHDCD[1] == "FLB"
       || OP2REC.XHDCD[2] == "LBL"
       || OP2REC.XHDCD[2] == "FLB"
       || OP2REC.XHDCD[3] == "LBL"
       || OP2REC.XHDCD[3] == "FLB"
       || OP2REC.XHDCD[4] == "LBL"
       || OP2REC.XHDCD[4] == "FLB"
       || OP2REC.XHDCD[5] == "LBL"
       || OP2REC.XHDCD[5] == "FLB")
        return;
      else
        PC08W00.PC08WHDL = " ";
        PC08W00.XXXPRCNM = "PC08547"; /* Module identification*/
        set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(525); /* Indicate invalid so handles*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        PC08W00.PC08WHDL = " ";
        PC08W00.XXXPRCNM = "PC08547"; /* Module identification*/
        set PC08M002.PC08MSEL[PC08WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(70); /* Indicate missing or invalid*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC08M002.XXXPRCNM = "PC08547";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC08M002.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM001"; /* Table view name*/
  TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08547 ***********************/
end // end PC08547

// ===>Do JCL Job submit <PF20>
Function PC08600()
   /* ------------------------------------------------------------*/
   /* Process JCL JOB submit.*/
   /* Check print confirmation flag*/
     /* if not set*/
       /* - set flag, build message, return to display message*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WPFL == "N") /* ===> print confirmation flag*/

    PC08W00.PC08WPFL = "Y"; /* ==>print flag confirm flag*/

    PC08W00.PC08WJOB = PC08W00.PC08WCTR / PC08W00.PC08WMAX;
    PC08W00.PC08WRMD = PC08W00.PC08WCTR % PC08W00.PC08WMAX;
    if (PC08W00.PC08WRMD > 0) /* ===> check remainder*/
      PC08W00.PC08WJOB = PC08W00.PC08WJOB + 1;
    end

    PC08W00.PC08WWSA = PC08W00.PC08WCTR; /* ===> W.S. alpha*/
    PC08W00.PC08WMS1 = PC08W00.PC08WWSN; /* ===> Load numeric Alpha data*/
    PC08W00.PC08WMS2 = " P.O.(s) To Print. ";

    PC08W00.PC08WWSA = PC08W00.PC08WJOB; /* ===> W.S. alpha*/
    PC08W00.PC08WMS3 = PC08W00.PC08WWSN; /* ===> Load numeric Alpha data*/
    PC08W00.PC08WMS4 = " Job(s) To Submit. Press Same Key To Print.";

    PC08M002.VAGen_EZEMSG = PC08W00.PC08WMSG;
    PC08M002.XXXPRCNM = "PC08600";
    set PC08M002 alarm;

    exit stack; /* ===> exit to display message*/

  end

   /* ------------------------------------------------------------*/

   /* Process JCL JOB submit.*/
   /* Check print confirmation flag*/
     /* if set*/
       /* - request and read page 1 of T.S.*/
       /* - while lines exist with print indicator = ' '*/
           /* and more T.S. Pages exist*/
           /* and Max Job cards not reached*/
             /* - fill the JCL table with data cards*/
       /* - call TAP0 (JCL Submitter) w/ Display map on*/
       /* - If more T.S. pages exist*/
          /* - while lines exist with print indicator = ' '*/
              /* and more T.S. Pages exist*/
              /* and Max Job cards not reached*/
                /* - fill the JCL table with data cards*/
          /* - call TAP0 (JCL Submitter) w/ Display map off*/
   /* ------------------------------------------------------------*/

  if (PC08W00.PC08WPFL == "Y") /* ===> print confirmation flag*/

    PC08W00.PC08WPAG = PC08W00.XXXTSPAG; /* ===>save T.S. page*/

    if (PC08W00.PC08WSWU == "Y") /* Current page was changed*/

      PC08S43(); /* Update temporary storage page*/

      PC08W00.PC08WSWU = "N"; /* Storage update switch*/

    end

    if (PC08W00.TA5TSQIX > 1) /* ===> T.S. page more than 1*/
      PC08W00.PC08WSWF = "Y"; /* ==>format map requested*/
    end

    if (PC08W00.XXXTSPAG != 1) /* ===> first T.S. page*/

      PC08W00.XXXTSPAG = 1; /* Default to first page*/
      PC08W00.PC08WP20 = "Y"; /* ==>PF20 flag*/

      PC08S44(); /* Obtain temporary storage page*/

    end

    PC08610(); /* ====> Load pass record with*/
                                   /* selections*/

    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
      PC08620(); /* format production jcl*/
    else
      PC08621(); /* format development jcl*/
    end

    if (PC08W04.XGPCD[1] > " "         /* ===> DD * loaded to W.S. pass record*/
     && sysVar.errorCode == "00000000" /* Call successful*/
     && TA6REC.TA6RTNCD == "0")        /* and normal return, JCL Submitted*/

      XX0XS01(); /* ==> get current date and time for*/
                                   /* D.B. Updates*/

      PC08630(); /* ====> Update the P.O. Header*/

      PC08640(); /* ====> Process and submit another job*/

      PC08W00.PC08WSWR = "Y"; /* ==>request for data*/
      PC08W00.PC08WSWF = "Y"; /* ==>format map requested*/
      PC08W00.PC08WPFL = "N"; /* ==>print flag confirm flag*/
      PC08W00.PC08WP20 = "Y"; /* ==>PF20 flag*/
      PC08W00.XXXTSPAG = 1; /* Default to first page*/

      /* ------------------------------------------------------------*/
       /* Force 'g' into the selection field so user will have*/
       /* all green bar printed P.O.(s)*/
      /* ------------------------------------------------------------*/

      if (PC08M001.PC3PRTIN == " ") /* ==>print Indicator*/
        PC08M001.PC3PRTIN = "G"; /* ==>print Indicator*/
        PC08W01.PC3PRTIN = "G"; /* ==>print Indicator*/
      end

      /* ------------------------------------------------------------*/

                       /* COMMIT ALL DATA BASE UPDATES*/

      /* ------------------------------------------------------------*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ===> commit all updates*/

    end /* ===> print was successful (not*/
                                   /* cancelled)*/

  end /* ===> if print confirm flag = 'y'*/

   /* **                                                        ***/
   /* ********************** End of PC08600 ***********************/
end // end PC08600

// Load pass record
Function PC08610()
   /* ------------------------------------------------------------*/
   /* - load DD * cards/data to the W.S. pass record*/
     /* until all T.S Pages have been processed or*/
     /* the maximum allowable DD * cards have been loaded.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIX1 = 1; /* Initialize T.S. row index*/

  while (PC08W00.XXXTSPAG <= PC08W00.TA5TSQIX /* ===> until all T.S. pages*/
   && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/

    PC08W00.PC08WIXM = 1; /* Initialize line index*/

    /* ------------------------------------------------------------*/
     /* process and Load the pass record fron the current T.S. page*/
    /* ------------------------------------------------------------*/

    while (PC08W00.PC08WIXM <= 13               /* Until end of lines*/
     && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX /* ===> Max DD * cards*/
     && PC08W02.XGPCD[PC08WIXM] > " ")

      if (PC08W02.PC3PRTIN[PC08WIXM] == " ")

        PC08W04.XGPCD[PC08WIX1] = PC08W02.XGPCD[PC08WIXM];
        PC08W04.PO-REG-CD[PC08WIX1] = PC08W02.PO-REG-CD[PC08WIXM];
        PC08W04.PC08WNBR[PC08WIX1] = PC08W02.PC3PONBR[PC08WIXM];
        PC08W04.PC08WCMT[PC08WIX1] = PC08M001.PC08MCMT;

        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;
                                   /* Increment T.S. row index*/

      end

      PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment line index*/

    end /* ===> while more data on T.S. Page*/

    /* ------------------------------------------------------------*/
     /* Set-up and read the next T.S. page if there are more T.S.*/
     /* pages available and the max allowable DD * cards have not*/
     /* loaded to the W.S. pass record.*/
    /* ------------------------------------------------------------*/

    if (PC08W00.XXXTSPAG < PC08W00.TA5TSQIX /* ===> all T.S. pages read*/
     && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/

      PC08W00.XXXTSPAG = PC08W00.XXXTSPAG + 1; /* ===> get next T.S. Page*/

      PC08S44(); /* Obtain temporary storage page*/

    else /* ===> incr. T.S. page*/

      if (PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/
        PC08W00.XXXTSPAG = PC08W00.XXXTSPAG + 1; /* ===> get next T.S. Page*/
      end /* ===> max not loaded*/

    end /* ===> read next T.S. page*/

  end /* ===> while more T.S. Pages to process*/

  PC08W00.PC08WIXF = PC08W00.PC08WIXM; /* ===>save finder index*/

   /* **                                                        ***/
   /* ********************** End of PC08610 ***********************/
end // end PC08610

// Set-up & submit the JCL
Function PC08620()
   /* ------------------------------------------------------------*/
     /* Set-up and Submit the JCL Built from this module by*/
       /* formatting the JCL statements and DD * cards into*/
       /* into the subroutine work area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* ===> Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* ===> Initialize parameters index*/
  PC08W00.PC08WIXT = 1; /* ===> Initialize JCL W.S. Table index*/

  while (PC08T01.TARJCL[PC08WIXT] != "            /*EOF" /* ===> End of table*/
   && TA6REC.TA6INDEX < 100) /* ===> max JCL stmt index*/

    if (PC08T01.TARTYPE[PC08WIXT] == "J") /* ===> Job card statement*/

      TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCJ; /* JCL Exec card*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

    else /* ===>Table TAR type not "J"*/

      if (PC08T01.TARTYPE[PC08WIXT] == "E") /* ===> Execute statement*/

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCE; /* JCL Exec card*/
        TA6REC.TARTYPE[TA6INDEX] = "E"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

      else /* ===>Table TAR type not "J" or "E"*/

        if (PC08T01.TARTYPE[PC08WIXT] == "P") /* ===> Parameter statement*/

          /* ------------------------------------------------------------*/
                           /* Load the DD *  Cards*/

           /* Load the DD * cards, formatted in the pass record W.S area,*/
           /* to the record used by the JCL submit subroutine.*/
          /* ------------------------------------------------------------*/

          PC08W00.PC08WIX1 = 1; /* ===> incr. temp load index*/

          while (PC08W00.PC08WIX1 <= PC08W00.PC08WMAX
           /* ==> max DD * for JCL*/
           && PC08W04.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

            TA6REC.TA6ROW[TA6INDEX] = PC08W04.PC08WRC4[PC08WIX1];
            TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
            PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;
                                   /* ===> incr. load index*/

          end /* ===> while DD * available to load*/

          PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

        else /* ===>Table TAR type not "J" or "E" or*/
                                   /* "P"*/

          if (PC08T01.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

            TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
                                   /* JCL output card*/
            TA6REC.TARTYPE[TA6INDEX] = "O"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

          else /* ===>TAR type not "J","E","P" or "O"*/

            /* ------------------------------------------------------------*/
                     /* Load the JCL W.S. Table Statement*/

             /* Load the current JCL statement from the JCL W.S. Table*/
             /* to the record used by the JCL submit subroutine.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT];
                                   /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

          end /* ===>Table TAR type check "O"*/

        end /* ===>Table TAR type check "P"*/

      end /* ===>Table TAR type check "E"*/

    end /* ===>Table TAR type check "J"*/

  end /* ===> while not '/*EOF'; End of table*/

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC08T01.TARJCL[PC08WIXT] == "/*EOF") /* ===> End of table*/

    TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr. JCL stmt index*/
    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* request for*/
   /* - display TA0PM001 map*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  if (PC08W04.XGPCD == "03"
   && PC08W00.PC08MSEL == "P")
    if (PC08W00.PC4ORTYP == "SS"
     || PC08W00.PC4ORTYP == "SX")
      TA6REC.XURDEST = "RMT386"; /* => REPORT DESTINATION*/
      TA6REC.XURCOPY = 1; /* ===> number of copies*/
    else
      if (PC08W00.PC4ORTYP == "XI"
       || PC08W00.PC4ORTYP == "XD")
        TA6REC.XURDEST = "RMT461"; /* => REPORT DESTINATION*/
        TA6REC.XURCOPY = 1; /* ===> number of copies*/
      else
        TA6REC.XURDEST = "RMT46"; /* => REPORT DESTINATION*/
        TA6REC.XURCOPY = 1; /* ===> number of copies*/
      end
    end
  end

  TA6REC.TA6SUBSW = "Y"; /* ===> display, Tailor & submit JCL*/
  if (PC08W04.XGPCD == "03")
    TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job switch*/
  else
    TA6REC.TA6MSGSW = "Y"; /* ===> Set the End-of-Job switch*/
  end

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/

    return; /* ===> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/

    PC08W00.PC08WP20 = "N"; /* ===> PF20 switch*/
    PC08W00.XXXTSPAG = 1; /* ===> Default to first page*/
    PCWREC.XXXMSGNO = 86; /* ===> Cancelled by user*/
    PC08W00.XXXPRCNM = "PC08620"; /* ===> Process name*/

  else

    PC08W00.PC08WP20 = "N"; /* ===> PF20 switch*/
    PC08W00.XXXTSPAG = 1; /* ===> Default to first page*/
    PCWREC.XXXMSGNO = 10; /* ===> Indicate system error*/
    PC08W00.XXXPRCNM = "PC08620"; /* ===> Process name*/
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC08620 ***********************/
end // end PC08620

// Set-up & submit the JCL
Function PC08621()
   /* ------------------------------------------------------------*/
     /* Set-up and Submit the JCL Built from this module by*/
       /* formatting the JCL statements and DD * cards into*/
       /* into the subroutine work area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* ===> Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* ===> Initialize parameters index*/
  PC08W00.PC08WIXT = 1; /* ===> Initialize JCL W.S. Table index*/

  while (PC08T11.TARJCL[PC08WIXT] != "            /*EOF" /* ===> End of table*/
   && TA6REC.TA6INDEX < 100) /* ===> max JCL stmt index*/

    if (PC08T11.TARTYPE[PC08WIXT] == "J") /* ===> Job card statement*/

      TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCJ; /* JCL Exec card*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

    else /* ===>Table TAR type not "J"*/

      if (PC08T11.TARTYPE[PC08WIXT] == "E") /* ===> Execute statement*/

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCE; /* JCL Exec card*/
        TA6REC.TARTYPE[TA6INDEX] = "E"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

      else
        if (PC08T11.TARTYPE[PC08WIXT] == "V")
          if (PC08W00.PC08WPNM == "PC3001,")
            TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC300D)";
          else
            if (PC08W00.PC08WPNM == "PC3101,")
              TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC310D)";
            else
              if (PC08W00.PC08WPNM == "PC1211,")
                TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC121D)";
              else
                if (PC08W00.PC08WPNM == "PC1221,")
                  TA6REC.TARJCL[TA6INDEX] = "RUN PROGRAM(PC122D)";
                end
              end
            end
          end
          TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
          PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/
        else /* ===>Table TAR type not "J" or "E"*/

          if (PC08T11.TARTYPE[PC08WIXT] == "P") /* ===> Parameter statement*/

            /* ------------------------------------------------------------*/
                           /* Load the DD *  Cards*/

            /* Load the DD * cards, formatted in the pass record W.S area,*/
            /* to the record used by the JCL submit subroutine.*/

            /* ------------------------------------------------------------*/

            PC08W00.PC08WIX1 = 1; /* ===> incr. temp load index*/

            while (PC08W00.PC08WIX1 <= PC08W00.PC08WMAX
             /* ==> max DD * for JCL*/
             && PC08W04.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

              TA6REC.TA6ROW[TA6INDEX] = PC08W04.PC08WRC4[PC08WIX1];
              TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
              PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;
                                   /* ===> incr. load index*/

            end /* ===> while DD * available to load*/

            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

          else /* ===>Table TAR type not "J" or "E" or*/
                                   /* "P"*/

            if (PC08T11.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

              TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
                                   /* JCL output card*/
              TA6REC.TARTYPE[TA6INDEX] = "O"; /* Type*/

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
              PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

            else /* ===>TAR type not "J","E","P" or "O"*/

            /* ------------------------------------------------------------*/
                     /* Load the JCL W.S. Table Statement*/

              /* Load the current JCL statement from the JCL W.S. Table*/
              /* to the record used by the JCL submit subroutine.*/

            /* ------------------------------------------------------------*/

              TA6REC.TARJCL[TA6INDEX] = PC08T11.TARJCL[PC08WIXT];
                                   /* JCL*/
              TA6REC.TARTYPE[TA6INDEX] = PC08T11.TARTYPE[PC08WIXT];

              TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
              PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

            end /* ===>Table TAR type check "O"*/

          end /* ===>Table TAR type check "P"*/

        end /* ===>Table TAR type check "E"*/
      end /* ===>Table TAR type check "E"*/

    end /* ===>Table TAR type check "J"*/

  end /* ===> while not '/*EOF'; End of table*/

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC08T11.TARJCL[PC08WIXT] == "/*EOF") /* ===> End of table*/

    TA6REC.TARJCL[TA6INDEX] = PC08T11.TARJCL[PC08WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC08T11.TARTYPE[PC08WIXT];

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr. JCL stmt index*/
    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* request for*/
   /* - display TA0PM001 map*/
   /* - tailor and submit JCL*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* ===> Display map, Tailor & submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job message*/
                                   /* switch*/

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/

    return; /* ===> Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* ===> and user cancelled request*/

    PC08W00.PC08WP20 = "N"; /* ===> PF20 switch*/
    PC08W00.XXXTSPAG = 1; /* ===> Default to first page*/
    PCWREC.XXXMSGNO = 86; /* ===> Cancelled by user*/
    PC08W00.XXXPRCNM = "PC08620"; /* ===> Process name*/

  else

    PC08W00.PC08WP20 = "N"; /* ===> PF20 switch*/
    PC08W00.XXXTSPAG = 1; /* ===> Default to first page*/
    PCWREC.XXXMSGNO = 10; /* ===> Indicate system error*/
    PC08W00.XXXPRCNM = "PC08620"; /* ===> Process name*/
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC08620 ***********************/
end // end PC08621

// Do P.O. Header updates
Function PC08630()
   /* ------------------------------------------------------------*/
   /* - Do Header update for the print indicaters*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXT = 1; /* Initialize line index*/

  while (PC08W00.PC08WIXT <= PC08WMAX
   && PC08W04.XGPCD[PC08WIXT] > " ")

    set VPOHDR02 empty;
    set PCYREC empty;

    VPOHDR02.XGPCD = PC08W04.XGPCD[PC08WIXT]; /* ===> GPC*/
    VPOHDR02.PO-REG-CD = PC08W04.PO-REG-CD[PC08WIXT];
    VPOHDR02.PC3PONBR = PC08W04.PC08WNBR[PC08WIXT];
                                                        /* ===> P.O. number*/

    PC08S80(); /* ====================> Select Unique header row*/

    VPOHDR02.PC3PRTIN = "G";

    PC08S81(); /* ====================> Update Unique header row*/

    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* Decrement temp index*/

  end /* ===> print request was processed*/

   /* **                                                        ***/
   /* ********************** End of PC08630 ***********************/
end // end PC08630

// Process/submit remaining jobs
Function PC08640()
   /* ------------------------------------------------------------*/

   /* Process JCL JOB submit, w/o display map.*/
       /* - If more T.S. pages exist*/
          /* - while lines exist with print indicator = ' '*/
              /* and more T.S. Pages exist*/
              /* and Max Job cards not reached*/
                /* - fill the JCL table with data cards*/
          /* - call TAP0 (JCL Submitter) w/ Display map off*/
   /* ------------------------------------------------------------*/

  while (PC08W00.XXXTSPAG <= PC08W00.TA5TSQIX) /* ===> more T.S. pages*/

    PC08641(); /* ====> Load pass record with data*/

    if (PC08W04.XGPCD[1] > " ") /* ===> DD * loaded to W.S. pass record*/

      PC08642(); /* ====> Do set-up and submit job*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA6REC.TA6RTNCD == "0")        /* and normal return, JCL Submitted*/

        PC08630(); /* ====> Update the P.O. Header*/

      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC08640 ***********************/
end // end PC08640

// Load pass record
Function PC08641()
   /* ------------------------------------------------------------*/
   /* - initialize indexes*/
     /* - Init. temp load index*/
     /* - Load  finder index (saved in PC08620 and PC08642)*/
   /* - load DD * cards/data to the W.S. pass record*/
     /* until all T.S Pages have been processed or*/
     /* the maximum allowable DD * cards have been loaded.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIX1 = 1; /* ===> Init. temp load index*/
  PC08W00.PC08WIXM = PC08W00.PC08WIXF; /* ===> load  finder index*/
  set PC08W04 empty; /* ===> initialize W.S. Pas record*/

  while (PC08W00.XXXTSPAG <= PC08W00.TA5TSQIX /* ===> until all T.S. pages*/
   && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/

    /* ------------------------------------------------------------*/
     /* process and Load the pass record from the current T.S. page*/
     /* and T.S. index*/
    /* ------------------------------------------------------------*/

    while (PC08W00.PC08WIXM <= 13               /* ===> Until end of T.S. rows*/
     && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX /* ===> Max DD * cards*/
     && PC08W02.XGPCD[PC08WIXM] > " ")

      if (PC08W02.PC3PRTIN[PC08WIXM] == " ")

        PC08W04.XGPCD[PC08WIX1] = PC08W02.XGPCD[PC08WIXM];
        PC08W04.PC08WNBR[PC08WIX1] = PC08W02.PC3PONBR[PC08WIXM];
        PC08W04.PO-REG-CD[PC08WIX1] = PC08W02.PO-REG-CD[PC08WIXM];
        PC08W04.PC08WCMT[PC08WIX1] = PC08M001.PC08MCMT;

        PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;
                                   /* Increment temp load index*/

      end

      PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1; /* Increment T.S. index*/

    end /* ===> while more data on T.S. Page*/

    PC08W00.PC08WIXF = PC08W00.PC08WIXM; /* ===> save finder index*/

    /* ------------------------------------------------------------*/
     /* Set-up and read the next T.S. page if there are more T.S.*/
     /* pages available and the max allowable DD * cards have not*/
     /* loaded to the W.S. pass record.*/
    /* ------------------------------------------------------------*/

    if (PC08W00.XXXTSPAG < PC08W00.TA5TSQIX /* ===> all T.S. pages read*/
     && PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/

      PC08W00.XXXTSPAG = PC08W00.XXXTSPAG + 1; /* ===> get next T.S. Page*/
      PC08W00.PC08WIXM = 1; /* Initialize T.S. index*/

      PC08S44(); /* Obtain temporary storage page*/

    else /* ===> incr. T.S. page*/

      /* ------------------------------------------------------------*/
       /* if on last T.S. Page and max rows not loaded then all rows*/
       /* on last T.S. page have been loaded.*/
      /* ------------------------------------------------------------*/

      if (PC08W00.PC08WIX1 <= PC08W00.PC08WMAX) /* ===> Max DD * cards*/
        PC08W00.XXXTSPAG = PC08W00.XXXTSPAG + 1; /* ===> incr. T.S. Page*/
      end /* ===> read next T.S. page*/

    end /* ===> read next T.S. page*/

  end /* ===> while more T.S. Pages to process*/
   /* **                                                        ***/
   /* ********************** End of PC08610 ***********************/
end // end PC08641

// Set-up & submit the JCL
Function PC08642()
   /* ------------------------------------------------------------*/
     /* Set-up and Submit the JCL Built from this module by*/
       /* formatting the JCL statements and DD * cards into*/
       /* into the subroutine work area.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* Note: The TA6REC at this point contains user information*/
         /* loaded from the first pass, 1st job submitted, and*/
         /* all that needs to be done is build the JCL rows.*/
         /* Tha TA6rec should not be set cleared.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6INDEX = 1; /* ===> Initialize parameters index*/
  move " " to TA6REC.TA6ROW[1] for all; /* ===> Initialize JCL row array*/
  move " " to TA6REC.TA6ERRFL[1] for all; /* ===> reset error array*/
  TA6REC.TA6RTNCD = " "; /* ===> reset return code*/
  PC08W00.PC08WIXT = 1; /* ===> Initialize JCL W.S. Table index*/

  while (PC08T01.TARJCL[PC08WIXT] != "            /*EOF" /* ===> End of table*/
   && TA6REC.TA6INDEX < 100) /* ===> max JCL stmt index*/

    if (PC08T01.TARTYPE[PC08WIXT] == "J") /* ===> Job card statement*/

      /* ------------------------------------------------------------*/
                       /* Format Job card statement*/

       /* Load the Job card statement group level ---> PC08JCJ*/
       /* --> the PC08W00.PC08JCJ field was loaded in the first pass*/
           /* when building the JCL for the first Job. (PC08620)*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCJ; /* JCL Exec card*/
      TA6REC.TARTYPE[TA6INDEX] = " "; /* ==> no type needed*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
      PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

    else /* ===>Table TAR type not "J"*/

      if (PC08T01.TARTYPE[PC08WIXT] == "E") /* ===> Execute statement*/

        /* ------------------------------------------------------------*/
                         /* Format Execute statement*/

         /* load the execute statement group level ---> PC08JCE*/
         /* --> the PC08W00.PC08JCE field was loaded in the first pass*/
             /* when building the JCL for the first Job. (PC08620)*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCE; /* ===> JCL Exec card*/
        TA6REC.TARTYPE[TA6INDEX] = "E"; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> increment JCL stmt index*/
        PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

      else /* ===>Table TAR type not "J" or "E"*/

        if (PC08T01.TARTYPE[PC08WIXT] == "P") /* Parameter statement*/

          /* ------------------------------------------------------------*/
                           /* Load the DD *  Cards*/

           /* Load the DD * cards loaded to pass record W.S area*/
           /* to the record used by the JCL submit subroutine.*/
          /* ------------------------------------------------------------*/

          PC08W00.PC08WIX1 = 1;

          while (PC08W00.PC08WIX1 <= PC08W00.PC08WMAX
           /* ==> max DD * for JCL*/
           && PC08W04.XGPCD[PC08WIX1] > " ") /* ===> DD * card to load*/

            TA6REC.TA6ROW[TA6INDEX] = PC08W04.PC08WRC4[PC08WIX1];
            TA6REC.TARTYPE[TA6INDEX] = "P"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
            PC08W00.PC08WIX1 = PC08W00.PC08WIX1 + 1;

          end /* ===> while DD * available to load*/

          PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

        else /* ===>Table TAR type not "J" or "E" or*/
                                   /* "P"*/

          if (PC08T01.TARTYPE[PC08WIXT] == "O") /* ===> output  statement*/

            /* ------------------------------------------------------------*/
                             /* Format Output statement*/

             /* load the output statement group level ---> PC08JCO*/
             /* --> the PC08W00.PC08JCO field was loaded in the first pass*/
                 /* when building the JCL for the first Job. (PC08620)*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PC08W00.PC08WJCO;
                                   /* JCL output card*/
            TA6REC.TARTYPE[TA6INDEX] = "O"; /* Type*/

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr JCL stmt index*/
            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

          else /* ===>TAR type not "J","E","P" or "O"*/

            /* ------------------------------------------------------------*/
                     /* Load the JCL W.S. Table Statement*/

             /* Load the current JCL statement from the JCL W.S. Table*/
             /* to the record used by the JCL submit subroutine.*/

            /* ------------------------------------------------------------*/

            TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT];
                                   /* JCL*/
            TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];

            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* ===> incr. JCL stmt index*/
            PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1;
                                   /* ==> incr JCL table index*/

          end /* ===>Table TAR type check "O"*/

        end /* ===>Table TAR type check "P"*/

      end /* ===>Table TAR type check "E"*/

    end /* ===>Table TAR type check "J"*/

  end /* ===> while not '/*EOF'; End of table*/

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  if (PC08T01.TARJCL[PC08WIXT] == "/*EOF") /* ===> End of table*/

    TA6REC.TARJCL[TA6INDEX] = PC08T01.TARJCL[PC08WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC08T01.TARTYPE[PC08WIXT];

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* ===> incr. JCL stmt index*/
    PC08W00.PC08WIXT = PC08W00.PC08WIXT + 1; /* ==> incr JCL table index*/

  end

  TA6REC.TA6SUBSW = "S"; /* ===> Tailor & submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* ===> Set the End-of-Job switch*/

  while (TA6REC.TA6RTNCD < "0") /* ===> Until subroutine completed*/
    XPTA0P(); /* ===> Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* ===> and normal return*/

    return; /* ===> Return to previous process*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all changes*/

    PC08W00.XXXTSPAG = 1; /* ===> Default to first page*/
    PCWREC.XXXMSGNO = 10; /* ===> Indicate system error*/
    PC08W00.XXXPRCNM = "PC08642"; /* ===> Process name*/
    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC08642 ***********************/
end // end PC08642

// Select (S ) Unique    VPOTYP01
Function PC08S01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.XXXPRCNM = "PC08S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S01 ***********************/
end // end PC08S01

// Select (SA) Unique    VSUSER01
Function PC08S02()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty;
  PG1REC.XGPCD = "03";
  PG1REC.XXXUSER = PC08M001.CAUSERID;
  PG1REC.PG1SC4CD = "**";
  PG1REC.PG1FCTCD = "**";

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PG1REC.XXXSTAT == "A") /* ===> active*/
        PC08W01.PG1SC4CD = PG1REC.PG1SC4CD;
        PC08W01.CAUSERID = PC08M001.CAUSERID;
        return; /* Return to previous process*/
      else
        converseLib.validationFailed(210); /* ===>scheduler not authorized*/
        PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
        PC08W00.XXXPRCNM = "PC08S02"; /* Module identification*/
        set PC08M001.CAUSERID cursor, bold; /* Highlight userid*/
        exit stack; /* Exit to display map*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(210); /* ===>scheduler not authorized*/
      PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
      PC08W00.XXXPRCNM = "PC08S02"; /* Module identification*/
      set PC08M001.CAUSERID cursor, bold; /* Highlight userid*/
      exit stack; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
  PC08W00.XXXPRCNM = "PC08S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S02 ***********************/
end // end PC08S02

// Select (SA) Unique    VSUSER01
Function PC08S03()
   /* ------------------------------------------------------------*/
   /* If user blanks out scheduler don't bother validating.*/
   /* ------------------------------------------------------------*/

  if (PC08M001.CAUSERID == " ")
    PC08W01.PG1SC4CD = " "; /* blank out sceduler field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty;
  PG1REC.XGPCD = "03";
  PG1REC.XXXUSER = PC08W01.CAUSERID;
  PG1REC.PG1SC4CD = "**";
  PG1REC.PG1FCTCD = "**";

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PG1REC.XXXSTAT == "A") /* ===> active*/
        PC08W01.PG1SC4CD = PG1REC.PG1SC4CD;
        PC08W01.CAUSERID = PC08M001.CAUSERID;
        return; /* Return to previous process*/
      else
        converseLib.validationFailed(210); /* ===>scheduler not authorized*/
        PC08W00.XXXPRCNM = "PC08S03"; /* Module identification*/
        set PC08M001.CAUSERID cursor, bold; /* Highlight userid*/
        return; /* Return to previous process*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If row not found,*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(210); /* ===>scheduler not authorized*/
      PC08W00.XXXPRCNM = "PC08S03"; /* Module identification*/
      set PC08M001.CAUSERID cursor, bold; /* Highlight userid*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
  PC08W00.XXXPRCNM = "PC08S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc08s03 ***********************/
end // end PC08S03

// Verify prod. year/season code
Function PC08S10()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of season codes.*/
   /* Read first record of select set.*/
    /* - if found --> save data*/
    /* - else  -----> set invalid error*/
   /* Close cursor.*/
   /* ------------------------------------------------------------*/

  set PCFREC empty; /* ====> row storage area*/

  PCFREC.PCFSECD = PC08M001.PC08MPYR;
  if (PC08M001.PC08MPMO > "  ") /* ====> production month*/
    PC08W00.PC08WMMA = PC08M001.PC08MPMO; /* ===> MM char format*/
    PCFREC.PCFBUYMO = PC08W00.PC08WMMN; /* ===> MM num to Buy month*/
  else
    PCFREC.PCFBUYMO = -1; /* ===> wild card Buy month*/
  end
  PCFREC.XXXSTAT = "A";
  PC08W00.PC08WSWT = "N"; /* ===>EOF cursor temp*/

  PC08S11(); /* ===>Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch the first record then check EOF flag*/
   /* ------------------------------------------------------------*/

  PC08S12(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  if (PC08W00.PC08WSWT == "N") /* ===> EOF temp cursor? (ie. record found?*/

    PC08W01.PC08WMO1 = PCFREC.PCFBUYMO; /* save begin buy month*/
    PC08W01.PC08WYR1 = PCFREC.PCFBUYYR; /* save begin buy year*/
    PC08W01.PCFSECD = PCFREC.PCFSECD; /* save season code*/

    while (PC08W00.PC08WSWT == "N")
      PC08S12();
    end

    PC08W01.PC08WMO2 = PCFREC.PCFBUYMO; /* save end buy month*/
    PC08W01.PC08WYR2 = PCFREC.PCFBUYYR; /* save end buy year*/

  else
    converseLib.validationFailed(80); /* ===> season code invalid*/
    PC08W00.XXXPRCNM = "PC08S10"; /* Module identification*/
    set PC08M001.PC08MPYR cursor, bold; /* ===> production year*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC08S13(); /* ===> Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC08S10 ***********************/
end // end PC08S10

// Select (S1)  Set/Open VPCVFY01
Function PC08S11()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.XXXPRCNM = "PC08S11"; /* Module identification*/
  PC08W00.PC08WSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC08W00.PC08WSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC08M001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S11 ***********************/
end // end PC08S11

// Fetch  (N1)  Next row VPCVFY01
Function PC08S12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC08W00.PC08WSWT = "Y"; /* Indicate end of temp cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.XXXPRCNM = "PC08S12"; /* Module identification*/
  PC08W00.PC08WSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC08W00.PC08WSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S82 ***********************/
end // end PC08S12

// Close  (C1)  Set      VPCVFY01
Function PC08S13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.XXXPRCNM = "PC08S13"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCFREC.PCFKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S13 ***********************/
end // end PC08S13

// Select (S3) Set/Open  VPOHDR01
Function PC08S21()
   /* ------------------------------------------------------------*/
   /* Initialize the  key information for select set VPOHDR02*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC08W01.XGPCD;
  VPOHDR02.PO-REG-CD = PC08W01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PCFSECD = PC08W01.PCFSECD;

  if (PC08W01.PC4ORTYP > " ")
    VPOHDR02.PC4ORTYP = PC08W01.PC4ORTYP;
  else
    VPOHDR02.PC4ORTYP = "*";
  end

  if (PC08W01.FY1FCTYC > " ")
    VPOHDR02.FY1FCTYC = PC08W01.FY1FCTYC;
  else
    VPOHDR02.FY1FCTYC = "*";
  end

  PCYREC.PCYFRDT = PC08W01.PC08WLOW; /* ===> load low  date*/
  PCYREC.PCYTODT = PC08W01.PC08WHGH; /* ===> load high date*/

  PCYREC.PCYFUNC = "S3";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S21 ***********************/
end // end PC08S21

// Fetch  (N3) Next row  VPOHDR01
Function PC08S22()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("N3", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC08W00.PC08WSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC08S22"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S22 ***********************/
end // end PC08S22

// Close  (C3) Set       VPOHDR01
Function PC08S23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C3";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S23"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC08S23"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S23 ***********************/
end // end PC08S23

// Select (S ) Unique  VFCTY001
Function PC08S24()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC08W00.XXXPRCNM = "PC08S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S24 ***********************/
end // end PC08S24

// Select (S ) Unique  VFDOFC02
Function PC08S25()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFDOFC02" ("S ", SQLCA, VFDOFC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC08W00.XXXPRCNM = "PC08S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFDOFC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VFDOFC02.VFDOFC02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC08S25 ***********************/
end // end PC08S25

// check if Header row printable
Function PC08S30()
   /* ------------------------------------------------------------*/
    /* Get all item rows that are associated with the header*/
    /* row and check if item is valid*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize and set up for D.B. call on DPRODC.VPOITM06*/
   /* in both cases:*/
   /* 1. P.O. Number entered*/
     /* - PC3REC was loaded in Verify P.O. Number process*/
   /* 2. P.O. Number not entered*/
     /* - PC3REC was loaded in Select set/read next  header row*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WSWT = "N"; /* Set temp cursor EOF*/

  set VPOITM06 empty;

  VPOITM06.XGPCD = VPOHDR02.XGPCD; /* GPC code*/
  VPOITM06.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOITM06.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/

  PC08S31(); /* Declare cursor for VPOITM06*/

  PC08S32(); /* Fetch first VPOITM06 row*/
   /* ---------------------------------===> Prime read*/

  while (PC08W00.PC08WSWT == "N") /* ===> until end of temp cursor (VPOITM06)*/
    /**/
     /* ------------------------------------------------------------*/
      /* For GPC = FOOTWEAR*/
     /* ------------------------------------------------------------*/
    /**/
    if (PC08W01.XGPCD == "02")
      if (PC08W01.SY1STNBR > " ") /* ===> entered screen 1*/
        if (VPOITM06.SY1STNBR == PC08W01.SY1STNBR) /* ===> matches screen 1*/
          PC08W00.PC08WSWT = "Y";
                                   /* ===> end of temp cursor (VPOITM06)*/
          PC08W00.PC08WFL1 = "Y"; /* ===>flag 1 (print authority flag)*/
        end
      else
        if (VPOITM06.PC-SAP-LEGAL-PO-FL == "Y")
          converseLib.validationFailed(600); /* ===>scheduler not authorized*/
          PC08W00.PC08WSWM = "1"; /* ===> request for map 1*/
          PC08W00.XXXPRCNM = "PC08S30"; /* Module identification*/
          set PC08M001.CAUSERID cursor, bold; /* Highlight userid*/
          exit stack; /* Exit to display map*/
        else
          PC08W00.PC08WFL1 = "Y"; /* ===>flag 1 (print authority flag)*/
          PC08W00.PC08WSWT = "Y"; /* ===> end of temp cursor (VPOITM06)*/
        end
      end
    end
    /**/
    /**/
     /* ------------------------------------------------------------*/
      /* For GPC = APPAREL*/
     /* ------------------------------------------------------------*/
    /**/
    if (PC08W01.XGPCD == "03")
      if (PC08W01.PG1SC4CD == VPOITM06.PG1SC4CD
       || PC08W01.PG1SC4CD == " ")
        /**/
        if (PC08W01.SY1STNBR > " ") /* ===> entered screen 1*/
          if (VPOITM06.SY1STNBR == PC08W01.SY1STNBR) /* ===> matches screen 1*/
            PC08W00.PC08WSWT = "Y";
                                   /* ===> end tmp  cursor (VPOITM06)*/
            PC08W00.PC08WFL1 = "Y"; /* ===>flag 1 ( authority flag)*/
          end
        else
          PC08W00.PC08WSWT = "Y";
                                   /* ===> end of temp cursor (VPOITM06)*/
          PC08W00.PC08WFL1 = "Y"; /* ===>flag 1 (print authority flag)*/
        end
      end
    else
      PC08W00.PC08WSWT = "Y"; /* ===> end of temp cursor (VPOITM06)*/
    end
    /**/
    /**/
     /* ------------------------------------------------------------*/
      /* read the next Item row if a valid item has not been*/
      /* identified yet. (ie. authorized to print the P.O.)*/
     /* ------------------------------------------------------------*/
    /**/
    if (PC08W00.PC08WFL1 == "N" /* ===>flag 1 (print authority flag)*/
     && PC08W00.PC08WSWT == "N") /* ===> not end of cursor*/
      PC08S32(); /* Fetch next VPOITM06 row*/
       /* -------------------------------===> Driving read*/
    end
    /**/
  end

  PC08S33(); /* Close VPOITM06 cursor*/

   /* **                                                        ***/
   /* ********************** End of PC08S30 ***********************/
end // end PC08S30

// Select (S2) Set/Open  VPOITM01
Function PC08S31()
   /* ------------------------------------------------------------*/
   /* Declare cursor for DPRODC.VPOITM06*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S2";
  try
    call "VPOITM06" (PCYREC, SQLCA, VPOITM06) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S31";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S31"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM06"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM06.VPOITM06-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S31 ***********************/
end // end PC08S31

// Fetch  (N2) Next row  VPOITM01
Function PC08S32()
   /* ------------------------------------------------------------*/
   /* If row not found, return to prev. with EOF Cursor set.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N2";
  try
    call "VPOITM06" (PCYREC, SQLCA, VPOITM06) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC08W00.PC08WSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S32";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S32"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM06"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM06.VPOITM06-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S32 ***********************/
end // end PC08S32

// Close  (C2) Set       VPOITM01
Function PC08S33()
   /* ------------------------------------------------------------*/
   /* Close cursor for DPRODC.VPOITM06*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C2";
  try
    call "VPOITM06" (PCYREC, SQLCA, VPOITM06) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S33";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S33"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM06"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM06.VPOITM06-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S33 ***********************/
end // end PC08S33

// Update temporary storage page
Function PC08S43()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PC08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC08W00.XXXPRCNM = "PC08S43"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End of PC08S43 ***********************/
end // end PC08S43

// Read temporary storage page
Function PC08S44()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC08W02.XXXTSLEN = PC08W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC08W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC08W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S44"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC08W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End of PC08S44 ***********************/
end // end PC08S44

// SUBMIT JCL TO INTERNAL READER
Function PC08S55()

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  if (PC08W00.PC08MSEL == "P")
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  end
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PC08M002.XXXPRCNM = "PC08S55"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC08M002.XXXPRCNM = "PC08S55"; /* Process name*/

  end

  exit stack; /* Exit to display map*/

end // end PC08S55

// Driver to verify print program
Function PC08S60()
   /* ------------------------------------------------------------*/
       /* This module determines if the program for a specific*/
       /* P.O. Type has been coded. If it hasn't then an error*/
       /* message is displayed, otherwise the job parameters are*/
       /* loaded from the job parm table.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WKY1 = PC08W01.XGPCD; /* ==>GPC code*/
  if (PC08W01.PC08MTYP == " ")
    PC08S63();
  else
    PC08W00.PC08WKY2 = PC08W01.PC08MTYP; /* ==>PO type*/
  end
  if (PC08W00.PC08WKEY in PC08T02.PC08TKEY)
    PC08W00.PC08WJNM = PC08T02.PC08TJOB[sysVar.arrayIndex];
  end /* ==>Find job parms*/
  if (sysVar.arrayIndex == 0) /* ==>If type not in table*/
    converseLib.validationFailed(285);
    PC08W00.XXXPRCNM = "PC08S60";
    exit stack; /* ===> to display message*/
  else
    PC08W00.PC08WPNM = PC08T02.PC08TPRC[sysVar.arrayIndex]; /* ==>Proc name*/
    PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
    PC08W00.PC08WFM1 = PC08T02.PC08TFRM[sysVar.arrayIndex]; /* ==>Form code*/
    PC08W00.PC08WFM2 = PC08T02.PC08TFRM[sysVar.arrayIndex]; /* ==>Form code*/
    PC08W00.PC08WJB1 = "//";
    PC08W00.PC08WJB2 = "JOB (DV,MUR2),' P.O. FORMS (";
    PC08W00.PC08WJB3 = ")  ',";
    PC08W00.PC08WEX1 = "//S0010   EXEC"; /* ===> execute stmnt*/
    if (PC08W01.XGPCD == "03")
      /* OR (PC08W01.XGPCD = '02'*/
      /* AND (PC08W01.PC08MTYP = 'SS'*/
      /* OR PC08W01.PC08MTYP = 'CR'*/
      /* OR PC08W01.PC08MTYP = 'PS'));*/

      PC08W00.PC08WALN1 = "//REPT001  DD   DSN=PC.F1221.REPT.A1,";
      PC08W00.PC08WLN18 = "//   DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN19 = "// UNIT=SYSDA,";
      PC08W00.PC08WLN20 = "// SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN21 = "// DCB=(RECFM=FBA,LRECL=82),AVGREC=K";

      PC08W00.PC08WALN2 = "//REPT002  DD  DSN=PC.F1221.REPT.A2,";
      PC08W00.PC08WLN22 = "//   DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN23 = "// UNIT=SYSDA,";
      PC08W00.PC08WLN24 = "// SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN25 = "// DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
      PC08W00.PC08WLN5 = "//P0020   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=PC.F1221.REPT.A3,";
      PC08W00.PC08WLN13 = "//             DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN14 = "//             UNIT=SYSDA,";
      PC08W00.PC08WLN15 = "//             SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN16 = "//             DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
      PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A2,DISP=SHR";
      PC08W00.PC08WLN8 = "//         DD  DSN=PC.F1221.REPT.A1,DISP=SHR";
      PC08W00.PC08WLN27 = "//SYSIN DD *";
      PC08W00.PC08WLN28 = "//SYSPRINT DD SYSOUT=*";
      PC08W00.PC08WLN9 = "//P0030   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A3,DISP=SHR";
      /* MOVE '//SYSUT2   DD  SYSOUT=A,DEST=' TO PC08W00.PC08WLN11;*/
      PC08W00.PC08WLN11 = "//SYSUT2   DD  DUMMY";
      /* MOVE 'RMT299' TO PC08W00.PC08WRMT2;*/
      /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN12;*/
      PC08W00.PC08WLN29 = "//SYSIN DD *";
      PC08W00.PC08WLN30 = "//SYSPRINT DD SYSOUT=*";
      PC08W00.PC08WLN31 = "//P0040   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=PC.F1221.REPT.A1,DISP=SHR";
      PC08W00.PC08WLN33 = "//SYSUT2   DD  SYSOUT=A,DEST=";
      PC08W00.PC08WRMT3 = "RMT999";
      PC08W00.PC08WLN34 = ",OUTPUT=*.OUT01";
      PC08W00.PC08WLN35 = "//SYSIN DD *";
      PC08W00.PC08WLN36 = "//SYSPRINT DD SYSOUT=*";
    else
      PC08W00.PC08WFR1 = "/*OUTPUT  ";
      PC08W00.PC08WFR2 = " FORMS=";
      PC08W00.PC08WFR3 = ",";
      PC08W00.PC08WDST = "COPIES=_,DEST=_____";
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC08S60 ***********************/
end // end PC08S60

// Verify print program
Function PC08S61()
   /* ------------------------------------------------------------*/
       /* This module is called by the driver to detirmine if*/
       /* the program for a specific P.O. Type has been coded.*/
       /* It mirrors the code in PC08S51 (ie.*/

                   /* Format Execute statement*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                         /* FOOTWEAR*/
   /* ------------------------------------------------------------*/

  if (PC08W01.XGPCD == "02")

    if (PC08W02.PC4ORTYP[sysVar.arrayIndex] == "SS") /* ===> form type*/
      /* ========= Next Sentence =============>*/
    else
      converseLib.validationFailed(285);
      PC08M002.XXXPRCNM = "PC08S61";
      exit stack; /* ===> to display message*/
    end

  end /* ===> Footwear check*/

   /* ------------------------------------------------------------*/
                         /* APPAREL*/
   /* ------------------------------------------------------------*/

  if (PC08W01.XGPCD == "03")

    if (PC08W02.PC4ORTYP[sysVar.arrayIndex] == "IL") /* ===> form type*/
      /* ========= Next Sentence =============>*/
    else
      converseLib.validationFailed(285);
      PC08M002.XXXPRCNM = "PC08S61";
      exit stack; /* ===> to display message*/
    end

  end /* ===> Apparel check*/

   /* **                                                        ***/
   /* ********************** End of PC08S61 ***********************/
end // end PC08S61

// Verify print program type
Function PC08S63()
   /* ------------------------------------------------------------*/
       /* This module finds the first SELECTED line and uses this*/
       /* P.O. type to determine which jcl to build.*/
   /* Note:*/
       /* Footwear is the only one allowed to specify P.O. Type*/
       /* format.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WIXM = 1;

  while (PC08W00.PC08WIXM < 14)
    if (PC08M002.PC08MSEL[PC08WIXM] == "G"
     || PC08M002.PC08MSEL[PC08WIXM] == "P")
      PC08W00.PC08WKY2 = PC08W02.PC4ORTYP[PC08WIXM];
      PC08W00.PC08WIXM = 15;
    end
    PC08W00.PC08WIXM = PC08W00.PC08WIXM + 1;
  end

   /* ********************** End of PC08S63 ***********************/
end // end PC08S63

// Driver to verify print program
Function PC08S64()
   /* ------------------------------------------------------------*/
       /* This module determines if the program for a specific*/
       /* P.O. Type has been coded. If it hasn't then an error*/
       /* message is displayed, otherwise the job parameters are*/
       /* loaded from the job parm table.*/
   /* ------------------------------------------------------------*/

  PC08W00.PC08WKY1 = PC08W01.XGPCD; /* ==>GPC code*/
  if (PC08W01.PC08MTYP == " ")
    PC08S63();
  else
    PC08W00.PC08WKY2 = PC08W01.PC08MTYP; /* ==>PO type*/
  end
  if (PC08W00.PC08WKEY in PC08T22.PC08TKEY)
    PC08W00.PC08WJNM = PC08T22.PC08TJOB[sysVar.arrayIndex];
  end /* ==>Find job parms*/
  if (sysVar.arrayIndex == 0) /* ==>If type not in table*/
    converseLib.validationFailed(285);
    PC08W00.XXXPRCNM = "PC08S64";
    exit stack; /* ===> to display message*/
  else
    PC08W00.PC08WPNM = PC08T22.PC08TPRC[sysVar.arrayIndex]; /* ==>Proc name*/
    PC08W00.PC08WTYP = PC08W00.PC08WKY2; /* ==>PO type*/
    PC08W00.PC08WFM1 = PC08T22.PC08TFRM[sysVar.arrayIndex]; /* ==>Form code*/
    PC08W00.PC08WFM2 = PC08T22.PC08TFRM[sysVar.arrayIndex]; /* ==>Form code*/
    PC08W00.PC08WJB1 = "//";
    PC08W00.PC08WJB2 = "JOB (DV,MUR2),' P.O. FORMS (";
    PC08W00.PC08WJB3 = ")  ',";
    PC08W00.PC08WEX1 = "//S0010   EXEC"; /* ===> execute stmnt*/
    if (PC08W01.XGPCD == "03")
      /* OR (PC08W01.XGPCD = '02'*/
      /* AND (PC08W01.PC08MTYP = 'SS'*/
      /* OR PC08W01.PC08MTYP = 'PS'));*/

      PC08W00.PC08WALN1 = "//REPT001  DD  DSN=T.PC.F1222.REPT.A1";
      PC08W00.PC08WLN18 = "//             DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN19 = "//             UNIT=SYSDA,";
      PC08W00.PC08WLN20 = "//             SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN21 = "//             DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
      PC08W00.PC08WLN3 = "//REPT002  DD  DSN=T.PC.F1222.REPT.A2";
      PC08W00.PC08WLN22 = "//             DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN23 = "//             UNIT=SYSDA,";
      PC08W00.PC08WLN24 = "//             SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN25 = "//             DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
      PC08W00.PC08WLN5 = "//P0020   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN6 = "//SYSUT2   DD  DSN=T.PC.F1221.REPT.A3,";
      PC08W00.PC08WLN13 = "//             DISP=(NEW,CATLG,KEEP),";
      PC08W00.PC08WLN14 = "//             UNIT=SYSDA,";
      PC08W00.PC08WLN15 = "//             SPACE=(82,(24,6),RLSE),";
      PC08W00.PC08WLN16 = "//             DCB=(RECFM=FBA,LRECL=82),AVGREC=K";
      PC08W00.PC08WLN7 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A2,DISP=SHR";
      PC08W00.PC08WLN8 = "//         DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR";
      PC08W00.PC08WLN27 = "//SYSIN DD *";
      PC08W00.PC08WLN28 = "//SYSPRINT DD SYSOUT=*";
      PC08W00.PC08WLN9 = "//P0030   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN10 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A3,DISP=SHR";
      /* MOVE '//SYSUT2   DD  SYSOUT=A,DEST=' TO PC08W00.PC08WLN11;*/
      PC08W00.PC08WLN11 = "//SYSUT2   DD  DUMMY";
      /* MOVE 'RMT299' TO PC08W00.PC08WRMT2;*/
      /* MOVE ',OUTPUT=*.OUT01' TO PC08W00.PC08WLN12;*/
      PC08W00.PC08WLN29 = "//SYSIN DD *";
      PC08W00.PC08WLN30 = "//SYSPRINT DD SYSOUT=*";
      PC08W00.PC08WLN31 = "//P0040   EXEC PGM=NKEGENER";
      PC08W00.PC08WLN32 = "//SYSUT1   DD  DSN=T.PC.F1221.REPT.A1,DISP=SHR";
      if (VPOHDR02.PC4ORTYP == "RD" && 
      (VPOHDR02.FY1FCTYC == "PHK" || 
      VPOHDR02.FY1FCTYC == "PHH") && 
      PC08W00.PC08WRMT4 == "RMT999")
        PC08W00.PC08WLN33 = "//SYSUT2   DD  DUMMY";
        PC08W00.PC08WRMT3 = " ";
        PC08W00.PC08WLN34 = " ";
      else
        PC08W00.PC08WLN33 = "//SYSUT2   DD  SYSOUT=A,DEST=";
        PC08W00.PC08WRMT3 = "RMT999";
        PC08W00.PC08WLN34 = ",OUTPUT=*.OUT01";
      end
      PC08W00.PC08WLN35 = "//SYSIN DD *";
      PC08W00.PC08WLN36 = "//SYSPRINT DD SYSOUT=*";
    else
      PC08W00.PC08WFR1 = "/*OUTPUT  ";
      PC08W00.PC08WFR2 = " FORMS=";
      PC08W00.PC08WFR3 = ",";
      PC08W00.PC08WDST = "COPIES=_,DEST=_____";
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC08S64 ***********************/
end // end PC08S64

// Select (S2) Set/Open  VPOITM01
Function PC08S66()
   /* ------------------------------------------------------------*/
   /* Declare cursor for DPRODC.VPOITM06*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S2";
  try
    call "VPOITM06" (PCYREC, SQLCA, VPOITM06) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S66";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S66"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM06"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM06.VPOITM06-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S66 ***********************/
end // end PC08S66

// Fetch  (N2) Next row  VPOITM01
Function PC08S67()
   /* ------------------------------------------------------------*/
   /* If row not found, return to prev. with EOF Cursor set.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N2";
  try
    call "VPOITM06" (PCYREC, SQLCA, VPOITM06) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC08W00.PC08WSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.PC08WSWM = "1"; /* request for map switch*/
  PC08W00.XXXPRCNM = "PC08S67";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S67"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM06"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM06.VPOITM06-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S67 ***********************/
end // end PC08S67

// Select the p.o. size row
Function PC08S68()

   /* ------------------------------------------------------------*/
   /* Select the FOB data from the VPOSIZ02 database.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to pc08261*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S68"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. DEST. SIZE PLAN ROW";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC08M001.XXXPRCNM = "PC08S68"; /* Process name*/

  exit stack; /* Exit to redisplay map*/

end // end PC08S68

// Select (S ) Unique    VPOHDR01
Function PC08S80()
   /* ------------------------------------------------------------*/
   /* Select the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PC08W00.XXXPRCNM = "PC08S80"; /* Process name*/
      converseLib.validationFailed(12); /* Updated by Another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (PC08W00.PC08WPFL == "Y") /* ==>print flag confirm flag*/

    PC08W00.XXXTSPAG = PC08W00.PC08WPAG; /* ===> saved page*/
    PC08S44(); /* Obtain temporary storage page*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.XXXPRCNM = "PC08S80"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S80"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S80 ***********************/
end // end PC08S80

// Update (U ) Header    VPOHDR01
Function PC08S81()
   /* ------------------------------------------------------------*/
   /* Update the P.O. Header table row*/
   /* ------------------------------------------------------------*/

  VPOHDR02.PC3PRTDT = XX0XW01.XX0XWDAT;
  VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PCYREC.PCYFUNC = "U ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row found*/
      PC08W00.XXXPRCNM = "PC08S81"; /* Process name*/
      converseLib.validationFailed(12); /* Indicate system error*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all changes*/
      exit stack; /* Return to previous process*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  if (PC08W00.PC08WPFL == "Y") /* ==>print flag confirm flag*/

    PC08W00.XXXTSPAG = PC08W00.PC08WPAG; /* ===> saved page*/
    PC08S44(); /* Obtain temporary storage page*/

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC08W00.XXXPRCNM = "PC08S81"; /* Process name*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC08S81"; /* Process name*/
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1LOC = "UPDATE P.O. HEADER ROW";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC08S81 ***********************/
end // end PC08S81

//*** RECORD=PC08W00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -W.S. date fields
//    -W.S. JCL execute statement
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PC08W00 type basicRecord
  10 PC08WKEY PC08WKEY ; 
    15 PC08WKY1 PC08WKY1 ; 
    15 PC08WKY2 PC08WKY2 ; 
  10 PC08WSWR PC08WSWR ; 
  10 PC08WHDL PC08WHDL ; 
  10 PC08WSWM PC08WSWM ; 
  10 PC08WSWU PC08WSWU ; 
  10 PC08WSWC PC08WSWC ; 
  10 PC08WFLG PC08WFLG ; 
  10 PC08WFLG1 PC08WFLG1 ; 
  10 PC08WSWT PC08WSWT ; 
  10 PC08WSWF PC08WSWF ; 
  10 PC08WXIT PC08WXIT ; 
  10 PC08WMOD PC08WMOD ; 
  10 PC08WFL1 PC08WFL1 ; 
  10 PC08W-PRT-FORM-FL PC08W-PRT-FORM-FL ; 
  10 PC08WMFL PC08WMFL ; 
  10 PC08WPFL PC08WPFL ; 
  10 PC08WP20 PC08WP20 ; 
  10 TA6SUBSW TA6SUBSW ; 
  10 PC08WNFO PC08WNFO [13] ; 
  10 PC08WFSE PC08WFSE [13] ; 
  10 PC08WFOB PC08WFOB ; 
  10 PC08WCMF PC08WCMF ; 
  10 * char(1) ; 
  10 PC08WIXR PC08WIXR ; 
  10 PC08WIXM PC08WIXM ; 
  10 PC08WCTR1 PC08WCTR1 ; 
  10 PC08WCTR2 PC08WCTR2 ; 
  10 PC08WCTR3 PC08WCTR3 ; 
  10 PC08WIXT PC08WIXT ; 
  10 PC08WIXF PC08WIXF ; 
  10 PC08WIX1 PC08WIX1 ; 
  10 PC08WIX2 PC08WIX2 ; 
  10 PC08W-SAV-IDX PC08W-SAV-IDX ; 
  10 * char(1) ; 
  10 PC08WMAX PC08WMAX ; 
  10 PC08WCTR PC08WCTR ; 
  10 PC08WJOB PC08WJOB ; 
  10 PC08WRMD PC08WRMD ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PC08WPAG PC08WPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PC08MFTT PC08MFTT ; 
  10 * char(1) ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC08MSEL PC08MSEL ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 * char(1) ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC08MPCC PC08MPCC ; 
    15 PC08MPYR PC08MPYR ; 
    15 PC08MPMO PC08MPMO ; 
    15 PC08MPDM PC08MPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC08WMM PC08WMM ; 
    15 PC08WDD PC08WDD ; 
    15 PC08WCC PC08WCC ; 
    15 PC08WYY PC08WYY ; 
  10 * char(1) ; 
  10 PC08WDT1 PC08WDT1 ; 
    15 PC08WYY1 PC08WYY1 ; 
    15 PC08WMM1 PC08WMM1 ; 
    15 PC08WDD1 PC08WDD1 ; 
  10 * char(1) ; 
  10 PC08WMMA PC08WMMA ; 
    15 PC08WMMN PC08WMMN ; 
  10 * char(1) ; 
  10 PC08WWSA PC08WWSA ; 
    15 PC08WWSN PC08WWSN ; 
  10 * char(1) ; 
  10 PC08WMSG PC08WMSG ; 
    15 * char(4) ; 
    15 PC08WMS1 PC08WMS1 ; 
    15 PC08WMS2 PC08WMS2 ; 
    15 PC08WMS3 PC08WMS3 ; 
    15 PC08WMS4 PC08WMS4 ; 
  10 * char(4) ; 
  10 PC08WJCE PC08WJCE ; 
    15 PC08WEX1 PC08WEX1 ; 
    15 PC08WPNM PC08WPNM ; 
    15 * char(57) ; 
  10 PC08WJCJ PC08WJCJ ; 
    15 PC08WJB1 PC08WJB1 ; 
    15 PC08WJNM PC08WJNM ; 
    15 PC08WJB2 PC08WJB2 ; 
    15 PC08WTYP PC08WTYP ; 
    15 PC08WJB3 PC08WJB3 ; 
    15 * char(34) ; 
  10 PC08WJCO PC08WJCO ; 
    15 PC08WFRM PC08WFRM ; 
      20 PC08WFR1 PC08WFR1 ; 
      20 PC08WFM1 PC08WFM1 ; 
      20 PC08WFR2 PC08WFR2 ; 
      20 PC08WFM2 PC08WFM2 ; 
      20 PC08WFR3 PC08WFR3 ; 
    15 PC08WDST PC08WDST ; 
      20 PC08WDS1 PC08WDS1 ; 
      20 PC08WDS2 PC08WDS2 ; 
    15 * char(34) ; 
  10 PC08WAJCD PC08WAJCD ; 
    15 PC08WALN1 PC08WALN1 ; 
    15 PC08WARMT PC08WARMT ; 
    15 PC08WALN2 PC08WALN2 ; 
  10 PC08WJCD PC08WJCD ; 
    15 PC08WLN1 PC08WLN1 ; 
    15 PC08WRMT PC08WRMT ; 
    15 PC08WLN2 PC08WLN2 ; 
    15 * char(30) ; 
  10 PC08WLN18 PC08WLN18 ; 
  10 PC08WLN19 PC08WLN19 ; 
  10 PC08WLN20 PC08WLN20 ; 
  10 PC08WLN21 PC08WLN21 ; 
  10 PC08WLN3 PC08WLN3 ; 
    15 PC08WLN22 PC08WLN22 ; 
    15 PC08WLN23 PC08WLN23 ; 
    15 PC08WLN24 PC08WLN24 ; 
    15 PC08WLN25 PC08WLN25 ; 
  10 PC08WLN26 PC08WLN26 ; 
  10 PC08WLN27 PC08WLN27 ; 
  10 PC08WLN28 PC08WLN28 ; 
  10 PC08WLN29 PC08WLN29 ; 
  10 PC08WLN30 PC08WLN30 ; 
  10 PC08WLN35 PC08WLN35 ; 
  10 PC08WLN36 PC08WLN36 ; 
  10 PC08WLN5 PC08WLN5 ; 
  10 PC08WLN6 PC08WLN6 ; 
  10 PC08WLN13 PC08WLN13 ; 
  10 PC08WLN14 PC08WLN14 ; 
  10 PC08WLN15 PC08WLN15 ; 
  10 PC08WLN16 PC08WLN16 ; 
  10 PC08WLN7 PC08WLN7 ; 
  10 PC08WLN8 PC08WLN8 ; 
  10 PC08WLN9 PC08WLN9 ; 
  10 PC08WLN10 PC08WLN10 ; 
  10 PC08WJCD2 PC08WJCD2 ; 
    15 PC08WLN11 PC08WLN11 ; 
    15 PC08WRMT2 PC08WRMT2 ; 
    15 PC08WLN12 PC08WLN12 ; 
  10 PC08WLN31 PC08WLN31 ; 
  10 PC08WLN32 PC08WLN32 ; 
  10 PC08WJCD3 PC08WJCD3 ; 
    15 PC08WLN33 PC08WLN33 ; 
    15 PC08WRMT3 PC08WRMT3 ; 
    15 PC08WLN34 PC08WLN34 ; 
  10 PC08WRMT4 PC08WRMT4 ; 
end // end PC08W00

//*** RECORD=PC08W01 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PC08M.PC08M001
// 
//    RECORD NAME:      PC08W01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list map.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list map PC08M002.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PC08W01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC08TKEY PC08TKEY ; 
    15 PC08TONE PC08TONE ; 
    15 PC08TTWO PC08TTWO ; 
  10 PG1SC4CD PG1SC4CD ; 
  10 CAUSERID CAUSERID ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC08WHGH PC08WHGH ; 
  10 PC08WLOW PC08WLOW ; 
  10 TA2GRGE TA2GRGE ; 
    15 PC08MPYR PC08MPYR ; 
    15 PC08MPMO PC08MPMO ; 
    15 PC08MPDM PC08MPDM ; 
  10 PCFSECD PCFSECD ; 
  10 PCFSEYR PCFSEYR ; 
  10 PC08WYR1 PC08WYR1 ; 
  10 PC08WYR2 PC08WYR2 ; 
  10 PCFBUYMO PCFBUYMO ; 
  10 PC08WMO1 PC08WMO1 ; 
  10 PC08WMO2 PC08WMO2 ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 XSECD XSECD ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 YPUCD YPUCD ; 
  10 PC4SDESC PC4SDESC ; 
  10 PC08MDSC PC08MDSC ; 
  10 PC08MTYP PC08MTYP ; 
  10 PC3PRTIN PC3PRTIN ; 
  10 PC08MPTO PC08MPTO ; 
  10 PC08MUPC PC08MUPC ; 
end // end PC08W01

//*** RECORD=PC08W02 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **                   LIST SCREEN                          **
// **                                                        **
// 
//            MAP:      PC08M.PC08M002
// 
//    RECORD NAME:      PC08W02
// 
//       This record is a working storage record to load and
//    extract data for the list screen to and from temporary
//    storage.
//       It holds information that was selected by entering
//    selection criteria from the selection map and is the
//    the source for loading the pass record to the Batch
//    programs.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PC08W02 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 PC08WRC2 PC08WRC2 [13] ; 
    4 XGPCD XGPCD ; 
    4 PO-REG-CD PO-REG-CD ; 
    4 PC08MSEL PC08MSEL ; 
    4 PC08MPID PC08MPID ; 
      5 PC08MPYR PC08MPYR ; 
      5 PC08WDH1 PC08WDH1 ; 
      5 PC08MPMO PC08MPMO ; 
      5 PC08WDH2 PC08WDH2 ; 
      5 PC08MPDM PC08MPDM ; 
      5 PC08WDH3 PC08WDH3 ; 
      5 FY1FCTYC FY1FCTYC ; 
    4 PC3PONBR PC3PONBR ; 
    4 PC4ORTYP PC4ORTYP ; 
    4 YPUCD YPUCD ; 
    4 SY1STNBR SY1STNBR ; 
    4 PC2CUXID PC2CUXID ; 
    4 XWHCD XWHCD ; 
    4 PC-SAP-LEGAL-PO-FL PC-SAP-LEGAL-PO-FL ; 
    4 PC3PRTIN PC3PRTIN ; 
end // end PC08W02

//*** RECORD=PC08W04 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **               JCL W.S. Pass record                     **
// **                   (DD * cards)                         **
// 
//    RECORD NAME:      PC08W04
// 
//    COPYLIB    :      WPC1210 (used by Batch programs)
// 
//       This record is a working storage record to save and
//    and load an array of P.O. Numbers for JCL submisson.
//       It holds information that the user has selected
//    from the list screen and is load to the TA6REC enabling
//    the JOB SUBMITTER SUBROUTINE (XPTAOP) to submit the job
//    appropriatly.  The COPYLIB member is the ++include that
//    the batch programs use in there processing of the data
//    passed.
// 
// **                                                        **
// **                                                        **
// ************* PRODUCTION ORDER MAP RECORD ******************
// ***********************
Record PC08W04 type basicRecord
  5 PC08WRC4 PC08WRC4 [80] ; 
    10 XGPCD XGPCD ; 
    10 PC08WNBR PC08WNBR ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC08WCMT char(60) ; // comment line
    10 * char(7) ; 
end // end PC08W04

//*** RECORD=PC08W05 ****
// ************************************************************
// *
// *     WORKING STORAGE FOR PC08
// *     USED TO PASS PARMS TO UPC FORM PRINT PROGRAM PC412D
// *
// *
// *   DATE             USERID        COMMENTS
// * ________         __________     ________________________
// * 07/08/91          lsutto         new record
// *
// ************************************************************
// ***********************
Record PC08W05 type basicRecord
  10 PC08WJCL PC08WJCL [70] ; 
    15 XGPCD XGPCD ; 
    15 PCFSECD PCFSECD ; 
    15 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC08WPON PC08WPON ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 * num(8) ; 
    15 * num(8) ; 
    15 PC08WABS PC08WABS ; 
    15 * char(1) ; 
    15 * char(33) ; 
end // end PC08W05

//*** RECORD=PC08W06 ****
// ************************************************************
// *
// *     WORKING STORAGE FOR PC08
// *     USED TO PASS PARMS TO UPC FORM PRINT PROGRAM PC412D
// *
// *
// *   DATE             USERID        COMMENTS
// * ________         __________     ________________________
// * 07/08/91          lsutto         new record
// *
// ************************************************************
// ***********************
Record PC08W06 type basicRecord
  10 PC08WJCL PC08WJCL [70] ; 
    15 XGPCD XGPCD ; 
    15 PCFSECD PCFSECD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC08WPON PC08WPON ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 * num(8) ; 
    15 * num(8) ; 
    15 PC08WABS PC08WABS ; 
    15 * char(1) ; 
    15 * char(1) ; 
    15 * char(36) ; 
end // end PC08W06

// P.O. Type format description
DataItem PC08MDSC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prev Message number
DataItem PC08MFTT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// P.O. ID Production century
DataItem PC08MPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PC08MPDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID display field
DataItem PC08MPID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Month
DataItem PC08MPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_OP_PTO_PRINT_IND
DataItem PC08MPTO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Year
DataItem PC08MPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// saved Print request sel. field
DataItem PC08MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Type format code
DataItem PC08MTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_OP_UPC_PRINT_IND
DataItem PC08MUPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TFRM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TJOB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TKEY-PO-RMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc
DataItem PC08TONE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TPRC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po type
DataItem PC08TTWO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08TUPC-RMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print form flag
DataItem PC08W-PRT-FORM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws for temp save of TA6INDEX
DataItem PC08W-SAV-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// apparel buy data switch
DataItem PC08WABS char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WAJCD char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WALN1 char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WALN2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WARMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC08WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB Comfirmation flag (Y/N)
DataItem PC08WCMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter for # of DD * cards
DataItem PC08WCTR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map/T.S. fields
DataItem PC08WCTR1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map/T.S. fields
DataItem PC08WCTR2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map/T.S. fields
DataItem PC08WCTR3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ETS date day map display
DataItem PC08WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. date day
DataItem PC08WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dash literal 1
DataItem PC08WDH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash literal 2
DataItem PC08WDH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash literal 3
DataItem PC08WDH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WDS1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WDS2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'copies=,dest=' literal
DataItem PC08WDST char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W.S. date field (CCYYMMDD)
DataItem PC08WDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement constants 1
DataItem PC08WEX1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag 1 (temp use)
DataItem PC08WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Good Po found switch
DataItem PC08WFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Good Po found switch
DataItem PC08WFLG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code
DataItem PC08WFM1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// form code
DataItem PC08WFM2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No FOB data flag (Y/N)
DataItem PC08WFOB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 1
DataItem PC08WFR1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 2
DataItem PC08WFR2 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forms literal 3
DataItem PC08WFR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'forms=pc14,' format line
DataItem PC08WFRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array of selection field
DataItem PC08WFSE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Handle switch for vitem001
DataItem PC08WHDL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG High date
DataItem PC08WHGH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp use
DataItem PC08WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for FOB counter
DataItem PC08WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for (Finder index)
DataItem PC08WIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map/T.S. fields
DataItem PC08WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for W.S. pass record
DataItem PC08WIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for JCL Table
DataItem PC08WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job literal "//"
DataItem PC08WJB1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job literal desc
DataItem PC08WJB2 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job literal ")  ',"
DataItem PC08WJB3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Aprl rept001 card
DataItem PC08WJCD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WJCD2 char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WJCD3 char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execute statement group
DataItem PC08WJCE char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job card statment group
DataItem PC08WJCJ char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output card statment group
DataItem PC08WJCO char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job name
DataItem PC08WJNM char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # of jobs to submit
DataItem PC08WJOB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Redifine table key values
DataItem PC08WKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table key value 1
DataItem PC08WKY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table key value 2
DataItem PC08WKY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '//REPT001  DD  SYSOUT=A,...'
DataItem PC08WLN1 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN10 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN11 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN12 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN13 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN14 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN15 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN16 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN18 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN19 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ',OUTPUT=*.OUT01'
DataItem PC08WLN2 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN20 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN21 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN22 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN23 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN24 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN25 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN26 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN27 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN28 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN29 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN3 char(170)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN30 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN31 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN32 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN33 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN34 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN35 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN36 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN5 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN6 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN7 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN8 char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WLN9 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG Low  date
DataItem PC08WLOW int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Max # of DD * cards allowed
DataItem PC08WMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Multiple Order types flag
DataItem PC08WMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PC08WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. date month
DataItem PC08WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char.   data form month
DataItem PC08WMMA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric data form month
DataItem PC08WMMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_BUY_MO wk field1
DataItem PC08WMO1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_BUY_MO wk field2
DataItem PC08WMO2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem PC08WMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 1 (# of reports)
DataItem PC08WMS1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 2 ( message text)
DataItem PC08WMS2 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 3 (# of jobs)
DataItem PC08WMS3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message 4 ( message text)
DataItem PC08WMS4 char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message W.S. Area
DataItem PC08WMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PC08WNBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// No FOB data flag (Y/N)
DataItem PC08WNFO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF20 Flag
DataItem PC08WP20 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save Current T.S. page
DataItem PC08WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Print flag
DataItem PC08WPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc name
DataItem PC08WPNM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number
DataItem PC08WPON num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// group level array - JB changed length to 41 from 43
DataItem PC08WRC2 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Batch group level record
DataItem PC08WRC4 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remainder W.S. area
DataItem PC08WRMD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// printer destination
DataItem PC08WRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WRMT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WRMT3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC08WRMT4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PC08WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PC08WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC08WSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC08WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC08WSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update  for data switch (T.S.)
DataItem PC08WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO type
DataItem PC08WTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char.   W.S.
DataItem PC08WWSA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric W.S.
DataItem PC08WWSN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PC08WXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc_po_id_buy_yr wk field1
DataItem PC08WYR1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pc_po_id_buy_yr wk field2
DataItem PC08WYR2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PC08WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. PC_SESN_YR
DataItem PC08WYY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end