package pc05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import nl.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC05 ****
//   This application will allow the user to inquire or
// override a P.O. item's onetime shipment address that is
// going to a warehouse destination or customer destination.
// 
//   The user has the ability  to enter this application in
// inquiry mode through three screens: (PC0K,PC0U,PC0R -->PF14)
// 
//   To override the shipment destination, the user will
// have to enter this application from either of two screens:
//      (PC0E -->PF6  or  PC0K in change mode -->PF114).
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
// 05/11/89   JNEWMA         New application.
// 06/11/91   chaert         db2 changes. move so # from po itm
//                           to po audit itm, pc05302
// 01/28/93   KSANFO         Added second map, and all modules
// named PC052--, for the purpose of displaying Nil addresses
// in Inquiry Mode, in same format that will print on PO Forms.
// The Nil address for inquiry display only, is retrieved from
// DNILO.VLADDR01.
// In Update Mode, when creating an ovverride address for a NIL
// PO Item, will still use the address on DCUST.VADDR001.
// *
// 06/18/93   KSANFO         DB2 Structure Change - enhanced
//                           VPOIAD01 for larger format NIL
//                           addresses. Deleted all map002
//                           processes, and combined all NIL
//                           address processing into map001.
// 07/16/93   KSANFO         whse address line2 not displayed
//                           fix: PC05113
// 11/08/93   chaert         db2 changes. xxx-addr.
// 10/19/94   chaert         change pc05117,pc05115. correct
//                           display of factory and store name.
// 08/07/96   RMCAFE         modified to show 'ship to' address
//                           from sales order for the purchase
//                           order types MM,MD,DS,DC.
// 09/09/96   RMCAFE         added logic to show dept in addr
// 12/04/96   jniese         pca999 - address line 2 change
//                           made on 7/16/93 was not correct.
// 02/12/97   kgraha         Bypass NIL address lookup in
//                           PC05118 for Apparel PO type PX.
// 07/12/97   jniese         pca367 - ppr corrections
// 10/15/97   jniese         pca999 - Change to get whse ctry
//                           code from table - was defaulting
//                           to "USA". - pc05113
// 09/22/98   RMOHA1         pca302 - Changed PC05162 toPERFORM
//                           PC05161 when row found in VPOIAD01
//                           to fix the bug.
// 05/19/00   RSELVA         Check if the Product is Spain
//                           compliant.    Added: PC05S101
//                                      Modified:  PC05150
// 08/11/00   RSELVA         Fetch Override/Whse Addr only
//                           for SAP POs.  Modified: PC05110
//                           Change reference to VPOITM05.
// 03/12/02   NPULUG         Calling a new IOMOD VPOIAD02
//                           instead of IO3290.The change is
//                           for loading seq# and reg cd
//                           in TPOIAD00 table.
// *********************
Program PC05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  OP1REC OP1REC; // record
  OP5REC OP5REC; // record
  PC05W00 PC05W00; // record
  PC05W01 PC05W01; // record
  PC05W02 PC05W02; // record
  PC05W03 PC05W03; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC9REC PC9REC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VLADDR01 VLADDR01; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOIAD02 VPOIAD02; // record
  VPOITM05 VPOITM05; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOATBL; // table
  use PC05M.PC05M010,  // forms
      PC05M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/

    goto PC05001; /* Special Initialization*/

    PC05001: PC05001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/

    goto PC05002; /* Converse main process*/
    PC05002: PC05002();
     /* ------------------------------------------------------------*/
     /* main recursive flow*/
     /* ------------------------------------------------------------*/

    goto PC05002; /* recursive flow*/

  end // end main
end // end PC05

// Special Initialization
Function PC05001()
   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  set PC05W00 empty; /* Initialize working storage*/
  set PC05W01 empty; /* Initialize map storage area*/
  set PC05W02 empty; /* Initialize map storage area*/
  set PC05W03 empty; /* Initialize map storage area*/
  set PC05M010 initial; /* M010 input/output*/
  set PCYREC empty; /* Initialize IO communication rec*/
  set OP1REC empty; /* Initialize order header record*/
  set OP5REC empty; /* Initialize order layout*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/
  PC05M010.XXXPRCNM = "PC05"; /* Module identification*/

  if (PC05M010.XGPCD in XGPTBL.XGPCD)
    PC05M010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* GPC desc*/

  if (COMMAREA.CAFROMAP == "PC0I") /* If coming from PC0I*/
    /* ------------------------------------------------------------*/
     /* When transferring from your application to a lower level*/
     /* find the first empty Cafromap entry in the PCWREc array*/
     /* and move your application id to that field. Use the*/
     /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
     /* array. You should also use the Pcwrec.Pcwfunc(1) if*/
     /* your application is using this field.*/
     /* On reentry into your applicaton from a 'called'*/
     /* application find your appl id in the cafrommap*/
     /* array and use the corresponding pcwuser(n). Move*/
     /* spaces to the  cafromap field containing the name of*/
     /* the 'called' application.*/
    /* ------------------------------------------------------------*/

    PC05W00.PC05WOVR = "Y"; /* Set flag for update mode*/
    PC05W00.PC05WIX1 = 1; /* Initialize index*/
    while (PCWREC.CAFROMAP[PC05WIX1] != "PC05" /* Find PC05 in levels*/
     && PC05W00.PC05WIX1 < 4)
      PC05W00.PC05WIX1 = PC05W00.PC05WIX1 + 1; /* Increment index*/
    end
    if (PCWREC.CAFROMAP[PC05WIX1] == "PC05") /* If PC0I from here*/
      PCWREC.CAFROMAP[PC05WIX1] = " "; /* Clear this level*/
      if (PC05W00.PC05WIX1 == 1)
        PC05W00.PC05W0GP = PCWREC.PCWUSER1; /* Restore data*/
      else
        if (PC05W00.PC05WIX1 == 2)
          PC05W00.PC05W0GP = PCWREC.PCWUSER2;
        else
          if (PC05W00.PC05WIX1 == 3)
            PC05W00.PC05W0GP = PCWREC.PCWUSER3;
          else
            if (PC05W00.PC05WIX1 == 4)
              PC05W00.PC05W0GP = PCWREC.PCWUSER4;
            end
          end
        end
      end
      PC05W00.PC05WSPI = "Y"; /* Allow exit to special instr.*/
      COMMAREA.CAFROMAP = PC05W00.CAFROMAP; /* Restore calling appl*/
    else
      PC05W00.PC05WSPI = "N"; /* Not allow exit to special instr.*/
    end
  else
    if (COMMAREA.CAFROMAP == "PC0E") /* If coming from PC0E*/
      PC05W00.PC05WOVR = "Y"; /* Set flag for update mode*/
      PC05W00.PC05WSPI = "Y"; /* Allow exit to special instr.*/
    else
      if (COMMAREA.CAFROMAP == "PC0K") /* If coming from PC0K*/
        PC05W00.PC05WIX1 = 1; /* Initialize index*/
        while (PCWREC.CAFROMAP[PC05WIX1] != "PC0K") /* Find PC0K in levels*/
          PC05W00.PC05WIX1 = PC05W00.PC05WIX1 + 1; /* Increment index*/
        end
        if (PCWREC.PCWFNC[PC05WIX1] == "C") /* If change function*/
          PC05W00.PC05WOVR = "Y"; /* Set flag for update mode*/
          PC05W00.PC05WSPI = "Y"; /* Allow exit to special instr.*/
        else
          PC05W00.PC05WOVR = "N"; /* Set flag for inq mode*/
          PC05W00.PC05WSPI = "N"; /* Not allow exit to special instr.*/
        end
      else
        if (COMMAREA.CAFROMAP == "PC0U" /* If from PC0U*/
         || COMMAREA.CAFROMAP == "PC0R") /* or from PC0R*/
          PC05W00.PC05WOVR = "N"; /* Set flag for inq mode*/
          PC05W00.PC05WSPI = "N"; /* Not allow exit to special instr.*/
          set PC05M010.CATOAP cursor; /* Cursor on option*/
        else /* If not a valid from appl*/
          COMMAREA.CATOAP = "PC0A"; /* Return to PC menu*/
          PCWREC.XXXMSGNO = 191; /* Cannot fastpath to here*/
          XSPCS01(); /* Transfer to original appl*/
          exit stack; /* Display message if transfer error*/
        end
      end
    end
  end

end // end PC05001

// P.O. onetime shipment address
Function PC05002()
   /* ------------------------------------------------------------*/
   /* process nil and domestic addresses*/
   /* ------------------------------------------------------------*/

  PC05W00.PCWMAP = 1;
  PC05100(); /* Address process*/

end // end PC05002

// Address process
Function PC05100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC05110(); /* Obtain data to display*/

  PC05120(); /* Format and display the map*/

  PC05130(); /* Check attention identifier*/

  PC05140(); /* Reset fields to normal intensity*/

  PC05150(); /* Verify the entered data*/

  PC05160(); /* Process valid input request*/

end // end PC05100

// Obtain data to display
Function PC05110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC05W00.PC05WSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC05W00.PC05WSWR = "N"; /* display data switch*/

   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM05 ( P.O. ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC05S01(); /* Open cursor for VPOITM05*/

   /* ------------------------------------------------------------*/
   /* Fetch the first VPOITM05 row*/
   /* ------------------------------------------------------------*/

  PC05S02(); /* Get first VPOITM05 row*/

  if (PC05W00.PC05WDCF == "Y") /* If no item is found*/
    converseLib.validationFailed(10); /* Error - notify programming*/
    PC05M010.XXXPRCNM = "PC05100"; /* Module identification*/
    exit stack; /* Display message*/
  end

   /*  */
   /* Fetch until the item no passed to this appl is obtained*/
  while (VPOITM05.PC6PLAN != PCWREC.PC6PLAN
   && PC05W00.PC05WDCF == "N")
    PC05S02();
  end
   /* ------------------------------------------------------------*/
   /* IO to close VPOITM05 set*/
   /* ------------------------------------------------------------*/
  PC05S04(); /* Close cursor for VPOITM05*/

   /* ---------------------------------------------------*/
   /* Get the P.O. type description  - IO3320*/
   /* ---------------------------------------------------*/
  PC05111();

   /* -----------------------------------------------------------------*/
   /* Only For Non SAP POs,  Get Std Addr from various GOAL Tables*/
   /* And Overwrite Std Addr with Override Addr based on override flag*/
   /* -----------------------------------------------------------------*/

  if (VPOITM05.PC-SAP-PO-NBR == " ")

    if (VPOITM05.PC4ORTYP == "MM"
     || VPOITM05.PC4ORTYP == "MD"
     || VPOITM05.PC4ORTYP == "DS"
     || VPOITM05.PC4ORTYP == "DC")
      PC05171();
      PC2REC.KUCCOID = OP1REC.KUCCOID;
      PC2REC.KUMSTRID = OP1REC.KUMSTRID;
      PC05115();
      PC05170();
    else

      if (PCWREC.XWHCD != " ") /* If warehouse code present*/
        /* ---------------------------------------------------*/
        /* Get the warehouse address - XWHTBL*/
        /* ---------------------------------------------------*/
        PC05113();
      else
        /* ---------------------------------------------------*/
        /* Get the YPC code from customer xref table - IO3340*/
        /* ---------------------------------------------------*/
        PC05114();
        if (PC2REC.YPCCD == "C")
          PC05M010.XWHNM = PC2REC.PC2NAME; /* Customer name*/
          /* ---------------------------------------------------*/
          /* Get the address id - IO0340*/
          /* ---------------------------------------------------*/
          PC05115();
          if (VPOITM05.YSMXDV == "20")
        /* ---------------------------------------------------*/
            /* Get NIL customer address*/
        /* ---------------------------------------------------*/
            if (VPOITM05.PC4ORTYP == "PX")
           /* NEXT SENTENCE*/
            else
              PC05118();
            end
          else
        /* ---------------------------------------------------*/
         /* Get DOM address - IO0170*/
        /* ---------------------------------------------------*/
            PC05116();
          end
        else
          if (PC2REC.YPCCD == "S")
            /* ---------------------------------------------------*/
            /* Get factory address - IO2810*/
            /* ---------------------------------------------------*/
            PC05117();
          else
            if (PC2REC.YPCCD == "N")
              /* ---------------------------------------------------*/
              /* Get NIKE person from the customer xref table row*/
              /* ---------------------------------------------------*/
              PC05M010.XWHNM = PC2REC.PC2NAME; /* Customer name*/
              PC05W01.PC3ATTEN = PC2REC.PC2NAME; /* Attention name*/
            end
          end
        end
      end
    end
    if (VPOITM05.PC61TMSH == "Y") /* If override*/
      /* ---------------------------------------------------*/
      /* Get the override address data  - IO3290*/
      /* ---------------------------------------------------*/
      PC05112();
    else
      if (PCWREC.XXXMSGNO == 0) /* If no information message to display*/
        PCWREC.XXXMSGNO = 120; /* No override address - standard shown*/
      end
    end

    /* ------------------------------------------------------------------*/
    /* For SAP POs, Get Override Addr / Whse Addr based on override flag*/
    /* ------------------------------------------------------------------*/
  else

    if (VPOITM05.PC61TMSH == "Y") /* If override*/
      /* ---------------------------------------------------*/
      /* Get the override address data  - IO3290*/
      /* ---------------------------------------------------*/
      PC05112();
    else
      /* ---------------------------------------------------*/
      /* Get the warehouse address - XWHTBL*/
      /* ---------------------------------------------------*/
      PC05113();
    end

  end /* End If sap-po-nbr =  spaces*/
end // end PC05110

// Get P.O. type description
Function PC05111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format PC4REC with key values for select set*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC4REC.PC4ORTYP = VPOITM05.PC4ORTYP; /* P.O. type code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      PC05M010.PC4DESC = PC4REC.PC4DESC; /* P.O. type description*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Description not found*/
        PC4REC.PC4DESC = "** DESCRIPTION NOT FOUND **";
                                   /* Description*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC4REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKA2 = PC4REC.PC4ORTYP; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05111

// Get override address- VPOIAD01
Function PC05112()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table row access.*/
   /* ------------------------------------------------------------*/

  PC9REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC9REC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. number*/
  PC9REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style number*/
  PC9REC.SY2CLRID = VPOITM05.SY2CLRID; /* Identifying color*/
  PC9REC.XDMCD = VPOITM05.XDMCD; /* Dimension code*/
  PC9REC.XQACD = VPOITM05.XQACD; /* Quality code*/
  PC9REC.XOWCD = VPOITM05.XOWCD; /* Owner group code*/
  PC9REC.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference code*/
  PC9REC.XPGCD = VPOITM05.XPGCD; /* Packaging type code*/
  PC9REC.XUMCD = VPOITM05.XUMCD; /* Unit of measure code*/
  PC9REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer xref ID*/
  PC9REC.XWHCD = VPOITM05.XWHCD; /* Warehouse code*/

   /*  */
  set VPOIAD02 empty;
  VPOIAD02.XGP-GPC-CD = VPOITM05.XGPCD; /* GPC code*/
  VPOIAD02.PC-PO-NBR = VPOITM05.PC3PONBR; /* P.O. number*/
  VPOIAD02.PC-ITM-SEQ-NBR = VPOITM05.PC6ITMNB; /* item seq no*/
  VPOIAD02.PO-REG-CD = VPOITM05.PO-REG-CD; /* po reg code*/
   /* ------------------------------------------------------------*/
   /* Get the override address data.*/
   /* Calling new iomod vpoiad02 to use reg cd and seq#*/
   /* ------------------------------------------------------------*/

   /* CALL IO3290 'S ',SQLCA,PC9REC (NOMAPS,NONCSP,REPLY;*/
  try
    call "VPOIAD02" ("S ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end

   /*  */
   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

   /*  */
    PC9REC.PC3ATTEN = VPOIAD02.PC-ATTN-NM; /* Attention name*/
    PC9REC.XXX-ADDR1 = VPOIAD02.XXX-ADDR1;
    PC9REC.XXX-ADDR2 = VPOIAD02.XXX-ADDR2;
    PC9REC.XXX-ADDR3 = VPOIAD02.XXX-ADDR3;
    PC9REC.XXX-ADDR4 = VPOIAD02.XXX-ADDR4;
    PC9REC.XXX-ADDR5 = VPOIAD02.XXX-ADDR5;
    PC9REC.XXX-ADDR6 = VPOIAD02.XXX-ADDR6;
    PC9REC.XXXCITY = VPOIAD02.XXX-CITY; /* City*/
    PC9REC.XSTCD = VPOIAD02.XST-ST-CD; /* State code*/
    PC9REC.XCTCD = VPOIAD02.XCT-CTRY-CD; /* Country code*/
    PC9REC.XXXZIP = VPOIAD02.XXX-ZIP; /* Zip code*/
   /*  */
    PC05W01.PC3ATTEN = PC9REC.PC3ATTEN; /* Attention name*/
    PC05W01.XXX-ADDR1 = PC9REC.XXX-ADDR1;
    PC05W01.XXX-ADDR2 = PC9REC.XXX-ADDR2;
    PC05W01.XXX-ADDR3 = PC9REC.XXX-ADDR3;
    PC05W01.XXX-ADDR4 = PC9REC.XXX-ADDR4;
    PC05W01.XXX-ADDR5 = PC9REC.XXX-ADDR5;
    PC05W01.XXX-ADDR6 = PC9REC.XXX-ADDR6;
    PC05W01.XXXCITY = PC9REC.XXXCITY; /* City*/
    PC05W01.XSTCD = PC9REC.XSTCD; /* State code*/
    PC05W01.XCTCD = PC9REC.XCTCD; /* Country code*/
    PC05W01.XXXZIP = PC9REC.XXXZIP; /* Zip code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC05W00.PC05WKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05112

// Get warehouse address - XWHTBL
Function PC05113()
   /* ------------------------------------------------------------*/
   /* Get the warehouse address*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.XWHCD in XWHTBL.XWHCD)
    PC05W01.XXX-ADDR1 = XWHTBL.XXX-ADDR1[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.arrayIndex != 0) /* Table lookup successful*/

    PC05M010.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex]; /* Warehouse name*/
    PC05W01.XXX-ADDR1 = XWHTBL.XWHNM[sysVar.arrayIndex]; /* whse name*/
    PC05W01.XXX-ADDR2 = XWHTBL.XXX-ADDR1[sysVar.arrayIndex]; /* 1st addrs line*/
    PC05W01.XXX-ADDR3 = XWHTBL.XXX-ADDR2[sysVar.arrayIndex]; /* 2nd addrs line*/
    PC05W01.XXX-ADDR4 = " ";
    PC05W01.XXX-ADDR5 = " ";
    PC05W01.XXX-ADDR6 = " ";
    PC05W01.XXXCITY = XWHTBL.XXXCITY[sysVar.arrayIndex]; /* City*/
    PC05W01.XSTCD = XWHTBL.XSTCD[sysVar.arrayIndex]; /* State code*/
    PC05W01.XXXZIP = XWHTBL.XXXZIP[sysVar.arrayIndex]; /* Zip code*/
    PC05W01.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* Country code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* ------------------------------------------------------------*/

  PC05M010.XXXPRCNM = "PC05113"; /* Module identification*/
  converseLib.validationFailed(10); /* 'error - please nofity programming'*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  exit stack; /* Exit to display map*/

end // end PC05113

// Get the YPC code    - VPRDCU01
Function PC05114()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC2REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer ID*/

   /* ------------------------------------------------------------*/
   /* Get the YPC code from the customer xref table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC2REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKA2 = PC2REC.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05114

// Get the address id  - VSTORE01
Function PC05115()
   /* ------------------------------------------------------------*/
   /* Load the key data for table access.*/
   /* ------------------------------------------------------------*/

  KUMREC.KUCCOID = PC2REC.KUCCOID; /* Company ID*/
  KUMREC.KUMSTRID = PC2REC.KUMSTRID; /* Store ID*/

   /* ------------------------------------------------------------*/
   /* Get the address id.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    PC05M010.XWHNM = KUMREC.KUMSTRNM;
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKN1 = KUMREC.KUCCOID; /* Key field 1*/
  PC05W00.PC05WKN2 = KUMREC.KUMSTRID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05115

// Get the address     - VADDR001
Function PC05116()
   /* ------------------------------------------------------------*/
   /* Load the key values*/
   /* ------------------------------------------------------------*/

  KULREC.KUCCOID = KUMREC.KUCCOID; /* Company ID*/
  KULREC.KULAAID = KUMREC.KUMSHAID; /* Ship group address ID*/

   /* ------------------------------------------------------------*/
   /* Get the address.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    PC05W01.XXX-ADDR1 = KULREC.XXX-ADDR1;
    PC05W01.XXX-ADDR2 = KULREC.XXX-ADDR2;
    PC05W01.XXX-ADDR3 = KULREC.XXX-ADDR3;
    PC05W01.XXX-ADDR4 = " ";
    PC05W01.XXX-ADDR5 = " ";
    PC05W01.XXX-ADDR6 = " ";
    PC05W01.XXXCITY = KULREC.XXXCITY; /* City*/
    PC05W01.XSTCD = KULREC.XSTCD; /* State code*/
    PC05W01.XCTCD = KULREC.XCTCD; /* Country code*/
    PC05W01.XXXZIP = KULREC.XXXZIP; /* Zip code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VADDR001"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKN1 = KULREC.KUCCOID; /* Key field 1*/
  PC05W00.PC05WKN2 = KULREC.KULAAID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05116

// Get the factory addr- VFCTY001
Function PC05117()
   /* ------------------------------------------------------------*/
   /* Load the key data for table access.*/
   /* ------------------------------------------------------------*/

  FY1REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  FY1REC.FY1FCTYC = VPOITM05.PC2CUXID; /* Cust xref as fct cd*/

   /* ------------------------------------------------------------*/
   /* Get the factory address.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    PC05M010.XWHNM = FY1REC.FY1FCTNM; /* Factory name*/
    PC05W01.XXX-ADDR1 = FY1REC.XXX-ADDR1; /* line 1 of addrs*/
    PC05W01.XXX-ADDR2 = FY1REC.XXX-ADDR2; /* line 2 of addrs*/
    PC05W01.XXX-ADDR3 = FY1REC.XXX-ADDR3; /* line 3 of addrs*/
    PC05W01.XXX-ADDR4 = " ";
    PC05W01.XXX-ADDR5 = " ";
    PC05W01.XXX-ADDR6 = " ";
    PC05W01.XXXCITY = FY1REC.XXXCITY; /* City*/
    PC05W01.XSTCD = FY1REC.XSTCD; /* State code*/
    PC05W01.XCTCD = FY1REC.XCTCD; /* Country code*/
    PC05W01.XXXZIP = FY1REC.XXXZIP; /* Zip code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFTY    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = FY1REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKA2 = FY1REC.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05117

// Get NIL address - VLADDR01
Function PC05118()
   /* ------------------------------------------------------------*/
   /* Load the key values for the NIL address table get unique*/
   /* from the store table - DCUST.VSTORE01*/
   /* ------------------------------------------------------------*/

  VLADDR01.NLATYPIN = "C"; /* nl-addr-sys-ind*/
  VLADDR01.NLABSIND = " "; /* nl-bill-shp-ind*/
  VLADDR01.NLAONECH = " "; /* nl-addr-one-char*/
  VLADDR01.NLASINT1 = 0; /* nl-addr-sinteger1*/
  VLADDR01.NLASINT2 = 0; /* nl-addr-sinteger2*/
  VLADDR01.NLAINTGR = KUMREC.KUCCOID; /* Company ID*/
  VLADDR01.NLAADRID = KUMREC.KUMSHAID; /* Ship group address ID*/

   /* ------------------------------------------------------------*/
   /* Get the NIL address.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    PC05W01.PC3ATTEN = " ";
    PC05W01.XXX-ADDR1 = VLADDR01.XXX-ADDR1; /* line of address*/
    PC05W01.XXX-ADDR2 = VLADDR01.XXX-ADDR2; /* line of address*/
    PC05W01.XXX-ADDR3 = VLADDR01.XXX-ADDR3; /* line of address*/
    PC05W01.XXX-ADDR4 = VLADDR01.XXX-ADDR4; /* line of address*/
    PC05W01.XXX-ADDR5 = VLADDR01.XXX-ADDR5; /* line of address*/
    PC05W01.XXX-ADDR6 = VLADDR01.XXX-ADDR6; /* line of address*/
    PC05W01.XCTCD = VLADDR01.XCTCD; /* ctry code*/
    PC05W02.XXXCITY = " ";
    PC05W02.XSTCD = " ";
    PC05W02.XXXZIP = " ";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05118"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC05118"; /* Program number*/
  TA1REC.TA1DBASE = "DNILO   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLADDR01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKN1 = KUMREC.KUCCOID; /* Key field 1*/
  PC05W00.PC05WKN2 = KUMREC.KUMSHAID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05118

// Format data & Converse map
Function PC05120()
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (PC05M010.XXXCURDT == 0) /* Map is not formatted*/
    PC05121(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC05M010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC05M010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC05M010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC05M010 alarm; /* Indicate sound alarm*/
  end

  converse PC05M010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CATOAP = PC05M010.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC05M010.CAITEM; /* Application data*/

  PC05122(); /* Converse popup windows*/

end // end PC05120

// Format Map data
Function PC05121()
   /* ------------------------------------------------------------*/
   /* Move map data from PC05W01 display storage record and*/
   /* from PCWREC communication record to the map fields.*/
   /* ------------------------------------------------------------*/

  PC05M010.XXXPRCNM = "PC05"; /* Module identification*/
  PC05M010.XGPCD = PCWREC.XGPCD; /* GPC code*/
  if (PCWREC.XGPCD in XGPTBL.XGPCD)
    PC05M010.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end
                                   /* GPC description*/
  PC05M010.SY1STNBR = PCWREC.SY1STNBR; /* Style number*/
  PC05M010.SY2CLRID = PCWREC.SY2CLRID; /* Identifying color*/
  PC05M010.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/

  PC05W00.PC05WPOD = VPOITM05.PC3POIDT; /* P.O. ID*/
  if (VPOITM05.XGPCD == "03") /* If apparel*/
    PC05W00.PC05MYR = VPOITM05.PCFSECD; /* P.O. season code*/
  else
    PC05W00.PC05MYR = PC05W00.PC05WYR; /* P.O. ID year*/
  end
  PC05W00.PC05MDS1 = "-"; /* Dash*/
  PC05W00.PC05MM1 = PC05W00.PC05WM1; /* P.O. ID buy month*/
  PC05W00.PC05MDS2 = "-"; /* Dash*/
  PC05W00.PC05MM2 = PC05W00.PC05WM2; /* P.O. ID delivery month*/
  PC05W00.PC05MDS3 = "-"; /* Dash*/
  PC05W00.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory*/
  PC05M010.PC05MPOD = PC05W00.PC05MPOD; /* Reformatted P.O. ID*/

  PC05M010.PC4ORTYP = VPOITM05.PC4ORTYP; /* P.O. type code*/
  PC05M010.PC4DESC = PC4REC.PC4DESC; /* P.O. type description*/
  PC05M010.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  PC05M010.PC2CUXID = PCWREC.PC2CUXID; /* Customer*/
  if (VPOITM05.PC61TMSH == "Y") /* If override address exists*/
    PC05M010.PC61TMSH = VPOITM05.PC61TMSH; /* Override flag*/
  else
    PC05M010.PC61TMSH = "N"; /* Override flag*/
  end

  if (VPOITM05.YSMXDV == "20") /* NIL cust address*/
    PC05M010.PC05NLLT = "NIL"; /* NIL literal*/
  else
    PC05M010.PC05NLLT = " ";
  end

  PC05M010.PC3ATTEN = PC05W01.PC3ATTEN; /* Attention name*/
  PC05M010.XXX-ADDR1 = PC05W01.XXX-ADDR1;
  PC05M010.XXX-ADDR2 = PC05W01.XXX-ADDR2;
  PC05M010.XXX-ADDR3 = PC05W01.XXX-ADDR3;
  PC05M010.XXX-ADDR4 = PC05W01.XXX-ADDR4;
  PC05M010.XXX-ADDR5 = PC05W01.XXX-ADDR5;
  PC05M010.XXX-ADDR6 = PC05W01.XXX-ADDR6;
  PC05M010.XXXCITY = PC05W01.XXXCITY; /* City*/
  PC05M010.XSTCD = PC05W01.XSTCD; /* State code*/
  if (PC05W01.XSTCD in XSTTBL.XSTCD)
    PC05M010.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
  end /* State desc*/
  PC05M010.XCTCD = PC05W01.XCTCD; /* Country code*/
  if (PC05W01.XCTCD in XCTTBL.XCTCD)
    PC05M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end /* Country desc*/
  PC05M010.XXXZIP = PC05W01.XXXZIP; /* Zip code*/

  if (PC05W00.PC05WOVR == "Y") /* If updates are allowed*/
    PC05M010.PC05MLT1 = "- OVERRIDE"; /* Modify title*/
    if (VPOITM05.YSMXDV == "20") /* NIL cust address*/
      set PC05M010.PC3ATTEN protect; /* Attention name*/
      set PC05M010.XXX-ADDR1 normal, cursor;
      set PC05M010.XXX-ADDR4 normal;
      set PC05M010.XXX-ADDR5 normal;
      set PC05M010.XXX-ADDR6 normal;
      set PC05M010.XXXCITY protect; /* City*/
      set PC05M010.XSTCD protect; /* State code*/
      set PC05M010.XXXZIP protect; /* Zip code*/
    else
      set PC05M010.PC3ATTEN normal; /* Attention name*/
      set PC05M010.XXX-ADDR1 normal;
      set PC05M010.XXX-ADDR4 skip, invisible;
      set PC05M010.XXX-ADDR5 skip, invisible;
      set PC05M010.XXX-ADDR6 skip, invisible;
      set PC05M010.XXXCITY normal; /* City*/
      set PC05M010.XSTCD normal; /* State code*/
      set PC05M010.XXXZIP normal; /* Zip code*/
    end
    set PC05M010.XXX-ADDR2 normal;
    set PC05M010.XXX-ADDR3 normal;
    set PC05M010.XCTCD normal; /* Country code*/
    if (PC05W00.PC05WSPI == "N") /* If special inst not allowed*/
      set PC05M010.PC05MLT3 skip, invisible; /* Hide unused PF key*/
    end
  else /* Else*/
    PC05M010.PC05MLT1 = "- INQUIRY"; /* Modify title*/
    set PC05M010.PC05MLT2 skip, invisible; /* Hide unused PF key*/
    set PC05M010.PC05MLT3 skip, invisible; /* Hide unused PF key*/
    set PC05M010.PC05MLT4 skip, invisible; /* Hide unused PF key*/
    set PC05M010.CATOAP cursor; /* Position cursor*/
  end

end // end PC05121

// Converse popup windows
Function PC05122()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC05M010.XSTCD == "?" /* State list requested*/
   || PC05M010.XCTCD == "?") /* or country list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC05M010.XXXPRCNM = "PC05140"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of state codes.*/
   /* ------------------------------------------------------------*/

  if (PC05M010.XSTCD == "?") /* State list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " STATE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXST01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC05M010.XSTCD = PC05W01.XSTCD; /* Restore prior code*/
    else
      PC05M010.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* Selected code*/
    end

    set PC05M010.XSTCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/

  if (PC05M010.XCTCD == "?") /* Country list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "COUNTRY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC05M010.XCTCD = PC05W01.XCTCD; /* Restore prior code*/
    else
      PC05M010.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end

    set PC05M010.XCTCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC05M010.XXXPRCNM = "PC05140"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC05122

// Check attention identifiers
Function PC05130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf15
   || converseVar.validationMsgNum != 0
   || PCWREC.PCWFNC != "C") /* in add mode from pc0e*/
     /* next sentence*/
  else
    if (PC05W00.PC05WFFL == "D" /* add,chg or delete made*/
     || PC05W00.PC05WFFL == "U" /* add,chg or delete made*/
     || PC05W00.PC05WFFL == "A") /* add,chg or delete made*/
      PC05131(); /* create audit records*/
      if (converseVar.validationMsgNum != 0)
        PC05W00.PC05WFFL = " ";
        VPOAIT02.PCIBFRA = " ";
        exit stack;
      else
        PC05W00.PC05WFFL = " ";
        VPOAIT02.PCIBFRA = " ";
      end
    end
  end

  if (converseVar.eventKey is pa2 /* If PA2 was pressed*/
   && PC05W00.PC05WOVR == "Y")    /* and in update mode*/
    converseLib.clearScreen();
     /* M010 input/output*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Clear PC communications record*/
      XSPCS01(); /* transfer*/
      COMMAREA.CATOAP = "PC0A"; /* Go to menu*/
      PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* return message*/
      XSPCS01(); /* transfer*/
    else
      PC05M010.XXXPRCNM = "PC05130"; /* Module identification*/
      set PC05M010.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(7); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* transfer to caller*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to prod  menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If not enter key pressed*/
    if (converseVar.eventKey not pf15 /* If not delete request*/
     && converseVar.eventKey not pf6) /* and not special instructions*/
      PC05M010.XXXPRCNM = "PC05130"; /* Module identification*/
      converseLib.validationFailed(4); /* ; Indicate invalid key used*/
      if (converseVar.eventKey is pakey) /* PA key was pressed*/
        converseLib.clearScreen();
         /* Clear screen before display*/
        if (PC05W00.PC05WOVR != "Y") /* If inquiry mode*/
          set PC05M010.CATOAP cursor; /* Position cursor*/
        end
      end
      exit stack; /* Return to show error message*/
    else
      if (PC05W00.PC05WOVR != "Y") /* If not override mode*/
        PC05M010.XXXPRCNM = "PC05130"; /* Module identification*/
        converseLib.validationFailed(4); /* ; Indicate invalid key used*/
        if (converseVar.eventKey is pakey) /* PA key was pressed*/
          converseLib.clearScreen();
           /* Clear screen before display*/
          set PC05M010.CATOAP cursor; /* Position cursor*/
        end
        exit stack; /* Return to show error message*/
      else
        if (PC05W00.PC05WSPI == "N" /* If special instr not allowed*/
         && converseVar.eventKey is pf6) /* and special instr requested*/
          PC05M010.XXXPRCNM = "PC05130"; /* Module identification*/
          converseLib.validationFailed(4); /* ; Indicate invalid key used*/
          if (converseVar.eventKey is pakey) /* PA key was pressed*/
            converseLib.clearScreen();
             /* Clear screen before display*/
          end
          exit stack; /* Return to show error message*/
        end
      end
    end
  end

end // end PC05130

// set up item audit row
Function PC05131()

   /* ----------------------------------------------------------*/
    /* Initialize the item audit record and move the fields*/
    /* from display storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PCWREC.XGPCD; /* GPC code*/
  VPOAIT02.PCJSEQNO = 0;
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR;
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID;
  VPOAIT02.XDMCD = VPOITM05.XDMCD;
  VPOAIT02.XQACD = VPOITM05.XQACD;
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOAIT02.XPGCD = VPOITM05.XPGCD;
  VPOAIT02.XUMCD = VPOITM05.XUMCD;
  VPOAIT02.XOWCD = VPOITM05.XOWCD;
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT;
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD;
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOAIT02.YMTCD = VPOITM05.YMTCD;
  VPOAIT02.XWHCD = VPOITM05.XWHCD;
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD;
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP;
  VPOAIT02.XDSCD = VPOITM05.XDSCD;
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV;
  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD;
  VPOAIT02.XPRCD = VPOITM05.XPRCD;
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN;
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.PCJAMEND = "3";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  if (PCWREC.XGPCD == "03") /* if aprl*/
    VPOAIT02.YOACD = "57"; /* New item code*/
  else
    VPOAIT02.YOACD = "33"; /* New item code*/
  end

  PC05SA7(); /* get po hdr prior to setting flags*/

  PC05SA8(); /* get c/m o/a memo flags*/

  if (PC05W00.PC05WFFL == "U") /* if update of address*/
    VPOAIT02.PCIBFRA = "SHIPTO ADDRS CHANGED";
  else
    if (PC05W00.PC05WFFL == "A") /* if address added*/
      VPOAIT02.PCIBFRA = "SHIPTO ADDRS ADDED  ";
    else
      if (PC05W00.PC05WFFL == "D") /* if address deleted*/
        VPOAIT02.PCIBFRA = "SHIPTO ADDRS DELETED";
      else
      end
    end
  end

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPOAIT02.ZZZCHGCT = 0;

  PC05S05(); /* Insert item audit row*/

end // end PC05131

// Reset highlighted fields
Function PC05140()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC05M010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC05M010.CAITEM initialAttributes; /* Commarea application data*/

  if (PC05W00.PC05WOVR == "Y")
                                   /* If updates are allowed then unprotect*/
    set PC05M010.XXX-ADDR1 normal;
    set PC05M010.XXX-ADDR2 normal;
    set PC05M010.XXX-ADDR3 normal;
    set PC05M010.XXX-ADDR4 normal;
    set PC05M010.XXX-ADDR5 normal;
    set PC05M010.XXX-ADDR6 normal;
    set PC05M010.XXXCITY normal; /* City*/
    set PC05M010.XSTCD normal; /* State code*/
    set PC05M010.XCTCD normal; /* Country code*/
    set PC05M010.XXXZIP normal; /* Zip code*/
  end

end // end PC05140

// Verify the entered data
Function PC05150()
   /* ------------------------------------------------------------*/
   /* Verify the entered data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf15) /* If not delete request*/
    if (PC05M010.PC3ATTEN != PC05W01.PC3ATTEN /* Attention name*/
     || PC05M010.XXX-ADDR1 != PC05W01.XXX-ADDR1
     || PC05M010.XXX-ADDR2 != PC05W01.XXX-ADDR2
     || PC05M010.XXX-ADDR3 != PC05W01.XXX-ADDR3
     || PC05M010.XXX-ADDR4 != PC05W01.XXX-ADDR4
     || PC05M010.XXX-ADDR5 != PC05W01.XXX-ADDR5
     || PC05M010.XXX-ADDR6 != PC05W01.XXX-ADDR6
     || PC05M010.XXXCITY != PC05W01.XXXCITY   /* City*/
     || PC05M010.XSTCD != PC05W01.XSTCD       /* State code*/
     || PC05M010.XCTCD != PC05W01.XCTCD       /* Country code*/
     || PC05M010.XXXZIP != PC05W01.XXXZIP)    /* Zip code*/

      /* ------------------------------------------------------------*/
       /* Determine if country code in table & status is active.*/
      /* ------------------------------------------------------------*/

      PC05M010.XCTDESC = " "; /* Clear description*/
      if (PC05M010.XCTCD in XCTTBL.XCTCD /* Country code in table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        PC05M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* Country desc*/
      else
        if (PC05M010.XCTCD != " ") /* If country code entered*/
          PC05M010.XCTDESC = " "; /* Clear description*/
          PC05M010.XXXPRCNM = "PC05150"; /* module identification*/
          set PC05M010.XCTCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(49); /* Country code invalid*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Determine if state code in table & status is active.*/
      /* ------------------------------------------------------------*/

      PC05M010.XSTDESC = " "; /* Clear description*/
      if (PC05M010.XCTCD == "USA" /* If country is USA*/
       || PC05M010.XCTCD == " ")  /* or country not entered*/
        if (PC05M010.XSTCD in XSTTBL.XSTCD /* State code in table*/
         && XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          PC05M010.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex]; /* State desc*/
          PC05M010.XCTCD = "USA"; /* Default to USA*/
          if (PC05M010.XCTCD in XCTTBL.XCTCD)
            PC05M010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          end
        else
          PC05M010.XSTDESC = " "; /* Clear description*/
          PC05M010.XXXPRCNM = "PC05150"; /* Module identification*/
          set PC05M010.XSTCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(75); /* State code invalid*/
        end
      else
        if (PC05M010.XSTCD != " ") /* If state code entered*/
          PC05M010.XXXPRCNM = "PC05150"; /* Module identification*/
          set PC05M010.XSTCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(122); /* State code not allowed for foreign*/
                                   /* ctry*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Determine that state or country is entered.*/
      /* ------------------------------------------------------------*/

      if (PC05M010.XSTCD == " " /* If state code blank*/
       && PC05M010.XCTCD == " ") /* and country code blank*/
        PC05M010.XCTDESC = " "; /* Clear description*/
        PC05M010.XXXPRCNM = "PC05150"; /* module identification*/
        set PC05M010.XSTCD cursor, bold; /* Highlight*/
        set PC05M010.XCTCD bold; /* Highlight*/
        converseLib.validationFailed(121); /* One of country or state req*/
      end

      /* ------------------------------------------------------------*/
       /* City required for domestic override addresses*/
      /* ------------------------------------------------------------*/

      if (VPOITM05.YSMXDV == "10")
        if (PC05M010.XXXCITY == " ") /* City is blank*/
          PC05M010.XXXPRCNM = "PC05150"; /* Module identification*/
          set PC05M010.XXXCITY cursor, bold; /* Highlight*/
          converseLib.validationFailed(21); /* Data must be entered*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Determine that at least one line of address is entered.*/
      /* ------------------------------------------------------------*/

      if (PC05M010.XXX-ADDR1 == " "
       && PC05M010.XXX-ADDR2 == " "
       && PC05M010.XXX-ADDR3 == " "
       && PC05M010.XXX-ADDR4 == " "
       && PC05M010.XXX-ADDR5 == " "
       && PC05M010.XXX-ADDR6 == " ")
        PC05M010.XXXPRCNM = "PC05150"; /* module identification*/
        set PC05M010.XXX-ADDR1 cursor, bold; /* Highlight*/
        converseLib.validationFailed(21); /* Data must be entered*/
      end

      /* 05/19/00 CHANGE BEGINS*/
      /* ------------------------------------------------------------*/
       /* Determine if the Product is Spain-Compliant.*/
      /* ------------------------------------------------------------*/
      PC05S101(); /* Select from style/color table*/
      if (PC05M010.XGPCD == "03"
       || PC05M010.XGPCD == "02")
        if (PG2REC.XFCCD1 != "68"
         && PG2REC.XFCCD2 != "68"
         && PG2REC.XFCCD3 != "68"
         && PG2REC.XFCCD4 != "68"
         && PG2REC.XFCCD5 != "68"
         && PG2REC.XFCCD6 != "68")
          if (PC05M010.XCTCD == "SPAI"
           || PC05M010.XCTCD == "CNRY") /* Spain edits*/
            converseLib.validationFailed(574);
            PC05M010.XXXPRCNM = "PC05250";
            set PC05M010.XCTCD cursor, bold;
          end
        end
      end
      /* 05/19/00 CHANGE ENDS*/

    end
  end
   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC05M010.XXXPRCNM = "PC05150"; /* Module identification*/
    set PC05M010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC05150

// Process valid input request
Function PC05160()
   /* ------------------------------------------------------------*/
   /* Process valid input request.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

   /* ------------------------------------------------------------*/
   /* If any address fields changed, process change if requested.*/
   /* ------------------------------------------------------------*/
  if (PC05M010.PC3ATTEN != PC05W01.PC3ATTEN /* Attention name*/
   || PC05M010.XXX-ADDR1 != PC05W01.XXX-ADDR1
   || PC05M010.XXX-ADDR2 != PC05W01.XXX-ADDR2
   || PC05M010.XXX-ADDR3 != PC05W01.XXX-ADDR3
   || PC05M010.XXX-ADDR4 != PC05W01.XXX-ADDR4
   || PC05M010.XXX-ADDR5 != PC05W01.XXX-ADDR5
   || PC05M010.XXX-ADDR6 != PC05W01.XXX-ADDR6
   || PC05M010.XXXCITY != PC05W01.XXXCITY   /* City*/
   || PC05M010.XSTCD != PC05W01.XSTCD       /* State code*/
   || PC05M010.XCTCD != PC05W01.XCTCD       /* Country code*/
   || PC05M010.XXXZIP != PC05W01.XXXZIP)    /* Zip code*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6)
      if (VPOITM05.PC61TMSH == "Y")
        /* ------------------------------------------------------------*/
         /* Update P.O. item onetime shipment address.*/
        /* ------------------------------------------------------------*/
        PC05161();

      else
        /* ------------------------------------------------------------*/
         /* Insert P.O. item onetime shipment address.*/
        /* ------------------------------------------------------------*/
        PC05162();

        /* ------------------------------------------------------------*/
         /* Update P.O. item.*/
        /* ------------------------------------------------------------*/
        PC05163();

      end
      /* ------------------------------------------------------------*/
       /* Indicate that the update was successfully completed.*/
      /* ------------------------------------------------------------*/
      if (converseVar.validationMsgNum == 0) /* If no errors*/
        PC05M010.XXXPRCNM = "PC05160"; /* Module identification*/
        PCWREC.XXXMSGNO = 23; /* Indicate update completed*/
      end
    end
  end

  if (converseVar.eventKey is pf15 /* If delete request*/
   && VPOITM05.PC61TMSH == "Y")    /* and override address exists*/
    /* ------------------------------------------------------------*/
     /* Delete P.O. item onetime shipment address.*/
    /* ------------------------------------------------------------*/
    PC05164();

    /* ------------------------------------------------------------*/
     /* Update P.O. item.*/
    /* ------------------------------------------------------------*/
    PC05163();

    /* ------------------------------------------------------------*/
     /* Indicate that the delete was successfully completed.*/
    /* ------------------------------------------------------------*/
    if (converseVar.validationMsgNum == 0) /* If no errors*/
      PC05M010.XXXPRCNM = "PC05160"; /* Module identification*/
      PCWREC.XXXMSGNO = 24; /* Indicate update completed*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* If no errors*/

    PC05W00.PC05WSWR = "Y"; /* Request for data switch*/
    /* ------------------------------------------------------------*/
     /* Initialize the map and display storage.*/
    /* ------------------------------------------------------------*/
    set PC05M010 initial; /* M010 map*/
    set PC05W01 empty; /* M010 display storage*/

    /* ------------------------------------------------------------*/
     /* Commit all changes.*/
    /* ------------------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    /* ------------------------------------------------------------*/
     /* Transfer to special instructions*/
    /* ------------------------------------------------------------*/
    if (converseVar.eventKey is pf6) /* If special instruction request*/
      PC05165(); /* transfer to PC0I*/
    end

  end
end // end PC05160

// Update P.O. item address
Function PC05161()
   /* ------------------------------------------------------------*/
   /* Move the address information from the map*/
   /* ------------------------------------------------------------*/

  PC9REC.PC3ATTEN = PC05M010.PC3ATTEN; /* Attention name*/
  PC9REC.XXX-ADDR1 = PC05M010.XXX-ADDR1;
  PC9REC.XXX-ADDR2 = PC05M010.XXX-ADDR2;
  PC9REC.XXX-ADDR3 = PC05M010.XXX-ADDR3;
  PC9REC.XXX-ADDR4 = PC05M010.XXX-ADDR4;
  PC9REC.XXX-ADDR5 = PC05M010.XXX-ADDR5;
  PC9REC.XXX-ADDR6 = PC05M010.XXX-ADDR6;
  PC9REC.XXXCITY = PC05M010.XXXCITY; /* City*/
  PC9REC.XSTCD = PC05M010.XSTCD; /* State code*/
  PC9REC.XCTCD = PC05M010.XCTCD; /* Country code*/
  PC9REC.XXXZIP = PC05M010.XXXZIP; /* Zip code*/

  PC9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /*  */
  VPOIAD02.PC-ATTN-NM = PC05M010.PC3ATTEN; /* Attention name*/
  VPOIAD02.XXX-ADDR1 = PC05M010.XXX-ADDR1;
  VPOIAD02.XXX-ADDR2 = PC05M010.XXX-ADDR2;
  VPOIAD02.XXX-ADDR3 = PC05M010.XXX-ADDR3;
  VPOIAD02.XXX-ADDR4 = PC05M010.XXX-ADDR4;
  VPOIAD02.XXX-ADDR5 = PC05M010.XXX-ADDR5;
  VPOIAD02.XXX-ADDR6 = PC05M010.XXX-ADDR6;
  VPOIAD02.XXX-CITY = PC05M010.XXXCITY; /* City*/
  VPOIAD02.XST-ST-CD = PC05M010.XSTCD; /* State code*/
  VPOIAD02.XCT-CTRY-CD = PC05M010.XCTCD; /* Country code*/
  VPOIAD02.XXX-ZIP = PC05M010.XXXZIP; /* Zip code*/

  VPOIAD02.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOIAD02.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/
   /*  */
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
   /* CALL IO3290 'U ',SQLCA,PC9REC (NOMAPS,NONCSP,REPLY; /* Update row*/
  try
    call "VPOIAD02" ("U ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /*  */
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC05W00.PC05WFFL = "U"; /* type of change indicator*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      VPOAIT02.PCIBFRA = " ";
      set PC05M010 initial; /* M001 input/output*/
      PC05W00.PC05WSWR = "Y"; /* Request for data switch*/
      PC05M010.XXXPRCNM = "PC05161"; /* Module identification*/
      converseLib.validationFailed(12); /* Indicate updated by another*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC05W00.PC05WKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/
  VPOAIT02.PCIBFRA = " ";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05161

// Insert P.O. item address
Function PC05162()
   /* ------------------------------------------------------------*/
   /* Move the address information from PCWREC & the map*/
   /* ------------------------------------------------------------*/

  PC9REC.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PC9REC.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  PC9REC.SY1STNBR = PCWREC.SY1STNBR; /* Style number*/
  PC9REC.SY2CLRID = PCWREC.SY2CLRID; /* Identifying color*/
  PC9REC.XDMCD = PCWREC.XDMCD; /* Dimension code*/
  PC9REC.XQACD = PCWREC.XQACD; /* Quality code*/
  PC9REC.XOWCD = PCWREC.XOWCD; /* Owner group code*/
  PC9REC.PC2INSEG = PCWREC.PC2INSEG; /* Spec difference code*/
  PC9REC.XPGCD = PCWREC.XPGCD; /* Packaging type code*/
  PC9REC.XUMCD = PCWREC.XUMCD; /* Unit of measure code*/
  PC9REC.XWHCD = VPOITM05.XWHCD; /* Warehouse code*/
  PC9REC.PC2CUXID = PCWREC.PC2CUXID; /* Customer xref id*/

  PC9REC.PC3PONBR = PC05M010.PC3PONBR; /* Attention name*/
  PC9REC.PC3ATTEN = PC05M010.PC3ATTEN; /* First line of address*/
  PC9REC.XXX-ADDR1 = PC05M010.XXX-ADDR1;
  PC9REC.XXX-ADDR2 = PC05M010.XXX-ADDR2;
  PC9REC.XXX-ADDR3 = PC05M010.XXX-ADDR3;
  PC9REC.XXX-ADDR4 = PC05M010.XXX-ADDR4;
  PC9REC.XXX-ADDR5 = PC05M010.XXX-ADDR5;
  PC9REC.XXX-ADDR6 = PC05M010.XXX-ADDR6;
  PC9REC.XXXCITY = PC05M010.XXXCITY; /* City*/
  PC9REC.XSTCD = PC05M010.XSTCD; /* State code*/
  PC9REC.XCTCD = PC05M010.XCTCD; /* Country code*/
  PC9REC.XXXZIP = PC05M010.XXXZIP; /* Zip code*/

  PC9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  PC9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /*  */

  VPOIAD02.XGP-GPC-CD = PCWREC.XGPCD; /* GPC code*/
  VPOIAD02.PC-PO-NBR = PCWREC.PC3PONBR; /* P.O. number*/
  VPOIAD02.PC-ITM-SEQ-NBR = VPOITM05.PC6ITMNB;
  VPOIAD02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOIAD02.SY-STY-NBR = PCWREC.SY1STNBR; /* Style number*/
  VPOIAD02.SY-COLR-CD-ID = PCWREC.SY2CLRID; /* Identifying color*/
  VPOIAD02.XDM-DIM-CD = PCWREC.XDMCD; /* Dimension code*/
  VPOIAD02.XQA-QUAL-CD = PCWREC.XQACD; /* Quality code*/
  VPOIAD02.XOW-OWN-GRP-CD = PCWREC.XOWCD; /* Owner group code*/
  VPOIAD02.PC-CU-IN-SEG-CD = PCWREC.PC2INSEG; /* Spec difference code*/
  VPOIAD02.XPG-PKG-TYP-CD = PCWREC.XPGCD; /* Packaging type code*/
  VPOIAD02.XUM-UOM-CD = PCWREC.XUMCD; /* Unit of measure code*/
  VPOIAD02.XWH-WHSE-CD = VPOITM05.XWHCD; /* Warehouse code*/
  VPOIAD02.PC-PRDCU-ID = PCWREC.PC2CUXID; /* Customer xref id*/

  VPOIAD02.PC-ATTN-NM = PC05M010.PC3ATTEN;
  VPOIAD02.XXX-ADDR1 = PC05M010.XXX-ADDR1;
  VPOIAD02.XXX-ADDR2 = PC05M010.XXX-ADDR2;
  VPOIAD02.XXX-ADDR3 = PC05M010.XXX-ADDR3;
  VPOIAD02.XXX-ADDR4 = PC05M010.XXX-ADDR4;
  VPOIAD02.XXX-ADDR5 = PC05M010.XXX-ADDR5;
  VPOIAD02.XXX-ADDR6 = PC05M010.XXX-ADDR6;
  VPOIAD02.XXX-CITY = PC05M010.XXXCITY; /* City*/
  VPOIAD02.XST-ST-CD = PC05M010.XSTCD; /* State code*/
  VPOIAD02.XCT-CTRY-CD = PC05M010.XCTCD; /* Country code*/
  VPOIAD02.XXX-ZIP = PC05M010.XXXZIP; /* Zip code*/

  VPOIAD02.ZZ-SDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOIAD02.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOIAD02.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/
   /* ------------------------------------------------------------*/
   /* Check that new row not already added to table*/
   /* ------------------------------------------------------------*/
  try
    call "VPOIAD02" ("S ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
   /* CALL IO3290 'S ',SQLCA,PC9REC (NOMAPS,NONCSP,REPLY;/* Select row*/
   /*  */

   /* ------------------------------------------------------------*/
   /* If record not found, then add it.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* ------------------------------------------------------------*/
       /* Insert the new row in the table.*/
      /* ------------------------------------------------------------*/
   /*  */
   /* CALL IO3290 'A ',SQLCA,PC9REC (NOMAPS,NONCSP,REPLY;/* Insert row*/
      try
        call "VPOIAD02" ("A ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
      end /* Insert row*/
   /*  */

      /* ------------------------------------------------------------*/
       /* If successful, return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
        PC05W00.PC05WFFL = "A"; /* type of change indicator*/
        return; /* Return to previous process*/
      end

    end

    /* ------------------------------------------------------------*/
     /* If row exists, update the row.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Row already exists*/
      PC05161(); /* Update the address record*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC05W00.PC05WKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/
  VPOAIT02.PCIBFRA = " ";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05162

// Update P.O. items
Function PC05163()
   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM05*/
   /* ------------------------------------------------------------*/

  PC05S01(); /* Open cursor for VPOITM05*/

   /* ------------------------------------------------------------*/
   /* Fetch the first VPOITM05 row*/
   /* ------------------------------------------------------------*/

  PC05S02(); /* Get first VPOITM05 row*/

   /* ------------------------------------------------------------*/
   /* If there are no rows in the set display message.*/
   /* ------------------------------------------------------------*/

  if (PC05W00.PC05WDCF == "Y") /* end of cursor on first fetch*/
    PC05M010.XXXPRCNM = "PC05163"; /* Program number*/
    converseLib.validationFailed(10); /* Indicate no data to display*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Get and update each row of data to display.*/
   /* ------------------------------------------------------------*/

  while (PC05W00.PC05WDCF != "Y") /* Not end of set*/

    if (converseVar.eventKey is enter /* If enter*/
     || converseVar.eventKey is pf6)  /* or request special instructions*/
      VPOITM05.PC61TMSH = "Y"; /* Override address exists*/
    else /* If EZEAID IS PF15*/
      VPOITM05.PC61TMSH = "N"; /* Override address does not exist*/
    end

   /*  */
   /* Update only the item that needs to be updated*/
    if (PCWREC.PC6PLAN == VPOITM05.PC6PLAN)
      PC05S03(); /* Update flag in P.O. item*/
    end
   /*  */
    PC05S02(); /* Get next VPOITM05 row*/

  end

   /* ------------------------------------------------------------*/
   /* IO to close VPOITM05 set*/
   /* ------------------------------------------------------------*/
  PC05S04(); /* Close cursor for VPOITM05*/

end // end PC05163

// Delete override address
Function PC05164()
   /* ------------------------------------------------------------*/
   /* Delete the override address data.*/
   /* ------------------------------------------------------------*/

   /*  */
   /* CALL IO3290 'D ',SQLCA,PC9REC (NOMAPS,NONCSP,REPLY;*/
  try
    call "VPOIAD02" ("D ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end
   /*  */

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC05W00.PC05WFFL = "D"; /* type of change indicator*/

      return; /* Return to previous process*/

    end
    /* ------------------------------------------------------------*/
     /* If successful, return to previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PC05M010 initial; /* M010 input/ouput*/
      PC05W00.PC05WSWR = "Y"; /* Request for data switch*/
      PC05M010.XXXPRCNM = "PC05164"; /* Module identification*/
      converseLib.validationFailed(26); /* Indicate deleted by another*/
      VPOAIT02.PCIBFRA = " ";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback all changes*/
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC05W00.PC05WKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/
  VPOAIT02.PCIBFRA = " ";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05164

// Transfer to special instruct
Function PC05165()
  PC05W00.CAFROMAP = COMMAREA.CAFROMAP; /* save calling appl*/
  COMMAREA.CATOAP = "PC0I"; /* transfer to special instr*/
   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty Cafromap entry in the PCWREc array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array. You should also use the Pcwrec.Pcwfunc(1) if*/
   /* your application is using this field.*/
   /* On reentry into your applicaton from a 'called'*/
   /* application find your appl id in the cafrommap*/
   /* array and use the corresponding pcwuser(n). Move*/
   /* spaces to the  cafromap field containing the name of*/
   /* the 'called' application.*/
   /* ------------------------------------------------------------*/
  if (PCWREC.CAFROMAP[1] == " ")
    PCWREC.CAFROMAP[1] = "PC05"; /* From application id*/
    PCWREC.PCWUSER1 = PC05W00.PC05W0GP;

  else
    if (PCWREC.CAFROMAP[2] == " ")
      PCWREC.CAFROMAP[2] = "PC05"; /* From application id*/
      PCWREC.PCWUSER2 = PC05W00.PC05W0GP;

    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PC05"; /* From application id*/
        PCWREC.PCWUSER3 = PC05W00.PC05W0GP;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PC05"; /* From application id*/
          PCWREC.PCWUSER4 = PC05W00.PC05W0GP;
        end
      end
    end
  end

  XSPCS01(); /* transfer*/
  exit stack; /* Return to show error message*/

end // end PC05165

// one time address
Function PC05170()

      /* *********************************************************/
      /* * this retrieves one ship to name/address from the     **/
      /* * orders address table.                                **/
      /* *********************************************************/

      /* get one time ship to record*/

  OP5REC.OP1PARTN = VPOITM05.OP1PARTN; /* load key - partition*/
  OP5REC.OP1CUOID = VPOITM05.OP1CUOID; /* load key - cust order*/
  OP5REC.OP1NORID = VPOITM05.OP1NORID; /* load key - nike order*/
  OP5REC.OP5BILIN = "N"; /* load key - bill ind*/
  OP5REC.OP5SHPIN = "Y"; /* load key - ship ind*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

      /* check db2 return code*/
      /* not found is error*/
      /* as record was previously added*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    KUMREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust id*/
    KUMREC.KUMSHAID = OP1REC.OP1SHAID; /* load key - ship addr id*/
    PC05116();
    return;
  end

      /* format address on screen*/

  if (OP1REC.XNXCD == 0)
    PC05W01.XXX-ADDR1 = OP5REC.XXXADDR[1]; /* addr line 1*/
  else
    KUJREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
    KUJREC.XNXCD = OP1REC.XNXCD; /* load key - dept code*/
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* get dept self id*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC05W03.PC05WLIT = "DEPT "; /* move lit to hold area*/
      PC05W03.PC5SLFID = KUMREC.KUMSLFID; /* move dept self id to hld*/
      PC05W01.XXX-ADDR1 = PC05W03.PC05WHD1;
    else
      PC05W01.XXX-ADDR1 = OP5REC.XXXADDR[1]; /* addr line 1*/
    end
  end

  PC05W01.XXX-ADDR2 = OP5REC.XXXADDR[2]; /* addr line 2*/
  PC05W01.XXX-ADDR3 = OP5REC.XXXADDR[3]; /* addr line 3*/
  PC05W01.XXX-ADDR4 = " "; /* addr line 4*/
  PC05W01.XXX-ADDR5 = " "; /* addr line 5*/
  PC05W01.XXX-ADDR6 = " "; /* addr line 6*/
  PC05W01.XXXCITY = OP5REC.XXXCITY; /* city*/
  PC05W01.XSTCD = OP5REC.XSTCD; /* state*/
  PC05W01.XXXZIP = OP5REC.XXXZIP; /* zip*/
  PC05W01.XCTCD = OP5REC.XCTCD; /* country*/

   /* *************************************************************/
end // end PC05170

// get order header record
Function PC05171()

  OP1REC.OP1PARTN = VPOITM05.OP1PARTN;
  OP1REC.OP1CUOID = VPOITM05.OP1CUOID;
  OP1REC.OP1NORID = VPOITM05.OP1NORID;

      /* *********************************************************/
      /* * this statement gets the order header row.            **/
      /* *********************************************************/

      /* get the order header from data base*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
    PC05W00.TA1TBLKE = " "; /* Initialize work key*/
    PC05W00.PC05WKN1 = OP1REC.OP1CUOID; /* Key field 1*/
    PC05W00.PC05WKN2 = OP1REC.OP1PARTN; /* Key field 2*/
    TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Exit to display map*/

    exit stack;
  end

   /* *************************************************************/
end // end PC05171

// Open cursor for VPOITM05
Function PC05S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* clear row storage area*/
  PC05W00.PC05WDCF = "N"; /* End of VPOITM05 flag*/

   /* ------------------------------------------------------------*/
   /* Format PC6REC with key values for select set*/
   /* ------------------------------------------------------------*/

  VPOITM05.XGPCD = PCWREC.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PCWREC.PO-REG-CD; /* P.O. region*/
  VPOITM05.PC3PONBR = PCWREC.PC3PONBR; /* P.O. number*/
  VPOITM05.SY1STNBR = PCWREC.SY1STNBR; /* Style number*/
  VPOITM05.SY2CLRID = PCWREC.SY2CLRID; /* Identifying color*/
  VPOITM05.XDMCD = PCWREC.XDMCD; /* Dimension code*/
  VPOITM05.XQACD = PCWREC.XQACD; /* Quality code*/
  VPOITM05.XOWCD = PCWREC.XOWCD; /* Owner group code*/
  VPOITM05.PC2INSEG = PCWREC.PC2INSEG; /* Spec difference code*/
  VPOITM05.XPGCD = PCWREC.XPGCD; /* Packaging type code*/
  VPOITM05.PC2CUXID = PCWREC.PC2CUXID; /* Customer xref ID*/
  VPOITM05.XUMCD = PCWREC.XUMCD; /* Unit of measure code*/
  VPOITM05.XWHCD = PCWREC.XWHCD; /* Warehouse code*/
  VPOITM05.YSMXDV = PCWREC.YSMXDV; /* Division code*/

   /* ------------------------------------------------------------*/
   /* Set wildcard values for remaining fields of select.*/
   /* ------------------------------------------------------------*/

  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S8"; /* Function to perform*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  if (PC05W00.PCWMAP == 1)
    TA1REC.TA1MAPNO = "M010";
  else
    TA1REC.TA1MAPNO = "M020";
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC05W00.PC05WKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05S01

// Select next for VPOITM05
Function PC05S02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOITM05.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N8"; /* Function to perform*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC05W00.PC05WDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  if (PC05W00.PCWMAP == 1)
    TA1REC.TA1MAPNO = "M010";
  else
    TA1REC.TA1MAPNO = "M020";
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC05W00.PC05WKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05S02

// Update for VPOITM05
Function PC05S03()
   /* ------------------------------------------------------------*/
   /* Update the P.O. item onetime shipto override address flag.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "U"; /* Function to perform*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC05W00.PC05WDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PC05W00.PCWMAP == 1)
      converseLib.clearScreen();
       /* Clear screen before display*/
      TA1REC.TA1MAPNO = "M010";
      TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC05W00.PC05WKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05S03

// Close cursor for VPOITM05
Function PC05S04()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C8"; /* Function to perform*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC05M010.XXXPRCNM = "PC05S04"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC05M010.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC05W00.TA1TBLKE = " "; /* Initialize work key*/
  PC05W00.PC05WKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC05W00.PC05WKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC05W00.PC05WKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC05W00.PC05WKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC05W00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05S04

// Insert item audit row
Function PC05S05()

  set PCYREC empty;
  PCYREC.PCYFUNC = "A ";
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    if (PC05W00.PCWMAP == 1)
      converseLib.clearScreen();
      
      TA1REC.TA1MAPNO = "M010";
    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC05S05"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PC05W00.PCWMAP == 1)
    PC05M010.XXXPRCNM = "PC05S05";
  end
  exit stack;

end // end PC05S05

// Obtain dprodg.vsyclr01
Function PC05S101()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = PC05M010.XGPCD;
  PG2REC.SY1STNBR = PC05M010.SY1STNBR;
  PG2REC.SY2CLRID = PC05M010.SY2CLRID;
  PG2REC.XDMCD = "00";

  XSPG202();

end // end PC05S101

// Select Unique Dprodc.Vpohdr01
Function PC05SA7()
   /* ------------------------------------------------------------*/
   /* Select unique PO number row from table.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init P.O. header record*/
  VPOHDR02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO region*/
  VPOHDR02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (PC05W00.PCWMAP == 1)
    PC05M010.XXXPRCNM = "PC05SA7"; /* Module identification*/
    TA1REC.TA1MAPNO = "M010";
  else
    PC05M010.XXXPRCNM = "PC05SA7"; /* Module identification*/
    TA1REC.TA1MAPNO = "M010";
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (PC05W00.PCWMAP == 1)
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC05SA7"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC05SA7

// load chg memo and oa memo flag
Function PC05SA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      if (PC05W00.PCWMAP == 1)
        PC05M010.XXXPRCNM = "PC05SA8"; /* Module identification*/
      end
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC05SA8 ***********************/
end // end PC05SA8

//*** RECORD=PC05W00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC05W00 type basicRecord
  5 PC05W0GP PC05W0GP ; 
    10 CAFROMAP CAFROMAP ; 
    10 PC05WOVR PC05WOVR ; 
    10 PC05WSPI PC05WSPI ; 
    10 PC05WIX1 PC05WIX1 ; 
    10 PC05WDCF PC05WDCF ; 
    10 PC05WSWR PC05WSWR ; 
    10 PC05WPOD PC05WPOD ; 
      15 PC05WYR PC05WYR ; 
      15 PC05WM1 PC05WM1 ; 
      15 PC05WM2 PC05WM2 ; 
    10 PC05MPOD PC05MPOD ; 
      15 PC05MYR PC05MYR ; 
      15 PC05MDS1 PC05MDS1 ; 
      15 PC05MM1 PC05MM1 ; 
      15 PC05MDS2 PC05MDS2 ; 
      15 PC05MM2 PC05MM2 ; 
      15 PC05MDS3 PC05MDS3 ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 PC05WFFL PC05WFFL ; 
    10 TA1TBLKE TA1TBLKE ; 
      15 PC05WKA1 PC05WKA1 ; 
        20 PC05WKN1 PC05WKN1 ; 
        20 * char(1) ; 
      15 PC05WKA2 PC05WKA2 ; 
        20 PC05WKN2 PC05WKN2 ; 
        20 * char(1) ; 
      15 PC05WKA3 PC05WKA3 ; 
        20 PC05WKN3 PC05WKN3 ; 
        20 * char(1) ; 
      15 PC05WKA4 PC05WKA4 ; 
        20 PC05WKN4 PC05WKN4 ; 
        20 * char(1) ; 
    10 PCWMAP PCWMAP ; 
end // end PC05W00

//*** RECORD=PC05W01 ****
// ******* MAP ADDRESS STORAGE FOR PC05M010 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// ***********************
Record PC05W01 type basicRecord
  5 PC05W1GP PC05W1GP ; 
    10 PC3ATTEN PC3ATTEN ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
end // end PC05W01

//*** RECORD=PC05W02 ****
// ******* MAP ADDRESS STORAGE FOR PC05M020 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/28/93   KSANFO   NEW RECORD.
// ***********************
Record PC05W02 type basicRecord
  5 PC05W2GP PC05W2GP ; 
    10 PC3ATTEN PC3ATTEN ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XCTCD XCTCD ; 
    10 XXXZIP XXXZIP ; 
end // end PC05W02

//*** RECORD=PC05W03 ****
// ************************************************************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/04/96   rmcafe   NEW working storage fields.
// ***********************
Record PC05W03 type basicRecord
  5 PC05W3GP PC05W3GP ; 
    10 PC05WHD1 PC05WHD1 ; 
      15 PC05WLIT PC05WLIT ; 
      15 PC5SLFID PC5SLFID ; 
end // end PC05W03

// Dash
DataItem PC05MDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash
DataItem PC05MDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash
DataItem PC05MDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC05MM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC05MM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date reformatted
DataItem PC05MPOD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC05MYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC05W0GP char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC05W1GP char(299)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC05W2GP char(299)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC05W3GP char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC05WDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function flag
DataItem PC05WFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted dept self id
DataItem PC05WHD1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index
DataItem PC05WIX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of error key char
DataItem PC05WKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of error key char
DataItem PC05WKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of error key char
DataItem PC05WKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of error key char
DataItem PC05WKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key num
DataItem PC05WKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of error key num
DataItem PC05WKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of error key num
DataItem PC05WKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of error key num
DataItem PC05WKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// literal field for 'dept '
DataItem PC05WLIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC05WM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC05WM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update mode flag
DataItem PC05WOVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date to reformat
DataItem PC05WPOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special instructions flag
DataItem PC05WSPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PC05WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC05WYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_dept_self_id
DataItem PC5SLFID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end