package pc0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0G ****
// This program will allow the user to inquire/maintain
// nike special instruction information. The database
// will return 0 to n rows based upon the selection criteria.
// This program will format the screen with the data returned
// from the database.
// 
// This program enables the user to inquiry, add, change,
// or copy nike special instruction rows.  The copy request
// allows the user to modify then copy the nike special
// instruction row to the p.o. item special instruction or
// p.o. hdr special instruction database.
// 
//   A user can select nike special instruction rows
// for inquiry by general product group or general product
// group and special instr code.  By pressing ENTER the
// data will be displayed for viewing.
// 
//   A user may add new rows by pressing PF13 from the list
// screen (blank or filled with rows).  This will position
// them in an ADD screen.  A row can then be added ( if
// entries pass edit criteria) by pressing ENTER.  The user
// may continue adding or exit to the list screen.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(non-key data only)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
//   A user may select one or more rows for copy and press
// ENTER.  The user will then be positioned in a COPY screen
// where they can make their changes to non-key fields and
// hit ENTER to cycle to the next row selected, or, PF3 to
// return to the list screen.
// 
// -------  --------  --------  ------------------------------
// control    date      name    description of change
// -------  --------  --------  ------------------------------
//          06/26/89   rgilli   new application
//          08/27/90   mchris   default origin country in text
//                              of 'made in:' line for apparel
//          09/17/90   lsutto   allow gpc 07
//          05/03/91   kdenne   added pc6itmnb to pc0g261
//          05/08/91   kdenne   changed pc0g261 to use po item
//          06/10/91   chaert   db2 changes, add so# to auditm
//                              pc0gs28
//          03/10/92   lsutto   db2 changes, add so# to itemsi
//                              pc0g261
//          09/04/92   gamen    make changes for pb0k and si
//                              type 'GN'. If gn, only allow
//                              12 lines of text.
//          10/22/92   gamen    fix GN 12 line limitation.
// 
//          02/11/93   SDIFLE   (A181, A220)
// 
// !!!!     1.  These changes are AFTER 'EAO' conversion.
// 
//          2.  Ability to use PO-TYPE as a part of selection
//              criteria.
//          3.  IO3240 modified(PB0K uses it)
//          4.  Logic to use and validate 3 new SI-TYPEs.
//               ----------------------------------------------
//                 po-type  factory  warehouse    si-type
//               ----------------------------------------------
//                   SS     domestic   12           NL
//                   SS     domestic   03           IN
//                   SS     offshore   03/12        OD
//               ----------------------------------------------
//          5.  3 new SI-TYPEs & desc are added to ysitbl.
//          6.  Modified XGPDESC to XGPABRV and from x(25) to
//              x(12) in map001, pc0gw01.
//          7.  Added po-type fields in map001.
// 
//          02/15/93   chaert   bug fix, xpysi01
//          03/08/93   gamen    add edit for map 1 po type
//          02/22/96   jniese   change edits to allow po type
//                              'SD' to create instruction type
//                              'IN'.
//          05/30/97   PHARWO   CHANGES FOR PO VIEWS - PCA367
//          07/12/97   jniese   pca367 - ppr corrections
//          09/03/97   jniese   pca999 - change setup time(hdr)
//          04/15/98   DRAMSE   pca999 - change setup time(itm)
//                              (changed: PC0GS28)
//  ***********************************************************
// *********************
Program PC0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC0GW01 PC0GW01; // record
  PC0GW02 PC0GW02; // record
  PC0GW03 PC0GW03; // record
  PC4REC PC4REC; // record
  PCAREC PCAREC; // record
  PCBREC PCBREC; // record
  PCDREC PCDREC; // record
  PCEREC PCEREC; // record
  PCGREC PCGREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use YSITBL; // table
  use YOATBL; // table
  use XCTTBL; // table
  use PC0GM.PC0GM001,  // forms
      PC0GM.PC0GM002, 
      PC0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PC0G001;

    PC0G001: PC0G001();

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0G002;

    PC0G002: PC0G002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0G002;

  end // end main
end // end PC0G

// first time processing
Function PC0G001()
   /* ------------------------------------------------------------*/
   /* check commarea security fields*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.XGPCD != "01"
   && COMMAREA.XGPCD != "02"
   && COMMAREA.XGPCD != "03"
   && COMMAREA.XGPCD != "07")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A";
    XSEXIT();
  end

   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PC0GW01 empty;
  set PC0GW02 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set VPOHDR02 empty;
  set PC4REC empty;
  set VPOITM03 empty;
  set PCAREC empty;
  set PCBREC empty;
  set PCDREC empty;
  set PCEREC empty;
  set PCGREC empty;
  set PCYREC empty;

  PC0GW01.PC0GWCIX = 1; /* init cursor index*/
  PC0GW01.PC0GWMAP = "1"; /* init to map 1*/
  PC0GW01.PC0GWSWR = "Y"; /* init request for data switch*/
  PC0GW01.PC0GWBYF = "N"; /* init bypass processing switch*/
  COMMAREA.CATOAP = " "; /* init application field*/
  COMMAREA.CAITEM = " "; /* init item information*/

  if (COMMAREA.CAFROMAP == "PC0I" /* po item instr copy request*/
   || COMMAREA.CAFROMAP == "PC0H") /* po header instr copy request*/
    PC0GW01.PC0GWCPY = "Y";
  else
    PC0GW01.PC0GWCPY = "N";
  end

end // end PC0G001

// nike spec instr inq/maint
Function PC0G002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Display the nike special instruction - list screen*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "1") /* Map 1 was requested*/
    PC0G100(); /* Display map 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the nike special instruction - COPY screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "2" /* Map 2 was selected*/
   && PC0GW01.PC0GWFSW == "T") /* and COPY function*/

    if (converseVar.validationMsgNum == 0
     && PC0GW01.PC0GWBYF == "N")
      PC0GW01.PC0GWIXM = 1; /* Initialize index*/
    end

    while (PC0GW01.PC0GWIXM <= 13 /* Until end of page*/
     && PC0GW01.PC0GWMAP == "2") /* and map 2*/

      if (PC0GM001.PC0GMSEL[PC0GWIXM] == "S") /* If line selected*/
        PC0G200(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0GW01.PC0GWBYF == "N")         
        PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Increment index*/
      end

    end
    PC0GW01.PC0GWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* Display the nike special instruction - INQUIRY screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "2" /* Map 2 was selected*/
   && PC0GW01.PC0GWFSW == "I") /* and INQUIRE function*/

    if (converseVar.validationMsgNum == 0
     && PC0GW01.PC0GWBYF == "N")
      PC0GW01.PC0GWIXM = 1; /* Initialize index*/
    end

    while (PC0GW01.PC0GWIXM <= 13 /* Until end of page*/
     && PC0GW01.PC0GWMAP == "2") /* and map 2*/

      if (PC0GM001.PC0GMSEL[PC0GWIXM] == "S") /* If line selected*/
        PC0G300(); /* Display INQUIRY Map*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0GW01.PC0GWBYF == "N")         
        PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Increment index*/
      end
    end
    PC0GW01.PC0GWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the nike special instruction - ADD screen*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "2" /* Map 2 was requested*/
   && PC0GW01.PC0GWFSW == "A") /* and ADD function*/
    PC0G400(); /* Display Add Map*/
  end

   /* ------------------------------------------------------------*/
   /* Display the nike special instruction - CHANGE screen*/
   /* and control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "2" /* Map 2 was selected*/
   && PC0GW01.PC0GWFSW == "C") /* and CHANGE function*/

    if (converseVar.validationMsgNum == 0
     && PC0GW01.PC0GWBYF == "N")
      PC0GW01.PC0GWIXM = 1; /* Initialize index*/
    end

    while (PC0GW01.PC0GWIXM <= 13 /* Until end of page*/
     && PC0GW01.PC0GWMAP == "2") /* and map 2*/

      if (PC0GM001.PC0GMSEL[PC0GWIXM] == "S") /* If line selected*/
        PC0G500(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0GW01.PC0GWBYF == "N")         
        PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Incr index*/
      end

    end
    PC0GW01.PC0GWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* If invalid map number terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "1"
   || PC0GW01.PC0GWMAP == "2")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0G002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PC0GW01.PC0GWMAP; /* Map name*/
    TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid function switch terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMAP == "2")
    if (PC0GW01.PC0GWFSW == "A"
     || PC0GW01.PC0GWFSW == "I"
     || PC0GW01.PC0GWFSW == "C"
     || PC0GW01.PC0GWFSW == "T")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "PC0G002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PC0GW01.PC0GWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP FUNCTION IS INVALID";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    end
  end

end // end PC0G002

// nike special instruction list
Function PC0G100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PC0G110(); /* Obtain the data to display*/

  PC0G120(); /* Format and display the map*/

  PC0G130(); /* Check attention identifier*/

  PC0G140(); /* Reset fields to normal intensity*/

  PC0G150(); /* Verify the entered data*/

  PC0G160(); /* Process valid input request*/


end // end PC0G100

// Obtain the data to display
Function PC0G110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWSWR == "N") /* Data not requested*/

    return;

  end


  PC0GS01(); /* Purge any temporary storage*/

  set PCAREC empty; /* Clear nike spec instr record*/
  set PC0GW02 empty; /* Clear temporary storage record*/
  set PC0GM001 initial; /* Clear map pc0gm001*/
  PC0GW01.PC0GWCIX = 1; /* reset cursor index*/
  PC0GW01.PC0GWSWR = "N"; /* Request for data completed*/

   /* ------------------------------------------------------------*/
   /* load key fields (pcwrec fields are updated after all mapin)*/
   /* sue-change :  added po type as a part of select key*/
   /* ------------------------------------------------------------*/
  PC0GM001.XGPCD = COMMAREA.XGPCD;
  PC0GM001.PC0GMSIT = PCWREC.YSICD;
  PC0GM001.PC0GMPTY = PCWREC.PC4ORTYP; /* *****sue*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction type*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.PC0GMSIT != " ")
    if (PC0GM001.PC0GMSIT in YSITBL.YSICD
     && YSITBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active spec instr type*/
      PCAREC.YSICD = PC0GM001.PC0GMSIT;
      PC0GW01.YSICD = PC0GM001.PC0GMSIT;
      PC0GM001.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
      PC0GW01.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
    else
      PC0GW01.YSICD = "@#"; /* force validation routine*/
      PC0GW01.YSIDESC = " "; /* clear w/s special instr desc*/
      PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
      converseLib.validationFailed(67); /* missing/invalid spec instr type*/
      PC0GM001.XXXPRCNM = "PC0G110"; /* process name*/
      set PC0GM001.PC0GMSIT cursor, modified, bold;
    end
  else
    PCAREC.YSICD = "*"; /* set nike special instr code*/
    PC0GW01.YSICD = " "; /* set w/s special instr code*/
    PC0GW01.YSIDESC = " "; /* clear w/s special instr desc*/
  end


   /* ------------------------------------------------------------*/
   /* sue change starts here*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Cross edit the special instruction type and po-type*/
   /* when it is salesman sample special instruction.*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.PC0GMSIT != " "
   && PC0GM001.PC0GMPTY != " ")
    if (PC0GM001.PC0GMSIT == "NL"
     || PC0GM001.PC0GMSIT == "IN"
     || PC0GM001.PC0GMSIT == "OD")
      if (PC0GM001.PC0GMPTY == "SS"
       || PC0GM001.PC0GMPTY == "SD")
        /* next sentence*/
      else
        converseLib.validationFailed(492); /* invalid SI type for po*/
        PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
        PC0GM002.XXXPRCNM = "PC0G110"; /* load process name*/
        set PC0GM001.PC0GMSIT cursor, modified, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the input po-type to be used to list the si types*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Validate po type code*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.PC0GMPTY != " ")

    set PC4REC empty; /* clear pc4rec*/

    PC4REC.XGPCD = PC0GM001.XGPCD;
    PC4REC.PC4ORTYP = PC0GM001.PC0GMPTY;

    PC0GS10(); /* select p.o. type row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PCAREC.PC4ORTYP = PC0GM001.PC0GMPTY;
      PC0GW01.PC4ORTYP = PC0GM001.PC0GMPTY;
      PC0GM001.PC0GMPDS = PC4REC.PC4SDESC;
    else
      PC0GM001.PC0GMPDS = " ";
      PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
      PC0GM001.XXXPRCNM = "PC0G110"; /* load process name*/
      converseLib.validationFailed(124); /* invalid po type for this gpc*/
      set PC0GM001.PC0GMPTY cursor, modified, bold;
    end
  else
    PCAREC.PC4ORTYP = "*";
    PC0GW01.PC4ORTYP = " ";
    PC0GM001.PC0GMPDS = " ";
  end

   /* ------------------------------------------------------------*/
   /* sue-change ended  here*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify gpc code*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.XGPCD != " ")
    if (PC0GM001.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active gpc code*/
      PCAREC.XGPCD = PC0GM001.XGPCD;
      PC0GW01.XGPCD = PC0GM001.XGPCD;
   /* MOVE XGPTBL.XGPDESC(EZETST) TO PC0GW01.XGPDESC;*/
   /* MOVE XGPTBL.XGPDESC(EZETST) TO PC0GM001.XGPDESC;*/
      PC0GW01.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      PC0GM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      if (PC0GM001.XGPCD != "01"
       && PC0GM001.XGPCD != "02"
       && PC0GM001.XGPCD != "03"
       && PC0GM001.XGPCD != "07")
        converseLib.validationFailed(200); /* invalid gpc for po system*/
      end
    else
      converseLib.validationFailed(28); /* missing/invalid gpc*/
    end
  else
    converseLib.validationFailed(28); /* missing/invalid gpc*/
  end


  if (converseVar.validationMsgNum == 28 /* missing/invalid gpc*/
   || converseVar.validationMsgNum == 200) /* invalid gpc for po*/
    PC0GW01.XGPCD = " "; /* clear w/s gpc code*/
   /* MOVE ' ' TO PC0GW01.XGPDESC;*/
   /* MOVE ' ' TO PC0GM001.XGPDESC;*/
    PC0GW01.XGPABRV = " "; /* clear w/s gpc desc*/
    PC0GM001.XGPABRV = " "; /* clear w/s gpc desc*/
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G110"; /* process name*/
    set PC0GM001.XGPCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* If valid data was entered obtain nike special*/
   /* instruction rows for display.*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWPSW == "Y") /* bypass additional database i/o*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If no error(s) verify user security*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWUPD = "N"; /* reset update flag*/
  PC0GW01.PC0GWINQ = "N"; /* reset inquiry flag*/
  if (PC0GW01.PC0GWCPY == "N")

     /* verify if user is authorized to add/chg data*/

    if (PC0GM001.XGPCD == "01"
     && COMMAREA.CACLVL[1] == "Y")
      PC0GW01.PC0GWUPD = "Y";
    end

    if (PC0GM001.XGPCD == "02"
     && COMMAREA.CACLVL[2] == "Y")
      PC0GW01.PC0GWUPD = "Y";
    end

    if (PC0GM001.XGPCD == "03"
     && COMMAREA.CACLVL[3] == "Y")
      PC0GW01.PC0GWUPD = "Y";
    end

    if (PC0GM001.XGPCD == "07"
     && COMMAREA.CACLVL[7] == "Y")
      PC0GW01.PC0GWUPD = "Y";
    end

     /* verify if user is authorized to inq data*/

    if (PC0GW01.PC0GWUPD == "N")
      if (PC0GM001.XGPCD == "01"
       && COMMAREA.CAILVL[1] == "Y")
        PC0GW01.PC0GWINQ = "Y";
      end

      if (PC0GM001.XGPCD == "02"
       && COMMAREA.CAILVL[2] == "Y")
        PC0GW01.PC0GWINQ = "Y";
      end

      if (PC0GM001.XGPCD == "03"
       && COMMAREA.CAILVL[3] == "Y")
        PC0GW01.PC0GWINQ = "Y";
      end

      if (PC0GM001.XGPCD == "07"
       && COMMAREA.CAILVL[7] == "Y")
        PC0GW01.PC0GWINQ = "Y";
      end

      if (PC0GW01.PC0GWINQ == "N")
        PC0GW01.XGPCD = " ";
        PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
        converseLib.validationFailed(105); /* user security error*/
        PC0GM001.XXXPRCNM = "PC0G110";
      end
    end
  end

  if (PC0GW01.PC0GWPSW == "Y") /* bypass additional database i/o*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* sue-change starts here*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If valid data was entered an the user passed security ck*/
   /* select nike special instruction rows for display*/
   /* ------------------------------------------------------------*/
   /* PC0GS02;                          /* Select set and open the cursor*/
   /* ------------------------------------------------------------------*/
   /* Using 3 selection criteria(gpc,si-type,po-type) for cursor set.*/
   /* If po-type > spaces, all 3 will be used to set the cursor(S2),*/
   /* otherwise only gpc & si-type will be used(S1).*/
   /* ------------------------------------------------------------------*/

  if (PC0GM001.PC0GMPTY == " ")
    PC0GS02(); /* Select set and open cursor(S1)*/
  else
    PC0GS29(); /* Select set and open cursor(S2)*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    PC0GW01.PC0GWIXM = 1; /* Initialize display line number*/
    PC0GW01.PC0GWNSW = "N"; /* Initialize end of file switch*/
    PC0GW01.PC0GWPSW = "N"; /* Init problem found switch*/

   /* PC0GS03;                       /* Fetch pcarec row*/

    if (PC0GM001.PC0GMPTY == " ")
      PC0GS03(); /* Fetch pcarec row (n1)*/
    else
      PC0GS30(); /* Fetch pcarec row (n2)*/
    end

    while (PC0GW01.PC0GWNSW == "N" /* Until end of set or problem found*/
     && PC0GW01.PC0GWPSW == "N")

       /* load temporary storage record pc0gw02*/

      PC0GW02.XGPCD[PC0GWIXM] = PCAREC.XGPCD;
      PC0GW02.PCASINBR[PC0GWIXM] = PCAREC.PCASINBR;
      PC0GW02.PC4ORTYP[PC0GWIXM] = PCAREC.PC4ORTYP;
      PC0GW02.YSICD[PC0GWIXM] = PCAREC.YSICD;
      PC0GW02.PCASIDSC[PC0GWIXM] = PCAREC.PCASIDSC;
      PC0GW02.PCASTDFL[PC0GWIXM] = PCAREC.PCASTDFL;
      PC0GW02.FY1FRGN[PC0GWIXM] = PCAREC.FY1FRGN;
      PC0GW02.XXXSTAT[PC0GWIXM] = PCAREC.XXXSTAT;
      PC0GW02.ZZZCHGCT[PC0GWIXM] = PCAREC.ZZZCHGCT;

      if (PC0GW01.PC0GWIXM >= 13)
        PC0GS04(); /* Add page to temp storage*/
      else
        PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Incr. index*/
      end

   /* PC0GS03;                     /* Fetch pcarec row*/

      if (PC0GM001.PC0GMPTY == " ")
        PC0GS03(); /* Fetch pcarec row (n1)*/
      else
        PC0GS30(); /* Fetch pcarec row (n2)*/
      end

    end

    PC0GW01.PC0GWTSP = 1; /* Initialize page number*/

   /* PC0GS05;                       /* Close set of pcarec rows*/

    if (PC0GM001.PC0GMPTY == " ")
      PC0GS05(); /* Close pcarec set (c1)*/
    else
      PC0GS31(); /* Close pcarec set (c2)*/
    end

  end

   /* ------------------------------------------------------------*/
   /* sue-change ended  here*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWPSW == "N" /* no errors*/
   && PC0GW01.PC0GWIXM > 1)   /* additional data for temp storage*/

    PC0GS04(); /* add page to temp storage*/

  end

  if (PC0GW01.TA5TSQIX == 0) /* No data to display*/
    PC0GW01.XGPCD = " "; /* clear w/s gpc code*/
    PC0GW01.YSICD = " "; /* clear w/s special instr code*/
    PC0GW01.PC0GWPSW = "Y"; /* indicate error exists*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0GM001.XXXPRCNM = "PC0G110"; /* process name*/
    set PC0GM001.XGPCD cursor; /* set cursor*/
  end


end // end PC0G110

// Format and display the map
Function PC0G120()

   /* ------------------------------------------------------------*/
   /* If no error(s) to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
   && PC0GW01.PC0GWBYF == "N") /* do not bypass processing*/
    PC0G121(); /* Format the selected data*/
  end

   /* ------------------------------------------------------------*/
   /* The problem switch is set if: -invalid key data*/
                                  /* (gpc,spec instr)*/
                                 /* -invalid transfer application*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWPSW == "Y") /* Error message to display*/
    if (COMMAREA.CATOAP > " ") /* invalid transfer request*/
      set PC0GM001 initial; /* clear map pc0gm001*/
      PC0GM001.XXXPRCNM = "PC0G120"; /* load process name*/
      PC0GM001.CATOAP = COMMAREA.CATOAP; /* load transfer application*/
      PC0GM001.CAITEM = COMMAREA.CAITEM; /* load transfer items*/
      COMMAREA.CATOAP = " "; /* clear commarea transfer application*/
      COMMAREA.CAITEM = " "; /* clear commarea transfer items*/
      PC0GW01.XGPCD = " "; /* clear w/s gpc*/
      PC0GW01.YSICD = " "; /* clear w/s special instr code*/
      set PC0GM001.CATOAP cursor, modified, bold; /* set cursor*/
    end

    set PC0GM001.PC0GMPGL initialAttributes; /* Turn off "PAGE" literal*/
    set PC0GM001.PC0GMOFL initialAttributes; /* Turn off "OF" literal*/
    set PC0GM001.PC0GWTSP initialAttributes; /* turn off current page number*/
    set PC0GM001.TA5TSQIX initialAttributes; /* Turn off highest page number*/

  end

   /* ------------------------------------------------------------*/
   /* Display PF key options*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWCPY == "Y") /* copy function requested*/
    set PC0GM001.PC0GMHLP skip, invisible;
    set PC0GM001.PC0GMPDM skip, invisible;
    set PC0GM001.PC0GMADD skip, invisible;
    set PC0GM001.PC0GMCHG skip, invisible;
    set PC0GM001.PC0GMMST skip, invisible;
    set PC0GM001.PC0GMCST skip, invisible;
    set PC0GM001.PC0GMOPT skip, invisible;
    set PC0GM001.CATOAP skip, invisible;
    set PC0GM001.PC0GMITM skip, invisible;
    set PC0GM001.CAITEM skip, invisible;
    set PC0GM001.XGPCD skip;
    PC0GM001.PC0GMPOT = "3:PO INST";
  else
    PC0GM001.PC0GMPOT = "3:PO MN  ";
  end

  if (PC0GW01.PC0GWUPD == "Y") /* updates allowed*/
    set PC0GM001.PC0GMADD skip;
    set PC0GM001.PC0GMCHG skip;
  end

   /* ------------------------------------------------------------*/
   /* if data successful updated display message*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWMFL == "Y") /* update flag on*/
    converseLib.validationFailed(1);
    PC0GM001.XXXPRCNM = "PC0G120"; /* process name*/
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors sound the alarm*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PC0GM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Display nike special instruction list screen*/
   /* ------------------------------------------------------------*/

  PC0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0GM001 ;
   /* ------------------------------------------------------------*/
   /* Reset problem switch and check if the user has requested*/
   /* the display of the gpc pop-up window.*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWPSW = "N"; /* Reset problem switch*/
  PC0GW01.PC0GWBYF = "N"; /* Reset bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0G122(); /* Check for ? inquiry by user*/
  end

   /* ------------------------------------------------------------*/
   /* load for transfer request*/
   /* sue-change*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = PC0GM001.XGPCD;
  PCWREC.YSICD = PC0GM001.PC0GMSIT;
  PCWREC.PC4ORTYP = PC0GM001.PC0GMPTY; /* sue*/


end // end PC0G120

// Format the selected data
Function PC0G121()

   /* ------------------------------------------------------------*/
   /* Obtain temporary storage, load and display map fields.*/
   /* ------------------------------------------------------------*/

  set PC0GM001 initial;

  PC0GM001.XGPCD = PC0GW01.XGPCD;
   /* MOVE PC0GW01.XGPDESC TO PC0GM001.XGPDESC;*/
  PC0GM001.XGPABRV = PC0GW01.XGPABRV;

  PC0GM001.PC0GMSIT = PC0GW01.YSICD;
  PC0GM001.YSIDESC = PC0GW01.YSIDESC;

   /* ------------------------------------------------------------*/
   /* sue-change due to added po-type on screen 1*/
   /* ------------------------------------------------------------*/

  PC0GM001.PC0GMPTY = PC0GW01.PC4ORTYP;
  PC0GM001.PC0GMPDS = PC0GW01.PC4SDESC;

   /* ------------------------------------------------------------*/
   /* sue-change ended here*/
   /* ------------------------------------------------------------*/

  PC0GS06(); /* Obtain temporary storage page*/

  set PC0GM001.PC0GMPGL skip; /* Display "PAGE" literal*/
  set PC0GM001.PC0GMOFL skip; /* Display "OF" literal*/

  PC0GM001.PC0GWTSP = PC0GW01.PC0GWTSP; /* Current page number*/
  set PC0GM001.PC0GWTSP skip; /* Display number*/
  PC0GM001.TA5TSQIX = PC0GW01.TA5TSQIX; /* Highest page number*/
  set PC0GM001.TA5TSQIX skip; /* Display number*/

  PC0GW01.PC0GWIXM = 1; /* Initialize line index*/
  while (PC0GW01.PC0GWIXM <= 13 /* Until end of lines or*/
   && PC0GW02.YSICD[PC0GWIXM] != " ") /* all special instr displayed*/

    if (PC0GW01.PC0GWCPY == "Y" /* in copy mode*/
     && PC0GW02.XXXSTAT[PC0GWIXM] == "I") /* inactive status*/
       /* do not allow copy of inactive special instructions*/
      set PC0GM001.PC0GMSEL[PC0GWIXM] protect, invisible;
    else
      set PC0GM001.PC0GMSEL[PC0GWIXM] normal; /* Display select flag*/
    end
    PC0GM001.PC0GMSEL[PC0GWIXM] = PC0GW02.PC0GMSEL[PC0GWIXM];
    PC0GM001.YSICD[PC0GWIXM] = PC0GW02.YSICD[PC0GWIXM];
    PC0GM001.PCASIDSC[PC0GWIXM] = PC0GW02.PCASIDSC[PC0GWIXM];
    PC0GM001.PCASTDFL[PC0GWIXM] = PC0GW02.PCASTDFL[PC0GWIXM];
    PC0GM001.FY1FRGN[PC0GWIXM] = PC0GW02.FY1FRGN[PC0GWIXM];
    PC0GM001.PC4ORTYP[PC0GWIXM] = PC0GW02.PC4ORTYP[PC0GWIXM];
    PC0GM001.XXXSTAT[PC0GWIXM] = PC0GW02.XXXSTAT[PC0GWIXM];

    PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Increment line index*/

  end

  set PC0GM001.PC0GMSEL[PC0GWCIX] cursor; /* Last row viewed*/

end // end PC0G121

// Check for ? inquiry by user
Function PC0G122()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0GM001.XGPCD == "?"
   || PC0GM001.PC0GMSIT == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0GM001.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0GM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
   /* MOVE XGPTBL.XGPDESC(XX0XWPIX) TO PC0GM001.XGPDESC; /* move name*/
        PC0GM001.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* move name*/
      else
        PC0GM001.XGPCD = PC0GW01.XGPCD;
   /* RETR PC0GW01.XGPCD XGPTBL PC0GM001.XGPDESC XGPDESC;*/
        if (PC0GW01.XGPCD in XGPTBL.XGPCD)
          PC0GM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
        end
      end

      set PC0GM001.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check special instruction type for ?*/
    /* *************************************************************/

    if (PC0GM001.PC0GMSIT == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  SPECIAL INSTRUCTION TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSI01(); /* perform special instr type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0GM001.PC0GMSIT = YSITBL.YSICD[XX0XWPIX]; /* move code*/
        PC0GM001.YSIDESC = YSITBL.YSIDESC[XX0XWPIX]; /* move name*/
      else
        PC0GM001.PC0GMSIT = PC0GW01.YSICD;
        if (PC0GW01.YSICD in YSITBL.YSICD)
          PC0GM001.YSIDESC = YSITBL.YSIDESC[sysVar.arrayIndex];
        end
      end

      set PC0GM001.PC0GMSIT cursor; /* set cursor*/

    end

    converseLib.clearScreen();

    PC0GW01.PC0GWBYF = "Y";

  end


end // end PC0G122

// Check attention identifier
Function PC0G130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0gm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0GW01.PC0GWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify pfkeys for copy function*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWCPY == "Y")
    PC0G131(); /* pfkey check for copy function*/
  else
    PC0G132(); /* pfkey check for non copy function*/
  end

end // end PC0G130

// pfkey check for copy func.
Function PC0G131()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verfiy pfkeys for copy function*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. item / p.o. header special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0GS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Set to application*/
    PCWREC.PCWFNC[4] = "C"; /* set function switch to copy*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G131"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PC0GM001.XXXPRCNM = "PC0G131"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0GW01.PC0GWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0G131

// pfkey check for non copy func.
Function PC0G132()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0GS01(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0GM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0GM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
      PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/

  end
   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0GS01(); /* Purge any temporary storage*/

    COMMAREA.CAUSERA = " "; /* init commarea*/
    PCWREC.CAUSERA = " "; /* init commarea*/
    COMMAREA.CAITEM = " "; /* Application data*/
    if (COMMAREA.CAFROMAP == "PB0K")
      COMMAREA.CATOAP = "PB0K"; /* Set to style spcl inst*/
    else
      COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/
    end

    XSPCS01(); /* Exit to p.o. menu*/

    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PC0GM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PC0GS01(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF13 - Verify if user is authorized to add nike special*/
          /* instruction information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0GW01.PC0GWUPD == "N")     /* and user add not authorized*/
    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF14 - Verify if user is authorized to change nike special*/
          /* instruction information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0GW01.PC0GWUPD == "N")     /* and user chg not authorized*/
    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF17 - transfer to customer special instruction*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/

    PC0GS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CATOAP = "PC0F"; /* Set to customer special instruction*/

    XSPCS01(); /* Exit to p.o. menu*/

    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end
   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF17 was not pressed*/

    PC0GM001.XXXPRCNM = "PC0G132"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0GW01.PC0GWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0G132

// Reset highlighted fields
Function PC0G140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* sue-change*/
   /* ------------------------------------------------------------*/

  set PC0GM001.XGPCD initialAttributes; /* gpc code*/
  set PC0GM001.PC0GMSIT initialAttributes; /* special instr. type*/
  set PC0GM001.PC0GMPTY initialAttributes; /* po-type           /* sue change*/

  PC0GW01.PC0GWIXM = 1; /* Initialize line index*/

  while (PC0GW01.PC0GWIXM <= 13 /* Until end of lines*/
   && PC0GM001.YSICD[PC0GWIXM] != " ")
                                   /* and special instr. type exists*/
    set PC0GM001.PC0GMSEL[PC0GWIXM] normal; /* Reset select flag*/
    PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM + 1; /* Increment line index*/
  end

  set PC0GM001.CATOAP initialAttributes;
  set PC0GM001.CAITEM initialAttributes;

end // end PC0G140

// Verify the entered data
Function PC0G150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0GM001.CAITEM > " ") /* Application data was entered*/
    set PC0GM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0GM001.XXXPRCNM = "PC0G150"; /* Process name*/

    return; /* exit redisplay map*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0G151(); /* Verify scroll request*/

  else
    if (converseVar.eventKey not pf13)

      PC0G152(); /* Verify any changed data*/

    end
  end

end // end PC0G150

// Verify scroll request
Function PC0G151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  PC0GW01.PC0GWIXM = 13; /* Initialize line index*/

  while (PC0GW01.PC0GWIXM > 0) /* Until end of lines*/
    if (PC0GM001.PC0GMSEL[PC0GWIXM] > " "
     && PC0GM001.PC0GMSEL[PC0GWIXM] != "V")
      set PC0GM001.PC0GMSEL[PC0GWIXM] cursor, modified, bold; /* Highlight*/
      PC0GM001.XXXPRCNM = "PC0G151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0GW01.PC0GWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* no errors*/
    PC0GM001.XXXPRCNM = "PC0G151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PC0GW01.PC0GWTSP >= PC0GW01.TA5TSQIX /* and no more pages*/
   && converseVar.validationMsgNum == 0)   /* no errors*/
    PC0GM001.XXXPRCNM = "PC0G151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum == 0)
    PC0GW01.PC0GWCIX = 1; /* set cursor at first row*/
  end

end // end PC0G151

// Verify any changed data
Function PC0G152()

   /* ------------------------------------------------------------*/
   /* Check for change in gpc code, or special instruction type*/
   /* or po-type.*/
   /* sue change*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* error message*/
   || PC0GW01.PC0GWBYF == "Y")          /* bypass processing*/
    return;
  end

  if (PC0GM001.XGPCD == " "              /* gpc eq spaces*/
   || PC0GM001.XGPCD != PC0GW01.XGPCD    /* GPC changed*/
   || PC0GM001.PC0GMSIT != PC0GW01.YSICD /* SI type changed*/
   || PC0GM001.PC0GMPTY != PC0GW01.PC4ORTYP) /* PO type changed*/
    PC0GW01.PC0GWSWR = "Y"; /* equest data switch*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if data has been selected off the list screen*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWSFL = "N"; /* Initialize selection flag*/
  PC0GW01.PC0GWIXM = 13; /* Initialize index*/

  while (PC0GW01.PC0GWIXM > 0) /* Until end of lines*/
    if (PC0GM001.PC0GMSEL[PC0GWIXM] != " ") /* If selection not blank*/
      if (PC0GM001.PC0GMSEL[PC0GWIXM] == "S")
        PC0GW01.PC0GWSFL = "Y"; /* Initialize selection flag*/
      else
        if (PC0GM001.PC0GMSEL[PC0GWIXM] != "V") /* invalid entry*/
          converseLib.validationFailed(13); /* Error message and highlight*/
          PC0GM001.XXXPRCNM = "PC0G152"; /* Process name*/
          PC0GW01.PC0GWSFL = "Y"; /* Initialize selection flag*/
          set PC0GM001.PC0GMSEL[PC0GWIXM] cursor, modified, bold;
        end
      end
    end

    PC0GW01.PC0GWIXM = PC0GW01.PC0GWIXM - 1; /* Decrement line index*/
  end

   /* ------------------------------------------------------------*/
   /* If PF14 pressed and no data selected display error msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 changed requested*/
   && PC0GW01.PC0GWSFL == "N")     /* and selection was not made*/
    PC0GM001.XXXPRCNM = "PC0G152"; /* Process name*/
    converseLib.validationFailed(25); /* enter 's' for selection*/
  end
end // end PC0G152

// Process valid input request
Function PC0G160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error message set up*/
   || PC0GW01.PC0GWBYF == "Y")          /* bypass processing*/
    return;
  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PC0GW01.PC0GWTSP = PC0GW01.PC0GWTSP - 1; /* Decrement page number*/
    return;
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PC0GW01.PC0GWTSP = PC0GW01.PC0GWTSP + 1; /* Increment page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Copy function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0GW01.PC0GWCPY == "Y"       /* copy function requested*/
   && PC0GW01.PC0GWSFL == "Y")      /* and selection was made*/
    PC0GW01.PC0GWMAP = "2"; /* Select Map #2*/
    PC0GW01.PC0GWFSW = "T"; /* Select inquiry function*/
    converseLib.validationFailed(0); /* Clear error message field*/
  end

   /* ------------------------------------------------------------*/
   /* Inquiry function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && PC0GW01.PC0GWCPY == "N"       /* copy function was not requested*/
   && PC0GW01.PC0GWSFL == "Y")      /* and selection was made*/
    PC0GW01.PC0GWMAP = "2"; /* Select Map #2*/
    PC0GW01.PC0GWFSW = "I"; /* Select inquiry function*/
    converseLib.validationFailed(0); /* Clear error message field*/
  end

   /* ------------------------------------------------------------*/
   /* Add function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0GW01.PC0GWCPY == "N")     /* copy function was not requested*/
    PC0GW01.PC0GWMAP = "2"; /* Select Map #2*/
    PC0GW01.PC0GWFSW = "A"; /* Select add function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Change function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0GW01.PC0GWCPY == "N"      /* copy function was not requested*/
   && PC0GW01.PC0GWSFL == "Y")     /* and selection was made*/
    PC0GW01.PC0GWMAP = "2"; /* Select Map #2*/
    PC0GW01.PC0GWFSW = "C"; /* Select change function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end


end // end PC0G160

// nike special instr - copy
Function PC0G200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0G210(); /* obtain data*/

  PC0G220(); /* Format and display the map*/

  PC0G230(); /* Check attention identifier*/

  PC0G240(); /* Reset fields to normal intensity*/

  PC0G250(); /* verify the entered data*/

  PC0G260(); /* process valid input request*/

end // end PC0G200

// Obtain spec instr text
Function PC0G210()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0GW01.PC0GWBYF == "N")         

    set PC0GM002 initial; /* clear screen pc0gm002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

    PC0GS07(); /* select set and open the cursor*/

    PC0GW01.PC0GWSIX = 1; /* init spec.instr. line index*/
    PC0GW01.PC0GWSTW = "N"; /* init spec. instr. text switch*/
    PC0GW01.PC0GWPSW = "N"; /* reset problem switch*/

    PC0GS08(); /* fetch pcbrec row*/

    while (PC0GW01.PC0GWSTW == "N" /* until end of special text or*/
     && PC0GW01.PC0GWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/

      PC0GW03.PCBSITXT = PCBREC.PCBSITXT;
      if (PC0GW03.PC0GWMIN == "MADE IN:"
       && COMMAREA.XGPCD == "03")
        VPOHDR02.XGPCD = COMMAREA.XGPCD;
        VPOHDR02.PO-REG-CD = PCWREC.PO-REG-CD;
        VPOHDR02.PC3PONBR = PCWREC.PC3PONBR;
        PC0GS26(); /* get po header*/
        if (VPOHDR02.PC4ORTYP == "XI" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "XD" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "S8" /* nil po type*/
         || VPOHDR02.PC4ORTYP == "S9") /* nil po type*/
          if (VPOHDR02.XCTCD in XCTTBL.XCTCD) /* get county desc*/
            PC0GW03.PC0GWCTY = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move ctry*/
          end
        else /* not a nil po type*/
          if (VPOHDR02.XCTCD == "USA") /* do not default if usa and domestic*/
            /* next sentence*/
          else /* not = 'usa'*/
            if (VPOHDR02.XCTCD in XCTTBL.XCTCD) /* get county desc*/
              PC0GW03.PC0GWCTY = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move ctry*/
            end
          end
        end
      end

      PC0GM002.PCBSITXT[PC0GWSIX] = PC0GW03.PCBSITXT;


      PC0GS08(); /* fetch pcbrec row*/

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1; /* incr. index*/

    end

    PC0GS09(); /* close set of pcbrec rows*/

  end

end // end PC0G210

// Format and display the map
Function PC0G220()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0GW01.PC0GWBYF == "N")         

     /* load nike special instruction from temp storage*/

    PC0GM002.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    if (PC0GW02.XGPCD[PC0GWIXM] in XGPTBL.XGPCD)
      PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0GM002.YSICD = PC0GW02.YSICD[PC0GWIXM];
    if (PC0GW02.YSICD[PC0GWIXM] in YSITBL.YSICD)
      PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0GM002.PCASIDSC = PC0GW02.PCASIDSC[PC0GWIXM];
    PC0GM002.PC4ORTYP = PC0GW02.PC4ORTYP[PC0GWIXM];
    if (PC0GW02.PC4ORTYP[PC0GWIXM] > " ") /* obtain po type desc*/
      PC4REC.XGPCD = PC0GW02.XGPCD;
      PC4REC.PC4ORTYP = PC0GW02.PC4ORTYP;

      PC0GS10(); /* select po type for description*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0GM002.PC4SDESC = PC4REC.PC4SDESC;
      else
        PC0GM002.PC4SDESC = " ";
      end
    end

    PC0GM002.PCASTDFL = PC0GW02.PCASTDFL[PC0GWIXM];
    PC0GM002.FY1FRGN = PC0GW02.FY1FRGN[PC0GWIXM];
    PC0GM002.XXXSTAT = PC0GW02.XXXSTAT[PC0GWIXM];

    converseLib.validationFailed(115); /* press enter to copy data*/
    PC0GW01.PC0GWCIX = PC0GW01.PC0GWIXM; /* save to position cursor*/
    PC0GW02.PC0GMSEL[PC0GWIXM] = "V";

    PC0GS11(); /* update temp storage*/

  end

   /* Protect all nike special instruction data*/

  set PC0GM002.XGPCD protect; /* Gpc code*/
  set PC0GM002.YSICD protect; /* special instr. type code*/
  set PC0GM002.PC4ORTYP protect; /* p.o. order type code*/
  set PC0GM002.PCASTDFL protect; /* standard print*/
  set PC0GM002.FY1FRGN protect; /* offshore flag*/
  set PC0GM002.XXXSTAT protect; /* status*/

   /* Darken pfkey literials*/

  set PC0GM002.PC0GMHLP skip, invisible;
  set PC0GM002.PC0GMPRD skip, invisible;
  set PC0GM002.PC0GMMST skip, invisible;
  set PC0GM002.CATOAP skip, invisible;
  set PC0GM002.CAITEM skip, invisible;
  set PC0GM002.PC0GMOPT skip, invisible;
  set PC0GM002.PC0GMITM skip, invisible;

  PC0GM002.PC0GMFNC = "COPY"; /* Move copy literal to map*/
  PC0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  set PC0GM002.PCASIDSC cursor; /* set cursor*/

  if (PC0GW01.PC0GWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0GM002.XXXPRCNM = "PC0G220"; /* process name*/
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    if (converseVar.validationMsgNum != 115) /* bypass copy message*/
      set PC0GM002 alarm; /* sound the alarm*/
    end
  end

  converse PC0GM002 ;

  PC0GW01.PC0GWPSW = "N"; /* Initialize problem switch*/
  PC0GW01.PC0GWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0G220

// Check attention identifier
Function PC0G230()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0gm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to nike special instruction list pc0gm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0GW01.PC0GWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0GM002.XXXPRCNM = "PC0G230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PC0G230

// Reset highlighted fields
Function PC0G240()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0GM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0GM002.YSICD initialAttributes; /* special instr. type*/
  set PC0GM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0GM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0GM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0GM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0GM002.XXXSTAT initialAttributes; /* offshore flag*/

  PC0GW01.PC0GWSIX = 1; /* init spec text index*/
  while (PC0GW01.PC0GWSIX <= 13)
    set PC0GM002.PCBSITXT[PC0GWSIX] initialAttributes;
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
  end

  set PC0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0GM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0G240

// verify the entered data
Function PC0G250()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWSIX = 13;
  PC0GW01.PC0GWTEF = "N";
  while (PC0GW01.PC0GWSIX >= 1
   && PC0GW01.PC0GWTEF == "N")
    if (PC0GM002.PCBSITXT[PC0GWSIX] != " ")
      PC0GW01.PC0GWTEF = "Y";
    end

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1; /* incr. index*/

  end

  if (PC0GW01.PC0GWTEF == "N")
    converseLib.validationFailed(68); /* description required*/
    PC0GM002.XXXPRCNM = "PC0G250"; /* load process name*/
    PC0GW01.PC0GWSIX = 13;
    while (PC0GW01.PC0GWSIX >= 1)
      set PC0GM002.PCBSITXT[PC0GWSIX] cursor, modified, bold;

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* validate nike special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCASIDSC == " ")
    converseLib.validationFailed(68); /* description required*/
    PC0GM002.XXXPRCNM = "PC0G250"; /* load process name*/
    set PC0GM002.PCASIDSC cursor, modified, bold;
  end


end // end PC0G250

// process valid input request
Function PC0G260()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0 /* errors exist*/
   || PC0GW01.PC0GWBYF == "Y")          /* bypass processing*/
    return;
  end

  if (COMMAREA.CAFROMAP == "PC0I")
    PC0G261(); /* p.o. item special instruction*/
  else
    PC0G262(); /* p.o. header special instruction*/
  end


end // end PC0G260

// process p.o. item spec. instr.
Function PC0G261()

   /* ------------------------------------------------------------*/
   /* process copy request from pc0g - p.o. item special instr.*/
   /* ------------------------------------------------------------*/

  set VPOITM03 empty; /* init p.o. item rec*/
  set PCGREC empty; /* init p.o. product spec instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

   /* ------------------------------------------------------------*/
   /* obtain p.o. item row(s)*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PCWREC.XGPCD;
  VPOITM03.PO-REG-CD = PCWREC.PO-REG-CD;
  VPOITM03.PC3PONBR = PCWREC.PC3PONBR;
  VPOITM03.SY1STNBR = PCWREC.SY1STNBR;
  VPOITM03.SY2CLRID = PCWREC.SY2CLRID;
  VPOITM03.XDMCD = PCWREC.XDMCD;
  VPOITM03.XQACD = PCWREC.XQACD;
  VPOITM03.XOWCD = PCWREC.XOWCD;
  VPOITM03.PC2INSEG = PCWREC.PC2INSEG;
  VPOITM03.XPGCD = PCWREC.XPGCD;
  VPOITM03.XUMCD = PCWREC.XUMCD;
  VPOITM03.XWHCD = PCWREC.XWHCD;
  VPOITM03.PC6ETSDT = PCWREC.PC6ETSDT;
  VPOITM03.PC6RTADT = PCWREC.PC6RTADT;
  VPOITM03.PC6OETS = PCWREC.PC6OETS;
  VPOITM03.PC2CUXID = PCWREC.PC2CUXID;

   /* MOVE PCWREC.OP1CUOID TO PC6REC.OP1CUOID;   not ready*/
   /* MOVE PCWREC.OP1NORID TO PC6REC.OP1NORID;   for this*/
   /* MOVE PCWREC.OP1PARTN TO PC6REC.OP1PARTN;   yet*/

  VPOITM03.YSMXDV = PCWREC.YSMXDV;
  VPOITM03.YMTCD = PCWREC.YMTCD;
  VPOITM03.PC6PLAN = -1;
  VPOITM03.XDSCD = "*";

  PC0GS15(); /* select set and open the cursor*/

  PC0GW01.PC0GWPOI = "N"; /* set po item eof switch*/
  PC0GW01.PC0GWPSW = "N"; /* reset problem switch*/

  PC0GS16(); /* fetch po item*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    converseLib.validationFailed(169); /* po item deleted by another appl*/
  end

  while (PC0GW01.PC0GWPOI == "N" /* until end of po item*/
   && PC0GW01.PC0GWPSW == "N") /* no while no errors*/

    if (VPOITM03.PC6STAT == "OP")
      VPOITM03.PC3SIFL = "Y";
      VPOITM03.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOITM03.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PC0GS17(); /* update po item row*/

      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(198); /* p.o. item updated by another appl.*/
        PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
      else
        PCDREC.XGPCD = COMMAREA.XGPCD;

        PC0GS12(); /* select next spec instr number*/

        PCGREC.XGPCD = COMMAREA.XGPCD;
        PCGREC.PCASINBR = PCDREC.PCDSINBR;
        PCGREC.PC3PONBR = VPOITM03.PC3PONBR;
        PCGREC.PC6ITMNB = VPOITM03.PC6ITMNB;
        PCGREC.SY1STNBR = VPOITM03.SY1STNBR;
        PCGREC.SY2CLRID = VPOITM03.SY2CLRID;
        PCGREC.XDMCD = VPOITM03.XDMCD;
        PCGREC.XQACD = VPOITM03.XQACD;
        PCGREC.XOWCD = VPOITM03.XOWCD;
        PCGREC.PC2INSEG = VPOITM03.PC2INSEG;
        PCGREC.XPGCD = VPOITM03.XPGCD;
        PCGREC.XUMCD = VPOITM03.XUMCD;
        PCGREC.XWHCD = VPOITM03.XWHCD;
        PCGREC.PC6ETSDT = VPOITM03.PC6ETSDT;
        PCGREC.PC6RTADT = VPOITM03.PC6RTADT;
        PCGREC.PC6OETS = VPOITM03.PC6OETS;
        PCGREC.PC2CUXID = VPOITM03.PC2CUXID;
        PCGREC.OP1CUOID = VPOITM03.OP1CUOID;
        PCGREC.OP1NORID = VPOITM03.OP1NORID;
        PCGREC.OP1PARTN = VPOITM03.OP1PARTN;
        PCGREC.YMTCD = VPOITM03.YMTCD;
        PCGREC.YSICD = PC0GM002.YSICD;
        PCGREC.PCASIDSC = PC0GM002.PCASIDSC;
        PCGREC.PCEPRSEQ = 1;
        PCGREC.PCESIID = "N";
        PCGREC.ZZZSDT = XX0XW01.XX0XWDAT;
        PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PC0GS13(); /* add p.o. product spec instr*/

        PC0GS28(); /* add po item si audit*/

         /* determine the number of special msg text lines to be added*/

        PC0GW01.PC0GWSIX = 13;
        while (PC0GM002.PCBSITXT[PC0GWSIX] == " ")
          PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1;
        end

         /* load special instruction text*/

        PCBREC.XGPCD = COMMAREA.XGPCD;
        PCBREC.PCASINBR = PCDREC.PCDSINBR;
        PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
        PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
        PC0GW01.PC0GWLIX = PC0GW01.PC0GWSIX;
        PC0GW01.PC0GWSIX = 1;
        while (PC0GW01.PC0GWSIX <= PC0GW01.PC0GWLIX)

          PCBREC.PCBSISEQ = PC0GW01.PC0GWSIX;
          PCBREC.PCBSITXT = PC0GM002.PCBSITXT[PC0GWSIX];

          PC0GS14(); /* add special instruction text*/

          PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;

        end
      end
    end

    PC0GS16(); /* fetch next po item*/

  end

  PC0GS18(); /* close po item cursor*/


  if (PC0GW01.PC0GWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0GW01.PC0GWMFL = "Y"; /* message flag*/
    PCWREC.PCWAUDFL = "Y"; /* Set request for audit*/
  end

  PC0GM002.XXXPRCNM = "PC0G261"; /* process name*/
end // end PC0G261

// process p.o. hdr spec. instr.
Function PC0G262()

   /* ------------------------------------------------------------*/
   /* process copy request for pc0h - p.o. header special instr.*/
   /* ------------------------------------------------------------*/

  set PCEREC empty; /* init po header special instr.*/

  XX0XS01(); /* obtain current date and time*/

  PCDREC.XGPCD = COMMAREA.XGPCD;

  PC0GS12(); /* select next spec instr number*/

   /* load p.o. header special instruction*/

  PCEREC.XGPCD = COMMAREA.XGPCD;
  PCEREC.PCASINBR = PCDREC.PCDSINBR;
  PCEREC.PC3PONBR = PCWREC.PC3PONBR;
  PCEREC.YSICD = PC0GW02.YSICD[PC0GWIXM];
  PCEREC.PCASIDSC = PC0GM002.PCASIDSC;
  PCEREC.PCEPRSEQ = 1;
  PCEREC.PCESIID = "N";
  PCEREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCEREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCEREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0GS19(); /* add po header special instruction*/

   /* determine the number of special message lines to be added*/

  PC0GW01.PC0GWSIX = 13;
  while (PC0GM002.PCBSITXT[PC0GWSIX] == " ")
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1;
  end

   /* load special instruction text*/

   /* sue change -  added a line to add new zzzchgdt*/
   /* it was missing from original codes*/

  PCBREC.XGPCD = COMMAREA.XGPCD;
  PCBREC.PCASINBR = PCDREC.PCDSINBR;
  PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
   /* MOVE XX0XW01.XX0XWDAT TO PCBREC.ZZZSDT;*/
  PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PC0GW01.PC0GWLIX = PC0GW01.PC0GWSIX;
  PC0GW01.PC0GWSIX = 1;
  while (PC0GW01.PC0GWSIX <= PC0GW01.PC0GWLIX)
    PCBREC.PCBSISEQ = PC0GW01.PC0GWSIX;
    PCBREC.PCBSITXT = PC0GM002.PCBSITXT[PC0GWSIX];

    PC0GS14(); /* add special instruction text*/

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;

  end

   /* update p.o. header table*/

  set VPOHDR02 empty;

  VPOHDR02.XGPCD = COMMAREA.XGPCD;
  VPOHDR02.PO-REG-CD = PCWREC.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PCWREC.PC3PONBR;

  PC0GS20(); /* select p.o. header*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    converseLib.validationFailed(168); /* p.o. hdr deleted by another appl*/
  else
    VPOHDR02.PC3SIFL = "Y";
    VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0GS21(); /* update po header row*/

    PC0GS27(); /* add po header si audit*/

    if (SQLCA.VAGen_SQLCODE == 100)
      PC0GW01.PC0GWPSW = "Y"; /* set error flag*/
      converseLib.validationFailed(199); /* p.o. hdr updated by another appl*/
    end
  end

  if (PC0GW01.PC0GWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    PC0GW01.PC0GWMFL = "Y"; /* message flag*/
    PCWREC.PCWAUDFL = "Y"; /* Set request for audit*/
  end

  PC0GM002.XXXPRCNM = "PC0G262"; /* process name*/
end // end PC0G262

// nike special instr - inq
Function PC0G300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0G310(); /* obtain data*/

  PC0G320(); /* Format and display the map*/

  PC0G330(); /* Check attention identifier*/

  PC0G340(); /* Reset fields to normal intensity*/

  PC0G350(); /* Verify the entered data*/

end // end PC0G300

// Obtain spec instr text
Function PC0G310()

   /* ------------------------------------------------------------*/
   /* obtain the special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0GW01.PC0GWBYF == "N")          /* do not bypass processing*/

    set PC0GM002 initial; /* clear screen pc0gm002*/
    set PCBREC empty; /* init spec. text rec pcbrec*/

    PCBREC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

    PC0GS07(); /* select set and open the cursor*/

    PC0GW01.PC0GWSIX = 1; /* init spec.instr. line index*/
    PC0GW01.PC0GWSTW = "N"; /* init spec. instr. text switch*/
    PC0GW01.PC0GWPSW = "N"; /* reset problem switch*/

    PC0GS08(); /* fetch pcbrec row*/

    while (PC0GW01.PC0GWSTW == "N" /* until end of special text or*/
     && PC0GW01.PC0GWPSW == "N" /* problem found*/
     && PC0GW01.PC0GWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

       /* load special instruction text for display*/

      PC0GM002.PCBSITXT[PC0GWSIX] = PCBREC.PCBSITXT;

      PC0GS08(); /* fetch pcbrec row*/

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1; /* incr. index*/

    end

    PC0GS09(); /* close pcbrec row*/

  end

end // end PC0G310

// Format and display the map
Function PC0G320()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0GW01.PC0GWBYF == "N")          /* do not bypass processing*/

     /* load nike special instruction from temp storage*/

    PC0GM002.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    if (PC0GW02.XGPCD[PC0GWIXM] in XGPTBL.XGPCD)
      PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0GM002.YSICD = PC0GW02.YSICD[PC0GWIXM];
    if (PC0GW02.YSICD[PC0GWIXM] in YSITBL.YSICD)
      PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0GM002.PCASIDSC = PC0GW02.PCASIDSC[PC0GWIXM];
    PC0GM002.PC4ORTYP = PC0GW02.PC4ORTYP[PC0GWIXM];
    if (PC0GW02.PC4ORTYP[PC0GWIXM] > " ")
      PC4REC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
      PC4REC.PC4ORTYP = PC0GW02.PC4ORTYP[PC0GWIXM];

      PC0GS10(); /* select p.o. type*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0GM002.PC4SDESC = PC4REC.PC4SDESC;
      else
        PC0GM002.PC4SDESC = " ";
      end
    end

    PC0GM002.PCASTDFL = PC0GW02.PCASTDFL[PC0GWIXM];
    PC0GM002.FY1FRGN = PC0GW02.FY1FRGN[PC0GWIXM];
    PC0GM002.XXXSTAT = PC0GW02.XXXSTAT[PC0GWIXM];

    set PC0GM002.CATOAP cursor; /* Position cursor*/
    PC0GW01.PC0GWCIX = PC0GW01.PC0GWIXM; /* save to position cursor*/
    PC0GW02.PC0GMSEL[PC0GWIXM] = "V";

    PC0GS11(); /* update temp storage*/

  end

   /* protect all enterable fields*/

  set PC0GM002.XGPCD protect; /* Gpc code*/
  set PC0GM002.YSICD protect; /* special instr. type code*/
  set PC0GM002.PCASIDSC protect; /* special instr. type desc*/
  set PC0GM002.PC4ORTYP protect; /* p.o. order type code*/
  set PC0GM002.PCASTDFL protect; /* standard print*/
  set PC0GM002.FY1FRGN protect; /* offshore flag*/
  set PC0GM002.XXXSTAT protect; /* status code*/

  PC0GW01.PC0GWSIX = 1; /* init spec. text line index*/
  while (PC0GW01.PC0GWSIX <= 13)
    set PC0GM002.PCBSITXT[PC0GWSIX] protect; /* spec text*/
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1; /* incr. index*/
  end

  PC0GM002.PC0GMFNC = "INQUIRY"; /* Move inquiry literal to map*/
  PC0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PC0GM002 alarm; /* sound the alarm*/
  end

  converse PC0GM002 ;

  PC0GW01.PC0GWPSW = "N"; /* Initialize problem switch*/
  PC0GW01.PC0GWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0G320

// Check attention identifier
Function PC0G330()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0gm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0GS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      COMMAREA.CATOAP = PC0GM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0GM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0GW01.PC0GWPSW = "Y"; /* Set error switch*/
      PC0GW01.PC0GWMAP = 1; /* display list screen*/
      PC0GM001.XXXPRCNM = "PC0G330"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0GM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0GM002.XXXPRCNM = "PC0G330"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to nike special instruction list -- pc0gm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0GW01.PC0GWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0GM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0GS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0GW01.PC0GWMAP = 1; /* reset map*/
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G330"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0GM002.XXXPRCNM = "PC0G330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0G330

// Reset highlighted fields
Function PC0G340()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0GM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0GM002.YSICD initialAttributes; /* special instr. type*/
  set PC0GM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0GM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0GM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0GM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0GM002.XXXSTAT initialAttributes; /* status code*/

  PC0GW01.PC0GWSIX = 1; /* init spec text index*/
  while (PC0GW01.PC0GWSIX <= 13)
    set PC0GM002.PCBSITXT[PC0GWSIX] initialAttributes;
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
  end

  set PC0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0GM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0G340

// Verify the entered data
Function PC0G350()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.CAITEM > " ") /* Application data was entered*/
    set PC0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0GM002.XXXPRCNM = "PC0G350"; /* Process name*/

    return;

  end

end // end PC0G350

// nike special instr - add
Function PC0G400()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0G410(); /* Format and display the map*/

  PC0G420(); /* Check attention identifier*/

  PC0G430(); /* Reset fields to normal intensity*/

  PC0G440(); /* verify the entered data*/

  PC0G450(); /* process valid input request*/

end // end PC0G400

// Format and display the map
Function PC0G410()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0GW01.PC0GWBYF == "N")         

    set PC0GM002 initial; /* clear map pc0gm002*/
    PC0GM002.XGPCD = COMMAREA.XGPCD;
    if (COMMAREA.XGPCD in XGPTBL.XGPCD)
      PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0GM002.YSICD = PCWREC.YSICD;
    if (PCWREC.YSICD in YSITBL.YSICD)
      PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0GM002.PCASTDFL = "N";
    PC0GM002.FY1FRGN = "N";
    PC0GM002.XXXSTAT = "A";

    set PC0GM002.YSICD cursor, normal; /* Position cursor*/
    PC0GM002.PC0GMFNC = "ADD";

  end

  if (PC0GW01.PC0GWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0GM002.XXXPRCNM = "PC0G410"; /* process name*/
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PC0GM002 alarm; /* sound the alarm*/
  end

  set PC0GM002.XXXSTAT protect; /* protect on add*/
  PC0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0GM002 ;

  PC0GW01.PC0GWPSW = "N"; /* Initialize problem switch*/
  PC0GW01.PC0GWBYF = "N"; /* Initialize bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0G411(); /* check of ? inquiry by user*/
  end

   /* load commarea for transfer request*/
   /* sue change -added potype*/

  COMMAREA.XGPCD = PC0GM002.XGPCD;
  PCWREC.YSICD = PC0GM002.YSICD;
  PCWREC.PC4ORTYP = PC0GM002.PC4ORTYP;

end // end PC0G410

// Check for ? inquiry by user
Function PC0G411()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0GM002.XGPCD == "?"
   || PC0GM002.YSICD == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0GM002.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0GM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0GM002.XGPABRV = XGPTBL.XGPABRV[XX0XWPIX]; /* move name*/
      else
        PC0GM002.XGPCD = COMMAREA.XGPCD;
        if (COMMAREA.XGPCD in XGPTBL.XGPCD)
          PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
        end
      end

      set PC0GM002.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check special instruction type for ?*/
    /* *************************************************************/

    if (PC0GM002.YSICD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  SPECIAL INSTRUCTION TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSI01(); /* perform special instr type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0GM002.YSICD = YSITBL.YSICD[XX0XWPIX]; /* move code*/
        PC0GM002.YSISDESC = YSITBL.YSISDESC[XX0XWPIX]; /* move name*/
      else
        PC0GM002.YSICD = PCWREC.YSICD;
        if (PCWREC.YSICD in YSITBL.YSICD)
          PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
        end
      end

      set PC0GM002.YSICD cursor; /* set cursor*/

    end

    converseLib.clearScreen();

    PC0GW01.PC0GWBYF = "Y";

  end


end // end PC0G411

// Check attention identifier
Function PC0G420()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0gm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    converseLib.validationFailed(99); /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0GS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init user area*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0GM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0GM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0GW01.PC0GWPSW = "Y"; /* Set error switch*/
      PC0GW01.PC0GWMAP = 1; /* display list screen*/
      PC0GM001.XXXPRCNM = "PC0G420"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0GM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0GM002.XXXPRCNM = "PC0G420"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to nike special instruction list -- pc0gm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0GW01.PC0GWSWR = "Y"; /* request for data yes*/
    PC0GW01.PC0GWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0GM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0GS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0GW01.PC0GWMAP = 1; /* reset map*/
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G420"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0GM002.XXXPRCNM = "PC0G420"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.validationFailed(99); /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0G420

// Reset highlighted fields
Function PC0G430()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0GM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0GM002.YSICD initialAttributes; /* special instr. type*/
  set PC0GM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0GM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0GM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0GM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0GM002.XXXSTAT initialAttributes; /* status code*/

  PC0GW01.PC0GWSIX = 1; /* init spec text index*/
  while (PC0GW01.PC0GWSIX <= 13)
    set PC0GM002.PCBSITXT[PC0GWSIX] initialAttributes;
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
  end

  set PC0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0GM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0G430

// Verify the entered data
Function PC0G440()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0GW01.PC0GWDEF = "N"; /* initialize data entered flag*/

  if (PC0GM002.CAITEM > " ") /* Application data was entered*/
    set PC0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0GM002.XXXPRCNM = "PC0G440"; /* Process name*/

    exit stack;

  end

  if (converseVar.eventKey is enter) /* if enter was pressed*/
    PC0G441(); /* validate input data*/
  end

end // end PC0G440

// validate input data
Function PC0G441()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWSIX = 13;
  PC0GW01.PC0GWTEF = "N";
  while (PC0GW01.PC0GWSIX >= 1
   && PC0GW01.PC0GWTEF == "N")
    if (PC0GM002.PCBSITXT[PC0GWSIX] != " ")
      PC0GW01.PC0GWTEF = "Y";
    end

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1; /* incr. index*/

  end

  if (PC0GW01.PC0GWTEF == "N")
    converseLib.validationFailed(161); /* special instruction missing/invalid*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    PC0GW01.PC0GWSIX = 13;
    while (PC0GW01.PC0GWSIX >= 1)
      set PC0GM002.PCBSITXT[PC0GWSIX] cursor, modified, bold;

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* if instruction type 'gn', only allow 12 lines of text*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCBSITXT[13] > " " /* Text entered on line 13*/
   && PC0GM002.YSICD == "GN")     /* and type GN*/
    converseLib.validationFailed(466); /* special instruction missing/invalid*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    set PC0GM002.PCBSITXT[13] cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate nike special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCASIDSC == " ")
    converseLib.validationFailed(161); /* special instruction missing/invalid*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    set PC0GM002.PCASIDSC cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate status code*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.XXXSTAT != "A"
   && PC0GM002.XXXSTAT != "I")
    converseLib.validationFailed(37); /* missing/invalid status code*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    set PC0GM002.XXXSTAT cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* Validate offshore flag*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.FY1FRGN != "Y"
   && PC0GM002.FY1FRGN != "N")
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    set PC0GM002.FY1FRGN cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate standard print flag*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCASTDFL != "Y"
   && PC0GM002.PCASTDFL != "N")
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    set PC0GM002.PCASTDFL cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* sue change starts here*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Cross edit the special instruction type and po-type*/
   /* when it is salesman sample special instruction.*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.YSICD == "NL" /* SI tupe = NL/IN/OD*/
   || PC0GM002.YSICD == "IN" 
   || PC0GM002.YSICD == "OD")
    if (PC0GM002.PC4ORTYP == "SS" /* if not salesman sample*/
     || PC0GM002.PC4ORTYP == "SD") /* if not screener dummy*/
      /* next sentence*/
    else
      converseLib.validationFailed(492); /* invalid SI type for po*/
      PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
      set PC0GM002.YSICD cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* sue change end    here*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate special instruction type*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.YSICD != " ")
    if (PC0GM002.YSICD in YSITBL.YSICD
     && YSITBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active spec instr type*/
      PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(67); /* missing/invalid spec instr type*/
      PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
      PC0GM002.YSISDESC = " "; /* clear map spec instr desc*/
      set PC0GM002.YSICD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(67); /* missing/invalid spec instr type*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    PC0GM002.YSISDESC = " "; /* clear map spec instr desc*/
    set PC0GM002.YSICD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate po type code*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PC4ORTYP != " ")

    set PC4REC empty; /* clear pc4rec*/

    PC4REC.XGPCD = PC0GM002.XGPCD;
    PC4REC.PC4ORTYP = PC0GM002.PC4ORTYP;

    PC0GS10(); /* select p.o. type row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0GM002.PC4SDESC = PC4REC.PC4SDESC;
    else
      PC0GM002.PC4SDESC = " ";
      PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
      converseLib.validationFailed(124); /* invalid po type for this gpc*/
      set PC0GM002.PC4ORTYP cursor, modified, bold;
    end
  else
    PC0GM002.PC4SDESC = " ";
  end

   /* ------------------------------------------------------------*/
   /* Verify gpc code*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.XGPCD != " ")
    if (PC0GM002.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active gpc code*/
      PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      if (PC0GM002.XGPCD != "01"
       && PC0GM002.XGPCD != "02"
       && PC0GM002.XGPCD != "03"
       && PC0GM002.XGPCD != "07")
        converseLib.validationFailed(185); /* invalid gpc for po*/
        PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
        PC0GM002.XGPABRV = " "; /* clear map gpc desc*/
        set PC0GM002.XGPCD cursor, modified, bold;
      end
    else
      converseLib.validationFailed(28); /* missing/invalid gpc*/
      PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
      PC0GM002.XGPABRV = " "; /* clear map gpc desc*/
      set PC0GM002.XGPCD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(28); /* missing/invalid gpc*/
    PC0GM002.XXXPRCNM = "PC0G441"; /* load process name*/
    PC0GM002.XGPABRV = " "; /* clear map gpc desc*/
    set PC0GM002.XGPCD cursor, modified, bold;
  end

end // end PC0G441

// process valid input request
Function PC0G450()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWDEF == "N"           /* no data entered or*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0GW01.PC0GWBYF == "Y")          /* bypass processing*/
    return;
  end

  set PCAREC empty; /* init nike special instr rec*/
  set PCBREC empty; /* init special instr text rec*/

  XX0XS01(); /* obtain current date and time*/

  PCDREC.XGPCD = PC0GM002.XGPCD;

  PC0GS12(); /* select next spec instr number*/

   /* load nike special instruction header*/

  PCAREC.XGPCD = PC0GM002.XGPCD;
  PCAREC.PCASINBR = PCDREC.PCDSINBR;
  PCAREC.PC4ORTYP = PC0GM002.PC4ORTYP;
  PCAREC.YSICD = PC0GM002.YSICD;
  PCAREC.PCASIDSC = PC0GM002.PCASIDSC;
  PCAREC.PCASTDFL = PC0GM002.PCASTDFL;
  PCAREC.FY1FRGN = PC0GM002.FY1FRGN;
  PCAREC.XXXSTAT = PC0GM002.XXXSTAT;
  PCAREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PCAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0GS22(); /* add nike special instr header*/

   /* determine the number of special msg text lines to be added*/

  PC0GW01.PC0GWSIX = 13;
  while (PC0GM002.PCBSITXT[PC0GWSIX] == " ")
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1;
  end

   /* load special instruction text*/

  PCBREC.XGPCD = PC0GM002.XGPCD;
  PCBREC.PCASINBR = PCDREC.PCDSINBR;
  PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
  PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PC0GW01.PC0GWLIX = PC0GW01.PC0GWSIX;
  PC0GW01.PC0GWSIX = 1;
  while (PC0GW01.PC0GWSIX <= PC0GW01.PC0GWLIX)

    PCBREC.PCBSISEQ = PC0GW01.PC0GWSIX;
    PCBREC.PCBSITXT = PC0GM002.PCBSITXT[PC0GWSIX];

    PC0GS14(); /* add special instruction text*/

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  PC0GW01.PC0GWMFL = "Y"; /* set message flag*/
  PC0GM002.XXXPRCNM = "PC0G450";

end // end PC0G450

// nike special instr - chg
Function PC0G500()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0G510(); /* obtain data to display*/

  PC0G520(); /* Format and display the map*/

  PC0G530(); /* Check attention identifier*/

  PC0G540(); /* Reset fields to normal intensity*/

  PC0G550(); /* Verify the entered data*/

  PC0G560(); /* process valid input request*/

end // end PC0G500

// select spec instr text row(s)
Function PC0G510()

   /* ------------------------------------------------------------*/
   /* select special instruction text row(s) for display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors*/
   && PC0GW01.PC0GWBYF == "N")         
    set PC0GM002 initial; /* clear screen pc0gm002*/

    set PCBREC empty; /* init spec. text rec pcbrec*/
    move " " to PC0GWTXT[1] for all; /* clear w/s text table*/

    PCBREC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

    PC0GS07(); /* select set and open the cursor*/

    PC0GW01.PC0GWSIX = 1; /* init spec.instr. line index*/
    PC0GW01.PC0GWSTW = "N"; /* init spec. instr. text switch*/

    PC0GS08(); /* fetch pcbrec row*/

    while (PC0GW01.PC0GWSIX <= 13 /* CAN NOT EXCEED 13 ENTRIES*/
     && PC0GW01.PC0GWSTW == "N") /* until end of set*/

      PC0GM002.PCBSITXT[PC0GWSIX] = PCBREC.PCBSITXT;
      PC0GW01.PCBSITXT[PC0GWSIX] = PCBREC.PCBSITXT;

      PC0GS08(); /* fetch pcbrec row*/

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1; /* incr. index*/

    end

    PC0GS09(); /* close pcbrec row*/

  end

end // end PC0G510

// Format and display the map
Function PC0G520()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0GW01.PC0GWBYF == "N")         

     /* load nike special instruction from temp storage*/

    PC0GM002.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
    if (PC0GW02.XGPCD[PC0GWIXM] in XGPTBL.XGPCD)
      PC0GM002.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
    PC0GM002.YSICD = PC0GW02.YSICD[PC0GWIXM];
    if (PC0GW02.YSICD[PC0GWIXM] in YSITBL.YSICD)
      PC0GM002.YSISDESC = YSITBL.YSISDESC[sysVar.arrayIndex];
    end
    PC0GM002.PCASIDSC = PC0GW02.PCASIDSC[PC0GWIXM];
    PC0GM002.PC4ORTYP = PC0GW02.PC4ORTYP[PC0GWIXM];
    if (PC0GW02.PC4ORTYP[PC0GWIXM] > " ")
      PC4REC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
      PC4REC.PC4ORTYP = PC0GW02.PC4ORTYP[PC0GWIXM];

      PC0GS10(); /* select p.o. type*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0GM002.PC4SDESC = PC4REC.PC4SDESC;
      else
        PC0GM002.PC4SDESC = " ";
      end
    end

    PC0GM002.PCASTDFL = PC0GW02.PCASTDFL[PC0GWIXM];
    PC0GM002.FY1FRGN = PC0GW02.FY1FRGN[PC0GWIXM];
    PC0GM002.XXXSTAT = PC0GW02.XXXSTAT[PC0GWIXM];

    set PC0GM002.PCASIDSC cursor; /* Position cursor*/
    PC0GW01.PC0GWCIX = PC0GW01.PC0GWIXM; /* save to position cursor*/
    PC0GW02.PC0GMSEL[PC0GWIXM] = "V";

    PC0GS11(); /* update temp storage*/

  end

   /* protect key fields*/

  set PC0GM002.XGPCD protect; /* Gpc code*/
  set PC0GM002.YSICD protect; /* special instr. type code*/

  if (PC0GM002.XXXSTAT == "I")
    set PC0GM002.PCASIDSC protect;
    set PC0GM002.PC4ORTYP protect;
    set PC0GM002.PCASTDFL protect;
    set PC0GM002.FY1FRGN protect;
    set PC0GM002.XXXSTAT cursor;
    PC0GW01.PC0GWSIX = 1;
    while (PC0GW01.PC0GWSIX <= 13)
      set PC0GM002.PCBSITXT[PC0GWSIX] protect;
      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
    end
  end

  PC0GM002.PC0GMFNC = "CHANGE"; /* Move inquiry literal to map*/
  PC0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC0GW01.PC0GWMFL == "Y")
    converseLib.validationFailed(1); /* update message*/
    PC0GM002.XXXPRCNM = "PC0G520"; /* process name*/
    PC0GW01.PC0GWMFL = "N"; /* reset message flag*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PC0GM002 alarm; /* sound the alarm*/
  end

  converse PC0GM002 ;

  PC0GW01.PC0GWPSW = "N"; /* Initialize problem switch*/
  PC0GW01.PC0GWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0G520

// Check attention identifier
Function PC0G530()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0gm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0GS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0GM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0GM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0GW01.PC0GWPSW = "Y"; /* Set error switch*/
      PC0GW01.PC0GWMAP = 1; /* display list screen*/
      PC0GM001.XXXPRCNM = "PC0G530"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0GM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0GM002.XXXPRCNM = "PC0G530"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to nike special instruction list -- pc0gm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0GW01.PC0GWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0GM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0GS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0GW01.PC0GWMAP = 1; /* reset map*/
    PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
    PC0GM001.XXXPRCNM = "PC0G530"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0GM002.XXXPRCNM = "PC0G530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0GW01.PC0GWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0G530

// Reset highlighted fields
Function PC0G540()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0GM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0GM002.YSICD initialAttributes; /* special instr. type*/
  set PC0GM002.PCASIDSC initialAttributes; /* instruction description*/
  set PC0GM002.PC4ORTYP initialAttributes; /* p.o. order type code*/
  set PC0GM002.PCASTDFL initialAttributes; /* standard print flag*/
  set PC0GM002.FY1FRGN initialAttributes; /* offshore flag*/
  set PC0GM002.XXXSTAT initialAttributes; /* status code*/

  PC0GW01.PC0GWSIX = 1; /* init spec text index*/
  while (PC0GW01.PC0GWSIX <= 13)
    set PC0GM002.PCBSITXT[PC0GWSIX] initialAttributes;
    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
  end

  set PC0GM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0GM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0G540

// Verify the entered data
Function PC0G550()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  PC0GW01.PC0GWDEF = "N"; /* initialize data entered flag*/

  if (PC0GM002.CAITEM > " ") /* Application data was entered*/
    set PC0GM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0GM002.XXXPRCNM = "PC0G550"; /* Process name*/

    exit stack;

  end

   /* if no changes have been applied bypass edits*/

  if (PC0GM002.PC4ORTYP == PC0GW02.PC4ORTYP[PC0GWIXM]
   && PC0GM002.PCASTDFL == PC0GW02.PCASTDFL[PC0GWIXM]
   && PC0GM002.PCASIDSC == PC0GW02.PCASIDSC[PC0GWIXM]
   && PC0GM002.PCASTDFL == PC0GW02.PCASTDFL[PC0GWIXM]
   && PC0GM002.FY1FRGN == PC0GW02.FY1FRGN[PC0GWIXM]
   && PC0GM002.XXXSTAT == PC0GW02.XXXSTAT[PC0GWIXM])
    PC0GW01.PC0GWSIX = 1;
    PC0GW01.PC0GWTEF = "N";
    while (PC0GW01.PC0GWSIX <= 13)
      if (PC0GW01.PCBSITXT[PC0GWSIX] != PC0GM002.PCBSITXT[PC0GWSIX])
        PC0GW01.PC0GWTEF = "Y"; /* text entered flag*/
      end
      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
    end

    if (PC0GW01.PC0GWTEF == "N")
      return;
    end
  end

  PC0G551(); /* validate input data*/

end // end PC0G550

// validate input data
Function PC0G551()

   /* ------------------------------------------------------------*/
     /* validate any input data.*/
     /* if errors were found, exit to redisplay the map*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWDEF = "Y"; /* data has been entered*/

   /* ------------------------------------------------------------*/
   /* Verify special instruction text has been entered*/
   /* ------------------------------------------------------------*/

  PC0GW01.PC0GWSIX = 13;
  PC0GW01.PC0GWTEF = "N";
  while (PC0GW01.PC0GWSIX >= 1
   && PC0GW01.PC0GWTEF == "N")
    if (PC0GM002.PCBSITXT[PC0GWSIX] != " ")
      PC0GW01.PC0GWTEF = "Y";
    end

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1; /* incr. index*/

  end

  if (PC0GW01.PC0GWTEF == "N")
    converseLib.validationFailed(161); /* special instruction missing/invalid*/
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    PC0GW01.PC0GWSIX = 13;
    while (PC0GW01.PC0GWSIX >= 1)
      set PC0GM002.PCBSITXT[PC0GWSIX] cursor, modified, bold;

      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1; /* incr. index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* if special instruction type 'gn', only allow 12 lines text*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCBSITXT[13] > " "
   && PC0GM002.YSICD == "GN") /* Type code gn*/
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    converseLib.validationFailed(466); /* special instruction missing/invalid*/
    set PC0GM002.PCBSITXT[13] cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate nike special instruction short description*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCASIDSC == " ")
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    converseLib.validationFailed(161); /* special instruction missing/invalid*/
    set PC0GM002.PCASIDSC cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate status code*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.XXXSTAT != "A"
   && PC0GM002.XXXSTAT != "I")
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    converseLib.validationFailed(37); /* missing/invalid status code*/
    set PC0GM002.XXXSTAT cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* Validate offshore flag*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.FY1FRGN != "Y"
   && PC0GM002.FY1FRGN != "N")
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    set PC0GM002.FY1FRGN cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* Validate standard print flag*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PCASTDFL != "Y"
   && PC0GM002.PCASTDFL != "N")
    PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
    converseLib.validationFailed(42); /* invalid entry must be y/n*/
    set PC0GM002.PCASTDFL cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* sue change starts here*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Cross edit the special instruction type and po-type*/
   /* when it is salesman sample special instruction.*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.YSICD == "NL" /* SI tupe = NL/IN/OD*/
   || PC0GM002.YSICD == "IN" 
   || PC0GM002.YSICD == "OD")
    if (PC0GM002.PC4ORTYP == "SS" /* if not salesman sample*/
     || PC0GM002.PC4ORTYP == "SD") /* if not screener dummy*/
      /* next sentence*/
    else
      converseLib.validationFailed(492); /* invalid SI type for po*/
      PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
      set PC0GM002.PC4ORTYP cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* sue change end    here*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate po type code*/
   /* ------------------------------------------------------------*/

  if (PC0GM002.PC4ORTYP != " ")

    set PC4REC empty; /* clear pc4rec*/

    PC4REC.XGPCD = PC0GM002.XGPCD;
    PC4REC.PC4ORTYP = PC0GM002.PC4ORTYP;

    PC0GS10(); /* select p.o. type row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0GM002.PC4SDESC = PC4REC.PC4SDESC;
    else
      PC0GM002.PC4SDESC = " ";
      converseLib.validationFailed(124); /* missing/invalid po type code*/
      PC0GM002.XXXPRCNM = "PC0G551"; /* load process name*/
      set PC0GM002.PC4ORTYP cursor, modified, bold;
    end
  else
    PC0GM002.PC4SDESC = " ";
  end


end // end PC0G551

// process valid input request
Function PC0G560()

   /* ------------------------------------------------------------*/
   /* process valid input request*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWDEF == "N"           /* data has not changed*/
   || converseVar.validationMsgNum != 0 /* errors*/
   || PC0GW01.PC0GWBYF == "Y")          /* bypass processing*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* init nike special instruction hdr and detial records*/
   /* ------------------------------------------------------------*/

  set PCAREC empty; /* init nike special instr rec*/
  set PCBREC empty; /* init special instr text rec*/

   /* ------------------------------------------------------------*/
   /* obtain current date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* obtain current date and time*/

   /* ------------------------------------------------------------*/
   /* udpate nike special instruction header information*/
   /* ------------------------------------------------------------*/

  PCAREC.XGPCD = PC0GM002.XGPCD;
  PCAREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

  PC0GS23(); /* select nike special instr hdr*/

  if (SQLCA.VAGen_SQLCODE == 100) /* nike spec instr hdr has been deleted*/
    PC0GM001.XXXPRCNM = "PC0G560";
    PC0GW01.PC0GWMAP = 1; /* reset map*/
    PC0GW01.XGPCD = " "; /* force validation routine*/
    converseLib.validationFailed(26); /* data deleted by another application*/
    exit stack;
  else
    PCAREC.YSICD = PC0GM002.YSICD;
    PCAREC.PC4ORTYP = PC0GM002.PC4ORTYP;
    PCAREC.PCASIDSC = PC0GM002.PCASIDSC;
    PCAREC.PCASTDFL = PC0GM002.PCASTDFL;
    PCAREC.FY1FRGN = PC0GM002.FY1FRGN;
    PCAREC.XXXSTAT = PC0GM002.XXXSTAT;
    PCAREC.ZZZCHGCT = PC0GW02.ZZZCHGCT[PC0GWIXM];
    PCAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PCAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0GS24(); /* upd nike special instr header*/

    if (SQLCA.VAGen_SQLCODE == 100)

      PC0G561(); /* upd temp storage/screen w/upd data*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If nike special instruction text information changed*/
   /* update table row*/
   /* ------------------------------------------------------------*/

  if (PC0GW01.PC0GWPSW == "N")
    PC0GW01.PC0GWSIX = 1;
    PC0GW01.PC0GWTEF = "N";
    while (PC0GW01.PC0GWSIX <= 13)
      if (PC0GW01.PCBSITXT[PC0GWSIX] != PC0GM002.PCBSITXT[PC0GWSIX])
        PC0GW01.PC0GWTEF = "Y";
      end
      PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;
    end

    if (PC0GW01.PC0GWTEF == "Y") /* special message text changed*/

      PCBREC.XGPCD = PC0GM002.XGPCD;
      PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

      PC0GS25(); /* delete pcbrec set*/

       /* Determine how many message text lines to add*/
       /* (bypass blank lines)*/

      PC0GW01.PC0GWSIX = 13;
      while (PC0GM002.PCBSITXT[PC0GWSIX] == " ") /* determine load index*/
        PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX - 1;
      end

       /* Load special message text data*/

      PC0GW01.PC0GWLIX = PC0GW01.PC0GWSIX; /* max entries*/
      PC0GW01.PC0GWSIX = 1;
      PCBREC.XGPCD = PC0GM002.XGPCD;
      PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];
      PCBREC.ZZZSDT = XX0XW01.XX0XWDAT;
      PCBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PCBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      while (PC0GW01.PC0GWSIX <= PC0GW01.PC0GWLIX)
        PCBREC.PCBSISEQ = PC0GW01.PC0GWSIX;
        PCBREC.PCBSITXT = PC0GM002.PCBSITXT[PC0GWSIX];

        PC0GS14(); /* add special instruction text*/

        PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1;

      end
    end
  end

  if (PC0GW01.PC0GWPSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll out all database changes*/
    PC0GW01.PC0GWMFL = "N"; /* reset update flag*/
  else

     /* update temp storage (nike special instruction info)*/

    PC0GW02.YSICD[PC0GWIXM] = PCAREC.YSICD;
    PC0GW02.PC4ORTYP[PC0GWIXM] = PCAREC.PC4ORTYP;
    PC0GW02.PCASIDSC[PC0GWIXM] = PCAREC.PCASIDSC;
    PC0GW02.PCASTDFL[PC0GWIXM] = PCAREC.PCASTDFL;
    PC0GW02.FY1FRGN[PC0GWIXM] = PCAREC.FY1FRGN;
    PC0GW02.XXXSTAT[PC0GWIXM] = PCAREC.XXXSTAT;
    PC0GW02.ZZZCHGCT[PC0GWIXM] = PCAREC.ZZZCHGCT;

    PC0GS11(); /* update temp storage*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* changes completed*/
    PC0GW01.PC0GWMFL = "Y"; /* data update flag*/
  end

  PC0GM002.XXXPRCNM = "PC0G560"; /* process name*/

end // end PC0G560

// upd temp storage/map
Function PC0G561()

   /* ------------------------------------------------------------*/
   /* if nike special instruction data changed obtain both*/
   /* the nike special instruction hdr and text to update*/
   /* temporary storage and map fields.*/
   /* ------------------------------------------------------------*/

  PCAREC.XGPCD = PC0GM002.XGPCD;
  PCAREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

  PC0GS23(); /* select nike special instr.*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PC0GM001.XXXPRCNM = "PC0G561"; /* load process name*/
    PC0GW01.PC0GWMAP = 1; /* display list screen*/
    PC0GW01.XGPCD = " "; /* force validation*/
    converseLib.validationFailed(26); /* data deleted by another appl.*/
    exit stack; /* exit*/
  end

  PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
  converseLib.validationFailed(12); /* data updated by another appl.*/

   /* update temp storage*/

  PC0GW02.PC4ORTYP[PC0GWIXM] = PCAREC.PC4ORTYP;
  PC0GW02.PCASIDSC[PC0GWIXM] = PCAREC.PCASIDSC;
  PC0GW02.PCASTDFL[PC0GWIXM] = PCAREC.PCASTDFL;
  PC0GW02.FY1FRGN[PC0GWIXM] = PCAREC.FY1FRGN;
  PC0GW02.XXXSTAT[PC0GWIXM] = PCAREC.XXXSTAT;
  PC0GW02.ZZZCHGCT[PC0GWIXM] = PCAREC.ZZZCHGCT;

  PC0GS11(); /* update temp storage*/

   /* update pc0gm002 map*/

  PC0GM002.PC4ORTYP = PCAREC.PC4ORTYP;
  PC0GM002.PCASIDSC = PCAREC.PCASIDSC;
  PC0GM002.PCASTDFL = PCAREC.PCASTDFL;
  PC0GM002.FY1FRGN = PCAREC.FY1FRGN;
  PC0GM002.XXXSTAT = PCAREC.XXXSTAT;

   /* reload message text for display*/

  set PCBREC empty; /* init spec. text rec pcbrec*/
  move " " to PC0GWTXT[1] for all; /* clear w/s text table*/

  PCBREC.XGPCD = PC0GW02.XGPCD[PC0GWIXM];
  PCBREC.PCASINBR = PC0GW02.PCASINBR[PC0GWIXM];

  PC0GS07(); /* select set and open the cursor*/

  PC0GW01.PC0GWSIX = 1; /* init spec.instr. line index*/
  PC0GW01.PC0GWSTW = "N"; /* init spec. instr. text switch*/

  PC0GS08(); /* fetch pcbrec row*/

  while (PC0GW01.PC0GWSIX <= 13) /* CAN NOT EXCEED 13 ENTRIES*/

     /* load special instruction text for display and compare use*/

    if (PC0GW01.PC0GWSTW == "N")
      PC0GM002.PCBSITXT[PC0GWSIX] = PCBREC.PCBSITXT;
      PC0GW01.PCBSITXT[PC0GWSIX] = PCBREC.PCBSITXT;
    else
      PC0GM002.PCBSITXT[PC0GWSIX] = " ";
    end

    PC0GS08(); /* fetch pcbrec row*/

    PC0GW01.PC0GWSIX = PC0GW01.PC0GWSIX + 1; /* incr. index*/

  end

  PC0GS09(); /* close pcbrec table*/

end // end PC0G561

// Purge temp storage
Function PC0GS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PC0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0GS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PC0GW01.PC0GWTSP = 0; /* Reset current page number*/
  PC0GW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PC0GS01

// Select Set pcarec (S1)
Function PC0GS02()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("S1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.XGPCD = " "; /* force key validation*/
  PC0GM001.XXXPRCNM = "PC0GS02"; /* Process name*/

  exit stack;

end // end PC0GS02

// Fetch pcarec row (n1)
Function PC0GS03()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("N1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0GW01.PC0GWNSW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS03"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.XGPCD = " "; /* force key validation*/
  PC0GM001.XXXPRCNM = "PC0GS03"; /* Process name*/

  exit stack;

end // end PC0GS03

// Add page to temp storage
Function PC0GS04()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0GW02.PC0GWLEN = 598; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PC0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* everything is a-ok*/
    PC0GW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PC0GW01.PC0GWIXM = 1; /* Reset display line number*/
    set PC0GW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS04"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* SUBROUTINE PARAMETERS*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GM001.XXXPRCNM = "PC0GS04"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GW01.PC0GWSWR = "Y"; /* request data*/

  end

end // end PC0GS04

// Close selected pcarec set (c1)
Function PC0GS05()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("C1", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS05"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GM001.XXXPRCNM = "PC0GS05"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GW01.XGPCD = " "; /* force validation*/

    exit stack;

  end

end // end PC0GS05

// Obtain page from temp storage
Function PC0GS06()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0GW02.PC0GWLEN = 598; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0G"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0GW01.PC0GWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PC0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS06"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0GM001"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GW01.XGPCD = " "; /* force validation*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GM001.XXXPRCNM = "PC0GS06"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0GS06

// Select Set pcbrec (S1)
Function PC0GS07()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS07"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.PC0GWMAP = "1"; /* display list map*/
  PC0GM001.XXXPRCNM = "PC0GS07"; /* Process name*/

  exit stack;

end // end PC0GS07

// Fetch pcbrec row
Function PC0GS08()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0GW01.PC0GWSTW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS08"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM001.XXXPRCNM = "PC0GS08"; /* Process name*/

  exit stack;

end // end PC0GS08

// Close selected pcbrec set
Function PC0GS09()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS09"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GM001.XXXPRCNM = "PC0GS09"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GW01.XGPCD = " "; /* force validation*/

    exit stack;

  end

end // end PC0GS09

// Select p.o. type row
Function PC0GS10()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. TYPE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PC0GW01.PC0GWMAP == 1)
    PC0GW01.XGPCD = " "; /* force key validation*/
    PC0GM001.XXXPRCNM = "PC0GS10"; /* Process name*/
  else
    if (PC0GW01.PC0GWMAP == 2)
      PC0GM002.XXXPRCNM = "PC0GS10"; /* Process name*/
    end
  end

  exit stack;

end // end PC0GS10

// update temporary storage
Function PC0GS11()

   /* ------------------------------------------------------------*/
   /* Update the temp storage page.*/
   /* ------------------------------------------------------------*/

  PC0GW02.PC0GWLEN = 598; /* Temporary storage length*/
  TA5REC.TA5APPID = "PC0G"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0GW01.PC0GWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PC0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS11"; /* Process name*/
    TA1REC.TA1LOC = "UPD PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0GM002"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GW01.PC0GWSWR = "Y"; /* request data*/
    PC0GW01.PC0GWMAP = 1; /* redisplay list screen*/
    PC0GM001.XXXPRCNM = "PC0GS11"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0GS11

// Select next spec inst nbr
Function PC0GS12()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback all updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT INSTR. NBR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.PCDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.PC0GWPSW = "Y"; /* set problem switch*/
  PC0GM002.XXXPRCNM = "PC0GS12"; /* Process name*/

  exit stack;

end // end PC0GS12

// Add p.o. item spec instr row
Function PC0GS13()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("A ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS13"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS13"; /* Process name*/

  exit stack;

end // end PC0GS13

// Add spec instr text row
Function PC0GS14()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS14"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0CS14"; /* Process name*/

  exit stack;

end // end PC0GS14

// Select Set pc6rec (S7)
Function PC0GS15()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S7*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS15"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS15"; /* Process name*/

  exit stack;

end // end PC0GS15

// Fetch pc6rec row
Function PC0GS16()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "N7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0GW01.PC0GWPOI = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS16"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS16"; /* Process name*/

  exit stack;

end // end PC0GS16

// upd po item row
Function PC0GS17()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "UA";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS17"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0CS17"; /* Process name*/

  exit stack;

end // end PC0GS17

// Close selected pc6rec set
Function PC0GS18()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "C7";
  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Close table set C7*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS18"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GM002.XXXPRCNM = "PC0GS18"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    exit stack;

  end

end // end PC0GS18

// Add p.o. header special instr
Function PC0GS19()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3280" ("A ", SQLCA, PCEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback all updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS19"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS19"; /* Process name*/

  exit stack;

end // end PC0GS19

// Select p.o. hdr row
Function PC0GS20()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS20"; /* Process name*/
  TA1REC.TA1LOC = "SELECT P.O. HDR  ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS20"; /* Process name*/

  exit stack;

end // end PC0GS20

// upd po hdr row
Function PC0GS21()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "U ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS21"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0CS21"; /* Process name*/

  exit stack;

end // end PC0GS21

// Add nike spec instr row
Function PC0GS22()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("A ", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS22"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNIKSI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS22"; /* Process name*/

  exit stack;

end // end PC0GS22

// Select nike instr row
Function PC0GS23()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("S ", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS23"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NIKE SPEC INSTR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNIKSI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS23"; /* Process name*/

  exit stack;

end // end PC0GS23

// upd nike special instr row
Function PC0GS24()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("U ", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* upd table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS24"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS24"; /* Process name*/

  exit stack;

end // end PC0GS24

// del spec instr text rows
Function PC0GS25()

   /* ------------------------------------------------------------*/
   /* This module deletes table rows*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("D ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* del table rows*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS25"; /* Process name*/
  TA1REC.TA1LOC = "DEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0CS25"; /* Process name*/

  exit stack;

end // end PC0GS25

// Get PO header  DPRODC.VPOHDR01
Function PC0GS26()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/


      return;

    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    PC0GM002.XXXPRCNM = "PC0GS26";
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GM002.XXXPRCNM = "PC0GS26";
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS26"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM002.XXXPRCNM = "PC0GS26";
  exit stack;

end // end PC0GS26

// Insert header audit - VPOAHD01
Function PC0GS27()
   /* ------------------------------------------------------------*/
   /* Move values to header audit record.*/
   /* ------------------------------------------------------------*/
  set VPOAHD02 empty; /* Init header audit rec*/
  VPOAHD02.XGPCD = VPOHDR02.XGPCD; /* GPC code*/
  VPOAHD02.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  VPOAHD02.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  VPOAHD02.PC3POIDT = VPOHDR02.PC3POIDT; /* PO ID*/
  VPOAHD02.PCFSECD = VPOHDR02.PCFSECD; /* Season*/
  VPOAHD02.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory*/
  VPOAHD02.PC3BUYMO = VPOHDR02.PC3BUYMO; /* Buy month*/
  if (VPOHDR02.XGPCD == "02")
    VPOAHD02.YOACD = "31"; /* Audit code*/
  else
    VPOAHD02.YOACD = "77"; /* Audit code*/
  end
  VPOAHD02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAHD02.YACCD = " "; /* Audit comment*/
  VPOAHD02.PC4ORTYP = VPOHDR02.PC4ORTYP; /* PO type*/
  VPOAHD02.PCIBFRA = "SPECIAL INSTR"; /* Before value*/
  VPOAHD02.PCIAFTA = " "; /* After value*/
      /* save si sequence nbr in the after number value*/
  VPOAHD02.PCIAFTN = PCEREC.PCASINBR;

  PC0GSA9(); /* set c/m and o/a prt flags*/

  XX0XS01(); /* Get date and time*/
  PC0GW01.PC0G-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0GW01.PC0G-ZZHHMMSS)
    XX0XS01(); /* Get date and time*/
  end

  VPOAHD02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAHD02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* SET UP TIME*/
  VPOAHD02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAHD02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAHD02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAHD02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAHD02" ("A ", SQLCA, VPOAHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS27"; /* Process name*/
  TA1REC.TA1LOC = "ADD HEADER AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAHD02.VPOAHD02-KEY; /* Error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM001.XXXPRCNM = "PC0GS27"; /* Module identification*/
  exit stack;

end // end PC0GS27

// Insert item audit row VPOAIT01
Function PC0GS28()

   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* Init audit record*/
  VPOAIT02.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM03.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM03.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM03.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM03.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM03.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM03.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM03.XPGCD; /* Package*/
  VPOAIT02.XPRCD = VPOITM03.XPRCD; /* product type*/
  VPOAIT02.XUMCD = VPOITM03.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM03.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM03.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM03.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM03.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM03.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM03.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM03.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = VPOITM03.PC6XCTCD; /* dest country*/
  VPOAIT02.OP1PARTN = VPOITM03.OP1PARTN; /* op part char*/
  VPOAIT02.OP1CUOID = VPOITM03.OP1CUOID; /* op cust ord id*/
  VPOAIT02.OP1NORID = VPOITM03.OP1NORID; /* op nike ord id*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM03.PC4ORTYP; /* PO type*/
  VPOAIT02.PA1OANBR = 0; /* PA_ORD_ADJ_NBR*/
  VPOAIT02.YACCD = " "; /* Audit comment code*/
  VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  VPOAIT02.PCIBFRA = "SPECIAL INSTR"; /* Before image*/
  VPOAIT02.PCIAFTA = " "; /* After image*/

   /* SAVE SEQUENCE NUMBER IN AFTER NUMBER*/

  VPOAIT02.PCIAFTN = PCGREC.PCASINBR; /* after number*/

  if (VPOITM03.XGPCD == "02")
    VPOAIT02.YOACD = "32"; /* Audit code*/
  else
    VPOAIT02.YOACD = "78"; /* Audit code*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header*/
   /* ------------------------------------------------------------*/
  VPOHDR02.XGPCD = VPOITM03.XGPCD;
  VPOHDR02.PC3PONBR = VPOITM03.PC3PONBR;
  PC0GS26(); /* Obtain P.O. header*/
  if (VPOHDR02.PC3NISFL == "Y"
   || VPOHDR02.PC3NISFL == "N")
    VPOAIT02.PCJAMEND = "5";
  else
    VPOAIT02.PCJAMEND = "3";
  end

  PC0GSA8(); /* get and load change memo and order*/
                                   /* adj memo flags*/

  VPOAIT02.XDSCD = VPOITM03.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM03.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM03.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM03.PG1SC4CD; /* Scheduler code*/

  XX0XS01(); /* Get date and time*/

  PC0GW01.PC0G-ZZHHMMSS = XX0XW01.XX0XWHMS;
  while (XX0XW01.XX0XWHMS == PC0GW01.PC0G-ZZHHMMSS)
    XX0XS01();
  end

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS28"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GM001.XXXPRCNM = "PC0GS28"; /* Module identification*/
  exit stack;

end // end PC0GS28

// Select Set pcarec (S2)
Function PC0GS29()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows.(gpc + ysi + potype)*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("S2", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end
                                    /* Select table set S2*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS29"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF VNKESI01 TABLE";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.XGPCD = " "; /* force key validation*/
  PC0GM001.XXXPRCNM = "PC0GS29"; /* Process name*/

  exit stack;

end // end PC0GS29

// Fetch pcarec row  (n2)
Function PC0GS30()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("N2", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n2*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0GW01.PC0GWNSW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0GW01.PC0GWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0GS30"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCAREC.PCAGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0GW01.XGPCD = " "; /* force key validation*/
  PC0GM001.XXXPRCNM = "PC0GS30"; /* Process name*/

  exit stack;

end // end PC0GS30

// Close selected pcarec set(c2)
Function PC0GS31()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3240" ("C2", SQLCA, PCAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C2*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0GS31"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VNKESI01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0GM001.XXXPRCNM = "PC0GS31"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0GW01.XGPCD = " "; /* force validation*/

    exit stack;

  end

end // end PC0GS31

// load chg memo and oa memo flag
Function PC0GSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0GM001.XXXPRCNM = "PC0GSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0gSA8 ***********************/
end // end PC0GSA8

// load chg memo and oa memo flag
Function PC0GSA9()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAHD02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAHD02.PCJMEMO = " ";
      else
        VPOAHD02.PCJMEMO = "N";
      end /* =====>*/
      /* this field not on table yet*/
      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAHD02.PCJOAPRT = " ";
      else
        VPOAHD02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0GM001.XXXPRCNM = "PC0GSA9"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAHD02.PCJMEMO = "N";
    VPOAHD02.PCJOAPRT = "N";
  end


   /* **                                                        ***/
   /* ********************** End of PC0gSA9 ***********************/
end // end PC0GSA9

//*** RECORD=PC0GW01 ****
// Working storage for pc0g - nike special instruction
// ***********************
Record PC0GW01 type basicRecord
  5 PC0GW1GP PC0GW1GP ; 
    10 PC0GWIXM PC0GWIXM ; 
    10 PC0GWLIX PC0GWLIX ; 
    10 PC0GWCIX PC0GWCIX ; 
    10 PC0GWIDX PC0GWIDX ; 
    10 PC0GWSGP PC0GWSGP ; 
    10 PC0GWSIX PC0GWSIX ; 
    10 PC0GWSTW PC0GWSTW ; 
    10 PC0GWCSW PC0GWCSW ; 
    10 PC0GWIOT PC0GWIOT ; 
    10 PC0GWSFL PC0GWSFL ; 
    10 PC0GWTEF PC0GWTEF ; 
    10 PC0GWPSW PC0GWPSW ; 
    10 PC0GWFSW PC0GWFSW ; 
    10 PC0GWCPY PC0GWCPY ; 
    10 PC0GWSWR PC0GWSWR ; 
    10 PC0GWTSP PC0GWTSP ; 
    10 PC0GWMAP PC0GWMAP ; 
    10 PC0GWTXT PC0GWTXT [13] ; 
      15 PCBSITXT PCBSITXT ; 
    10 XGPCD XGPCD ; 
    10 XGPABRV XGPABRV ; 
    10 YSICD YSICD ; 
    10 YSIDESC YSIDESC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC4SDESC PC4SDESC ; 
    10 PC0G-ZZHHMMSS PC0G-ZZHHMMSS ; 
    10 PC0GWNSW PC0GWNSW ; 
    10 PC0GWPOI PC0GWPOI ; 
    10 PC0GWPOH PC0GWPOH ; 
    10 PC0GWMFL PC0GWMFL ; 
    10 PC0GWDEF PC0GWDEF ; 
    10 PC0GWUPD PC0GWUPD ; 
    10 PC0GWINQ PC0GWINQ ; 
    10 PC0GWBYF PC0GWBYF ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end PC0GW01

//*** RECORD=PC0GW02 ****
// Temp. storage record for pc0f - p.o. customer spec inst list
// ***********************
Record PC0GW02 type basicRecord
  10 PC0GWLEN PC0GWLEN ; 
  10 PC0GWLIN PC0GWLIN [13] ; 
    15 PC0GMSEL PC0GMSEL ; 
    15 XGPCD XGPCD ; 
    15 PCASINBR PCASINBR ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 YSICD YSICD ; 
    15 PCASIDSC PCASIDSC ; 
    15 PCASTDFL PCASTDFL ; 
    15 FY1FRGN FY1FRGN ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PC0GW02

//*** RECORD=PC0GW03 ****
// Temp. storage record for pc0f - p.o. customer spec inst list
// ***********************
Record PC0GW03 type basicRecord
  10 PCBSITXT PCBSITXT ; 
    15 * char(1) ; 
    15 PC0GWMIN PC0GWMIN ; 
    15 * char(1) ; 
    15 PC0GWCTY PC0GWCTY ; 
    15 * char(30) ; 
end // end PC0GW03

// PC_PO_OT_SDESC
DataItem PC0G-ZZHHMMSS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YSI_TYP_CD
DataItem PC0GMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc0gw01 group level
DataItem PC0GW1GP char(882)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bypass processing
DataItem PC0GWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor index
DataItem PC0GWCIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// copy function requested
DataItem PC0GWCPY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor end of file switch
DataItem PC0GWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin country
DataItem PC0GWCTY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data entered flag
DataItem PC0GWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add/del function switch
DataItem PC0GWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for working storage
DataItem PC0GWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry allowed
DataItem PC0GWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i-o task indicator
DataItem PC0GWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem PC0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tempory storage length
DataItem PC0GWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0GWLIN char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load special msg text index
DataItem PC0GWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// map to be displayed
DataItem PC0GWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message flag
DataItem PC0GWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'made in' literal
DataItem PC0GWMIN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike special eof flag
DataItem PC0GWNSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po header eof switch
DataItem PC0GWPOH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po item eof switch
DataItem PC0GWPOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem PC0GWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem PC0GWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save gpc code
DataItem PC0GWSGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr text index
DataItem PC0GWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of special instr text
DataItem PC0GWSTW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem PC0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special text data entered
DataItem PC0GWTEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage page
DataItem PC0GWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// verify chg in spec text
DataItem PC0GWTXT char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// updates allowed
DataItem PC0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

