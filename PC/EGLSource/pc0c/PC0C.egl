package pc0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0C ****
// This program will allow the user to inquire/maintain
// customer cross reference information.  The database
// will return 0 to n rows based upon the selection criteria.
// This program will format the screen with the data returned
// from the database.
// 
// This program enables the user to inquiry, add, or change
// customer cross reference rows:
// 
//   A user can select customer xref. rows for inquiry by
// general product class.  The customer xref code is used
// as a starting point for displaying customer xref. data.
// By pressing ENTER the data will be displayed for viewing.
// 
//   A user may add new rows by pressing PF13 from the list
// screen (blank or filled with rows).  This will position
// them in an ADD screen.  A row can then be added ( if
// entries pass edit criteria) by pressing ENTER.  The user
// may continue adding or exit to the list screen.
// 
//   A user may select one or more rows for change and press
// PF14.  The user will then be positioned in an CHANGE
// screen where they can apply their changes(non-key data only)
// and hit ENTER to cycle to the next row selected, or, PF3
// to return to the list screen.
// 
// -------   --------   --------     --------------------------
// control     date      userid      description
// -------   --------   --------     --------------------------
//           06/26/89    rgilli      created
//           09/27/90    lsutto      allow gpc 07 access
//           02/11/91    PPETER      DB2 table changes
//           04/23/92    KSANFO      fixed paging to read all
//                                   data into temp. storage
// PCA248/   10/20/93    GAMEN       Do not load map on entry.
// PCA252                            Add cust # to selection
//                                   criteria on map 1.
//           11/08/93    dhales      db2 changes
// PC0010    11/16/93    GAMEN       Add maint/inq for apao fl.
// efics     02/22/95    SFORD       Add maint/inq for apao fl
//                                   to access deuro tables
// efics     03/13/95    GAMEN       Add hot key to submit
//                                   jcl and send data to EAW.
// PC0010    01/23/96    GAMEN       ADD PROCESSING FOR APAO FL
//                                   TO EQUAL 'W'.
// PC0010    08/13/96    GAMEN       WHEN CUSTOMER NUMBER ON
//                                   MAP 1 AND NOT FOUND IN
//                                   DCUST TABLE, CHECK DEURO
//                                   TABLE.
// fb-91     11/08/96    RMCAFE      Add xct_rta_dy field to
//                                   add and change map.
// PCF146    12/17/97    DRAMSE      Changed to use VPRDCU03
//                                   instead of VPRDCU02.
//                                   Added PADD field
// PCF146    12/30/97    DRAMSE      Removed sign clause from
//                                   the map PC0CM002 for
//                                   PO-DIR-SHP-ADJ-DY
// PCF146    01/27/98    DRAMSE      Changed PADD in map2 as
//                                   DIR SHP ADJ DAYS.
// PCF999    05/28/98    DRAMSE      fix bug in PC2NAME in
//                                   PC0C111
// PCF999    11/19/01    RSELVA      Dept should be 0 for USA/
//                                   CANA Destination. GPC/CO/
//                                   STOR are keys for update.
//                                   Modified: PC0C241, PC0C441
//                                   Added   : PC0CS-241.
// 
// *********************
Program PC0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  PC0CW01 PC0CW01; // record
  PC0CW02 PC0CW02; // record
  PC0CW03 PC0CW03; // record
  PCWREC PCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TSCREC TSCREC; // record
  VPRDCU03 VPRDCU03; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YPCTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PC0CTBL {deleteAfterUse = yes}; // table
  use PC0CT01 {deleteAfterUse = yes}; // table
  use PC0CT11 {deleteAfterUse = yes}; // table
  use PC0CM.PC0CM001,  // forms
      PC0CM.PC0CM002, 
      PC0CM.TA0PM001, 
      PC0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();

     /* ------------------------------------------------------------*/
     /* flow to first time processing*/
     /* ------------------------------------------------------------*/

    goto PC0C001;

    PC0C001: PC0C001();

     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display map(s)*/
     /* ------------------------------------------------------------*/

    goto PC0C002;

    PC0C002: PC0C002();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto PC0C002;

  end // end main
end // end PC0C

// first time processing
Function PC0C001()
   /* ------------------------------------------------------------*/
   /* check commarea security fields*/
   /* ------------------------------------------------------------*/

   /* IF COMMAREA.XGPCD NE '01';*/
    /* AND COMMAREA.XGPCD NE '02';*/
    /* AND COMMAREA.XGPCD NE '03';*/
    /* AND COMMAREA.XGPCD NE '07';*/
    /* MOVE 138 TO PCWREC.XXXMSGNO   ; security violation*/
    /* MOVE PCWREC.CAUSERA TO COMMAREA.CAUSERA;*/
    /* MOVE ' ' TO COMMAREA.CAITEM;*/
    /* MOVE 'PC0A' TO COMMAREA.CATOAP;*/
    /* XSEXIT;*/
   /* END ;*/

   /* ------------------------------------------------------------*/
   /* first time processing*/
   /* ------------------------------------------------------------*/

  set PC0CM001 initial;
  set PC0CW01 empty;
  set PC0CW03 empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TSCREC empty;
  set KUNREC empty;
  set KUMREC empty;
  set FY1REC empty;

  PC0CW01.PC0CWSWR = "N"; /* init request for data switch*/
  PC0CW01.PC0CWBYF = "Y"; /* init bypass processing flag*/
  PC0CW01.PC0CWMAP = "1"; /* init to map 1*/
  PC0CW01.PC0CWLIX = 1; /* init line index*/
  PC0CM001.XGPCD = COMMAREA.XGPCD; /* Init map 1 gpc code*/
  PC0CW03.XXXSTAT = "A"; /* init status request*/
  PC0CM001.PC0CMSTT = "A"; /* move status to map*/

    /* ------------------------------------------------------------*/
        /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
        /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
        /* OR PRODUCTION.*/
    /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    PC0CM001.XXXPRCNM = "PC0C001"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end


   /* **                                                        ***/
   /* ********************** End of PB0C261 ***********************/
end // end PC0C001

// p.o. customer xref inq/maint.
Function PC0C002()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Display the customer cross reference - list screen*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "1") /* Map 1 was requested*/
    PC0C100(); /* Display map 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer cross reference - ADD screen*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "2" /* Map 2 was requested*/
   && PC0CW01.PC0CWFSW == "A") /* and ADD function*/
    PC0C200(); /* Display Add Map*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer cross reference - INQUIRY screen and*/
   /* control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "2" /* Map 2 was selected*/
   && PC0CW01.PC0CWFSW == "I") /* and INQUIRE function*/

    if (converseVar.validationMsgNum == 0
     && PC0CW01.PC0CWBYF == "N")
      PC0CW01.PC0CWIXM = 1; /* Initialize index*/
    end

    while (PC0CW01.PC0CWIXM <= 13 /* Until end of page*/
     && PC0CW01.PC0CWMAP == "2") /* and map 2*/

      if (PC0CM001.PC0CMSEL[PC0CWIXM] == "S") /* If line selected*/
        PC0C300(); /* Display INQUIRY Map*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0CW01.PC0CWBYF == "N")         
        PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1; /* Increment index*/
      end
    end
    PC0CW01.PC0CWMAP = "1"; /* Set map number to 1*/
  end

   /* ------------------------------------------------------------*/
   /* Display the customer cross reference - CHANGE screen and*/
   /* control processing of 'S'elected data*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "2" /* Map 2 was selected*/
   && PC0CW01.PC0CWFSW == "C") /* and CHANGE function*/

    if (converseVar.validationMsgNum == 0
     && PC0CW01.PC0CWBYF == "N")
      PC0CW01.PC0CWIXM = 1; /* Initialize index*/
    end

    while (PC0CW01.PC0CWIXM <= 13 /* Until end of page*/
     && PC0CW01.PC0CWMAP == "2") /* and map 2*/

      if (PC0CM001.PC0CMSEL[PC0CWIXM] == "S") /* If line selected*/
        PC0C400(); /* Display CHANGE screen*/
      end

      if (converseVar.validationMsgNum == 0 /* If no problems*/
       && PC0CW01.PC0CWBYF == "N")         
        PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1; /* Increment index*/
      end

    end
    PC0CW01.PC0CWMAP = "1"; /* Set map number to 1*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid map number terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "1"
   || PC0CW01.PC0CWMAP == "2")

     /* next sentence*/
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0C002 "; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = PC0CW01.PC0CWMAP; /* Map name*/
    TAEREC.TAEDESC1 = "MAP NUMBER IS INVALID";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
  end


   /* ------------------------------------------------------------*/
   /* If invalid function switch terminate processing*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMAP == "2")
    if (PC0CW01.PC0CWFSW == "A"
     || PC0CW01.PC0CWFSW == "I"
     || PC0CW01.PC0CWFSW == "C")

       /* next sentence*/

    else
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "PC0C002 "; /* Process name*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PC0CW01.PC0CWMAP; /* Map name*/
      TAEREC.TAEDESC1 = "MAP FUNCTION IS INVALID";

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/
    end
  end

end // end PC0C002

// p.o. customer xref list screen
Function PC0C100()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PC0C110(); /* Obtain the data to display*/

  PC0C120(); /* Format and display the map*/

  PC0C130(); /* Check attention identifier*/

  PC0C140(); /* Reset fields to normal intensity*/

  PC0C150(); /* Verify the entered data*/

  PC0C160(); /* Process valid input request*/


end // end PC0C100

// Obtain the data to display
Function PC0C110()

   /* ------------------------------------------------------------*/
     /* Purge any existing queue in temporary storage.*/
     /* Select and open the cursor for the set(s) to be formatted*/
     /* Fetch and format the data in the page.*/
     /* If the page is full, add the page to the storage queue.*/
     /* At end of rows, add any partial page to the queue.*/
     /* At end of rows, close the selected set cursor.*/
     /* If no data found, display error message and return to*/
       /* previous process.*/
     /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWSWR == "N") /* Data not requested*/

    return;

  end

  PC0CS01(); /* Purge any temporary storage*/

  set VPRDCU03 empty; /* Clear p.o. customer xref record*/
  set PC0CW02 empty; /* Clear temporary storage record*/
  PC0CW01.PC0CWLIX = 1; /* reset line index*/
  PC0CW01.PC0CWSWR = "N"; /* Request for data completed*/

   /* validate the gpc code entered*/

  if (PC0CM001.XGPCD > " ")
    if (PC0CM001.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PC0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      PC0CW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      if (PC0CM001.XGPCD != "01"
       && PC0CM001.XGPCD != "02"
       && PC0CM001.XGPCD != "03"
       && PC0CM001.XGPCD != "07")
        converseLib.validationFailed(200); /* invalid gpc for p.o. system*/
        PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
        PC0CW01.XGPCD = " "; /* set w/s gpc code*/
        PC0CW01.XGPDESC = " "; /* set w/s gpc description*/
        PC0CM001.XGPDESC = " "; /* set w/s gpc description*/
        PC0CM001.XXXPRCNM = "PC0C110"; /* process name*/
        set PC0CM001.XGPCD cursor, modified, bold;
        return; /* display error message*/
      end
    else
      converseLib.validationFailed(28); /* invalid or missing gpc code*/
      PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
      PC0CW01.XGPCD = " "; /* set w/s gpc code*/
      PC0CW01.XGPDESC = " "; /* set w/s gpc description*/
      PC0CM001.XXXPRCNM = "PC0C110"; /* process name*/
      set PC0CM001.XGPCD cursor, modified, bold;
    end
  else
    converseLib.validationFailed(28); /* invalid or missing gpc code*/
    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CW01.XGPCD = " "; /* set w/s gpc code*/
    PC0CW01.XGPDESC = " "; /* set w/s gpc description*/
    PC0CM001.XXXPRCNM = "PC0C110"; /* process name*/
    set PC0CM001.XGPCD cursor, modified, bold;
  end

  if (PC0CW01.PC0CWPSW == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* If no error(s) verify user security*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWUPD = "N"; /* reset update flag*/
  PC0CW01.PC0CWINQ = "N";

  if (COMMAREA.XGPCD == "01"
   && COMMAREA.CACLVL[1] == "Y")
    PC0CW01.PC0CWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "02"
   && COMMAREA.CACLVL[2] == "Y")
    PC0CW01.PC0CWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "03"
   && COMMAREA.CACLVL[3] == "Y")
    PC0CW01.PC0CWUPD = "Y"; /* set update flag*/
  end

  if (COMMAREA.XGPCD == "07"
   && COMMAREA.CACLVL[7] == "Y")
    PC0CW01.PC0CWUPD = "Y"; /* set update flag*/
  end

  if (PC0CW01.PC0CWUPD == "N")
    if (COMMAREA.XGPCD == "01"
     && COMMAREA.CAILVL[1] == "Y")
      PC0CW01.PC0CWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "02"
     && COMMAREA.CAILVL[2] == "Y")
      PC0CW01.PC0CWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "03"
     && COMMAREA.CAILVL[3] == "Y")
      PC0CW01.PC0CWINQ = "Y"; /* set update flag*/
    end

    if (COMMAREA.XGPCD == "07"
     && COMMAREA.CAILVL[7] == "Y")
      PC0CW01.PC0CWINQ = "Y"; /* set update flag*/
    end

    if (PC0CW01.PC0CWINQ == "N")
      PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
      PC0CW01.XGPCD = " "; /* set w/s gpc code*/
      converseLib.validationFailed(105); /* user not authorized*/
      PC0CM001.XXXPRCNM = "PC0C110"; /* process name*/
    end
  end

  if (PC0CW01.PC0CWPSW == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if no errors obtain customer xref data for display*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty;
  VPRDCU03.XGPCD = PC0CM001.XGPCD;
  VPRDCU03.PC2INSEG = PC0CW03.PC2INSEG;
  VPRDCU03.PC2CUXID = PC0CW03.PC2CUXID;
  VPRDCU03.KUCCOID = PC0CW03.KUCCOID;
  VPRDCU03.KUMSTRID = -1;
  VPRDCU03.XNXCD = -1;

  PC0CW01.PC0CWIXM = 1; /* Initialize display line number*/
  PC0CW01.PC0CWCSW = "N"; /* Initialize end of cursor switch*/
  PC0CW01.PC0CWPSW = "N"; /* Initialize problem switch*/

  PC0CS02(); /* Select set and open the cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch all rows and screen out '000' Iseg code's and*/
   /* also screen out customers not matching on status*/
   /* if status selection was requested.*/
   /* ------------------------------------------------------------*/

  PC0CS04(); /* Fetch VPRDCU03 row*/

  while (PC0CW01.PC0CWCSW == "N" /* Until end of set*/
   && PC0CW01.PC0CWPSW == "N") /* and no problems*/

    if (VPRDCU03.PC2INSEG == "000" /* If dummy customer*/
    )                              /* ======= Next Sentence ========>*/
    else

      if (PC0CM001.PC0CM-PRDCU-PROC-IND == " "
       || PC0CM001.PC0CM-PRDCU-PROC-IND == VPRDCU03.PC-PRDCU-APAO-FL)

        PC0C111(); /* Load data to for display*/

      end /* End of If statement*/

    end /* End of If statement*/

    PC0CS04(); /* Fetch VPRDCU03 row*/

  end /* End of Set while loop*/

  if (PC0CW01.PC0CWIXM > 1 /* Partial page was formated*/
   && PC0CW01.PC0CWPSW == "N") /* and no errors*/

    PC0CS05(); /* add page to temp storage*/

    PC0CW01.PC0CWIXM = 1; /* Reset index to 1*/

  end

  PC0CW01.PC0CWTSP = 1; /* Initialize page number*/

  PC0CS06(); /* Close set of VPRDCU03 rows*/

  if (PC0CW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0CW01.PC0CWPSW = "Y"; /* indicate error exists*/
    PC0CM001.XXXPRCNM = "PC0C110"; /* process name.*/
  else
    PC0CW01.XGPCD = PC0CM001.XGPCD; /* save gpc*/
    COMMAREA.XGPCD = PC0CM001.XGPCD; /* save gpc*/
  end

end // end PC0C110

// load/prepare data for display
Function PC0C111()
        /* *************************************/
        /* **    Load data to for display***/
        /* *************************************/

  if (PC0CW03.XXXSTAT == " " /* All status requested*/
   || VPRDCU03.XXXSTAT == PC0CW03.XXXSTAT)
    PC0CW02.XGPCD[PC0CWIXM] = VPRDCU03.XGPCD;
    PC0CW02.PC2CUXID[PC0CWIXM] = VPRDCU03.PC2CUXID;
    PC0CW02.KUCCOID[PC0CWIXM] = VPRDCU03.KUCCOID;
    KUMREC.KUCCOID = VPRDCU03.KUCCOID;
    PC0CW02.KUMSTRID[PC0CWIXM] = VPRDCU03.KUMSTRID;
    KUMREC.KUMSTRID = VPRDCU03.KUMSTRID;
    PC0CW02.XNXCD[PC0CWIXM] = VPRDCU03.XNXCD;

    if (VPRDCU03.KUCCOID > 0)

          /* get description for a valid customer number*/
      KUMREC.KUMSTRNM = " ";

      if (VPRDCU03.PC-PRDCU-APAO-FL == "E")
        PC0CS-0014(); /* get customer description*/
      else
        PC0CS14(); /* get customer description*/
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0CW02.PC2NAME[PC0CWIXM] = KUMREC.KUMSTRNM;
      else
        PC0CW02.PC2NAME[PC0CWIXM] = VPRDCU03.PC2NAME;
      end

    else
      PC0CW02.PC2NAME[PC0CWIXM] = VPRDCU03.PC2NAME;
    end
    PC0CW02.TSCLOCCD[PC0CWIXM] = VPRDCU03.TSCLOCCD;
    PC0CW02.PC2INSEG[PC0CWIXM] = VPRDCU03.PC2INSEG;
    PC0CW02.PC2SEGAB[PC0CWIXM] = VPRDCU03.PC2SEGAB;
    PC0CW02.PC2SEGDE[PC0CWIXM] = VPRDCU03.PC2SEGDE;
    PC0CW02.YSMXDV[PC0CWIXM] = VPRDCU03.YSMXDV;
    PC0CW02.YPCCD[PC0CWIXM] = VPRDCU03.YPCCD;
    PC0CW02.PC0CMUCC[PC0CWIXM] = VPRDCU03.XCTCD;
    PC0CW02.PC2REFID[PC0CWIXM] = VPRDCU03.PC2REFID;
    PC0CW02.PCXCTRTA[PC0CWIXM] = VPRDCU03.XCTRTADY;
    PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM] = VPRDCU03.PC-PRDCU-APAO-FL;
    PC0CW02.XWHCD[PC0CWIXM] = VPRDCU03.XWHCD;
    PC0CW02.XXXSTAT[PC0CWIXM] = VPRDCU03.XXXSTAT;
    PC0CW02.ZZZCHGCT[PC0CWIXM] = VPRDCU03.ZZZCHGCT;
    PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM] = VPRDCU03.PO-DIR-SHP-ADJ-DY;
    TSCREC.TSCLOCCD = VPRDCU03.TSCLOCCD;

    PC0CS03(); /* select tscrec row*/

    if (SQLCA.VAGen_SQLCODE == 0
     && TSCREC.XXXSTAT == "A")
      PC0CW02.XCTCD[PC0CWIXM] = TSCREC.XCTCD;
      PC0CW02.XXXCITY[PC0CWIXM] = TSCREC.XXXCITY;
    else
      PC0CW02.XCTCD[PC0CWIXM] = " ";
      PC0CW02.XXXCITY[PC0CWIXM] = " ";
    end

    if (PC0CW01.PC0CWIXM > 12 /* Page full*/
     || PC0CW01.PC0CWCSW == "Y") /* or until end of set*/

      PC0CS05(); /* add page to temp storage*/
      PC0CW01.PC0CWIXM = 1; /* Reset index to 1*/

    else

      PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1;

    end

  end /* End of If statement*/

end // end PC0C111

// Format and display the map
Function PC0C120()

   /* ------------------------------------------------------------*/
   /* If no error(s) to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no message to display*/
   && PC0CW01.PC0CWBYF == "N")          /* do not bypass processing*/
    PC0C121(); /* Format the selected data*/
  end

   /* ------------------------------------------------------------*/
   /* The problem switch is set if:  invalid gpc code*/
                                  /* invalid transfer application*/
                                  /* blank gpc code*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWPSW == "Y") /* Error message to display*/

    set PC0CM001 initial; /* clear screen pc0cm001*/

    set PC0CM001.XGPCD cursor; /* default position*/
    set PC0CM001.PC0CMPGL initialAttributes; /* Turn off "PAGE" literal*/
    set PC0CM001.PC0CMOFL initialAttributes; /* Turn off "OF" literal*/
    set PC0CM001.PC0CWTSP initialAttributes; /* turn off current page number*/
    set PC0CM001.TA5TSQIX initialAttributes; /* Turn off highest page number*/

    if (COMMAREA.CATOAP > " ") /* invalid transfer request*/
      PC0CM001.CATOAP = COMMAREA.CATOAP; /* load transfer application*/
      PC0CM001.CAITEM = COMMAREA.CAITEM; /* load transfer items*/
      COMMAREA.CATOAP = " "; /* clear commarea transfer application*/
      COMMAREA.CAITEM = " "; /* clear commarea transfer items*/
      PC0CW01.XGPCD = " "; /* clear w/s gpc code*/
      set PC0CM001.CATOAP cursor, modified, bold; /* set cursor*/
    else
      if (PC0CW01.TA5TSQIX == 0) /* no data loaded*/
        PC0CW01.XGPCD = " "; /* clear w/s gpc code*/
        PC0CM001.XGPCD = COMMAREA.XGPCD; /* load gpc code*/

        if (PC0CM001.XGPCD in XGPTBL.XGPCD /* if gpc active load desc*/
         && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (COMMAREA.XGPCD in XGPTBL.XGPCD)
            PC0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
          end
        else
          PC0CM001.XGPDESC = " ";
        end

        if (converseVar.validationMsgNum == 28 /* invalid gpc*/
         || converseVar.validationMsgNum == 200)
          set PC0CM001.XGPCD cursor, modified, bold;
          PC0CM001.XXXPRCNM = "PC0C120"; /* process name*/
        else /* blank gpc*/
          set PC0CM001.XGPCD cursor;
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if updates allowed display pfkeys*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWUPD == "Y")
    set PC0CM001.PC0CMADD skip; /* gpc valid for add*/
    set PC0CM001.PC0CMCHG skip; /* gpc valid for chg*/
    set PC0CM001.PC0CM-SUB skip; /* gpc valid for chg*/
  end

   /* ------------------------------------------------------------*/
   /* if data successful updated display message*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMFL == "Y") /* update flag on*/
    converseLib.validationFailed(1);
    PC0CM001.XXXPRCNM = "PC0C120"; /* process name*/
    PC0CW01.PC0CWMFL = "N"; /* reset message flag*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors sound the alarm*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PC0CM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Display customer xref list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* Error message to display*/
   || converseVar.validationMsgNum == 18) /* Or no data found*/
    PC0CM001.PC0CM-CUST-NBR = PC0CW03.KUCCOID; /* Cust nbr*/
    PC0CM001.PC0CMSTT = PC0CW03.XXXSTAT;
  end

  PC0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse PC0CM001 ;

   /* ------------------------------------------------------------*/
   /* default customer process indicator*/
   /* ------------------------------------------------------------*/
  if (PC0CM001.PC0CM-PRDCU-PROC-IND == "*")
    PC0CM001.PC0CM-PRDCU-PROC-IND = " ";
  else
    if (PC0CM001.PC0CM-PRDCU-PROC-IND != PC0CW03.PC-PRDCU-APAO-FL
     && PC0CM001.PC0CM-PRDCU-PROC-IND == " ")
      PC0CM001.PC0CM-PRDCU-PROC-IND = PC0CW03.PC-PRDCU-APAO-FL;
    end

  end
   /* ------------------------------------------------------------*/
   /* Reset problem switch and check if the user has requested*/
   /* the display of the gpc pop-up window.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWPSW = "N"; /* Reset problem switch*/
  PC0CW01.PC0CWBYF = "N"; /* Reset bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0C122(); /* Check for ? inquiry by user*/
  end
end // end PC0C120

// Format the selected data
Function PC0C121()

   /* ------------------------------------------------------------*/
   /* If the customer xref locator is used, search temporary*/
   /* storage to find a customer xref code that is greater than*/
   /* or equal to the customer xref locator. If found,*/
   /* (customer xref(s) are equal) position the cursor at that*/
   /* customer xref code.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWCFL = "N";

  if (PC0CM001.PC0CMCUX > " " /* Locate customer xref code*/
   || PC0CM001.PC0CMSEG > " ") /* Locate customer iseg code*/
    PC0CW01.PC0CWTSP = 1; /* Init temporary storage page*/

    while (PC0CW01.PC0CWTSP <= PC0CW01.TA5TSQIX /* Search all pages*/
     && PC0CW01.PC0CWCFL == "N") /* Customer not found*/

      PC0CS07(); /* Obtain temp storage*/

      PC0CW01.PC0CWIXM = 1; /* Init index*/
      while (PC0CW01.PC0CWIXM <= 13
       && PC0CW01.PC0CWCFL == "N")

        if (PC0CM001.PC0CMCUX != " ")
          if (PC0CW02.PC2CUXID[PC0CWIXM] >= PC0CM001.PC0CMCUX)
            PC0CW01.PC0CWLIX = PC0CW01.PC0CWIXM;
            PC0CW01.PC0CWCFL = "Y"; /* customer xref found*/
          end
        else
          if (PC0CW02.PC2INSEG[PC0CWIXM] >= PC0CM001.PC0CMSEG)
            PC0CW01.PC0CWLIX = PC0CW01.PC0CWIXM;
            PC0CW01.PC0CWCFL = "Y"; /* customer xref found*/
          end
        end

        if (PC0CW01.PC0CWCFL == "N") /* customer xref not found*/
          PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1; /* Incr. index*/
        end
      end

      if (PC0CW01.PC0CWCFL == "N") /* Customer xref not found*/
        PC0CW01.PC0CWTSP = PC0CW01.PC0CWTSP + 1; /* Incr. temp storage pg*/
      end

    end

    PC0CM001.PC0CMCUX = " ";

    if (PC0CW01.PC0CWCFL == "N") /* Customer xref not found*/
      PC0CW01.PC0CWTSP = 1; /* display first page of data*/
      PC0CM001.XXXPRCNM = "PC0C121"; /* process name*/
      converseLib.validationFailed(18); /* display msg 'request processed and*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain temporary storage, load and display map fields.*/
   /* ------------------------------------------------------------*/

  set PC0CM001 initial;
  PC0CM001.XGPCD = PC0CW01.XGPCD;
  if (PC0CW01.XGPCD in XGPTBL.XGPCD)
    PC0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end
  PC0CM001.PC0CMSTT = PC0CW03.XXXSTAT;
  PC0CM001.PC0CM-CUST-NBR = PC0CW03.KUCCOID;

  PC0CS07(); /* Obtain temporary storage page*/

  set PC0CM001.PC0CMPGL skip; /* Display "PAGE" literal*/
  set PC0CM001.PC0CMOFL skip; /* Display "OF" literal*/

  PC0CM001.PC0CWTSP = PC0CW01.PC0CWTSP; /* Current page number*/
  set PC0CM001.PC0CWTSP skip; /* Display number*/
  PC0CM001.TA5TSQIX = PC0CW01.TA5TSQIX; /* Highest page number*/
  set PC0CM001.TA5TSQIX skip; /* Display number*/

  PC0CW01.PC0CWIXM = 1; /* Initialize line index*/
  while (PC0CW01.PC0CWIXM <= 13 /* Until end of lines or*/
   && PC0CW02.PC2CUXID[PC0CWIXM] != " ") /* all customers are displayed*/

    set PC0CM001.PC0CMSEL[PC0CWIXM] normal; /* Display select flag*/
    PC0CM001.PC0CMSEL[PC0CWIXM] = PC0CW02.PC0CMSEL[PC0CWIXM];
    PC0CM001.PC2CUXID[PC0CWIXM] = PC0CW02.PC2CUXID[PC0CWIXM];
    PC0CM001.KUCCOID[PC0CWIXM] = PC0CW02.KUCCOID[PC0CWIXM];
    PC0CM001.KUMSTRID[PC0CWIXM] = PC0CW02.KUMSTRID[PC0CWIXM];
    PC0CM001.XNXCD[PC0CWIXM] = PC0CW02.XNXCD[PC0CWIXM];
    PC0CM001.PC2NAME[PC0CWIXM] = PC0CW02.PC2NAME[PC0CWIXM];
    PC0CM001.XCTCD[PC0CWIXM] = PC0CW02.PC0CMUCC[PC0CWIXM];
    PC0CM001.TSCLOCCD[PC0CWIXM] = PC0CW02.TSCLOCCD[PC0CWIXM];
    PC0CM001.PC2INSEG[PC0CWIXM] = PC0CW02.PC2INSEG[PC0CWIXM];
    PC0CM001.PC-PRDCU-APAO-FL[PC0CWIXM] = PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM];
    PC0CM001.XXXSTAT[PC0CWIXM] = PC0CW02.XXXSTAT[PC0CWIXM];

    PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1; /* Increment line index*/

  end

   /* set cursor position*/

  if (PC0CW01.PC0CWFSW == "A")
    set PC0CM001.PC0CMCUX cursor;
  else
    if (PC0CW01.PC0CWFSW == "I")
      set PC0CM001.PC0CMCUX cursor;
    else
      set PC0CM001.PC0CMSEL[PC0CWLIX] cursor; /* Last row viewed*/
    end
  end

  PC0CW01.PC0CWFSW = " "; /* Init function flag*/

end // end PC0C121

// Check for ? inquiry by user
Function PC0C122()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0CM001.XGPCD == "?"
   || PC0CM001.PC0CM-PRDCU-PROC-IND == "?")

    /* *************************************************************/
     /* Check GPC Code for '?'*/
    /* *************************************************************/

    if (PC0CM001.XGPCD == "?"
    )
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

      /* **********************************************************/
      /* *  If the pass index is greater than zero, use the      **/
      /* *  passed table index 'XX0XWPIX' to move the gpc        **/
      /* *  table code and description to the map.               **/
      /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0CM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM001.XGPCD = COMMAREA.XGPCD;
        if (COMMAREA.XGPCD in XGPTBL.XGPCD)
          PC0CM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end

    end

    /* *************************************************************/
     /* Check Customer Process Incidator for '?'*/
    /* *************************************************************/

    if (PC0CM001.PC0CM-PRDCU-PROC-IND == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "CUSTOMER PROCESS INDICATOR"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPPC040(); /* perform  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM001.PC0CM-PRDCU-PROC-IND = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWPIX]; /* move code*/
      else
        PC0CM001.PC0CM-PRDCU-PROC-IND = " "; /* move code*/
      end

      set PC0CM001.PC0CM-PRDCU-PROC-IND cursor; /* set cursor*/

    end

    converseLib.clearScreen();
     /* restore the original map*/

  end



end // end PC0C122

// Check attention identifier
Function PC0C130()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0cm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0CW01.PC0CWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Fast path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0CS01(); /* Purge any temporary storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0CM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0CM001.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
      PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/
    end

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF3 - Return to P.O. menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PC0CS01(); /* Purge any temporary storage*/

    COMMAREA.CAITEM = " "; /* Application data*/
    COMMAREA.CAUSERA = " "; /* init commarea*/
    PCWREC.CAUSERA = " "; /* init pcwrec*/
    COMMAREA.CATOAP = "PC0A"; /* Set to p.o. menu*/
    set PCWREC empty;

    XSPCS01(); /* Exit to p.o. menu*/

    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* PF4 was pressed*/
   || converseVar.eventKey is pf5) /* PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 pressed*/
      COMMAREA.CAITEM = "PC0CM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* Clear item*/
    end

    PC0CS01(); /* Purge any temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF6 - Verify if user is authorized to submit the batch*/
   /* JCL to send data to MVSEURD region.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6 /* PF13 was pressed*/
   && PC0CW01.PC0CWUPD == "N")    /* and user chg not authorized*/
    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF13 - Verify if user is authorized to add customer xref*/
          /* information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && PC0CW01.PC0CWUPD == "N")     /* and user chg not authorized*/
    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* PF14 - Verify if user is authorized to change customer xref*/
          /* information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0CW01.PC0CWUPD == "N")     /* and user chg not authorized*/
    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PC0CM001.XXXPRCNM = "PC0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0CW01.PC0CWBYF = "Y"; /* bypass reload of data*/
    end

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0C130

// Reset highlighted fields
Function PC0C140()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0CM001.XGPCD initialAttributes; /* gpc code*/
  set PC0CM001.XGPDESC initialAttributes; /* gpc code desc*/
  set PC0CM001.PC0CMCUX initialAttributes; /* customer xref code*/
  set PC0CM001.PC0CM-PRDCU-PROC-IND initialAttributes; /* customer process indicator*/

  PC0CW01.PC0CWIXM = 1; /* Initialize line index*/

  while (PC0CW01.PC0CWIXM <= 13 /* Until end of lines*/
   && PC0CM001.PC2CUXID[PC0CWIXM] != " ")
                                   /* and customer xref codes exists*/
    set PC0CM001.PC0CMSEL[PC0CWIXM] normal; /* Reset select flag*/
    PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM + 1; /* Increment line index*/
  end

  set PC0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0CM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PC0C140

// Verify the entered data
Function PC0C150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.CAITEM > " ") /* Application data was entered*/
    set PC0CM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0CM001.XXXPRCNM = "PC0C150"; /* Process name*/

    exit stack; /* exit redisplay map*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0C151(); /* Verify scroll request*/

  else
    if (converseVar.eventKey not pf13)

      PC0C152(); /* Verify any changed data*/

    end
  end


end // end PC0C150

// Verify scroll request
Function PC0C151()

   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWIXM = 13; /* Initialize line index*/

  while (PC0CW01.PC0CWIXM > 0) /* Until end of lines*/
    if (PC0CM001.PC0CMSEL[PC0CWIXM] > " "
     && PC0CM001.PC0CMSEL[PC0CWIXM] != "V")
      set PC0CM001.PC0CMSEL[PC0CWIXM] cursor, modified, bold; /* Highlight*/
      PC0CM001.XXXPRCNM = "PC0C151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM - 1; /* Decrement line number*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0CW01.PC0CWTSP < 2        /* and no previous pages*/
   && converseVar.validationMsgNum == 0) /* no errors*/
    PC0CM001.XXXPRCNM = "PC0C151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8          /* Scroll forward request*/
   && PC0CW01.PC0CWTSP == PC0CW01.TA5TSQIX /* already on highest page*/
   && converseVar.validationMsgNum == 0)   /* no errors*/
    PC0CM001.XXXPRCNM = "PC0C151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  if (converseVar.validationMsgNum == 0)
    PC0CW01.PC0CWLIX = 1; /* set cursor at first row*/
  end

end // end PC0C151

// Verify any changed data
Function PC0C152()
   /* ------------------------------------------------------------*/
   /* determine if customer process flag is valid              --*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.PC0CM-PRDCU-PROC-IND != PC0CW03.PC-PRDCU-APAO-FL)

    if (PC0CM001.PC0CM-PRDCU-PROC-IND == " ")
      PC0CW03.PC-PRDCU-APAO-FL = PC0CM001.PC0CM-PRDCU-PROC-IND;
      PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
    else /* ===> check table*/
      if (PC0CM001.PC0CM-PRDCU-PROC-IND in PC0CTBL.PC-PRDCU-APAO-FL)

        PC0CW03.PC-PRDCU-APAO-FL = PC0CM001.PC0CM-PRDCU-PROC-IND;
        PC0CW01.PC0CWSWR = "Y"; /* Request for data*/

      else /* ===> code not in table*/

        set PC0CM001.PC0CM-PRDCU-PROC-IND cursor, skip, bold;
        PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
        converseLib.validationFailed(515); /* Invalid code entered*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If both cust xref and iseg code entered display error msg*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.PC0CM-CUST-NBR != PC0CW03.KUCCOID) /* Cust nbr changed*/
    if (PC0CM001.PC0CM-CUST-NBR > 0)
      set KUMREC empty;
      KUMREC.KUCCOID = PC0CM001.PC0CM-CUST-NBR;
      PC0CS18(); /* Select Set Company number*/
      PC0CS19(); /* Fetch company number*/
      if (SQLCA.VAGen_SQLCODE == 0)
        PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
        PC0CW03.KUCCOID = PC0CM001.PC0CM-CUST-NBR;
        PC0CW03.PC2CUXID = PC0CM001.PC0CMCUX; /* Save customer*/
        PC0CW03.PC2INSEG = PC0CM001.PC0CMSEG; /* Save Iseg*/
      else
        PC0CS-0015(); /* Select Set Company number EURD*/
        PC0CS-0016(); /* Fetch company number EURD*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
          PC0CW03.KUCCOID = PC0CM001.PC0CM-CUST-NBR;
          PC0CW03.PC2CUXID = PC0CM001.PC0CMCUX; /* Save customer*/
          PC0CW03.PC2INSEG = PC0CM001.PC0CMSEG; /* Save Iseg*/
        else
          PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
          set PC0CM001.PC0CM-CUST-NBR cursor, modified, bold;
          converseLib.validationFailed(507); /* Customer number invalid or missing*/
        end
        PC0CS-0017(); /* Close company number EURD*/
      end
      PC0CS20(); /* Close Set Company number*/
    else /* Customer changed to zero*/
      PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
      PC0CW03.KUCCOID = PC0CM001.PC0CM-CUST-NBR;
    end
  end

   /* ------------------------------------------------------------*/
   /* If both cust xref and iseg code entered display error msg*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.PC0CMCUX != " " /* Cust xref entered*/
   && PC0CM001.PC0CMSEG != " ") /* and iseg code entered*/
    PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
    set PC0CM001.PC0CMCUX cursor, modified, bold;
    set PC0CM001.PC0CMSEG modified, bold;
    converseLib.validationFailed(318); /* Cannot enter both xref & iseg*/
  else
    if (PC0CM001.PC0CM-CUST-NBR > 0)
      if (PC0CM001.PC0CMCUX > " " /* Cust xref entered*/
       || PC0CM001.PC0CMSEG > " ") /* or iseg code entered*/
        PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
        set PC0CM001.PC0CMCUX cursor, modified, bold;
        set PC0CM001.PC0CMSEG modified, bold;
        converseLib.validationFailed(506); /* Cannot enter both xref & iseg*/
      end
    else
      if (PC0CM001.PC0CMCUX != " " /* Cust xref entered*/
       || PC0CM001.PC0CMSEG != " ") /* or iseg code entered*/
        PC0CW03.PC2CUXID = PC0CM001.PC0CMCUX; /* Save customer*/
        PC0CW03.PC2INSEG = PC0CM001.PC0CMSEG; /* Save Iseg*/
        PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If status changed save it and redisplay data*/
   /* ------------------------------------------------------------*/

  if (PC0CM001.PC0CMSTT != PC0CW03.XXXSTAT) /* If status changed*/
    PC0CW03.XXXSTAT = PC0CM001.PC0CMSTT; /* Save status*/
    PC0CW01.PC0CWSWR = "Y"; /* Request for data*/
  end


   /* ------------------------------------------------------------*/
   /* Check for changed/valid gpc code.  If request for data*/
   /* is yes bypass all other edits.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XGPCD = PC0CM001.XGPCD; /* keep current at all times*/

  if (PC0CM001.XGPCD == " " /* If gpc code not entered*/
   || PC0CM001.XGPCD != PC0CW01.XGPCD) /* gpc code has changed*/
    PC0CW01.XGPCD = PC0CM001.XGPCD; /* gpc code*/
    PC0CW01.PC0CWSWR = "Y"; /* set request for data*/
    if (PC0CM001.PC0CMCUX != " " /* Cust xref entered*/
     && PC0CM001.PC0CMSEG != " ") /* and iseg code entered*/
      /* next sentence*/
    else
      if (PC0CM001.PC0CMCUX != " " /* Cust xref entered*/
       || PC0CM001.PC0CMSEG != " ") /* or iseg code entered*/
        PC0CW03.PC2CUXID = PC0CM001.PC0CMCUX; /* Save customer*/
        PC0CW03.PC2INSEG = PC0CM001.PC0CMSEG; /* Save Iseg*/
      else
        PC0CW01.PC0CWCXS = " "; /* init save cust key*/
        PC0CW03.PC2CUXID = " "; /* init cust xref*/
        PC0CW01.PC0CWISS = " "; /* init save iseg key*/
        PC0CW03.PC2INSEG = " "; /* init inseg*/
      end
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if data has been selected off the list screen*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWSFL = "N"; /* Initialize selection flag*/
  PC0CW01.PC0CWIXM = 13; /* Initialize index*/

  while (PC0CW01.PC0CWIXM > 0) /* Until end of lines*/
    if (PC0CM001.PC0CMSEL[PC0CWIXM] != " ") /* If selection not blank*/
      if (PC0CM001.PC0CMSEL[PC0CWIXM] == "S")
        PC0CW01.PC0CWSFL = "Y"; /* Initialize selection flag*/
      else
        if (PC0CM001.PC0CMSEL[PC0CWIXM] != "V") /* invalid entry*/
          converseLib.validationFailed(13); /* Error message and highlight*/
          PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
          PC0CW01.PC0CWSFL = "Y"; /* Initialize selection flag*/
          set PC0CM001.PC0CMSEL[PC0CWIXM] cursor, modified, bold;
        end
      end
    end

    PC0CW01.PC0CWIXM = PC0CW01.PC0CWIXM - 1; /* Decrement line index*/
  end
   /* ------------------------------------------------------------*/
   /* If PF14 was pressed and no data selected display error msg*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0CW01.PC0CWSFL == "N")     /* and selection was not made*/
    PC0CM001.XXXPRCNM = "PC0C152"; /* Process name*/
    converseLib.validationFailed(25); /* enter 's' for selection*/
  end
end // end PC0C152

// Process valid input request
Function PC0C160()

   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message set up*/
    return;
  end

  if (converseVar.eventKey is pf6) /* Submit jcl requested*/
    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
      PC0C161(); /* Submit production JCL*/
    else
      PC0C162(); /* Submit test JCL*/
    end
  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PC0CW01.PC0CWTSP = PC0CW01.PC0CWTSP - 1; /* Decrement page number*/
    return;
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    if (PC0CW01.TA5TSQIX > PC0CW01.PC0CWTSP) /* more pages*/
      PC0CW01.PC0CWTSP = PC0CW01.PC0CWTSP + 1; /* Increment page number*/
      return;
    else
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Add function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    PC0CW01.PC0CWMAP = "2"; /* Select Map #2*/
    PC0CW01.PC0CWFSW = "A"; /* Select add function*/
    VPRDCU03.YPCCD = "C"; /* customer xref type default*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Change function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && PC0CW01.PC0CWSFL == "Y")     /* and selection was made*/
    PC0CW01.PC0CWMAP = "2"; /* Select Map #2*/
    PC0CW01.PC0CWFSW = "C"; /* Select change function*/
    converseLib.validationFailed(0); /* Clear error message field*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Inquiry function has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* Enter was pressed*/
    if (PC0CW01.PC0CWSFL == "Y") /* selection was made*/
      PC0CW01.PC0CWMAP = "2"; /* Select Map #2*/
      PC0CW01.PC0CWFSW = "I"; /* Select inquiry function*/
      converseLib.validationFailed(0); /* Clear error message field*/
    else
      if (PC0CM001.PC0CMSEG != " ") /* If iseg code key search entered*/
        PC0CW01.PC0CWSWR = "Y"; /* request for data = yes*/
      end
    end
  end

end // end PC0C160

// Submit PRODUCTION JCL
Function PC0C161()
   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC0CW01.PC0CWOIX = 0; /* Initialize override index*/
  PC0CW01.PC0CWJIX = 1; /* Initialize table line index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC0CW01.PC0CWJIX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PC0CT01.TARJCL[PC0CWJIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC0CT01.TARTYPE[PC0CWJIX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC0CT01.TARJCL[PC0CWJIX] == "/*EOF") /* End of table*/

      PC0CW01.PC0CWJIX = 0; /* Indicate end of table*/

    else

      PC0CW01.PC0CWJIX = PC0CW01.PC0CWJIX + 1; /* Increment table index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC0CS-0021(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PC0CM001.XXXPRCNM = "PC0C161"; /* Process name*/
    PC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/
       /* MOVE 190 TO EZEMNO          ; Selections queued to print*/

  else

    PC0CM001.XXXPRCNM = "PC0C161"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PC0C161

// Submit TEST JCL
Function PC0C162()
   /* ------------------------------------------------------------*/
   /* CREATE THE APPROPRIATE JCL*/
   /* ------------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PC0CW01.PC0CWOIX = 0; /* Initialize over. index*/
  PC0CW01.PC0CWJIX = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC0CW01.PC0CWJIX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PC0CT11.TARJCL[PC0CWJIX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC0CT11.TARTYPE[PC0CWJIX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC0CT11.TARJCL[PC0CWJIX] == "/*EOF") /* End of table*/

      PC0CW01.PC0CWJIX = 0; /* Indicate end of table*/

    else

      PC0CW01.PC0CWJIX = PC0CW01.PC0CWJIX + 1; /* Increment table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC0CS-0021(); /* Submit the JCL*/

   /* ------------------------------------------------------------*/
   /* Display results of print request.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* If print was successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    PC0CM001.XXXPRCNM = "PC0C162"; /* Process name*/
    PC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* ===> Job info messege*/

  else

    PC0CM001.XXXPRCNM = "PC0C162"; /* Process name*/
    converseLib.validationFailed(10); /* Error encountered with print request*/

    exit stack;

  end


end // end PC0C162

// customer xref add map
Function PC0C200()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  PC0C210(); /* Format and display the map*/

  PC0C220(); /* Check attention identifier*/

  PC0C230(); /* Reset fields to normal intensity*/

  PC0C240(); /* Verify the entered data*/

  PC0C250(); /* Process valid input request*/


end // end PC0C200

// Format and display the map
Function PC0C210()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound the alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   || converseVar.validationMsgNum == 1) /* or update successfull*/
    if (PC0CW01.PC0CWBYF == "N") /* do not bypass processing*/

      set PC0CM002 initial; /* Clear map output area*/

      PC0CM002.PC-PRDCU-APAO-FL = "N"; /* Default apao flag*/
      PC0CM002.YPCCD = VPRDCU03.YPCCD; /* customer xref type default*/
      if (PC0CM002.YPCCD in YPCTBL.YPCCD)
        PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
      end
      PC0CM002.XXXSTAT = "A"; /* status code default*/
      PC0CM002.PC0CMSDS = "ACTIVE  ";
      PC0CM002.PC0CMFNC = "ADD  "; /* Move ADD title to map*/

      PC0CM002.XGPCD = PC0CM001.XGPCD;
      if (PC0CM001.XGPCD in XGPTBL.XGPCD)
        PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      end
      PC0CM002.PC2INSEG = "000"; /* default spec code to zeros*/

      if (PC0CM002.XGPCD == "02")
        set PC0CM002.PCRTADAY skip; /* display rta day literal*/
        set PC0CM002.PCXCTRTA modified; /* display rta day field*/
        PC0CM002.PCXCTRTA = "15";
      end

    end

  else
    /* ------------------------------------------------------------*/
     /* If any errors to display sound the alarm !!!!!*/
    /* ------------------------------------------------------------*/

    set PC0CM002 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* If update flag eq yes display screen*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWMFL == "Y")
    converseLib.validationFailed(1); /* display update message*/
    PC0CM002.XXXPRCNM = "PC0C210";
    PC0CW01.PC0CWMFL = "N"; /* reset update flag*/
  end

   /* ------------------------------------------------------------*/
   /* Display the ADD screen pc0cm002*/
   /* ------------------------------------------------------------*/

  PC0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  set PC0CM002.XXXSTAT protect; /* protect status*/

  converse PC0CM002 ;

   /* ------------------------------------------------------------*/
   /* Reset the problem switch, and verify if the user has*/
   /* requested pop-up windows.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWPSW = "N"; /* Reset problem switch*/
  PC0CW01.PC0CWBYF = "N"; /* Reset bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0C211(); /* Check for ? inquiry by user*/
  end

end // end PC0C210

// Check for ? inquiry by user
Function PC0C211()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0CM002.XGPCD == "?"
   || PC0CM002.YPCCD == "?"
   || PC0CM002.PC0CMUCC == "?"
   || PC0CM002.PC-PRDCU-APAO-FL == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0CM002.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0CM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.XGPCD = PC0CM001.XGPCD;
        if (PC0CM001.XGPCD in XGPTBL.XGPCD)
          PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end

    end

    /* *************************************************************/
     /* Check customer xref type code for ?*/
    /* *************************************************************/

    if (PC0CM002.YPCCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               XREF TYPE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPC01(); /* perform customer xref window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.YPCCD = YPCTBL.YPCCD[XX0XWPIX]; /* move code*/
        PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.YPCCD = "C"; /* reset fields*/
        if (PC0CM002.YPCCD in YPCTBL.YPCCD)
          PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
        end
      end

    end

    /* *************************************************************/
     /* Check ultimate country code for ?*/
    /* *************************************************************/

    if (PC0CM002.PC0CMUCC == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY  "; /* heading*/

      XCTTBL.XCTCD = PC0CM002.PC0CMUCC;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ultimate   **/
       /* *  country table code and description to the map.       **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.PC0CMUCC = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.PC0CMUCC = " "; /* clear fields*/
        PC0CM002.PC0CMUCD = " ";
      end

    end

    /* *************************************************************/
     /* Check Customer Process Incidator of '?'*/
    /* *************************************************************/

    if (PC0CM002.PC-PRDCU-APAO-FL == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "CUSTOMER PROCESS INDICATOR"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPPC040(); /* perform  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.PC-PRDCU-APAO-FL = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWPIX]; /* move code*/
      else
        PC0CM002.PC-PRDCU-APAO-FL = "N"; /* move code*/
      end

      set PC0CM002.PC-PRDCU-APAO-FL cursor; /* set cursor*/

    end

    converseLib.clearScreen();

    PC0CW01.PC0CWBYF = "Y";

  end



end // end PC0C211

// Check attention identifier
Function PC0C220()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    PC0CW01.PC0CWBYF = "Y"; /* bypass reload of screen*/

    exit stack; /* redisplay screen*/

  end

   /* ------------------------------------------------------------*/
   /* Fast Path - transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0CS01(); /* Purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0CM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0CM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0CM001.XXXPRCNM = "PC0C220"; /* Process name*/
      PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
      PC0CW01.PC0CWMAP = 1; /* set map switch*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0CM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0CM002.XXXPRCNM = "PC0C220"; /* Process name*/
    end

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* PF3 - return to customer xref list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0CW01.PC0CWMAP = "1"; /* Move to map 1*/
    PC0CM001.XGPCD = PC0CM002.XGPCD; /* load map gpc code*/
    COMMAREA.XGPCD = PC0CM002.XGPCD; /* load commarea gpc code*/
    PC0CW01.PC0CWSWR = "Y"; /* request for data*/

    exit stack; /* Exit to redisplay list screen*/

  end

   /* ------------------------------------------------------------*/
   /* pf6 - transfer to location inq/maint. screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* pf6 was pressed*/

    PC0CS01(); /* Purge temp storage*/

    COMMAREA.CATOAP = "TS0O"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    XSPCS01(); /* Exit to another application*/

    PC0CM001.XXXPRCNM = "PC0C220"; /* Process name*/
    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CW01.PC0CWMAP = 1; /* set map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* PF1 - transfer to help screen*/
   /* PF4 - transfer to p.o. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* PF6 - transfer to ts0o location inq/maint.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0CM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0CS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWMAP = 1; /* reset map switch*/
    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CM001.XXXPRCNM = "PC0C220"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Invalid key pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* If add requested*/
   && PC0CW01.PC0CWCFM == "Y")    /* and confirm is yes*/
    if (PC0CM002 is modified) /* If any fields have changed*/
      PC0CM002.XXXPRCNM = "PC0C220"; /* Process name*/
      converseLib.validationFailed(329); /* Customer not added due to changes*/
      PC0CW01.PC0CWCFM = "N";
    end
  else
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0CM002.XXXPRCNM = "PC0C220"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      if (converseVar.eventKey is pa1 /* PA1 was pressed*/
       || converseVar.eventKey is pa3) /* or PA3 was pressed*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        PC0CW01.PC0CWBYF = "Y"; /* bypass reload of screen*/
      end

      exit stack; /* redisplay screen*/
    end

  end


end // end PC0C220

// Reset highlighted fields
Function PC0C230()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0CM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0CM002.XGPDESC initialAttributes; /* Gpc desc.*/
  set PC0CM002.PC2CUXID initialAttributes; /* customer xref code*/
  set PC0CM002.YPCCD initialAttributes; /* xref type*/
  set PC0CM002.YPCSDESC initialAttributes; /* xref type desc.*/
  set PC0CM002.KUCCOID initialAttributes; /* company number*/
  set PC0CM002.KUMSTRID initialAttributes; /* store id*/
  set PC0CM002.XNXCD initialAttributes; /* department code*/
  set PC0CM002.PC2NAME initialAttributes; /* customer description*/
  set PC0CM002.TSCLOCCD initialAttributes; /* customer destination*/
  set PC0CM002.XXXCITY initialAttributes; /* destination description*/
  set PC0CM002.XCTCD initialAttributes; /* country code*/
  set PC0CM002.XCTDESC initialAttributes; /* country description*/
  set PC0CM002.PC0CMUCC initialAttributes; /* ultimate country*/
  set PC0CM002.PC0CMUCD initialAttributes; /* ultimate country description*/
  set PC0CM002.YSMXDV initialAttributes; /* division code*/
  set PC0CM002.YSMSMDSC initialAttributes; /* division description*/
  set PC0CM002.PC2INSEG initialAttributes; /* iseg code*/
  set PC0CM002.PC2SEGAB initialAttributes; /* iseg abrv*/
  set PC0CM002.PC2SEGDE initialAttributes; /* iseg desc*/
  set PC0CM002.XXXSTAT initialAttributes; /* status code*/
  set PC0CM002.PC0CMSDS initialAttributes; /* status description*/
  set PC0CM002.CATOAP initialAttributes; /* Commarea to application*/
  set PC0CM002.CAITEM initialAttributes; /* Commarea application data*/
  set PC0CM002.PO-DIR-SHP-ADJ-DY initialAttributes;

end // end PC0C230

// Verify the entered date
Function PC0C240()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWDEF = "N"; /* Initialize data entered flag*/

  if (PC0CM002.CAITEM > " ") /* Application data was entered*/
    set PC0CM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0CM002.XXXPRCNM = "PC0C240"; /* Process name*/
    exit stack;
  end

  if (converseVar.eventKey is pf9 /* If PF9 was pressed*/
   && PC0CW01.PC0CWCFM != "Y")    /* and add not confirmed*/
    PC0C241(); /* Validate input data*/
  else
    if (converseVar.eventKey is enter) /* If ENTER was pressed*/
      PC0C241(); /* Validate input data*/
    end
  end

end // end PC0C240

// Validate any input data
Function PC0C241()

   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWDEF = "Y"; /* Data has been entered*/

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID STATUS CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XXXSTAT > " ") /* If status code entered*/
    if (PC0CM002.XXXSTAT == "A") /* Status active*/
      PC0CM002.PC0CMSDS = "ACTIVE  ";
    else
      if (PC0CM002.XXXSTAT == "I") /* Status inactive*/
        PC0CM002.PC0CMSDS = "INACTIVE";
      else
        PC0CM002.PC0CMSDS = " "; /* Clear map description*/
        converseLib.validationFailed(37); /* Status invalid*/
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.XXXSTAT cursor, modified, bold;
      end
    end
  else
    PC0CM002.PC0CMSDS = " "; /* Clear map description*/
    converseLib.validationFailed(37); /* Status invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.XXXSTAT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE ENTRY OF ISEG DESCRIPTION*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2SEGDE == " ") /* If Iseg desc not entered*/
    converseLib.validationFailed(324); /* Iseg desc required*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2SEGDE cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE ENTRY OF ISEG ABBREVIATION*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2SEGAB == " ") /* If Iseg abrv not entered*/
    converseLib.validationFailed(324); /* Iseg abrv required*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2SEGAB cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID ISEG CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2INSEG == " ") /* If spec code not entered*/
    converseLib.validationFailed(324); /* Iseg code required*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2INSEG cursor, modified, bold;
  else
    VPRDCU03.XGPCD = PC0CM002.XGPCD; /* GPC code*/
    VPRDCU03.PC2INSEG = PC0CM002.PC2INSEG; /* Iseg code*/
    PC0CS17(); /* Select unique Iseg*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If Iseg found*/
      converseLib.validationFailed(325); /* Iseg already exists*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.PC2INSEG cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID ULTIMATE COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC0CMUCC > " ") /* If ultimate country code entered*/
    if (PC0CM002.PC0CMUCC in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];

      if (PC0CM002.PC0CMUCC == "USA")
        PC0CM002.YSMXDV = "10";
        YSMREC.YSMSUMCD = "10";
      else
        PC0CM002.YSMXDV = "20";
        YSMREC.YSMSUMCD = "20";
      end

      XSPCS02(); /* get division description*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0CM002.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        PC0CM002.YSMSMDSC = " ";
      end

    else
      PC0CM002.PC0CMUCD = " "; /* Clear description fields*/
      converseLib.validationFailed(49); /* country code invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.PC0CMUCC cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID DESTINATION CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.TSCLOCCD > " ") /* If destination code entered*/
    TSCREC.TSCLOCCD = PC0CM002.TSCLOCCD;

    PC0CS03(); /* Select trans. location row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0CM002.XXXCITY = TSCREC.XXXCITY; /* Load map fields*/
      PC0CM002.XCTCD = TSCREC.XCTCD;
      if (TSCREC.XCTCD in XCTTBL.XCTCD)
        PC0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end

      if (PC0CM002.PC0CMUCC == " ") /* Default*/
        PC0CM002.PC0CMUCC = TSCREC.XCTCD;
        PC0CM002.PC0CMUCD = PC0CM002.XCTDESC;

        if (PC0CM002.PC0CMUCC == "USA")
          PC0CM002.YSMXDV = "10";
          YSMREC.YSMSUMCD = "10";
        else
          PC0CM002.YSMXDV = "20";
          YSMREC.YSMSUMCD = "20";
        end

      end /* ===> default division*/

    else
      if (SQLCA.VAGen_SQLCODE == 100)
        PC0CM002.XXXCITY = " "; /* Clear description fields*/
        PC0CM002.XCTCD = " ";
        PC0CM002.XCTDESC = " ";
        converseLib.validationFailed(48); /* Location code invalid*/
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.TSCLOCCD cursor, modified, bold;
      end
    end
  else
    PC0CM002.XXXCITY = " "; /* Clear description fields*/
    PC0CM002.XCTCD = " ";
    PC0CM002.XCTDESC = " ";
    converseLib.validationFailed(48); /* location code invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.TSCLOCCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER NAME*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "N") /* Customer xref type is nike*/
    if (PC0CM002.PC2NAME == " ")
      converseLib.validationFailed(183); /* Data is required*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.PC2NAME cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE THE APAO FLAG.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC-PRDCU-APAO-FL != PC0CW03.PC-PRDCU-APAO-FL)
    if (PC0CM002.PC-PRDCU-APAO-FL in PC0CTBL.PC-PRDCU-APAO-FL)

      PC0CW03.PC-PRDCU-APAO-FL = PC0CM002.PC-PRDCU-APAO-FL;
      PC0CW01.PC0CWSWR = "Y"; /* Request for data*/

    else /* ===> code not in table*/

      converseLib.validationFailed(515); /* Status invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.PC-PRDCU-APAO-FL cursor, modified, bold;

    end
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER NUMBER FOR CUSTOMER/SCREENER XREF TYPE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "C" /* customer xref type*/
   || PC0CM002.YPCCD == "S") /* screener xref type*/
    if (PC0CM002.KUCCOID == 0
     && PC0CM002.KUMSTRID == 0
     && PC0CM002.XNXCD == 0)
      PC0CM002.PC2NAME = " "; /* Clear description fields*/
      converseLib.validationFailed(47); /* customer number invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.XNXCD cursor, modified, bold;
      set PC0CM002.KUMSTRID cursor, modified, bold;
      set PC0CM002.KUCCOID cursor, modified, bold;
    else
      VPRDCU03.XGPCD = PC0CM002.XGPCD;
      VPRDCU03.KUCCOID = PC0CM002.KUCCOID;
      VPRDCU03.KUMSTRID = PC0CM002.KUMSTRID;
      VPRDCU03.XNXCD = PC0CM002.XNXCD;
      VPRDCU03.PC-PRDCU-APAO-FL = PC0CM002.PC-PRDCU-APAO-FL;

      PC0CS11(); /* Select xref customer row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Customer xref exists*/
        PC0CM002.XXXPRCNM = "PC0C451"; /* Process name*/
        set PC0CM002.XNXCD cursor, modified, bold;
        set PC0CM002.KUMSTRID cursor, modified, bold;
        set PC0CM002.KUCCOID cursor, modified, bold;
        if (VPRDCU03.XXXSTAT == "A")
          converseLib.validationFailed(19); /* Duplicate of active entry*/
        else
          converseLib.validationFailed(20); /* Duplicate of inactive entry*/
        end
      else
        KUNREC.XGPCD = PC0CM002.XGPCD;
        KUNREC.KUCCOID = PC0CM002.KUCCOID;
        KUNREC.KUMSTRID = PC0CM002.KUMSTRID;
        KUNREC.XNXCD = PC0CM002.XNXCD;

        if (PC0CM002.XCTCD == "USA" /* USA Destination*/
         || PC0CM002.XCTCD == "CANA") /* CANA Destination*/

          KUMREC.KUCCOID = PC0CM002.KUCCOID;
          KUMREC.KUMSTRID = PC0CM002.KUMSTRID;

          if (PC0CM002.PC-PRDCU-APAO-FL == "E")
            PC0CS-0014(); /* Select the customer store row*/
          else
            PC0CS14(); /* Select the customer store row*/
          end

          if (SQLCA.VAGen_SQLCODE == 0)
            PC0CM002.PC2NAME = KUMREC.KUMSTRNM;
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              converseLib.validationFailed(47); /* Customer number invalid*/
              PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
              set PC0CM002.XNXCD cursor, modified, bold;
              set PC0CM002.KUMSTRID cursor, modified, bold;
              set PC0CM002.KUCCOID cursor, modified, bold;
            end
          end

        else /* NOT USA & CANA*/

          if (PC0CM002.PC-PRDCU-APAO-FL == "E")
            PC0CS-0009(); /* Select unique customer row*/
          else
            if (PC0CM002.PC-PRDCU-APAO-FL == "W")
              PC0CS-0019(); /* Verify warehoue;*/
            else
              PC0CS09(); /* Select unique customer row*/
            end
          end

          if (SQLCA.VAGen_SQLCODE == 0)
                 /* IF KUNREC.XXXSTAT EQ 'A';*/
            KUMREC.KUCCOID = PC0CM002.KUCCOID;
            KUMREC.KUMSTRID = PC0CM002.KUMSTRID;

            if (PC0CM002.PC-PRDCU-APAO-FL == "E")
              PC0CS-0014(); /* Select the customer store row*/
            else
              PC0CS14(); /* Select the customer store row*/
            end

            if (SQLCA.VAGen_SQLCODE == 0)
              PC0CM002.PC2NAME = KUMREC.KUMSTRNM;
            else
              if (SQLCA.VAGen_SQLCODE == 100)
                converseLib.validationFailed(47); /* Customer number invalid*/
                PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
                set PC0CM002.XNXCD cursor, modified, bold;
                set PC0CM002.KUMSTRID cursor, modified, bold;
                set PC0CM002.KUCCOID cursor, modified, bold;
              end
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              converseLib.validationFailed(47); /* customer does not exist*/
              PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
              set PC0CM002.XNXCD cursor, modified, bold;
              set PC0CM002.KUMSTRID cursor, modified, bold;
              set PC0CM002.KUCCOID cursor, modified, bold;
            end
          end
        end /* END IF USA/CANA*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* FOR USA/CANA DESTINATIONS, DEPT ID SHOULD BE ZERO*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "C" /* customer xref type*/
   || PC0CM002.YPCCD == "S") /* screener xref type*/
    if (PC0CM002.XCTCD == "USA" /* USA Destination*/
     || PC0CM002.XCTCD == "CANA") /* CANA Destination*/

      if (PC0CM002.XNXCD != 0) /* Dept should be zero for USA/CANA*/
        converseLib.validationFailed(588);
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.XNXCD cursor, modified, bold;
      else
        PC0CS-241(); /* query using gpc,co,store (NO DEPT)*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER NUMBER FOR NIKE XREF TYPE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "N") /* nike xref type*/
    if (PC0CM002.KUCCOID != 0
     || PC0CM002.KUMSTRID != 0
     || PC0CM002.XNXCD != 0)
      converseLib.validationFailed(182);
                                   /* customer number invalid for xref type*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.XNXCD cursor, modified, bold;
      set PC0CM002.KUMSTRID cursor, modified, bold;
      set PC0CM002.KUCCOID cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID CUSTOMER XREF TYPE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD > " ") /* If xref type code entered*/
    if (PC0CM002.YPCCD in YPCTBL.YPCCD
     && YPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    else
      PC0CM002.YPCSDESC = " "; /* Clear description fields*/
      converseLib.validationFailed(46); /* cust. xref type invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.YPCCD cursor, modified, bold;
    end
  else
    PC0CM002.YPCSDESC = " "; /* Clear description fields*/
    converseLib.validationFailed(46); /* cust. xref type invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.YPCCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID REFERENCE ID*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2REFID > " " /* If customer ref id entered*/
   && PC0CM002.YPCCD == "S")  /* cust xref type eq screener*/
    converseLib.validationFailed(244); /* cust ref id invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2REFID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID CUSTOMER XREF CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2CUXID == " ") /* If customer xref code entered*/
    converseLib.validationFailed(45); /* Cust. xref code invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2CUXID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER XREF CODE IF CUSTOMER XREF TYPE IS SCREEN*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "S")
    FY1REC.XGPCD = PC0CM002.XGPCD;
    FY1REC.FY1FCTYC = PC0CM002.PC2CUXID;

    PC0CS10(); /* Select unique factory*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT != "A")
        converseLib.validationFailed(180); /* customer xref code invalid*/
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.PC2CUXID cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(181); /* customer xref code invalid*/
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.PC2CUXID cursor, modified, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID GPC CODE*/
   /* ------------------------------------------------------------*/

  PC0CM001.XGPCD = PC0CM002.XGPCD; /* keep list screen current*/
  COMMAREA.XGPCD = PC0CM002.XGPCD; /* keep commarea current*/

  if (PC0CM002.XGPCD != " ") /* IF GPC CODE ENTERED*/
    if (PC0CM002.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      if (PC0CM002.XGPCD == "01"
       || PC0CM002.XGPCD == "02"
       || PC0CM002.XGPCD == "03"
       || PC0CM002.XGPCD == "07")
        PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
      else
        PC0CM002.XGPDESC = " "; /* Clear description fields*/
        converseLib.validationFailed(185); /* GPC code invalid*/
        PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
        set PC0CM002.XGPCD cursor, modified, bold;
      end
    else
      PC0CM002.XGPDESC = " "; /* Clear description fields*/
      converseLib.validationFailed(28); /* GPC code invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.XGPCD cursor, modified, bold;
    end
  else
    PC0CM002.XGPDESC = " "; /* Clear description fields*/
    converseLib.validationFailed(28); /* GPC code invalid*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.XGPCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID RTA DAY*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XGPCD == "02") /* IF GPC CODE is footwear*/
    if (PC0CM002.PCXCTRTA > -100
     && PC0CM002.PCXCTRTA < 100)

    else
      converseLib.validationFailed(526); /* GPC code invalid*/
      PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
      set PC0CM002.PCXCTRTA cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* VERIFY CUSTOMER XREF ROW DOES NOT EXIST*/
   /* ------------------------------------------------------------*/

  VPRDCU03.XGPCD = PC0CM002.XGPCD; /* Verify if customer*/
  VPRDCU03.PC2CUXID = PC0CM002.PC2CUXID; /* already exists*/

  PC0CS16(); /* Select unique customer xref row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Selected row found*/
    PC0CM002.XXXPRCNM = "PC0C241"; /* Process name*/
    set PC0CM002.PC2CUXID cursor, modified, bold;
    set PC0CM002.XGPCD cursor, modified, bold;
    if (VPRDCU03.XXXSTAT == "A") /* Status active*/
      converseLib.validationFailed(19); /* duplicate of active entry*/
    else
      converseLib.validationFailed(20); /* duplicate of inactive entry*/
    end
  end

end // end PC0C241

// Add customer xref
Function PC0C250()

   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the style/color*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/

    if (PC0CW01.PC0CWCFM != "Y") /* If add not confirmed*/
      PC0CW01.PC0CWCFM = "Y"; /* set confirmation flag*/
      converseLib.validationFailed(328); /* ; use pf9 to add cust xref*/
      exit stack;
    else
      PC0CW01.PC0CWCFM = "N"; /* Reset confirmation flag*/
    end

    if (converseVar.eventKey is pf9) /* If add request*/

      set VPRDCU03 empty; /* clear records*/

      XX0XS01(); /* Obtain current time*/

      VPRDCU03.ZZZSDT = XX0XW01.XX0XWDAT;
      VPRDCU03.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPRDCU03.ZZZCHGTM = XX0XW01.XX0XWTIM;
      VPRDCU03.XGPCD = PC0CM002.XGPCD; /* gpc code*/
      VPRDCU03.KUCCOID = PC0CM002.KUCCOID; /* company code*/
      VPRDCU03.KUMSTRID = PC0CM002.KUMSTRID; /* store id*/
      VPRDCU03.XNXCD = PC0CM002.XNXCD; /* dept nbr*/
      VPRDCU03.PC2CUXID = PC0CM002.PC2CUXID;
      VPRDCU03.YPCCD = PC0CM002.YPCCD;
      VPRDCU03.PC2NAME = PC0CM002.PC2NAME;
      VPRDCU03.TSCLOCCD = PC0CM002.TSCLOCCD;
      if (PC0CM002.PC0CMUCC == " ")
        VPRDCU03.XCTCD = PC0CM002.TSCLOCCD;
        PC0CM002.PC0CMUCC = PC0CM002.TSCLOCCD;
      else
        VPRDCU03.XCTCD = PC0CM002.PC0CMUCC;
      end
      VPRDCU03.YSMXDV = PC0CM002.YSMXDV;
      VPRDCU03.PC2INSEG = PC0CM002.PC2INSEG;
      VPRDCU03.PC2SEGAB = PC0CM002.PC2SEGAB;
      VPRDCU03.PC2SEGDE = PC0CM002.PC2SEGDE;
      VPRDCU03.PC-PRDCU-APAO-FL = PC0CM002.PC-PRDCU-APAO-FL;
      VPRDCU03.XWHCD = PC0CM002.XWHCD;
      VPRDCU03.PC2REFID = PC0CM002.PC2REFID;
      VPRDCU03.XXXSTAT = PC0CM002.XXXSTAT;
      VPRDCU03.PO-DIR-SHP-ADJ-DY = PC0CM002.PO-DIR-SHP-ADJ-DY;
      if (PC0CM002.XGPCD == "02")
        VPRDCU03.XCTRTADY = PC0CM002.PCXCTRTA;
      end

      PC0CS12(); /* Add customer xref record*/

      if (SQLCA.VAGen_SQLCODE == 0)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* Commit any updates*/
        PC0CW01.PC0CWSWR = "Y"; /* set request for data*/
        PC0CW01.PC0CWMFL = "Y"; /* set message flag*/
        converseLib.validationFailed(1); /* Update successfull*/
      else
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back any updates*/
      end
    else
      PC0CW01.PC0CWBYF = "Y"; /* Bypass reload of screen*/
    end
  end

end // end PC0C250

// customer xref inquiry map
Function PC0C300()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0C310(); /* Format and display the map*/

  PC0C320(); /* Check attention identifier*/

  PC0C330(); /* Reset fields to normal intensity*/

  PC0C340(); /* Verify the entered data*/

end // end PC0C300

// Format and display the map
Function PC0C310()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0CW01.PC0CWBYF == "N")          /* do not bypass processing*/
    set PC0CM002 initial; /* Clear map output area*/
    PC0CM002.XGPCD = PC0CW02.XGPCD[PC0CWIXM];
    if (PC0CW02.XGPCD[PC0CWIXM] in XGPTBL.XGPCD)
      PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end

    PC0CM002.PC2CUXID = PC0CW02.PC2CUXID[PC0CWIXM]; /* cust xref code*/
    PC0CM002.YPCCD = PC0CW02.YPCCD[PC0CWIXM]; /* xref type*/
    if (PC0CW02.YPCCD[PC0CWIXM] in YPCTBL.YPCCD)
      PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    end
    PC0CM002.PC-PRDCU-APAO-FL = PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM];
    PC0CM002.PO-DIR-SHP-ADJ-DY = PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM];
    PC0CM002.XWHCD = PC0CW02.XWHCD[PC0CWIXM]; /* warehouse*/
    PC0CM002.PC2REFID = PC0CW02.PC2REFID[PC0CWIXM]; /* cust xref id*/
    PC0CM002.PCXCTRTA = PC0CW02.PCXCTRTA[PC0CWIXM]; /* rta day*/

    PC0CM002.KUCCOID = PC0CW02.KUCCOID[PC0CWIXM]; /* company nbr*/
    PC0CM002.KUMSTRID = PC0CW02.KUMSTRID[PC0CWIXM]; /* store id*/
    PC0CM002.XNXCD = PC0CW02.XNXCD[PC0CWIXM]; /* dept nbr*/
    PC0CM002.PC2NAME = PC0CW02.PC2NAME[PC0CWIXM]; /* customer desc.*/

    PC0CM002.TSCLOCCD = PC0CW02.TSCLOCCD[PC0CWIXM]; /* destination*/
    PC0CM002.XXXCITY = PC0CW02.XXXCITY[PC0CWIXM];
                                   /* destination desc.*/
    PC0CM002.XCTCD = PC0CW02.XCTCD[PC0CWIXM]; /* country code*/
    if (PC0CW02.XCTCD[PC0CWIXM] in XCTTBL.XCTCD)
      PC0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PC0CM002.PC0CMUCC = PC0CW02.PC0CMUCC[PC0CWIXM]; /* ult.cnty code*/
    if (PC0CW02.PC0CMUCC[PC0CWIXM] in XCTTBL.XCTCD)
      PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PC0CM002.YSMXDV = PC0CW02.YSMXDV[PC0CWIXM]; /* division code*/
    YSMREC.YSMSUMCD = PC0CW02.YSMXDV[PC0CWIXM]; /* division code*/
    XSPCS02();
    if (SQLCA.VAGen_SQLCODE == 0)
      PC0CM002.YSMSMDSC = YSMREC.YSMSMDSC; /* load description*/
    else
      PC0CM002.YSMSMDSC = " "; /* clear description*/
    end

    PC0CM002.PC2INSEG = PC0CW02.PC2INSEG[PC0CWIXM]; /* iseg code*/
    PC0CM002.PC2SEGAB = PC0CW02.PC2SEGAB[PC0CWIXM]; /* iseg abrv*/
    PC0CM002.PC2SEGDE = PC0CW02.PC2SEGDE[PC0CWIXM]; /* iseg desc*/

    PC0CM002.XXXSTAT = PC0CW02.XXXSTAT[PC0CWIXM]; /* status code*/
    if (PC0CW02.XXXSTAT[PC0CWIXM] == "A")
      PC0CM002.PC0CMSDS = "ACTIVE  "; /* status description*/
    else
      if (PC0CW02.XXXSTAT[PC0CWIXM] == "I")
        PC0CM002.PC0CMSDS = "INACTIVE"; /* status description*/
      end
    end

    set PC0CM002.CATOAP cursor; /* Position cursor*/
    PC0CW01.PC0CWLIX = PC0CW01.PC0CWIXM; /* save to position cursor*/
    PC0CW02.PC0CMSEL[PC0CWIXM] = "V";

    PC0CS15(); /* update temp storage*/

  end

  PC0CM002.PC0CMFNC = "INQUIRY"; /* Move inquiry literal to map*/
  PC0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC0CM002.XGPCD == "02")
    set PC0CM002.PCRTADAY skip; /* display rta day literal*/
    set PC0CM002.PCXCTRTA skip; /* display rta day field*/
  end

  set PC0CM002.XGPCD protect; /* Gpc code*/
  set PC0CM002.PC2CUXID protect; /* customer xref code*/
  set PC0CM002.YPCCD protect; /* xref type code*/
  set PC0CM002.KUCCOID protect; /* company nbr*/
  set PC0CM002.KUMSTRID protect; /* store id*/
  set PC0CM002.XNXCD protect; /* dept nbr*/
  set PC0CM002.PC2NAME protect; /* customer name*/
  set PC0CM002.TSCLOCCD protect; /* destination code*/
  set PC0CM002.PC0CMUCC protect; /* ultimate country code*/
  set PC0CM002.YSMXDV protect; /* division code*/
  set PC0CM002.PC2INSEG protect; /* iseg code*/
  set PC0CM002.PC2SEGAB protect; /* iseg abrv*/
  set PC0CM002.PC2SEGDE protect; /* iseg desc*/
  set PC0CM002.XXXSTAT protect; /* status code*/
  set PC0CM002.XWHCD protect; /* dept nbr*/
  set PC0CM002.PO-DIR-SHP-ADJ-DY protect;
  set PC0CM002.PC-PRDCU-APAO-FL skip;

  if (PC0CM002.XGPCD == "02")
    set PC0CM002.PC0CMSSR skip; /* display ss reference literal*/
    set PC0CM002.PC2REFID skip; /* display ss reference field*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PC0CM002 alarm; /* sound the alarm*/
  end


  converse PC0CM002 ;

  PC0CW01.PC0CWPSW = "N"; /* Initialize problem switch*/
  PC0CW01.PC0CWBYF = "N"; /* Initialize bypass processing flag*/

end // end PC0C310

// Check attention identifier
Function PC0C320()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* PA2 - Refresh screen pc0cm002*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh screen*/
    PC0CW01.PC0CWBYF = "Y"; /* bypass reload*/
    return; /* exit to redisplay map*/
  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0CS01(); /* purge temp storage*/

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0CM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0CM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0CW01.PC0CWPSW = "Y"; /* Set error switch*/
      PC0CW01.PC0CWMAP = 1; /* display list screen*/
      PC0CM001.XXXPRCNM = "PC0C320"; /* Process name*/

      exit stack; /* Exit to display list screen*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      set PC0CM002.CATOAP cursor, modified, bold; /* Highlight*/
      PC0CM002.XXXPRCNM = "PC0C320"; /* Process name*/

      return; /* Exit to redisplay screen*/

    end

  end
   /* ------------------------------------------------------------*/
   /* PF3 - Return to customer xref list screen pc0cm001*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0CW01.PC0CWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* pf6 - Transfer to location inq/maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* pf6 was pressed*/

    PC0CS01(); /* purge temp storage*/

    COMMAREA.CATOAP = "TS0O"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWPSW = "Y"; /* Set error switch*/
    PC0CW01.PC0CWMAP = 1; /* display list screen*/
    PC0CM001.XXXPRCNM = "PC0C320"; /* Process name*/

    exit stack; /* Exit to display list screen*/

  end


   /* ------------------------------------------------------------*/
   /* PF1 - Transfer to help screen*/
   /* PF4 - Transfer to main P.O. menu*/
   /* PF5 - Transfer to fymn menu*/
   /* PF6 - Transfer to ts0o location inq/maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0CM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0CS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWMAP = 1; /* reset map*/
    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CM001.XXXPRCNM = "PC0C320"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate invalid key has been pressed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0CM002.XXXPRCNM = "PC0C320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0CW01.PC0CWBYF = "Y"; /* bypass reload*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0C320

// Reset highlighted fields
Function PC0C330()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0CM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0CM002.XGPDESC initialAttributes; /* Gpc desc.*/
  set PC0CM002.PC2CUXID initialAttributes; /* customer xref code*/
  set PC0CM002.YPCCD initialAttributes; /* xref type code*/
  set PC0CM002.YPCSDESC initialAttributes; /* xref type code description*/
  set PC0CM002.KUCCOID initialAttributes; /* company code*/
  set PC0CM002.KUMSTRID initialAttributes; /* store id*/
  set PC0CM002.XNXCD initialAttributes; /* department code*/
  set PC0CM002.TSCLOCCD initialAttributes; /* destination code*/
  set PC0CM002.XXXCITY initialAttributes; /* destination description*/
  set PC0CM002.XCTCD initialAttributes; /* country code*/
  set PC0CM002.XCTDESC initialAttributes; /* country description*/
  set PC0CM002.PC0CMUCC initialAttributes; /* ultimate country code*/
  set PC0CM002.PC0CMUCD initialAttributes; /* ultimate country code description*/
  set PC0CM002.YSMXDV initialAttributes; /* division code*/
  set PC0CM002.YSMSMDSC initialAttributes; /* division description*/
  set PC0CM002.PC2INSEG protect; /* iseg code*/
  set PC0CM002.PC2SEGAB protect; /* iseg abrv*/
  set PC0CM002.PC2SEGDE protect; /* iseg desc*/
  set PC0CM002.XXXSTAT initialAttributes; /* status code*/
  set PC0CM002.PC0CMSDS initialAttributes; /* status description*/
  set PC0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0CM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0C330

// Verify the entered data
Function PC0C340()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWDEF = "N"; /* Initialize data entered flag*/

  if (PC0CM002.CAITEM > " ") /* Application data was entered*/
    set PC0CM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0CM002.XXXPRCNM = "PC0C340"; /* Process name*/

    return;

  end

end // end PC0C340

// customer xref change map
Function PC0C400()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0C410(); /* Format and display the map*/

  PC0C420(); /* Check attention identifier*/

  PC0C430(); /* Reset Highlighted fields*/

  PC0C440(); /* Verify the entered data*/

  PC0C450(); /* Process valid input request*/


end // end PC0C400

// Format and display the map
Function PC0C410()

   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && PC0CW01.PC0CWBYF == "N")          /* do not bypass processing*/
    set PC0CM002 initial; /* Clear map output area*/
    PC0CM002.XGPCD = PC0CW02.XGPCD[PC0CWIXM];
    if (PC0CW02.XGPCD[PC0CWIXM] in XGPTBL.XGPCD)
      PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end

    PC0CM002.PC2CUXID = PC0CW02.PC2CUXID[PC0CWIXM]; /* cust xref code*/
    PC0CM002.YPCCD = PC0CW02.YPCCD[PC0CWIXM]; /* xref type*/
    if (PC0CW02.YPCCD[PC0CWIXM] in YPCTBL.YPCCD)
      PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    end
    PC0CM002.PC-PRDCU-APAO-FL = PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM];
    PC0CM002.PO-DIR-SHP-ADJ-DY = PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM];
    PC0CM002.XWHCD = PC0CW02.XWHCD[PC0CWIXM]; /* warehouse*/
    PC0CM002.PC2REFID = PC0CW02.PC2REFID[PC0CWIXM]; /* ref type id*/
    PC0CM002.PCXCTRTA = PC0CW02.PCXCTRTA[PC0CWIXM]; /* rta day*/

    PC0CM002.KUCCOID = PC0CW02.KUCCOID[PC0CWIXM]; /* company nbr*/
    PC0CM002.KUMSTRID = PC0CW02.KUMSTRID[PC0CWIXM]; /* store id*/
    PC0CM002.XNXCD = PC0CW02.XNXCD[PC0CWIXM]; /* dept nbr*/
    PC0CM002.PC2NAME = PC0CW02.PC2NAME[PC0CWIXM]; /* customer desc.*/

    PC0CM002.TSCLOCCD = PC0CW02.TSCLOCCD[PC0CWIXM]; /* destination*/
    PC0CM002.XXXCITY = PC0CW02.XXXCITY[PC0CWIXM];
                                   /* destination desc.*/
    PC0CM002.XCTCD = PC0CW02.XCTCD[PC0CWIXM]; /* country code*/
    if (PC0CW02.XCTCD[PC0CWIXM] in XCTTBL.XCTCD)
      PC0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PC0CM002.PC0CMUCC = PC0CW02.PC0CMUCC[PC0CWIXM]; /* ult.cnty code*/
    if (PC0CW02.PC0CMUCC[PC0CWIXM] in XCTTBL.XCTCD)
      PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    PC0CM002.YSMXDV = PC0CW02.YSMXDV[PC0CWIXM]; /* division code*/
    YSMREC.YSMSUMCD = PC0CW02.YSMXDV[PC0CWIXM];
    XSPCS02();
    if (SQLCA.VAGen_SQLCODE == 0)
      PC0CM002.YSMSMDSC = YSMREC.YSMSMDSC;
    else
      PC0CM002.YSMSMDSC = " ";
    end

    PC0CM002.PC2INSEG = PC0CW02.PC2INSEG[PC0CWIXM]; /* iseg code*/
    PC0CM002.PC2SEGAB = PC0CW02.PC2SEGAB[PC0CWIXM]; /* iseg abrv*/
    PC0CM002.PC2SEGDE = PC0CW02.PC2SEGDE[PC0CWIXM]; /* iseg desc*/

    PC0CM002.XXXSTAT = PC0CW02.XXXSTAT[PC0CWIXM]; /* status code*/
    if (PC0CW02.XXXSTAT[PC0CWIXM] == "A")
      PC0CM002.PC0CMSDS = "ACTIVE  "; /* status description*/
    else
      if (PC0CW02.XXXSTAT[PC0CWIXM] == "I")
        PC0CM002.PC0CMSDS = "INACTIVE"; /* status description*/
      end
    end

    set PC0CM002.YPCCD cursor; /* Position cursor*/

    PC0CW01.PC0CWLIX = PC0CW01.PC0CWIXM; /* Last row viewed*/
    PC0CW02.PC0CMSEL[PC0CWIXM] = "V";

    PC0CS15(); /* update temp storage*/

  end

  PC0CM002.PC0CMFNC = "CHANGE "; /* Move inquiry literal to map*/
  PC0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PC0CM002.XGPCD == "02")
    set PC0CM002.PCRTADAY skip; /* display rta day literal*/
    set PC0CM002.PCXCTRTA modified; /* display rta day field*/
  end

  if (PC0CM002.XGPCD == "02")
    set PC0CM002.PC0CMSSR skip; /* display ss reference literal*/
    set PC0CM002.PC2REFID modified; /* allow update*/
  end

  if (PC0CM002.YPCCD == "C" /* do not allow update*/
   || PC0CM002.YPCCD == "S") /* for these types*/
    set PC0CM002.PC2NAME protect;
  else
    set PC0CM002.PC2NAME modified;
  end

  set PC0CM002.XGPCD protect; /* Gpc code*/
  set PC0CM002.PC2CUXID protect; /* customer xref code*/
  set PC0CM002.PC2INSEG protect; /* iseg code*/
  if (PC0CM002.XXXSTAT == "I") /* inactive protect all fields*/
    set PC0CM002.YPCCD protect; /* xref type code*/
    set PC0CM002.KUCCOID protect; /* company nbr*/
    set PC0CM002.KUMSTRID protect; /* store id*/
    set PC0CM002.XNXCD protect; /* dept nbr*/
    set PC0CM002.PC2NAME protect; /* customer name*/
    set PC0CM002.TSCLOCCD protect; /* destination code*/
    set PC0CM002.PC0CMUCC protect; /* ultimate country code*/
    set PC0CM002.PC2SEGAB protect; /* iseg abrv*/
    set PC0CM002.PC2SEGDE protect; /* iseg desc*/
    set PC0CM002.YSMXDV protect; /* division code*/
    set PC0CM002.PC-PRDCU-APAO-FL skip; /* Display apao flag*/
    set PC0CM002.XWHCD protect; /* warehouse*/
    set PC0CM002.PO-DIR-SHP-ADJ-DY protect;
    set PC0CM002.XXXSTAT cursor; /* Position cursor*/
    if (PC0CM002.XGPCD == "02")
      set PC0CM002.PC2REFID skip; /* display/protect ss ref field*/
      set PC0CM002.PCXCTRTA skip; /* display/protect ss ref field*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set PC0CM002 alarm; /* sound the alarm*/
  end

  if (PC0CW01.PC0CWMFL == "Y")
    converseLib.validationFailed(1);
    PC0CM002.XXXPRCNM = "PC0C410";
    PC0CW01.PC0CWMFL = "N";
  end

  converse PC0CM002 ;

  PC0CW01.PC0CWPSW = "N"; /* Initialize problem switch*/
  PC0CW01.PC0CWBYF = "N"; /* Initialize bypass processing flag*/

  if (converseVar.eventKey is enter)
    PC0C411(); /* check for ? inquiry by user*/
  end

end // end PC0C410

// Check for ? inquiry by user
Function PC0C411()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (PC0CM002.XGPCD == "?"
   || PC0CM002.YPCCD == "?"
   || PC0CM002.PC0CMUCC == "?"
   || PC0CM002.PC-PRDCU-APAO-FL == "?")

    /* *************************************************************/
     /* Check gpc code for '?'*/
    /* *************************************************************/

    if (PC0CM002.XGPCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        PC0CM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.XGPCD = PC0CW02.XGPCD[PC0CWIXM];
        if (PC0CW02.XGPCD[PC0CWIXM] in XGPTBL.XGPCD)
          PC0CM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        end
      end

      set PC0CM002.XGPCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check customer xref type code for ?*/
    /* *************************************************************/

    if (PC0CM002.YPCCD == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               XREF TYPE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPC01(); /* perform customer xref window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xref type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.YPCCD = YPCTBL.YPCCD[XX0XWPIX]; /* move code*/
        PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.YPCCD = PC0CW02.YPCCD[PC0CWIXM];
        if (PC0CW02.YPCCD[PC0CWIXM] in YPCTBL.YPCCD)
          PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
        end
      end

      set PC0CM002.YPCCD cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check ultimate country code for ?*/
    /* *************************************************************/

    if (PC0CM002.PC0CMUCC == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY  "; /* heading*/

      XCTTBL.XCTCD = PC0CM002.PC0CMUCC;
      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ultimate   **/
       /* *  country table code and description to the map.       **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.PC0CMUCC = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      else
        PC0CM002.PC0CMUCC = PC0CW02.PC0CMUCC[PC0CWIXM];
        if (PC0CW02.PC0CMUCC[PC0CWIXM] in XCTTBL.XCTCD)
          PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end
      end

      set PC0CM002.PC0CMUCC cursor; /* set cursor*/

    end

    /* *************************************************************/
     /* Check Customer Process Incidator of '?'*/
    /* *************************************************************/

    if (PC0CM002.PC-PRDCU-APAO-FL == "?") /* if any ? entered*/

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "     CUSTOMER PROCESS IND  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPPC040(); /* perform  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0CM002.PC-PRDCU-APAO-FL = PC0CTBL.PC-PRDCU-APAO-FL[XX0XWPIX]; /* move code*/
      else
        PC0CM002.PC-PRDCU-APAO-FL = "N"; /* move code*/
      end

      set PC0CM002.PC-PRDCU-APAO-FL cursor; /* set cursor*/

    end


    converseLib.clearScreen();

    PC0CW01.PC0CWBYF = "Y";

  end


end // end PC0C411

// Check attention identifier
Function PC0C420()

   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear the map fields*/
    PC0CW01.PC0CWBYF = "Y"; /* bypass reload of screen*/

    return; /* redisplay screen*/

  end

   /* ------------------------------------------------------------*/
   /* Fast Path - Transfer to user requested application*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0CS01();

      COMMAREA.CAUSERA = " "; /* init commarea*/
      PCWREC.CAUSERA = " "; /* init pcwrec*/
      COMMAREA.CATOAP = PC0CM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PC0CM002.CAITEM; /* Application data*/

      XSPCS01(); /* Exit to another application*/

      PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
      PC0CW01.PC0CWMAP = 1; /* set map switch*/
      PC0CM001.XXXPRCNM = "PC0C420"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

      PC0CM002.XXXPRCNM = "PC0C420"; /* Process name*/
      set PC0CM002.CATOAP cursor, modified, bold; /* Highlight*/

      return; /* Exit to redisplay map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* PF3 - return to customer xref list screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    PC0CW01.PC0CWMAP = "1"; /* Move to map 1*/

    exit stack; /* Exit to redisplay list screen*/

  end

   /* ------------------------------------------------------------*/
   /* pf6 - Transfer to location inq/maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* pf6 was pressed*/

    PC0CS01();

    COMMAREA.CATOAP = "TS0O"; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/
    PC0CW01.PC0CWMAP = 1; /* set map switch*/
    PC0CM001.XXXPRCNM = "PC0C420"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* PF1 - transfer to help screen*/
   /* PF4 - transfer to p.o. menu*/
   /* PF5 - transfer to fy0m menu*/
   /* PF6 - transfer to location inq/maint*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "PC0CM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    PC0CS01(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    PC0CW01.PC0CWMAP = 1; /* reset map*/
    PC0CM001.XXXPRCNM = "PC0C420"; /* Process name*/
    PC0CW01.PC0CWPSW = "Y"; /* set problem switch*/

    exit stack; /* Exit to redisplay map*/

  end

   /* ------------------------------------------------------------*/
   /* If invalid key display message*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    PC0CM002.XXXPRCNM = "PC0C420"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      PC0CW01.PC0CWBYF = "Y"; /* bypass reload of screen*/
    end

    return; /* Exit to redisplay map*/

  end


end // end PC0C420

// Reset highlighted fields
Function PC0C430()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0CM002.XGPCD initialAttributes; /* Gpc code*/
  set PC0CM002.XGPDESC initialAttributes; /* Gpc desc.*/
  set PC0CM002.PC2CUXID initialAttributes; /* customer xref code*/
  set PC0CM002.YPCCD initialAttributes; /* xref type code*/
  set PC0CM002.YPCSDESC initialAttributes; /* xref type code description*/
  set PC0CM002.KUCCOID initialAttributes; /* company code*/
  set PC0CM002.KUMSTRID initialAttributes; /* store id*/
  set PC0CM002.XNXCD initialAttributes; /* department code*/
  set PC0CM002.TSCLOCCD initialAttributes; /* destination code*/
  set PC0CM002.XXXCITY initialAttributes; /* destination description*/
  set PC0CM002.XCTCD initialAttributes; /* country code*/
  set PC0CM002.XCTDESC initialAttributes; /* country description*/
  set PC0CM002.PC0CMUCC initialAttributes; /* ultimate country code*/
  set PC0CM002.PC0CMUCD initialAttributes; /* ultimate country code description*/
  set PC0CM002.YSMXDV initialAttributes; /* division code*/
  set PC0CM002.YSMSMDSC initialAttributes; /* division description*/
  set PC0CM002.PC2INSEG protect; /* iseg code*/
  set PC0CM002.PC2SEGAB initialAttributes; /* iseg abrv*/
  set PC0CM002.PC2SEGDE initialAttributes; /* iseg desc*/
  set PC0CM002.XXXSTAT initialAttributes; /* status code*/
  set PC0CM002.PC0CMSDS initialAttributes; /* status description*/
  set PC0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0CM002.CAITEM initialAttributes; /* Commarea application data*/
  set PC0CM002.PO-DIR-SHP-ADJ-DY initialAttributes;

end // end PC0C430

// Verify the entered data
Function PC0C440()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWDEF = "N"; /* Initialize data entered flag*/

  if (PC0CM002.CAITEM > " ") /* Application data was entered*/
    set PC0CM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PC0CM002.XXXPRCNM = "PC0C440"; /* Process name*/

    return;

  end

  if (PC0CM002.KUCCOID == PC0CW02.KUCCOID[PC0CWIXM]
   && PC0CM002.KUMSTRID == PC0CW02.KUMSTRID[PC0CWIXM]
   && PC0CM002.XNXCD == PC0CW02.XNXCD[PC0CWIXM]
   && PC0CM002.YPCCD == PC0CW02.YPCCD[PC0CWIXM]
   && PC0CM002.TSCLOCCD == PC0CW02.TSCLOCCD[PC0CWIXM]
   && PC0CM002.PC0CMUCC == PC0CW02.PC0CMUCC[PC0CWIXM]
   && PC0CM002.PC2INSEG == PC0CW02.PC2INSEG[PC0CWIXM]
   && PC0CM002.PC2SEGAB == PC0CW02.PC2SEGAB[PC0CWIXM]
   && PC0CM002.PC2SEGDE == PC0CW02.PC2SEGDE[PC0CWIXM]
   && PC0CM002.PC2REFID == PC0CW02.PC2REFID[PC0CWIXM]
   && PC0CM002.PCXCTRTA == PC0CW02.PCXCTRTA[PC0CWIXM]
   && PC0CM002.PC-PRDCU-APAO-FL == PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM]
   && PC0CM002.PO-DIR-SHP-ADJ-DY == PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM]
   && PC0CM002.XWHCD == PC0CW02.XWHCD[PC0CWIXM]
   && PC0CM002.XXXSTAT == PC0CW02.XXXSTAT[PC0CWIXM]
   && PC0CM002.PC2NAME == PC0CW02.PC2NAME[PC0CWIXM])

    return; /* Exit to redisplay map*/

  else
    PC0C441(); /* Validate input data*/
  end

end // end PC0C440

// Validate any input data
Function PC0C441()

   /* ------------------------------------------------------------*/
   /* VALIDATE ANY INPUT DATA.*/
   /* IF ANY ERRORS WERE FOUND, EXIT TO REDISPLAY THE MAP.*/
   /* ------------------------------------------------------------*/

  PC0CW01.PC0CWDEF = "Y"; /* Data has been entered*/

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID STATUS CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XXXSTAT > " ") /* If status code entered*/
    if (PC0CM002.XXXSTAT == "A") /* Status active*/
      PC0CM002.PC0CMSDS = "ACTIVE  ";
    else
      if (PC0CM002.XXXSTAT == "I") /* Status inactive*/
        PC0CM002.PC0CMSDS = "INACTIVE";
      else
        PC0CM002.PC0CMSDS = " "; /* clear description fields*/
        converseLib.validationFailed(37); /* Status invalid*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.XXXSTAT cursor, modified, bold;
      end
    end
  else
    PC0CM002.PC0CMSDS = " "; /* Clear description field*/
    converseLib.validationFailed(37); /* Status invalid*/
    PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
    set PC0CM002.XXXSTAT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID ULTIMATE COUNTRY CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC0CMUCC > " ") /* If ultimate ctry code entered*/

    if (PC0CM002.PC0CMUCC in XCTTBL.XCTCD
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];

      if (PC0CM002.PC0CMUCC == "USA")
        PC0CM002.YSMXDV = "10";
        YSMREC.YSMSUMCD = "10";
      else
        PC0CM002.YSMXDV = "20";
        YSMREC.YSMSUMCD = "20";
      end

      XSPCS02(); /* get division description*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PC0CM002.YSMSMDSC = YSMREC.YSMSMDSC;
      else
        PC0CM002.YSMSMDSC = " ";
      end

    else
      PC0CM002.PC0CMUCD = " "; /* Clear description field*/
      converseLib.validationFailed(49); /* Country code invalid*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.PC0CMUCC cursor, modified, bold;
    end
  else
    PC0CM002.PC0CMUCD = " "; /* Clear description field*/
  end

   /* ------------------------------------------------------------*/
   /* CHECK FOR A VALID DESTINATION CODE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.TSCLOCCD > " ") /* If destination code entered*/
    TSCREC.TSCLOCCD = PC0CM002.TSCLOCCD;

    PC0CS03(); /* Select trans. location row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0CM002.XXXCITY = TSCREC.XXXCITY; /* Load map fields*/
      PC0CM002.XCTCD = TSCREC.XCTCD;
      if (TSCREC.XCTCD in XCTTBL.XCTCD)
        PC0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end

      if (PC0CM002.PC0CMUCC == " ") /* Default to tras. loc*/
        PC0CM002.PC0CMUCC = TSCREC.XCTCD;
        PC0CM002.PC0CMUCD = PC0CM002.XCTDESC;

        if (PC0CM002.PC0CMUCC == "USA")
          PC0CM002.YSMXDV = "10";
          YSMREC.YSMSUMCD = "10";
        else
          PC0CM002.YSMXDV = "20";
          YSMREC.YSMSUMCD = "20";
        end

      end /* Default to tras. loc*/

    else

      if (SQLCA.VAGen_SQLCODE == 100)
        PC0CM002.XXXCITY = " "; /* Clear description fields*/
        PC0CM002.XCTCD = " ";
        PC0CM002.XCTDESC = " ";
        converseLib.validationFailed(48); /* Location code invalid*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.TSCLOCCD cursor, modified, bold;
      end
    end
  else
    PC0CM002.XXXCITY = " "; /* Clear description fields*/
    PC0CM002.XCTCD = " ";
    PC0CM002.XCTDESC = " ";
    converseLib.validationFailed(48); /* location code invalid*/
    PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
    set PC0CM002.TSCLOCCD cursor, modified, bold;
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER NUMBER FOR CUSTOMER XREF TYPE NIKE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "N") /* nike xref type*/
    if (PC0CW02.YPCCD != "N")
      PC0CM002.KUCCOID = 0; /* Clear customer number*/
      PC0CM002.KUMSTRID = 0; /* Clear customer number*/
      PC0CM002.XNXCD = 0; /* Clear customer number*/
    else
      if (PC0CM002.KUCCOID > 0
       || PC0CM002.KUMSTRID > 0
       || PC0CM002.XNXCD > 0)
        converseLib.validationFailed(182);
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.XNXCD cursor, modified, bold;
        set PC0CM002.KUMSTRID cursor, modified, bold;
        set PC0CM002.KUCCOID cursor, modified, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF TYPE EQUALS NIKE THE CUSTOMER DESCRIPTION*/
   /* MUST BE ENTERED.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "N") /* nike xref type*/
    if (PC0CM002.PC2NAME != " ")
      if (PC0CW02.YPCCD[PC0CWIXM] != "N") /* previous value c or s*/
        if (PC0CM002.PC2NAME not modified)
          converseLib.validationFailed(184); /* Customer name invalid*/
          PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
          set PC0CM002.PC2NAME cursor, modified, bold;
        else
          set PC0CM002.PC2NAME modified;
        end
      end
    else
      converseLib.validationFailed(183); /* Customer name invalid*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.PC2NAME cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* IF XREF TYPE EQUALS CUSTOMER/SCREENER THE CUSTOMER NUMBER*/
   /* IS REQUIRED.  IF XREF TYPE EQUALS NIKE THE CUSTOMER NUMBER*/
   /* MUST BE EQUAL ZEROS.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "C" /* customer xref type*/
   || PC0CM002.YPCCD == "S") /* screener xref type*/
    if (PC0CM002.KUCCOID == 0
     && PC0CM002.KUMSTRID == 0
     && PC0CM002.XNXCD == 0)
      PC0CM002.PC2NAME = " "; /* Clear customer name*/
      converseLib.validationFailed(47);
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.XNXCD cursor, modified, bold;
      set PC0CM002.KUMSTRID cursor, modified, bold;
      set PC0CM002.KUCCOID cursor, modified, bold;
    else
      KUNREC.XGPCD = PC0CM002.XGPCD;
      KUNREC.KUCCOID = PC0CM002.KUCCOID;
      KUNREC.KUMSTRID = PC0CM002.KUMSTRID;
      KUNREC.XNXCD = PC0CM002.XNXCD;

      if (PC0CM002.XCTCD == "USA" /* USA Destination*/
       || PC0CM002.XCTCD == "CANA") /* CANA Destination*/

        KUMREC.KUCCOID = PC0CM002.KUCCOID; /* get cust. name*/
        KUMREC.KUMSTRID = PC0CM002.KUMSTRID;

        if (PC0CM002.PC-PRDCU-APAO-FL == "E")
          PC0CS-0014(); /* Select unique customer row*/
        else
          PC0CS14(); /* Select the customer store row*/
        end

        if (SQLCA.VAGen_SQLCODE == 0)
          if (KUMREC.XXXSTAT == "A") /* Status active*/
            PC0CM002.PC2NAME = KUMREC.KUMSTRNM;
          else
            if (PC0CM002.XXXSTAT == "A") /* If cust xref active*/
              converseLib.validationFailed(327); /* Customer number inactive*/
              PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
              set PC0CM002.XNXCD cursor, modified, bold;
              set PC0CM002.KUMSTRID cursor, modified, bold;
              set PC0CM002.KUCCOID cursor, modified, bold;
            end
          end
        else
          PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
          set PC0CM002.XNXCD cursor, modified, bold;
          set PC0CM002.KUMSTRID cursor, modified, bold;
          set PC0CM002.KUCCOID cursor, modified, bold;
          converseLib.validationFailed(47); /* Customer number invalid*/
        end

      else /* not usa & cana*/

        if (PC0CM002.PC-PRDCU-APAO-FL == "E")
          PC0CS-0009(); /* Select unique customer row*/
        else
          PC0CS09(); /* Select unique customer row*/
        end

        if (SQLCA.VAGen_SQLCODE == 0) /* Customer exists*/
          if (KUNREC.XXXSTAT == "A") /* Status  active*/
            KUMREC.KUCCOID = PC0CM002.KUCCOID; /* get cust. name*/
            KUMREC.KUMSTRID = PC0CM002.KUMSTRID;

            if (PC0CM002.PC-PRDCU-APAO-FL == "E")
              PC0CS-0014(); /* Select unique customer row*/
            else
              PC0CS14(); /* Select the customer store row*/
            end

            if (SQLCA.VAGen_SQLCODE == 0)
              if (KUMREC.XXXSTAT == "A") /* Status active*/
                PC0CM002.PC2NAME = KUMREC.KUMSTRNM;
              else
                if (PC0CM002.XXXSTAT == "A") /* If cust xref active*/
                  converseLib.validationFailed(327); /* Customer number inactive*/
                  PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
                  set PC0CM002.XNXCD cursor, modified, bold;
                  set PC0CM002.KUMSTRID cursor, modified, bold;
                  set PC0CM002.KUCCOID cursor, modified, bold;
                end
              end
            else /* /sqlcode not 0 for customer store row*/
              PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
              set PC0CM002.XNXCD cursor, modified, bold;
              set PC0CM002.KUMSTRID cursor, modified, bold;
              set PC0CM002.KUCCOID cursor, modified, bold;
              converseLib.validationFailed(47); /* Customer number invalid*/
            end
          else
            if (PC0CM002.XXXSTAT == "A") /* If cust xref active*/
              PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
              set PC0CM002.XNXCD cursor, modified, bold;
              set PC0CM002.KUMSTRID cursor, modified, bold;
              set PC0CM002.KUCCOID cursor, modified, bold;
              converseLib.validationFailed(327); /* Customer number invalid*/
            end
          end /* end IF KUNREC.XXXSTAT EQ 'A';*/
        else
          PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
          set PC0CM002.XNXCD cursor, modified, bold;
          set PC0CM002.KUMSTRID cursor, modified, bold;
          set PC0CM002.KUCCOID cursor, modified, bold;
          converseLib.validationFailed(47); /* Customer number invalid*/
        end /* end if sqlcode not 0 for customer row*/

      end /* end if not usa/cana*/

    end
  end
   /* ------------------------------------------------------------*/
   /* VERIFY IF CUSTOMER ALREADY EXISTS*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "S" /* Xref type is screener*/
   || PC0CM002.YPCCD == "C") /* Xref type is customer*/
    if (PC0CM002.KUCCOID > 0
     || PC0CM002.KUMSTRID > 0
     || PC0CM002.XNXCD > 0)
      if (PC0CM002.XGPCD != PC0CW02.XGPCD[PC0CWIXM]
       || PC0CM002.KUCCOID != PC0CW02.KUCCOID[PC0CWIXM]
       || PC0CM002.KUMSTRID != PC0CW02.KUMSTRID[PC0CWIXM]
       || PC0CM002.XNXCD != PC0CW02.XNXCD[PC0CWIXM])
        VPRDCU03.XGPCD = PC0CM002.XGPCD;
        VPRDCU03.KUCCOID = PC0CM002.KUCCOID;
        VPRDCU03.KUMSTRID = PC0CM002.KUMSTRID;
        VPRDCU03.XNXCD = PC0CM002.XNXCD;

        PC0CS11(); /* Select xref customer row*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Customer xref exists*/
          PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
          set PC0CM002.XNXCD cursor, modified, bold;
          set PC0CM002.KUMSTRID cursor, modified, bold;
          set PC0CM002.KUCCOID cursor, modified, bold;
          if (VPRDCU03.XXXSTAT == "A")
            converseLib.validationFailed(19); /* Duplicate of active entry*/
          else
            converseLib.validationFailed(20); /* Duplicate of inactive entry*/
          end
        end
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* FOR USA/CANA Destination, Change from Non-zero to zero*/
   /* is the only valid change for Dept.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XCTCD == "USA" /* USA Destination*/
   || PC0CM002.XCTCD == "CANA") /* CANA Destination*/

    if (PC0CM002.XNXCD != PC0CW02.XNXCD[PC0CWIXM]) /* If Dept changes*/

      if (PC0CM002.XNXCD == 0) /* Change to 0 is valid*/
      else
        converseLib.validationFailed(590); /* Dept Id to 0 is the only valid change*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.XNXCD cursor, modified, bold;
      end

    end

    if (PC0CM002.XXXSTAT == "A"
     && PC0CW02.XXXSTAT[PC0CWIXM] == "I") /* If Status changes*/

      if (PC0CM002.XNXCD == 0)
      else
        converseLib.validationFailed(591); /* Status can't be active for Non 0 dept*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.XXXSTAT cursor, modified, bold;
        set PC0CM002.XNXCD cursor, modified, bold;
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* VALIDATE THE WAREHOUSE.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XWHCD > " ")
    if (PC0CM002.PC-PRDCU-APAO-FL != "W")

      converseLib.validationFailed(523); /* Cannot enter warehouse*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.XWHCD cursor, modified, bold;

    else /* ===> code not in table*/
      if (PC0CM002.XWHCD in XWHTBL.XWHCD
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

        VPRDCU03.XWHCD = PC0CM002.XWHCD;
        PC0CW01.PC0CWSWR = "Y"; /* Request for data*/

      else /* ===> code not in table*/

        converseLib.validationFailed(59); /* Warehouse must be entered*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.XWHCD cursor, modified, bold;

      end
    end
  else /* ===> code not in table*/
    if (PC0CM002.PC-PRDCU-APAO-FL == "W")
      converseLib.validationFailed(59); /* WAREHOUSE MUST BE ENTERED*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.XWHCD cursor, modified, bold;

    end
  end


   /* ------------------------------------------------------------*/
   /* VALIDATE THE APAO FLAG.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC-PRDCU-APAO-FL != PC0CW03.PC-PRDCU-APAO-FL
   && PC0CW03.PC-PRDCU-APAO-FL == "W")
    converseLib.validationFailed(515); /* CANNOT CHANGE FROM 'W'*/
    PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
    set PC0CM002.PC-PRDCU-APAO-FL cursor, modified, bold;

  else
    if (PC0CM002.PC-PRDCU-APAO-FL != PC0CW03.PC-PRDCU-APAO-FL)
      if (PC0CM002.PC-PRDCU-APAO-FL in PC0CTBL.PC-PRDCU-APAO-FL)

        PC0CW03.PC-PRDCU-APAO-FL = PC0CM002.PC-PRDCU-APAO-FL;
        PC0CW01.PC0CWSWR = "Y"; /* Request for data*/

      else /* ===> code not in table*/

        converseLib.validationFailed(515); /* Status invalid*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.PC-PRDCU-APAO-FL cursor, modified, bold;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE RTA days field.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XGPCD == "02")
    if (PC0CM002.PCXCTRTA > -100
     && PC0CM002.PCXCTRTA < 100)

    else
      converseLib.validationFailed(526); /* valid rta day range -99 thru 99*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.PCXCTRTA cursor, modified, bold;

    end
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER XREF TYPE*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD > " ") /* If xref type code entered*/
    if (PC0CM002.YPCCD in YPCTBL.YPCCD
     && YPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status active*/
      PC0CM002.YPCSDESC = YPCTBL.YPCSDESC[sysVar.arrayIndex];
    else
      PC0CM002.YPCSDESC = " "; /* Clear description fields*/
      converseLib.validationFailed(46); /* Customer xref invalid*/
      PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
      set PC0CM002.YPCCD cursor, modified, bold;
    end
  else
    PC0CM002.YPCSDESC = " "; /* Clear description fields*/
    converseLib.validationFailed(46); /* Customer xref invalid*/
    PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
    set PC0CM002.YPCCD cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER REFERENCE ID*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.PC2REFID > " " /* If ref id entered*/
   && PC0CM002.YPCCD == "S")  /* screener xref type*/
    converseLib.validationFailed(244); /* Customer xref invalid*/
    PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
    set PC0CM002.PC2REFID cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
   /* VALIDATE CUSTOMER XREF CODE FOR CUSTOMER XREF TYPE SCREENER*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.YPCCD == "S") /* Screen xref type*/
    FY1REC.XGPCD = PC0CM002.XGPCD;
    FY1REC.FY1FCTYC = PC0CM002.PC2CUXID;

    PC0CS10(); /* Select unique factory*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (FY1REC.XXXSTAT != "A") /* Status active*/
        converseLib.validationFailed(181); /* Customer xref code invalid*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.YPCCD cursor, modified, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(181); /* Customer xref code invalid*/
        PC0CM002.XXXPRCNM = "PC0C441"; /* Process name*/
        set PC0CM002.YPCCD cursor, modified, bold;
      end
    end
  end

end // end PC0C441

// Process valid input request
Function PC0C450()

   /* ------------------------------------------------------------*/
   /* Verify that the table row exists for the customer xref*/
   /* If found then update row and display message*/
   /* ------------------------------------------------------------*/

  if (PC0CW01.PC0CWDEF == "N"           /* no data was entered*/
   || converseVar.validationMsgNum != 0 /* or errors were found*/
   || PC0CW01.PC0CWBYF == "Y")          /* bypass processing*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Verify that table row exists before update*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* clear records*/

  VPRDCU03.XGPCD = PC0CM002.XGPCD; /* gpc code*/
  VPRDCU03.PC2CUXID = PC0CM002.PC2CUXID; /* customer xref code*/

  PC0CS16(); /* select the customer xref row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if customer xref record not found*/
    PC0CM001.XXXPRCNM = "PC0C450";
    PC0CW01.PC0CWMAP = 1; /* reset map*/
    PC0CW01.XGPCD = " "; /* force gpc validation*/
    converseLib.validationFailed(26); /* data deleted by another application*/
    exit stack; /* display msg*/
  end

   /* ------------------------------------------------------------*/
    /* Format VPRDCU03 for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current time*/

  VPRDCU03.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRDCU03.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VPRDCU03.KUCCOID = PC0CM002.KUCCOID; /* company code*/
  VPRDCU03.KUMSTRID = PC0CM002.KUMSTRID; /* store id*/
  VPRDCU03.XNXCD = PC0CM002.XNXCD; /* dept nbr*/
  VPRDCU03.YPCCD = PC0CM002.YPCCD; /* xref code*/
  VPRDCU03.PC2NAME = PC0CM002.PC2NAME; /* customer name*/
  VPRDCU03.TSCLOCCD = PC0CM002.TSCLOCCD; /* destination*/
  if (PC0CM002.PC0CMUCC == " ")
    VPRDCU03.XCTCD = PC0CM002.TSCLOCCD;
    PC0CM002.PC0CMUCC = PC0CM002.TSCLOCCD;
  else
    VPRDCU03.XCTCD = PC0CM002.PC0CMUCC; /* ultimate country code*/
  end
  VPRDCU03.YSMXDV = PC0CM002.YSMXDV; /* division*/
  VPRDCU03.PC2INSEG = PC0CM002.PC2INSEG; /* iseg code*/
  VPRDCU03.PC2SEGAB = PC0CM002.PC2SEGAB; /* iseg abrv*/
  VPRDCU03.PC2SEGDE = PC0CM002.PC2SEGDE; /* iseg desc*/
  VPRDCU03.PC-PRDCU-APAO-FL = PC0CM002.PC-PRDCU-APAO-FL;
  VPRDCU03.PO-DIR-SHP-ADJ-DY = PC0CM002.PO-DIR-SHP-ADJ-DY;
  VPRDCU03.XWHCD = PC0CM002.XWHCD; /* warehouse*/
  VPRDCU03.PC2REFID = PC0CM002.PC2REFID; /* cust ref id*/
  VPRDCU03.XXXSTAT = PC0CM002.XXXSTAT; /* status*/
  VPRDCU03.ZZZCHGCT = PC0CW02.ZZZCHGCT[PC0CWIXM];
  if (PC0CM002.XGPCD == "02")
    VPRDCU03.XCTRTADY = PC0CM002.PCXCTRTA; /* rta day*/
  end
                                   /* load the chg count*/

  PC0CS13(); /* update customer xref row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if customer xref record not found*/
    PC0CM002.XXXPRCNM = "PC0C450";
    converseLib.validationFailed(12); /* data update by another application*/

     /* select and load the new version of the record*/

    set VPRDCU03 empty; /* clear records*/

    VPRDCU03.XGPCD = PC0CM002.XGPCD; /* gpc code*/
    VPRDCU03.PC2CUXID = PC0CM002.PC2CUXID; /* customer xref code*/

    PC0CS16(); /* select the customer xref row*/

    PC0CM002.KUCCOID = VPRDCU03.KUCCOID; /* display cust xref chg data*/
    PC0CM002.KUMSTRID = VPRDCU03.KUMSTRID;
    PC0CM002.XNXCD = VPRDCU03.XNXCD;
    PC0CM002.YPCCD = VPRDCU03.YPCCD;
    PC0CM002.PC2NAME = VPRDCU03.PC2NAME;
    PC0CM002.PC0CMUCC = VPRDCU03.XCTCD;
    if (VPRDCU03.XCTCD in XCTTBL.XCTCD)
      PC0CM002.PC0CMUCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    PC0CM002.TSCLOCCD = VPRDCU03.TSCLOCCD;
    PC0CM002.YSMXDV = VPRDCU03.YSMXDV;
    PC0CM002.PC2INSEG = VPRDCU03.PC2INSEG;
    PC0CM002.PC2SEGAB = VPRDCU03.PC2SEGAB;
    PC0CM002.PC2SEGDE = VPRDCU03.PC2SEGDE;
    PC0CM002.PC-PRDCU-APAO-FL = VPRDCU03.PC-PRDCU-APAO-FL;
    PC0CM002.XWHCD = VPRDCU03.XWHCD;
    PC0CM002.PC2REFID = VPRDCU03.PC2REFID;
    PC0CM002.XXXSTAT = VPRDCU03.XXXSTAT;
    TSCREC.TSCLOCCD = VPRDCU03.TSCLOCCD;
    PC0CM002.PO-DIR-SHP-ADJ-DY = VPRDCU03.PO-DIR-SHP-ADJ-DY;
    if (PC0CM002.XGPCD == "02")
      PC0CM002.PCXCTRTA = VPRDCU03.XCTRTADY;
    end

    PC0CS03(); /* select trans. location rec*/

    if (SQLCA.VAGen_SQLCODE == 0
     && TSCREC.XXXSTAT == "A")
      PC0CM002.XCTCD = TSCREC.XCTCD;
      PC0CM002.XXXCITY = TSCREC.XXXCITY;
    else
      PC0CM002.XCTCD = " ";
      PC0CM002.XXXCITY = " ";
    end

       /* update temporary storage*/

    PC0CW02.XGPCD[PC0CWIXM] = PC0CM002.XGPCD; /* gpc code*/
    PC0CW02.PC2CUXID[PC0CWIXM] = PC0CM002.PC2CUXID; /* xref code*/
    PC0CW02.KUCCOID[PC0CWIXM] = PC0CM002.KUCCOID; /* company code*/
    PC0CW02.KUMSTRID[PC0CWIXM] = PC0CM002.KUMSTRID; /* store id*/
    PC0CW02.XNXCD[PC0CWIXM] = PC0CM002.XNXCD; /* dept nbr*/
    PC0CW02.PC2NAME[PC0CWIXM] = PC0CM002.PC2NAME; /* dept nbr*/
    PC0CW02.XXXCITY[PC0CWIXM] = PC0CM002.XXXCITY; /* dept nbr*/
    PC0CW02.XCTCD[PC0CWIXM] = PC0CM002.XCTCD; /* country code*/
    PC0CW02.TSCLOCCD[PC0CWIXM] = PC0CM002.TSCLOCCD; /* location code*/
    PC0CW02.PC2INSEG[PC0CWIXM] = PC0CM002.PC2INSEG; /* iseg code*/
    PC0CW02.PC2SEGAB[PC0CWIXM] = PC0CM002.PC2SEGAB; /* iseg abrv*/
    PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM] = PC0CM002.PC-PRDCU-APAO-FL;
    PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM] = PC0CM002.PO-DIR-SHP-ADJ-DY;
    PC0CW02.XWHCD[PC0CWIXM] = PC0CM002.XWHCD; /* warehouse*/
    PC0CW02.PC2SEGDE[PC0CWIXM] = PC0CM002.PC2SEGDE; /* iseg desc*/
    PC0CW02.YSMXDV[PC0CWIXM] = PC0CM002.YSMXDV; /* division code*/
    PC0CW02.YPCCD[PC0CWIXM] = PC0CM002.YPCCD; /* xref type*/
    PC0CW02.PC0CMUCC[PC0CWIXM] = PC0CM002.PC0CMUCC; /* ult cntry*/
    PC0CW02.PC2REFID[PC0CWIXM] = PC0CM002.PC2REFID; /* ref id*/
    PC0CW02.XXXSTAT[PC0CWIXM] = PC0CM002.XXXSTAT; /* status code*/
    PC0CW02.ZZZCHGCT[PC0CWIXM] = VPRDCU03.ZZZCHGCT; /* load chg count*/
    if (PC0CM002.XGPCD == "02")
      PC0CW02.PCXCTRTA[PC0CWIXM] = PC0CM002.PCXCTRTA; /* rta day*/
    end

    PC0CS15(); /* update temporary storage*/

    return;
  end

  if (converseVar.validationMsgNum == 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit any updates*/
    PC0CW02.XGPCD[PC0CWIXM] = PC0CM002.XGPCD; /* gpc code*/
    PC0CW02.PC2CUXID[PC0CWIXM] = PC0CM002.PC2CUXID; /* xref code*/
    PC0CW02.KUCCOID[PC0CWIXM] = PC0CM002.KUCCOID; /* company code*/
    PC0CW02.KUMSTRID[PC0CWIXM] = PC0CM002.KUMSTRID; /* store id*/
    PC0CW02.XNXCD[PC0CWIXM] = PC0CM002.XNXCD; /* dept nbr*/
    PC0CW02.PC2NAME[PC0CWIXM] = PC0CM002.PC2NAME; /* dept nbr*/
    PC0CW02.XXXCITY[PC0CWIXM] = PC0CM002.XXXCITY; /* dept nbr*/
    PC0CW02.XCTCD[PC0CWIXM] = PC0CM002.XCTCD; /* country code*/
    PC0CW02.TSCLOCCD[PC0CWIXM] = PC0CM002.TSCLOCCD; /* location code*/
    PC0CW02.PC2INSEG[PC0CWIXM] = PC0CM002.PC2INSEG; /* iseg code*/
    PC0CW02.PC2SEGAB[PC0CWIXM] = PC0CM002.PC2SEGAB; /* iseg abrv*/
    PC0CW02.PC2SEGDE[PC0CWIXM] = PC0CM002.PC2SEGDE; /* iseg desc*/
    PC0CW02.PC-PRDCU-APAO-FL[PC0CWIXM] = PC0CM002.PC-PRDCU-APAO-FL;
    PC0CW02.XWHCD[PC0CWIXM] = PC0CM002.XWHCD; /* warehouse*/
    PC0CW02.YSMXDV[PC0CWIXM] = PC0CM002.YSMXDV; /* division*/
    PC0CW02.YPCCD[PC0CWIXM] = PC0CM002.YPCCD; /* xref type*/
    PC0CW02.PC0CMUCC[PC0CWIXM] = PC0CM002.PC0CMUCC; /* ult cntry*/
    PC0CW02.PC2REFID[PC0CWIXM] = PC0CM002.PC2REFID; /* cust ref id*/
    PC0CW02.XXXSTAT[PC0CWIXM] = PC0CM002.XXXSTAT; /* status code*/
    PC0CW02.ZZZCHGCT[PC0CWIXM] = VPRDCU03.ZZZCHGCT; /* load chg count*/
    PC0CW02.PO-DIR-SHP-ADJ-DY[PC0CWIXM] = PC0CM002.PO-DIR-SHP-ADJ-DY;
    if (PC0CM002.XGPCD == "02")
      PC0CW02.PCXCTRTA[PC0CWIXM] = PC0CM002.PCXCTRTA; /* rta day*/
    end

    PC0CS15(); /* update temporary storage*/

    PC0CW01.PC0CWMFL = "Y"; /* set message flag*/

  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back any updates*/
  end

end // end PC0C450

// Select customer table  EURD
Function PC0CS-0009()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set KUNREC empty;
   /* THIS WAS PUT HERE UNTIL THE DEURO TABLE IS SETUP*/
   /*  */
  KUNREC.XXXSTAT = "A";
  SQLCA.VAGen_SQLCODE = 0;
  return; /* Return to previous process*/
   /*  */
   /* THIS WAS PU IN HERE UNTIL THE DEURO TABLE IS SETUP*/

  try
    call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "CS-0009"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DEURO.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VECUST01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "CS-0009"; /* Process name*/

  exit stack;

end // end PC0CS-0009

// Select customer store row EURD
Function PC0CS-0014()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "CS-0014"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DEURO.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "CS-0014"; /* Process name*/


  exit stack;

end // end PC0CS-0014

// Select Set (S1) deuro.vestor01
Function PC0CS-0015()
   /* ------------------------------------------------------------*/
   /* Select a Set of rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS18"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF ROWS      ";
  TA1REC.TA1DBASE = "DEURO. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS18"; /* Process name*/

  exit stack;

end // end PC0CS-0015

// Fetch (N1) deuro.vestor01
Function PC0CS-0016()

   /* ------------------------------------------------------------*/
   /* Fetch the next row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS19"; /* Process name*/
  TA1REC.TA1LOC = "FETCH A ROW             ";
  TA1REC.TA1DBASE = "DEURO. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS19"; /* Process name*/

  exit stack;

end // end PC0CS-0016

// Close Set (C1) deuro.vestor01
Function PC0CS-0017()

   /* ------------------------------------------------------------*/
   /* Close the Set of rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("CS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS20"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS       ";
  TA1REC.TA1DBASE = "DEURO. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS20"; /* Process name*/

  exit stack;

end // end PC0CS-0017

// Verefy warehouse
Function PC0CS-0019()
   /* ------------------------------------------------------------*/
   /* Validate the warehouse code entered on the screen.*/
   /* ------------------------------------------------------------*/

  if (PC0CM002.XWHCD > " ") /* Warehouse entered*/
    if (PC0CM002.XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
      /* next sentence*/
    else
      converseLib.validationFailed(59); /* Whse. code missing/invalid*/
      set PC0CM002.XWHCD cursor, bold; /* Highlight error*/
    end
  else
    converseLib.validationFailed(59); /* Whse. code missing/invalid*/
    set PC0CM002.XWHCD cursor, bold; /* Highlight error*/
  end

end // end PC0CS-0019

// Format JCL
Function PC0CS-0021()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailer & submit jcl only*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(190); /* Return message*/
    PC0CM001.XXXPRCNM = "PC0CS-0021"; /* Process name*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PC0CM001.XXXPRCNM = "PC0CS-0021"; /* Process name*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0CM001.XXXPRCNM = "PC0CS-0021"; /* Process name*/

  end

  exit stack; /* Exit to display map*/


end // end PC0CS-0021

// Select Vprdcu03 (S3)
Function PC0CS-241()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows using GPC,COMPANY,STORE only.*/
   /* Dept should be wildcarded.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty;
  VPRDCU03.XGPCD = PC0CM002.XGPCD;
  VPRDCU03.KUCCOID = PC0CM002.KUCCOID;
  VPRDCU03.KUMSTRID = PC0CM002.KUMSTRID;
  VPRDCU03.XNXCD = -1;

  try
    call "VPRDCU03" ("S3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      try
        call "VPRDCU03" ("N3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end

      if (sysVar.errorCode == "00000000") /* Successful call*/
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == 100)

          if (SQLCA.VAGen_SQLCODE == 0) /* Gpc/Company/Store*/
                                           /* COMBINATION already Present*/
            converseLib.validationFailed(589);
            PC0CM002.XXXPRCNM = "PC0CS-241"; /* Process name*/
            set PC0CM002.XGPCD cursor, modified, bold;
            set PC0CM002.KUMSTRID cursor, modified, bold;
            set PC0CM002.KUCCOID cursor, modified, bold;

          end

          try
            call "VPRDCU03" ("C3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
          end

          if (sysVar.errorCode == "00000000") /* Successful call*/
            if (SQLCA.VAGen_SQLCODE == 0)
              return;
            end
          end

        end
      end

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0CW01.PC0CWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS-241"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.KUCCOID TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM001.XXXPRCNM = "PC0CS-241"; /* Process name*/

  exit stack;

end // end PC0CS-241

// Purge temp storage
Function PC0CS01()

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PC0C"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* No error was found*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PC0CS01"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  PC0CW01.PC0CWTSP = 0; /* Reset current page number*/
  PC0CW01.TA5TSQIX = 0; /* Reset highest page number*/

end // end PC0CS01

// Select Set vprdcu03 (S1,S2,S3)
Function PC0CS02()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows using gpc order by cust xref*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (PC0CW03.PC2CUXID > " ") /* Cust xref entered*/
    try
      call "VPRDCU03" ("S1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PC0CW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("S2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PC0CW03.KUCCOID > 0) /* If Cust nbr entered*/
        try
          call "VPRDCU03" ("S3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("S1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  PC0CW01.XGPCD = " "; /* force validation logic*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0CW01.PC0CWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.XGPCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM001.XXXPRCNM = "PC0CS02"; /* Process name*/

  exit stack;

end // end PC0CS02

// Select transportation location
Function PC0CS03()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    PC0CW01.PC0CWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  PC0CW01.XGPCD = " "; /* force gpc validation*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS03"; /* Process name*/
  TA1REC.TA1LOC = "SELECT TRANS. LOCATION ROW ";
  TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (PC0CW01.PC0CWMAP == 1)
    PC0CM001.XXXPRCNM = "PC0CS03"; /* Process name*/
  else
    if (PC0CW01.PC0CWMAP == 2)
      PC0CM002.XXXPRCNM = "PC0CS03"; /* Process name*/
    end
  end

  exit stack;

end // end PC0CS03

// Fetch vprdcu03 row
Function PC0CS04()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PC0CW03.PC2CUXID > " ") /* If Cust xref entered*/
    try
      call "VPRDCU03" ("N1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PC0CW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("N2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PC0CW03.KUCCOID > 0) /* If Cust nbr entered*/
        try
          call "VPRDCU03" ("N3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("N1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0CW01.PC0CWCSW = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  PC0CW01.XGPCD = " "; /* force gpc validation*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    PC0CW01.PC0CWSWR = "N"; /* request for data no*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS04"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM001.XXXPRCNM = "PC0CS04"; /* Process name*/

  exit stack;

end // end PC0CS04

// Add page to temp storage
Function PC0CS05()

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  /* 13 rows and each of length 132 (refer PC0Cw02) + 4 bytes*/
  PC0CW02.PC0CWLEN = 1720; /* page length*/
  TA5REC.TA5APPID = "PC0C"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && TA5REC.TA5RTNCD == 0)          /* everything is a-ok*/
    PC0CW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    PC0CW01.PC0CWIXM = 1; /* Reset display line number*/
    set PC0CW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0CS05"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0CM001.XXXPRCNM = "PC0CS05"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0CW01.XGPCD = " "; /* force gpc validation*/

    exit stack;

  end

end // end PC0CS05

// Close selected vprdcu03 set
Function PC0CS06()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  if (PC0CW03.PC2CUXID > " ") /* If Cust xref entered*/
    try
      call "VPRDCU03" ("C1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (PC0CW03.PC2INSEG > " ") /* If Iseg entered*/
      try
        call "VPRDCU03" ("C2", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
      end
    else
      if (PC0CW03.KUCCOID > 0) /* If Iseg entered*/
        try
          call "VPRDCU03" ("C3", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      else
        try
          call "VPRDCU03" ("C1", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
        end
      end
    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0CS06"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0CM001.XXXPRCNM = "PC0CS06"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0CW01.XGPCD = " "; /* force gpc validation*/

    exit stack;

  end

end // end PC0CS06

// Obtain lines from temp storage
Function PC0CS07()

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
   /* 13 rows, each of length 132 bytes + 4 bytes for length*/
  PC0CW02.PC0CWLEN = 1720; /* temporary storage page length*/
  TA5REC.TA5APPID = "PC0C"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0CW01.PC0CWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (PC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0CS07"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0CM001"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0CW01.XGPCD = " "; /* force gpc validation*/
    converseLib.validationFailed(10); /* Indicate system error*/
    PC0CM001.XXXPRCNM = "PC0CS07"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0CS07

// Select customer table
Function PC0CS09()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS09"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DCUST.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS09"; /* Process name*/

  exit stack;

end // end PC0CS09

// Select factory table
Function PC0CS10()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY.  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS10"; /* Process name*/

  exit stack;

end // end PC0CS10

// Select customer xref row
Function PC0CS11()

   /* ------------------------------------------------------------*/
   /* Select a unique row using gpc and customer number*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("SA", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS11"; /* Process name*/

  exit stack;

end // end PC0CS11

// Add customer xref row
Function PC0CS12()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("A ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS12"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS12"; /* Process name*/

  exit stack;

end // end PC0CS12

// upd customer xref row
Function PC0CS13()

   /* ------------------------------------------------------------*/
   /* This module updates a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("U ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS13"; /* Process name*/
  TA1REC.TA1LOC = "UPD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS13"; /* Process name*/

  exit stack;

end // end PC0CS13

// Select customer store row
Function PC0CS14()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS14"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS14"; /* Process name*/


  exit stack;

end // end PC0CS14

// update temporary storage
Function PC0CS15()

   /* ------------------------------------------------------------*/
   /* Update the temp storage page.*/
   /* ------------------------------------------------------------*/
   /* 13 rows each of length 132 bytes + 4 bytes for length*/
  PC0CW02.PC0CWLEN = 1720; /* temp storage page length*/
  TA5REC.TA5APPID = "PC0C"; /* Application identification*/
  TA5REC.TA5TSQIX = PC0CW01.PC0CWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (PC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0CS15"; /* Process name*/
    TA1REC.TA1LOC = "UPD PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PC0CM002"; /* Map name*/
    TA1REC.TA1TBLKE = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0CW01.XGPCD = " "; /* force gpc validation*/
    PC0CW01.PC0CWMAP = 1; /* redisplay list screen*/
    PC0CM001.XXXPRCNM = "PC0CS15"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack; /* Exit to redisplay map*/

  end

end // end PC0CS15

// select customer xref
Function PC0CS16()

   /* ------------------------------------------------------------*/
   /* This module selects a table row using gpc and cust xref cd*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* sel table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Expected return codes*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS16"; /* Process name*/
  TA1REC.TA1LOC = "SEL TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS16"; /* Process name*/

  exit stack;

end // end PC0CS16

// Select customer xref row
Function PC0CS17()

   /* ------------------------------------------------------------*/
   /* Select a unique row using gpc and iseg code*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("SG", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS17"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS17"; /* Process name*/

  exit stack;

end // end PC0CS17

// Select Set (S1) dcust.vstore01
Function PC0CS18()

   /* ------------------------------------------------------------*/
   /* Select a Set of rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS18"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF ROWS      ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS18"; /* Process name*/

  exit stack;

end // end PC0CS18

// Fetch (N1) dcust.vstore01
Function PC0CS19()

   /* ------------------------------------------------------------*/
   /* Fetch the next row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS19"; /* Process name*/
  TA1REC.TA1LOC = "FETCH A ROW             ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS19"; /* Process name*/

  exit stack;

end // end PC0CS19

// Close Set (C1) dcust.vstore01
Function PC0CS20()

   /* ------------------------------------------------------------*/
   /* Close the Set of rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("CS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0)

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0CS20"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SET OF ROWS       ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC0CM001.PC0CM-CUST-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0CM002.XXXPRCNM = "PC0CS20"; /* Process name*/

  exit stack;

end // end PC0CS20

//*** RECORD=PC0CW01 ****
// Working storage for pc0c - p.o. customer xref
// ***********************
Record PC0CW01 type basicRecord
  5 PC0CW1GP PC0CW1GP ; 
    10 PC0CWIXM PC0CWIXM ; 
    10 PC0CWCFM PC0CWCFM ; 
    10 PC0CWLIX PC0CWLIX ; 
    10 PC0CWPNB PC0CWPNB ; 
    10 PC0CWIDX PC0CWIDX ; 
    10 PC0CWSZI PC0CWSZI ; 
    10 PC0CWSGP PC0CWSGP ; 
    10 PC0CWSIX PC0CWSIX ; 
    10 PC0CWSPG PC0CWSPG ; 
    10 PC0CWCSW PC0CWCSW ; 
    10 PC0CWIOT PC0CWIOT ; 
    10 PC0CWXRF PC0CWXRF ; 
    10 PC0CWSFL PC0CWSFL ; 
    10 PC0CWPSW PC0CWPSW ; 
    10 PC0CWSWR PC0CWSWR ; 
    10 PC0CWTSP PC0CWTSP ; 
    10 PC0CWMAP PC0CWMAP ; 
    10 PC0CWFSW PC0CWFSW ; 
    10 XGPDESC XGPDESC ; 
    10 PC0CW1KY PC0CW1KY ; 
      15 XGPCD XGPCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 KUCCOID KUCCOID ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 YSMXDV YSMXDV ; 
    10 YPCCD YPCCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 PC0CMUCC PC0CMUCC ; 
    10 PC0CMCUX PC0CMCUX ; 
    10 PC0CWCFL PC0CWCFL ; 
    10 PC0CWMFL PC0CWMFL ; 
    10 PC0CWUPD PC0CWUPD ; 
    10 PC0CWINQ PC0CWINQ ; 
    10 PC0CWBYF PC0CWBYF ; 
    10 PC0CWDEF PC0CWDEF ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PC0CWCXS PC0CWCXS ; 
    10 PC0CWISS PC0CWISS ; 
    10 PC0CWOIX PC0CWOIX ; 
    10 PC0CWJIX PC0CWJIX ; 
end // end PC0CW01

//*** RECORD=PC0CW02 ****
// Temp. storage record for pc0c - p.o. customer xref list scrn
// ***********************
Record PC0CW02 type basicRecord
  10 PC0CWLEN PC0CWLEN ; 
  10 PC0CWLIN PC0CWLIN [13] ; 
    15 PC0CMSEL PC0CMSEL ; 
    15 XGPCD XGPCD ; 
    15 PC2CUXID PC2CUXID ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 XNXCD XNXCD ; 
    15 PC2NAME PC2NAME ; 
    15 XCTCD XCTCD ; 
    15 XXXCITY XXXCITY ; 
    15 TSCLOCCD TSCLOCCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 PC2SEGAB PC2SEGAB ; 
    15 PC2SEGDE PC2SEGDE ; 
    15 YSMXDV YSMXDV ; 
    15 YPCCD YPCCD ; 
    15 PC0CMUCC PC0CMUCC ; 
    15 PC2REFID PC2REFID ; 
    15 PCXCTRTA PCXCTRTA ; 
    15 PO-DIR-SHP-ADJ-DY PO-DIR-SHP-ADJ-DY ; 
    15 PC-PRDCU-APAO-FL PC-PRDCU-APAO-FL ; 
    15 XWHCD XWHCD ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PC0CW02

//*** RECORD=PC0CW03 ****
// Working storage for pc0c - Inquiry header fields
// ***********************
Record PC0CW03 type basicRecord
  10 PC2CUXID PC2CUXID ; 
  10 PC2INSEG PC2INSEG ; 
  10 KUCCOID KUCCOID ; 
  10 XXXSTAT XXXSTAT ; 
  10 PC-PRDCU-APAO-FL PC-PRDCU-APAO-FL ; 
end // end PC0CW03

DataItem PC0CMCUX char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PC0CMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ultimate country code
DataItem PC0CMUCC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pc0cw01 group level
DataItem PC0CW1GP char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0CW1KY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bypass processing flag
DataItem PC0CWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer special type flag
DataItem PC0CWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add confirmation flag
DataItem PC0CWCFM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor end of file switch
DataItem PC0CWCSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save key for pc-prdcu-id
DataItem PC0CWCXS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data entered flag
DataItem PC0CWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0CWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for working storage
DataItem PC0CWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry allowed flag
DataItem PC0CWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// i-o task indicator
DataItem PC0CWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save key for pc-cu-in-seg-cd
DataItem PC0CWISS char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem PC0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL line index
DataItem PC0CWJIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tempory storage length
DataItem PC0CWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display line
DataItem PC0CWLIN char(132)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load index for pc0cw03 rec
DataItem PC0CWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// map to be displayed
DataItem PC0CWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message flag
DataItem PC0CWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// override index
DataItem PC0CWOIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp page location number
DataItem PC0CWPNB num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// problem switch
DataItem PC0CWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem PC0CWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save gpc code
DataItem PC0CWSGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index
DataItem PC0CWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save page number
DataItem PC0CWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data switch
DataItem PC0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for map fields
DataItem PC0CWSZI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temp storage page
DataItem PC0CWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update allowed flag
DataItem PC0CWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xref type found flag
DataItem PC0CWXRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

