package pc0z;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0Z ****
//   This application will allow the user to bring up a list
// of P.O. information by P.O ID for inquiry.  The database
// will return 0 to N rows based upon the selection criteria.
//   The program will format the screen with the information
// returned from the database.
// 
//   This program will also allow changing and printing of
// P.O.s by transferring them to another program with the row
// information selected.
// 
//   A user can select a row for more detailed information and
// hit enter.  The user will then be transferred to PC0R where
// they can view the information.  Pressing PF3 will return
// them to the list screen in this application.
// 
//   A user can select a row for maintenance and hit PF12.
// The user will then be transferred to PC0K where they can
// modify the information.  Pressing enter or PF3 will return
// them to the list screen in this application.
// 
//   A user can print the selected rows by pressing PF20.
// The user will then be transferred to PC0D where they can
// select the destination printer.  After they hit enter they
// will be returned to the list screen in this application.
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
// 05/26/89   JNEWMA         New application.
// 08/25/89   JNEWMA         Security now checks CAILVL(GPC)
// 09/13/90   lsutto         Add code to handle gpc '07'
// 02/11/91   ZLefko         Re-gen for table changes.
// 02/18/91   ZLefko         A77B - display user cancelled
//                           items only when status request is
//                           'CX' and display all cancelled
//                           items when status request is '*X',
//                           for GPC '03' (apparel) only.
// 03/06/92   KSANFO         Added option to view Sales Order
//                           on Map 3 via PF11 key - added new
//                           Map 4 for purpose of displaying
//                           Sales Order.
// 04/23/92   CHAERT         A182 - add division to PCPREC for
//                           ETAL calculation.
// 02/22/93   GAMEN          Move map nbr to caitm for PF1.
// 04/28/93   KSANFO         Pass S.O. Nbr via PCWREC.PCWUSER4
//                           to PC0O.  Pass rta DATE VIA pcwrec
//                           to PC0O.
// 05/05/93   lsutto         fix scrolling bug that dropped
//                           14th line on 13 line screen
//                           pc0z211,313,413
// 09/23/93   dhales         change xspcs05 required appl regen
// 12/29/93   gamen          add theater of ops code
// 10/27/94   KGRAHA         Change sales order to 9.3 digits.
// 05/09/95   sford          fix under score on map 004
// 12/06/96   jniese         recompile to get new xspcs05.
// 04/29/97   asunda         recompile to get new xspcs05.
// 06/04/97   PHARWO         PCA367 - PPR PROJECT, PO VIEWS
// 07/08/97   jniese         PCA367 - PPR corrections
// 12/02/97   bmusti         modified jcl table.
// 02/10/98   DRAMSE         Changed to use VPRDCU03 instead of
//                           PC2REC.Also changed to call
//                           VPRDCU03 instead of IO3340
//                           Changed PC0Z150,PC0Z153,PC0ZS21
// 02/13/98   DRAMSE         recompile to get new xspcs05
//                           XSPCS07
// 06/10/98   drammo         PCF147 - Regen appln to get new
//                           XSPCS05/06 which are changed to
//                           include ST po type in ETAL calc.
// 10/22/98   RVEMPA         Changed PC0ZW01 rec by increasing
//                           occurs from 100 to 150 of po-nbr.
//                           Accordingly made changes in the
//                           procs: PC0Z150, PC0Z160.
//                           Instead of passing S2/N2/C2,passed
//                           s4/n4/c4 in procs:PC0Z162/163/164
//                           for retrieving recs w.r.t PO type.
// 04/23/99   KGRAHA         Regen to get new XSPCS05 which now
//                           does not include 'BA' in ETAL
//                           calculation.
// 07/08/99   ATHELA         Changed PC0Z156 to fix Y2K bug
// 09/24/99   vsanka         regenerated due to changes to
//                           xspcs05.
// 02/08/00   SBUNGO         CHANGED TO USE VIEW VFCTY003
// 08/02/00   RSELVA         Modified XSPCS05 for zeroing
//                           out of MADD from 20001012 onwards
// 12/21/00   RMURTH        Compiled for change in SGRP XSPCS07
// *                   XSPCS07 modified to have hardcoded PADD
// *                   for WHSE '51' and Origin USA for GPC 03
// 12/26/01   spitch        disabled pf key 20
// *********************
Program PC0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC0ZW00 PC0ZW00; // record
  PC0ZW01 PC0ZW01; // record
  PC0ZW02 PC0ZW02; // record
  PC0ZW03 PC0ZW03; // record
  PC0ZW04 PC0ZW04; // record
  PC0ZW05 PC0ZW05; // record
  PC0ZW06 PC0ZW06; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PCZREC PCZREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TSEREC TSEREC; // record
  VFCTY003 VFCTY003; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPRDCU03 VPRDCU03; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PC0ZT01; // table
  use PC0ZT11; // table
  use PC0ZT02; // table
  use PC0ZT22; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PC0ZM.PC0ZM001,  // forms
      PC0ZM.PC0ZM002, 
      PC0ZM.PC0ZM003, 
      PC0ZM.PC0ZM004, 
      PC0ZM.TA0PM001, 
      PC0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC0Z001; /* Special Initialization*/

    PC0Z001: PC0Z001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC0Z002; /* Converse main process*/
    PC0Z002: PC0Z002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0Z002; /* Converse Detail Schedule List*/


  end // end main
end // end PC0Z

// Special Initialization
Function PC0Z001()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "01"
   && COMMAREA.CAILVL[1] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0ZM001.XXXPRCNM = "PC0Z001";
  end

  if (PCWREC.XGPCD == "07"
   && COMMAREA.CAILVL[7] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138; /* Security violation*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0ZM001.XXXPRCNM = "PC0Z001";
  end

  if (PCWREC.XGPCD == "02"
   && COMMAREA.CAILVL[2] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0ZM001.XXXPRCNM = "PC0Z001";
  end

  if (PCWREC.XGPCD == "03"
   && COMMAREA.CAILVL[3] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0ZM001.XXXPRCNM = "PC0Z001";
  end

  if (PCWREC.XGPCD == "07"
   && COMMAREA.CAILVL[7] != "Y")
    COMMAREA.CAITEM = " ";
    PCWREC.XXXMSGNO = 138;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
    XSEXIT();
    PC0ZM001.XXXPRCNM = "PC0Z001";
  end


   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/

  set PC0ZW00 empty; /* Initialize working storage*/
  set PC0ZW01 empty; /* Initialize map 001 storage area*/
  set PC0ZW02 empty; /* Initialize map 002 storage area*/
  set PC0ZW03 empty; /* Initialize map 003 storage area*/
  set PC0ZW04 empty; /* Initialize map page storage area*/
  set PC0ZM001 initial; /* M001 input/output*/
  set SQLCA empty; /* Sql communication area*/
  set TAEREC empty; /* Error diagnosis information*/
  set TA1REC empty; /* Error diagnosis parameters*/
  set TA5REC empty; /* Temporary storage parameters*/
  set XX0XW01 empty; /* Date/time subroutine parameters*/
  set VPOITM03 empty; /* P.O. item record*/

   /* 13 rows * 125 bytes = 1625 page length for tsl*/
  PC0ZW00.XXXTSLEN = 1625; /* Temporary storage page*/
  PC0ZW00.PO-REG-CD = "01"; /* po-region*/
  PC0ZW00.XXXPRCNM = "PC0Z"; /* Module identification*/
  PC0ZW01.XDSCD = "*"; /* Initialize direct ship field*/

  PC0ZW00.PC0ZWDMD = "DIM:"; /* Dimension description*/
  PC0ZW00.PC0ZWPGD = " PKG:"; /* Package description*/
  PC0ZW00.PC0ZWOWD = " OWN:"; /* Owner group description*/

  if (COMMAREA.CAFROMAP == "TS0P") /* If coming from 'TS0P'*/
    move PCWREC to PC0ZW01 withV60Compat; /* Move corresponding fields*/
    PC0ZW00.PCWMAP = 1; /* Map number for selection screen*/
    if (PCWREC.PC3POIDT != 0) /* If PO ID present*/
      PC0ZW01.PC0ZWFDT = PCWREC.PC3POIDT; /* PO ID*/
    end
  else
    if (PCWREC.CAFROMAP[1] == "PC0Z" /* IF RETURNING FROM SUBORDINATE APP*/
     && COMMAREA.CAFROMAP != "PC07") /* and not coming from pc07*/
      PC0ZW01.PC0ZW1GP = PCWREC.PCWUSER1; /* Restore selection fields*/
      PC0ZW00.PCWMAP = PCWREC.PCWMAP; /* Map number*/
      PC0ZW01.PC0ZWIXP = 1; /* Initialize PO arrary index*/
      PC0ZW00.XXXTSPAG = PCWREC.XXXTSPAG; /* Requested page number*/
    else
      PC0ZW01.XGPCD = PCWREC.XGPCD; /* GPC code*/
      PC0ZW00.PCWMAP = 1; /* Map number for selection screen*/
    end
  end

  PCWREC.PCWUSER1 = " "; /* Init user area 1*/
  PCWREC.PCWUSER2 = " "; /* Init user area 2*/
  PCWREC.PCWUSER3 = " "; /* Init user area 3*/
  PCWREC.PCWUSER4 = " "; /* Init user area 4*/
  PCWREC.CAFROMAP[1] = " "; /* Init From application 1*/
  PCWREC.CAFROMAP[2] = " "; /* Init From application 2*/
  PCWREC.CAFROMAP[3] = " "; /* Init From application 3*/
  PCWREC.CAFROMAP[4] = " "; /* Init From application 4*/

  PC0ZW00.PC0ZWSWR = "Y"; /* Request for data*/


   /* ------------------------------------------------------------*/
      /* CALL SUB-ROUTINE TO FIND WHICH ENVIRONMENT*/
      /* THE PROGRAM IS EXECUTING IN, DEVELOPMENT*/
      /* OR PRODUCTION.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    PC0ZM001.XXXPRCNM = "PC0Z001"; /* module identification*/
    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end



end // end PC0Z001

// Main process to display a map
Function PC0Z002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PCWMAP == 1) /* Map 1 was requested*/

    PC0Z100(); /* Display map 1*/

  else

    if (PC0ZW00.PCWMAP == 2) /* Map 2 was requested*/

      PC0Z200(); /* Display map 2*/

    else

      if (PC0ZW00.PCWMAP == 3) /* Map 3 was requested*/

        PC0Z300(); /* Display map 3*/

      else

        PC0Z400(); /* Display map 4*/

      end
    end
  end

end // end PC0Z002

// Converse selection screen
Function PC0Z100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Z120(); /* Format and display the map*/

  PC0Z130(); /* Check attention identifier*/

  PC0Z140(); /* Reset fields & converse popups*/

  PC0Z150(); /* Verify the entered data*/

  PC0Z160(); /* Process valid input request*/


end // end PC0Z100

// Converse selection map 001
Function PC0Z120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pa2      /* and not clear*/
   && converseVar.eventKey not pf6)     /* and not print request*/
    PC0Z121(); /* Format selection data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0ZM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0ZM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0ZM001.XXXPRCNM = PC0ZW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0ZM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0ZM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0ZW00.XXXPRCNM = "PC0Z"; /* Module identification*/
  COMMAREA.CATOAP = PC0ZM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0ZM001.CAITEM; /* Application data*/

  PC0Z122(); /* Converse pop-up windows*/

end // end PC0Z120

// Format selection data of 001
Function PC0Z121()
   /* ------------------------------------------------------------*/
   /* Format the item data for map 001 display.*/
   /* ------------------------------------------------------------*/
  set PC0ZM001 initial; /* Initialize map*/

  PC0ZM001.PC0ZMFYR = PC0ZW01.PC0ZMFYR; /* From PO ID year*/
  PC0ZM001.PC0ZMFM1 = PC0ZW01.PC0ZMFM1; /* From PO ID*/
  PC0ZM001.PC0ZMFM2 = PC0ZW01.PC0ZMFM2; /* From PO ID dlv month*/
  PC0ZM001.PC0ZMTYR = PC0ZW01.PC0ZMTYR; /* To PO ID year*/
  PC0ZM001.PC0ZMTM1 = PC0ZW01.PC0ZMTM1; /* To PO ID buy month*/
  PC0ZM001.PC0ZMTM2 = PC0ZW01.PC0ZMTM2; /* To PO ID dlv month*/
  PC0ZM001.FY1FCTYC = PC0ZW01.FY1FCTYC; /* From factory*/
  PC0ZM001.PC0ZMFCT = PC0ZW01.FY1FCTYC; /* To factory*/
  PC0ZM001.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  PC0ZM001.SY2CLRID = PC0ZW01.SY2CLRID; /* Color*/
  PC0ZM001.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  PC0ZM001.PC2CUXID = PC0ZW01.PC2CUXID; /* Cust xref*/

  if (PC0ZW01.PC4ORTYP != " ") /* If type present*/
    PC0ZM001.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  else
    if (PC0ZW01.XGPCD == "01" /* If GPC 01*/
     || PC0ZW01.XGPCD == "07") /* If GPC 07*/
      PC0ZM001.PC4ORTYP = "RM"; /* PO type*/
    else
      if (PC0ZW01.XGPCD == "02") /* If footwear*/
        PC0ZM001.PC4ORTYP = "FT"; /* PO type*/
      end
    end
  end

  PC0ZM001.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PC0ZM001.XDMCD = PC0ZW01.XDMCD; /* Dimension*/
  PC0ZM001.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  PC0ZM001.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference*/
  PC0ZM001.XPGCD = PC0ZW01.XPGCD; /* Packaging type*/
  PC0ZM001.XCTCD = PC0ZW01.XCTCD; /* Country*/
  PC0ZM001.XPRCD = PC0ZW01.XPRCD; /* Product type*/
  PC0ZM001.XPLCD = PC0ZW01.XPLCD; /* Product line*/
  PC0ZM001.XPCCD = PC0ZW01.XPCCD; /* Product category*/
   /* IF PC0ZW01.YPUCD = 'CX'         ;       Cancelled status*/
    /* IF PC0ZW00.YPUCD = '*X'       ;     User cancelled*/
      /* MOVE PC0ZW00.YPUCD TO PC0ZM001.YPUCD;       Item status*/
    /* ELSE ;*/
      /* MOVE PC0ZW01.YPUCD TO PC0ZM001.YPUCD;       Item status*/
    /* END ;*/
   /* ELSE ;*/
  PC0ZM001.YPUCD = PC0ZW01.YPUCD; /* Item status*/
  PC0ZW00.YPUCD = PC0ZW01.YPUCD; /* Save Item status*/
   /* END ;*/
  PC0ZM001.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PC0ZM001.XDSCD = PC0ZW01.XDSCD; /* Direct ship*/
  PC0ZM001.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country*/

  if (COMMAREA.CAILVL[5] == "Y") /* =======>Authorized for DIV 20 only*/
    set PC0ZM001.YSMXDV skip; /* ====> Division Code*/
    PC0ZM001.YSMXDV = "20"; /* division code*/
  else
    if (PC0ZW01.YSMXDV != " ") /* If division present*/
      PC0ZM001.YSMXDV = PC0ZW01.YSMXDV; /* Division*/
    else
      PC0ZM001.YSMXDV = "10"; /* Division*/
    end
  end

  if (PC0ZW01.XGPCD == "  ")
    set PC0ZM001.XGPCD cursor; /* Cursor at GPC code*/
  else
    set PC0ZM001.PC0ZMFYR cursor; /* Cursor at first field*/
  end

end // end PC0Z121

// Converse pop-up windows
Function PC0Z122()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XCTCD == "?" /* Country list requested*/
   || PC0ZM001.XPRCD == "?" /* or product type list requested*/
   || PC0ZM001.XPLCD == "?" /* or product line list requested*/
   || PC0ZM001.XPCCD == "?" /* or product category list requested*/
   || PC0ZM001.YPUCD == "?" /* or status list requested*/
   || PC0ZM001.XWHCD == "?" /* or warehouse list requested*/
   || PC0ZM001.PC6XCTCD == "?"
   /* or destination country list requested*/
   || PC0ZM001.XDSCD == "?" /* or direct ship list requested*/
   || PC0ZM001.XPGCD == "?" /* or package type list requested*/
   || PC0ZM001.XOWCD == "?" /* or owner group list requested*/
   || PC0ZM001.XDMCD == "?" /* or dimension list requested*/
   || PC0ZM001.XGPCD == "?") /* or GPC code list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0ZW00.XXXPRCNM = "PC0Z122"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XCTCD == "?") /* Country list requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " COUNTRY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XCTCD = PC0ZW01.XCTCD; /* Restore prior code*/
    else
      PC0ZM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XCTCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product types.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XPRCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " PRODUCT TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XPRCD = PC0ZW01.XPRCD; /* Restore prior code*/
    else
      PC0ZM001.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XPRCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product lines.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XPLCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
    XX0XW02.XX0XWHDR = " PRODUCT LINE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XPLCD = PC0ZW01.XPLCD; /* Restore prior code*/
    else
      PC0ZM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XPLCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product categories.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XPCCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
    XX0XW02.XX0XWHDR = " PRODUCT CATEGORY"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XPCCD = PC0ZW01.XPCCD; /* Restore prior code*/
    else
      PC0ZM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XPCCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of statuses.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.YPUCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " STATUS"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.YPUCD = PC0ZW01.YPUCD; /* Restore prior code*/
    else
      PC0ZM001.YPUCD = YPUTBL.YPUCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.YPUCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouses.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XWHCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XWHCD = PC0ZW01.XWHCD; /* Restore prior code*/
    else
      PC0ZM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XWHCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of destinations.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.PC6XCTCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DESTINATION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Restore prior code*/
    else
      PC0ZM001.PC6XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.PC6XCTCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of direct ships.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XDSCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIRECT SHIP"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDS01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XDSCD = PC0ZW01.XDSCD; /* Restore prior code*/
    else
      PC0ZM001.XDSCD = XDSTBL.XDSCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XDSCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of package types.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XPGCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " PACKAGE TYPE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XPGCD = PC0ZW01.XPGCD; /* Restore prior code*/
    else
      PC0ZM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner groups.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XOWCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " OWNER GROUP"; /* Heading*/
    XX0XW02.XWHCD = PC0ZM001.XWHCD; /* Warehouse*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XOWCD = PC0ZW01.XOWCD; /* Restore prior code*/
    else
      PC0ZM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XOWCD cursor; /* Establish cursor position*/
  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimensions.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XDMCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XDMCD = PC0ZW01.XDMCD; /* Restore prior code*/
    else
      PC0ZM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XDMCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of GPC codes.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XGPCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " GPC"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0ZM001.XGPCD = PC0ZW01.XGPCD; /* Restore prior code*/
    else
      PC0ZM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0ZM001.XGPCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0ZW00.XXXPRCNM = "PC0Z122"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0Z122

// Check attention identifiers
Function PC0Z130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    converseLib.clearScreen();
     /* Clear screen*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PCWREC*/
      XSPCS01(); /* transfer*/
      set PC0ZM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z130"; /* Module identification*/
      set PC0ZM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0ZM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O.  menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to factory menu*/
    end

    PC0ZS01(); /* purge temporary storage*/
    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf6) 
    PC0ZW00.XXXPRCNM = "PC0Z130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* Any PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0Z130

// Set fields to normal intensity
Function PC0Z140()
  set PC0ZM001.PC0ZMFYR cursor, initialAttributes; /* From PO ID year*/
  set PC0ZM001.PC0ZMFM1 initialAttributes; /* From PO ID buy month*/
  set PC0ZM001.PC0ZMFM2 initialAttributes; /* From PO ID delivery month*/
  set PC0ZM001.PC0ZMTYR initialAttributes; /* To PO ID year*/
  set PC0ZM001.PC0ZMTM1 initialAttributes; /* To PO ID buy month*/
  set PC0ZM001.PC0ZMTM2 initialAttributes; /* To PO ID delivery month*/
  set PC0ZM001.FY1FCTYC initialAttributes; /* From factory*/
  set PC0ZM001.PC0ZMFCT initialAttributes; /* To factory*/
  set PC0ZM001.SY1STNBR initialAttributes; /* Style number*/
  set PC0ZM001.SY2CLRID initialAttributes; /* Color*/
  set PC0ZM001.SYBSTGNB initialAttributes; /* Style group number*/
  set PC0ZM001.PC2CUXID initialAttributes; /* Cust xref*/
  set PC0ZM001.PC4ORTYP initialAttributes; /* PO type*/
  set PC0ZM001.XGPCD initialAttributes; /* GPC code*/
  set PC0ZM001.XDMCD initialAttributes; /* Dimension*/
  set PC0ZM001.XOWCD initialAttributes; /* Owner group code*/
  set PC0ZM001.PC2INSEG initialAttributes; /* Spec difference*/
  set PC0ZM001.XPGCD initialAttributes; /* Packaging type*/
  set PC0ZM001.XCTCD initialAttributes; /* Country*/
  set PC0ZM001.XPRCD initialAttributes; /* Product type*/
  set PC0ZM001.XPLCD initialAttributes; /* Product line*/
  set PC0ZM001.XPCCD initialAttributes; /* Product category*/
  set PC0ZM001.YPUCD initialAttributes; /* Item status*/
  set PC0ZM001.XWHCD initialAttributes; /* Warehouse*/
  set PC0ZM001.XDSCD initialAttributes; /* Direct ship*/
  set PC0ZM001.PC6XCTCD initialAttributes; /* Destination country*/

  set PC0ZM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0ZM001.CAITEM initialAttributes; /* Commarea application data*/


  if (COMMAREA.CAILVL[5] == "Y") /* =======> Authorized for DIV 20 only*/
    /* ============ Next Sentence =======> not modifiable*/
  else
    set PC0ZM001.YSMXDV initialAttributes; /* ====> Division Code*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0M140 ***********************/
end // end PC0Z140

// Verify the entered data
Function PC0Z150()
   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PC0Z151(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* Determine if GPC code in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XGPCD in XGPTBL.XGPCD /* GPC code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    if (PC0ZM001.XGPCD == "01"
     && COMMAREA.CAILVL[1] != "Y")
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XGPCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(159); /* Security violation*/
    else
      if (PC0ZM001.XGPCD == "02"
       && COMMAREA.CAILVL[2] != "Y")
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XGPCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(159); /* Security violation*/
      else
        if (PC0ZM001.XGPCD == "03"
         && COMMAREA.CAILVL[3] != "Y")
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XGPCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(159); /* Security violation*/
        else
          if (PC0ZM001.XGPCD == "07"
           && COMMAREA.CAILVL[7] != "Y")
            PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
            set PC0ZM001.XGPCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(159); /* Security violation*/
          else
            COMMAREA.XGPCD = PC0ZM001.XGPCD; /* GPC code to commarea*/
          end
        end
      end
    end
  else
    PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
    set PC0ZM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(28); /* GPC code invalid*/
  end

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    /* ------------------------------------------------------------*/
     /* Determine if package type in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0ZM001.XPGCD != " ") /* If pkg type entered*/
      if (PC0ZM001.SY1STNBR == " ") /* If style not entered*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XPGCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(148); /* Not enter without style*/
      else
        if (PC0ZM001.XPGCD in XPGTBL.XPGCD /* Pkg type in table*/
         && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        else
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XPGCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(55); /* Pkg type invalid*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Determine if ISEG code in table & status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0ZM001.PC2INSEG != " ") /* If ISEG code entered*/
      PC0ZS21(); /* ===> verify ISEG Code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine if owner group in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XOWCD != " ") /* If owner group entered*/
    if (PC0ZM001.XWHCD != " ") /* If warehouse entered*/
      if (PC0ZM001.XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* If own grp for whse*/
          PC0ZW00.PC0ZWCD1 = PC0ZM001.XWHCD; /* warehouse*/
          PC0ZW00.PC0ZWCD2 = PC0ZM001.XOWCD; /* owner group*/
          if (PC0ZW00.PC0ZWKEY in XOWTBL.XOWKEY /* Own grp key in tbl*/
           && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
            set PC0ZM001.XOWCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(119); /* Owner group invalid*/
          end
        else
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XOWCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(119); /* Owner group invalid*/
        end
      else
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XOWCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(119); /* Owner group invalid*/
      end
    else
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XOWCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(119); /* Owner group invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine if dimension code in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XDMCD != " ") /* If dimension code entered*/
    if (PC0ZM001.SY1STNBR == " ") /* If style not entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XDMCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(148); /* Cannot enter without style*/
    else
      if (PC0ZM001.XDMCD in XDMTBL.XDMCD /* Dimension code in table*/
       && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XDMCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(53); /* Dimension code invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine that P.O. type is entered and valid.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.PC4ORTYP == " ") /* City is blank*/
    PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
    set PC0ZM001.PC4ORTYP cursor, bold; /* Highlight*/
    converseLib.validationFailed(33); /* P.O. type missing*/
  else
    PC0Z152(); /* Validate P.O. type*/
  end

   /* ------------------------------------------------------------*/
   /* Determine if dest country in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.PC6XCTCD in XCTTBL.XCTCD /* Dest country in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

  else
    if (PC0ZM001.PC6XCTCD != " ") /* If country entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.PC6XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(49); /* Dest country invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine if direct ship in table & status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM001.XDSCD != "*") /* If direct ship entered*/
    if (PC0ZM001.XDSCD in XDSTBL.XDSCD /* Direct ship in table*/
     && XDSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    else
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XDSCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(208); /* Direct ship invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine that cust xref is entered and valid.*/
   /* ------------------------------------------------------------*/

  /* ------------------------------------------------------------*/
  /* Commented out the following code for getting records from*/
  /* poitem table for div = '20' and for a given PO type.*/
  /* ------------------------------------------------------------*/
  /* IF PC0ZM001.PC2CUXID EQ ' '      /* Cust xref is blank*/
  /* AND PC0ZM001.YSMXDV EQ '20'    /* and nil division*/
  /* AND PC0ZM001.PC6XCTCD EQ ' '   /* and country is blank*/
  /* AND PC0ZM001.PC2INSEG EQ ' ';  /* and spec code is blank*/
  /* MOVE 'PC0Z150' TO PC0ZW00.XXXPRCNM;/* Module identification*/
  /* SET PC0ZM001.PC2CUXID CURSOR,BRIGHT;/* Highlight*/
  /* SET PC0ZM001.PC2INSEG BRIGHT;  /* Highlight*/
  /* SET PC0ZM001.PC6XCTCD BRIGHT;  /* Highlight*/
  /* MOVE 97 TO EZEMNO;             /* Cust xref is missing*/
  /* ELSE;*/
  if (PC0ZM001.PC2INSEG != " " /* and ISEG code is entered*/
   && PC0ZM001.PC2CUXID != " " /* Cust xref is not blank*/
   && PC0ZM001.PC2CUXID != VPRDCU03.PC2CUXID)
                                   /* Cust xref/ISEG don't match*/
    PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
    set PC0ZM001.PC2CUXID cursor, bold; /* Highlight*/
    set PC0ZM001.PC2INSEG bold; /* Highlight*/
    converseLib.validationFailed(289); /* cust's ISEG & Entered ISEG not equal*/
  else
    if (PC0ZM001.PC2CUXID != " " /* Cust xref is not blank*/
     && PC0ZM001.XGPCD != " ")   /* and GPC code is not blank*/
      PC0Z153(); /* Validate cust xref*/
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if division in table & status is active.*/
    /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PC0ZM001.YSMXDV; /* Division*/
  TA1REC.TA1PGMNM = "PC0Z150"; /* Module identification*/
  XSPCS02(); /* Validate style*/
  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(50); /* Division invalid*/
    PC0ZW00.XXXPRCNM = "PC0Z500"; /* Module identification*/
    set PC0ZM001.YSMXDV cursor, bold; /* Highlight style*/
  end

    /* ------------------------------------------------------------*/
     /* Determine if warehouse in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XWHCD != " ") /* If warehouse entered*/
    if (PC0ZM001.XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      if (PC0ZM001.YSMXDV == "20") /* If division '20'*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XWHCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(189); /* Warehouse & nil divison*/
      end
    else
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XWHCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse invalid*/
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if status in table & status is active.*/
    /* ------------------------------------------------------------*/

  PC0ZW00.YPUCD = PC0ZM001.YPUCD; /* Save status code*/
  if (PC0ZM001.YPUCD == "*X") /* User cancelled only*/
    if (PC0ZM001.XGPCD == "03") /* Apparel only*/
      PC0ZM001.YPUCD = "CX"; /* Set to code in the table*/
      if (PC0ZM001.YPUCD in YPUTBL.YPUCD /* Status in table*/
       && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      else
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.YPUCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Status invalid*/
      end
      PC0ZM001.YPUCD = PC0ZW00.YPUCD; /* Move status back to map*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.YPUCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Status invalid*/
    end
  else
    if (PC0ZM001.YPUCD in YPUTBL.YPUCD /* Status in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    else
      if (PC0ZM001.YPUCD != " ") /* If status entered*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.YPUCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Status invalid*/
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if group and style both entered*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.SYBSTGNB != " ") /* If group entered*/
    if (PC0ZM001.SY1STNBR != " ") /* If style entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.SYBSTGNB cursor, bold; /* Highlight*/
      converseLib.validationFailed(98); /* Cannot enter with style*/
    else
      PG2REC.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
      PG2REC.SYBSTGNB = PC0ZM001.SYBSTGNB; /* Style group*/
      PC0Z159(); /* Validate style group*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(188); /* Invalid style group*/
        PC0ZW00.XXXPRCNM = "PC0Z500"; /* Module identification*/
        set PC0ZM001.SYBSTGNB cursor, bold; /* Highlight style*/
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine that style/color is valid.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.SY2CLRID != " ") /* If color is entered*/
    if (PC0ZM001.SY1STNBR == " ") /* If style not entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.SY2CLRID cursor, bold; /* Highlight*/
      converseLib.validationFailed(148); /* Not enter without style*/
    else
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
      PG2REC.SY1STNBR = PC0ZM001.SY1STNBR; /* Style*/
      PG2REC.SY2CLRID = PC0ZM001.SY2CLRID; /* Color*/
      if (PC0ZM001.XDMCD == " ")
        PG2REC.XDMCD = "00"; /* Dimension*/
      else
        PG2REC.XDMCD = PC0ZM001.XDMCD; /* Dimension*/
      end
      TA1REC.TA1PGMNM = "PC0Z150"; /* Module identification*/
      XSPG202(); /* Validate style/color*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(52); /* Invalid style/color*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.SY2CLRID cursor, bold; /* Highlight color*/
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Validate style.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.SY1STNBR != " ") /* IF style entered*/
    PG2REC.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = PC0ZM001.SY1STNBR; /* Style*/
    TA1REC.TA1PGMNM = "PC0Z150"; /* Module identification*/
    XSPG201(); /* Validate style*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(52); /* Invalid style*/
      PC0ZW00.XXXPRCNM = "PC0Z500"; /* Module identification*/
      set PC0ZM001.SY1STNBR cursor, bold; /* Highlight style*/
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if category in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XPCCD != " ") /* If category entered*/
    if (PC0ZM001.SY1STNBR != " ") /* If style entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(98);
    else
      if (PC0ZM001.XPRCD == " ") /* If no product type*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(149); /* Type must be entered*/
      else
        if (PC0ZM001.SYBSTGNB != " ") /* If group entered*/
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XPCCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(101);
        else
          PC0ZW00.PC0ZWCD1 = PC0ZM001.XPCCD; /* Product category*/
          PC0ZW00.PC0ZWCD2 = PC0ZM001.XGPCD; /* GPC code*/
          if (PC0ZW00.PC0ZWKEY in XPCTBL.XPCKEY /* Product key in table*/
           && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
            set PC0ZM001.XPCCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(94); /* Category invalid*/
          end
        end
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if product line in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XPLCD != " ") /* If product line entered*/
    if (PC0ZM001.SY1STNBR != " ") /* If style entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(98);
    else
      if (PC0ZM001.XPRCD == " ") /* If no product type*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(150); /* Type must be entered*/
      else
        if (PC0ZM001.XPCCD != " ") /* If category entered*/
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XPLCD cursor, bold; /* Highlight*/
          set PC0ZM001.XPCCD bold; /* Highlight*/
          converseLib.validationFailed(151); /* Not both Category & line*/
        else
          if (PC0ZM001.SYBSTGNB != " ") /* If group entered*/
            PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
            set PC0ZM001.XPLCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(100);
          else
            PC0ZW00.PC0ZWCD1 = PC0ZM001.XPLCD; /* Product line*/
            PC0ZW00.PC0ZWCD2 = PC0ZM001.XGPCD; /* GPC code*/
            if (PC0ZW00.PC0ZWKEY in XPLTBL.XPLKEY /* Product key in table*/
             && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

            else
              PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
              set PC0ZM001.XPLCD cursor, bold; /* Highlight*/
              converseLib.validationFailed(93); /* Product line invalid*/
            end
          end
        end
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if product type in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XPRCD != " ") /* If product type entered*/
    if (PC0ZM001.SY1STNBR != " ") /* If style entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(98); /* Cannot enter with style*/
    else
      if (PC0ZM001.SYBSTGNB != " ") /* If group entered*/
        PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
        set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
        set PC0ZM001.SYBSTGNB bold; /* Highlight*/
        converseLib.validationFailed(99); /* Cannot enter with group*/
      else
        if (PC0ZM001.XPLCD == " " /* If line not entered*/
         && PC0ZM001.XPCCD == " ") /* & category not entered*/
          PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
          set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
          converseLib.validationFailed(152);
                                   /* Requires line or category*/
        else
          if (PC0ZM001.XPRCD in XPRTBL.XPRCD /* Product type in table*/
           && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
            set PC0ZM001.XPRCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(92); /* Product type invalid*/
          end
        end
      end
    end
  end

    /* ------------------------------------------------------------*/
     /* Determine if country in table & status is active.*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XCTCD in XCTTBL.XCTCD /* Country in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

  else
    if (PC0ZM001.XCTCD != " ") /* If country entered*/
      PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
      set PC0ZM001.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(49); /* Country invalid*/
  /* ELSE;*/
  /* IF PC0ZM001.YSMXDV EQ '02' /* If division '02'*/
  /* AND PC0ZM001.PC2CUXID EQ ' ';/* and customer not entered*/
  /* MOVE 'PC0Z150' TO PC0ZW00.XXXPRCNM;/* Module identification*/
  /* SET PC0ZM001.XCTCD CURSOR,BRIGHT;/* Highlight*/
  /* MOVE 97 TO EZEMNO;       /* Country invalid*/
  /* END;*/
    end
  end

    /* ------------------------------------------------------------*/
     /* Validate the P.O. IDs and factory code*/
    /* ------------------------------------------------------------*/

  if (PC0ZM001.XGPCD == "03") /* If apparrel*/
    PC0Z154(); /* Validate the TO Season code*/
    if (PC0ZM001.FY1FCTYC != " ") /* If factory is entered*/
      PC0Z158(); /* Validate factory*/
    end
    PC0Z155(); /* Validate the FROM Season code*/
  else
    PC0Z156(); /* Validate the TO P.O. ID*/
    if (PC0ZM001.FY1FCTYC != " ") /* If factory is entered*/
      PC0Z158(); /* Validate factory*/
    end
    PC0Z157(); /* Validate the FROM P.O. ID*/
  end

  /* ------------------------------------------------------------*/
  /* Commented out the following END to corresponding IF.*/
  /* ------------------------------------------------------------*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0ZW00.XXXPRCNM = "PC0Z150"; /* Module identification*/
    set PC0ZM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC0Z150

// Save map data before converse
Function PC0Z151()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0ZW01.PC0ZMFYR = PC0ZM001.PC0ZMFYR; /* From year*/
  PC0ZW01.PC0ZMFM1 = PC0ZM001.PC0ZMFM1; /* From buy date*/
  PC0ZW01.PC0ZMFM2 = PC0ZM001.PC0ZMFM2; /* From delivery date*/
  PC0ZW01.PC0ZMTYR = PC0ZM001.PC0ZMTYR; /* To year*/
  PC0ZW01.PC0ZMTM1 = PC0ZM001.PC0ZMTM1; /* To buy date*/
  PC0ZW01.PC0ZMTM2 = PC0ZM001.PC0ZMTM2; /* To delivery date*/
  PC0ZW01.FY1FCTYC = PC0ZM001.FY1FCTYC; /* Factory*/
  PC0ZW01.SY1STNBR = PC0ZM001.SY1STNBR; /* Style number*/
  PC0ZW01.SY2CLRID = PC0ZM001.SY2CLRID; /* Color*/
  PC0ZW01.SYBSTGNB = PC0ZM001.SYBSTGNB; /* Style group number*/
  PC0ZW01.PC2CUXID = PC0ZM001.PC2CUXID; /* Cust xref*/
  PC0ZW01.PC4ORTYP = PC0ZM001.PC4ORTYP; /* PO type*/
  PC0ZW01.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
  PC0ZW01.XDMCD = PC0ZM001.XDMCD; /* Dimension*/
  PC0ZW01.XOWCD = PC0ZM001.XOWCD; /* Owner group code*/
  PC0ZW01.PC2INSEG = PC0ZM001.PC2INSEG; /* Spec difference*/
  PC0ZW01.XPGCD = PC0ZM001.XPGCD; /* Packaging type*/
  PC0ZW01.XCTCD = PC0ZM001.XCTCD; /* Country*/
  PC0ZW01.XPRCD = PC0ZM001.XPRCD; /* Product type*/
  PC0ZW01.XPLCD = PC0ZM001.XPLCD; /* Product line*/
  PC0ZW01.XPCCD = PC0ZM001.XPCCD; /* Product category*/
  PC0ZW01.YPUCD = PC0ZM001.YPUCD; /* Item status*/
  PC0ZW01.XWHCD = PC0ZM001.XWHCD; /* Warehouse*/
  PC0ZW01.XDSCD = PC0ZM001.XDSCD; /* Direct ship*/
  PC0ZW01.PC6XCTCD = PC0ZM001.PC6XCTCD; /* Destination country*/
  PC0ZW01.YSMXDV = PC0ZM001.YSMXDV; /* Division*/
end // end PC0Z151

// Validate PO type    - VPOTYP01
Function PC0Z152()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format PC4REC with key values for select set*/
   /* ------------------------------------------------------------*/

  PC4REC.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
  PC4REC.PC4ORTYP = PC0ZM001.PC4ORTYP; /* P.O. type code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* P.O. type not found*/
        converseLib.validationFailed(33); /* P.O. type is invalid*/
        PC0ZW00.XXXPRCNM = "PC0Z152"; /* Module identification*/
        set PC0ZM001.PC4ORTYP cursor, bold; /* Highlight*/
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0Z152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0ZW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = PC4REC.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKA2 = PC4REC.PC4ORTYP; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Z152

// Validate cust xref  - VPRDCU01
Function PC0Z153()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  VPRDCU03.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
  VPRDCU03.PC2CUXID = PC0ZM001.PC2CUXID; /* Customer ID*/

   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate cust xref invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(45); /* Cust xref invalid*/
      PC0ZW00.XXXPRCNM = "PC0Z153"; /* Module identification*/
      set PC0ZM001.PC2CUXID cursor, bold; /* highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0Z153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0ZW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKA2 = VPRDCU03.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Z153

// Validate TO Season code
Function PC0Z154()
  if (PC0ZM001.PC0ZMTYR == " ") /* If To PO ID year not entered*/
    if (PC0ZM001.PC0ZMTM2 != " " /* If To PO months entered*/
     || PC0ZM001.PC0ZMTM1 != " ")
      PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    end
    return; /* Return to calling process*/
  else
    if (PC0ZM001.PC0ZMTM2 != " ") /* If buy month entered*/
      PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMTM2; /* Redefine month*/
      if (PC0ZW00.PC0ZWNM1 < "0"  /* If month not numeric*/
       || PC0ZW00.PC0ZWNM1 > "9"  
       || PC0ZW00.PC0ZWNM2 < "0"  
       || PC0ZW00.PC0ZWNM2 > "9"  
       || PC0ZW00.PC0ZWNUM < "01" /* or month < 1*/
       || PC0ZW00.PC0ZWNUM > "12") /* or month > 12*/
        PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0ZM001.PC0ZMTM2 cursor, bold; /* Highlight*/
      end
    end
    if (PC0ZM001.PC0ZMTM1 != " ") /* If buy month entered*/
      PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMTM1; /* Redefine month*/
      if (PC0ZW00.PC0ZWNM1 < "0"  /* If month not numeric*/
       || PC0ZW00.PC0ZWNM1 > "9"  
       || PC0ZW00.PC0ZWNM2 < "0"  
       || PC0ZW00.PC0ZWNM2 > "9"  
       || PC0ZW00.PC0ZWNUM < "01" /* or month < 1*/
       || PC0ZW00.PC0ZWNUM > "12") /* or month > 12*/
        PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0ZM001.PC0ZMTM1 cursor, bold; /* Highlight*/
      end
    end
    if (PC0ZM001.PC0ZMTM1 == " " /* If buy month not entered*/
     && PC0ZM001.PC0ZMTM2 != " ") /* and delivery month entered*/
      PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    end
    if (PC0ZM001.PC0ZMTYR != PC0ZM001.PC0ZMFYR) /* If From ^= To*/
      PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
      converseLib.validationFailed(160); /* Season codes must be equal*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMFYR bold; /* Highlight*/
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z154") /* If no errors found*/
    if (PC0ZM001.PC0ZMFM1 > PC0ZM001.PC0ZMTM1) /* If From buy > To buy*/
      PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
      converseLib.validationFailed(136); /* From cannot be > To*/
      set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTYR bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    else
      if (PC0ZM001.PC0ZMFM1 == PC0ZM001.PC0ZMTM1 /* If From buy = To buy*/
       && PC0ZM001.PC0ZMFM2 > PC0ZM001.PC0ZMTM2) /* & From > To*/
        PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
        converseLib.validationFailed(136); /* From cannot be > To*/
        set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
        set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
        set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
        set PC0ZM001.PC0ZMTYR bold; /* Highlight*/
        set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
        set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
      end
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z154" /* If no errors found*/
   && PC0ZM001.PC0ZMTM1 != " ")     /* and complete TO date*/
    set PCFREC empty; /* Initialize record*/
    PCFREC.PCFSECD = PC0ZM001.PC0ZMTYR; /* Season code*/
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMTM1; /* Buy month*/
    PCFREC.PCFBUYMO = PC0ZW00.PC0ZWRNM; /* Buy month*/
    PC0ZS07(); /* Select season code*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      PC0ZW00.PC0ZWRYR = PCFREC.PCFBUYYR; /* To PO ID year*/
      PC0ZW00.PC0ZWRNM = PCFREC.PCFBUYMO; /* To PO ID buy month*/
      PC0ZW00.PC0ZWRM1 = PC0ZW00.PC0ZWNUM; /* To PO ID buy month*/
      if (PC0ZM001.PC0ZMTM2 == 0) /* If dlvry not entered*/
        PC0ZW00.PC0ZWRM2 = "12"; /* To PO ID dlvry month*/
      else
        PC0ZW00.PC0ZWRM2 = PC0ZM001.PC0ZMTM2; /* To dlvry month*/
      end
      PC0ZW01.PCYTODT = PC0ZW00.PC0ZWRDT; /* To PO ID date*/
      PC0ZW01.PC0ZMTYR = PC0ZM001.PC0ZMTYR; /* To PO ID Season code*/
      PC0ZW01.PC0ZMTM1 = PC0ZM001.PC0ZMTM1; /* To PO ID buy month*/
      PC0ZW01.PC0ZMTM2 = PC0ZM001.PC0ZMTM2; /* To PO ID dlvy month*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z154"; /* Module identification*/
      converseLib.validationFailed(80); /* PO ID season invalid*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    end
  end
end // end PC0Z154

// Validate FROM Season code
Function PC0Z155()
  if (PC0ZM001.PC0ZMFYR == " ") /* If From year not entered*/
    if (PC0ZM001.PC0ZMFM1 == " " /* If From buy month not entered*/
     && PC0ZM001.PC0ZMFM2 == " ") /* & From dlv month not entered*/
      converseLib.validationFailed(89); /* From P.O. ID required*/
    else
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
    end
    set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
    PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
    return; /* Return to calling process*/
  else
    if (PC0ZM001.PC0ZMFM2 != " ") /* If delivery month entered*/
      PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM2; /* Redefine month*/
      if (PC0ZW00.PC0ZWNM1 < "0" /* IF month not numeric*/
       || PC0ZW00.PC0ZWNM1 > "9" 
       || PC0ZW00.PC0ZWNM2 < "0" 
       || PC0ZW00.PC0ZWNM2 > "9" 
       || PC0ZW00.PC0ZWNUM < "01"
       || PC0ZW00.PC0ZWNUM > "12")
        PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid date*/
        set PC0ZM001.PC0ZMFM2 cursor, bold; /* Highlight*/
      end
    end
    if (PC0ZM001.PC0ZMFM1 != " ") /* If buy month entered*/
      PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM1; /* Redefine month*/
      if (PC0ZW00.PC0ZWNM1 < "0" /* IF month not numeric*/
       || PC0ZW00.PC0ZWNM1 > "9" 
       || PC0ZW00.PC0ZWNM2 < "0" 
       || PC0ZW00.PC0ZWNM2 > "9" 
       || PC0ZW00.PC0ZWNUM < "01"
       || PC0ZW00.PC0ZWNUM > "12")
        PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid date*/
        set PC0ZM001.PC0ZMFM1 cursor, bold; /* Highlight*/
      end
    end
    if (PC0ZM001.PC0ZMFM1 == " " /* If buy month not entered*/
     && PC0ZM001.PC0ZMFM2 != " ") /* and delivery month entered*/
      PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z155") /* If no errors found*/
    set PCFREC empty; /* Initialize record*/
    PCFREC.PCFSECD = PC0ZM001.PC0ZMFYR; /* From Season code*/
    if (PC0ZM001.PC0ZMFM1 != " ")
                                   /* If complete from season*/
      /* and PC0ZM001.PC0ZMFM1 NE ' ' ;               and FROM Seas*/
      PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM1; /* From buy month*/
      PCFREC.PCFBUYMO = PC0ZW00.PC0ZWRNM; /* From buy month*/
      PC0ZS07(); /* Select season code*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If season code found*/
        PC0ZW00.PC0ZWRYR = PCFREC.PCFBUYYR; /* From PO ID year*/
        PC0ZW00.PC0ZWRNM = PCFREC.PCFBUYMO; /* From PO ID buy month*/
        PC0ZW00.PC0ZWRM1 = PC0ZW00.PC0ZWNUM; /* From PO ID buy month*/
        if (PC0ZM001.PC0ZMFM2 == " ") /* If dlvry not entered*/
          PC0ZW00.PC0ZWRM2 = "01"; /* From dlvry month*/
        else
          PC0ZW00.PC0ZWRM2 = PC0ZM001.PC0ZMFM2; /* From dlvry month*/
        end
        PC0ZW01.PCYFRDT = PC0ZW00.PC0ZWRDT; /* From PO ID date*/
        PC0ZW01.PC0ZMFYR = PC0ZM001.PC0ZMFYR; /* From PO ID season*/
        PC0ZW01.PC0ZMFM1 = PC0ZM001.PC0ZMFM1; /* From PO ID buy month*/
        PC0ZW01.PC0ZMFM2 = PC0ZM001.PC0ZMFM2; /* From PO ID dlv month*/
         /* move from date to to date if to date is left blank*/
        if (PC0ZM001.PC0ZMTYR == " ") /* to season year not entered*/
          if (PC0ZM001.PC0ZMFM2 == " ") /* from delivery month not entered*/
            PC0ZW00.PC0ZWRM2 = "12";
          end
          PC0ZW01.PCYTODT = PC0ZW00.PC0ZWRDT; /* to po id date*/
        end
      else
        PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
        converseLib.validationFailed(80); /* PO ID season invalid*/
        set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
        set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      end
    else
      if (PC0ZM001.PC0ZMFM1 == " ") /* If no buy month*/
        PCFREC.PCFBUYMO = -1; /* Wildcard buy month*/
      else
        PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM1; /* Buy month*/
        PCFREC.PCFBUYMO = PC0ZW00.PC0ZWRNM; /* Buy month*/
      end
      /* ------------------------------------------------------------*/
       /* IO to select and open VPOVFY01 ( P.O. ID verification )*/
      /* ------------------------------------------------------------*/

      PC0ZS08(); /* Open cursor for VPOVFY01*/

      /* ------------------------------------------------------------*/
       /* Fetch each VPOVFY01 row, format & store data*/
      /* ------------------------------------------------------------*/

      PC0ZW00.PC0ZWIX1 = 1; /* Initialize index*/
      while (PC0ZW00.PC0ZWDCF == "N") /* While more rows*/

        PC0ZS09(); /* Get next VPOVFY01*/

        if (PC0ZW00.PC0ZWDCF == "N") /* If more obtained*/
          PC0ZW00.PC0ZWRYR = PCFREC.PCFBUYYR; /* From year*/
          PC0ZW00.PC0ZWRNM = PCFREC.PCFBUYMO; /* From buy month*/
          PC0ZW00.PC0ZWRM1 = PC0ZW00.PC0ZWNUM; /* From buy month*/
          if (PC0ZWIX1 == 1) /* If first obtained*/
            if (PC0ZM001.PC0ZMFM2 == " ")
                                   /* If dlvry not entered*/
              PC0ZW00.PC0ZWRM2 = "01"; /* From dlvry month*/
            else
              PC0ZW00.PC0ZWRM2 = PC0ZM001.PC0ZMFM2;
            end
            PC0ZW01.PCYFRDT = PC0ZW00.PC0ZWRDT; /* From PO ID date*/
          end
          PC0ZW00.PC0ZWIX1 = PC0ZW00.PC0ZWIX1 + 1; /* Increment line index*/
        end
      end

      /* ------------------------------------------------------------*/
       /* IO to close VPOVFY01 set*/
      /* ------------------------------------------------------------*/

      PC0ZS10(); /* Close cursor VPOVFY01 row*/

      /* ------------------------------------------------------------*/
       /* If no rows obtained display error*/
      /* ------------------------------------------------------------*/

      if (PC0ZW00.PC0ZWIX1 == 1) /* If no item is found*/
        converseLib.validationFailed(80); /* Season code invalid*/
        PC0ZW00.XXXPRCNM = "PC0Z155"; /* Module identification*/
        set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
        set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      else
        PC0ZW01.PC0ZMFYR = PC0ZM001.PC0ZMFYR; /* From PO ID season*/
        PC0ZW01.PC0ZMFM1 = PC0ZM001.PC0ZMFM1; /* From PO ID buy month*/
        PC0ZW01.PC0ZMFM2 = PC0ZM001.PC0ZMFM2; /* From PO ID dlv month*/
        if (PC0ZM001.PC0ZMTM1 == " ") /* IF no complete TO date*/
          PC0ZW01.PC0ZMTYR = PC0ZM001.PC0ZMTYR; /* To PO ID season*/
          PC0ZW01.PC0ZMTM1 = PC0ZM001.PC0ZMTM1; /* To PO ID buy month*/
          PC0ZW01.PC0ZMTM2 = PC0ZM001.PC0ZMTM2; /* To PO ID dlv month*/
          PC0ZW00.PC0ZWRM2 = "12"; /* To delivery month*/
          PC0ZW01.PCYTODT = PC0ZW00.PC0ZWRDT; /* To PO ID date*/
        end
      end
    end
  end
end // end PC0Z155

// Validate TO PO ID
Function PC0Z156()
   /* ---------------------------------------------------*/
   /* Validate the TO PO ID*/
   /* --------------------------------------------------*/
  if (PC0ZM001.PC0ZMTYR == " ") /* If To PO ID year not entered*/
    if (PC0ZM001.PC0ZMTM2 != " " /* If To PO months entered*/
     || PC0ZM001.PC0ZMTM1 != " ")
      PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    end
    return; /* Return to calling process*/
  else
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMTM2; /* Redefine month*/
    if (PC0ZW00.PC0ZWNM1 < "0" /* If month not numeric*/
     || PC0ZW00.PC0ZWNM1 > "9" 
     || PC0ZW00.PC0ZWNM2 < "0" 
     || PC0ZW00.PC0ZWNM2 > "9" 
     || PC0ZW00.PC0ZWNUM < "01"
     || PC0ZW00.PC0ZWNUM > "12")
      PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PC0ZM001.PC0ZMTM2 cursor, bold; /* Highlight*/
    end
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMTM1; /* Redefine month*/
    if (PC0ZW00.PC0ZWNM1 < "0" /* If month not numeric*/
     || PC0ZW00.PC0ZWNM1 > "9" 
     || PC0ZW00.PC0ZWNM2 < "0" 
     || PC0ZW00.PC0ZWNM2 > "9" 
     || PC0ZW00.PC0ZWNUM < "01"
     || PC0ZW00.PC0ZWNUM > "12")
      PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PC0ZM001.PC0ZMTM1 cursor, bold; /* Highlight*/
    end
    PC0ZW00.PC0ZWRYY = PC0ZM001.PC0ZMTYR; /* Redefine year*/
    if (PC0ZW00.PC0ZWRY1 < "0" /* IF To year not numeric*/
     || PC0ZW00.PC0ZWRY1 > "9" 
     || PC0ZW00.PC0ZWRY2 < "0" 
     || PC0ZW00.PC0ZWRY2 > "9")
      PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid year*/
      set PC0ZM001.PC0ZMTYR cursor, bold; /* Highlight*/
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z156") /* If no errors found*/
  /* IF PC0ZM001.PC0ZMTYR LT PC0ZM001.PC0ZMFYR;    If From yr > To yr*/
    PC0ZW00.PC0ZWYY1 = PC0ZM001.PC0ZMFYR; /* TO EXPAND FROM YEAR*/
    if (PC0ZW00.PC0ZWYY1 < "60")
      PC0ZW00.PC0ZWCC1 = "20";
    else
      PC0ZW00.PC0ZWCC1 = "19";
    end
    PC0ZW00.PC0ZWYY2 = PC0ZM001.PC0ZMTYR; /* TO EXPAND TO-YEAR*/
    if (PC0ZW00.PC0ZWYY2 < "60")
      PC0ZW00.PC0ZWCC2 = "20";
    else
      PC0ZW00.PC0ZWCC2 = "19";
    end
    if (PC0ZW00.PC0ZWCY2 < PC0ZW00.PC0ZWCY1) /* If From yr > TO YR*/
      PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
      converseLib.validationFailed(136); /* From cannot be > To*/
      set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTYR bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
      set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
    else
      if (PC0ZM001.PC0ZMTYR == PC0ZM001.PC0ZMFYR) /* If From year = To year*/
        if (PC0ZM001.PC0ZMFM1 > PC0ZM001.PC0ZMTM1) /* If From buy > To buy*/
          PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
          converseLib.validationFailed(136); /* From date cannot be > To date*/
          set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
          set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
          set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
          set PC0ZM001.PC0ZMTYR bold; /* Highlight*/
          set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
          set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
        else
          if (PC0ZM001.PC0ZMFM1 == PC0ZM001.PC0ZMTM1
           /* If To buy = From buy*/
           && PC0ZM001.PC0ZMFM2 > PC0ZM001.PC0ZMTM2)
                                   /* & To dlv > Fr dlv*/
            PC0ZW00.XXXPRCNM = "PC0Z156"; /* Module identification*/
            converseLib.validationFailed(136); /* From cannot be > To*/
            set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
            set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
            set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
            set PC0ZM001.PC0ZMTYR bold; /* Highlight*/
            set PC0ZM001.PC0ZMTM1 bold; /* Highlight*/
            set PC0ZM001.PC0ZMTM2 bold; /* Highlight*/
          end
        end
      end
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z156") /* If no errors found*/
    if (PC0ZW00.PC0ZWRYY < "80") /* If the year is < 20*/
      PC0ZW00.PC0ZWRCC = 20; /* its the 21st century*/
    else
      PC0ZW00.PC0ZWRCC = 19; /* its the 20th century*/
    end
    PC0ZW00.PC0ZWRM1 = PC0ZW01.PC0ZMTM1; /* To PO ID buy month*/
    PC0ZW00.PC0ZWRM2 = PC0ZW01.PC0ZMTM2; /* To PO ID delivery month*/
    PC0ZW01.PC0ZWTDT = PC0ZWRDT; /* To PO ID date*/
    PC0ZW01.PCYTODT = PC0ZWRDT; /* To PO ID date*/
  end
end // end PC0Z156

// Validate FROM PO ID
Function PC0Z157()
   /* ---------------------------------------------------*/
   /* Validate the FROM PO ID*/
   /* --------------------------------------------------*/
  if (PC0ZM001.PC0ZMFYR == " " /* If From year not entered*/
   || PC0ZM001.PC0ZMFM1 == " " /* or From buy month not entered*/
   || PC0ZM001.PC0ZMFM2 == " ") /* or From dlv month not entered*/
    if (PC0ZM001.PC0ZMFYR == " " /* If From year not entered*/
     && PC0ZM001.PC0ZMFM1 == " " /* & From buy month not entered*/
     && PC0ZM001.PC0ZMFM2 == " ") /* & From dlv month not entered*/
      converseLib.validationFailed(89); /* From P.O. ID required*/
    else
      converseLib.validationFailed(80); /* Invalid P.O. ID date*/
    end
    PC0ZW00.XXXPRCNM = "PC0Z157"; /* Module identification*/
    set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
    set PC0ZM001.PC0ZMFM1 bold; /* Highlight*/
    set PC0ZM001.PC0ZMFM2 bold; /* Highlight*/
    return; /* Return to calling process*/
  else
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM2; /* Redefine month*/
    if (PC0ZW00.PC0ZWNM1 < "0" /* IF month not numeric*/
     || PC0ZW00.PC0ZWNM1 > "9" 
     || PC0ZW00.PC0ZWNM2 < "0" 
     || PC0ZW00.PC0ZWNM2 > "9" 
     || PC0ZW00.PC0ZWNUM < "01"
     || PC0ZW00.PC0ZWNUM > "12")
      PC0ZW00.XXXPRCNM = "PC0Z157"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PC0ZM001.PC0ZMFM2 cursor, bold; /* Highlight*/
    end
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM1; /* Redefine month*/
    if (PC0ZW00.PC0ZWNM1 < "0" /* IF month not numeric*/
     || PC0ZW00.PC0ZWNM1 > "9" 
     || PC0ZW00.PC0ZWNM2 < "0" 
     || PC0ZW00.PC0ZWNM2 > "9" 
     || PC0ZW00.PC0ZWNUM < "01"
     || PC0ZW00.PC0ZWNUM > "12")
      PC0ZW00.XXXPRCNM = "PC0Z157"; /* Module identification*/
      converseLib.validationFailed(31); /* Invalid date*/
      set PC0ZM001.PC0ZMFM1 cursor, bold; /* Highlight*/
    end
    PC0ZW00.PC0ZWRYY = PC0ZM001.PC0ZMFYR; /* Redefine year*/
    if (PC0ZW00.PC0ZWRY1 < "0" /* IF From year not numeric*/
     || PC0ZW00.PC0ZWRY1 > "9" 
     || PC0ZW00.PC0ZWRY2 < "0" 
     || PC0ZW00.PC0ZWRY2 > "9")
      PC0ZW00.XXXPRCNM = "PC0Z157"; /* Module identification*/
      converseLib.validationFailed(80); /* Invalid date*/
      set PC0ZM001.PC0ZMFYR cursor, bold; /* Highlight*/
    end
  end
  if (PC0ZW00.XXXPRCNM != "PC0Z157") /* If no errors found*/
    if (PC0ZW00.PC0ZWRYY < "80") /* If year is < 80*/
      PC0ZW00.PC0ZWRCC = 20; /* its the 21st century*/
    else
      PC0ZW00.PC0ZWRCC = 19; /* its the 20th century*/
    end
    PC0ZW00.PC0ZWRM1 = PC0ZM001.PC0ZMFM1; /* From PO ID buy month*/
    PC0ZW00.PC0ZWRM2 = PC0ZM001.PC0ZMFM2;
                                   /* From PO ID delivery month*/
    PC0ZW01.PCYFRDT = PC0ZW00.PC0ZWRDT; /* From PO ID date*/
    if (PC0ZM001.PC0ZMTYR == " ") /* If To PO ID not entered*/
      PC0ZW01.PCYTODT = PC0ZW00.PC0ZWRDT; /* To PO ID date*/
    end
  end
end // end PC0Z157

// Validate factory code
Function PC0Z158()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  VFCTY003.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  VFCTY003.FY1FCTYC = PC0ZW01.FY1FCTYC; /* Factory code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        converseLib.validationFailed(32); /* Invalid factory*/
        set PC0ZM001.FY1FCTYC cursor, bold; /* Highlight*/
        PC0ZM001.XXXPRCNM = "PC0Z158"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Z158"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VFCTY003.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKA2 = VFCTY003.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0ZW00.XXXPRCNM = "PC0Z158";
  exit stack;

end // end PC0Z158

// Edit style group - VSYCLR01
Function PC0Z159()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses the Production Style/Color Table*/
   /* and returns the row for a GPC/Style/Color/Dimension.*/

   /* XGPCD and SY1STNBR must be specified by*/
   /* the calling process in PG2REC.  The name of the calling*/
   /* process must be moved to TA1PGMNM in TA1REC, for Error*/
   /* Diagnosis Reporting.*/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the DB2 return code in SQLCA.SQLCODE and, if a normal*/
   /* return, the table row in PG2REC.*/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Select the row from Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SE", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* or row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or many rows found*/

      return; /* Return to previous process*/

    end

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0Z159 SELECT STYLE GROUP ROW";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/


end // end PC0Z159

// Process valid input request
Function PC0Z160()
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PC0ZS01(); /* Purge any temporary storage*/
  PC0ZW00.XXXTSPAG = 1; /* Request page 1*/
  PC0ZW00.PC0ZWSWR = "Y"; /* Request for data*/

   /* ------------------------------------------------------------*/
   /* Initialize PO # array*/
   /* ------------------------------------------------------------*/

  PC0ZW01.PC0ZWIXP = 1; /* Initialize PO # array index*/
  while (PC0ZW01.PC0ZWIXP <= 150) /* For each PO # in array*/
    PC0ZW01.PC3PONBR[PC0ZWIXP] = 0; /* Initialize PO #*/
    PC0ZW01.PC0ZWIXP = PC0ZW01.PC0ZWIXP + 1; /* Increment index*/
  end
  PC0ZW01.PC0ZWIXP = 1; /* Initialize PO # array index*/

   /* ------------------------------------------------------------*/
   /* Process valid input request.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.SY1STNBR != " ") /* If style entered*/
    if (converseVar.eventKey is pf6)
      PC0ZW00.PCWMAP = 2; /* Request P.O. items by style map*/
    else
      PC0ZW00.PCWMAP = 3; /* Request P.O. items by ID map*/
    end
    return;
  end

  if (converseVar.eventKey is pf6) /* If PF6 was pressed*/
  /* IF PC0ZW01.XGPCD EQ '03'        /* If apparel*/
  /* OR PC0ZW01.FY1FCTYC EQ ' '    /* or incomplete PO ID*/
  /* OR PC0ZW01.PC0ZMTYR NE ' ';   /* or P.O. ID range entered*/
  /* MOVE 'PC220D' TO PCZREC.PCZPGM;      /* Batch program = PC220d*/
  /* PC0ZS11;                      /* Call PC0D to print*/
  /* EZEFLO;                       /* Display map*/
  /* ELSE;*/
    PC0ZW00.PCWMAP = 2; /* Request P.O. items by style map*/
  /* END;*/
  else /* Else ENTER was pressed*/
    PC0ZW00.PCWMAP = 3; /* Request P.O. items by ID map*/
    if (PC0ZW01.PC0ZMTYR != " " /* If P.O. ID range entered*/
     || PC0ZW01.PC0ZMFM1 == " ") /* or season code without buy month*/
      PC0Z161(); /* Select count*/
      /* ------------------------------------------------------------*/
       /* If no rows obtained display error*/
      /* ------------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == -305 /* If no header found*/
       || PCYREC.PCYCOUNT == 0)      
        PC0ZW00.PCWMAP = 1; /* Selection screen*/
        converseLib.validationFailed(18); /* No data found to display*/
        PC0ZW00.XXXPRCNM = "PC0Z160"; /* Module identification*/
        return;
      end

      /* ------------------------------------------------------------*/
       /* If too many rows obtained display error*/
      /* ------------------------------------------------------------*/
      if (PCYREC.PCYCOUNT >= 150) /* If too many headers*/
        PC0ZW00.PCWMAP = 1; /* Selection screen*/
        converseLib.validationFailed(95); /* Too many rows found*/
        PC0ZW00.XXXPRCNM = "PC0Z160"; /* Module identification*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* IO to select and open VPOHDR02 ( P.O. ID verification )*/
   /* ------------------------------------------------------------*/

  PC0Z162(); /* Open cursor for VPOHDR02*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOHDR02 row, format & store data*/
   /* ------------------------------------------------------------*/

  while (PC0ZW00.PC0ZWDCF == "N" /* While more rows*/
   && PC0ZW01.PC0ZWIXP < 150) /* and index less than 100*/

    VPOHDR02.PO-REG-CD = PC0ZW00.PO-REG-CD; /* PO region*/
    PC0Z163(); /* Get next VPOHDR02 row*/

    if (PC0ZW00.PC0ZWDCF == "N") /* If more data obtained*/
      PC0ZW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO region*/
      PC0ZW01.PC3PONBR[PC0ZWIXP] = VPOHDR02.PC3PONBR; /* PO number*/
      PC0ZW01.PC0ZWIXP = PC0ZW01.PC0ZWIXP + 1; /* Increment line index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* IO to close VPOHDR02 set*/
   /* ------------------------------------------------------------*/

  VPOHDR02.PO-REG-CD = PC0ZW00.PO-REG-CD; /* PO region*/
  PC0Z164(); /* Close cursor VPOHDR02 row*/

   /* ------------------------------------------------------------*/
   /* If no rows obtained display error*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.PC0ZWIXP == 1) /* If no header found*/
    PC0ZW00.PCWMAP = 1; /* Selection screen*/
    converseLib.validationFailed(18); /* No data found to display*/
    PC0ZW00.XXXPRCNM = "PC0Z160"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* If too many rows obtained display error*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.PC0ZWIXP >= 150) /* If too many headers found*/
    PC0ZW00.PCWMAP = 1; /* Selection screen*/
    converseLib.validationFailed(95); /* Too many rows found*/
    PC0ZW00.XXXPRCNM = "PC0Z160"; /* Module identification*/
  end

  PC0ZW01.PC0ZWIXP = 1; /* Initialize PO # array index*/

end // end PC0Z160

// Select count PO HDR - VPOHDR01
Function PC0Z161()
   /* ----------------------------------------------------------*/
    /* Select count on the P.O. header*/
   /* ----------------------------------------------------------*/

  set VPOHDR02 empty; /* Initialize record*/
  set PCYREC empty; /* Initialize record*/
  PCYREC.PCYFUNC = "SC"; /* Select count*/
  PCYREC.PCYFRDT = PC0ZW01.PCYFRDT; /* From P.O. ID date*/
  PCYREC.PCYTODT = PC0ZW01.PCYTODT; /* To P.O. ID date*/

  VPOHDR02.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0ZW00.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC4ORTYP = PC0ZW01.PC4ORTYP; /* Type*/

  if (PC0ZW01.XGPCD == "03") /* If apparrel*/
    VPOHDR02.PCFSECD = PC0ZW01.PC0ZMFYR; /* Season code*/
  else
    VPOHDR02.PCFSECD = " "; /* Blank season code*/
  end

  if (PC0ZW01.FY1FCTYC != " ") /* If factory code entered*/
    VPOHDR02.FY1FCTYC = PC0ZW01.FY1FCTYC; /* Factory code*/
  else
    VPOHDR02.FY1FCTYC = "*"; /* Wildcard factory code*/
  end

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      return;
    end
  end


  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0Z161"; /* Process name*/
  TA1REC.TA1LOC = "SELECT COUNT ON PO HDR  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0ZW00.XXXPRCNM = "PC0Z161";
  exit stack;

end // end PC0Z161

// Select cursor PO HDR- VPOHDR01
Function PC0Z162()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Initialize record*/
  set PCYREC empty; /* Initialize record*/

   /* ------------------------------------------------------------*/
   /* Format the key values for select set*/
   /* ------------------------------------------------------------*/

  /* -------------------------------------------------------------------*/
  /* Instead of passing 'S2' pass 'S4' for getting all PO's with PO type*/
  /* -------------------------------------------------------------------*/
  /* MOVE 'S2' TO PCYREC.PCYFUNC;                    /* Select set*/
  PCYREC.PCYFUNC = "S4"; /* Select set*/
  PCYREC.PCYFRDT = PC0ZW01.PCYFRDT; /* From P.O. ID*/
  PCYREC.PCYTODT = PC0ZW01.PCYTODT; /* To P.O. ID*/

  VPOHDR02.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0ZW00.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC4ORTYP = PC0ZW01.PC4ORTYP; /* Type*/

  if (PC0ZW01.XGPCD == "03") /* If apparrel*/
    VPOHDR02.PCFSECD = PC0ZW01.PC0ZMFYR; /* Move season code*/
  else
    VPOHDR02.PCFSECD = " "; /* Blank season code*/
  end

  if (PC0ZM001.FY1FCTYC != " ")
                                   /* If factory code entered*/
    VPOHDR02.FY1FCTYC = PC0ZM001.FY1FCTYC; /* Factory code*/
  else
    VPOHDR02.FY1FCTYC = "*"; /* Wildcard factory code*/
  end

  if (PC0ZM001.YPUCD != " ")
                                   /* If factory code entered*/
    VPOHDR02.YPUCD = PC0ZM001.YPUCD; /* Status code*/
  else
    VPOHDR02.YPUCD = "*"; /* Wildcard satus code*/
  end

  if (PC0ZM001.XCTCD != " ")
                                   /* If country code entered*/
    VPOHDR02.XCTCD = PC0ZM001.XCTCD; /* country code*/
  else
    VPOHDR02.XCTCD = "*"; /* Wildcard country code*/
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  PC0ZW00.PC0ZWDCF = "N"; /* End of VPOHDR02 flag*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0Z162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOHDR02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Z162"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = VPOHDR02.PC3PONBR; /* Key field 2*/
  PC0ZW00.PC0ZWKN3 = VPOHDR02.PC3POIDT; /* Key field 3*/
  PC0ZW00.PC0ZWKA4 = VPOHDR02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Z162

// Fetch next PO HDR   - VPOHDR01
Function PC0Z163()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOHDR02.*/
   /* ------------------------------------------------------------*/

  /* -------------------------------------------------------------------*/
  /* Instead of passing 'N2' pass 'N4' for getting all PO's with PO type*/
  /* -------------------------------------------------------------------*/
  /* MOVE 'N2' TO PCYREC.PCYFUNC;      /* Function = fetch next*/
  PCYREC.PCYFUNC = "N4"; /* Function = fetch next*/
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0ZW00.PC0ZWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0Z163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Z163"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = VPOHDR02.PC3PONBR; /* Key field 2*/
  PC0ZW00.PC0ZWKN3 = VPOHDR02.PC3POIDT; /* Key field 3*/
  PC0ZW00.PC0ZWKA4 = VPOHDR02.PCFSECD; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Z163

// Close cursor PO HDR - VPOHDR01
Function PC0Z164()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  /* -------------------------------------------------------------------*/
  /* Instead of passing 'C2' pass 'C4' for getting all PO's with PO type*/
  /* -------------------------------------------------------------------*/
  /* MOVE 'C2' TO PCYREC.PCYFUNC;      /* Function = close*/
  PCYREC.PCYFUNC = "C4"; /* Function = close*/
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0Z164"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOHDR02 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0Z164"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0Z164

// Converse P.O. inquiry by style
Function PC0Z200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Z210(); /* Obtain the data to display*/

  PC0Z220(); /* Format and display the map*/

  PC0Z230(); /* Check attention identifier*/

  if (PC0ZW00.PCWMAP == 2) /* If map request has not changed*/

    PC0Z240(); /* Reset fields to normal intensity*/

    PC0Z250(); /* Verify the entered data*/

    PC0Z260(); /* Process valid input request*/

  end

end // end PC0Z200

// Obtain data to display
Function PC0Z210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0ZW00.PC0ZWSWR = "N"; /* display data switch*/
  set PC0ZW04 empty; /* initialize map storage record*/

   /* ------------------------------------------------------------*/
   /* Determine type of select to use for P.O. items - VPOITM01*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.SY1STNBR == " ") /* If style number not entered*/
    PC0ZW00.PC0ZWSET = "6"; /* Use 'S6' for select set*/
  else /* Else*/
    PC0ZW00.PC0ZWSET = "4"; /* Use 'S4' for select set*/
  end

  set VPOITM03 empty; /* Initialize item IO record*/
  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  PC0ZW00.PC0ZWIX3 = 1; /* Initialize PO item index*/
  if (PC0ZW01.SY1STNBR == " ") /* If style not entered*/
    /* ------------------------------------------------------------*/
     /* For each PO number in the array get the selected items*/
    /* ------------------------------------------------------------*/

    while (PC0ZW01.PC0ZWIXP < 100  /* While not end of array*/
     && PC0ZW00.PC0ZWIX3 <= 100 /* for about 100 items*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* and PO number in array*/

      VPOITM03.PC3PONBR = PC0ZW01.PC3PONBR[PC0ZWIXP]; /* PO number*/
      PC0Z211(); /* Select and fetch items*/

      PC0ZW01.PC0ZWIXP = PC0ZW01.PC0ZWIXP + 1; /* Increment PO # index*/
    end

  else /* Style was entered*/

    VPOITM03.PC3PONBR = -1; /* PO number*/
    PC0Z211(); /* Select and fetch items*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWIXM > 1) /* Page was formatted*/
    PC0ZS02(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0ZW00.XXXPRCNM = "PC0Z210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/

    exit stack; /* Exit to display map*/
  end
end // end PC0Z210

// Select & fetch items
Function PC0Z211()
   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM03 ( P.O. ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "S"; /* Specify select set*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS04(); /* Open cursor for VPOITM03*/
  PC0ZW00.PC0ZWTYP = "N"; /* Specify fetch next*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOITM03 row, format & store data*/
   /* ------------------------------------------------------------*/

  while (PC0ZW00.PC0ZWDCF == "N") /* While more rows*/

    PC0ZS05(); /* Get next VPOITM03 row*/


    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/

      PC0ZS20(); /* ===> Fetch next selected row loop*/

    end


    if (PC0ZW00.PC0ZWDCF == "N") /* If more data obtained*/
      if (PC0ZW01.XCTCD == VPOITM03.XCTCD /* If matching country*/
       || PC0ZW01.XCTCD == " ")           /* or country wildcard*/
        if (PC0ZW01.XDSCD == VPOITM03.XDSCD /* If matching direct ship*/
         || PC0ZW01.XDSCD == "*")           /* or direct ship wildcard*/
          if (VPOITM03.XDMCD != "00" /* If dimension code not = default*/
           || VPOITM03.XPGCD != "00" /* or package code not = default*/
           || VPOITM03.XOWCD != "00") /* or owner group code not = default*/
            if (PC0ZW00.PC0ZWIXM > 13) /* If 13 lines already stored*/
              PC0ZS02(); /* Add page to temporary storage*/
            end
            PC0Z212(); /* Move data to page storage*/
            PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
            PC0ZW00.XDMCD = VPOITM03.XDMCD; /* Dimension code*/
            PC0ZW00.XPGCD = VPOITM03.XPGCD; /* Packaging code*/
            PC0ZW00.XOWCD = VPOITM03.XOWCD; /* Owner group code*/
            PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "N"; /* Select code*/
            PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW00.PC0ZWLN2; /* Line*/
          else
            PC0Z212(); /* Move data to page storage*/
          end
          PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
          PC0ZW00.PC0ZWIX3 = PC0ZW00.PC0ZWIX3 + 1; /* Increment item index*/
          if (PC0ZW00.PC0ZWIXM > 13) /* Page is full*/
            PC0ZS02(); /* Add page to temporary storage*/
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* IO to close VPOITM03 set*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "C"; /* Specify Close cursor*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS06(); /* Close cursor VPOITM03 row*/

end // end PC0Z211

// Move data to map page storage
Function PC0Z212()
  PC0ZW04.PC6ITMNB[PC0ZWIXM] = VPOITM03.PC6ITMNB;
                                   /* Item sequence number*/
  PC0ZW04.PCFSECD[PC0ZWIXM] = VPOITM03.PCFSECD; /* PO ID season code*/
  PC0ZW04.FY1FCTYC[PC0ZWIXM] = VPOITM03.FY1FCTYC; /* Factory*/
  PC0ZW04.PC3POIDT[PC0ZWIXM] = VPOITM03.PC3POIDT; /* PO ID*/
  PC0ZW04.SY1STNBR[PC0ZWIXM] = VPOITM03.SY1STNBR; /* Style*/
  PC0ZW04.XDMCD[PC0ZWIXM] = VPOITM03.XDMCD; /* Dimension*/
  PC0ZW04.XQACD[PC0ZWIXM] = VPOITM03.XQACD; /* Quality*/
  PC0ZW04.XOWCD[PC0ZWIXM] = VPOITM03.XOWCD; /* Owner group code*/
  PC0ZW04.PC2INSEG[PC0ZWIXM] = VPOITM03.PC2INSEG; /* Spec difference*/
  PC0ZW04.XPGCD[PC0ZWIXM] = VPOITM03.XPGCD; /* Packaging type*/
  PC0ZW04.XUMCD[PC0ZWIXM] = VPOITM03.XUMCD; /* Unit of measure*/
  PC0ZW04.PC6ETSDT[PC0ZWIXM] = VPOITM03.PC6ETSDT; /* ETS date*/
  PC0ZW04.PC6PLAN[PC0ZWIXM] = VPOITM03.PC6PLAN; /* Product plan number*/

  PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "Y"; /* Selectable line*/

  PC0ZW02.PC0ZWLIN = " "; /* Init map line*/
  if (PC0ZW00.PC0ZWIXM == 1 /* If first line of map*/
   || VPOITM03.SY1STNBR != PC0ZW00.SY1STNBR) /* or style ^= save style*/
    PC0ZW02.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
    PC0ZW00.SY1STNBR = VPOITM03.SY1STNBR; /* Save style*/
  end
  PC0ZW00.PC0ZWCNM = VPOITM03.PC3POIDT; /* convert po id date*/
  PC0ZW02.PC0ZWPOD = PC0ZW00.PC0ZWCNM; /* PO ID date*/
  if (PC0ZW01.XGPCD == "03") /* If apparel*/
    PC0ZW02.PCFSECD = VPOITM03.PCFSECD; /* Season code*/
  end
  PC0ZW02.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
  PC0ZW02.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  PC0ZW02.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PC0ZW02.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  PC0ZW02.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
  PC0ZW02.PC0ZWNBR = VPOITM03.PC3PONBR; /* PO number*/
  PC0ZW00.PC0ZWTXT = PC0ZW02.PC0ZWNBA; /* Text field to stip zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW02.PC0ZWNBA = PC0ZW00.PC0ZWTXT; /* Replace numeric field*/
  PC0ZW02.PC0ZWPL = VPOITM03.PC6PLAN; /* PO plan*/
  PC0ZW02.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
  PC0ZW02.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  if (VPOITM03.PC6PETS != 0) /* PETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6PETS; /* convert pets*/
    PC0ZW02.PC0ZWPET = PC0ZW00.PC0ZWCNM; /* PETS*/
  end
  if (VPOITM03.PC6ETSDT != 0) /* ETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6ETSDT; /* convert ets*/
    PC0ZW02.PC0ZWETS = PC0ZW00.PC0ZWCNM; /* ETS*/
  end
  if (VPOITM03.PC6RTADT != 0) /* RTA not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6RTADT; /* convert rta*/
    PC0ZW02.PC0ZWRTA = PC0ZW00.PC0ZWCNM; /* RTA*/
  end
  PC0ZW02.PC0ZWORD = VPOITM03.PC6TORDE; /* Quantity on order*/
  PC0ZW00.PC0ZWTXT = PC0ZW02.PC0ZWODA; /* Text field to stip zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW02.PC0ZWODA = PC0ZW00.PC0ZWTXT; /* Replace numeric field*/

  set PCPREC empty; /* Init date record*/
  PCPREC.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  PCPREC.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PCPREC.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  PCPREC.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
  PCPREC.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  PCPREC.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS*/
  PCPREC.PC6RTADT = VPOITM03.PC6RTADT; /* RTA*/
  PCPREC.PC6ETALF = VPOITM03.PC6ETALF; /* ETAL Default Flag*/
  PCPREC.PC4ORTYP = VPOITM03.PC4ORTYP; /* Order type*/
  PCPREC.PCPPOIDT = VPOITM03.PC3POIDT; /* P.O. ID Date W.S.*/
  PCPREC.YSMXDV = VPOITM03.YSMXDV; /* division*/
  XSPCS05(); /* Calculate ETA & ETAL*/
  if (PCPREC.PCPETADT != 0) /* ETA not = 0*/
    PC0ZW00.PC0ZWCNM = PCPREC.PCPETADT; /* convert eta*/
    PC0ZW02.PC0ZWETA = PC0ZW00.PC0ZWCNM; /* ETA*/
  end
  if (VPOITM03.PC6OETAL != 0) /* If ETAL override not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6OETAL; /* convert etal override*/
    PC0ZW02.PC0ZWETL = PC0ZW00.PC0ZWCNM; /* ETAL override*/
    PC0ZW02.PC0ZWSTR = "*"; /* Star override date*/
  else
    if (PCPREC.PCPETALD != 0) /* ETAL not = 0*/
      PC0ZW00.PC0ZWCNM = PCPREC.PCPETALD; /* convert etal*/
      PC0ZW02.PC0ZWETL = PC0ZW00.PC0ZWCNM; /* ETAL*/
    end
  end

  PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW02.PC0ZWLIN; /* Map detail line*/
end // end PC0Z212

// Converse PO ID inq map 002
Function PC0Z220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the detail lines to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/
    if (converseVar.eventKey is pa2) /* If clear*/
  /* OR EZEAID IS PF20;            /* or print request*/
      converseLib.clearScreen();
       /* Reset field values*/
    else
      PC0Z221(); /* Format the data to display*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If map cleared, format selection data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM002.PC0ZMFYR == " ") /* If map cleared*/
    PC0Z222(); /* Format the selections to display*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0ZM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0ZM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0ZM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0ZM002.XXXPRCNM = PC0ZW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0ZM002 alarm; /* Indicate sound alarm*/
  end

  converse PC0ZM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0ZW00.XXXPRCNM = "PC0Z"; /* Module identification*/
  COMMAREA.CATOAP = PC0ZM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0ZM002.CAITEM; /* Application data*/

end // end PC0Z220

// Format detail lines to display
Function PC0Z221()
   /* ------------------------------------------------------------*/
   /* Clear map fields*/
   /* ------------------------------------------------------------*/

  set PC0ZM002 initial; /* M002 input/output area*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0ZW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW00.XXXTSPAG > PC0ZW00.TA5TSQIX) /* Desired greater highest*/
        PC0ZW00.XXXTSPAG = PC0ZW00.TA5TSQIX; /* Default to highest*/
      end

      PC0ZS03(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize line index*/

  while (PC0ZW00.PC0ZWIXM <= 14 /* Until screen is full*/
   && PC0ZW04.PC0ZWLIN[PC0ZWIXM] > " ") /* or end of data*/

    if (PC0ZW00.PC0ZWIXM == 1) /* First select field*/
      set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, normal; /* Position cursor*/
    else
      if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y")
        set PC0ZM002.PC0ZMSEL[PC0ZWIXM] normal; /* Unprotect*/
      end
    end

    PC0ZM002.PC0ZMLIN[PC0ZWIXM] = PC0ZW04.PC0ZWLIN[PC0ZWIXM];

    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment line index*/

  end

  if (PC0ZW04.PC0ZWLIN[14] == " " /* If last line is blank*/
   && PC0ZW04.PC0ZWLIN[13] == " ") /* and next to last blank*/
    if (PC0ZW00.XXXTSPAG != PC0ZW00.TA5TSQIX /* If current page not = last*/
     || PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)    
                                   /* or more PO numbers in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  else
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX /* If current page = last*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)     /* and more PO #s in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  end
end // end PC0Z221

// Format selections to display
Function PC0Z222()
   /* ------------------------------------------------------------*/
   /* Format the selection data for map.*/
   /* ------------------------------------------------------------*/

  PC0ZM002.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Page number*/
  PC0ZM002.TA5TSQIX = PC0ZW00.TA5TSQIX; /* of pages*/
  if (PC0ZW01.PC0ZMFYR != " ") /* If not blank*/
    PC0ZM002.PC0ZMFYR = PC0ZW01.PC0ZMFYR; /* From PO ID year*/
  end
  if (PC0ZW01.PC0ZMFM1 != " ") /* If not blank*/
    PC0ZM002.PC0ZMFM1 = PC0ZW01.PC0ZMFM1; /* From PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMFM2 != " ") /* If not blank*/
    PC0ZM002.PC0ZMFM2 = PC0ZW01.PC0ZMFM2; /* From PO ID dlv month*/
  end
  if (PC0ZW01.PC0ZMTYR != " ") /* If not blank*/
    PC0ZM002.PC0ZMTYR = PC0ZW01.PC0ZMTYR; /* To PO ID year*/
  end
  if (PC0ZW01.PC0ZMTM1 != " ") /* If not blank*/
    PC0ZM002.PC0ZMTM1 = PC0ZW01.PC0ZMTM1; /* To PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMTM2 != " ") /* If not blank*/
    PC0ZM002.PC0ZMTM2 = PC0ZW01.PC0ZMTM2; /* To PO ID dlv month*/
  end
  PC0ZM002.FY1FCTYC[1] = PC0ZW01.FY1FCTYC; /* From factory*/
  PC0ZM002.FY1FCTYC[2] = PC0ZW01.FY1FCTYC; /* To factory*/
  PC0ZM002.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  PC0ZM002.SY2CLRID = PC0ZW01.SY2CLRID; /* Color*/
  PC0ZM002.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  PC0ZM002.PC2CUXID = PC0ZW01.PC2CUXID; /* Cust xref*/
  PC0ZM002.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PC0ZM002.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PC0ZM002.XDMCD = PC0ZW01.XDMCD; /* Dimension*/
  PC0ZM002.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  PC0ZM002.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference*/
  PC0ZM002.XPGCD = PC0ZW01.XPGCD; /* Packaging type*/
  PC0ZM002.XCTCD = PC0ZW01.XCTCD; /* Country*/
  PC0ZM002.XPRCD = PC0ZW01.XPRCD; /* Product type*/
  PC0ZM002.XPLCD = PC0ZW01.XPLCD; /* Product line*/
  PC0ZM002.XPCCD = PC0ZW01.XPCCD; /* Product category*/
  PC0ZM002.YPUCD = PC0ZW01.YPUCD; /* Item status*/
  PC0ZM002.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PC0ZM002.XDSCD = PC0ZW01.XDSCD; /* Direct ship*/
  PC0ZM002.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country*/
  PC0ZM002.YSMXDV = PC0ZW01.YSMXDV; /* Division*/

end // end PC0Z222

// Check attention identifiers
Function PC0Z230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PCWREC*/
      PC0ZS01(); /* purge temporary storage*/
      XSPCS01(); /* transfer*/
      PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
      set PC0ZM002.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z230"; /* Module identification*/
      set PC0ZM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0ZM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to factory menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0ZS01(); /* purge temporary storage*/
    XSPCS01(); /* transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf12  
   && converseVar.eventKey not pf18)
  /* AND EZEAID NOT PF20;*/
    PC0ZW00.XXXPRCNM = "PC0Z230"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for selection map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0ZS01(); /* purge temporary storage*/
    PC0ZW00.PCWMAP = 1; /* Request selection map*/
    PC0ZS19(); /* Init select fields*/
  end

end // end PC0Z230

// Reset highlighted fields
Function PC0Z240()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0ZM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0ZM002.CAITEM initialAttributes; /* Commarea application data*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  while (PC0ZW00.PC0ZWIXM <= 14) /* For each map line*/
    if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y") /* If seletable field*/
      set PC0ZM002.PC0ZMSEL[PC0ZWIXM] normal; /* Line selection field*/
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
  end
end // end PC0Z240

// Verify the entered data
Function PC0Z250()
   /* ------------------------------------------------------------*/
   /* No selection verification required if print requested.*/
   /* ------------------------------------------------------------*/

  /* IF EZEAID IS PF20;                /* If print request*/
  /* EZERTN;                         /* Return to calling process*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Verify the scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0ZW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
      exit stack; /* Display map*/
    else
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX) /* if no more pages*/
      if (PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* If more PO #s exist*/
        PC0ZW00.PC0ZWSWR = "Y"; /* Request for data*/
      else
        PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
        PCWREC.XXXMSGNO = 3; /* No more pages to display*/
        exit stack; /* Display map*/
      end
    end
    return;
  end

  set PCWREC empty; /* Initialize PCWREC*/

   /* ------------------------------------------------------------*/
   /* Check each selection for validity.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 14; /* Initialize map index*/
  PC0ZW00.PC0ZMSEL = "N"; /* Initialize selection flag*/
  while (PC0ZW00.PC0ZWIXM >= 1) /* For each map detail line*/
    if (PC0ZM002.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
      if (PC0ZW00.PC0ZMSEL == "Y") /* If selection already made*/
        if (converseVar.eventKey is pf18) /* If global update selected*/
          converseLib.validationFailed(144); /* Only 1 selection allowed*/
          PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
          set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        else
          if (converseVar.eventKey is enter /* If enter selected*/
           && PC0ZM002.XGPCD == "03")       /* and apparel*/
            converseLib.validationFailed(144); /* Only 1 selection allowed*/
            PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
            set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
          end
        end
      end
      PC0ZW00.PC0ZMSEL = "Y"; /* Set selection flag*/
      PC0ZW02.PC0ZWLIN = PC0ZM002.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/

      /* ------------------------------------------------------------*/
       /* Check that only duplicate destinations have been selected.*/
      /* ------------------------------------------------------------*/

      PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
      while (PCWREC.PCWDEST[PC0ZWIX2] != " ")
                                   /* While destinations in PCWREC*/
        if (PC0ZW02.XWHCD == PCWREC.PCWWHSE[PC0ZWIX2]    /* If warehouse same*/
         && PC0ZW02.PC2CUXID == PCWREC.PCWCUST[PC0ZWIX2] /* & cust same*/
         && converseVar.eventKey not pf12)               /* and not maint selected*/
          converseLib.validationFailed(107);
                                   /* Cannot request duplicate destinations*/
          PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
          set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
        PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
      end

      /* ------------------------------------------------------------*/
       /* Check that duplicate products have not been selected.*/
      /* ------------------------------------------------------------*/

      if (PCWREC.SY1STNBR != " " /* If one already selected*/
       && converseVar.eventKey not pf12) /* and not maint selected*/
        if (PC0ZW02.SY1STNBR != PCWREC.SY1STNBR     /* If different style*/
         || PC0ZW02.SY2CLRID != PCWREC.SY2CLRID     /* or different color*/
         || PC0ZW04.XDMCD[PC0ZWIXM] != PCWREC.XDMCD /* or dif dimension*/
         || PC0ZW04.XQACD[PC0ZWIXM] != PCWREC.XQACD /* or dif quality*/
         || PC0ZW04.XOWCD[PC0ZWIXM] != PCWREC.XOWCD /* or dif owner grp*/
         || PC0ZW04.XPGCD[PC0ZWIXM] != PCWREC.XPGCD /* or dif package*/
         || PC0ZW04.XUMCD[PC0ZWIXM] != PCWREC.XUMCD) /* or dif unit meas*/
          converseLib.validationFailed(96); /* Cannot request different styles*/
          PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
          set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Check that duplicate PO numbers have not been selected.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW02.PC0ZWNBR != PCWREC.PC3PONBR /* If different PO number*/
       && PCWREC.PC3PONBR != 0)               /* and PO # already selected*/
        converseLib.validationFailed(106); /* Cannot request different PO numbers*/
        PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
        set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* Save selected info in PCWREC to compare to next selection.*/
      /* ------------------------------------------------------------*/

      PCWREC.PC3PONBR = PC0ZW02.PC0ZWNBR; /* PO number*/
      PCWREC.SY1STNBR = PC0ZW02.SY1STNBR; /* Style number*/
      PCWREC.SY2CLRID = PC0ZW02.SY2CLRID; /* Color*/
      PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
      PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality*/
      PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner grp*/
      PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec dif*/
      PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Package*/
      PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit meas*/
      PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW02.XWHCD; /* Warehouse*/
      PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW02.PC2CUXID; /* Cust xref*/
    else
      if (PC0ZM002.PC0ZMSEL[PC0ZWIXM] != " ") /* If other than 's'*/
        converseLib.validationFailed(13); /* Only 's' can be used for select*/
        PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
        set PC0ZM002.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM - 1; /* Decrement map line index*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
    set PC0ZM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

  if (converseVar.validationMsgNum != 0) /* If errors*/
    exit stack; /* Display error*/
  else
    if (PC0ZW00.PC0ZMSEL == "N") /* If no lines selected*/
      converseLib.validationFailed(25); /* No selection made*/
      PC0ZW00.XXXPRCNM = "PC0Z250"; /* Module identification*/
      set PC0ZM002.PC0ZMSEL[1] cursor; /* Position cursor at first line*/
      exit stack; /* Display error*/
    end
  end

end // end PC0Z250

// Process valid input request
Function PC0Z260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG - 1; /* Decrement page number*/

    exit stack; /* Display previous page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG + 1; /* Increment page number*/

    exit stack; /* Display next page*/

  end

   /* ------------------------------------------------------------*/
   /* Process valid input request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)
    PCZREC.PCZPGM = "PC221D"; /* Program to submit*/
    PC0ZS11(); /* Call PC0D to print*/
  else

    set PCWREC empty; /* Initialize PCWREC*/

    PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
    while (PC0ZW00.PC0ZWIXM <= 14) /* For each map detail line*/
      if (PC0ZM002.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
        PC0ZW02.PC0ZWLIN = PC0ZM002.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/
        PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
        while (PCWREC.PCWDEST[PC0ZWIX2] != " ") /* While dest in PCWREC*/
          PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
        end
        PC0Z261(); /* Format the PCWREC*/
      end
      PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map line index*/
    end
    if (converseVar.eventKey is enter)
      if (PCWREC.XGPCD == "03")
        COMMAREA.CATOAP = "PC0U"; /* transfer PO ID inquiry detail*/
      else
        COMMAREA.CATOAP = "PC0R"; /* transfer PO ID inquiry detail*/
      end
    else
      if (PCWREC.PO-REG-CD == PC0ZW00.PO-REG-CD) /* usa po*/
        PCWREC.PCWFNC[1] = "C"; /* allow change function*/
      else
        PCWREC.PCWFNC[1] = "I"; /* allow inquire function*/
      end
      if (converseVar.eventKey is pf18)
        COMMAREA.CATOAP = "PC0O"; /* transfer Global update*/
      else
        COMMAREA.CATOAP = "PC0K"; /* transfer Product Inq/Maint*/
      end
    end

    PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Save current page number*/
    PCWREC.PCWMAP = PC0ZW00.PCWMAP; /* Save map number*/
    PCWREC.PCWUSER1 = PC0ZW01.PC0ZW1GP;
                                   /* Save selections in userarea*/
    PCWREC.CAFROMAP[1] = "PC0Z"; /* Identify this ap to next*/
    PC0ZS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  end


end // end PC0Z260

// Format the PCWREC for transfer
Function PC0Z261()
   /* ------------------------------------------------------------*/
   /* Format the PCWREC for transfer.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Current temp storage page*/

  PCWREC.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PCWREC.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PCWREC.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PCWREC.YSMXDV = PC0ZW01.YSMXDV; /* Division*/
  PCWREC.XDSCD = PC0ZW01.XDSCD; /* Direct ship code*/

  PCWREC.PO-REG-CD = PC0ZW01.PO-REG-CD; /* PO region*/
  PCWREC.PC3PONBR = PC0ZW02.PC0ZWNBR; /* PO number*/
  PCWREC.PC2CUXID = PC0ZW02.PC2CUXID; /* Cust xref*/
  if (PC0ZW01.XGPCD == "03" /* If apparel*/
   && converseVar.eventKey is enter)
    PCWREC.SY2CLRID = " "; /* Wildcard color*/
  else
    PCWREC.SY2CLRID = PC0ZW02.SY2CLRID; /* Color*/
  end
  PCWREC.YMTCD = PC0ZW02.YMTCD; /* YMT mode code*/
  PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW02.XWHCD; /* Warehouse*/
  PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW02.PC2CUXID; /* Cust xref*/

  PCWREC.PC3POIDT = PC0ZW04.PC3POIDT[PC0ZWIXM]; /* PO ID*/
  PCWREC.FY1FCTYC = PC0ZW04.FY1FCTYC[PC0ZWIXM]; /* Factory*/
  PCWREC.SY1STNBR = PC0ZW04.SY1STNBR[PC0ZWIXM]; /* Style*/
  PCWREC.PCFSECD = PC0ZW04.PCFSECD[PC0ZWIXM]; /* Season code*/
  PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
  PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality code*/
  PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner group code*/
  PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec difference*/
  PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Packaging type*/
  PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit of measure*/
  PCWREC.PC6ETSDT = PC0ZW04.PC6ETSDT[PC0ZWIXM]; /* ETS date*/
  PCWREC.PC6PLAN = PC0ZW04.PC6PLAN[PC0ZWIXM]; /* Product plan number*/
  PCWREC.PC6ITMNB[PC0ZWIX2] = PC0ZW04.PC6ITMNB[PC0ZWIXM];
                                   /* Item seq #*/
end // end PC0Z261

// Converse P.O. inquiry by PO ID
Function PC0Z300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Z310(); /* Obtain the data to display*/

  PC0Z320(); /* Format and display the map*/

  PC0Z330(); /* Check attention identifier*/

  if (PC0ZW00.PCWMAP == 3) /* If map request has not changed*/

    PC0Z340(); /* Reset fields to normal intensity*/

    PC0Z350(); /* Verify the entered data*/

    PC0Z360(); /* Process valid input request*/

  end

end // end PC0Z300

// Obtain data to display
Function PC0Z310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0ZW00.PC0ZWSWR = "N"; /* display data switch*/
  set PC0ZW04 empty; /* intialize the map storage record*/

   /* ------------------------------------------------------------*/
   /* Determine type of select to use for P.O. items - VPOITM03*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.SY1STNBR == " ") /* If style number not entered*/
    PC0ZW00.PC0ZWSET = "6"; /* Use 'S6' for select set*/
  else /* Else*/
    PC0ZW00.PC0ZWSET = "5"; /* Use 'S5' for select set*/
  end

  set VPOITM03 empty; /* Initialize item IO record*/
  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  PC0ZW00.PC0ZWIX3 = 1; /* Initialize PO item index*/
  if (PC0ZW01.SY1STNBR == " ") /* If style not entered*/
    /* ------------------------------------------------------------*/
     /* For each PO number in the array get the selected items*/
    /* ------------------------------------------------------------*/

    while (PC0ZW01.PC0ZWIXP < 100  /* While not end of array*/
     && PC0ZW00.PC0ZWIX3 <= 100 /* for about 100 items*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* and PO number in array*/

      VPOITM03.PC3PONBR = PC0ZW01.PC3PONBR[PC0ZWIXP]; /* PO number*/
      PC0Z311(); /* Select and fetch items*/

      PC0ZW01.PC0ZWIXP = PC0ZW01.PC0ZWIXP + 1; /* Increment PO # index*/
    end

  else /* Style was entered*/

    VPOITM03.PC3PONBR = -1; /* PO number*/
    PC0Z311(); /* Select and fetch items*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWIXM > 1) /* Page was formatted*/
    PC0ZS02(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0ZW00.XXXPRCNM = "PC0Z310"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/

    exit stack; /* Exit to display map*/
  end
end // end PC0Z310

// Select & fetch items
Function PC0Z311()
   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM03 ( P.O. ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "S"; /* Specify select set*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS04(); /* Open cursor for VPOITM03*/
  PC0ZW00.PC0ZWTYP = "N"; /* Specify fetch next*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOITM03 row, format & store data*/
   /* ------------------------------------------------------------*/

  while (PC0ZW00.PC0ZWDCF == "N") /* While more rows*/

    PC0ZS05(); /* Get next VPOITM03 row*/


    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/
      PC0ZS20(); /* ===> Fetch next selected row loop*/
    end


    if (PC0ZW00.PC0ZWDCF == "N") /* If more data obtained*/
      if (PC0ZW01.XCTCD == VPOITM03.XCTCD /* If matching country*/
       || PC0ZW01.XCTCD == " ")           /* or country wildcard*/
        if (PC0ZW01.XDSCD == VPOITM03.XDSCD /* If matching direct ship*/
         || PC0ZW01.XDSCD == "*")           /* or direct ship wildcard*/
          if (PC0ZW01.XGPCD == "03") /* Apparell only*/
            if (PC0ZW01.YPUCD == " ") /* Request is for all statuses*/
              if (VPOITM03.PC6STAT == "CX" /* Status is cancelled*/
               && VPOITM03.XXXUSRID > " ") /* User cancelled only*/
                PC0Z313(); /* Move data to page storage*/
              else
                if (VPOITM03.PC6STAT != "CX")
                  PC0Z313(); /* Move data to page storage*/
                end
              end
            else
              if (PC0ZW01.YPUCD == "CX"
               && VPOITM03.XXXUSRID > " ")
                PC0Z313(); /* Move data to page storage*/
              else
                if (PC0ZW01.YPUCD != "CX")
                  PC0Z313(); /* Move data to page storage*/
                end
              end
            end
          else
            PC0Z313(); /* Move data to page storage*/
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* IO to close VPOITM03 set*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "C"; /* Specify Close cursor*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS06(); /* Close cursor VPOITM03 row*/

end // end PC0Z311

// Move data to map page storage
Function PC0Z312()
  PC0ZW04.PC6ITMNB[PC0ZWIXM] = VPOITM03.PC6ITMNB;
                                   /* Item sequence number*/
  PC0ZW04.PCFSECD[PC0ZWIXM] = VPOITM03.PCFSECD; /* PO ID season code*/
  PC0ZW04.PC3POIDT[PC0ZWIXM] = VPOITM03.PC3POIDT; /* PO ID*/
  PC0ZW04.FY1FCTYC[PC0ZWIXM] = VPOITM03.FY1FCTYC; /* Factory*/
  PC0ZW04.SY1STNBR[PC0ZWIXM] = VPOITM03.SY1STNBR; /* Style*/
  PC0ZW04.XDMCD[PC0ZWIXM] = VPOITM03.XDMCD; /* Dimension*/
  PC0ZW04.XQACD[PC0ZWIXM] = VPOITM03.XQACD; /* Quality*/
  PC0ZW04.XOWCD[PC0ZWIXM] = VPOITM03.XOWCD; /* Owner group code*/
  PC0ZW04.PC2INSEG[PC0ZWIXM] = VPOITM03.PC2INSEG; /* Spec difference*/
  PC0ZW04.XPGCD[PC0ZWIXM] = VPOITM03.XPGCD; /* Packaging type*/
  PC0ZW04.XUMCD[PC0ZWIXM] = VPOITM03.XUMCD; /* Unit of measure*/
  PC0ZW04.PC6ETSDT[PC0ZWIXM] = VPOITM03.PC6ETSDT; /* ETS date*/
  PC0ZW04.PC6RTADT[PC0ZWIXM] = VPOITM03.PC6RTADT; /* RTA date*/
  PC0ZW04.PC6PLAN[PC0ZWIXM] = VPOITM03.PC6PLAN; /* Product plan number*/
  PC0ZW04.OP1CUOID[PC0ZWIXM] = VPOITM03.OP1CUOID;
  PC0ZW04.OP1NORID[PC0ZWIXM] = VPOITM03.OP1NORID;

  PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "Y"; /* Selectable line*/

  PC0ZW03.PC0ZWLIN = " "; /* Init map line*/
  if (PC0ZW00.PC0ZWIXM == 1                 /* If first line of map*/
   || VPOITM03.PC3POIDT != PC0ZW00.PC3POIDT /* or PO ID ^= save ID*/
   || VPOITM03.FY1FCTYC != PC0ZW00.FY1FCTYC) /* or factory ^= save*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC3POIDT; /* convert po id date*/
    PC0ZW03.PC0ZWPOD = PC0ZW00.PC0ZWCNM; /* PO ID date*/
    if (PC0ZW01.XGPCD == "03") /* If apparel*/
      PC0ZW03.PCFSECD = VPOITM03.PCFSECD; /* Season code*/
    end
    PC0ZW03.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
    PC0ZW00.PC3POIDT = VPOITM03.PC3POIDT; /* Save PO ID date*/
    PC0ZW00.FY1FCTYC = VPOITM03.FY1FCTYC; /* Save Factory code*/
  end
  PC0ZW03.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
  PC0ZW03.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  PC0ZW03.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PC0ZW03.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  if (PC0ZM001.YPUCD == "*X" /* Cancelled status*/
   || PC0ZW01.YPUCD == "*X") /* Cancelled status*/
    if (VPOITM03.XXXUSRID == " ")
      PC0ZW03.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
    else
      PC0ZW03.PC6STAT = "UX"; /* User cancelled*/
    end
  else
    PC0ZW03.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
  end
  PC0ZW03.PC0ZWNBR = VPOITM03.PC3PONBR; /* PO number*/
  PC0ZW00.PC0ZWTXT = PC0ZW03.PC0ZWNBA; /* Field to strip leading zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW03.PC0ZWNBA = PC0ZW00.PC0ZWTXT; /* Replace numeric fields*/
  PC0ZW03.PC0ZWPL = VPOITM03.PC6PLAN; /* PO plan*/
  PC0ZW03.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  if (VPOITM03.PC6PETS != 0) /* PETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6PETS; /* convert pets*/
    PC0ZW03.PC0ZWPET = PC0ZW00.PC0ZWCNM; /* PETS*/
  end
  if (VPOITM03.PC6ETSDT != 0) /* ETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6ETSDT; /* convert ets*/
    PC0ZW03.PC0ZWETS = PC0ZW00.PC0ZWCNM; /* ETS*/
  end
  if (VPOITM03.PC6RTADT != 0) /* RTA not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6RTADT; /* convert rta*/
    PC0ZW03.PC0ZWRTA = PC0ZW00.PC0ZWCNM; /* RTA*/
  end
  PC0ZW03.PC0ZWORD = VPOITM03.PC6TORDE; /* Quantity on order*/
  PC0ZW00.PC0ZWTXT = PC0ZW03.PC0ZWODA; /* Field to strip leading zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW03.PC0ZWODA = PC0ZW00.PC0ZWTXT; /* Replace numeric fields*/

  set PCPREC empty; /* Init date record*/
  PCPREC.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  PCPREC.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PCPREC.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  PCPREC.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
  PCPREC.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  PCPREC.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS*/
  PCPREC.PC6RTADT = VPOITM03.PC6RTADT; /* RTA*/
  PCPREC.PC6ETALF = VPOITM03.PC6ETALF; /* ETAL Default Flag*/
  PCPREC.PC4ORTYP = VPOITM03.PC4ORTYP; /* Order type*/
  PCPREC.PCPPOIDT = VPOITM03.PC3POIDT; /* P.O. ID Date W.S.*/
  PCPREC.YSMXDV = VPOITM03.YSMXDV; /* division*/
  XSPCS05(); /* Calculate ETA & ETAL*/
  if (PCPREC.PCPETADT != 0) /* ETA not = 0*/
    PC0ZW00.PC0ZWCNM = PCPREC.PCPETADT; /* convert eta*/
    PC0ZW03.PC0ZWETA = PC0ZW00.PC0ZWCNM; /* ETA*/
  end
  if (VPOITM03.PC6OETAL != 0) /* If ETAL override not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6OETAL; /* convert etal override*/
    PC0ZW03.PC0ZWETL = PC0ZW00.PC0ZWCNM; /* ETAL override*/
    PC0ZW03.PC0ZWSTR = "*"; /* Star override date*/
  else
    if (PCPREC.PCPETALD != 0) /* ETAL not = 0*/
      PC0ZW00.PC0ZWCNM = PCPREC.PCPETALD; /* convert etal*/
      PC0ZW03.PC0ZWETL = PC0ZW00.PC0ZWCNM; /* ETAL*/
    end
  end

  PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW03.PC0ZWLIN; /* Map detail line*/
end // end PC0Z312

// Move data to page storage
Function PC0Z313()
  if (VPOITM03.XDMCD != "00" /* If dimension code not = default*/
   || VPOITM03.XPGCD != "00" /* or package code not = default*/
   || VPOITM03.XOWCD != "00") /* or owner group code not = default*/
    if (PC0ZW00.PC0ZWIXM > 13) /* If 13 lines already stored*/
      PC0ZS02(); /* Add page to temporary storage*/
    end
    PC0Z312(); /* Move data to page storage*/
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
    PC0ZW00.XDMCD = VPOITM03.XDMCD; /* Dimension code*/
    PC0ZW00.XPGCD = VPOITM03.XPGCD; /* Packaging code*/
    PC0ZW00.XOWCD = VPOITM03.XOWCD; /* Owner group code*/
    PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "N"; /* Select code*/
    PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW00.PC0ZWLIN; /* Line*/
  else
    PC0Z312(); /* Move data to page storage*/
  end
  PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
  PC0ZW00.PC0ZWIX3 = PC0ZW00.PC0ZWIX3 + 1; /* Increment item index*/
  if (PC0ZW00.PC0ZWIXM > 13) /* Page is full*/
    PC0ZS02(); /* Add page to temporary storage*/
  end

end // end PC0Z313

// Converse PO ID inq map 003
Function PC0Z320()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/
    if (converseVar.eventKey is pa2) /* If clear*/
  /* OR EZEAID IS PF20;            /* or print request*/
      converseLib.clearScreen();
       /* Reset field values*/
    else
      PC0Z321(); /* Format data to display*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If map cleared, format the selection data.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM003.PC0ZMFYR == " ") /* If map cleared*/
    PC0Z322(); /* Format selections to display*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0ZM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0ZM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0ZM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0ZM003.XXXPRCNM = PC0ZW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0ZM003 alarm; /* Indicate sound alarm*/
  end

  converse PC0ZM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0ZW00.XXXPRCNM = "PC0Z"; /* Module identification*/
  COMMAREA.CATOAP = PC0ZM003.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0ZM003.CAITEM; /* Application data*/

end // end PC0Z320

// Format detail lines to display
Function PC0Z321()
   /* ------------------------------------------------------------*/
   /* Clear map fields*/
   /* ------------------------------------------------------------*/

  set PC0ZM003 initial; /* M002 input/output area*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0ZW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW00.XXXTSPAG > PC0ZW00.TA5TSQIX) /* Desired greater highest*/
        PC0ZW00.XXXTSPAG = PC0ZW00.TA5TSQIX; /* Default to highest*/
      end

      PC0ZS03(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize line index*/

  while (PC0ZW00.PC0ZWIXM <= 14 /* Until screen is full*/
   && PC0ZW04.PC0ZWLIN[PC0ZWIXM] > " ") /* or end of data*/

    if (PC0ZW00.PC0ZWIXM == 1) /* First select field*/
      set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, normal; /* Position cursor*/
    else
      if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y")
        set PC0ZM003.PC0ZMSEL[PC0ZWIXM] normal; /* Unprotect*/
      end
    end

    PC0ZM003.PC0ZMLIN[PC0ZWIXM] = PC0ZW04.PC0ZWLIN[PC0ZWIXM];

    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment line index*/

  end

  if (PC0ZW04.PC0ZWLIN[14] == " " /* If last line is blank*/
   && PC0ZW04.PC0ZWLIN[13] == " ") /* & next to last blank*/
    if (PC0ZW00.XXXTSPAG != PC0ZW00.TA5TSQIX /* If current page not = last*/
     || PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)    
                                   /* or more PO numbers in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  else
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX /* If current page = last*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)     /* and more PO #s in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  end
end // end PC0Z321

// Format selections to display
Function PC0Z322()
   /* ------------------------------------------------------------*/
   /* Format the selection data for map.*/
   /* ------------------------------------------------------------*/

  PC0ZM003.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Page number*/
  PC0ZM003.TA5TSQIX = PC0ZW00.TA5TSQIX; /* of pages*/
  if (PC0ZW01.PC0ZMFYR != " ") /* If not blank*/
    PC0ZM003.PC0ZMFYR = PC0ZW01.PC0ZMFYR; /* From PO ID year*/
  end
  if (PC0ZW01.PC0ZMFM1 != " ") /* If not blank*/
    PC0ZM003.PC0ZMFM1 = PC0ZW01.PC0ZMFM1; /* From PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMFM2 != " ") /* If not blank*/
    PC0ZM003.PC0ZMFM2 = PC0ZW01.PC0ZMFM2; /* From PO ID dlv month*/
  end
  if (PC0ZW01.PC0ZMTYR != " ") /* If not blank*/
    PC0ZM003.PC0ZMTYR = PC0ZW01.PC0ZMTYR; /* To PO ID year*/
  end
  if (PC0ZW01.PC0ZMTM1 != " ") /* If not blank*/
    PC0ZM003.PC0ZMTM1 = PC0ZW01.PC0ZMTM1; /* To PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMTM2 != " ") /* If not blank*/
    PC0ZM003.PC0ZMTM2 = PC0ZW01.PC0ZMTM2; /* To PO ID dlv month*/
  end
  PC0ZM003.FY1FCTYC[1] = PC0ZW01.FY1FCTYC; /* From factory*/
  PC0ZM003.FY1FCTYC[2] = PC0ZW01.FY1FCTYC; /* To factory*/
  PC0ZM003.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  PC0ZM003.SY2CLRID = PC0ZW01.SY2CLRID; /* Color*/
  PC0ZM003.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  PC0ZM003.PC2CUXID = PC0ZW01.PC2CUXID; /* Cust xref*/
  PC0ZM003.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PC0ZM003.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PC0ZM003.XDMCD = PC0ZW01.XDMCD; /* Dimension*/
  PC0ZM003.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  PC0ZM003.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference*/
  PC0ZM003.XPGCD = PC0ZW01.XPGCD; /* Packaging type*/
  PC0ZM003.XCTCD = PC0ZW01.XCTCD; /* Country*/
  PC0ZM003.XPRCD = PC0ZW01.XPRCD; /* Product type*/
  PC0ZM003.XPLCD = PC0ZW01.XPLCD; /* Product line*/
  PC0ZM003.XPCCD = PC0ZW01.XPCCD; /* Product category*/
  if (PC0ZW01.YPUCD == "CX") /* Cancelled status*/
    if (PC0ZM001.YPUCD == "*X") /* User cancelled*/
      PC0ZM003.YPUCD = "*X"; /* saved status*/
    else
      PC0ZM003.YPUCD = PC0ZW01.YPUCD; /* Item status*/
    end
  else
    PC0ZM003.YPUCD = PC0ZW01.YPUCD; /* Item status*/
  end
  PC0ZM003.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PC0ZM003.XDSCD = PC0ZW01.XDSCD; /* Direct ship*/
  PC0ZM003.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country*/
  PC0ZM003.YSMXDV = PC0ZW01.YSMXDV; /* Division*/

end // end PC0Z322

// Check attention identifiers
Function PC0Z330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PCWREC*/
      PC0ZS01(); /* purge temporary storage*/
      XSPCS01(); /* transfer*/
      PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
      set PC0ZM003.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z330"; /* Module identification*/
      set PC0ZM003.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0ZM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to factory menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0ZS01(); /* purge temporary storage*/
    XSPCS01(); /* transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf12  
   && converseVar.eventKey not pf18)
  /* AND EZEAID NOT PF20;*/
    PC0ZW00.XXXPRCNM = "PC0Z330"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for selection map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0ZS01(); /* purge temporary storage*/
    PC0ZW00.PCWMAP = 1; /* Request selection map*/
    PC0ZS19(); /* Init select fields*/
  end

  if (converseVar.eventKey is pf11) /* If PF11*/
    PC0ZS01(); /* purge temporary storage*/
    PC0ZW00.PCWMAP = 4; /* Request selection map*/
    PC0ZW00.PC0ZWSWR = "Y"; /* Set obtain data switch*/
  end

end // end PC0Z330

// Reset highlighted fields
Function PC0Z340()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0ZM003.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0ZM003.CAITEM initialAttributes; /* Commarea application data*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  while (PC0ZW00.PC0ZWIXM <= 14) /* For each map line*/
    if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y") /* If selectable field*/
      set PC0ZM003.PC0ZMSEL[PC0ZWIXM] normal; /* Line selection field*/
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
  end
end // end PC0Z340

// Verify the entered data
Function PC0Z350()
   /* ------------------------------------------------------------*/
   /* No selection verification required for print request.*/
   /* ------------------------------------------------------------*/

  /* IF EZEAID IS PF20;                /* If print request*/
  /* EZERTN;                                /* Return to calling process*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Verify the scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0ZW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
      exit stack; /* Display map*/
    else
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX) /* and no more pages*/
      if (PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* If more PO #s exist*/
        PC0ZW00.PC0ZWSWR = "Y"; /* Request for data*/
      else
        PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
        PCWREC.XXXMSGNO = 3; /* No more pages to display*/
        exit stack; /* Display map*/
      end
    end
    return;
  end

  set PCWREC empty; /* Initialize PCWREC*/

   /* ------------------------------------------------------------*/
   /* Check each selection for validity.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 14; /* Initialize map index*/
  PC0ZW00.PC0ZMSEL = "N"; /* Intialize selection flag*/
  while (PC0ZW00.PC0ZWIXM >= 1) /* For each map detail line*/
    if (PC0ZM003.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
      if (PC0ZW00.PC0ZMSEL == "Y") /* If selection already made*/
        if (converseVar.eventKey is pf18) /* If global update selected*/
          converseLib.validationFailed(144); /* Only 1 selection allowed*/
          PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
          set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        else
          if (converseVar.eventKey is enter /* If enter selected*/
           && PC0ZM003.XGPCD == "03")       /* and apparel*/
            converseLib.validationFailed(144); /* Only 1 selection allowed*/
            PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
            set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
          end
        end
      end
      PC0ZW00.PC0ZMSEL = "Y"; /* Intialize selection flag*/
      PC0ZW03.PC0ZWLIN = PC0ZM003.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/

      /* ------------------------------------------------------------*/
       /* Check that duplicate destinations have not been selected.*/
      /* ------------------------------------------------------------*/

      PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
      while (PCWREC.PCWDEST[PC0ZWIX2] != " ")
                                   /* While destinations in PCWREC*/
        if (PC0ZW03.XWHCD == PCWREC.PCWWHSE[PC0ZWIX2]    /* If warehouse same*/
         && PC0ZW03.PC2CUXID == PCWREC.PCWCUST[PC0ZWIX2] /* & cust same*/
         && converseVar.eventKey not pf12)               /* and not maint selected*/
          converseLib.validationFailed(107);
                                   /* Cannot request duplicate destinations*/
          PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
          set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
        PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
      end

      /* ------------------------------------------------------------*/
       /* Check that only duplicate products have been selected.*/
      /* ------------------------------------------------------------*/

      if (PCWREC.SY1STNBR != " " /* If one already selected*/
       && converseVar.eventKey not pf12)
                                   /* and not maint selected*/
        if (PC0ZW03.SY1STNBR != PCWREC.SY1STNBR     /* If different style*/
         || PC0ZW03.SY2CLRID != PCWREC.SY2CLRID     /* or different color*/
         || PC0ZW04.XDMCD[PC0ZWIXM] != PCWREC.XDMCD /* or dif dimension*/
         || PC0ZW04.XQACD[PC0ZWIXM] != PCWREC.XQACD /* or dif quality*/
         || PC0ZW04.XOWCD[PC0ZWIXM] != PCWREC.XOWCD /* or dif owner grp*/
         || PC0ZW04.XPGCD[PC0ZWIXM] != PCWREC.XPGCD /* or dif package*/
         || PC0ZW04.XUMCD[PC0ZWIXM] != PCWREC.XUMCD) /* or dif unit meas*/
          converseLib.validationFailed(96); /* Cannot request different products*/
          PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
          set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Check that only duplicate PO numbers have been selected.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW03.PC0ZWNBR != PCWREC.PC3PONBR /* If different PO number*/
       && PCWREC.PC3PONBR != 0)               /* and PO # already selected*/
        converseLib.validationFailed(106); /* Cannot request different PO numbers*/
        PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
        set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* Save selected info in PCWREC to compare to next selection.*/
      /* ------------------------------------------------------------*/

      PCWREC.PC3PONBR = PC0ZW03.PC0ZWNBR; /* PO number*/
      PCWREC.SY1STNBR = PC0ZW03.SY1STNBR; /* Style number*/
      PCWREC.SY2CLRID = PC0ZW03.SY2CLRID; /* Color*/
      PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
      PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality*/
      PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner grp*/
      PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec dif*/
      PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Package*/
      PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit meas*/
      PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW03.XWHCD; /* Warehouse*/
      PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW03.PC2CUXID; /* Cust xref*/
    else
      if (PC0ZM003.PC0ZMSEL[PC0ZWIXM] != " ") /* If other than 's'*/
        converseLib.validationFailed(13); /* Only 'S' can be used for select*/
        PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
        set PC0ZM003.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM - 1; /* Decrement map line index*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
    set PC0ZM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

  if (converseVar.validationMsgNum != 0) /* If error*/
    exit stack; /* Display error*/
  else
    if (PC0ZW00.PC0ZMSEL == "N") /* If no lines selected*/
      converseLib.validationFailed(25); /* No lines selected*/
      PC0ZW00.XXXPRCNM = "PC0Z350"; /* Module identification*/
      set PC0ZM003.PC0ZMSEL cursor; /* Position cursor at first line*/
      exit stack; /* Display error*/
    end
  end
end // end PC0Z350

// Process valid input request
Function PC0Z360()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG - 1; /* Decrement page number*/

    exit stack; /* Display previous page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG + 1; /* Increment page number*/

    exit stack; /* Display next page*/

  end

   /* ------------------------------------------------------------*/
   /* Process valid input request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)
    PCZREC.PCZPGM = "PC221D"; /* Program to submit*/
    PC0ZS11(); /* Call PC0D to print*/
  else

    set PCWREC empty; /* Initialize PCWREC*/

    PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
    while (PC0ZW00.PC0ZWIXM <= 14) /* For each map detail line*/
      if (PC0ZM003.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
        PC0ZW03.PC0ZWLIN = PC0ZM003.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/
        PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
        while (PCWREC.PCWDEST[PC0ZWIX2] != " ") /* While dest in PCWREC*/
          PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
        end
        PC0Z361(); /* Format the PCWREC*/
      end
      PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map line index*/
    end

    if (converseVar.eventKey is enter)
      if (PCWREC.XGPCD == "03")
        COMMAREA.CATOAP = "PC0U"; /* transfer PO ID inquiry detail*/
      else
        COMMAREA.CATOAP = "PC0R"; /* transfer PO ID inquiry detail*/
      end
    else
      if (PCWREC.PO-REG-CD == PC0ZW00.PO-REG-CD) /* usa pos*/
        PCWREC.PCWFNC[1] = "C"; /* allow change function*/
      else
        PCWREC.PCWFNC[1] = "I"; /* allow inquire function*/
      end
      if (converseVar.eventKey is pf18)
        COMMAREA.CATOAP = "PC0O"; /* transfer Global update*/
      else
        COMMAREA.CATOAP = "PC0K"; /* transfer Product Inq/Maint*/
      end
    end

    PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Save current page number*/
    PCWREC.PCWMAP = PC0ZW00.PCWMAP; /* Save map number*/
    PCWREC.PCWUSER1 = PC0ZW01.PC0ZW1GP;
                                   /* Save selections in userarea*/
    PCWREC.CAFROMAP[1] = "PC0Z"; /* Identify ap to next*/
    PC0ZS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  end

end // end PC0Z360

// Format the PCWREC for transfer
Function PC0Z361()
   /* ------------------------------------------------------------*/
   /* Format the PCWREC for transfer.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Current temp storage page*/

  PCWREC.PO-REG-CD = PC0ZW01.PO-REG-CD; /* PO region*/
  PCWREC.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PCWREC.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PCWREC.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PCWREC.YSMXDV = PC0ZW01.YSMXDV; /* Division*/
  PCWREC.XDSCD = PC0ZW01.XDSCD; /* Direct ship code*/
  if (PC0ZW01.YPUCD == "*X" /* Direct ship code*/
   || PC0ZW00.YPUCD == "*X") /* Direct ship code*/
    PCWREC.PC6STAT = "*X"; /* Direct ship code*/
  end

  PCWREC.PC3PONBR = PC0ZW03.PC0ZWNBR; /* PO number*/

  PCWREC.PC2CUXID = PC0ZW03.PC2CUXID; /* Cust xref*/
  if (PC0ZW01.XGPCD == "03" /* If apparel*/
   && converseVar.eventKey is enter)
    PCWREC.SY2CLRID = " "; /* Wildcard color*/
  else
    PCWREC.SY2CLRID = PC0ZW03.SY2CLRID; /* Color*/
  end
  PCWREC.YMTCD = PC0ZW03.YMTCD; /* YMT mode code*/
  PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW03.XWHCD; /* Warehouse*/
  PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW03.PC2CUXID; /* Cust xref*/

  PCWREC.PC3POIDT = PC0ZW04.PC3POIDT[PC0ZWIXM]; /* PO ID*/
  PCWREC.SY1STNBR = PC0ZW04.SY1STNBR[PC0ZWIXM]; /* Style*/
  PCWREC.FY1FCTYC = PC0ZW04.FY1FCTYC[PC0ZWIXM]; /* Factory*/
  PCWREC.PCFSECD = PC0ZW04.PCFSECD[PC0ZWIXM]; /* Season code*/
  PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
  PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality code*/
  PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner group code*/
  PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec difference*/
  PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Packaging type*/
  PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit of measure*/
  PCWREC.PC6ETSDT = PC0ZW04.PC6ETSDT[PC0ZWIXM]; /* ETS date*/
  PCWREC.PC6RTADT = PC0ZW04.PC6RTADT[PC0ZWIXM]; /* RTA date*/
  PCWREC.PC6PLAN = PC0ZW04.PC6PLAN[PC0ZWIXM]; /* Product plan number*/
  PCWREC.PC6ITMNB[PC0ZWIX2] = PC0ZW04.PC6ITMNB[PC0ZWIXM];
                                   /* Item seq #*/
  PCWREC.PCWUSER4 = PC0ZW04.PC0ZW4SO[PC0ZWIXM]; /* SO#*/
end // end PC0Z361

// Converse P.O. inquiry by PO ID
Function PC0Z400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0Z410(); /* Obtain the data to display*/

  PC0Z420(); /* Format and display the map*/

  PC0Z430(); /* Check attention identifier*/

  if (PC0ZW00.PCWMAP == 4) /* If map request has not changed*/

    PC0Z440(); /* Reset fields to normal intensity*/

    PC0Z450(); /* Verify the entered data*/

    PC0Z460(); /* Process valid input request*/

  end

end // end PC0Z400

// Obtain data to display
Function PC0Z410()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWSWR == "N" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* error found*/
    return; /* return to previous process*/
  end

  PC0ZW00.PC0ZWSWR = "N"; /* display data switch*/
  set PC0ZW04 empty; /* intialize the map storage record*/

   /* ------------------------------------------------------------*/
   /* Determine type of select to use for P.O. items - VPOITM03*/
   /* ------------------------------------------------------------*/

  if (PC0ZW01.SY1STNBR == " ") /* If style number not entered*/
    PC0ZW00.PC0ZWSET = "6"; /* Use 'S6' for select set*/
  else /* Else*/
    PC0ZW00.PC0ZWSET = "5"; /* Use 'S5' for select set*/
  end

  set VPOITM03 empty; /* Initialize item IO record*/
  PC0ZW01.PC0ZWIXP = 1; /* Initialize po nbr index*/
  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  PC0ZW00.PC0ZWIX3 = 1; /* Initialize PO item index*/
  if (PC0ZW01.SY1STNBR == " ") /* If style not entered*/
    /* ------------------------------------------------------------*/
     /* For each PO number in the array get the selected items*/
    /* ------------------------------------------------------------*/

    while (PC0ZW01.PC0ZWIXP < 100  /* While not end of array*/
     && PC0ZW00.PC0ZWIX3 <= 100 /* for about 100 items*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* and PO number in array*/

      VPOITM03.PC3PONBR = PC0ZW01.PC3PONBR[PC0ZWIXP]; /* PO number*/
      PC0Z411(); /* Select and fetch items*/

      PC0ZW01.PC0ZWIXP = PC0ZW01.PC0ZWIXP + 1; /* Increment PO # index*/
    end

  else /* Style was entered*/

    VPOITM03.PC3PONBR = -1; /* PO number*/
    PC0Z411(); /* Select and fetch items*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.PC0ZWIXM > 1) /* Page was formatted*/
    PC0ZS02(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0ZW00.XXXPRCNM = "PC0Z410"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/

    exit stack; /* Exit to display map*/
  end
end // end PC0Z410

// Select & fetch items
Function PC0Z411()
   /* ------------------------------------------------------------*/
   /* IO to select and open VPOITM03 ( P.O. ITEM TABLE )*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "S"; /* Specify select set*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS04(); /* Open cursor for VPOITM03*/
  PC0ZW00.PC0ZWTYP = "N"; /* Specify fetch next*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/

   /* ------------------------------------------------------------*/
   /* Fetch each VPOITM03 row, format & store data*/
   /* ------------------------------------------------------------*/

  while (PC0ZW00.PC0ZWDCF == "N") /* While more rows*/

    PC0ZS05(); /* Get next VPOITM03 row*/


    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/
      PC0ZS20(); /* ===> Fetch next selected row loop*/
    end


    if (PC0ZW00.PC0ZWDCF == "N") /* If more data obtained*/
      if (PC0ZW01.XCTCD == VPOITM03.XCTCD /* If matching country*/
       || PC0ZW01.XCTCD == " ")           /* or country wildcard*/
        if (PC0ZW01.XDSCD == VPOITM03.XDSCD /* If matching direct ship*/
         || PC0ZW01.XDSCD == "*")           /* or direct ship wildcard*/
          if (PC0ZW01.XGPCD == "03") /* Apparell only*/
            if (PC0ZW01.YPUCD == " ") /* Request is for all statuses*/
              if (VPOITM03.PC6STAT == "CX" /* Status is cancelled*/
               && VPOITM03.XXXUSRID > " ") /* User cancelled only*/
                PC0Z413(); /* Move data to page storage*/
              else
                if (VPOITM03.PC6STAT != "CX")
                  PC0Z413(); /* Move data to page storage*/
                end
              end
            else
              if (PC0ZW01.YPUCD == "CX"
               && VPOITM03.XXXUSRID > " ")
                PC0Z413(); /* Move data to page storage*/
              else
                if (PC0ZW01.YPUCD != "CX")
                  PC0Z413(); /* Move data to page storage*/
                end
              end
            end
          else
            PC0Z413(); /* Move data to page storage*/
          end
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* IO to close VPOITM03 set*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWTYP = "C"; /* Specify Close cursor*/
  PCYREC.PCYFUNC = PC0ZW00.PCYFUNC; /* Select function*/
  PC0ZS06(); /* Close cursor VPOITM03 row*/

end // end PC0Z411

// Move data to map page storage
Function PC0Z412()
  PC0ZW04.PC6ITMNB[PC0ZWIXM] = VPOITM03.PC6ITMNB;
                                   /* Item sequence number*/
  PC0ZW04.PCFSECD[PC0ZWIXM] = VPOITM03.PCFSECD; /* PO ID season code*/
  PC0ZW04.PC3POIDT[PC0ZWIXM] = VPOITM03.PC3POIDT; /* PO ID*/
  PC0ZW04.FY1FCTYC[PC0ZWIXM] = VPOITM03.FY1FCTYC; /* Factory*/
  PC0ZW04.SY1STNBR[PC0ZWIXM] = VPOITM03.SY1STNBR; /* Style*/
  PC0ZW04.XDMCD[PC0ZWIXM] = VPOITM03.XDMCD; /* Dimension*/
  PC0ZW04.XQACD[PC0ZWIXM] = VPOITM03.XQACD; /* Quality*/
  PC0ZW04.XOWCD[PC0ZWIXM] = VPOITM03.XOWCD; /* Owner group code*/
  PC0ZW04.PC2INSEG[PC0ZWIXM] = VPOITM03.PC2INSEG; /* Spec difference*/
  PC0ZW04.XPGCD[PC0ZWIXM] = VPOITM03.XPGCD; /* Packaging type*/
  PC0ZW04.XUMCD[PC0ZWIXM] = VPOITM03.XUMCD; /* Unit of measure*/
  PC0ZW04.PC6ETSDT[PC0ZWIXM] = VPOITM03.PC6ETSDT; /* ETS date*/
  PC0ZW04.PC6PLAN[PC0ZWIXM] = VPOITM03.PC6PLAN; /* Product plan number*/
  PC0ZW04.OP1CUOID[PC0ZWIXM] = VPOITM03.OP1CUOID; /* cust order id*/
  PC0ZW04.OP1NORID[PC0ZWIXM] = VPOITM03.OP1NORID; /* nike sub-order*/
  PC0ZW04.PC6RTADT[PC0ZWIXM] = VPOITM03.PC6RTADT; /* RTA date*/

  PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "Y"; /* Selectable line*/

  PC0ZW06.PC0ZWLIN = " "; /* Init map line*/
  if (PC0ZW00.PC0ZWIXM == 1                 /* If first line of map*/
   || VPOITM03.PC3POIDT != PC0ZW00.PC3POIDT /* or PO ID ^= save ID*/
   || VPOITM03.FY1FCTYC != PC0ZW00.FY1FCTYC) /* or factory ^= save*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC3POIDT; /* convert po id date*/
    PC0ZW06.PC0ZWPOD = PC0ZW00.PC0ZWCNM; /* PO ID date*/
    if (PC0ZW01.XGPCD == "03") /* If apparel*/
      PC0ZW06.PCFSECD = VPOITM03.PCFSECD; /* Season code*/
    end
    PC0ZW06.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
    PC0ZW00.PC3POIDT = VPOITM03.PC3POIDT; /* Save PO ID date*/
    PC0ZW00.FY1FCTYC = VPOITM03.FY1FCTYC; /* Save Factory code*/
  end
  PC0ZW06.SY1STNBR = VPOITM03.SY1STNBR; /* Style*/
  PC0ZW06.SY2CLRID = VPOITM03.SY2CLRID; /* Color*/
  PC0ZW06.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PC0ZW06.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  if (PC0ZM001.YPUCD == "*X" /* Cancelled status*/
   || PC0ZW01.YPUCD == "*X") /* Cancelled status*/
    if (VPOITM03.XXXUSRID == " ")
      PC0ZW06.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
    else
      PC0ZW06.PC6STAT = "UX"; /* User cancelled*/
    end
  else
    PC0ZW06.PC6STAT = VPOITM03.PC6STAT; /* Item status*/
  end
  PC0ZW06.PC0ZWNBR = VPOITM03.PC3PONBR; /* PO number*/
  PC0ZW00.PC0ZWTXT = PC0ZW06.PC0ZWNBA; /* Field to strip leading zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW06.PC0ZWNBA = PC0ZW00.PC0ZWTXT; /* Replace numeric fields*/
  PC0ZW06.PC0ZWPL = VPOITM03.PC6PLAN; /* PO plan*/
  PC0ZW06.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  if (VPOITM03.PC6PETS != 0) /* PETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6PETS; /* convert pets*/
    PC0ZW06.PC0ZWPET = PC0ZW00.PC0ZWCNM; /* PETS*/
  end
  if (VPOITM03.PC6ETSDT != 0) /* ETS not = 0*/
    PC0ZW00.PC0ZWCNM = VPOITM03.PC6ETSDT; /* convert ets*/
    PC0ZW06.PC0ZWETS = PC0ZW00.PC0ZWCNM; /* ETS*/
  end
  PC0ZW06.PC0ZWORD = VPOITM03.PC6TORDE; /* Quantity on order*/
  PC0ZW00.PC0ZWTXT = PC0ZW06.PC0ZWODA; /* Field to strip leading zeros*/
  PC0ZS18(); /* Strip leading zeros*/
  PC0ZW06.PC0ZWODA = PC0ZW00.PC0ZWTXT; /* Replace numeric fields*/
  if (VPOITM03.OP1CUOID != 0)
    PC0ZW00.PC0ZWCOR = VPOITM03.OP1CUOID; /* cust order id*/
    PC0ZW00.PC0ZWDOT = "."; /* seperator*/
    PC0ZW00.PC0ZWNOR = VPOITM03.OP1NORID; /* nike order id*/
    PC0ZW06.PC0ZWSOR = PC0ZW00.PC0ZWSOR; /* Nike Sales Order*/
  else
    PC0ZW00.PC0ZWSOR = " "; /* Nike Sales Order*/
    PC0ZW06.PC0ZWSOR = " "; /* Nike Sales Order*/
  end

  set PCPREC empty; /* Init date record*/
  PCPREC.XGPCD = VPOITM03.XGPCD; /* GPC code*/
  PCPREC.XWHCD = VPOITM03.XWHCD; /* Warehouse*/
  PCPREC.PC2CUXID = VPOITM03.PC2CUXID; /* Cust xref*/
  PCPREC.FY1FCTYC = VPOITM03.FY1FCTYC; /* Factory code*/
  PCPREC.YMTCD = VPOITM03.YMTCD; /* YMT mode*/
  PCPREC.PC6ETSDT = VPOITM03.PC6ETSDT; /* ETS*/
  PCPREC.PC6RTADT = VPOITM03.PC6RTADT; /* RTA*/
  PCPREC.PC6ETALF = VPOITM03.PC6ETALF; /* ETAL Default Flag*/
  PCPREC.PC4ORTYP = VPOITM03.PC4ORTYP; /* Order type*/
  PCPREC.PCPPOIDT = VPOITM03.PC3POIDT; /* P.O. ID Date W.S.*/
  PCPREC.YSMXDV = VPOITM03.YSMXDV; /* division*/

  PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW06.PC0ZWLIN; /* Map detail line*/
end // end PC0Z412

// Move data to page storage
Function PC0Z413()
  if (VPOITM03.XDMCD != "00" /* If dimension code not = default*/
   || VPOITM03.XPGCD != "00" /* or package code not = default*/
   || VPOITM03.XOWCD != "00") /* or owner group code not = default*/
    if (PC0ZW00.PC0ZWIXM > 13) /* If 13 lines already stored*/
      PC0ZS02(); /* Add page to temporary storage*/
    end
    PC0Z412(); /* Move data to page storage*/
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
    PC0ZW00.XDMCD = VPOITM03.XDMCD; /* Dimension code*/
    PC0ZW00.XPGCD = VPOITM03.XPGCD; /* Packaging code*/
    PC0ZW00.XOWCD = VPOITM03.XOWCD; /* Owner group code*/
    PC0ZW04.PC0ZWSEL[PC0ZWIXM] = "N"; /* Select code*/
    PC0ZW04.PC0ZWLIN[PC0ZWIXM] = PC0ZW00.PC0ZWLIN; /* Line*/
  else
    PC0Z412(); /* Move data to page storage*/
  end
  PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
  PC0ZW00.PC0ZWIX3 = PC0ZW00.PC0ZWIX3 + 1; /* Increment item index*/
  if (PC0ZW00.PC0ZWIXM > 13) /* Page is full*/
    PC0ZS02(); /* Add page to temporary storage*/
  end

end // end PC0Z413

// Converse PO ID inq map 004
Function PC0Z420()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/
    if (converseVar.eventKey is pa2) /* If clear*/
  /* OR EZEAID IS PF20;            /* or print request*/
      converseLib.clearScreen();
       /* Reset field values*/
    else
      PC0Z421(); /* Format data to display*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If map cleared, format the selection data.*/
   /* ------------------------------------------------------------*/

  if (PC0ZM004.PC0ZMFYR == " ") /* If map cleared*/
    PC0Z422(); /* Format selections to display*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0ZM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0ZM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0ZM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0ZM004.XXXPRCNM = PC0ZW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0ZM004 alarm; /* Indicate sound alarm*/
  end

  converse PC0ZM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0ZW00.XXXPRCNM = "PC0Z"; /* Module identification*/
  COMMAREA.CATOAP = PC0ZM004.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0ZM004.CAITEM; /* Application data*/

end // end PC0Z420

// Format detail lines to display
Function PC0Z421()
   /* ------------------------------------------------------------*/
   /* Clear map fields*/
   /* ------------------------------------------------------------*/

  set PC0ZM004 initial; /* M004 input/output area*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0ZW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0ZW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW00.XXXTSPAG > PC0ZW00.TA5TSQIX) /* Desired greater highest*/
        PC0ZW00.XXXTSPAG = PC0ZW00.TA5TSQIX; /* Default to highest*/
      end

      PC0ZS03(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize line index*/

  while (PC0ZW00.PC0ZWIXM <= 14 /* Until screen is full*/
   && PC0ZW04.PC0ZWLIN[PC0ZWIXM] > " ") /* or end of data*/

    if (PC0ZW00.PC0ZWIXM == 1) /* First select field*/
      set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, normal; /* Position cursor*/
    else
      if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y")
        set PC0ZM004.PC0ZMSEL[PC0ZWIXM] normal; /* Unprotect*/
      end
    end

    PC0ZM004.PC0ZMLIN[PC0ZWIXM] = PC0ZW04.PC0ZWLIN[PC0ZWIXM];

    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment line index*/

  end

  if (PC0ZW04.PC0ZWLIN[14] == " " /* If last line is blank*/
   && PC0ZW04.PC0ZWLIN[13] == " ") /* & next to last blank*/
    if (PC0ZW00.XXXTSPAG != PC0ZW00.TA5TSQIX /* If current page not = last*/
     || PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)    
                                   /* or more PO numbers in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  else
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX /* If current page = last*/
     && PC0ZW01.PC3PONBR[PC0ZWIXP] != 0)     /* and more PO #s in array*/
      PCWREC.XXXMSGNO = 153; /* PF8 to see next group*/
    end
  end
end // end PC0Z421

// Format selections to display
Function PC0Z422()
   /* ------------------------------------------------------------*/
   /* Format the selection data for map.*/
   /* ------------------------------------------------------------*/

  PC0ZM004.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Page number*/
  PC0ZM004.TA5TSQIX = PC0ZW00.TA5TSQIX; /* of pages*/
  if (PC0ZW01.PC0ZMFYR != " ") /* If not blank*/
    PC0ZM004.PC0ZMFYR = PC0ZW01.PC0ZMFYR; /* From PO ID year*/
  end
  if (PC0ZW01.PC0ZMFM1 != " ") /* If not blank*/
    PC0ZM004.PC0ZMFM1 = PC0ZW01.PC0ZMFM1; /* From PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMFM2 != " ") /* If not blank*/
    PC0ZM004.PC0ZMFM2 = PC0ZW01.PC0ZMFM2; /* From PO ID dlv month*/
  end
  if (PC0ZW01.PC0ZMTYR != " ") /* If not blank*/
    PC0ZM004.PC0ZMTYR = PC0ZW01.PC0ZMTYR; /* To PO ID year*/
  end
  if (PC0ZW01.PC0ZMTM1 != " ") /* If not blank*/
    PC0ZM004.PC0ZMTM1 = PC0ZW01.PC0ZMTM1; /* To PO ID buy month*/
  end
  if (PC0ZW01.PC0ZMTM2 != " ") /* If not blank*/
    PC0ZM004.PC0ZMTM2 = PC0ZW01.PC0ZMTM2; /* To PO ID dlv month*/
  end
  PC0ZM004.FY1FCTYC[1] = PC0ZW01.FY1FCTYC; /* From factory*/
  PC0ZM004.FY1FCTYC[2] = PC0ZW01.FY1FCTYC; /* To factory*/
  PC0ZM004.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  PC0ZM004.SY2CLRID = PC0ZW01.SY2CLRID; /* Color*/
  PC0ZM004.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  PC0ZM004.PC2CUXID = PC0ZW01.PC2CUXID; /* Cust xref*/
  PC0ZM004.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PC0ZM004.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PC0ZM004.XDMCD = PC0ZW01.XDMCD; /* Dimension*/
  PC0ZM004.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  PC0ZM004.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference*/
  PC0ZM004.XPGCD = PC0ZW01.XPGCD; /* Packaging type*/
  PC0ZM004.XCTCD = PC0ZW01.XCTCD; /* Country*/
  PC0ZM004.XPRCD = PC0ZW01.XPRCD; /* Product type*/
  PC0ZM004.XPLCD = PC0ZW01.XPLCD; /* Product line*/
  PC0ZM004.XPCCD = PC0ZW01.XPCCD; /* Product category*/
  if (PC0ZW01.YPUCD == "CX") /* Cancelled status*/
    if (PC0ZM001.YPUCD == "*X") /* User cancelled*/
      PC0ZM004.YPUCD = "*X"; /* saved status*/
    else
      PC0ZM004.YPUCD = PC0ZW01.YPUCD; /* Item status*/
    end
  else
    PC0ZM004.YPUCD = PC0ZW01.YPUCD; /* Item status*/
  end
  PC0ZM004.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PC0ZM004.XDSCD = PC0ZW01.XDSCD; /* Direct ship*/
  PC0ZM004.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country*/
  PC0ZM004.YSMXDV = PC0ZW01.YSMXDV; /* Division*/

end // end PC0Z422

// Check attention identifiers
Function PC0Z430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PCWREC*/
      PC0ZS01(); /* purge temporary storage*/
      XSPCS01(); /* transfer*/
      PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
      set PC0ZM004.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0ZW00.XXXPRCNM = "PC0Z430"; /* Module identification*/
      set PC0ZM004.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0ZM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main  menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to factory menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0ZS01(); /* purge temporary storage*/
    XSPCS01(); /* transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf3   
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf12  
   && converseVar.eventKey not pf18)
  /* AND EZEAID NOT PF20;*/
    PC0ZW00.XXXPRCNM = "PC0Z430"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle request for selection map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0ZS01(); /* purge temporary storage*/
    PC0ZW00.PCWMAP = 1; /* Request selection map*/
    PC0ZS19(); /* Init select fields*/
  end


  if (converseVar.eventKey is pf10) /* If PF10*/
    PC0ZS01(); /* purge temporary storage*/
    PC0ZW00.PCWMAP = 3; /* Request selection map*/
    PC0ZW00.PC0ZWSWR = "Y"; /* Set obtain data switch*/
    PC0ZW01.PC0ZWIXP = 1; /* Set po nbr array index*/
  end

end // end PC0Z430

// Reset highlighted fields
Function PC0Z440()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0ZM004.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0ZM004.CAITEM initialAttributes; /* Commarea application data*/

  PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
  while (PC0ZW00.PC0ZWIXM <= 14) /* For each map line*/
    if (PC0ZW04.PC0ZWSEL[PC0ZWIXM] == "Y") /* If selectable field*/
      set PC0ZM004.PC0ZMSEL[PC0ZWIXM] normal; /* Line selection field*/
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map index*/
  end
end // end PC0Z440

// Verify the entered data
Function PC0Z450()
   /* ------------------------------------------------------------*/
   /* No selection verification required for print request.*/
   /* ------------------------------------------------------------*/

  /* IF EZEAID IS PF20;                /* If print request*/
  /* EZERTN;                                /* Return to calling process*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Verify the scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0ZW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
      exit stack; /* Display map*/
    else
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0ZW00.XXXTSPAG >= PC0ZW00.TA5TSQIX) /* and no more pages*/
      if (PC0ZW01.PC3PONBR[PC0ZWIXP] != 0) /* If more PO #s exist*/
        PC0ZW00.PC0ZWSWR = "Y"; /* Request for data*/
      else
        PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
        PCWREC.XXXMSGNO = 3; /* No more pages to display*/
        exit stack; /* Display map*/
      end
    end
    return;
  end

  set PCWREC empty; /* Initialize PCWREC*/

   /* ------------------------------------------------------------*/
   /* Check each selection for validity.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXM = 14; /* Initialize map index*/
  PC0ZW00.PC0ZMSEL = "N"; /* Intialize selection flag*/
  while (PC0ZW00.PC0ZWIXM >= 1) /* For each map detail line*/
    if (PC0ZM004.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
      if (PC0ZW00.PC0ZMSEL == "Y") /* If selection already made*/
        if (converseVar.eventKey is pf18) /* If global update selected*/
          converseLib.validationFailed(144); /* Only 1 selection allowed*/
          PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
          set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        else
          if (converseVar.eventKey is enter /* If enter selected*/
           && PC0ZM004.XGPCD == "03")       /* and apparel*/
            converseLib.validationFailed(144); /* Only 1 selection allowed*/
            PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
            set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
          end
        end
      end
      PC0ZW00.PC0ZMSEL = "Y"; /* Intialize selection flag*/
      PC0ZW06.PC0ZWLIN = PC0ZM004.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/

      /* ------------------------------------------------------------*/
       /* Check that duplicate destinations have not been selected.*/
      /* ------------------------------------------------------------*/

      PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
      while (PCWREC.PCWDEST[PC0ZWIX2] != " ")
                                   /* While destinations in PCWREC*/
        if (PC0ZW06.XWHCD == PCWREC.PCWWHSE[PC0ZWIX2]    /* If warehouse same*/
         && PC0ZW06.PC2CUXID == PCWREC.PCWCUST[PC0ZWIX2] /* & cust same*/
         && converseVar.eventKey not pf12)               /* and not maint selected*/
          converseLib.validationFailed(107);
                                   /* Cannot request duplicate destinations*/
          PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
          set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
        PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
      end

      /* ------------------------------------------------------------*/
       /* Check that only duplicate products have been selected.*/
      /* ------------------------------------------------------------*/

      if (PCWREC.SY1STNBR != " " /* If one already selected*/
       && converseVar.eventKey not pf12)
                                   /* and not maint selected*/
        if (PC0ZW06.SY1STNBR != PCWREC.SY1STNBR     /* If different style*/
         || PC0ZW06.SY2CLRID != PCWREC.SY2CLRID     /* or different color*/
         || PC0ZW04.XDMCD[PC0ZWIXM] != PCWREC.XDMCD /* or dif dimension*/
         || PC0ZW04.XQACD[PC0ZWIXM] != PCWREC.XQACD /* or dif quality*/
         || PC0ZW04.XOWCD[PC0ZWIXM] != PCWREC.XOWCD /* or dif owner grp*/
         || PC0ZW04.XPGCD[PC0ZWIXM] != PCWREC.XPGCD /* or dif package*/
         || PC0ZW04.XUMCD[PC0ZWIXM] != PCWREC.XUMCD) /* or dif unit meas*/
          converseLib.validationFailed(96); /* Cannot request different products*/
          PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
          set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
        end
      end

      /* ------------------------------------------------------------*/
       /* Check that only duplicate PO numbers have been selected.*/
      /* ------------------------------------------------------------*/

      if (PC0ZW06.PC0ZWNBR != PCWREC.PC3PONBR /* If different PO number*/
       && PCWREC.PC3PONBR != 0)               /* and PO # already selected*/
        converseLib.validationFailed(106); /* Cannot request different PO numbers*/
        PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
        set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end

      /* ------------------------------------------------------------*/
       /* Save selected info in PCWREC to compare to next selection.*/
      /* ------------------------------------------------------------*/

      PCWREC.PC3PONBR = PC0ZW06.PC0ZWNBR; /* PO number*/
      PCWREC.SY1STNBR = PC0ZW06.SY1STNBR; /* Style number*/
      PCWREC.SY2CLRID = PC0ZW06.SY2CLRID; /* Color*/
      PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
      PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality*/
      PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner grp*/
      PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec dif*/
      PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Package*/
      PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit meas*/
      PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW06.XWHCD; /* Warehouse*/
      PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW06.PC2CUXID; /* Cust xref*/
    else
      if (PC0ZM004.PC0ZMSEL[PC0ZWIXM] != " ") /* If other than 's'*/
        converseLib.validationFailed(13); /* Only 'S' can be used for select*/
        PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
        set PC0ZM004.PC0ZMSEL[PC0ZWIXM] cursor, bold; /* Highlight*/
      end
    end
    PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM - 1; /* Decrement map line index*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
    set PC0ZM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

  if (converseVar.validationMsgNum != 0) /* If error*/
    exit stack; /* Display error*/
  else
    if (PC0ZW00.PC0ZMSEL == "N") /* If no lines selected*/
      converseLib.validationFailed(25); /* No lines selected*/
      PC0ZW00.XXXPRCNM = "PC0Z450"; /* Module identification*/
      set PC0ZM004.PC0ZMSEL cursor; /* Position cursor at first line*/
      exit stack; /* Display error*/
    end
  end
end // end PC0Z450

// Process valid input request
Function PC0Z460()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG - 1; /* Decrement page number*/

    exit stack; /* Display previous page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0ZW00.XXXTSPAG = PC0ZW00.XXXTSPAG + 1; /* Increment page number*/

    exit stack; /* Display next page*/

  end

   /* ------------------------------------------------------------*/
   /* Process valid input request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20)
    PCZREC.PCZPGM = "PC221D"; /* Program to submit*/
    PC0ZS11(); /* Call PC0D to print*/
  else

    set PCWREC empty; /* Initialize PCWREC*/

    PC0ZW00.PC0ZWIXM = 1; /* Initialize map index*/
    while (PC0ZW00.PC0ZWIXM <= 14) /* For each map detail line*/
      if (PC0ZM004.PC0ZMSEL[PC0ZWIXM] == "S") /* If line selected*/
        PC0ZW06.PC0ZWLIN = PC0ZM004.PC0ZMLIN[PC0ZWIXM]; /* Redefine*/
        PC0ZW00.PC0ZWIX2 = 1; /* Initialize PCWREC array index*/
        while (PCWREC.PCWDEST[PC0ZWIX2] != " ") /* While dest in PCWREC*/
          PC0ZW00.PC0ZWIX2 = PC0ZW00.PC0ZWIX2 + 1; /* Increment array index*/
        end
        PC0Z461(); /* Format the PCWREC*/
      end
      PC0ZW00.PC0ZWIXM = PC0ZW00.PC0ZWIXM + 1; /* Increment map line index*/
    end

    if (converseVar.eventKey is enter)
      if (PCWREC.XGPCD == "03")
        COMMAREA.CATOAP = "PC0U"; /* transfer PO ID inquiry detail*/
      else
        COMMAREA.CATOAP = "PC0R"; /* transfer PO ID inquiry detail*/
      end
    else
      if (PCWREC.PO-REG-CD == PC0ZW00.PO-REG-CD) /* usa po's*/
        PCWREC.PCWFNC[1] = "C"; /* allow change function*/
      else
        PCWREC.PCWFNC[1] = "I"; /* allow inquire function*/
      end
      if (converseVar.eventKey is pf18)
        COMMAREA.CATOAP = "PC0O"; /* transfer Global update*/
      else
        COMMAREA.CATOAP = "PC0K"; /* transfer Product Inq/Maint*/
      end
    end

    PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Save current page number*/
    PCWREC.PCWMAP = PC0ZW00.PCWMAP; /* Save map number*/
    PCWREC.PCWUSER1 = PC0ZW01.PC0ZW1GP;
                                   /* Save selections in userarea*/
    PCWREC.CAFROMAP[1] = "PC0Z"; /* Identify ap to next*/
    PC0ZS01(); /* Purge temporary storage*/
    XSPCS01(); /* Transfer*/
    PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  end

end // end PC0Z460

// Format the PCWREC for transfer
Function PC0Z461()
   /* ------------------------------------------------------------*/
   /* Format the PCWREC for transfer.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXTSPAG = PC0ZW00.XXXTSPAG; /* Current temp storage page*/

  PCWREC.PC4ORTYP = PC0ZW01.PO-REG-CD; /* PO type*/
  PCWREC.PC4ORTYP = PC0ZW01.PC4ORTYP; /* PO type*/
  PCWREC.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PCWREC.XWHCD = PC0ZW01.XWHCD; /* Warehouse*/
  PCWREC.YSMXDV = PC0ZW01.YSMXDV; /* Division*/
  PCWREC.XDSCD = PC0ZW01.XDSCD; /* Direct ship code*/
  if (PC0ZW01.YPUCD == "*X" /* Direct ship code*/
   || PC0ZW00.YPUCD == "*X") /* Direct ship code*/
    PCWREC.PC6STAT = "*X"; /* Direct ship code*/
  end

  PCWREC.PC3PONBR = PC0ZW06.PC0ZWNBR; /* PO number*/

  PCWREC.PC2CUXID = PC0ZW06.PC2CUXID; /* Cust xref*/
  if (PC0ZW01.XGPCD == "03" /* If apparel*/
   && converseVar.eventKey is enter)
    PCWREC.SY2CLRID = " "; /* Wildcard color*/
  else
    PCWREC.SY2CLRID = PC0ZW06.SY2CLRID; /* Color*/
  end
  PCWREC.YMTCD = PC0ZW06.YMTCD; /* YMT mode code*/
  PCWREC.PCWWHSE[PC0ZWIX2] = PC0ZW06.XWHCD; /* Warehouse*/
  PCWREC.PCWCUST[PC0ZWIX2] = PC0ZW06.PC2CUXID; /* Cust xref*/

  PCWREC.PC3POIDT = PC0ZW04.PC3POIDT[PC0ZWIXM]; /* PO ID*/
  PCWREC.SY1STNBR = PC0ZW04.SY1STNBR[PC0ZWIXM]; /* Style*/
  PCWREC.FY1FCTYC = PC0ZW04.FY1FCTYC[PC0ZWIXM]; /* Factory*/
  PCWREC.PCFSECD = PC0ZW04.PCFSECD[PC0ZWIXM]; /* Season code*/
  PCWREC.XDMCD = PC0ZW04.XDMCD[PC0ZWIXM]; /* Dimension*/
  PCWREC.XQACD = PC0ZW04.XQACD[PC0ZWIXM]; /* Quality code*/
  PCWREC.XOWCD = PC0ZW04.XOWCD[PC0ZWIXM]; /* Owner group code*/
  PCWREC.PC2INSEG = PC0ZW04.PC2INSEG[PC0ZWIXM]; /* Spec difference*/
  PCWREC.XPGCD = PC0ZW04.XPGCD[PC0ZWIXM]; /* Packaging type*/
  PCWREC.XUMCD = PC0ZW04.XUMCD[PC0ZWIXM]; /* Unit of measure*/
  PCWREC.PC6ETSDT = PC0ZW04.PC6ETSDT[PC0ZWIXM]; /* ETS date*/
  PCWREC.PC6RTADT = PC0ZW04.PC6RTADT[PC0ZWIXM]; /* RTA date*/
  PCWREC.PC6PLAN = PC0ZW04.PC6PLAN[PC0ZWIXM]; /* Product plan number*/
  PCWREC.PC6ITMNB[PC0ZWIX2] = PC0ZW04.PC6ITMNB[PC0ZWIXM];
                                   /* Item seq #*/
  PCWREC.PCWUSER4 = PC0ZW04.PC0ZW4SO[PC0ZWIXM]; /* SO#*/
end // end PC0Z461

// Read table & format parameters
Function PC0Z900()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/
  set PC0ZW05 empty; /* Working storage area*/

  PC0ZW00.PC0ZWIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PC0ZW00.PC0ZWIXT > 0) /* Until end of table*/

    if (PCZREC.PCZPGM == "PC220D")
      if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
        PC0ZW05.PC0ZWJCL = PC0ZT01.PC0ZWJCL[PC0ZWIXT]; /* JCL*/
        PC0ZW05.PC0ZTTYP = PC0ZT01.PC0ZTTYP[PC0ZWIXT]; /* Type*/
      else
        PC0ZW05.PC0ZWJCL = PC0ZT11.PC0ZWJCL[PC0ZWIXT]; /* JCL*/
        PC0ZW05.PC0ZTTYP = PC0ZT11.PC0ZTTYP[PC0ZWIXT]; /* Type*/
      end
    else
      if (PCZREC.PCZPGM == "PC221D")
        if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD")
          PC0ZW05.PC0ZWJCL = PC0ZT02.PC0ZWJCL[PC0ZWIXT]; /* JCL*/
          PC0ZW05.PC0ZTTYP = PC0ZT02.PC0ZTTYP[PC0ZWIXT]; /* Type*/
        else
          PC0ZW05.PC0ZWJCL = PC0ZT22.PC0ZWJCL[PC0ZWIXT]; /* JCL*/
          PC0ZW05.PC0ZTTYP = PC0ZT22.PC0ZTTYP[PC0ZWIXT]; /* Type*/
        end
      else
        PCWREC.XXXMSGNO = 10;
        return;
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the parameters from the passed record.*/
    /* ------------------------------------------------------------*/

    if (PC0ZW05.PC0ZTTYP == "P") /* Parameters statement*/

      PC0ZW05.PC0ZWJCL = PCZREC.PCZJCL; /* Parameter variables*/

    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PC0ZW05.PC0ZWJCL; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PC0ZW05.PC0ZTTYP; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PC0ZW05.PC0ZWJCL == "/*EOF") /* End of table*/
      PC0ZW00.PC0ZWIXT = 0; /* Indicate end of table*/
    else
      PC0ZW00.PC0ZWIXT = PC0ZW00.PC0ZWIXT + 1; /* Increment table index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PC0Z910(); /* Submit the JCL*/

end // end PC0Z900

// Submit JCL
Function PC0Z910()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* CICS message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

  PCZREC.PCZRTNCD = TA6REC.TA6RTNCD; /* Return code*/
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    PCWREC.XXXMSGNO = 190; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    PCWREC.XXXMSGNO = 195; /* Indicate user cancelled*/
  else
    if (TA6REC.TA6RTNCD == "7") /* if TA0P not available*/
      PCWREC.XXXMSGNO = 8; /* Job submission not available*/
    else
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/
    end
  end

end // end PC0Z910

// Purge any temporary storage
Function PC0ZS01()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0ZW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0ZW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0ZW00.XXXPRCNM = "PC0ZS01"; /* Module identification*/
  if (PC0ZW00.PCWMAP == 1)
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
  else
    if (PC0ZW00.PCWMAP == 2)
      TA1REC.TA1MAPNO = "M002"; /* Map number*/
    else
      if (PC0ZW00.PCWMAP == 3)
        TA1REC.TA1MAPNO = "M003"; /* Map number*/
      else
        TA1REC.TA1MAPNO = "M004"; /* Map number*/
      end
    end
  end
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS01"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ZS01

// Add page to temporary storage
Function PC0ZS02()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0ZW04.XXXTSLEN = PC0ZW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0ZW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0ZW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0ZW04 empty; /* M004 display storage*/

    PC0ZW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0ZW00.PC0ZWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0ZW00.XXXPRCNM = "PC0ZS02"; /* Module identification*/
  if (PC0ZW00.PCWMAP == 1)
    TA1REC.TA1MAPNO = "M001"; /* Map number*/
  else
    if (PC0ZW00.PCWMAP == 2)
      TA1REC.TA1MAPNO = "M002"; /* Map number*/
    else
      if (PC0ZW00.PCWMAP == 3)
        TA1REC.TA1MAPNO = "M003"; /* Map number*/
      else
        TA1REC.TA1MAPNO = "M004"; /* Map number*/
      end
    end
  end

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS02"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0ZS02

// Read temporary storage page
Function PC0ZS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0ZW04.XXXTSLEN = PC0ZW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0ZW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0ZW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0ZW00.XXXPRCNM = "PC0ZS03"; /* Module identification*/
  if (PC0ZW00.PCWMAP == 2)
    TA1REC.TA1MAPNO = "M002"; /* Map number*/
  else
    if (PC0ZW00.PCWMAP == 3)
      TA1REC.TA1MAPNO = "M003"; /* Map number*/
    else
      TA1REC.TA1MAPNO = "M004"; /* Map number*/
    end
  end

  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS03"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0ZS03

// Select item cursor - VPOITM01
Function PC0ZS04()
  PC0ZW00.PC0ZWDCF = "N"; /* End of VPITM03 flag*/

   /* ------------------------------------------------------------*/
   /* Format VPOITM03 with key values or wildcards for select set*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  VPOITM03.PO-REG-CD = PC0ZW01.PO-REG-CD; /* P.O. region*/
  VPOITM03.PC4ORTYP = PC0ZW01.PC4ORTYP; /* P.O. type*/
  VPOITM03.YSMXDV = PC0ZW01.YSMXDV; /* Division code*/
  if (PC0ZW01.FY1FCTYC == " ")
    VPOITM03.FY1FCTYC = "*"; /* Factory code*/
  else
    VPOITM03.FY1FCTYC = PC0ZW01.FY1FCTYC; /* Factory code*/
  end
  if (PC0ZW01.XCTCD == " ")
    VPOITM03.XCTCD = "*"; /* Foreign country code*/
  else
    VPOITM03.XCTCD = PC0ZW01.XCTCD; /* Foreign country code*/
  end
  if (PC0ZW01.SYBSTGNB == " ")
    VPOITM03.SYBSTGNB = "*"; /* Style group number*/
  else
    VPOITM03.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  end
  if (PC0ZW01.PC6XCTCD == " ")
    VPOITM03.PC6XCTCD = "*"; /* Destination country code*/
  else
    VPOITM03.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country code*/
  end
  if (PC0ZW01.SY1STNBR == " ")
    VPOITM03.SY1STNBR = "*"; /* Style number*/
  else
    VPOITM03.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  end
  if (PC0ZW01.SY2CLRID == " ")
    VPOITM03.SY2CLRID = "*"; /* Identifying color*/
  else
    VPOITM03.SY2CLRID = PC0ZW01.SY2CLRID; /* Identifying color*/
  end
  if (PC0ZW01.XDMCD == " ")
    VPOITM03.XDMCD = "*"; /* Dimension code*/
  else
    VPOITM03.XDMCD = PC0ZW01.XDMCD; /* Dimension code*/
  end
  if (PC0ZW01.XOWCD == " ")
    VPOITM03.XOWCD = "*"; /* Owner group code*/
  else
    VPOITM03.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  end
  if (PC0ZW01.PC2INSEG == " ")
    VPOITM03.PC2INSEG = "*"; /* Spec difference code*/
  else
    VPOITM03.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference code*/
  end
  if (PC0ZW01.XPGCD == " ")
    VPOITM03.XPGCD = "*"; /* Packaging type code*/
  else
    VPOITM03.XPGCD = PC0ZW01.XPGCD; /* Packaging type code*/
  end
  if (PC0ZW01.PC2CUXID == " ")
    VPOITM03.PC2CUXID = "*"; /* Customer xref ID*/
  else
    VPOITM03.PC2CUXID = PC0ZW01.PC2CUXID; /* Customer xref ID*/
  end
  if (PC0ZW01.XWHCD == " ")
    VPOITM03.XWHCD = "*"; /* Warehouse code*/
  else
    VPOITM03.XWHCD = PC0ZW01.XWHCD; /* Warehouse code*/
  end
  if (PC0ZW01.YPUCD == " ")
    VPOITM03.PC6STAT = "*"; /* Item status code*/
  else
    if (PC0ZW01.YPUCD == "*X") /* Item status code*/
      VPOITM03.PC6STAT = "CX"; /* Item status code*/
    else
      VPOITM03.PC6STAT = PC0ZW01.YPUCD; /* Item status code*/
    end
  end
  if (PC0ZW01.XPRCD == " ")
    VPOITM03.XPRCD = "*"; /* Product type code*/
  else
    VPOITM03.XPRCD = PC0ZW01.XPRCD; /* Product type code*/
  end
  if (PC0ZW01.XPLCD == " ")
    VPOITM03.XPLCD = "*"; /* Product line code*/
  else
    VPOITM03.XPLCD = PC0ZW01.XPLCD; /* Product line code*/
  end
  if (PC0ZW01.XPCCD == " ")
    VPOITM03.XPCCD = "*"; /* Product category code*/
  else
    VPOITM03.XPCCD = PC0ZW01.XPCCD; /* Product category code*/
  end

  VPOITM03.XDSCD = PC0ZW01.XDSCD; /* Direct ship code*/
  VPOITM03.XQACD = "*"; /* Quality code*/
  VPOITM03.XUMCD = "*"; /* Unit of measure*/

  PCYREC.PCYFRDT = PC0ZW01.PCYFRDT; /* From PO ID*/
  PCYREC.PCYTODT = PC0ZW01.PCYTODT; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection map*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPITM03";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS04"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPITM03"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPOITM03.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = VPOITM03.PC3PONBR; /* Key field 2*/
  PC0ZW00.PC0ZWKA3 = VPOITM03.PC4ORTYP; /* Key field 3*/
  PC0ZW00.PC0ZWKA4 = VPOITM03.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ZS04

// Fetch next item - VPOITM01
Function PC0ZS05()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPITM03.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0ZW00.PC0ZWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPITM03"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPOITM03.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = VPOITM03.PC3PONBR; /* Key field 2*/
  PC0ZW00.PC0ZWKA3 = VPOITM03.PC4ORTYP; /* Key field 3*/
  PC0ZW00.PC0ZWKA4 = VPOITM03.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ZS05

// Close item cursor - VPOITM01
Function PC0ZS06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS06"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPITM03 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS06"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPITM03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0ZS06

// Select unique PO ID - VPOVFY01
Function PC0ZS07()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0ZS07"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0ZW00.XXXPRCNM = "PC0ZS07";
  exit stack;

end // end PC0ZS07

// Select PO ID cursor - VPOVFY01
Function PC0ZS08()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used*/
   /* ------------------------------------------------------------*/

  set PCFREC empty; /* clear row storage area*/
  PC0ZW00.PC0ZWDCF = "N"; /* End of VPOVFY01 flag*/


   /* ------------------------------------------------------------*/
   /* Format PCfREC with key values for select set*/
   /* ------------------------------------------------------------*/

  PCFREC.PCFSECD = PC0ZM001.PC0ZMFYR; /* Season code*/
  if (PC0ZM001.PC0ZMFM1 == " ") /* If no buy month*/
    PCFREC.PCFBUYMO = -1; /* Wildcard buy month*/
  else
    PC0ZW00.PC0ZWNUM = PC0ZM001.PC0ZMFM1; /* Buy month*/
    PCFREC.PCFBUYMO = PC0ZW00.PC0ZWRNM; /* Buy month*/
  end
  PCFREC.XXXSTAT = "*"; /* PO ID date status*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS08"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ZS08

// Fetch next PO ID    - VPOVFY01
Function PC0ZS09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOVFY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0ZW00.PC0ZWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS09"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0ZW00.PC0ZWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0ZS09

// Close PO ID cursor  - VPOVFY01
Function PC0ZS10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PCWMAP = 1; /* Return to selection screen*/
  PC0ZS19(); /* Init select fields*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS10"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOVFY01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0ZS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0ZS10

// Submit Job For Print
Function PC0ZS11()
  PC0ZW00.PC0ZWRDT = VGVar.currentShortGregorianDate; /* Redefine current date*/
  PCZREC.PCZMONTH = PC0ZW00.PC0ZWRM1; /* Month*/
  PCZREC.PCZDASH1 = "-"; /* '-'*/
  PCZREC.PCZDAY = PC0ZW00.PC0ZWRM2; /* Day*/
  PCZREC.PCZDASH2 = "-"; /* '-'*/
  PCZREC.PCZYEAR = PC0ZW00.PC0ZWRYY; /* Year*/
  PCZREC.XGPCD = PC0ZW01.XGPCD; /* GPC code*/
  PCZREC.PCZFRID = PC0ZW01.PCYFRDT; /* From PO ID*/
  PCZREC.PCZTOID = PC0ZW01.PCYTODT; /* To PO ID*/

  if (PC0ZW01.XGPCD == "03")
    PCZREC.PCFSECD = PC0ZW01.PC0ZMFYR; /* Season code*/
  else
    PCZREC.PCFSECD = "*"; /* Season code*/
  end

  if (PC0ZW01.FY1FCTYC == " ")
    PCZREC.FY1FCTYC = "*"; /* From Factory code*/
  else
    PCZREC.FY1FCTYC = PC0ZW01.FY1FCTYC; /* To Factory code*/
  end

  if (PC0ZW01.XCTCD == " ")
    PCZREC.XCTCD = "*"; /* Foreign country code*/
  else
    PCZREC.XCTCD = PC0ZW01.XCTCD; /* Foreign country code*/
  end

  if (PC0ZW01.SY1STNBR == " ")
    PCZREC.SY1STNBR = "*"; /* Style number*/
  else
    PCZREC.SY1STNBR = PC0ZW01.SY1STNBR; /* Style number*/
  end

  if (PC0ZW01.SY2CLRID == " ")
    PCZREC.SY2CLRID = "*"; /* Identifying color*/
  else
    PCZREC.SY2CLRID = PC0ZW01.SY2CLRID; /* Identifying color*/
  end

  if (PC0ZW01.XDMCD == " ")
    PCZREC.XDMCD = "*"; /* Dimension code*/
  else
    PCZREC.XDMCD = PC0ZW01.XDMCD; /* Dimension code*/
  end

  if (PC0ZW01.XOWCD == " ")
    PCZREC.XOWCD = "*"; /* Owner group code*/
  else
    PCZREC.XOWCD = PC0ZW01.XOWCD; /* Owner group code*/
  end

  if (PC0ZW01.PC2INSEG == " ")
    PCZREC.PC2INSEG = "*"; /* Spec difference code*/
  else
    PCZREC.PC2INSEG = PC0ZW01.PC2INSEG; /* Spec difference code*/
  end

  if (PC0ZW01.XPGCD == " ")
    PCZREC.XPGCD = "*"; /* Packaging type code*/
  else
    PCZREC.XPGCD = PC0ZW01.XPGCD; /* Packaging type code*/
  end

  if (PC0ZW01.XPLCD == " ")
    PCZREC.XPLCD = "*"; /* Product line code*/
  else
    PCZREC.XPLCD = PC0ZW01.XPLCD; /* Product line code*/
  end

  if (PC0ZW01.XPRCD == " ")
    PCZREC.XPRCD = "*"; /* Product type code*/
  else
    PCZREC.XPRCD = PC0ZW01.XPRCD; /* Product type code*/
  end

  if (PC0ZW01.XPCCD == " ")
    PCZREC.XPCCD = "*"; /* Product category code*/
  else
    PCZREC.XPCCD = PC0ZW01.XPCCD; /* Product category code*/
  end

  if (PC0ZW01.SYBSTGNB == " ")
    PCZREC.SYBSTGNB = "*"; /* Style group number*/
  else
    PCZREC.SYBSTGNB = PC0ZW01.SYBSTGNB; /* Style group number*/
  end

  if (PC0ZW01.XWHCD == " ")
    PCZREC.XWHCD = "*"; /* Warehouse code*/
  else
    PCZREC.XWHCD = PC0ZW01.XWHCD; /* Warehouse code*/
  end

  if (PC0ZW01.PC2CUXID == " ")
    PCZREC.PC2CUXID = "*"; /* Customer xref ID*/
  else
    PCZREC.PC2CUXID = PC0ZW01.PC2CUXID; /* Customer xref ID*/
  end

  PCZREC.YSMXDV = PC0ZW01.YSMXDV; /* Division code*/

  if (PC0ZW01.PC6XCTCD == " ")
    PCZREC.PC6XCTCD = "*"; /* Destination country*/
  else
    PCZREC.PC6XCTCD = PC0ZW01.PC6XCTCD; /* Destination country*/
  end

  PCZREC.PC4ORTYP = PC0ZW01.PC4ORTYP; /* P.O. type*/

  PCZREC.XDSCD = PC0ZW01.XDSCD; /* Direct ship code*/

  if (PC0ZW01.YPUCD == " ")
    PCZREC.PC6STAT = "*"; /* Item status code*/
  else
    if (PC0ZW01.YPUCD == "CX") /* Cancelled status*/
      if (PC0ZM001.YPUCD == "*X") /* All cancelled items*/
        PCZREC.PC6STAT = "*X"; /* Saved Item status*/
      else
        PCZREC.PC6STAT = PC0ZW01.YPUCD; /* Item status code*/
      end
    else
      PCZREC.PC6STAT = PC0ZW01.YPUCD; /* Item status code*/
    end
  end

  PC0Z900(); /* submit jcl for print*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

   /* IF EZERT8 EQ '00000000'         ; Call successful*/
    /* EZERTN;*/
   /* ELSE ;*/
    /* MOVE 1 TO PC0ZW00.PCWMAP      ; Return to selection screen*/
    /* PC0ZS19                       ; Init select fields*/
    /* MOVE EZERT8 TO TAEREC.TAEDESC1       ;   CSP return code*/
    /* MOVE 'PRINT ROUTINE' TO TAEREC.TAEDESC2;*/
    /* ;*/
    /* MOVE 'PC0ZS11' TO PC0ZW00.XXXPRCNM   ;*/
    /* MOVE 01 TO EZEMNO             ; Indicate system error*/
    /* ;*/
   /* MOVE 'RETN' TO TA1REC.TA1FUNC ; Termination function*/
   /* MOVE 'APPL' TO TA1REC.TA1TYPE ; Type of error*/
   /* MOVE 'CALL TO PC0D FOR PRINT REQUEST' TO TA1REC.TA1LOC;*/
   /* MOVE COMMAREA.CACURRAP TO TA1REC.TA1PGMAP;*/
   /* MOVE 'PC0ZS11' TO TA1REC.TA1PGMNO    ;*/
   /* MOVE COMMAREA.CACURRAP TO TA1REC.TA1MAPAP; Map application*/
   /* MOVE 'PC0ZM001' TO TA1REC.TA1MAPNO   ;    Map number*/
   /* ;*/
   /* CALL TA0020 TA1REC,TAEREC (NONCSP    ;*/
   /* ;*/
   /* EZEFLO                        ; Exit to display map*/
   /* eND ;*/

end // end PC0ZS11

// Strip leading 0s for PO# & Qty
Function PC0ZS18()
   /* ------------------------------------------------------------*/
    /* This routine will strip off leading zeros created from*/
    /* a numeric field being loaded/formatted to a character*/
    /* field.  The working storage field used in this process*/
    /* is identical to the length of the display fields on the*/
    /* map and is PC0ZW00.PC0ZWTXT. It will be indexed by*/
    /* PC0ZW00.PC0ZIXT on the positional field PC0ZW00.PC0ZWPOS*/
   /* ------------------------------------------------------------*/

  PC0ZW00.PC0ZWIXT = 1; /* ===> temp. text index*/

  while (PC0ZW00.PC0ZWIXT <= 5 /* ===> temp. text index*/
   && PC0ZW00.PC0ZWPOS[PC0ZWIXT] == "0") /* ===> text position*/

    PC0ZW00.PC0ZWPOS[PC0ZWIXT] = " "; /* ===> text position*/
    PC0ZW00.PC0ZWIXT = PC0ZW00.PC0ZWIXT + 1; /* ===> increment index*/

  end

end // end PC0ZS18

// Init select fields not to keep
Function PC0ZS19()
  PC0ZW01.SY1STNBR = " ";
  PC0ZW01.SY2CLRID = " ";
  PC0ZW01.SYBSTGNB = " ";
  PC0ZW01.PC2CUXID = " ";
  PC0ZW01.XCTCD = " ";
  PC0ZW01.XPRCD = " ";
  PC0ZW01.XPLCD = " ";
  PC0ZW01.XPCCD = " ";
  PC0ZW01.YPUCD = " ";
  PC0ZW01.XWHCD = " ";
  PC0ZW01.PC6XCTCD = " ";
  PC0ZW01.XPGCD = " ";
  PC0ZW01.XOWCD = " ";
  PC0ZW01.PC2INSEG = " ";
  PC0ZW01.XDMCD = " ";
end // end PC0ZS19

// Direct Ship Security loop
Function PC0ZS20()
   /* ------------------------------------------------------------*/
   /* Fetch the data until valid direct ship code is '1' or '2'*/
   /* ------------------------------------------------------------*/

  while (VPOITM03.XDSCD != "1" /* ===> direct ship whse only*/
   && VPOITM03.XDSCD != "2" /* ===> direct ship*/
   && PC0ZW00.PC0ZWDCF == "N") /* ===> end of cursor*/

    PC0ZS05(); /* ===> Fetch next selected row*/


  end


   /* **                                                        ***/
   /* ********************** End of PC0ZS20 ***********************/
end // end PC0ZS20

// Validate ISEG       - VPRDCU01
Function PC0ZS21()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  VPRDCU03.XGPCD = PC0ZM001.XGPCD; /* GPC code*/
  VPRDCU03.PC2INSEG = PC0ZM001.PC2INSEG; /* Customer ID*/

   /* ------------------------------------------------------------*/
   /* Select unique ISEG  row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("SG", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate cust xref invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(51); /* ISEG      invalid*/
      PC0ZW00.XXXPRCNM = "PC0ZS21"; /* Module identification*/
      set PC0ZM001.PC2INSEG cursor, bold; /* highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0ZW00.XXXPRCNM = "PC0ZS21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0ZW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0ZW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0ZW00.PC0ZWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0ZW00.PC0ZWKA2 = VPRDCU03.PC2INSEG; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0ZW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0ZS21 ***********************/
end // end PC0ZS21

//*** RECORD=PC0ZW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0ZW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC0ZWRNM PC0ZWRNM ; 
    15 PC0ZWNUM PC0ZWNUM ; 
      20 PC0ZWNM1 PC0ZWNM1 ; 
      20 PC0ZWNM2 PC0ZWNM2 ; 
  10 PCYFUNC PCYFUNC ; 
    15 PC0ZWTYP PC0ZWTYP ; 
    15 PC0ZWSET PC0ZWSET ; 
  10 PC0ZWLIN PC0ZWLIN ; 
    15 * char(10) ; 
    15 PC0ZWLN2 PC0ZWLN2 ; 
      20 * char(6) ; 
      20 PC0ZWDMD PC0ZWDMD ; 
      20 XDMCD XDMCD ; 
      20 PC0ZWPGD PC0ZWPGD ; 
      20 XPGCD XPGCD ; 
      20 PC0ZWOWD PC0ZWOWD ; 
      20 XOWCD XOWCD ; 
      20 * char(41) ; 
  10 PC0ZWDCF PC0ZWDCF ; 
  10 PC0ZWSWR PC0ZWSWR ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PCWMAP PCWMAP ; 
  10 PC0ZMSEL PC0ZMSEL ; 
  10 PC0ZWIX1 PC0ZWIX1 ; 
  10 PC0ZWIX2 PC0ZWIX2 ; 
  10 PC0ZWIX3 PC0ZWIX3 ; 
  10 PC0ZWIXM PC0ZWIXM ; 
  10 PC0ZWIXT PC0ZWIXT ; 
  10 PC0ZWTXT PC0ZWTXT ; 
    15 PC0ZWPOS PC0ZWPOS [6] ; 
  10 PC0ZWRDT PC0ZWRDT ; 
    15 PC0ZWRYR PC0ZWRYR ; 
      20 PC0ZWRCC PC0ZWRCC ; 
      20 PC0ZWRYY PC0ZWRYY ; 
        25 PC0ZWRY1 PC0ZWRY1 ; 
        25 PC0ZWRY2 PC0ZWRY2 ; 
    15 PC0ZWRM1 PC0ZWRM1 ; 
    15 PC0ZWRM2 PC0ZWRM2 ; 
  10 PC0ZWETA PC0ZWETA ; 
  10 PC0ZWETL PC0ZWETL ; 
  10 PC3POIDT PC3POIDT ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 YPUCD YPUCD ; 
  10 PC0ZWCNM PC0ZWCNM ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0ZWKA1 PC0ZWKA1 ; 
      20 PC0ZWKN1 PC0ZWKN1 ; 
      20 * char(1) ; 
    15 PC0ZWKA2 PC0ZWKA2 ; 
      20 PC0ZWKN2 PC0ZWKN2 ; 
      20 * char(1) ; 
    15 PC0ZWKA3 PC0ZWKA3 ; 
      20 PC0ZWKN3 PC0ZWKN3 ; 
      20 * char(1) ; 
    15 PC0ZWKA4 PC0ZWKA4 ; 
      20 PC0ZWKN4 PC0ZWKN4 ; 
      20 * char(1) ; 
  10 PC0ZWKEY PC0ZWKEY ; 
    15 PC0ZWCD1 PC0ZWCD1 ; 
    15 PC0ZWCD2 PC0ZWCD2 ; 
  10 PC0ZWSOR PC0ZWSOR ; 
    15 PC0ZWCOR PC0ZWCOR ; 
    15 PC0ZWDOT PC0ZWDOT ; 
    15 PC0ZWNOR PC0ZWNOR ; 
  10 PC0ZWCY1 PC0ZWCY1 ; 
    15 PC0ZWCC1 PC0ZWCC1 ; 
    15 PC0ZWYY1 PC0ZWYY1 ; 
  10 PC0ZWCY2 PC0ZWCY2 ; 
    15 PC0ZWCC2 PC0ZWCC2 ; 
    15 PC0ZWYY2 PC0ZWYY2 ; 
end // end PC0ZW00

//*** RECORD=PC0ZW01 ****
// ******* MAP ADDRESS STORAGE FOR PC05M010 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// 10/22/98   RVEMPA   INCREASED OCCURS FROM 100 TO 15O FOR
//                     PC3PONBR.
// ***********************
Record PC0ZW01 type basicRecord
  5 PC0ZW1GP PC0ZW1GP ; 
    10 PC0ZWFDT PC0ZWFDT ; 
      15 PC0ZMFYR PC0ZMFYR ; 
      15 PC0ZMFM1 PC0ZMFM1 ; 
      15 PC0ZMFM2 PC0ZMFM2 ; 
    10 PC0ZWTDT PC0ZWTDT ; 
      15 PC0ZMTYR PC0ZMTYR ; 
      15 PC0ZMTM1 PC0ZMTM1 ; 
      15 PC0ZMTM2 PC0ZMTM2 ; 
    10 PCYFRDT PCYFRDT ; 
    10 PCYTODT PCYTODT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XCTCD XCTCD ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 YPUCD YPUCD ; 
    10 XWHCD XWHCD ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 XDSCD XDSCD ; 
    10 XPGCD XPGCD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XDMCD XDMCD ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC0ZWIXP PC0ZWIXP ; 
    10 PC3PONBR PC3PONBR [150] ; 
end // end PC0ZW01

//*** RECORD=PC0ZW02 ****
// *** WORK RECORD TO REDEFINE DATA FOR M002 DISPLAY ***
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/13/89   JNEWMA   NEW RECORD
// ***********************
Record PC0ZW02 type basicRecord
  10 PC0ZWLIN PC0ZWLIN ; 
    15 SY1STNBR SY1STNBR ; 
    15 * char(1) ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PC2CUXID PC2CUXID ; 
    15 * char(1) ; 
    15 PC0ZWPOD PC0ZWPOD ; 
      20 PCFSECD PCFSECD ; 
      20 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC0ZWNBA PC0ZWNBA ; 
      20 PC0ZWNBR PC0ZWNBR ; 
    15 * char(1) ; 
    15 PC0ZWPL PC0ZWPL ; 
    15 * char(1) ; 
    15 PC6STAT PC6STAT ; 
    15 * char(1) ; 
    15 YMTCD YMTCD ; 
    15 * char(1) ; 
    15 PC0ZWPET PC0ZWPET ; 
    15 * char(1) ; 
    15 PC0ZWETS PC0ZWETS ; 
    15 * char(1) ; 
    15 PC0ZWRTA PC0ZWRTA ; 
    15 * char(1) ; 
    15 PC0ZWETA PC0ZWETA ; 
    15 * char(1) ; 
    15 PC0ZWETL PC0ZWETL ; 
    15 PC0ZWSTR PC0ZWSTR ; 
    15 PC0ZWODA PC0ZWODA ; 
      20 PC0ZWORD PC0ZWORD ; 
end // end PC0ZW02

//*** RECORD=PC0ZW03 ****
// *** WORK RECORD TO REDEFINE DATA FOR M002 DISPLAY ***
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/13/89   JNEWMA   NEW RECORD
// ***********************
Record PC0ZW03 type basicRecord
  10 PC0ZWLIN PC0ZWLIN ; 
    15 PC0ZWPOD PC0ZWPOD ; 
      20 PCFSECD PCFSECD ; 
      20 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY1STNBR SY1STNBR ; 
    15 * char(1) ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PC2CUXID PC2CUXID ; 
    15 * char(1) ; 
    15 PC0ZWNBA PC0ZWNBA ; 
      20 PC0ZWNBR PC0ZWNBR ; 
    15 * char(1) ; 
    15 PC0ZWPL PC0ZWPL ; 
    15 * char(1) ; 
    15 PC6STAT PC6STAT ; 
    15 * char(1) ; 
    15 YMTCD YMTCD ; 
    15 * char(1) ; 
    15 PC0ZWPET PC0ZWPET ; 
    15 * char(1) ; 
    15 PC0ZWETS PC0ZWETS ; 
    15 * char(1) ; 
    15 PC0ZWRTA PC0ZWRTA ; 
    15 * char(1) ; 
    15 PC0ZWETA PC0ZWETA ; 
    15 * char(1) ; 
    15 PC0ZWETL PC0ZWETL ; 
    15 PC0ZWSTR PC0ZWSTR ; 
    15 PC0ZWODA PC0ZWODA ; 
      20 PC0ZWORD PC0ZWORD ; 
end // end PC0ZW03

//*** RECORD=PC0ZW04 ****
// *** WORK RECORD FOR PC0Z PAGE DATA TEMPORARY STORAGE ***
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/13/89   JNEWMA   NEW RECORD
// 04/23/93   KSANFO   added sales order to record
// ***********************
Record PC0ZW04 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0ZW4GP PC0ZW4GP [14] ; 
    10 PC0ZWSEL PC0ZWSEL ; 
    10 PC3POIDT PC3POIDT ; 
    10 SY1STNBR SY1STNBR ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC0ZW4SO PC0ZW4SO ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC0ZWLIN PC0ZWLIN ; 
end // end PC0ZW04

//*** RECORD=PC0ZW05 ****
// ********************************
// Application Working Storage
// ********************************
// ***********************
Record PC0ZW05 type basicRecord
  10 XXXMSGNO XXXMSGNO ; 
  10 PC0ZWJCL PC0ZWJCL ; 
  10 PC0ZTTYP PC0ZTTYP ; 
end // end PC0ZW05

//*** RECORD=PC0ZW06 ****
// *** WORK RECORD TO REDEFINE DATA FOR M004 DISPLAY ***
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/28/92   KSANFO   NEW RECORD FOR DISPLAYING SO#.
// ***********************
Record PC0ZW06 type basicRecord
  10 PC0ZWLIN PC0ZWLIN ; 
    15 PC0ZWPOD PC0ZWPOD ; 
      20 PCFSECD PCFSECD ; 
      20 * char(4) ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 SY1STNBR SY1STNBR ; 
    15 * char(1) ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XWHCD XWHCD ; 
    15 * char(1) ; 
    15 PC2CUXID PC2CUXID ; 
    15 * char(1) ; 
    15 PC0ZWNBA PC0ZWNBA ; 
      20 PC0ZWNBR PC0ZWNBR ; 
    15 * char(1) ; 
    15 PC0ZWPL PC0ZWPL ; 
    15 * char(1) ; 
    15 PC6STAT PC6STAT ; 
    15 * char(1) ; 
    15 YMTCD YMTCD ; 
    15 * char(1) ; 
    15 PC0ZWPET PC0ZWPET ; 
    15 * char(1) ; 
    15 PC0ZWETS PC0ZWETS ; 
    15 * char(1) ; 
    15 PC0ZWSOR PC0ZWSOR ; 
    15 * char(1) ; 
    15 PC0ZWSTR PC0ZWSTR ; 
    15 PC0ZWODA PC0ZWODA ; 
      20 PC0ZWORD PC0ZWORD ; 
end // end PC0ZW06

// From buy month
DataItem PC0ZMFM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From delivery month
DataItem PC0ZMFM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID year
DataItem PC0ZMFYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select flag
DataItem PC0ZMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To buy month
DataItem PC0ZMTM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To delivery month
DataItem PC0ZMTM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID year
DataItem PC0ZMTYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group of selection fields
DataItem PC0ZW1GP char(682)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC0ZW4GP char(125)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// S.O. Number
DataItem PC0ZW4SO char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM YEAR CC
DataItem PC0ZWCC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO YEAR CC
DataItem PC0ZWCC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code 1 for table edits
DataItem PC0ZWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// code 2 for table edits
DataItem PC0ZWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date work field
DataItem PC0ZWCNM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0ZWCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FROM YEAR CCYY
DataItem PC0ZWCY1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TO YEAR CCYY
DataItem PC0ZWCY2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor flag
DataItem PC0ZWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension description
DataItem PC0ZWDMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0ZWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETA calulated
DataItem PC0ZWETA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_ETAL_OVRD_DT
DataItem PC0ZWETL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_EST_HDT
DataItem PC0ZWETS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID date
DataItem PC0ZWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 1
DataItem PC0ZWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 2
DataItem PC0ZWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// General index 3
DataItem PC0ZWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem PC0ZWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO # array index
DataItem PC0ZWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Leading zero index
DataItem PC0ZWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0ZWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0ZWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0ZWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0ZWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for table edits
DataItem PC0ZWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0ZWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0ZWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0ZWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0ZWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map detail line
DataItem PC0ZWLIN char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line group for style dim: etc.
DataItem PC0ZWLN2 char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR ALPHA
DataItem PC0ZWNBA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem PC0ZWNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Char 1 to test for numeric
DataItem PC0ZWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Char 2 to test for numeric
DataItem PC0ZWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0ZWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0ZWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_TOT_ON_ORD_QTY ALPHA
DataItem PC0ZWODA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_TOT_ON_ORD_QTY
DataItem PC0ZWORD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Owner group description
DataItem PC0ZWOWD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRE_EST_HDT
DataItem PC0ZWPET num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Package description
DataItem PC0ZWPGD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCTN_PLAN_NBR
DataItem PC0ZWPL num(2)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID date
DataItem PC0ZWPOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// each byte to strip zeros
DataItem PC0ZWPOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PC0ZWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Redefine PO ID date
DataItem PC0ZWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID buy month
DataItem PC0ZWRM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0ZWRM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0ZWRNM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_RQT_ARVDT
DataItem PC0ZWRTA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year 1
DataItem PC0ZWRY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year 2
DataItem PC0ZWRY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century & year
DataItem PC0ZWRYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year
DataItem PC0ZWRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select flag
DataItem PC0ZWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select set number
DataItem PC0ZWSET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0ZWSOR char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Star for override date
DataItem PC0ZWSTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PC0ZWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID date
DataItem PC0ZWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Field to strip leading zeros
DataItem PC0ZWTXT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select type
DataItem PC0ZWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FROM YEAR YY
DataItem PC0ZWYY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0ZWYY2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

