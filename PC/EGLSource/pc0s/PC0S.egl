package pc0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0S ****
//                   PRODUCTION ORDER SYSTEM
//                   -----------------------
// 
//          PRODUCT INQUIRY/MAINTENANCE SELECTION/LIST
// 
//    This program will allow the user to bring up a list of
// P.O. Products for inquiry/maintenance functions. Access
// this application by entering option 3 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to
// enter desired criteria on a particular P.O. Product and be
// transfered to an application according to the entered data.
// 
//    The user can select one or more rows for inquiry with the
// ENTER key. The user will then be transfered to PC0K in
// inquiry mode, where they can view the selected data.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can select one or more rows for change with the
// PF12 key. The user will then be transfered to PC0K in
// change mode, where they can change the selected data.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can select one or more rows for split with the
// PF20 key. The user will then be transfered to PC0N in
// split mode, where they can split the selected P.O. Product
// to another P.O. Product.
// Pressing ENTER will cycle the user to the next selected row.
// Pressing PF3 will return the user to the list screen in this
// application.
// 
//    The user can also obtain more detailed information for
// the list by pressing PF17, which will transfer them to PC0U
// for footwear, and PC0R for all others.
// 
//    Curtain fields will be protected and thus can not be
// changed dependent on security and GPC code.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// 
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   -------  ----------------------------------------
// 03/29/90   mchris   New Application
// 09/04/90   dmeier   add pcprec field moves for call to
//                     xspcs05 (pc0s216)
// 
// 09/24/90   JGLAZE   Fix index bug that occurred when the
//                     number of entries was divisable by 15
//                     and each required two lines. Sheesh!
//                     Who'da quessed that one?
// 10/01/90   lsutto   allow gpc 07 access
// 12/26/90   lsutto   add owner group to screens
// 01/09/91   ZLefko   A77B - change status cd 'CX' to display
//                     only user cancelled items and allow for
//                     status cd '*X' for all cancelled items,
//                     for GPC '03' only.
// 02/11/91   ZLefko   Re-gen for table changes.
// 02/18/91   ZLefko   Modify to pass status request '*X' on a
//                     PF12.
// 03/11/91   kdenne   Modify screens to allow owner group as a
//                     option to select by.
// 05/24/91   DFRANC   Default Dimension CD to 00 for footwear.
// 09/03/91   GAMEN    Change msg # for date validation in s06.
// 10/29/91   DFRANC   Add display of style name to screen.
// 12/18/91   GAMEN    Add sales order logic.
// 04/23/92   chaert   A182 - add division to PCPrec for ETAL
//                     calculation.
// 05/11/92   lsutto   A173 - pc0s262 and pc0s262 were blanking
//                     out fcty-cd instead of or-typ.
// 05/11/92   lsutto   F162 - change the way we show SO# on
//                     the extra line.
// 05/21/92   lsutto   pc0s210 fix xxxtslen field (to 2430)
// 09/25/92   gamen    move spaces to pc0smpdm not pc0smpmo
//                     in pc0s263 when not entered.
// 11/09/92   lsutto   ADD NO-BEEP LOGIC PC0O120,224
// 09/23/93   dhales   change to xspcs05 required appl regen
// 
// 10/11/93   dhales   change pass on iseg in commarea
// 
// 10/17/93   dhales   fix justification on map and verify
//                     msgno is numberic
// 
// 01/10/94   gamen    add indicator for MSR orders. Place
//                     an 'M' next to S.O. on list screen.
// 02/04/94   dhales   for po nbrs < 300000 prevent access
//                     to pc0k and pc0n.
// 02/04/94   dhales   for po nbrs < 300000 but greater than
//                     99999 prevent access to pc0k and pc0n
// 06/02/94   SLEWIS   FOR GPC 02 NEED DT SHOWN IN PONBR
// 09/01/94   JJUDKI   PCF-231. Highlight component program
//                     styles.
// 10/27/94   KGRAHA   Change sales order field to 9.3 digits
// 12/28/95   jniese   Change msr logic for european S.O.'s
// 12/06/96   jniese   recompile to get new xspcs05.
// 04/29/97   asunda   recompile to get new xspcs05.
// 06/03/97   PHARWO   PCA367 - PPR PROJECT, PO VIEWS
// 06/23/97   jniese   pca367 - correct map length
// 07/14/97   jniese   pca367 - ppr corrections
// 10/21/97   DRAMSE   generated for the changed XPPC001
// 02/10/98   DRAMSE   Changed to use VPRDCU03 instead of
//                     PC2REC. Also changed to call VPRDCU03
//                     instead of IO3340.
//                     Changed XPPC001(flow),PC0S153,PC0S157,
//                     PC0S221, PC0SS01
// 02/13/98   DRAMSE   recompile to get new xspcs05/XSPCS07
// 06/10/98   drammo   PCF147 - Regen appln to get new
//                     XSPCS05 & XSPCS06 which are changed to
//                     include ST po type in ETAL calculation
// 04/23/99   KGRAHA   Regen to get new XSPCS05 which now does
//                     not include 'BA' in ETAL calculation.
// 07/06/99   DRAMMO   PCF198 - Modified to invalidate split
//                     option for POs of type 'LP'.
// 09/24/99   vsanka   regenerated due to changes to xspcs05.
// 08/02/00   RSELVA   Modified XSPCS05 for zeroing
//                        out of MADD from 20001012 onwards
// 12/21/00   rmurth   compiled for change in SGRP XSPCS07
// *                   XSPCS07 modified to have hardcoded PADD
// *                   for WHSE '51' and Origin USA for GPC 03
// *********************
Program PC0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OP1REC OP1REC; // record
  PC0SW00 PC0SW00; // record
  PC0SW01 PC0SW01; // record
  PC0SW02 PC0SW02; // record
  PC0SW04 PC0SW04; // record
  PC0SW06 PC0SW06; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TSEREC TSEREC; // record
  VCMPPG01 VCMPPG01; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM03 VPOITM03; // record
  VPOSIZ02 VPOSIZ02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use PC9TBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PC0SM.PC0SM010,  // forms
      PC0SM.PC0SM020, 
      PC0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0SM010 initial;
    set PC0SM020 initial;
    set PC0SW00 empty;
    set PC0SW01 empty;
    set PC0SW02 empty;
    set PC0SW04 empty;
    set PC0SW06 empty;
    set VPRDCU03 empty;
    set VPOHDR02 empty;
    set PC4REC empty;
    set VPOITM03 empty;
    set PCFREC empty;
    set PCYREC empty;
    set VFCTY003 empty;
    set PG2REC empty;
    set TSEREC empty;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PC0SW00.PC0SWSWR = "Y"; /* ===>request for data*/
    PC0SW00.PC0SWSWF = "Y"; /* ===>format map switch*/
    PC0SW00.PC0SWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PC0SW00.PC0SWMOD = "N"; /* ===>MODified data flag*/
    PC0SW00.PC0SWMLT = "N"; /* ===>Multiple styles flag*/
    PC0SW00.PC0SWNDT = "Y"; /* ===>NEED DATE DISPLAY FLAG*/
    PC0SW00.PC0SWIXM = 1; /* ===>Map row index*/
    PC0SW00.PC0SWIXR = 1; /* ===>Row index for selected row to*/
                                     /* pass record*/


     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[1] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138; /* Security violation*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0SW00.PC0SWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[2] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0SW00.PC0SWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[3] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0SW00.PC0SWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] == "Y")
        /* ========= Next Sentence ================>*/
      else
        if (COMMAREA.CAILVL[7] == "N")
          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 138;
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0SW00.PC0SWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end
      end
    end

    if (PCWREC.XGPCD != "01"
     && PCWREC.XGPCD != "02"
     && PCWREC.XGPCD != "03"
     && PCWREC.XGPCD != "07"
     && PCWREC.XGPCD != "  ")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      PC0SW00.PC0SWXIT = "Y"; /* ===>exit flag for invalid GPC*/
    end



    if (COMMAREA.CAFROMAP == "PC0K"
     || COMMAREA.CAFROMAP == "PC0N"
     || COMMAREA.CAFROMAP == "PC0R"
     || COMMAREA.CAFROMAP == "PC0U")

      /* ------------------------------------------------------------*/
      /* %GET XSPC003*/
       /* On reentry into your applicaton from a 'called'*/
       /* application find your appl id in the cafrommap*/
       /* array and use the corresponding pcwuser(n). Move*/
       /* spaces to the  cafromap field containing the name of*/
       /* the 'called' application.*/
      /* ------------------------------------------------------------*/


      if (PCWREC.CAFROMAP[1] == "PC0S")
        PC0SW04.PC0SWUSR = PCWREC.PCWUSER1;
        PCWREC.CAFROMAP[1] = " ";
        PCWREC.PCWUSER1 = " ";
        move PC0SW04 to PC0SW01 byName; /* ===> load corr data "Display Rec 1"*/
        move PC0SW04 to PC0SM010 byName; /* ===> load corr data "Map 1"*/

      else
        if (PCWREC.CAFROMAP[2] == "PC0S")
          PC0SW04.PC0SWUSR = PCWREC.PCWUSER2;
          PCWREC.CAFROMAP[2] = " ";
          PCWREC.PCWUSER2 = " ";
          move PC0SW04 to PC0SW01 byName; /* ===> load corr data "Display Rec 1"*/
          move PC0SW04 to PC0SM010 byName; /* ===> load corr data "Map 1"*/

        else
          if (PCWREC.CAFROMAP[3] == "PC0S")
            PC0SW04.PC0SWUSR = PCWREC.PCWUSER3;
            PCWREC.CAFROMAP[3] = " ";
            PCWREC.PCWUSER3 = " ";
            move PC0SW04 to PC0SW01 byName; /* ===> load corr data "Display Rec 1"*/
            move PC0SW04 to PC0SM010 byName; /* ===> load corr data "Map 1"*/

          else
            if (PCWREC.CAFROMAP[4] == "PC0S")
              PC0SW04.PC0SWUSR = PCWREC.PCWUSER4;
              PCWREC.CAFROMAP[4] = " ";
              PCWREC.PCWUSER4 = " ";
              move PC0SW04 to PC0SW01 byName; /* ===> load corr data "Display Rec 1"*/
              move PC0SW04 to PC0SM010 byName; /* ===> load corr data "Map 1"*/

            else
              move PCWREC to PC0SW01 byName; /* ===> load corr data "Display Rec 1"*/
              move PCWREC to PC0SM010 byName; /* ===> load corr data "Map 1"*/

            end
          end
        end
      end


      if (PC0SW04.PC0SWSWM == "1")
        PC0SW00.PC0SWSWM = "1"; /* ===>set  requested select map*/
        PC0SW04.XXXTSPAG = 0; /* ===>set  requested page*/
      end

      if (PC0SW04.PC0SWSWM == "2")
        PC0SW00.PC0SWSWM = "2"; /* ===>set  requested map*/
      end

      if (PC0SW04.PC0SWSWM != "1"
       && PC0SW04.PC0SWSWM != "2")
        PC0SW00.PC0SWSWM = "1"; /* ===>set requested map*/
        PC0SW04.XXXTSPAG = 0; /* ===>set  requested page*/
      end

    else /* ===> not from (PC0K,PC0N,PC0R,PC0U)*/

      if (COMMAREA.XGPCD > " ")
        PC0SM010.XGPCD = COMMAREA.XGPCD;
        PC0SW01.XGPCD = COMMAREA.XGPCD;
      else
        set PC0SM010.XGPCD cursor;
      end
      PC0SW00.PC0SWSWM = "1"; /* ===>set  requested select map*/

    end /* ===> from (PC0K,PC0N,PC0R,PC0U)*/



     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0S001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PC0S001: PC0S001();
    goto PC0S001;
  end // end main
end // end PC0S

// Application main line
Function PC0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (PC0SW00.PC0SWXIT == "Y")

    XSPCS01(); /* =====>Exit to PC0A application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PC0SW00.PC0SWSWF = "Y"; /* Format the map switch*/
    set PC0SM010 initial;
    set PC0SM010.CATOAP cursor, bold; /* Highlight*/
    set PC0SW01 empty; /* ==>reset map display record*/
    PC0SW01.XGPCD = COMMAREA.XGPCD;
    PC0SW00.PC0SWSWM = "1"; /* Map 1 was requested*/

  end


  if (PC0SW00.PC0SWSWM == "1") /* Map 1 was requested*/

    PC0S100(); /* ===> process Display map 1*/

  else

    if (PC0SW00.PC0SWSWM == "2") /* ===> Map 2 was requested*/

      PC0S200(); /* ===> process List map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PC0SW00.XXXPRCNM = "PC0S001"; /* Module identification*/
      PCWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PC0SW00.PC0SWSWM; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PC0SW00.XXXPRCNM; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PC0A"; /* TO application*/

      XSPCS01(); /* Exit to another application*/

      PC0SW00.PC0SWSWM = "1"; /* Map 1 was requested*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

         /* MOVE 'ABND' TO TA1REC.TA1FUNC      ; Termination function*/
         /* ;*/
         /* CALL TA0020 TA1REC,TAEREC (NONCSP;Error diagnosis routine*/
         /* ;*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of pc0s001 ***********************/
end // end PC0S001

// ========>Process map 1 logic
Function PC0S100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0S120(); /* Format and display the map*/

  PC0S130(); /* Check attention identifier*/

  PC0S140(); /* Reset fields to normal intensity*/

  PC0S150(); /* Verify the entered data*/

  PC0S160(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of pc0s100 ***********************/
end // end PC0S100

// -->Format and converse the map
Function PC0S120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0SW00.PC0SWSWF == "Y") /* Map must be formatted*/

      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

      /* ------------------------------------------------------------*/
       /* Format the data in the map from the display storage.*/
      /* ------------------------------------------------------------*/

      PC0SM010.XGPCD = PC0SW01.XGPCD; /* GPC code*/
      PC0SM010.PC6STAT = "OP"; /* po item status*/
      PC0SW01.PC6STAT = "OP"; /* po item status*/


      if (COMMAREA.CAILVL[5] == "Y") /* =======>Authorized for DIV 20 only*/
        set PC0SM010.YSMXDV skip; /* ====> Division Code*/
        PC0SM010.YSMXDV = "20"; /* division code*/
        PC0SW01.YSMXDV = "20"; /* division code*/
      else
        PC0SM010.YSMXDV = "10"; /* division code*/
        PC0SW01.YSMXDV = "10"; /* division code*/
      end

      if (PC0SW01.XGPCD == "02")
        PC0SM010.XDMCD = "00";
        PC0SW01.XDMCD = "00";
      end

      if (PC0SW01.XGPCD == "02"
       && PC0SW01.PC3POIDT != 0
       && COMMAREA.CAFROMAP != "PC0J"
       && COMMAREA.CAFROMAP != "PC0E"
       && COMMAREA.CAFROMAP != "PC0L")
        PC0SW00.TA2GRGGN = PC0SW01.PC3POIDT; /* ===> numeric date*/
        PC0SW00.TA2GRGG = PC0SW00.PC0SWDT; /* ===> character date*/
        PC0SM010.PC0SMPYR = PC0SW00.PC0SMPYR;
        PC0SM010.PC0SMPMO = PC0SW00.PC0SMPMO;
        PC0SM010.PC0SMPDM = PC0SW00.PC0SMPDM;
      else
        PC0SM010.PC0SMPYR = " ";
        PC0SM010.PC0SMPMO = " ";
        PC0SM010.PC0SMPDM = " ";
        PC0SM010.FY1FCTYC = " ";
        PC0SM010.PC4ORTYP = " ";

      end

    end

  else /* error found*/
    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0SM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0SM010.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0SM010.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.PCW-XXXMSGNO-CHAR not numeric)
    PCWREC.XXXMSGNO = 0;
  end

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0SM010.XXXPRCNM = PC0SW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
      set PC0SM010 alarm; /* Indicate sound alarm*/
    end
  end

  converse PC0SM010 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0SW00.XXXPRCNM = " "; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0S121(); /* ====>pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0SM010.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0SM010.CAITEM; /* Application data*/


   /* **                                                        ***/
   /* ********************** End of pc0s120 ***********************/
end // end PC0S120

// Check for ? inquiry by user
Function PC0S121()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0SM010.PC6STAT == "?" /* ===> if any ? entered*/
   || PC0SM010.XWHCD == "?"   
   || PC0SM010.XDMCD == "?"   
   || PC0SM010.XQACD == "?"   
   || PC0SM010.XPGCD == "?"   
   || PC0SM010.XOWCD == "?"   
   || PC0SM010.XGPCD == "?") 



    /* ------------------------------------------------------------*/
             /* STATUS CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC6STAT == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  STATUS CODE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPU01(); /* perform status code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.PC6STAT = PC0SW01.PC6STAT; /* ===> reset map field*/
      end
      set PC0SM010.PC6STAT cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XWHCD == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.XWHCD = PC0SW01.XWHCD; /* ===> reset map field*/
      end
      set PC0SM010.XWHCD cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
                   /* GPC CODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XGPCD == "?") /* if ? in destination  code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "       GPC TABLE          "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform destination code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.XGPCD = PC0SW01.XGPCD; /* ===> reset map field*/
      end
      set PC0SM010.XGPCD cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
               /* DIMENSION TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XDMCD == "?") /* if ? in dimension code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    DIMENSION TABLE       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.XDMCD = PC0SW01.XDMCD; /* ===> reset map field*/
      end
      set PC0SM010.XDMCD cursor; /* ===> reset map field*/
    end

    /* ------------------------------------------------------------*/
               /* QUALITY TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XQACD == "?") /* if ? in quality code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    QUALITY TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* =======> perform quality code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.XQACD = PC0SW01.XQACD; /* ===> reset map field*/
      end
      set PC0SM010.XQACD cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
             /* PACKAGE TYPE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XPGCD == "?") /* if ? in package type code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  PACKAGE TYPE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0SM010.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* move code*/
      else
        PC0SM010.XPGCD = PC0SW01.XPGCD; /* ===> reset map field*/
      end
      set PC0SM010.XPGCD cursor; /* ===> reset map field*/
    end


    /* ------------------------------------------------------------*/
             /* OWNER GROUP TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XOWCD == "?") /* if ? in owner grp code*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "    OWNER GROUP TABLE    "; /* heading*/
      XX0XW02.XWHCD = PC0SM010.XWHCD;

      if (XX0XW02.XWHCD == " ") /* if whse is blank use default values*/
        if (PC0SM010.XGPCD == "03") /* apparel*/
          XX0XW02.XWHCD = "51"; /* use default of 51*/
        else
          XX0XW02.XWHCD = "09"; /* use default of 09*/
        end
      end

      if (XX0XW02.XWHCD != " ") /* if whse, check for valid owner grp*/
        PC0SW01.XWHOWNGF = " "; /* clear owner grp flag*/
        if (XX0XW02.XWHCD in XWHTBL.XWHCD /* code in table*/
         && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
          PC0SW01.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
        else
          PC0SW01.XWHOWNGF = "N"; /* not valid for owner grp*/
        end
      end

      if (PC0SW01.XWHOWNGF == "N") /* not valid for whse wo/owner grps*/
        set PC0SM010.XWHCD cursor, modified, bold; /* highlight*/
        set PC0SM010.XOWCD modified, bold; /* highlight*/
        converseLib.validationFailed(404); /* only accepts owner grp '00'*/
        PC0SW00.XXXPRCNM = "PC0S121"; /* module identification*/
        exit stack;
      else

        while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
          XPXOW01(); /* perform owner group window*/
        end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the data       **/
         /* *  type table code and description to the map.          **/
         /* **********************************************************/

        if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
          PC0SM010.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* move code*/
        else
          PC0SM010.XOWCD = PC0SW01.XOWCD; /* ===> reset map field*/
        end
        set PC0SM010.XOWCD cursor; /* ===> reset map field*/
      end
    end /* end of if ? on owner grp/whse 32*/

    converseLib.clearScreen();

    converseLib.validationFailed(84);

    exit stack;

  end /* end of if ? statements*/

   /* **                                                        ***/
   /* ********************** End of pc0s121 ***********************/
end // end PC0S121

// -->Check attention identifier
Function PC0S130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* m001 display storage*/
    PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

       /* ===========> Purge any pcwrec array data*/
      set PCWREC empty; /* ===>clear pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      PC0SW00.PC0SWSWF = "Y"; /* Format the map switch*/
      set PC0SM010 initial;
      set PC0SM010.CATOAP cursor, bold; /* Highlight*/
      set PC0SW01 empty; /* ==>reset map display record*/
      PC0SW01.XGPCD = COMMAREA.XGPCD;
      PC0SW00.XXXPRCNM = "PC0S130"; /* Module identification*/

    else

      PC0SW00.XXXPRCNM = "PC0S130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1  was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf4 /* or PF4  was pressed*/
   || converseVar.eventKey is pf5) /* or PF5  was pressed*/

    set PCWREC empty; /* ===>clear pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0SM010"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application to application*/
    end



    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    PC0SW00.PC0SWSWF = "Y"; /* Format the map switch*/

    set PC0SM010 initial;
    set PC0SM010.CATOAP cursor, bold; /* Highlight*/
    PC0SW01.XGPCD = COMMAREA.XGPCD;
    PC0SW00.XXXPRCNM = "PC0S130"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PC0SW00.XXXPRCNM = "PC0S130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s130 ***********************/
end // end PC0S130

// -->Reset highlighted fields
Function PC0S140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0SM010.PC4ORTYP initialAttributes; /* P.O. Type code*/
   /* ==========>protect P.O. ID*/
  set PC0SM010.PC0SMPYR initialAttributes; /* ====> production year*/
  set PC0SM010.PC0SMPMO initialAttributes; /* ====> production month*/
  set PC0SM010.PC0SMPDM initialAttributes; /* ====> delivery month*/
  set PC0SM010.FY1FCTYC initialAttributes; /* ====> factory code*/


  set PC0SM010.XGPCD initialAttributes; /* GPC code*/
  set PC0SM010.XWHCD initialAttributes; /* warehouse code*/
  set PC0SM010.PC2INSEG initialAttributes; /* inventory segment code*/
  set PC0SM010.XQACD initialAttributes; /* quality code*/
  set PC0SM010.XPGCD initialAttributes; /* package type code*/
  set PC0SM010.XDMCD initialAttributes; /* dimension code*/
  set PC0SM010.XOWCD initialAttributes; /* owner grp code*/

  if (COMMAREA.CAILVL[5] == "Y") /* =======> Authorized for DIV 20 only*/
    /* ========== Next Sentence ============> not modifiable*/
  else
    set PC0SM010.YSMXDV initialAttributes; /* division code*/
  end

  set PC0SM010.SY1STNBR initialAttributes; /* style number*/
  set PC0SM010.SY2CLRID initialAttributes; /* color code*/
  set PC0SM010.PC6STAT initialAttributes; /* status code*/
  set PC0SM010.PC2CUXID initialAttributes; /* customer xref id*/

  set PC0SM010.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0SM010.CAITEM initialAttributes; /* Commarea application data*/

   /* **                                                        ***/
   /* ********************** End of pc0s140 ***********************/
end // end PC0S140

// -->Verify the entered data
Function PC0S150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PC0SW00.XXXPRCNM = "PC0S150"; /* Module identification*/
    set PC0SM010.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If none of the fields changed, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* If division changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.YSMXDV != PC0SW01.YSMXDV) /* division code*/
      PC0S151(); /* ===========> Verify division code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If package type code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XPGCD != PC0SW01.XPGCD)
      PC0S152(); /* =========> package type code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If spec diff code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC2INSEG != PC0SW01.PC2INSEG)
      PC0S153(); /* =========> Verify spec diff code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If quality was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XQACD != PC0SW01.XQACD) /* quality code*/
      PC0S154(); /* ===========> Verify quality code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If dimension changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XDMCD != PC0SW01.XDMCD) /* dimension code*/
      PC0S155(); /* ===========> Verify dimension code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If warehouse was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XWHCD != PC0SW01.XWHCD)
      PC0S156(); /* =========> Verify warehouse code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If customer xref changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC2CUXID != PC0SW01.PC2CUXID) /* customer xref id*/
      PC0S157(); /* ===========> Verify xref-id on table*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If Status was changed, load map display record.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC6STAT != PC0SW01.PC6STAT)
      PC0S158(); /* =========> Verify status code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If po type changed, verify po type.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC4ORTYP == " ")
      PC0SW01.PC4ORTYP = " ";
    else
      if (PC0SM010.PC4ORTYP != PC0SW01.PC4ORTYP)
        PC0S159(); /* =========> Verify po type*/
        PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
      end
    end

    /* ------------------------------------------------------------*/
     /* If owner grp changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XOWCD != PC0SW01.XOWCD) /* owner grp code*/
      PC0S161(); /* ==========> verify owner grp*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If factory changed, verify factory.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.FY1FCTYC != PC0SW01.FY1FCTYC)
      PC0S180(); /* =========> Verify po type*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If po id changed, verify po id.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC0SMPYR != PC0SW01.PC0SMPYR
     || PC0SM010.PC0SMPMO != PC0SW01.PC0SMPMO
     || PC0SM010.PC0SMPDM != PC0SW01.PC0SMPDM)
      PC0S181(); /* =========> Verify po id*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    else
      /* ------------------------------------------------------------*/
        /* Wildcard to get all po id's if no po id date is entered.*/
      /* ------------------------------------------------------------*/

      if (PC0SM010.PC0SMPYR == " "
       && PC0SM010.PC0SMPMO == " "
       && PC0SM010.PC0SMPDM == " ")
        PC0SW01.PC0SMPYR = PC0SM010.PC0SMPYR;
        PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
        PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;
        PC0SW01.PCYFRDT = 0;
        PC0SW01.PCYTODT = 999999999;
        PC0SW01.PCFSECD = PC0SM010.PC0SMPYR;
      end
    end

    /* ------------------------------------------------------------*/
     /* If color code changed, verify the entered code.*/
     /* or related required fields changed, verify entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.SY2CLRID != PC0SW01.SY2CLRID
     || PC0SM010.SY1STNBR != PC0SW01.SY1STNBR)
      PC0S184(); /* =========> Verify color code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/
    end

    /* ------------------------------------------------------------*/
     /* If style code changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.SY1STNBR != PC0SW01.SY1STNBR
     || PC0SM010.SY1STNBR == " ")

      PC0S185(); /* =========> Verify style code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> data modified*/

    end
    /* ------------------------------------------------------------*/
     /* If GPC Code was changed, verify the entered code.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XGPCD != PC0SW01.XGPCD
     || PC0SM010.XGPCD == " ")

      PC0S186(); /* =========> Verify GPC Code & security*/

    end

    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* ==============> Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* ==============> Exit to display map*/
  end


   /* **                                                        ***/
   /* ********************** End of pc0s150  **********************/
end // end PC0S150

// Verify Division code
Function PC0S151()
  if (PC0SM010.YSMXDV == " ")
    PC0SW01.YSMXDV = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMSUMCD = PC0SM010.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PC0S151";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine to verify division group*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PC0SW01.YSMXDV = PC0SM010.YSMXDV;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S151"; /* Module identification*/
    set PC0SM010.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(50); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s151 ***********************/
end // end PC0S151

// Verify Package type
Function PC0S152()
  if (PC0SM010.XPGCD == " ")
    PC0SW01.XPGCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0SW01.XPGCD = PC0SM010.XPGCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S152"; /* Module identification*/
    set PC0SM010.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(55); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s152 ***********************/
end // end PC0S152

// Verify Inventory Segment
Function PC0S153()
  if (PC0SM010.PC2INSEG == " ")
    PC0SW01.PC2INSEG = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty;
  VPRDCU03.XGPCD = PC0SM010.XGPCD;
  VPRDCU03.PC2INSEG = PC0SM010.PC2INSEG;
  PCYREC.PCYFUNC = "SG";

  PC0SS01(); /* select cust xref row by iseg/gpc*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Code in table*/
   && VPRDCU03.XXXSTAT == "A") /* and active status*/

    PC0SW01.PC2INSEG = PC0SM010.PC2INSEG;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S153"; /* Module identification*/
    set PC0SM010.PC2INSEG cursor, bold; /* Highlight*/
    converseLib.validationFailed(51); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s153 ***********************/
end // end PC0S153

// Verify Quality code
Function PC0S154()
  if (PC0SM010.XQACD == " ")
    PC0SW01.XQACD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0SW01.XQACD = PC0SM010.XQACD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S154"; /* Module identification*/
    set PC0SM010.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(54); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s154 ***********************/
end // end PC0S154

// Verify Dimension code
Function PC0S155()
  if (PC0SM010.XDMCD == " ")
    PC0SW01.XDMCD = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0SW01.XDMCD = PC0SM010.XDMCD;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S155"; /* Module identification*/
    set PC0SM010.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(53); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s155 ***********************/
end // end PC0S155

// Verify Warehouse
Function PC0S156()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XWHCD == " ")
    PC0SW01.XWHCD = " ";
    PC0SW01.XWHOWNGF = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0SW01.XWHCD = PC0SM010.XWHCD;
    PC0SW01.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S156"; /* Module identification*/
    set PC0SM010.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s156 ***********************/
end // end PC0S156

// Verify Cust Xref ID
Function PC0S157()
  if (PC0SM010.PC2CUXID == " ")
    PC0SW01.PC2CUXID = " ";
    return;
  end
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty;
  VPRDCU03.XGPCD = PC0SM010.XGPCD;
  VPRDCU03.PC2CUXID = PC0SM010.PC2CUXID;
  PCYREC.PCYFUNC = "S ";

  PC0SS01(); /* select cust xref row by iseg/gpc*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Code in table*/
   && VPRDCU03.XXXSTAT == "A") /* and active status*/

    PC0SW01.PC2CUXID = PC0SM010.PC2CUXID;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S157"; /* Module identification*/
    set PC0SM010.PC2CUXID cursor, bold; /* Highlight*/
    converseLib.validationFailed(45); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s157 ***********************/
end // end PC0S157

// Verify Status Code
Function PC0S158()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC6STAT == " ")
    PC0SW01.PC6STAT = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if request is for Status '*X'*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC6STAT == "*X") /* request is for all cancelled items*/
    if (PC0SM010.XGPCD == "03") /* apparel only*/

      PC0SM010.PC6STAT = "CX"; /* Set to code in table*/

      /* ------------------------------------------------------------*/
       /* Determine if the code is in the table and status is active.*/
      /* ------------------------------------------------------------*/

      if (PC0SM010.PC6STAT in YPUTBL.YPUCD /* Code in table*/
       && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        PC0SW01.PC6STAT = PC0SM010.PC6STAT;

      else

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0SW00.XXXPRCNM = "PC0S158"; /* Module identification*/
        set PC0SM010.PC6STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(37); /* Indicate missing or invalid*/

      end

      PC0SM010.PC6STAT = "*X"; /* Set back to requested stat cd*/

    else

      /* ------------------------------------------------------------*/
       /* If not apparel, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0SW00.XXXPRCNM = "PC0S158"; /* Module identification*/
      set PC0SM010.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  else

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.PC6STAT in YPUTBL.YPUCD /* Code in table*/
     && YPUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PC0SW01.PC6STAT = PC0SM010.PC6STAT;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0SW00.XXXPRCNM = "PC0S158"; /* Module identification*/
      set PC0SM010.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Indicate missing or invalid*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of pc0s158 ***********************/
end // end PC0S158

// Verify P.O.Type
Function PC0S159()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0SM010.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0SM010.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0SW01.PC4ORTYP = PC0SM010.PC4ORTYP; /* ===> p.o. type code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> modified data*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0SM010.PC4ORTYP cursor, bold;
      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

      PC0SW00.XXXPRCNM = "PC0S159"; /* Module identification*/
      converseLib.validationFailed(33);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0S159"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc0s159 ***********************/
end // end PC0S159

// -->Process valid input request
Function PC0S160()
  if (converseVar.eventKey is enter)

    PC0SW00.PC0SWSWM = "2"; /* ==>map requested*/
    PC0SW00.PC0SWSWR = "Y"; /* ==>request for data*/
    PC0SW00.PC0SWSWF = "Y"; /* ==>format map requested*/

  end


   /* **                                                        ***/
   /* ********************** End of pc0s180 ***********************/
end // end PC0S160

// validates owner grp code
Function PC0S161()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XOWCD == " ")
    PC0SW01.XOWCD = " ";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XWHCD != " ") /* if warehouse is entered*/
    if (PC0SW01.XWHOWNGF == "Y") /* whse allows owner grps*/
      PC0SW01.XOWCD = PC0SM010.XOWCD;
      if (PC0SW01.XOWKEY in XOWTBL.XOWKEY
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        PC0SW01.XOWCD = PC0SM010.XOWCD;
      else
        set PC0SM010.XOWCD cursor, bold; /* highlight*/
        PC0SW01.XOWCD = " "; /* re-init work area*/
        converseLib.validationFailed(405); /* not valid owner grp for whse*/
        PC0SW00.XXXPRCNM = "PC0S161"; /* Module identification*/
      end

    else
      if (PC0SM010.XOWCD != "00") /* whse does not allow owner grps*/
        set PC0SM010.XOWCD cursor, bold; /* highlight*/
        converseLib.validationFailed(404); /* whse only allows '00' owner grp*/
        PC0SW00.XXXPRCNM = "PC0S161"; /* Module identification*/
      else
        PC0SW01.XOWCD = PC0SM010.XOWCD;
      end
    end

  else
    if (PC0SM010.XOWCD in XOWTBL.XOWCD /* Code in table*/
     && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      PC0SW01.XOWCD = PC0SM010.XOWCD;

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0SW00.XXXPRCNM = "PC0S161"; /* Module identification*/
      set PC0SM010.XOWCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(119); /* Indicate missing or invalid*/

    end
  end

   /* **                                                        ***/
   /* ********************** End of pc0s161 ***********************/
end // end PC0S161

// Verify the factory
Function PC0S180()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VFCTY003 empty; /* Row storage area*/

  VFCTY003.XGPCD = PC0SM010.XGPCD; /* ===> GPC*/
  VFCTY003.FY1FCTYC = PC0SM010.FY1FCTYC; /* ===> factory code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0SW01.FY1FCTYC = PC0SM010.FY1FCTYC; /* ===> factory code*/
      PC0SW00.PC0SWMOD = "Y"; /* ===> modified data flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the P.O. Type invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      set PC0SM010.FY1FCTYC cursor, bold;
      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

      PC0SW00.XXXPRCNM = "PC0S180"; /* Module identification*/
      converseLib.validationFailed(32);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0S180"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = VFCTY003.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc0s180 ***********************/
end // end PC0S180

// Verify P.O. ID
Function PC0S181()
   /* ------------------------------------------------------------*/
    /* Wildcard to get all po id's if no po id date is entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC0SMPYR == " "
   && PC0SM010.PC0SMPMO == " "
   && PC0SM010.PC0SMPDM == " ")
    PC0SW01.PC0SMPYR = PC0SM010.PC0SMPYR;
    PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
    PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;
    PC0SW01.PCYFRDT = 0;
    PC0SW01.PCYTODT = 999999999;
    PC0SW01.PCFSECD = PC0SM010.PC0SMPYR;
    return;
  end
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/
    /* Apparel and Footwear have different verification routines*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XGPCD == "02"
   || PC0SM010.XGPCD == "01"
   || PC0SM010.XGPCD == "07")
    PC0S182();
  end

  if (PC0SM010.XGPCD == "03")
    PC0S183();
  end

   /* **                                                        ***/
   /* ********************** End of pc0s181 ***********************/
end // end PC0S181

// Verify Footwear P.O. Id
Function PC0S182()
   /* **********************************************************/
   /* setup the century*/
   /* **********************************************************/

  if (PC0SM010.PC0SMPYR > "85")
    PC0SW00.PC0SWRCC = 19;
  else
    PC0SW00.PC0SWRCC = 20;
  end

   /* **********************************************************/
   /* footwear po id edits:*/
     /* if only year entered -*/
     /* if only year and production month entered -*/
     /* if all three fields entered -*/
   /* **********************************************************/

  if (PC0SM010.PC0SMPYR >= "00" /* valid po id year*/
   && PC0SM010.PC0SMPYR <= "99")
    PC0SW01.PC0SMPYR = PC0SM010.PC0SMPYR;
    if (PC0SM010.PC0SMPMO == " ") /* no production month entered*/
      PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
      if (PC0SM010.PC0SMPDM == " ") /* no delivery month entered*/
        PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;
         /* setup year range*/
        PC0SW00.PC0SWRYY = PC0SM010.PC0SMPYR;
        PC0SW00.PC0SWRM1 = "01";
        PC0SW00.PC0SWRM2 = "01";
        PC0SW01.PCYFRDT = PC0SW00.PC0SWRDT;
        PC0SW00.PC0SWRM1 = "12";
        PC0SW00.PC0SWRM2 = "12";
        PC0SW01.PCYTODT = PC0SW00.PC0SWRDT;
      end
    else /* production month entered*/
      if (PC0SM010.PC0SMPMO >= "01" /* valid po id month*/
       && PC0SM010.PC0SMPMO <= "12")
        PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
        if (PC0SM010.PC0SMPDM == " ") /* no delivery month entered*/
          PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;
           /* setup year/prodmo range*/
          PC0SW00.PC0SWRYY = PC0SM010.PC0SMPYR;
          PC0SW00.PC0SWRM1 = PC0SM010.PC0SMPMO;
          PC0SW00.PC0SWRM2 = "01";
          PC0SW01.PCYFRDT = PC0SW00.PC0SWRDT;
          PC0SW00.PC0SWRM2 = "12";
          PC0SW01.PCYTODT = PC0SW00.PC0SWRDT;
        else /* delivery month entered*/
          if (PC0SM010.PC0SMPDM >= "01" /* valid delivery month*/
           && PC0SM010.PC0SMPDM <= "12")
            PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;
             /* setup year/prodmo/delmo range*/
            PC0SW00.PC0SWRYY = PC0SM010.PC0SMPYR;
            PC0SW00.PC0SWRM1 = PC0SM010.PC0SMPMO;
            PC0SW00.PC0SWRM2 = PC0SM010.PC0SMPDM;
            PC0SW01.PCYFRDT = PC0SW00.PC0SWRDT;
            PC0SW01.PCYTODT = PC0SW00.PC0SWRDT;
          else /* invalid delivery month*/
            PC0SW00.XXXPRCNM = "PC0S182";
            set PC0SM010.PC0SMPDM cursor, bold;
            converseLib.validationFailed(31);
          end
        end
      else /* invalid production month*/
        PC0SW00.XXXPRCNM = "PC0S182";
        set PC0SM010.PC0SMPMO cursor, bold;
        converseLib.validationFailed(31);
      end
    end
  else /* invalid po id year*/
    PC0SW00.XXXPRCNM = "PC0S182";
    set PC0SM010.PC0SMPYR cursor, bold;
    converseLib.validationFailed(365);
  end
   /* **                                                        ***/
   /* ********************** End of pc0s182 ***********************/
end // end PC0S182

// Verify Apparel P.O. Id
Function PC0S183()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* if just season/year entered -*/
   /* if season/year and production month entered -*/
   /* if all 3 field in po id entered -*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC0SMPDM == " ") /* delivery month not entered*/
     /* next sentence*/
  else /* delivery month entered*/
    if (PC0SM010.PC0SMPDM >= "01"
     && PC0SM010.PC0SMPDM <= "12")
       /* valid delivery month*/
    else /* invalid delivery month*/
      set PC0SM010.PC0SMPDM cursor, bold;
      converseLib.validationFailed(31);
      PC0SW00.XXXPRCNM = "PC0S183";
    end
  end

  if (PC0SM010.PC0SMPMO == " ") /* production month not entered*/
     /* next sentence*/
  else /* production month entered*/
    if (PC0SM010.PC0SMPMO >= "01"
     && PC0SM010.PC0SMPMO <= "12")
       /* valid production month*/
    else /* invalid production month*/
      set PC0SM010.PC0SMPMO cursor, bold;
      converseLib.validationFailed(31);
      PC0SW00.XXXPRCNM = "PC0S183";
    end
  end

   /* ------------------------------------------------------------*/
    /* verify that the apparel season/year and production month*/
      /* are in the dprodc.vpovfy table if the production year*/
      /* was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC0SMPMO != " ")
    set PCFREC empty;
    PCFREC.PCFSECD = PC0SM010.PC0SMPYR; /* season year*/
    PC0SW00.PC0SWNUM = PC0SM010.PC0SMPMO; /* convert to numeric*/
    PCFREC.PCFBUYMO = PC0SW00.PC0SWRNM; /* buy month*/

    PC0SS02(); /* select unique dprodc.vpovfy*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PC0SW01.PC0SMPYR = PC0SM010.PC0SMPYR;
      PC0SW01.PCFSECD = PC0SM010.PC0SMPYR;
      PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
      PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;

      PC0SW00.PC0SWRYR = PCFREC.PCFBUYYR;
      PC0SW00.PC0SWRM1 = PC0SM010.PC0SMPMO;

      /* ------------------------------------------------------------*/
        /* setup the beginning po id month range date*/
      /* ------------------------------------------------------------*/

      if (PC0SM010.PC0SMPDM == " ")
        PC0SW00.PC0SWRM2 = "01";
      else
        PC0SW00.PC0SWRM2 = PC0SM010.PC0SMPDM;
      end

      PC0SW01.PCYFRDT = PC0SW00.PC0SWRDT;

      /* ------------------------------------------------------------*/
        /* setup the ending po id month range date*/
      /* ------------------------------------------------------------*/

      if (PC0SM010.PC0SMPDM == " ")
        PC0SW00.PC0SWRM2 = "12";
      else
        PC0SW00.PC0SWRM2 = PC0SM010.PC0SMPDM;
      end
      PC0SW01.PCYTODT = PC0SW00.PC0SWRDT;
    else
      PC0SW00.XXXPRCNM = "PC0S183";
      converseLib.validationFailed(80);
      set PC0SM010.PC0SMPYR cursor, bold;
      set PC0SM010.PC0SMPMO bold;
      set PC0SM010.PC0SMPDM bold;
    end

    /* ------------------------------------------------------------*/
      /* select the set of rows in the dprodc.vpovfy table that*/
        /* match on the season/year. do this to find the beginning*/
        /* po id date (earliest buy month/year) and the ending*/
        /* po id date (latest buy month/year).*/
    /* ------------------------------------------------------------*/

  else
    PCFREC.PCFSECD = PC0SM010.PC0SMPYR;
    PCFREC.PCFBUYMO = -1;
    PCFREC.XXXSTAT = "*";

    PC0SS03(); /* select set*/

    PC0SS04(); /* fetch row*/

    if (SQLCA.VAGen_SQLCODE != 0)
      PC0SW00.XXXPRCNM = "PC0S183";
      converseLib.validationFailed(80);
      set PC0SM010.PC0SMPYR cursor, bold;
      set PC0SM010.PC0SMPMO bold;
      set PC0SM010.PC0SMPDM bold;
      return;
    else

      /* ------------------------------------------------------------*/
        /* setup the po id beginning date from the first fetched row*/
      /* ------------------------------------------------------------*/
      PC0SW01.PC0SMPYR = PC0SM010.PC0SMPYR;
      PC0SW01.PCFSECD = PC0SM010.PC0SMPYR;
      PC0SW01.PC0SMPMO = PC0SM010.PC0SMPMO;
      PC0SW01.PC0SMPDM = PC0SM010.PC0SMPDM;

      PC0SW00.PC0SWRYR = PCFREC.PCFBUYYR;
      PC0SW00.PC0SWRNM = PCFREC.PCFBUYMO;
      PC0SW00.PC0SWRM1 = PC0SW00.PC0SWNUM;
      PC0SW00.PC0SWRM2 = "01";

      PC0SW01.PCYFRDT = PC0SW00.PC0SWRDT;
    end


    /* ------------------------------------------------------------*/
      /* read the remaining rows in the dprodc.vpovfy table*/
       /* and move the last row info to the po id ending date*/
    /* ------------------------------------------------------------*/

    PC0SW00.PC0SWDCF = "N";
    while (PC0SW00.PC0SWDCF == "N")
      PC0SS04(); /* fetch next row*/
    end

    PC0SS05(); /* close set*/

    PC0SW00.PC0SWRYR = PCFREC.PCFBUYYR;
    PC0SW00.PC0SWRNM = PCFREC.PCFBUYMO;
    PC0SW00.PC0SWRM1 = PC0SW00.PC0SWNUM;
    PC0SW00.PC0SWRM2 = "12";
    PC0SW01.PCYTODT = PC0SW00.PC0SWRDT;
  end
   /* **                                                        ***/
   /* ********************** End of pc0s183 ***********************/
end // end PC0S183

// Verify Color Code
Function PC0S184()
   /* ------------------------------------------------------------*/
   /* check if color code ' ', it is optional.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.SY2CLRID == " ")

    PC0SW01.SY2CLRID = " ";
    return;

  end
   /* ------------------------------------------------------------*/
   /* check if Style ' ', it is needed to verify color*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.SY1STNBR == " ")

    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PC0SM010.XGPCD; /* ===> GPC*/
  PG2REC.SY2CLRID = PC0SM010.SY2CLRID; /* ===> color code*/
  PG2REC.SY1STNBR = PC0SM010.SY1STNBR; /* ===> style code*/

  if (PC0SW01.XDMCD == " ") /* ===> dimension code*/
    PG2REC.XDMCD = "00";
  else
    PG2REC.XDMCD = PC0SM010.XDMCD;
  end

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0SW01.SY2CLRID = PC0SM010.SY2CLRID; /* ===> color code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the color invalid.*/
    /* ------------------------------------------------------------*/

    PC0SW00.XXXPRCNM = "PC0S184"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0SM010.SY1STNBR cursor, bold;
      set PC0SM010.SY2CLRID bold;
      set PC0SM010.XDMCD bold;
      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

      PC0SW00.XXXPRCNM = "PC0S184"; /* Module identification*/
      converseLib.validationFailed(197); /* ===>style,color dim combination not valid*/
      return; /* Return to previous process*/

    end

  end

  converseLib.clearScreen();
  
  set PC0SM010.SY2CLRID cursor, bold;
  converseLib.validationFailed(10);

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pc0s184 ***********************/
end // end PC0S184

// Verify Style Code
Function PC0S185()
   /* ------------------------------------------------------------*/
   /* set flag if map data was modified*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.SY1STNBR != PC0SW01.SY1STNBR)
    PC0SW00.PC0SWMOD = "Y"; /* ===>data modified flag*/
  end

   /* ------------------------------------------------------------*/
   /* check if Style ' ' and required*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.SY1STNBR == " ")

    PC0SW01.SY1STNBR = PC0SM010.SY1STNBR;
    PC0SW00.XXXPRCNM = "PC0S185"; /* Module identification*/
    set PC0SM010.SY1STNBR cursor, bold;
    converseLib.validationFailed(196);


    return;

  end

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = PC0SM010.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PC0SM010.SY1STNBR; /* ===> style code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/

  XSPG201(); /* ======>verify first row on table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC0SW01.SY1STNBR = PC0SM010.SY1STNBR; /* ===> style code*/
    PC0SW01.SY1SSTNM = PG2REC.SY1SSTNM; /* ===> style short name*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If error found, indicate the style code invalid.*/
   /* ------------------------------------------------------------*/


  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    PC0SW00.XXXPRCNM = "PC0S185"; /* Module identification*/
    set PC0SM010.SY1STNBR cursor, bold;
    converseLib.validationFailed(196);
    return; /* Return to previous process*/

  end

  converseLib.clearScreen();
  
  set PC0SM010.SY1STNBR cursor, bold;
  converseLib.validationFailed(10);
  exit stack; /* Return to previous process*/

   /* **                                                        ***/
   /* ********************** End of pc0s185 ***********************/
end // end PC0S185

// Verify GPC Code & security
Function PC0S186()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PC0SM010.XGPCD == "01")
    if (COMMAREA.CACLVL[1] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[1] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PC0SM010.XGPCD cursor, bold;
        PC0SW00.XXXPRCNM = "PC0S186";
        return;
      end
    end
  end

  if (PC0SM010.XGPCD == "02")
    if (COMMAREA.CACLVL[2] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[2] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PC0SM010.XGPCD cursor, bold;
        PC0SW00.XXXPRCNM = "PC0S186";
        return;
      end
    end
  end

  if (PC0SM010.XGPCD == "03")
    if (COMMAREA.CACLVL[3] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[3] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PC0SM010.XGPCD cursor, bold;
        PC0SW00.XXXPRCNM = "PC0S186";
        return;
      end
    end
  end

  if (PC0SM010.XGPCD == "07")
    if (COMMAREA.CACLVL[7] == "Y")
      /* ========== Next Sentence ================>*/
    else
      if (COMMAREA.CAILVL[7] == "N")
        converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
        set PC0SM010.XGPCD cursor, bold;
        PC0SW00.XXXPRCNM = "PC0S186";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XGPCD == "01"
   || PC0SM010.XGPCD == "02"
   || PC0SM010.XGPCD == "03"
   || PC0SM010.XGPCD == "07")

    PC0SW01.XGPCD = PC0SM010.XGPCD;
    COMMAREA.XGPCD = PC0SM010.XGPCD;

  else /* ===> not valid for this application*/

    /* ------------------------------------------------------------*/
     /* Determine if the code is in the table and status is active.*/
    /* ------------------------------------------------------------*/

    if (PC0SM010.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

      converseLib.validationFailed(159); /* ===> can not access info with the GPC CODE*/
      set PC0SM010.XGPCD cursor, bold;
      PC0SW00.XXXPRCNM = "PC0S186"; /* Module identification*/

    else
      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      converseLib.validationFailed(28); /* Indicate missing or invalid*/
      set PC0SM010.XGPCD cursor, bold;
      PC0SW00.XXXPRCNM = "PC0S186"; /* Module identification*/

    end /* ===> GPC in Table*/


  end /* ===> GPC in ('01','02','03') & valid*/


   /* **                                                        ***/
   /* ********************** End of pc0s186 ***********************/
end // end PC0S186

// ========>Process Map 2 logic
Function PC0S200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0S210(); /* Obtain the data to display*/

  PC0S220(); /* Format and display the map*/

  PC0S230(); /* Check attention identifier*/

  PC0S240(); /* Reset fields to normal intensity*/

  PC0S250(); /* Verify the entered data*/

  PC0S260(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of pc0s200 ***********************/
end // end PC0S200

// -->Obtain the data to display
Function PC0S210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0SW00.PC0SWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PC0SW00.XXXTSLEN = 2670; /* Temporary storage page length*/
   /* ==> (15 display lines) * (178 length of display line) = 2670*/
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  PC0S211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PC0SW02.XGPCD = PC0SM010.XGPCD; /* ===> GPC code*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ---> a set of Item Rows.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XGPCD == "02")
    PC0S292(); /* ===> Select set and open cursor for*/
                                   /* footwera*/
  else
    PC0S212(); /* ===> Select set and open for all*/
                                   /* others*/
  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XGPCD == "02")
    PC0S293(); /* ===> Fetch next footwear row*/
  else
    PC0S213(); /* ===> Fetch next all other row*/
  end

  if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/
    PC0S214(); /* ===> direct ship read loop*/
  end

  if (PC0SW00.PC0SWSWC == "N" /* ===> not end of cursor*/
   && VPOITM03.XGPCD == "03") /* ===> for apparel only*/
    PC0S215(); /* ===> get po header*/
  end

  set PC0SW02 empty; /* ===>reset the temp storage array*/

  PC0SW00.PC0SWIXM = 1; /* ===>initialize map index*/

  while (PC0SW00.PC0SWSWC == "N") /* ===> Until end of cursor*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PC0SW00.PC0SWIXM <= 15) /* ===> Page has room for more rows*/
       /* CONTINUE*/
    else
      PC0S217(); /* Add page to temporary storage*/
    end

    if (PC0SM010.XGPCD == "03") /* Apparell only*/
      if (PC0SM010.PC6STAT == " ") /* Select all statuses*/
        if (VPOITM03.PC6STAT == "CX" /* Except when cancelled*/
         && VPOITM03.XXXUSRID > " ") /* Select only user cancelled*/
          PC0S216(); /* ===> build temp storage line*/
          PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>row-index*/
        else
          if (VPOITM03.PC6STAT != "CX")
            PC0S216(); /* ===> build temp storage line*/
            PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>row-index*/
          end
        end
      else
        if (PC0SM010.PC6STAT == "CX" /* Select only cancelled items*/
         && VPOITM03.XXXUSRID > " ") /* And only if user cancelled*/
          PC0S216(); /* ===> build temp storage line*/
          PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>row-index*/
        else
          if (PC0SM010.PC6STAT != "CX")
            PC0S216(); /* ===> build temp storage line*/
            PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>row-index*/
          end
        end
      end
    else
      PC0S216(); /* ===> build temp storage line*/
      PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>row-index*/
    end

    if (PC0SM010.XGPCD == "02")
      PC0S293(); /* ===> Fetch next footwear row*/
    else
      PC0S213(); /* ===> Fetch next all other row*/
    end

    if (COMMAREA.CAILVL[4] == "Y") /* ===> direct ship security*/
      PC0S214(); /* ===> direct ship read loop*/
    end
    if (PC0SW00.PC0SWSWC == "N" /* ===> not end of cursor*/
     && VPOITM03.XGPCD == "03") /* ===> for apparel only*/
      PC0S215(); /* ===> get po header*/
    end
  end
   /* ------------------------------------------------------------*/
   /* format the extra map line for the very last line if it*/
    /* exists.*/
   /* ------------------------------------------------------------*/

  if (VPOITM03.XGPCD == "03")
    PC0S215(); /* ===> get po header*/
  end /* ===>  for apparel only*/
  if (VPOHDR02.PC3BLPO > 0
   || VPOHDR02.IN7STNBR > 0
   || VPOITM03.OP1CUOID > 0
   || VPOITM03.XDMCD != "00"
   || VPOITM03.XPGCD != "00"
   || VPOITM03.XOWCD != "00")
    if (PC0SW00.PC0SWIXM > 15)
      PC0S217();
      PC0SW02.PC3BLPO[PC0SWIXM] = VPOHDR02.PC3BLPO;
      PC0SW02.IN7STNBR[PC0SWIXM] = VPOHDR02.IN7STNBR;
      PC0SW02.OP1CUOID[PC0SWIXM] = VPOITM03.OP1CUOID;
      PC0SW02.OP1NORID[PC0SWIXM] = VPOITM03.OP1NORID;
      PC0SW02.OP1CUNDT[PC0SWIXM] = VPOITM03.OP1CUNDT;
      PC0SW02.XDMCD[PC0SWIXM] = VPOITM03.XDMCD;
      PC0SW02.XPGCD[PC0SWIXM] = VPOITM03.XPGCD;
      PC0SW02.XOWCD[PC0SWIXM] = VPOITM03.XOWCD;
      PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1;
    else
      PC0SW02.PC3BLPO[PC0SWIXM] = VPOHDR02.PC3BLPO;
      PC0SW02.IN7STNBR[PC0SWIXM] = VPOHDR02.IN7STNBR;
      PC0SW02.OP1CUOID[PC0SWIXM] = VPOITM03.OP1CUOID;
      PC0SW02.OP1CUNDT[PC0SWIXM] = VPOITM03.OP1CUNDT;
      PC0SW02.OP1NORID[PC0SWIXM] = VPOITM03.OP1NORID;
      PC0SW02.XDMCD[PC0SWIXM] = VPOITM03.XDMCD;
      PC0SW02.XPGCD[PC0SWIXM] = VPOITM03.XPGCD;
      PC0SW02.XOWCD[PC0SWIXM] = VPOITM03.XOWCD;
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PC0SW00.PC0SWIXM > 1) /* Page was formatted*/
    PC0S217(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.XGPCD == "02")
    PC0S298(); /* Close the footwear set cursor*/
  else
    PC0S218(); /* Close the all other set cursor*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* and redisplay Map 1*/
   /* ------------------------------------------------------------*/

  if (PC0SW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0SW00.PC0SWSWM = "1"; /* ======>set map switch*/
    PC0SW00.PC0SWSWF = "N"; /* Request for data switch*/
    PC0SW00.XXXPRCNM = "PC0S210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/
    set PC0SM010.SY1STNBR cursor;

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* No message to display*/
    PC0SW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC0SWSWR = "N"; /* Request for data switch*/


   /* **                                                        ***/
   /* ********************** End of pc0s210 ***********************/
end // end PC0S210

// purge any temporary storage
Function PC0S211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0SW02 empty; /* Map 2 display storage record*/

  PC0SW00.PC0SWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0SW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0SW00.XXXPRCNM = "PC0S211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  if (PC0SW00.PC0SWSWM == "2")
    TA1REC.TA1MAPNO = "M020"; /* Map number*/
  end

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s211 ***********************/
end // end PC0S211

// Select set & open ITEM cursor
Function PC0S212()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC0SWIXM = 1; /* Display line index*/
  PC0SW00.PC0SWSWC = "N"; /* End of cursor switch*/


  set VPOITM03 empty; /* ===>initialize record before loading*/
                                   /* it*/

   /* ------------------------------------------------------------*/
   /* set up wildcards for iomod*/
   /* ------------------------------------------------------------*/

  VPOITM03.XUMCD = "*"; /* unit of measure*/
  VPOITM03.PC6ETSDT = -1; /* ets date*/
  VPOITM03.YMTCD = "*"; /* mode code*/
  VPOITM03.PC6PLAN = -1; /* plan*/
  VPOITM03.XDSCD = "*"; /* direct ship code*/

   /* ------------------------------------------------------------*/
   /* set up required fields for iomod*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC0SW01.XGPCD; /* gpc*/
  VPOITM03.PO-REG-CD = "01"; /* PO REGION CODE*/

   /* ------------------------------------------------------------*/
   /* If style entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY1STNBR > " ")
    VPOITM03.SY1STNBR = PC0SW01.SY1STNBR;
  else
    VPOITM03.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* If season/year entered,*/
    /* note: the beginning and ending po id is set up in pc0s188*/
          /* and pc0s189.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XGPCD == "03")
    if (PC0SW01.PC0SMPYR > " ")
      VPOITM03.PCFSECD = PC0SW01.PC0SMPYR;
    else
      VPOITM03.PCFSECD = "*";
    end
  else
    VPOITM03.PCFSECD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If color code entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY2CLRID > " ")
    VPOITM03.SY2CLRID = PC0SW01.SY2CLRID;
  else
    VPOITM03.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If factory entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.FY1FCTYC > " ")
    VPOITM03.FY1FCTYC = PC0SW01.FY1FCTYC;
  else
    VPOITM03.FY1FCTYC = "*";
  end

   /* ------------------------------------------------------------*/
   /* If status entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC6STAT > " ")
    if (PC0SW01.PC6STAT == "*X")
      VPOITM03.PC6STAT = "CX";
    else
      VPOITM03.PC6STAT = PC0SW01.PC6STAT;
    end
  else
    VPOITM03.PC6STAT = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2CUXID > " ")
    VPOITM03.PC2CUXID = PC0SW01.PC2CUXID;
  else
    VPOITM03.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XWHCD > " ")
    VPOITM03.XWHCD = PC0SW01.XWHCD;
  else
    VPOITM03.XWHCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If po type entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC4ORTYP > " ")
    VPOITM03.PC4ORTYP = PC0SW01.PC4ORTYP;
  else
    VPOITM03.PC4ORTYP = "*";
  end

   /* ------------------------------------------------------------*/
   /* if dimension entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XDMCD > " ")
    VPOITM03.XDMCD = PC0SW01.XDMCD;
  else
    VPOITM03.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* if quality entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XQACD > " ")
    VPOITM03.XQACD = PC0SW01.XQACD;
  else
    VPOITM03.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If inventory segment code entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2INSEG > " ")
    VPOITM03.PC2INSEG = PC0SW01.PC2INSEG;
  else
    VPOITM03.PC2INSEG = "*";
  end

   /* ------------------------------------------------------------*/
   /* If package type entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XPGCD > " ")
    VPOITM03.XPGCD = PC0SW01.XPGCD;
  else
    VPOITM03.XPGCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner grp entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XOWCD > " ")
    VPOITM03.XOWCD = PC0SW01.XOWCD;
  else
    VPOITM03.XOWCD = "*"; /* owner group*/
  end

   /* ------------------------------------------------------------*/
   /* If division entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.YSMXDV > " ")
    VPOITM03.YSMXDV = PC0SW01.YSMXDV;
  else
    VPOITM03.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S3";
  PCYREC.PCYFRDT = PC0SW01.PCYFRDT;
  PCYREC.PCYTODT = PC0SW01.PCYTODT;

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S212"; /* Module identification*/
  PC0SW00.PC0SWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0SW00.PC0SWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0SM010 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s212 ***********************/
end // end PC0S212

// Fetch next row in ITEM cursor
Function PC0S213()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  VPOITM03.PO-REG-CD = "01";
  PCYREC.PCYFUNC = "N3";

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0SW00.PC0SWSPD = " "; /* reset next product field*/
      PC0SW00.PC0SWSST = " "; /* reset nest destination field*/
      PC0SW00.PC0SWSWC = "Y"; /* Indicate end of cursor "ITEM"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S213"; /* Module identification*/
  PC0SW00.PC0SWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC0SW00.PC0SWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s213 ***********************/
end // end PC0S213

// fetch next row loop for D.S.
Function PC0S214()
   /* ------------------------------------------------------------*/
   /* Fetch the data until valid direct ship code is '1' or '2'*/
   /* ------------------------------------------------------------*/

  while (VPOITM03.XDSCD != "1" /* ===> direct ship whse only*/
   && VPOITM03.XDSCD != "2" /* ===> direct ship*/
   && PC0SW00.PC0SWSWC == "N") /* ===> Until end of cursor*/

    if (PC0SM010.XGPCD == "02")
      PC0S293(); /* ===> Fetch next footwear row*/
    else
      PC0S213(); /* ===> Fetch next all other row*/
    end

  end


   /* **                                                        ***/
   /* ********************** End of pc0s214 ***********************/
end // end PC0S214

// Get DPRODC.VPOHDR01 Row
Function PC0S215()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* Row storage area*/
  set PCYREC empty; /* Row storage area*/

  VPOHDR02.XGPCD = VPOITM03.XGPCD; /* ===> GPC*/
  PC0SW01.PO-REG-CD = VPOITM03.PO-REG-CD; /* ===> p.o. REGION CODE*/
  VPOHDR02.PO-REG-CD = VPOITM03.PO-REG-CD; /* ===> p.o. REGION CODE*/
  VPOHDR02.PC3PONBR = VPOITM03.PC3PONBR; /* ===> p.o. number*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.clearScreen();
      
      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

      PC0SW00.XXXPRCNM = "PC0S215"; /* Module identification*/
      converseLib.validationFailed(69);

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0S215"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc0s215 ***********************/
end // end PC0S215

// Save the data in temp storage
Function PC0S216()

   /* ------------------------------------------------------------*/
   /* Save the P.O. ID to be displayed in temp storage*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC3POIDT = VPOITM03.PC3POIDT; /* po id date*/
  PC0SW00.TA2GRGGN = PC0SW00.PC3POIDT; /* move to numeric display*/
  PC0SW00.TA2GRGG = PC0SW00.TA2GRGGN; /* move to character display*/

  PC0SW00.PCFSECD = VPOITM03.PCFSECD; /* po id season code*/
  PC0SW02.FY1FCTYC[PC0SWIXM] = VPOITM03.FY1FCTYC; /* factory*/

  if (VPOITM03.XGPCD == "03") /* if apparel*/
    PC0SW02.PC0SMPYR[PC0SWIXM] = PC0SW00.PCFSECD;
                                   /* setup season/year*/
  else
    PC0SW02.PC0SMPYR[PC0SWIXM] = PC0SW00.PC0SMPYR;
                                   /* setup po id year*/
  end

  PC0SW02.PC0SMPMO[PC0SWIXM] = PC0SW00.PC0SMPMO; /* setup prod mo.*/
  PC0SW02.PC0SMPDM[PC0SWIXM] = PC0SW00.PC0SMPDM; /* setup del mo.*/

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the temp storage page*/
   /* ------------------------------------------------------------*/

  PC0SW02.XGPCD[PC0SWIXM] = VPOITM03.XGPCD; /* gpc*/
  PC0SW02.PO-REG-CD[PC0SWIXM] = VPOITM03.PO-REG-CD; /* po region*/
  PC0SW02.PC3PONBR[PC0SWIXM] = VPOITM03.PC3PONBR; /* po number*/
  PC0SW02.OP1CUNDT[PC0SWIXM] = VPOITM03.OP1CUNDT; /* NEED DATE*/
  PC0SW02.PC6ITMNB[PC0SWIXM] = VPOITM03.PC6ITMNB; /* itm seq nbr*/
  PC0SW02.XQACD[PC0SWIXM] = VPOITM03.XQACD; /* quality*/
  PC0SW02.XOWCD[PC0SWIXM] = VPOITM03.XOWCD; /* owner group*/
  PC0SW02.XUMCD[PC0SWIXM] = VPOITM03.XUMCD; /* unit of measure*/
  PC0SW02.XPGCD[PC0SWIXM] = VPOITM03.XPGCD; /* pkg code*/
  PC0SW02.XDMCD[PC0SWIXM] = VPOITM03.XDMCD; /* dimension*/
  PC0SW02.SY1STNBR[PC0SWIXM] = VPOITM03.SY1STNBR; /* style*/
  PC0SW02.SY2CLRID[PC0SWIXM] = VPOITM03.SY2CLRID; /* color*/
  PC0SW02.PC6PLAN[PC0SWIXM] = VPOITM03.PC6PLAN; /* plan*/
  if (PC0SM010.PC6STAT == "*X")
    if (VPOITM03.XXXUSRID == " ")
      PC0SW02.PC6STAT[PC0SWIXM] = VPOITM03.PC6STAT; /* status*/
    else
      PC0SW02.PC6STAT[PC0SWIXM] = "UX"; /* status*/
    end
  else
    PC0SW02.PC6STAT[PC0SWIXM] = VPOITM03.PC6STAT; /* status*/
  end
  PC0SW02.XWHCD[PC0SWIXM] = VPOITM03.XWHCD; /* warehouse*/
  PC0SW02.YMTCD[PC0SWIXM] = VPOITM03.YMTCD; /* mode*/
  PC0SW02.YSMXDV[PC0SWIXM] = VPOITM03.YSMXDV; /* division*/
  PC0SW02.XDSCD[PC0SWIXM] = VPOITM03.XDSCD; /* direct ship*/
  PC0SW02.PC2CUXID[PC0SWIXM] = VPOITM03.PC2CUXID; /* customer*/
  PC0SW02.PC2INSEG[PC0SWIXM] = VPOITM03.PC2INSEG; /* inv seg*/
  PC0SW02.PC6ETSDT[PC0SWIXM] = VPOITM03.PC6ETSDT; /* ets date*/
   /* ---> ETAL  calc. below ===>*/
  PC0SW02.PC6OETAL[PC0SWIXM] = VPOITM03.PC6OETAL; /* etal override*/
  PC0SW02.PC6OETS[PC0SWIXM] = VPOITM03.PC6OETS; /* original ets*/
  PC0SW02.PC6TORDE[PC0SWIXM] = VPOITM03.PC6TORDE; /* tot on order*/
  PC0SW02.PC4ORTYP[PC0SWIXM] = VPOITM03.PC4ORTYP; /* po type*/

   /* ------------------------------------------------------------*/
   /* Set up ETS Date For Map Display*/
   /* ------------------------------------------------------------*/
  if (VPOITM03.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM03.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0SS06(); /* ===> Call date calculation routine*/
    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
      PC0SW00.PC0SWSWM = "1"; /* set map # to 1*/
      PC0SW00.XXXPRCNM = "PC0S216"; /* Module identification*/
      converseLib.validationFailed(430); /* Indicate missing or invalid*/
      exit stack; /* ===> exit to display map with date*/
    end

    PC0SW02.PC0SMEST[PC0SWIXM] = TA2REC.TA2GRGA; /* ===>ETS Date display*/
  else
    PC0SW02.PC0SMEST[PC0SWIXM] = " "; /* ===>*/
  end

   /* ------------------------------------------------------------*/
   /* Always calculate ETAL, RTS, ETA.*/
     /* using XSPCS05*/
   /* ------------------------------------------------------------*/

  set PCPREC empty;

  PCPREC.XGPCD = VPOITM03.XGPCD;
  PCPREC.XWHCD = VPOITM03.XWHCD;
  PCPREC.PC2CUXID = VPOITM03.PC2CUXID;
  PCPREC.FY1FCTYC = VPOITM03.FY1FCTYC;
  PCPREC.YMTCD = VPOITM03.YMTCD;
  PCPREC.PC6RTADT = VPOITM03.PC6RTADT;
  PCPREC.PC6ETSDT = VPOITM03.PC6ETSDT;
  PCPREC.PC6ETALF = VPOITM03.PC6ETALF;
  PCPREC.PC4ORTYP = VPOITM03.PC4ORTYP;
  PCPREC.PCPPOIDT = VPOITM03.PC3POIDT;
  PCPREC.YSMXDV = VPOITM03.YSMXDV;

  XSPCS05(); /* ===> call date subroutine*/


   /* ------------------------------------------------------------*/
          /* ETA (estimated time of arrival - for PO items)*/
    /* PCPREC.PCPETADT  = ETA  date (ETS + MADD + ETT)*/
   /* ------------------------------------------------------------*/

  PC0SW02.PC0SWETA[PC0SWIXM] = PCPREC.PCPETADT; /* ===>ETA Date*/
  if (PCPREC.PCPETADT > 0) /* ===>ETA Date*/
    PC0SW02.PC0SMETA[PC0SWIXM] = PCPREC.PCPMETA; /* ===>ETA Date display*/
  end


   /* ------------------------------------------------------------*/
          /* RTS (requested time of shipment)*/
    /* PCPREC.PCPRTSDT  = RTS  date (RTA - ETT)*/
   /* ------------------------------------------------------------*/

  PC0SW02.PC0SMRTS[PC0SWIXM] = PCPREC.PCPMRTS; /* ===>RTS Date display*/


   /* ------------------------------------------------------------*/
   /* ===> ETAL override -----> left map col: 13*/
   /* ------------------------------------------------------------*/

  if (VPOITM03.PC6OETAL > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM03.PC6OETAL; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/
    PC0SS06(); /* ===> Call date calculation routine*/
    if (TA2REC.TA2RTNCD != 0) /* valid date entered*/
      PC0SW00.PC0SWSWM = "1"; /* set map # to 1*/
      PC0SW00.XXXPRCNM = "PC0S216"; /* Module identification*/
      converseLib.validationFailed(433); /* Indicate missing or invalid*/
      exit stack; /* ===> exit to display map with date*/
    end

    PC0SW02.PC0SMEDT[PC0SWIXM] = TA2REC.TA2GRGA; /* ===>ETAL Date display*/
  end

   /* ------------------------------------------------------------*/
          /* ETAL (Estimated time of arrival)*/
    /* PCPREC.PCPETALD  = ETAL date (ETA + PADD)*/
   /* ------------------------------------------------------------*/

  PC0SW02.PC0SMETL[PC0SWIXM] = PCPREC.PCPMETAL; /* ===> ETAL Date display*/

   /* ------------------------------------------------------------*/
   /* Save the extra line w/ miscellaneous data in temp storage*/
   /* ------------------------------------------------------------*/

   /* Find out if gpc/sty/colr/dim/buymo/fcty is on components table*/

  VCMPPG01.XGPCD = VPOITM03.XGPCD;
  VCMPPG01.SY1STNBR = VPOITM03.SY1STNBR;
  VCMPPG01.SY2CLRID = VPOITM03.SY2CLRID;
  VCMPPG01.XDMCD = VPOITM03.XDMCD;
  VCMPPG01.PC-PO-ID-MO-RNG = PC0SW00.TA2GRGGN;
  VCMPPG01.FY1FCTYC = VPOITM03.FY1FCTYC;

  PC0SS-VCMPPG01-S(); /* Select component row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PC0SW-02-COMPONENT-SW[PC0SWIXM] = "Y";
  else
    PC0SW-02-COMPONENT-SW[PC0SWIXM] = "N";
  end



  if (VPOHDR02.PC3BLPO == 0  /* no blank po number exists*/
   && VPOHDR02.IN7STNBR == 0 /* no blank po number exists*/
   && VPOITM03.XDMCD == "00" /* default dimension*/
   && VPOITM03.XPGCD == "00" /* default package type*/
   && VPOITM03.XOWCD == "00" /* default owner group*/
   && VPOITM03.OP1CUOID > 0  /* cust ord number exists*/
   && VPOITM03.XGPCD == "02") /* footwear*/
    PC0SW02.OP1CUOID[PC0SWIXM] = VPOITM03.OP1CUOID;
    PC0SW02.OP1NORID[PC0SWIXM] = VPOITM03.OP1NORID;
    PC0SW02.XGPCD[PC0SWIXM] = VPOITM03.XGPCD;
    PC0SW02.XDMCD[PC0SWIXM] = VPOITM03.XDMCD;
    PC0SW02.XOWCD[PC0SWIXM] = VPOITM03.XOWCD;
    PC0SW02.XPGCD[PC0SWIXM] = VPOITM03.XPGCD;
    return;
  end

  if (VPOHDR02.PC3BLPO > 0   /* blank po number exists*/
   || VPOHDR02.IN7STNBR > 0  /* blank po number exists*/
   || VPOITM03.OP1CUOID > 0  /* cust ord number exists*/
   || VPOITM03.XDMCD != "00" /* non default dimension*/
   || VPOITM03.XPGCD != "00" /* non default package type*/
   || VPOITM03.XOWCD != "00") /* non default owner group*/

    PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1;
    if (PC0SWIXM > 15)
      PC0S217(); /* add temp storage page*/
    end
    if (VPOHDR02.PC3BLPO > 0) /* blank po number exists*/
      PC0SW02.PC3BLPO[PC0SWIXM] = VPOHDR02.PC3BLPO;
    end
    if (VPOHDR02.IN7STNBR > 0) /* blank stock xfer number exists*/
      PC0SW02.IN7STNBR[PC0SWIXM] = VPOHDR02.IN7STNBR;
    end
    if (VPOITM03.OP1CUOID > 0) /* cust ord number exists*/
      PC0SW02.OP1CUOID[PC0SWIXM] = VPOITM03.OP1CUOID;
      PC0SW02.OP1NORID[PC0SWIXM] = VPOITM03.OP1NORID;
    end
    PC0SW02.XGPCD[PC0SWIXM] = VPOITM03.XGPCD;
    PC0SW02.XDMCD[PC0SWIXM] = VPOITM03.XDMCD;
    PC0SW02.XOWCD[PC0SWIXM] = VPOITM03.XOWCD;
    PC0SW02.XPGCD[PC0SWIXM] = VPOITM03.XPGCD;
  end

   /* **                                                        ***/
   /* ********************** End of pc0s216 ***********************/
end // end PC0S216

// Add page to temporary storage
Function PC0S217()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0SW02.XXXTSLEN = PC0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0SW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0SW02 empty; /* M002 & M003 display storage*/

    PC0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0SW00.PC0SWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0SW00.XXXPRCNM = "PC0S217"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s217 ***********************/
end // end PC0S217

// Close Select Set Item cursor
Function PC0S218()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  VPOITM03.PO-REG-CD = "01";
  PCYREC.PCYFUNC = "C3";

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S218"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s218 ***********************/
end // end PC0S218

// -->Format and converse map 2
Function PC0S220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0SW00.PC0SWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0SM020 initial;

      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/
      /* ------------------------------------------------------------*/
       /* Format the MAP*/
      /* ------------------------------------------------------------*/


      PC0S221(); /* ===> Format the data from T.S.*/

      PC0S222(); /* ===> Format the literals*/

      PC0S223();
                                   /* ===> Format fields entered from map 1*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Display the requested map*/
   /* ------------------------------------------------------------*/

  PC0S224(); /* ========> converse map*/

   /* **                                                        ***/
   /* ********************** End of pc0s220 ***********************/
end // end PC0S220

// Format the display data
Function PC0S221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0SW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (COMMAREA.CAFROMAP == "PC0K"
     || COMMAREA.CAFROMAP == "PC0N"
     || COMMAREA.CAFROMAP == "PC0R"
     || COMMAREA.CAFROMAP == "PC0U")

      if (PC0SW04.XXXTSPAG > 0) /* ===> desired page was passed*/
        PC0SW00.XXXTSPAG = PC0SW04.XXXTSPAG; /* ===>load desired page*/
        PC0SW04.XXXTSPAG = 0; /* ===>reset desired page*/
      end

    end

    if (PC0SW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/


      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PC0SW00.PC0SWSWU == "Y") /* Current page was changed*/

        PC0SS07(); /* Update temporary storage page*/

        PC0SW00.PC0SWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0SW00.XXXTSPAG > PC0SW00.TA5TSQIX) /* Desired > highest*/
        PC0SW00.XXXTSPAG = PC0SW00.TA5TSQIX; /* Default to highest*/
      end

      PC0SS08(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* MOVE 25 TO PCWREC.XXXMSGNO;*/
                                   /* ====> please select a line message*/

  PC0SW00.XXXPRCNM = "PC0S221"; /* Module identification*/

  PC0SW00.PC0SWIXM = 1; /* Initialize line index*/

  if (PC0SW02.XGPCD == "02")
    PC0SM020.PC0SMHDG = "S.O.NUMBER";
    if (PC0SW00.PC0SWNDT == "Y")
      PC0SM020.PC0SW-NEED-DT = "PO NBR";
    else
      PC0SM020.PC0SW-NEED-DT = "NEEDDT";
    end
  else
    PC0SM020.PC0SMHDG = "ETAL-O";
    PC0SM020.PC0SW-NEED-DT = "PO NBR";
  end


   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0SW00.PC0SWIXM <= 15 /* Until screen is full*/
   && PC0SW02.XGPCD[PC0SWIXM] > " ") /* or end of data*/

    /* *******************************************************/
     /* format a complete line*/
    /* *******************************************************/
    if (PC0SW02.PC3PONBR[PC0SWIXM] > 0)

      PC0SM020.PC0SMSEL[PC0SWIXM] = PC0SW02.PC0SMSEL[PC0SWIXM];

      PC0SM020.PC0SMCLR[PC0SWIXM] = PC0SW02.SY2CLRID[PC0SWIXM];
      PC0SW02.PC0SW-PO-NBR[PC0SWIXM] = PC0SW02.PC3PONBR[PC0SWIXM];
      PC0SM020.PC0SW-PO-NBR[PC0SWIXM] = PC0SW02.PC0SW-PO-NBR[PC0SWIXM];

      PC0SM020.PC0SMPOI[PC0SWIXM] = PC0SW02.PC0SMPOI[PC0SWIXM];


      set PC0SW06 empty;

      PC0SW06.XWHCD = PC0SW02.XWHCD[PC0SWIXM];
      PC0SW06.PC6STAT = PC0SW02.PC6STAT[PC0SWIXM];
      PC0SW06.PC4ORTYP = PC0SW02.PC4ORTYP[PC0SWIXM];
      PC0SW06.PC2CUXID = PC0SW02.PC2CUXID[PC0SWIXM];
      PC0SW00.PC0SWWK1 = PC0SW02.PC6PLAN[PC0SWIXM];
      PC0SW06.PC0SWPLN = PC0SW00.PC0SWWK3;
      PC0SW06.YMTCD = PC0SW02.YMTCD[PC0SWIXM];
      PC0SW06.XWHCD = PC0SW02.XWHCD[PC0SWIXM];
      PC0SW06.PC0SMEST = PC0SW02.PC0SMEST[PC0SWIXM];
      PC0SW06.PC0SMETL = PC0SW02.PC0SMETL[PC0SWIXM];
      if (PC0SW02.XGPCD == "02")
        if (PC0SW02.OP1CUOID[PC0SWIXM] > 0)
          /* ------------------------------------------------------------*/
          /* Get the APAO flag from the dprodc.VPRDCU03.*/
          /* ------------------------------------------------------------*/
          set VPRDCU03 empty;
          VPRDCU03.XGPCD = PC0SW02.XGPCD;
          VPRDCU03.PC2CUXID = PC0SW06.PC2CUXID;
          PCYREC.PCYFUNC = "S ";
          PC0SS01(); /* select cust xref row*/

          PC0SW00.PC0SWCOR = PC0SW02.OP1CUOID[PC0SWIXM];
          PC0SW06.PC0SWORD = PC0SW00.PC0SWCOR;
          PC0SW06.PC0SWDOT = ".";
          PC0SW00.PC0SWNOR = PC0SW02.OP1NORID[PC0SWIXM];
          PC0SW06.PC0SWNRD = PC0SW00.PC0SWNOR;
          set OP1REC empty; /* check for MSR order*/
          PC0SW01.PC0SW-ORD-NBR = PC0SW02.OP1CUOID[PC0SWIXM];
          OP1REC.OP1PARTN = PC0SW-PART-CHAR;
          OP1REC.OP1CUOID = PC0SW02.OP1CUOID[PC0SWIXM];
          OP1REC.OP1NORID = PC0SW02.OP1NORID[PC0SWIXM];
          if (VPRDCU03.PC-PRDCU-APAO-FL == "E")
            PC0SS10(); /* Select unique Deuro.veorhd01*/
          else
            PC0SS09(); /* Select unique DORDER.VORHDR01*/
          end
          if (SQLCA.VAGen_SQLCODE == 0
           && OP1REC.XPACD == "MS")
            PC0SW06.PC0SW-MSR-IND = "M";
          else
            PC0SW06.PC0SW-MSR-IND = " ";
          end

          PC0SW06.PC0SMEDT = PC0SW06.PC0SWSOF;
        else
          PC0SW06.PC0SMEDT = " ";
        end
        if (PC0SW00.PC0SWNDT == "N")
          PC0SM020.PC0SW-PO-NBR[PC0SWIXM] = 0;
          set TA2REC empty;
          TA2REC.TA2GRGGN = PC0SW02.OP1CUNDT[PC0SWIXM];
          TA2REC.TA2DYAOD = 0;

          XSPCS60();

          PC0SM020.PC0SW-PO-NBR[PC0SWIXM] = TA2REC.TA2GRGA;
          if (PC0SM020.PC0SW-PO-NBR[PC0SWIXM] == "000000")
            PC0SM020.PC0SW-PO-NBR[PC0SWIXM] = " ";
          end
        end /* END OF NEED LOGIC*/
      else
        PC0SW06.PC0SMEDT = PC0SW02.PC0SMEDT[PC0SWIXM];
      end

      PC0SM020.PC0SMDTL[PC0SWIXM] = PC0SW06.PC0SWGRP;

      PC0SM020.PC6TORDE[PC0SWIXM] = PC0SW02.PC6TORDE[PC0SWIXM];


      /* Find out if g/s/c/d/buymo/fcty on component table*/

      if (PC0SW02.PC0SW-02-COMPONENT-SW[PC0SWIXM] == "Y")
        set PC0SM020.SY1STNBR bold, skip;
        set PC0SM020.SY2CLRID bold, skip;
        set PC0SM020.XDMCD bold, skip;
        set PC0SM020.PC0SMPOI[PC0SWIXM] bold, skip;
        converseLib.validationFailed(513); /* style is on components program*/
      end

      PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>Increment line index*/

      /* *******************************************************/
       /* format an extra - incomplete line*/
      /* *******************************************************/
    else
      set PC0SW06 empty;

      set PC0SM020.PC0SMSEL[PC0SWIXM] skip, invisible;

      /* ****** move dimension ************/
      if (PC0SW02.XDMCD[PC0SWIXM] != "00")
        PC0SW06.PC0SWDIM = "DM:";
        PC0SW06.XDMCD = PC0SW02.XDMCD[PC0SWIXM];
      end

      /* ****** move dimension ************/
      if (PC0SW02.XOWCD[PC0SWIXM] != "00")
        PC0SW06.PC0SWOWG = "OW:";
        PC0SW06.XOWCD = PC0SW02.XOWCD[PC0SWIXM];
      end

      /* ****** move package type *********/
      if (PC0SW02.XPGCD[PC0SWIXM] != "00")
        PC0SW06.PC0SWPKG = "PK:";
        PC0SW06.XPGCD = PC0SW02.XPGCD[PC0SWIXM];
      end

      /* ****** move blank po number ******/
      if (PC0SW02.PC3BLPO[PC0SWIXM] > 0)
        PC0SW06.PC0SWLIT = "BPO:";
        PC0SW00.PC0SWWKN = PC0SW02.PC3BLPO[PC0SWIXM];
        PC0SW06.PC0SWNBR = PC0SW00.PC0SWWKA;
      end

      /* ****** move stock xfer number ****/
      if (PC0SW02.IN7STNBR[PC0SWIXM] > 0)
        PC0SW06.PC0SWLIT = "XFR:";
        PC0SW00.PC0SWWKN = PC0SW02.IN7STNBR[PC0SWIXM];
        PC0SW06.PC0SWNBR = PC0SW00.PC0SWWKA;
      end

      /* ****** move sales order number ****/
      if (PC0SW02.OP1CUOID[PC0SWIXM] > 0
       && PC0SW02.XGPCD != "02")
        PC0SW06.PC0SWSOL = "SO:"; /* sales order literal*/
        PC0SW00.PC0SWCOR = PC0SW02.OP1CUOID[PC0SWIXM];
        PC0SW06.PC0SWORD = PC0SW00.PC0SWCOR;
        PC0SW06.PC0SWDOT = ".";
        PC0SW00.PC0SWNOR = PC0SW02.OP1NORID[PC0SWIXM];
        PC0SW06.PC0SWNRD = PC0SW00.PC0SWNOR;
        set OP1REC empty; /* check for MSR order*/
        PC0SW01.PC0SW-ORD-NBR = PC0SW02.OP1CUOID[PC0SWIXM];
        OP1REC.OP1PARTN = PC0SW-PART-CHAR;
        OP1REC.OP1CUOID = PC0SW02.OP1CUOID[PC0SWIXM];
        OP1REC.OP1NORID = PC0SW02.OP1NORID[PC0SWIXM];
        PC0SS09(); /* Select unique DORDER.VORHDR01*/
        if (SQLCA.VAGen_SQLCODE == 0
         && OP1REC.XPACD == "MS")
          PC0SW06.PC0SW-MSR-IND = "M";
        else
          PC0SW06.PC0SW-MSR-IND = " ";
        end
        /* IF SQLCA.SQLCODE EQ 0;*/
        /* SET TA2REC EMPTY;*/
        /* MOVE OP1REC.OP-ORIG-NEED-DT TO TA2REC.TA2GRGGN;*/
        /* MOVE 0 TO TA2REC.TA2DYAOD;*/
        /* ;*/
        /* XSPCS60;*/
        /* ;*/
        /* MOVE TA2REC.TA2GRGA TO PC0SM020.PC3PONB1(PC0SWIXM);*/
        /* MOVE PC0SW06.PC0SWSOF TO PC0SW06.PC0SMEDT;*/
        /* END;*/
      end

      PC0SM020.PC0SMDTL[PC0SWIXM] = PC0SW06.PC0SWGR2;

      PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>Increment line index*/

    end
  end

   /* ------------------------------------------------------------*/
   /* set the unused map selection fields askip*/
   /* ------------------------------------------------------------*/

  while (PC0SW00.PC0SWIXM <= 15) /* Until screen is full*/

    set PC0SM020.PC0SMSEL[PC0SWIXM] skip, invisible;

    PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* ===>Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is not*/
   /* authorized to perform various functions.*/
   /* ------------------------------------------------------------*/


   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '07';*/
    /* IF COMMAREA.CACLVL(7) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/


   /* **                                                        ***/
   /* ********************** End of pc0s221 ***********************/
end // end PC0S221

// Format the display literals
Function PC0S222()
   /* ------------------------------------------------------------*/
   /* Display the page information on both of the screens*/
   /* ------------------------------------------------------------*/

  set PC0SM020.XXXLITPG skip; /* "PAGE" literal*/
  set PC0SM020.XXXTSPAG skip; /* "Current PAGE" value*/
  set PC0SM020.XXXLITOF skip; /* "OF" literal*/
  set PC0SM020.TA5TSQIX skip; /* "Highest PAGE" value*/
  PC0SM020.XXXTSPAG = PC0SW00.XXXTSPAG; /* Current page*/
  PC0SM020.TA5TSQIX = PC0SW00.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is not*/
   /* authorized to perform various functions.*/
   /* ------------------------------------------------------------*/


   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/
   /* ;*/
   /* IF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '07';*/
    /* IF COMMAREA.CACLVL(7) EQ 'N'  ;=======>*/
      /* SET PC0SM020.PC0SMCHG AUTOSKIP,DARK;====> chg literal*/
      /* SET PC0SM020.PC0SMSPL AUTOSKIP,DARK;====> spl literal*/
    /* END ;*/
   /* END ;*/

   /* **                                                        ***/
   /* ********************** End of pc0s222 ***********************/
end // end PC0S222

// format the map header data
Function PC0S223()
  PC0SM020.XGPCD = PC0SW01.XGPCD;
  set PC0SM020.XGPCD skip, bold;

   /* ------------------------------------------------------------*/
   /* If Style code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY1STNBR > " ")
    PC0SM020.SY1STNBR = PC0SW01.SY1STNBR;
    PC0SM020.SY1SSTNM = PC0SW01.SY1SSTNM;
    set PC0SM020.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY2CLRID > " ")
    PC0SM020.SY2CLRID = PC0SW01.SY2CLRID;
    set PC0SM020.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If PO ID, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC0SMPYR > " ")

    if (PC0SW01.XGPCD == "03")
      PC0SM020.PC0SMPYR = PC0SW01.PCFSECD;
      set PC0SM020.PC0SMPYR skip, bold;
    else
      PC0SM020.PC0SMPYR = PC0SW01.PC0SMPYR;
      set PC0SM020.PC0SMPYR skip, bold;
    end

    PC0SM020.PC0SMPMO = PC0SW01.PC0SMPMO;
    set PC0SM020.PC0SMPMO skip, bold;

    PC0SM020.PC0SMPDM = PC0SW01.PC0SMPDM;
    set PC0SM020.PC0SMPDM skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Factory , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.FY1FCTYC > " ")

    PC0SM020.FY1FCTYC = PC0SW01.FY1FCTYC;
    set PC0SM020.FY1FCTYC skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Order type , load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SM010.PC4ORTYP > " ")

    PC0SM020.PC4ORTYP = PC0SW01.PC4ORTYP;
    set PC0SM020.PC4ORTYP skip, bold;

  end

   /* ------------------------------------------------------------*/
   /* If Dimension, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XDMCD > " ")
    PC0SM020.XDMCD = PC0SW01.XDMCD;
    set PC0SM020.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XQACD > " ") /* quality code*/
    PC0SM020.XQACD = PC0SW01.XQACD;
    set PC0SM020.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If inv segment code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2INSEG > " ")
    PC0SM020.PC2INSEG = PC0SW01.PC2INSEG;
    set PC0SM020.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XPGCD > " ")
    PC0SM020.XPGCD = PC0SW01.XPGCD;
    set PC0SM020.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XOWCD > " ")
    PC0SM020.XOWCD = PC0SW01.XOWCD;
    set PC0SM020.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XWHCD > " ")
    PC0SM020.XWHCD = PC0SW01.XWHCD;
    set PC0SM020.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2CUXID > " ")
    PC0SM020.PC2CUXID = PC0SW01.PC2CUXID;
    set PC0SM020.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.YSMXDV > " ")
    PC0SM020.YSMXDV = PC0SW01.YSMXDV;
    set PC0SM020.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Status, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC6STAT > " ")
    if (PC0SM010.PC6STAT == "*X")
      PC0SM020.PC6STAT = "*X";
    else
      PC0SM020.PC6STAT = PC0SW01.PC6STAT;
    end
    set PC0SM020.PC6STAT skip, bold;
  end

   /* **                                                        ***/
   /* ********************** End of pc0s223 ***********************/
end // end PC0S223

// converse List Screen
Function PC0S224()
   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0SM020.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0SM020.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0SM020.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0SM020.XXXPRCNM = PC0SW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    if (converseVar.validationMsgNum in PC9TBL.XXXMSGNO)
   /* NEXT SENTENCE*/
    else
    /* SET PC0SM020 ALARM;             /* Indicate sound alarm*/
    end
  end

  converse PC0SM020 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0SW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0SM020.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0SM020.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of pc0s224 ***********************/
end // end PC0S224

// -->Check attention identifier
Function PC0S230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (PC0SM020.XGPCD == "02") /* GPC CODE FOR FOOTWARE ONLY*/
    if (converseVar.eventKey is pf9) /* PF9WAS PRESSED*/
      if (PC0SW00.PC0SWNDT == "Y") /* CHANGE MAP TO NEED DATE FROM PONBR*/
        PC0SW00.PC0SWNDT = "N";
      else
        PC0SW00.PC0SWNDT = "Y";
      end
      PC0SW00.PC0SWSWF = "Y";
      exit stack; /* EXIT TO DISPLAY MAP*/
    end
  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0SW00.PC0SWSWR == "Y") /* Request for data*/
      set PC0SW02 empty; /* Map  display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/
    PC0SW00.PC0SWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0SM020.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      PC0S211(); /* Purge temporary storage*/

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to list map*/
      /* ===>*/

      set PC0SM010 initial;
      set PC0SM010.CATOAP cursor, bold; /* Highlight*/
      PC0SM010.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0SW00.XXXPRCNM = "PC0S230"; /* Module identification*/

      PC0SW00.PC0SWSWM = "1"; /* request for map switch*/
      PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/
      PC0SW00.PC0SWSWR = "N"; /* Request for data switch*/

    else

      PC0SW00.XXXPRCNM = "PC0S230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PC0SM020"; /* Application find code*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    set PCWREC empty;
    COMMAREA.CAUSERA = PCWREC.CAUSERA;


    PC0S211(); /* Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to list map*/
    /* ===>*/

    set PC0SM010 initial;
    set PC0SM010.CATOAP cursor, bold; /* Highlight*/
    PC0SM010.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    PC0SW00.XXXPRCNM = "PC0S230"; /* Module identification*/

    PC0SW00.PC0SWSWM = "1"; /* request for map switch*/
    PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/
    PC0SW00.PC0SWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* if PF3 was pressed, return to display Selection map*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* Selection map requested*/

    PC0SW00.PC0SWSWM = "1"; /* ===> Set request for Sel map*/
    set PC0SM010.SY1STNBR cursor;
    PC0SM010.XXXPRCNM = "PC0S"; /* ===> Reset field*/
    PC0SW00.PC0SWSWF = "N"; /* Format the map switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf9   /* AND PF9  WAS NOT PRESSED*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    PC0SW00.XXXPRCNM = "PC0S230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If change or split was requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* change function requested*/
   || converseVar.eventKey is pf20) /* split function requested*/

    PC0S231(); /* ===> check security/authorization*/

  end


   /* **                                                        ***/
   /* ********************** End of pc0s230 ***********************/
end // end PC0S230

// Check PF Key security
Function PC0S231()
   /* ------------------------------------------------------------*/
   /* verify valid PF key pressed, if the user is authorized*/
   /* to perform various functions continue else error.*/
   /* ------------------------------------------------------------*/


   /* IF PCWREC.XGPCD EQ '01';*/
    /* IF COMMAREA.CACLVL(1) EQ 'N'  ;=======>*/
      /* MOVE 'PC0S231' TO PC0SW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '02';*/
    /* IF COMMAREA.CACLVL(2) EQ 'N'  ;=======>*/
      /* MOVE 'PC0S231' TO PC0SW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '03';*/
    /* IF COMMAREA.CACLVL(3) EQ 'N'  ;=======>*/
      /* MOVE 'PC0S231' TO PC0SW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
    /* END ;*/
   /* END ;*/

   /* IF PCWREC.XGPCD EQ '07';*/
    /* IF COMMAREA.CACLVL(7) EQ 'N'  ;=======>*/
      /* MOVE 'PC0S231' TO PC0SW00.XXXPRCNM ;*/
      /* MOVE 4 TO EZEMNO            ;===>invalid PF Key*/
    /* END ;*/
   /* END ;*/



   /* **                                                        ***/
   /* ********************** End of pc0s231 ***********************/
end // end PC0S231

// -->Reset highlighted fields
Function PC0S240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  PC0SW00.PC0SWIXM = 1; /* Initialize line index*/

  while (PC0SW00.PC0SWIXM <= 15 /* Until end of lines*/
   && PC0SW02.XGPCD[PC0SWIXM] > " ") /* or end of display*/

    if (PC0SW02.PC3PONBR[PC0SWIXM] > 0) /* if a normal line*/
      set PC0SM020.PC0SMSEL[PC0SWIXM] initialAttributes; /* RESET SELECT FLAG*/
    else /* if an extra line*/
      set PC0SM020.PC0SMSEL[PC0SWIXM] skip, invisible;
    end

    PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* Increment line index*/

  end

  set PC0SM020.CATOAP initialAttributes; /* TO application*/
  set PC0SM020.CAITEM initialAttributes; /* Application data*/


   /* **                                                        ***/
   /* ********************** End Of pc0s240 ***********************/
end // end PC0S240

// -->Verify the entered data
Function PC0S250()

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0S251(); /* Verify scroll*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (PC0SW00.TA5TSQIX > 0) /* Page was formatted*/

      PC0SW00.PC0SWSPD = " "; /* ===>init. save fld (prod)*/
      PC0SW00.PC0SWSST = " "; /* ===>init. save fld (dest)*/
      PC0SW00.SY1STNBR = " "; /* ===>init. save field*/
      PC0SW00.PC3PONBR = 0; /* ===>init. save field*/

      PC0SW00.PC0SWIXM = 15; /* Initialize line index*/

      while (PC0SW00.PC0SWIXM > 0) /* Until end of lines*/

        PC0S252(); /* Verify data in the line*/

        PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0SM020.CAITEM > " ") /* Application data was entered*/

    PC0SW00.XXXPRCNM = "PC0S250"; /* Module identification*/
    set PC0SM020.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of pc0s250 ***********************/
end // end PC0S250

// Verify scroll request
Function PC0S251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PC0SW00.XXXTSPAG < 2)       /* and no previous pages*/


    PC0SW00.XXXPRCNM = "PC0S251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    converseLib.clearScreen();
    
    set PC0SM020.PC0SMSEL[1] cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PC0SW00.XXXTSPAG >= PC0SW00.TA5TSQIX) /* and no more pages*/


    converseLib.clearScreen();
    
    set PC0SM020.PC0SMSEL[1] cursor;
    PC0SW00.XXXPRCNM = "PC0S251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC0SWIXM = 15; /* Initialize line index*/

  while (PC0SW00.PC0SWIXM > 0) /* Until end of lines*/

    if (PC0SM020.PC0SMSEL[PC0SWIXM] != PC0SW02.PC0SMSEL[PC0SWIXM])

      PC0SW00.XXXPRCNM = "PC0S251"; /* Module identification*/
      set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/

      if (converseVar.eventKey is pf7 /* Scroll back request*/
       || converseVar.eventKey is pf8) /* Scroll forward request*/
        converseLib.validationFailed(14); /* can't page back/forward*/
      end

    end

    PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM - 1; /* Decrement line number*/

  end
   /* **                                                        ***/
   /* ********************** End Of pc0s251 ***********************/
end // end PC0S251

// Verify data in the line
Function PC0S252()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (PC0SM020.PC0SMSEL[PC0SWIXM] != PC0SW02.PC0SMSEL[PC0SWIXM]
   && PC0SM020.PC0SMSEL[PC0SWIXM] != "S") /* and is not a "S"*/

    PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
    set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered then verify data according to*/
   /* GPC Code and PF Keys.*/
   /* ------------------------------------------------------------*/

  if (PC0SM020.PC0SMSEL[PC0SWIXM] == "S")

    if (PC0SW00.PC3PONBR == 0) /* ===> saved po number*/
      PC0SW00.PC3PONBR = PC0SW02.PC3PONBR[PC0SWIXM];
    end

    if (PC0SW02.PC3PONBR[PC0SWIXM] != PC0SW00.PC3PONBR)
      set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
      PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
      converseLib.validationFailed(364); /* ===>multiple p.o.s may not be*/
                                   /* selected*/
    end

    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf20
     || converseVar.eventKey is enter)

      PC0SW00.SY1STNBR = PC0SW02.SY1STNBR[PC0SWIXM]; /* ==>save style*/

    end

    if (converseVar.eventKey is pf20
     && PC0SW02.PC4ORTYP[PC0SWIXM] == "LP") /* Split not allowed for LP*/
      set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
      PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
      converseLib.validationFailed(568); /* Cannot split LP Pos*/
    end

    if (converseVar.eventKey is pf17
     && PC0SW02.XGPCD[PC0SWIXM] != "03")


      if (PC0SW00.PC0SWSPD == " ") /* ===> saved fields (product)*/
        PC0SW00.PC0SWSPD = PC0SW02.PC0SWPRD[PC0SWIXM];
        PC0SW00.PC0SWSST = PC0SW02.PC0SWDST[PC0SWIXM];
        return;
      end


      if (PC0SW02.PC0SWPRD[PC0SWIXM] != PC0SW00.PC0SWSPD)
        set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
        PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
        converseLib.validationFailed(96); /* ===>multiple product selected not*/
                                   /* allowed*/
      end

      if (PC0SW02.PC0SWDST[PC0SWIXM] == PC0SW00.PC0SWSST)
        set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
        PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
        converseLib.validationFailed(107); /* ===>Duplicate dest. for style not*/
                                   /* allowed*/
      end
      /* *** save destination*/
      PC0SW00.PC0SWSST = PC0SW02.PC0SWDST[PC0SWIXM];

    end

    if (converseVar.eventKey is pf17
     && PC0SW02.XGPCD[PC0SWIXM] == "03")

      if (PC0SW00.PC0SWSPD == " ") /* ===> saved fields (product)*/
        PC0SW00.PC0SWSPD = PC0SW02.PC0SWPRD[PC0SWIXM];
      else
        set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold; /* Highlight*/
        PC0SW00.XXXPRCNM = "PC0S252"; /* Module identification*/
        converseLib.validationFailed(96); /* ===>multiple styles selected*/
      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of pc0s252 ***********************/
end // end PC0S252

// -->Process valid input request
Function PC0S260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0SW00.PC0SWSWF = "Y"; /* Format the map switch*/
    set PC0SM020 initial;
    PC0SW00.XXXTSPAG = PC0SW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0SW00.PC0SWSWF = "Y"; /* Format the map switch*/
    set PC0SM020 initial;
    PC0SW00.XXXTSPAG = PC0SW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields, and*/
    /* set up the pass record and transfer to other application*/
   /* ------------------------------------------------------------*/


  if ("S" in PC0SM020.PC0SMSEL) /* =====> Line was selected*/


    PC0S261(); /* ===>load pcwrec with selected data and func*/

    if (converseVar.eventKey not pf17)
      PC0S262(); /* ===> load pcwrec with entered data (map 1)*/
    end

    PC0S263(); /* ===> load pcwrec with from appl return data*/

    COMMAREA.CAUSERA = PCWREC.CAUSERA; /* ===>load pass record*/

    PC0S211(); /* ===> Purge temporary storage*/

    XSPCS01(); /* Exit to another application*/

    /* ===>*/
    /* ===>if exit failed, reset and return to selection map*/
    /* ===>*/

    PC0SW00.PC0SWSWM = "1"; /* ===> Set request for Sel map*/
    PC0SW00.PC0SWSWF = "Y"; /* ===>format the data*/
    set PC0SM010 initial; /* set map clear*/
    set PC0SM010.CATOAP cursor, bold; /* Highlight*/
    set PC0SW01 empty; /* reset map display record*/
    PC0SW01.XGPCD = COMMAREA.XGPCD;
    PC0SW00.XXXPRCNM = "PC0S260";

    exit stack; /* =================> Exit to display*/
                                   /* map*/

  else
    PC0SW00.XXXPRCNM = "PC0S260";
    set PC0SM020.PC0SMSEL[1] cursor, bold; /* ====>highlight*/
    converseLib.validationFailed(25);
    return; /* Return to previous process*/
  end
   /* **                                                        ***/
   /* ********************** End of pc0s260 ***********************/
end // end PC0S260

// Process selected input request
Function PC0S261()
   /* ------------------------------------------------------------*/
             /* Set the inquire function request flag*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* inquire mode requested*/
    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "I";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/
  end

   /* ------------------------------------------------------------*/
             /* Set the change function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf12) /* change mode requested*/

    COMMAREA.CATOAP = "PC0K";
    PCWREC.PCWFNC = "C";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/

  end

   /* ------------------------------------------------------------*/
      /* Set the inquiry of detail information according to GPC*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* change mode requested*/

    PCWREC.XGPCD = PC0SW01.XGPCD;

    if (PC0SW01.XGPCD == "03")
      COMMAREA.CATOAP = "PC0U";
    else
      COMMAREA.CATOAP = "PC0R";
      move " " to PCWREC.PCWWHSE[1] for all; /* ===> init. dest array*/
      move " " to PCWREC.PCWCUST[1] for all;
    end

  end

   /* ------------------------------------------------------------*/
             /* Set the split function request flag*/
                    /* if authorized*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* change mode requested*/

    COMMAREA.CATOAP = "PC0N";
    move 0 to PCWREC.PC6ITMNB[1] for all; /* ===> initialize sequence number*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields in the pass record.*/
      /* according to PF Key pressed*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC0SWIXM = 1; /* Initialize map line index*/
  PC0SW00.PC0SWIXR = 1; /* Initialize record line index*/

  while (PC0SW00.PC0SWIXM <= 15) /* Until end of lines*/

    if (PC0SM020.PC0SMSEL[PC0SWIXM] != PC0SW02.PC0SMSEL[PC0SWIXM])

      if (converseVar.eventKey is enter /* inquiry mode requested*/
       || converseVar.eventKey is pf12  /* change  mode requested*/
       || converseVar.eventKey is pf20) /* split   mode requested*/

        PCWREC.PC6ITMNB[PC0SWIXR] = PC0SW02.PC6ITMNB[PC0SWIXM];
        PCWREC.PO-REG-CD = PC0SW02.PO-REG-CD[PC0SWIXM];
        PCWREC.PC3PONBR = PC0SW02.PC3PONBR[PC0SWIXM];

      end

      if (converseVar.eventKey is pf12 /* change  mode requested*/
       || converseVar.eventKey is pf20) /* split   mode requested*/
        if (PC0SW02.PO-REG-CD[PC0SWIXM] == "01") /* us po's only*/
            /* next sentence*/
        else
          PC0SW00.XXXPRCNM = "PC0S261";
          COMMAREA.CATOAP = "       ";
          converseLib.validationFailed(509); /* indicate out of range*/
          set PC0SM020.PC0SMSEL[PC0SWIXM] cursor, bold;
          exit stack;
        end
      end

      if (converseVar.eventKey is pf17) /* detail requested*/

        /* ------------------------------------------------------------*/
         /* Load the product key data into the pass record*/
        /* ------------------------------------------------------------*/

        PCWREC.SY1STNBR = PC0SW02.SY1STNBR[PC0SWIXM];
        PCWREC.YSMXDV = PC0SW02.YSMXDV[PC0SWIXM];
        PCWREC.PC3PONBR = PC0SW02.PC3PONBR[PC0SWIXM];
        PCWREC.PO-REG-CD = PC0SW02.PO-REG-CD[PC0SWIXM];

        if (PC0SW02.XGPCD[PC0SWIXM] == "03")
          /* --------------------------------------------------*/
          /* apparel wants to wild card all fields except for*/
          /* division and style*/
          /* --------------------------------------------------*/

          PCWREC.SY2CLRID = "*";
          PCWREC.XDMCD = "*";
          PCWREC.XQACD = "*";
          PCWREC.XOWCD = "*";
          PCWREC.PC2INSEG = "*";
          PCWREC.XPGCD = "*";
          PCWREC.XUMCD = "*";

        else
          /* --------------------------------------------------*/
          /* footwear wants to send specific information*/
          /* including customer and warehouse*/
          /* --------------------------------------------------*/

          PCWREC.SY2CLRID = PC0SW02.SY2CLRID[PC0SWIXM];
          PCWREC.XDMCD = PC0SW02.XDMCD[PC0SWIXM];
          PCWREC.XQACD = PC0SW02.XQACD[PC0SWIXM];
          PCWREC.XOWCD = PC0SW02.XOWCD[PC0SWIXM];
          PCWREC.PC2INSEG = PC0SW02.PC2INSEG[PC0SWIXM];
          PCWREC.XPGCD = PC0SW02.XPGCD[PC0SWIXM];
          PCWREC.XUMCD = PC0SW02.XUMCD[PC0SWIXM];
          PCWREC.PCWWHSE[PC0SWIXR] = PC0SW02.XWHCD[PC0SWIXM];
          PCWREC.PCWCUST[PC0SWIXR] = PC0SW02.PC2CUXID[PC0SWIXM];
          PCWREC.FY1FCTYC = PC0SW02.FY1FCTYC[PC0SWIXM];

        end

      end

      PC0SW00.PC0SWIXR = PC0SW00.PC0SWIXR + 1;
                                   /* Increment pcwrec row index*/

    end
    PC0SW00.PC0SWIXM = PC0SW00.PC0SWIXM + 1; /* Increment line map index*/

  end

   /* **                                                        ***/
   /* ********************** End of pc0s261 ***********************/
end // end PC0S261

// save key data entered (map1)
Function PC0S262()
   /* ------------------------------------------------------------*/
   /* Load the key data entered from map 1 into the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0SW01.XGPCD;

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY1STNBR > " ")
    PCWREC.SY1STNBR = PC0SW01.SY1STNBR;
  else
    PCWREC.SY1STNBR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY2CLRID > " ")
    PCWREC.SY2CLRID = PC0SW01.SY2CLRID;
  else
    PCWREC.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id year, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPYR > " ")
    PC0SW04.PC0SMPYR = PC0SW01.PC0SMPYR;
  else
    PC0SW04.PC0SMPYR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id prod month , LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPMO > " ")
    PC0SW04.PC0SMPMO = PC0SW01.PC0SMPMO;
  else
    PC0SW04.PC0SMPMO = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id delvry month , LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPDM > " ")
    PC0SW04.PC0SMPDM = PC0SW01.PC0SMPDM;
  else
    PC0SW04.PC0SMPDM = " ";
  end

   /* ------------------------------------------------------------*/
   /* If factory code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.FY1FCTYC > " ")
    PCWREC.FY1FCTYC = PC0SW01.FY1FCTYC;
  else
    PCWREC.FY1FCTYC = " ";
  end

   /* ------------------------------------------------------------*/
   /* If po type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC4ORTYP > " ")
    PCWREC.PC4ORTYP = PC0SW01.PC4ORTYP;
  else
    PCWREC.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC6STAT > " ")
    if (PC0SW01.PC6STAT == "CX")
      if (PC0SM010.PC6STAT == "*X")
        PCWREC.PC6STAT = "*X";
      else
        PCWREC.PC6STAT = PC0SW01.PC6STAT;
      end
    else
      PCWREC.PC6STAT = PC0SW01.PC6STAT;
    end
  else
    PCWREC.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2CUXID > " ")
    PCWREC.PC2CUXID = PC0SW01.PC2CUXID;
  else
    PCWREC.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XWHCD > " ")
    PCWREC.XWHCD = PC0SW01.XWHCD;
  else
    PCWREC.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XDMCD > " ")
    PCWREC.XDMCD = PC0SW01.XDMCD;
  else
    PCWREC.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XQACD > " ") /* quality code*/
    PCWREC.XQACD = PC0SW01.XQACD;
  else
    PCWREC.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If iseg code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2INSEG > " ")
    PCWREC.PC2INSEG = PC0SW01.PC2INSEG;
  else
    PCWREC.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XPGCD > " ")
    PCWREC.XPGCD = PC0SW01.XPGCD;
  else
    PCWREC.XPGCD = " ";
  end


   /* ------------------------------------------------------------*/
   /* If owner group code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XOWCD > " ")
    PCWREC.XOWCD = PC0SW01.XOWCD;
  else
    PCWREC.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.YSMXDV > " ")
    PCWREC.YSMXDV = PC0SW01.YSMXDV;
  else
    PCWREC.YSMXDV = " ";
  end

   /* **                                                        ***/
   /* ********************** End of pc0s262 ***********************/
end // end PC0S262

// save data for return from appl
Function PC0S263()
   /* ------------------------------------------------------------*/
     /* Set the pass record with the current map indicator*/
     /* and temp storage page, & selection data for return access*/
   /* ------------------------------------------------------------*/

  PC0SW04.PC0SWSWM = PC0SW00.PC0SWSWM;
  PC0SW04.XXXTSPAG = PC0SW00.XXXTSPAG; /* ==>T.S. Page to displayed*/

  PC0SW04.XGPCD = PC0SW01.XGPCD;
  PC0SW04.PO-REG-CD = PC0SW01.PO-REG-CD;
  PC0SW04.PCYFRDT = PC0SW01.PCYFRDT;
  PC0SW04.PCYTODT = PC0SW01.PCYTODT;

   /* ------------------------------------------------------------*/
   /* IF STYLE CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY1STNBR > " ")
    PC0SW04.SY1STNBR = PC0SW01.SY1STNBR;
    PC0SW04.SY1SSTNM = PC0SW01.SY1SSTNM;
  else
    PC0SW04.SY1STNBR = " ";
    PC0SW04.SY1SSTNM = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF COLOR CODE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY2CLRID > " ")
    PC0SW04.SY2CLRID = PC0SW01.SY2CLRID;
  else
    PC0SW04.SY2CLRID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id year, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPYR > " ")
    PC0SW04.PC0SMPYR = PC0SW01.PC0SMPYR;
    PC0SW04.PCFSECD = PC0SW01.PC0SMPYR;
  else
    PC0SW04.PC0SMPYR = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id prod month , LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPMO > " ")
    PC0SW04.PC0SMPMO = PC0SW01.PC0SMPMO;
  else
    PC0SW04.PC0SMPMO = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF po id delvry month , LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC0SMPDM > " ")
    PC0SW04.PC0SMPDM = PC0SW01.PC0SMPDM;
  else
    PC0SW04.PC0SMPMO = " ";
  end

   /* ------------------------------------------------------------*/
   /* If factory code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.FY1FCTYC > " ")
    PC0SW04.FY1FCTYC = PC0SW01.FY1FCTYC;
  else
    PC0SW04.FY1FCTYC = " ";
  end

   /* ------------------------------------------------------------*/
   /* If po type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC4ORTYP > " ")
    PC0SW04.PC4ORTYP = PC0SW01.PC4ORTYP;
  else
    PC0SW04.PC4ORTYP = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF P.O. Status, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC6STAT > " ")
    if (PC0SM010.PC6STAT == "*X")
      PC0SW04.PC6STAT = "*X";
    else
      PC0SW04.PC6STAT = PC0SW01.PC6STAT;
    end
  else
    PC0SW04.PC6STAT = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF CUSTOMER XREF, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2CUXID > " ")
    PC0SW04.PC2CUXID = PC0SW01.PC2CUXID;
  else
    PC0SW04.PC2CUXID = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF WAREHOUSE, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XWHCD > " ")
    PC0SW04.XWHCD = PC0SW01.XWHCD;
  else
    PC0SW04.XWHCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIMENSION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XDMCD > " ")
    PC0SW04.XDMCD = PC0SW01.XDMCD;
  else
    PC0SW04.XDMCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF QUALITY, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XQACD > " ") /* quality code*/
    PC0SW04.XQACD = PC0SW01.XQACD;
  else
    PC0SW04.XQACD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If iseg code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2INSEG > " ")
    PC0SW04.PC2INSEG = PC0SW01.PC2INSEG;
  else
    PC0SW04.PC2INSEG = " ";
  end

   /* ------------------------------------------------------------*/
   /* If package type code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XPGCD > " ")
    PC0SW04.XPGCD = PC0SW01.XPGCD;
  else
    PC0SW04.XPGCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* If owner group code, load select record.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XOWCD > " ")
    PC0SW04.XOWCD = PC0SW01.XOWCD;
  else
    PC0SW04.XOWCD = " ";
  end

   /* ------------------------------------------------------------*/
   /* IF DIVISION, LOAD SELECT RECORD.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.YSMXDV > " ")
    PC0SW04.YSMXDV = PC0SW01.YSMXDV;
  else
    PC0SW04.YSMXDV = " ";
  end

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the pc0sw04 array*/
   /* and move your application id to that field. Use the*/
   /* pcwrec.pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.CAFROMAP[1] = "PC0S"; /* From application id*/
    PCWREC.PCWUSER1 = " ";
    PCWREC.PCWUSER1 = PC0SW04.PC0SWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.CAFROMAP[2] = "PC0S"; /* From application id*/
      PCWREC.PCWUSER2 = " ";
      PCWREC.PCWUSER2 = PC0SW04.PC0SWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.CAFROMAP[3] = "PC0S"; /* From application id*/
        PCWREC.PCWUSER3 = " ";
        PCWREC.PCWUSER3 = PC0SW04.PC0SWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.CAFROMAP[4] = "PC0S"; /* From application id*/
          PCWREC.PCWUSER4 = " ";
          PCWREC.PCWUSER4 = PC0SW04.PC0SWUSR;

        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of pc0s263 ***********************/
end // end PC0S263

// Select set & open ITEM cursor
Function PC0S292()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  PC0SW00.PC0SWIXM = 1; /* Display line index*/
  PC0SW00.PC0SWSWC = "N"; /* End of cursor switch*/


  set VPOITM03 empty; /* ===>initialize record before loading*/
                                   /* it*/

   /* ------------------------------------------------------------*/
   /* set up wildcards for iomod*/
   /* ------------------------------------------------------------*/

  VPOITM03.XUMCD = "*"; /* unit of measure*/
  VPOITM03.PC6ETSDT = -1; /* ets date*/
  VPOITM03.YMTCD = "*"; /* mode code*/
  VPOITM03.PC6PLAN = -1; /* plan*/
  VPOITM03.XDSCD = "*"; /* direct ship code*/

   /* ------------------------------------------------------------*/
   /* set up required fields for iomod*/
   /* ------------------------------------------------------------*/

  VPOITM03.XGPCD = PC0SW01.XGPCD; /* gpc*/
  VPOITM03.PO-REG-CD = "01"; /* PO REGION CODE*/

   /* ------------------------------------------------------------*/
   /* If style entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY1STNBR > " ")
    VPOITM03.SY1STNBR = PC0SW01.SY1STNBR;
  else
    VPOITM03.SY1STNBR = "*";
  end

   /* ------------------------------------------------------------*/
   /* If season/year entered,*/
    /* note: the beginning and ending po id is set up in pc0s188*/
          /* and pc0s189.*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XGPCD == "03")
    if (PC0SW01.PC0SMPYR > " ")
      VPOITM03.PCFSECD = PC0SW01.PC0SMPYR;
    else
      VPOITM03.PCFSECD = "*";
    end
  else
    VPOITM03.PCFSECD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If color code entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.SY2CLRID > " ")
    VPOITM03.SY2CLRID = PC0SW01.SY2CLRID;
  else
    VPOITM03.SY2CLRID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If factory entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.FY1FCTYC > " ")
    VPOITM03.FY1FCTYC = PC0SW01.FY1FCTYC;
  else
    VPOITM03.FY1FCTYC = "*";
  end

   /* ------------------------------------------------------------*/
   /* If status entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC6STAT > " ")
    VPOITM03.PC6STAT = PC0SW01.PC6STAT;
  else
    VPOITM03.PC6STAT = "*";
  end

   /* ------------------------------------------------------------*/
   /* If customer entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2CUXID > " ")
    VPOITM03.PC2CUXID = PC0SW01.PC2CUXID;
  else
    VPOITM03.PC2CUXID = "*";
  end

   /* ------------------------------------------------------------*/
   /* If warehouse entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XWHCD > " ")
    VPOITM03.XWHCD = PC0SW01.XWHCD;
  else
    VPOITM03.XWHCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If po type entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC4ORTYP > " ")
    VPOITM03.PC4ORTYP = PC0SW01.PC4ORTYP;
  else
    VPOITM03.PC4ORTYP = "*";
  end

   /* ------------------------------------------------------------*/
   /* if dimension entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XDMCD > " ")
    VPOITM03.XDMCD = PC0SW01.XDMCD;
  else
    VPOITM03.XDMCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* if quality entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XQACD > " ")
    VPOITM03.XQACD = PC0SW01.XQACD;
  else
    VPOITM03.XQACD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If inventory segment code entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.PC2INSEG > " ")
    VPOITM03.PC2INSEG = PC0SW01.PC2INSEG;
  else
    VPOITM03.PC2INSEG = "*";
  end

   /* ------------------------------------------------------------*/
   /* If package type entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XPGCD > " ")
    VPOITM03.XPGCD = PC0SW01.XPGCD;
  else
    VPOITM03.XPGCD = "*";
  end

   /* ------------------------------------------------------------*/
   /* If owner grp cd entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.XOWCD > " ")
    VPOITM03.XOWCD = PC0SW01.XOWCD;
  else
    VPOITM03.XOWCD = "*"; /* owner group*/
  end

   /* ------------------------------------------------------------*/
   /* If division entered,*/
   /* ------------------------------------------------------------*/

  if (PC0SW01.YSMXDV > " ")
    VPOITM03.YSMXDV = PC0SW01.YSMXDV;
  else
    VPOITM03.YSMXDV = "*";
  end

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SD";
  PCYREC.PCYFRDT = PC0SW01.PCYFRDT;
  PCYREC.PCYTODT = PC0SW01.PCYTODT;

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S292"; /* Module identification*/
  PC0SW00.PC0SWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0SW00.PC0SWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0SM010 initial; /* Clear screen before display*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s292 ***********************/
end // end PC0S292

// Fetch next row in ITEM cursor
Function PC0S293()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  VPOITM03.PO-REG-CD = "01";
  PCYREC.PCYFUNC = "ND";

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0SW00.PC0SWSPD = " "; /* reset next product field*/
      PC0SW00.PC0SWSST = " "; /* reset nest destination field*/
      PC0SW00.PC0SWSWC = "Y"; /* Indicate end of cursor "ITEM"*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S293"; /* Module identification*/
  PC0SW00.PC0SWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC0SW00.PC0SWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s293 ***********************/
end // end PC0S293

// Close Select Set Item cursor
Function PC0S298()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  VPOITM03.PO-REG-CD = "01";
  PCYREC.PCYFUNC = "CD";

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0S298"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of pc0s298 ***********************/
end // end PC0S298

// select unique VCMPPG01
Function PC0SS-VCMPPG01-S()
   /* *****************************************************/
   /* select unique DPRODG.VCMPPG01*/
   /* *****************************************************/

  call "VCMPPG01" ("S ", SQLCA, VCMPPG01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "VCMPPG01";
    TA1REC.TA1DBASE = "DPRODG ";
    TA1REC.TA1TBLVU = "VCMPPG01";
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PC0SS-VCMPPG01-S  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1TBLKE = VCMPPG01-GROUP; /* key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end


end // end PC0SS-VCMPPG01-S

// Select Dprodc.Vprdcu01 row
Function PC0SS01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" (PCYREC, SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0SS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPRDCU03.VPRDCU03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of pc0ss01 ***********************/
end // end PC0SS01

// Select row in DPRODC.VPOVFY01
Function PC0SS02()
   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S ", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0SS02"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0SW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0SW00.PC0SWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0SW00.PC0SWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0SW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0SW00.XXXPRCNM = "PC0SS02";
  exit stack;

end // end PC0SS02

// Select set of DPRODC.VPOVFY01
Function PC0SS03()
  PC0SW00.PC0SWDCF = "N"; /* End of VPOVFY01 flag*/
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0SS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DFBUY.VPOVFY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0SS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0SW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0SW00.PC0SWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0SW00.PC0SWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0SW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0SS03

// Fetch Next    DPRODC.VPOVFY01
Function PC0SS04()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPOVFY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0SW00.PC0SWDCF = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0SS04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0SS04"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/
  PC0SW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0SW00.PC0SWKA1 = PCFREC.PCFSECD; /* Key field 1*/
  PC0SW00.PC0SWKN2 = PCFREC.PCFBUYMO; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0SW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0SS04

// Close set     DPRODC.VPOVFY01
Function PC0SS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0SW00.XXXPRCNM = "PC0SS05"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOVFY01 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PC0SS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PC0SS05

// call calc.  "date routine"
Function PC0SS06()
   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

   /* **                                                        ***/
   /* ********************** End of pc0ss06 ***********************/
end // end PC0SS06

// update temporary storage page
Function PC0SS07()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PC0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0SW00.XXXPRCNM = "PC0SS07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of pc0ss07 ***********************/
end // end PC0SS07

// Read temporary storage page
Function PC0SS08()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0SW02.XXXTSLEN = PC0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0SW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0SW00.XXXPRCNM = "PC0SS08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M020"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of pc0ss08 ***********************/
end // end PC0SS08

// Select unique DORDER.VORHDR01
Function PC0SS09()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0SS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0SS09 ***********************/
end // end PC0SS09

// Select unique DEURO.VEORHD01
Function PC0SS10()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VEORHD01" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PC0SW00.XXXPRCNM = "PC0SS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0SW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ********************** End of PC0SS10 ***********************/
end // end PC0SS10

//*** RECORD=PC0SW00 ****
// ------------------------------------------------------------
// Application working storage.
//    -flags & switches
//    -indexes
//    -control break save fields
//    -W.S. date fields
//    -accumulators
//    -miscellaneous
// ------------------------------------------------------------
// ***********************
Record PC0SW00 type basicRecord
  10 PC0SWSWR PC0SWSWR ; 
  10 PC0SWSWM PC0SWSWM ; 
  10 PC0SWSWF PC0SWSWF ; 
  10 PC0SWSWC PC0SWSWC ; 
  10 PC0SWSWU PC0SWSWU ; 
  10 PC0SWXIT PC0SWXIT ; 
  10 PC0SWMOD PC0SWMOD ; 
  10 PC0SWMLT PC0SWMLT ; 
  10 PC0SWNDT PC0SWNDT ; 
  10 * char(1) ; 
  10 PC0SWIXR PC0SWIXR ; 
  10 PC0SWIXM PC0SWIXM ; 
  10 PC0SWIXT PC0SWIXT ; 
  10 PC0SWIXS PC0SWIXS ; 
  10 PC0SW-00-IDX PC0SW-00-IDX ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PC0SWSTY PC0SWSTY ; 
  10 * char(1) ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC3POIDT PC3POIDT ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PCFSECD PCFSECD ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 * char(1) ; 
  10 PC0SWDT PC0SWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC0SMPCC PC0SMPCC ; 
    15 PC0SMPYR PC0SMPYR ; 
    15 PC0SMPMO PC0SMPMO ; 
    15 PC0SMPDM PC0SMPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC0SWMM PC0SWMM ; 
    15 PC0SWDD PC0SWDD ; 
    15 PC0SWCC PC0SWCC ; 
    15 PC0SWYY PC0SWYY ; 
  10 * char(1) ; 
  10 XOWKEY XOWKEY ; 
    15 PC0SWWHC PC0SWWHC ; 
    15 PC0SWOWC PC0SWOWC ; 
  10 * char(1) ; 
  10 PC0SWSPD PC0SWSPD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 * char(1) ; 
  10 PC0SWSST PC0SWSST ; 
    15 XWHCD XWHCD ; 
    15 PC2CUXID PC2CUXID ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PC0SWSUM PC0SWSUM ; 
  10 XWHPAD XWHPAD ; 
  10 PC0SWWK1 PC0SWWK1 ; 
    15 PC0SWWK2 PC0SWWK2 ; 
    15 PC0SWWK3 PC0SWWK3 ; 
  10 PC0SWWKN PC0SWWKN ; 
    15 * char(3) ; 
    15 PC0SWWKA PC0SWWKA ; 
  10 PC0SWRDT PC0SWRDT ; 
    15 PC0SWRYR PC0SWRYR ; 
      20 PC0SWRCC PC0SWRCC ; 
      20 PC0SWRYY PC0SWRYY ; 
        25 PC0SWRY1 PC0SWRY1 ; 
        25 PC0SWRY2 PC0SWRY2 ; 
    15 PC0SWRM1 PC0SWRM1 ; 
    15 PC0SWRM2 PC0SWRM2 ; 
  10 PC0SWRNM PC0SWRNM ; 
    15 PC0SWNUM PC0SWNUM ; 
      20 PC0SWNM1 PC0SWNM1 ; 
      20 PC0SWNM2 PC0SWNM2 ; 
  10 PC0SWDCF PC0SWDCF ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0SWKA1 PC0SWKA1 ; 
    15 PC0SWKN2 PC0SWKN2 ; 
    15 * char(21) ; 
  10 PC0SWCOR PC0SWCOR ; 
  10 PC0SWNOR PC0SWNOR ; 
end // end PC0SW00

//*** RECORD=PC0SW01 ****
// ***** PRODUCTION ORDER STYLE SELECTION MAP RECORD **********
// **                 SELECTION SCREEN                       **
// **                                                        **
// 
//            MAP:      PC0SM.PC0SM001
// 
//    RECORD NAME:      PC0SW01
// 
//       This record is a working storage record to load and
//    extract data for the selection screen.
//       It holds information that the user has entered as a
//    selection criteria for the list maps.  The information
//    in this record is processed in a (Select Set) of rows
//    for the list maps PC0SM020.
// 
// **                                                        **
// **                                                        **
// ***** PRODUCTION ORDER STYLE SELECTION MAP RECORD **********
// ***********************
Record PC0SW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 PC3POIDT PC3POIDT ; 
  10 TA2GRGE TA2GRGE ; 
    15 PC0SMPYR PC0SMPYR ; 
    15 PC0SMPMO PC0SMPMO ; 
    15 PC0SMPDM PC0SMPDM ; 
  10 PCFSECD PCFSECD ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XWHOWNGF XWHOWNGF ; 
  10 YSMXDV YSMXDV ; 
  10 PC2INSEG PC2INSEG ; 
  10 PC6STAT PC6STAT ; 
  10 PC2CUXID PC2CUXID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PCYFRDT PCYFRDT ; 
  10 PCYTODT PCYTODT ; 
  10 PC0SW-ORD-NBR PC0SW-ORD-NBR ; 
    15 * num(8) ; // Filler
    15 PC0SW-PART-CHAR PC0SW-PART-CHAR ; 
end // end PC0SW01

//*** RECORD=PC0SW02 ****
// ************** PRODUCTION ORDER ITEM RECORD ****************
// **                  Display Record                        **
// **                                                        **
// 
// 
//    RECORD NAME:      PC0SW02
// 
//    MAP   NAMES:      PC0SM020
// 
//       This record is a working storage record used to
//    hold data that is pertinent to map PC0sM020.
//       It holds information  that relates to a P.O. Item
//    It is used to the load temp. storage, the list maps,
//    and the pass record PCWREC
//       It is loaded from PC0sW03 after all of the figures
//    for the control break set of rows have been calculated.
//       The control break is based on (color, po nbr, po id).
// 
// **                                                        **
// **                                                        **
// ************** PRODUCTION ORDER ITEM RECORD ****************
// ***********************
Record PC0SW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0SWRC2 PC0SWRC2 [15] ; 
    10 PC0SMSEL PC0SMSEL ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC0SW-PO-NBR PC0SW-PO-NBR ; 
    10 PC3BLPO PC3BLPO ; 
    10 IN7STNBR IN7STNBR ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP1NORID OP1NORID ; 
    10 PC0SMPOI PC0SMPOI ; 
      15 PC0SMPYR PC0SMPYR ; 
      15 PC0SMPMO PC0SMPMO ; 
      15 PC0SMPDM PC0SMPDM ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 * char(1) ; 
    10 PC0SWPRD PC0SWPRD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 * char(1) ; 
    10 PC0SWDST PC0SWDST ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 YMTCD YMTCD ; 
    10 YOHCD YOHCD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6STAT PC6STAT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC0SMEST PC0SMEST ; 
    10 PC0SWETA PC0SWETA ; 
    10 PC0SMETA PC0SMETA ; 
    10 PC0SMETL PC0SMETL ; 
    10 PC0SMEDT PC0SMEDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC0SMRTS PC0SMRTS ; 
    10 PC6RTADT PC6RTADT ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 PC0SW-02-COMPONENT-SW PC0SW-02-COMPONENT-SW ; 
end // end PC0SW02

//*** RECORD=PC0SW04 ****
// **************** PRODUCTION ORDER ITEM  RECORD *************
// **                    Selection Screen                    **
// **                   (save data record)                   **
// 
//            MAP:      PC0SM.PC0SM010
// 
//    RECORD NAME:      PC0SW04
// 
//       This record is a working storage record to load and
//    and save information on a return from a lower level
//    application.  The data saved is the data that was entered
//    the user at the start of this application.  Also, map and
//    temp storage pages are saved for the return from a lower
//    level application.
// 
//       The desired saved data is loaded to this record when
//    when a transfer to PC0K,PC0N,PC0R, or PC0U is requested
//    and then loaded to the first available user area in the
//    PCWREC.
// 
//      On the return from one of the above applications, the
//    appropraite user area is laoded to this record and
//    processed accordingly.
// 
// **                                                        **
// **                                                        **
// **************** PRODUCTION ORDER ITEM  RECORD *************
// ***********************
Record PC0SW04 type basicRecord
  5 PC0SWUSR PC0SWUSR ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PC0SWSWM PC0SWSWM ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XPGCD XPGCD ; 
    10 XWHCD XWHCD ; 
    10 YSMXDV YSMXDV ; 
    10 PC2INSEG PC2INSEG ; 
    10 PC6STAT PC6STAT ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC0SMPYR PC0SMPYR ; 
    10 PC0SMPMO PC0SMPMO ; 
    10 PC0SMPDM PC0SMPDM ; 
    10 PCYFRDT PCYFRDT ; 
    10 PCYTODT PCYTODT ; 
    10 * char(422) ; 
end // end PC0SW04

//*** RECORD=PC0SW06 ****
// ******* PRODUCTION ORDER LIST SCREEN DETAIL FIELD    *******
// 
//    Record Name:      PC0SW06
// 
//    This record formats the portion of the list screen
// line that has to be a group field.  it has to be a group
// field because there is another format to this line that
// is also found in the record.
// 
// ******* PRODUCTION ORDER LIST SCREEN DETAIL FIELD    *******
// ***********************
Record PC0SW06 type basicRecord
  5 PC0SWGRP PC0SWGRP ; 
    10 PC6STAT PC6STAT ; 
    10 * char(1) ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 * char(1) ; 
    10 XWHCD XWHCD ; 
    10 * char(1) ; 
    10 PC2CUXID PC2CUXID ; 
    10 * char(1) ; 
    10 PC0SWPLN PC0SWPLN ; 
    10 * char(1) ; 
    10 YMTCD YMTCD ; 
    10 * char(1) ; 
    10 PC0SMEST PC0SMEST ; 
    10 * char(1) ; 
    10 PC0SMETL PC0SMETL ; 
    10 * char(1) ; 
    10 PC0SMEDT PC0SMEDT ; 
  5 PC0SWGR2 PC0SWGR2 ; 
    10 PC0SWLIT PC0SWLIT ; 
    10 PC0SWNBR PC0SWNBR ; 
    10 * char(1) ; 
    10 PC0SWDIM PC0SWDIM ; 
    10 XDMCD XDMCD ; 
    10 * char(1) ; 
    10 PC0SWOWG PC0SWOWG ; 
    10 XOWCD XOWCD ; 
    10 * char(1) ; 
    10 PC0SWPKG PC0SWPKG ; 
    10 XPGCD XPGCD ; 
    10 * char(1) ; 
    10 PC0SWSOL PC0SWSOL ; 
    10 PC0SWSOF PC0SWSOF ; 
      15 PC0SWORD PC0SWORD ; 
      15 PC0SWDOT PC0SWDOT ; 
      15 PC0SWNRD PC0SWNRD ; 
      15 PC0SW-MSR-IND PC0SW-MSR-IND ; 
end // end PC0SW06

// etal override date display
DataItem PC0SMEDT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date display
DataItem PC0SMEST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA Date display
DataItem PC0SMETA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// etal date display
DataItem PC0SMETL char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production century
DataItem PC0SMPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PC0SMPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem PC0SMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem PC0SMPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production year
DataItem PC0SMPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated RTS date display
DataItem PC0SMRTS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem PC0SMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for component sizes
DataItem PC0SW-00-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Style on components program
DataItem PC0SW-02-COMPONENT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '.' literal
DataItem PC0SW-MSR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales order
DataItem PC0SW-ORD-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Part char
DataItem PC0SW-PART-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0SW-PO-NBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC0SWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer order number
DataItem PC0SWCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor flag
DataItem PC0SWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date day map display
DataItem PC0SWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dimension literal
DataItem PC0SWDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// '.' literal
DataItem PC0SWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level Dest. 'CURRENT'
DataItem PC0SWDST char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CHAR data form
DataItem PC0SWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA Date
DataItem PC0SWETA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// list screen line 2 format
DataItem PC0SWGR2 char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// list screen line 1 format
DataItem PC0SWGRP char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PC0SWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for PCWREC record load
DataItem PC0SWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PC0SWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp array (break)
DataItem PC0SWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key char
DataItem PC0SWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key num
DataItem PC0SWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// blank po or stk xfer literal
DataItem PC0SWLIT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple styles flag
DataItem PC0SWMLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date month map display
DataItem PC0SWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PC0SWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank po or stk xfer number
DataItem PC0SWNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0SWNDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Char 1 to test for numeric
DataItem PC0SWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Char 2 to test for numeric
DataItem PC0SWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike order number
DataItem PC0SWNOR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Niike Order nbr
DataItem PC0SWNRD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0SWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales Order nbr
DataItem PC0SWORD char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group code
DataItem PC0SWOWC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group literal
DataItem PC0SWOWG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package literal
DataItem PC0SWPKG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_PLAN_NBR
DataItem PC0SWPLN char(2)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Group level Product 'CURRENT'
DataItem PC0SWPRD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level array
DataItem PC0SWRC2 char(178)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PC0SWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Redefine PO ID date
DataItem PC0SWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID buy month
DataItem PC0SWRM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0SWRM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0SWRNM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year 1
DataItem PC0SWRY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year 2
DataItem PC0SWRY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century & year
DataItem PC0SWRYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID year
DataItem PC0SWRYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package literal
DataItem PC0SWSOF char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package literal
DataItem PC0SWSOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level product "SAVED"
DataItem PC0SWSPD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group level dest. "SAVED"
DataItem PC0SWSST char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved/previous style number
DataItem PC0SWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MADD + ETT (temp accumulator)
DataItem PC0SWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch ITEM
DataItem PC0SWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PC0SWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC0SWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update  for data switch
DataItem PC0SWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PC0SWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warehouse code
DataItem PC0SWWHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem PC0SWWK1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0SWWK2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0SWWK3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0SWWKA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field
DataItem PC0SWWKN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exit switch, invalid GPC code
DataItem PC0SWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date year map display
DataItem PC0SWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

