package pc0o;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0O ****
//   This screen is used to make modifications to many products
// at once on a P.O.  You come to this screen by entering
// option '34' on the production order menu (PC0A).
// 
//   DATE      NAME   DESCRIPTION OF CHANGE
// --------   ------  ----------------------------------------
// 11/01/89   JNEWMA  New application.
// 
// 06/11/90   SFORD   Re-worked status update in both Footwear
//                    and Apparel. PC0O161 & PC0O261
// 
// 06/12/90   SFORD   Enhanced application to have GPC = '01'
//                    logic follow GPC = '02' logic
// 
// 06/12/90   SFORD   ETALO, CHG MEMO Flag, format PO ID Fields
//                    for Footwear. (PC0O150,PC0OSA8,PC0O001)
// 
// 08/16/90   JGLAZE  Add the ability to update scheduler on
//                    the apparel screen.
// 
// 09/27/90   lsutto  allow gpc 07 access
// 
// 11/06/90   kdenne  incorporated pc prebuild flag and user id
//                    in PC0O830,PC0OW03,PC0OW05.
// 
// 11/26/90   GAMEN   Add misc. charges processing
// 
// 12/17/90   PPETER  A77 - put the sign-on of user cancelling
//                    a PO in VPOITM01.xxx-user-id.
// 
// 12/25/90   lsutto  Add Owner Group to screen
// 
// 01/16/91   CHAERT  Add update of Blank Available Inventory
//                    on a cancelled product.
// 
// 02/27/91   lsutto  add warning for ets date < today
// 
// 05/15/91   GAMEN   Change intransit check so reciepts are
//                    not included.
// 
// 05/16/91   GAMEN   Treat interims just like screened goods,
//                    pc0os60.
// 
// 06/10/91   chaert  db2 changes pc0os08,s26.  Move sales ord
//                    # from po itm to audit item.
// 
// 10/15/91   DFRANC  If transfered from PC0R move in plan nbr
//                    and RTA date.  Also upon NC'ing a PO and
//                    pressing enter, return to PC0R if this
//                    was the previous program.  Modified map
//                    and program to allow returning to prev-
//                    ious screen upon pressing PF3.
// 
// 10/30/91   DFRANC  Added MODE to the screen.  The RTA date
//                    is now protected and changes to match the
//                    plan number entered.  Allow wildcarding
//                    close of items if plan number is spaced
//                    out.
// 
// 01/23/92   lsutto  add cust-ord-id and nike-or-id to m002
//                    for sopo changes. also change any S7,S8
//                    to SH,SI for selection on poitm
// 
// 05/07/92   lsutto  move vrification of po-number ahead of
//                    verification of cust/so# so that we can
//                    check po-type  (pc0o250)
//                    AND: fix bug that wipes out scheduler cd
//                    when etal override date changed (pc0262)
// 
// 05/28/92   GAMEN   Correct the s.o. processing so that
//                    reapeted changes can be made.
// 
// 06/01/92   GAMEN   Make sure that s.o. is blanked/zeroed
//                    for F2 orders when customer is changed
//                    and s.o. not entered.
// 
// 06/09/92   GAMEN   When ETs is changed and s.o. exists,
//                    dont go through s.o. update routine.
// 
// 06/23/92   lsutto  round b-grade price calc in xspcs04
// 
// 07/09/92   chaert  s21, when updating original po item,
//                    check for cx items
// 
// 08/25/92   lsutto  don't check avail invntry if crested tee
//                    or foreign factory  ( PC0OS09 )
// 
// 09/15/92   KSANFO  New status code 'TN'. Allow global change
//                    to only 'OP' or 'CX' from 'TN'.  Remove
//                    requirement that style/dest be specified,
//                    for status codes SS,PS,CR,S1,S4.
//                    PC0OS43,44;PC0O001,PC0O150,PC0O161.
// 
// 10/22/92   chaert  change to xppc030, balance to ship
//                    add mode of trans.
// 12/18/92   KSANFO  Add PO Type 'EM' to Apparel processing
//                    logic: PC0O250.
// 01/06/92   DFRANC  Modified PC0OSE2 to call IO0440 vs IO4150
//                    used same record.
// 02/22/93   gamen   Move map nbr to caitem for pf1
// 04/28/93   KSANFO  SO# & RTA Date will now be passed in from
//                    PC0Z and PC0R.
// 04/28/93   GAMEN   Remove s.o. edits for aprl po type 'IR'.
// 05/07/93   GAMEN   For footwear, don't pick up cancelled
//                    items RTA when plan is entered. PC0O150
// 05/14/93   dhales  For blank style "TO" PO's, adjust alt
//                    inventory when status changed to cxl
//                    pc0os60 was changed
// 06/11/93   ksanfo  Add po type = "AD".
// 06/15/93   GAMEN   Add zfc-crcy-cd for db2 changes
// 06/21/93   chaert  change select on DORDER.VITEM001 to SE
//                    pc0ose2.
// 01/20/94   dhales  change to prevent update of po numbers
//                    less than 300000
// 04/28/94   dhales  allow non-screener factories to produce
//                    screened t-shirts without checking
//                    alt. inventory.
// 06/15/94   dhales  adjust alt inventory for crested golf
//                    product
// 11/01/94   jjuch   change to exclude apao po > 699999 in
//                    pc0o250.
// 12/15/95   jniese  change the editing for the S.O. field
//                    for apparel.
// 02/19/96   jniese  require so for type 'em' and 'ts'.
// 02/28/96   jniese  change processing for 'to' po's when
//                    decrementing alt inventory.
// 04/04/96   gamen   change s.o. to 9.3.
// 10/22/96   jniese  change to require so for direct ship
// 05/08/97   jniese  pca999 - change pc0os42 for apparel fc.
// 06/03/97   PHARWO  PCA367 - PPR PROJECT, PO VIEW CHANGES
// 06/29/97   jniese  PCA367 - PPR PROJECT corrections
// 11/05/97   kgraha  PCA415 - Add 'MX' po type.
// 11/13/97   oricha  Y2K modifications:  ezedtel now replaces
//                    ezedte in pc0o0250.  added century level
//                    to pc0ow00.pc0owdte for year calc.
// 12/09/97   DRAMMO  Removed OETS field from map PC0OM002.
//                    Changes are made in PC0OM002, PC0O221,
//                    PC0O240, PC0O250, PC0O251 & PC0O262.
// 06/19/98   DRAMMO  Modified to allow multiple POs to be
//                    opened for PO type 'SS' in PC0OM001.
// 10/20/98   MHUYNH  Generated due to changes to XPPC030.
// 07/29/99   drammo  PCF198 - Modified to process LP POs.
// 09/03/99   DRAMMO  PCF205 - Changed to use new view VPOITM04
// 01/19/2000 VMATT   PCF205 - CLEANED UP VPOITM03
// 02/07/00   SBUNGO  CHANGED TO USE VIEW VFCTY003
// 02/07/2000 VSANKA  PCA479 - Spain Exception Changes.
// 02/29/2000 VSANKA  PCA999 - fix for bug in 'NC'ing PO's
//                       in pc0os06.
// 03/24/00   SBUNGO  PCF210J-CHANGED TO USE VIEW VPOITM05
// 04/14/00   rmurth  corrected movements to
//                    pc-rel-pln-ref-nbr of vpoitm05
// 04/21/00   VGOTTI  Changed for not to maintain POs which are
//                    created in SAP.PC0OSB3,PC0O160,PC0O260
//                    are modified accordingly.
// 01/10/02   spitch  Changed to maintain sap po's by using
//                    change level flag 10
// 03/01/02   MNADEL  removed reference to alternate
//                    inventory tables in PC0OS09.
// 06/05/03  AVERMA  Removed the check for PO number to be
//  within
//                   299999 and 700000.
// *********************
Program PC0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC0OW00 PC0OW00; // record
  PC0OW01 PC0OW01; // record
  PC0OW02 PC0OW02; // record
  PC0OW03 PC0OW03; // record
  PC0OW04 PC0OW04; // record
  PC0OW05 PC0OW05; // record
  PC0OW07 PC0OW07; // record
  PC0OW08 PC0OW08; // record
  PC2REC PC2REC; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PC8REC PC8REC; // record
  PCOREC PCOREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YACTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use YPUTBL {deleteAfterUse = yes}; // table
  use PC0OM.PC0OM001,  // forms
      PC0OM.PC0OM002, 
      PC0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/

    goto PC0O001; /* Special Initialization*/

    PC0O001: PC0O001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/

    goto PC0O002; /* Converse main process*/
    PC0O002: PC0O002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0O002; /* Converse Detail Schedule List*/

  end // end main
end // end PC0O

// Special Initialization
Function PC0O001()
  set PC0OW00 empty;
  set PC0OW01 empty;
  set PC0OW07 empty;

   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/

  if (PCWREC.XGPCD == "02"
   || PCWREC.XGPCD == "01"
   || PCWREC.XGPCD == "07")

    PC0OW01.CAFROMAP = COMMAREA.CAFROMAP; /* came from program*/
    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CACLVL[2] != "Y")
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
        PC0OM001.XXXPRCNM = "PC0O001";
      else

        PC0OW00.PCWMAP = 1;
        PC0OW01.XGPCD = "02"; /* GPC code*/

        if (COMMAREA.CAFROMAP == "PC0Z" /* If coming from PO ID inq*/
         || COMMAREA.CAFROMAP == "PC0R") /* or coming from PO detail*/

          if (PCWREC.CAFROMAP[1] == "PC0Z" /* If not fastpath*/
           || PCWREC.CAFROMAP[2] == "PC0R")

            if (PCWREC.CAFROMAP[2] == "PC0R") /* If not fastpath*/
              PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
              PC0OW01.PC0OWPON = PCWREC.PC3PONBR; /* From PO number*/
              PC0OW00.PC0OWTPO = PCWREC.PC3PONBR; /* To PO number*/
            end

            /* ------------------------------------------------------------*/
             /* Format the default PO ID type fields for entry display.*/

            /* ------------------------------------------------------------*/

            if (PCWREC.CAFROMAP[1] == "PC0Z") /* If not fastpath*/
              PCWREC.CAFROMAP[1] = " ";
              PC0OW01.PC0OWPON = 0; /* PO number*/
              PC0OW00.PC0OWPOD = PCWREC.PC3POIDT; /* PO ID date*/
              PC0OW01.PC0OWYR = PC0OW00.PC0OWYY; /* PO ID year*/
              PC0OW01.PC0OWM1 = PC0OW00.PC0OWM1; /* PO ID buy month*/
              PC0OW01.PC0OWM2 = PC0OW00.PC0OWM2; /* PO ID del month*/
              PC0OW01.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
              PC0OW01.PC4ORTYP = PCWREC.PC4ORTYP; /* Order Type*/
            end

            PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
            PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
            PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
            PC0OW01.XDMCD = PCWREC.XDMCD; /* Dimension*/
            PC0OW01.PC2INSEG = PCWREC.PC2INSEG; /* ISEG*/
            PC0OW01.XPGCD = PCWREC.XPGCD; /* Package*/
            PC0OW01.XUMCD = PCWREC.XUMCD; /* Unit of measure*/
            PC0OW01.YMTCD = PCWREC.YMTCD; /* Mode of transprtn*/
            if (PCWREC.XOWCD == "00")
              PC0OW01.XOWCD = " "; /* screen requires spaces*/
            else
              PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
            end
            if (COMMAREA.CAFROMAP == "PC0Z") /* If coming from PO ID inq*/
              PC0OW01.XWHCD = PCWREC.PCWWHSE[1]; /* Warehouse*/
              PC0OW01.PC2CUXID = PCWREC.PCWCUST[1]; /* Customer*/
              PC0OW01.PC6PLAN = PCWREC.PC6PLAN; /* Plan*/
              PC0OW01.PC6RTADT = PCWREC.PC6RTADT; /* RTA*/
              PC0O010(); /* check rta date*/
              PC0OW08.PC0OW08-GROUP = PCWREC.PCWUSER4;
              PC0OW01.OP1CUOID = PC0OW08.OP1CUOID;
              PC0OW01.OP1NORID = PC0OW08.OP1NORID;
            else
              PC0OW01.XWHCD = PCWREC.XWHCD; /* Warehouse*/
              PC0OW01.PC2CUXID = PCWREC.PC2CUXID; /* Customer*/
            end
            if (COMMAREA.CAFROMAP == "PC0R") /* If coming from PO ID inq*/
              PC0OW01.PC6PLAN = PCWREC.PC6PLAN; /* Plan*/
              PC0OW01.PC6RTADT = PCWREC.PC6RTADT; /* RTA*/
              PC0O010(); /* check rta date*/
              PC0OW08.PC0OW08-GROUP = PCWREC.PCWUSER4;
              PC0OW01.OP1CUOID = PC0OW08.OP1CUOID;
              PC0OW01.OP1NORID = PC0OW08.OP1NORID;
            end
          else
            PC0OW01.YSMXDV = "10"; /* Division default*/
            PC0OW01.SY2CLRID = "00 "; /* Color default*/
          end /* ===> level(1) app = PC0Z or PC0R*/
                                   /* check*/
        else
          PC0OW01.YSMXDV = "10"; /* Division default*/
          PC0OW01.SY2CLRID = "00 "; /* Color default*/
        end /* ===> from app = PC0Z or PC0R  check*/
      end
    end /* ===> GPC = '02' init*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CACLVL[1] != "Y")
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
        PC0OM001.XXXPRCNM = "PC0O001";
      else
        PC0OW00.PCWMAP = 1;
        PC0OW01.XGPCD = "01"; /* GPC code*/
        if (COMMAREA.CAFROMAP == "PC0Z" /* If coming from PO ID inq*/
         || COMMAREA.CAFROMAP == "PC0R") /* or coming from PO detail*/
          if (PCWREC.CAFROMAP[1] == "PC0Z") /* If not fastpath*/
            PCWREC.CAFROMAP[1] = " ";
            PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
            PC0OW01.PC0OWPON = PCWREC.PC3PONBR; /* PO number*/
            PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
            PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
            PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
            PC0OW01.XDMCD = PCWREC.XDMCD; /* Dimension*/
            PC0OW01.PC2INSEG = PCWREC.PC2INSEG; /* ISEG*/
            PC0OW01.XPGCD = PCWREC.XPGCD; /* Package*/
            PC0OW01.XUMCD = PCWREC.XUMCD; /* Unit of measure*/
            if (PCWREC.XOWCD == "00")
              PC0OW01.XOWCD = " "; /* screen requires spaces*/
            else
              PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
            end
            PC0OW01.XWHCD = PCWREC.PCWWHSE[1]; /* Warehouse*/
            PC0OW01.PC2CUXID = PCWREC.PCWCUST[1]; /* Customer*/
            PC0OW01.PC6PLAN = PCWREC.PC6PLAN; /* Plan*/
            PC0OW01.PC6RTADT = PCWREC.PC6RTADT; /* RTA*/
          else
            if (PCWREC.CAFROMAP[2] == "PC0R") /* If not fastpath*/
              PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
              PC0OW01.PC0OWPON = PCWREC.PC3PONBR; /* PO number*/
              PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
              PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
              PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
              PC0OW01.XDMCD = PCWREC.XDMCD; /* Dimension*/
              PC0OW01.PC2INSEG = PCWREC.PC2INSEG; /* ISEG*/
              PC0OW01.XPGCD = PCWREC.XPGCD; /* Package*/
              PC0OW01.XUMCD = PCWREC.XUMCD; /* Unit of measure*/
              if (PCWREC.XOWCD == "00")
                PC0OW01.XOWCD = " "; /* screen requires spaces*/
              else
                PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
              end
              PC0OW01.XWHCD = PCWREC.XWHCD; /* Warehouse*/
              PC0OW01.PC2CUXID = PCWREC.PC2CUXID; /* Customer*/
            else
              PC0OW01.YSMXDV = "10"; /* Division default*/
              PC0OW01.SY2CLRID = "00 "; /* Color default*/
            end
          end
        else
          PC0OW01.YSMXDV = "10"; /* Division default*/
          PC0OW01.SY2CLRID = "00 "; /* Color default*/
        end
      end /* ===> GPC = '01' init*/
    end
    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CACLVL[7] != "Y")
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
        PC0OM001.XXXPRCNM = "PC0O001";
      else
        PC0OW00.PCWMAP = 1;
        PC0OW01.XGPCD = "07"; /* GPC code*/
        if (COMMAREA.CAFROMAP == "PC0Z" /* If coming from PO ID inq*/
         || COMMAREA.CAFROMAP == "PC0R") /* or coming from PO detail*/
          if (PCWREC.CAFROMAP[1] == "PC0Z") /* If not fastpath*/
            PCWREC.CAFROMAP[1] = " ";
            PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
            PC0OW01.PC0OWPON = PCWREC.PC3PONBR; /* PO number*/
            PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
            PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
            PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
            PC0OW01.XDMCD = PCWREC.XDMCD; /* Dimension*/
            PC0OW01.PC2INSEG = PCWREC.PC2INSEG; /* ISEG*/
            PC0OW01.XPGCD = PCWREC.XPGCD; /* Package*/
            PC0OW01.XUMCD = PCWREC.XUMCD; /* Unit of measure*/
            if (PCWREC.XOWCD == "00")
              PC0OW01.XOWCD = " "; /* screen requires spaces*/
            else
              PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
            end
            PC0OW01.XWHCD = PCWREC.PCWWHSE[1]; /* Warehouse*/
            PC0OW01.PC2CUXID = PCWREC.PCWCUST[1]; /* Customer*/
            PC0OW01.PC6PLAN = PCWREC.PC6PLAN; /* Plan*/
            PC0OW01.PC6RTADT = PCWREC.PC6RTADT; /* RTA*/
          else
            if (PCWREC.CAFROMAP[2] == "PC0R") /* If not fastpath*/
              PCWREC.CAFROMAP[2] = " ";
              PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
              PC0OW01.PC0OWPON = PCWREC.PC3PONBR; /* PO number*/
              PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
              PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
              PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
              PC0OW01.XDMCD = PCWREC.XDMCD; /* Dimension*/
              PC0OW01.PC2INSEG = PCWREC.PC2INSEG; /* ISEG*/
              PC0OW01.XPGCD = PCWREC.XPGCD; /* Package*/
              PC0OW01.XUMCD = PCWREC.XUMCD; /* Unit of measure*/
              if (PCWREC.XOWCD == "00")
                PC0OW01.XOWCD = " "; /* screen requires spaces*/
              else
                PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
              end
              PC0OW01.XWHCD = PCWREC.XWHCD; /* Warehouse*/
              PC0OW01.PC2CUXID = PCWREC.PC2CUXID; /* Customer*/
            else
              PC0OW01.YSMXDV = "10"; /* Division default*/
              PC0OW01.SY2CLRID = "00 "; /* Color default*/
            end
          end
        else
          PC0OW01.YSMXDV = "10"; /* Division default*/
          PC0OW01.SY2CLRID = "00 "; /* Color default*/
        end
      end
    end /* ===> GPC = '07' init*/

  else /* ===> process GPC = '03' init*/

    PC0OW00.PCWMAP = 2;
    PC0OW01.XGPCD = "03"; /* GPC code*/
    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] != "Y")
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
        PC0OM001.XXXPRCNM = "PC0O001";
      else
        if (COMMAREA.CAFROMAP == "PC0Z" /* If coming from PO ID inq*/
         && PCWREC.CAFROMAP[1] == "PC0Z") /* and not fastpath*/
          PCWREC.CAFROMAP[1] = " ";
          PC0OW01.PO-REG-CD = PCWREC.PO-REG-CD; /* PO region*/
          PC0OW01.PC3PONBR = PCWREC.PC3PONBR; /* PO number*/
          PC0OW01.YSMXDV = PCWREC.YSMXDV; /* Division*/
          PC0OW01.SY1STNBR = PCWREC.SY1STNBR; /* Style*/
          PC0OW01.SY2CLRID = PCWREC.SY2CLRID; /* Color*/
          PC0OW01.PC6PLAN = PCWREC.PC6PLAN; /* Plan*/
          /* ------------------------------------------------------------*/
           /* Format the PO ID for display.*/
          /* ------------------------------------------------------------*/
          PC0OW00.PCFSECD = PCWREC.PCFSECD; /* PO ID season code*/
          PC0OW00.PC0OWD1 = "-"; /* Dash 1*/
          PC0OW00.PC0OWPOD = PCWREC.PC3POIDT; /* PO ID date*/
          PC0OW00.PC0OWMM1 = PC0OW00.PC0OWM1; /* PO ID buy month*/
          PC0OW00.PC0OWD2 = "-"; /* Dash 2*/
          PC0OW00.PC0OWMM2 = PC0OW00.PC0OWM2; /* PO ID buy month*/
          PC0OW00.PC0OWD3 = "-"; /* Dash 3*/
          PC0OW00.FY1FCTYC = PCWREC.FY1FCTYC; /* Factory code*/
          if (PCWREC.XOWCD == "00")
            PC0OW01.XOWCD = " "; /* screen requires spaces*/
          else
            PC0OW01.XOWCD = PCWREC.XOWCD; /* Owner group*/
          end
        else
          PC0OW01.YSMXDV = "10"; /* Division default*/
        end
      end
    else
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      XSEXIT();
      PC0OM001.XXXPRCNM = "PC0O001";
    end
  end /* ===> GPC = '03' init*/

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/
  set VFCTY003 empty;
  set OP1REC empty;
  set OP2REC empty;
  set VPOAHD02 empty;
  set VPOAIT02 empty;
  set VPOASZ02 empty;
  set PCWREC empty;
  set PCYREC empty;
  set PC0OM001 initial;
  set PC0OM002 initial;
  set PC2REC empty;
  set VPOHDR02 empty;
  set VPOITM05 empty;
  set PG2REC empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set YSMREC empty;

  TA1REC.TA1PGMNM = "PC0O001"; /* Module identification*/
  YSMREC.YSMSUMCD = PC0OW01.YSMXDV; /* Division*/
  XSPCS02(); /* Get division*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    PC0OW01.YSMSMDSC = YSMREC.YSMSMDSC; /* Description*/
  end

  PC0OW00.XXXPRCNM = "PC0O"; /* Module identification*/
end // end PC0O001

// Main process to display a map
Function PC0O002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0OW00.PCWMAP == 1) /* Map 1 was requested*/

    PC0O100(); /* Display map 1*/

  else

    if (PC0OW00.PCWMAP == 2) /* Map 2 was requested*/

      PC0O200(); /* Display map 2*/

    end

  end

end // end PC0O002

// Format RTA dt for map display
Function PC0O010()

   /* ---------------------------------------------------------*/
   /* Check to see if the date passed in from the pcwrec is valid*/
   /* ---------------------------------------------------------*/

  if (PC0OW01.PC6RTADT > 0) /* ==> date present --> (yccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = PC0OW01.PC6RTADT; /* date change*/
    TA2REC.TA2DYAOD = 0; /* ==> sum value to days diff*/

    XSPCS60();

    PC0OW01.PC0OWRTA = TA2REC.TA2GRGA; /* RTA Date display*/

  else
    PC0OW01.PC0OWRTA = " "; /* move spaces to RTA DT*/

  end

end // end PC0O010

// FOOTWEAR      selection
Function PC0O100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0O120(); /* Format and display the map*/

  PC0O130(); /* Check attention identifier*/

  PC0O140(); /* Reset fields to normal intensity*/

  PC0O150(); /* Verify the entered data*/

  PC0O160(); /* Process valid input request*/

end // end PC0O100

// Converse selection map 001
Function PC0O120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not a PA key pressed*/
    PC0O121(); /* Format selection data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0OM001.XXXPRCNM = PC0OW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0OM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0OM001.XXXPRCNM = PC0OW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0OM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0OM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0OW00.XXXPRCNM = "PC0O"; /* Module identification*/
  COMMAREA.CATOAP = PC0OM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0OM001.CAITEM; /* Application data*/

  PC0O122(); /* Converse popup windows*/

end // end PC0O120

// Format selection data of 001
Function PC0O121()

  set PC0OM001 initial; /* Initialize map*/

   /* ------------------------------------------------------------*/
   /* Format the item data for map 001 display.*/
   /* ------------------------------------------------------------*/

  PC0OM001.XGPCD = PC0OW01.XGPCD; /* GPC Code*/
  if (PC0OM001.XGPCD in XGPTBL.XGPCD)
    PC0OM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  PC0OM001.PC0OMYR = PC0OW01.PC0OWYR; /* PO ID year*/
  PC0OM001.PC0OMM1 = PC0OW01.PC0OWM1; /* PO ID buy month*/
  PC0OM001.PC0OMM2 = PC0OW01.PC0OWM2; /* PO ID dlv month*/
  PC0OM001.FY1FCTYC = PC0OW01.FY1FCTYC; /* Factory code*/
  PC0OM001.PC4ORTYP = PC0OW01.PC4ORTYP; /* PO type*/
  PC0OM001.PC4SDESC = PC0OW01.PC4SDESC; /* PO type description*/
   /* MOVE PC0OW01.po-reg-cd TO PC0OM001.po-reg-cd    /* PO region*/
  PC0OM001.PC0OMFROPO = PC0OW01.PC0OWPON; /* From PO number*/
  PC0OM001.PC0OMTOPO = PC0OW00.PC0OWTPO; /* To PO number*/
  PC0OM001.YSMXDV = PC0OW01.YSMXDV; /* Division*/
  PC0OM001.YSMSMDSC = PC0OW01.YSMSMDSC; /* Division descr*/
  PC0OM001.SY1STNBR = PC0OW01.SY1STNBR; /* Style number*/
  PC0OM001.SY2CLRID = PC0OW01.SY2CLRID; /* Color*/
  PC0OM001.XDMCD = PC0OW01.XDMCD; /* Warehouse code*/
  PC0OM001.PC2INSEG = PC0OW01.PC2INSEG; /* Spec difference*/
  PC0OM001.XPGCD = PC0OW01.XPGCD; /* Package*/
  PC0OM001.XUMCD = PC0OW01.XUMCD; /* Unit of measure*/
  PC0OM001.XOWCD = PC0OW01.XOWCD; /* Owner group*/
  PC0OM001.XWHCD = PC0OW01.XWHCD; /* Warehouse*/
  PC0OM001.PC2CUXID = PC0OW01.PC2CUXID; /* Cust xref*/
  PC0OM001.OP1CUOID = PC0OW01.OP1CUOID; /* Cust S.O.#*/
  PC0OM001.OP1NORID = PC0OW01.OP1NORID; /* Nike S.O.#*/
  PC0OM001.PC6PLAN = PC0OW01.PC6PLAN; /* Plan*/
  if (PC0OW01.PC6PLAN == 0)
    PC0OM001.PC0OMRTA = " "; /* RTA date*/
    PC0OM001.YMTCD = " "; /* Mode*/
  else
    PC0OM001.PC0OMRTA = PC0OW01.PC0OWRTA; /* RTA date*/
    PC0OM001.YMTCD = PC0OW01.YMTCD; /* Mode*/
  end
  PC0OM001.PC6STAT = PC0OW01.PC6STAT; /* Status*/
  PC0OM001.YACCD = PC0OW01.YACCD; /* Audit comment code*/
  PC0OM001.YACDESC = PC0OW01.YACDESC; /* Audit comment descr*/

end // end PC0O121

// Converse pop-up windows
Function PC0O122()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XDMCD == "?"   /* IF warehouse list requested*/
   || PC0OM001.XPGCD == "?"   /* or package list requested*/
   || PC0OM001.XUMCD == "?"   /* or unit of measure list requested*/
   || PC0OM001.XOWCD == "?"   /* or owner group list requested*/
   || PC0OM001.XWHCD == "?"   /* or warehouse list requested*/
   || PC0OM001.PC6STAT == "?" /* or status list requested*/
   || PC0OM001.YACCD == "?")  /* or audit comment list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0OW00.XXXPRCNM = "PC0O122"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimensions.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XDMCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.XDMCD = PC0OW01.XDMCD; /* Restore prior code*/
    else
      PC0OM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.XDMCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of packages.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XPGCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " PACKAGE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.XPGCD = PC0OW01.XPGCD; /* Restore prior code*/
    else
      PC0OM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.XPGCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of unit of measures.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XUMCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " UNIT OF MEASURE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.XUMCD = PC0OW01.XUMCD; /* Restore prior code*/
    else
      PC0OM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.XUMCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XOWCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " OWNER GROUP"; /* Heading*/
    if (PC0OM001.XWHCD == "  ") /* no warehouse entered*/
      XX0XW02.XWHCD = "51"; /* use warehouse 51*/
    else
      XX0XW02.XWHCD = PC0OM001.XWHCD; /* Warehouse code*/
    end
    if (PC0OM001.XWHCD in XWHTBL.XWHCD) /* if whse in whse table*/
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] != "Y") /* do not do pop up window*/
        converseLib.validationFailed(404); /* only OG '00' valid*/
        PC0OM001.XOWCD = PC0OW01.XOWCD; /* Restore prior code*/
        exit stack; /* exit*/
      else /* set up pop-up window*/
        while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
          XPXOW01(); /* Display the list*/
        end
      end
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.XOWCD = PC0OW01.XOWCD; /* Restore prior code*/
    else
      PC0OM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.XOWCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouses.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.XWHCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.XWHCD = PC0OW01.XWHCD; /* Restore prior code*/
    else
      PC0OM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.XWHCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of statuses.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.PC6STAT == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " STATUS"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.PC6STAT = PC0OW01.PC6STAT; /* Restore prior code*/
    else
      PC0OM001.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM001.PC6STAT cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of audit comments.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.YACCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " AUDIT COMMENT"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYAC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM001.YACCD = PC0OW01.YACCD; /* Restore prior code*/
    else
      PC0OM001.YACCD = YACTBL.YACCD[XX0XWPIX]; /* Selected code*/
      PC0OM001.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* Selected desc*/
    end

    set PC0OM001.YACCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0OW00.XXXPRCNM = "PC0O122"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0O122

// Check attention identifiers
Function PC0O130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC0OM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0OW00.XXXPRCNM = "PC0O130"; /* Module identification*/
      set PC0OM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0OM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      if (COMMAREA.CAFROMAP == "PC0R") /* came from PC0R*/
        COMMAREA.CATOAP = "PC0R"; /* transfer to production menu*/
        PC0O131(); /* Set up pcwrec for transfer*/
      else
        COMMAREA.CATOAP = "PC0A"; /* Transfer to P.O. menu*/
      end
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC0OW00.XXXPRCNM = "PC0O130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0O130

// Set up PCWREC for PC0R XFER
Function PC0O131()
   /* ------------------------------------------------------------*/
   /* SET PCWREC empty*/
   /* ------------------------------------------------------------*/

  set PCWREC empty; /* Clear record*/
  PCWREC.CAUSERA = COMMAREA.CAUSERA;

  if (PC0OW01.PC0OWPON == 0)
     /* next sentence*/
  else
    PCWREC.PC3PONBR = PC0OW01.PC0OWPON;
  end

  PCWREC.SY1STNBR = PC0OW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0OW01.SY2CLRID;
  PCWREC.XDMCD = PC0OW01.XDMCD;
  PCWREC.PC2INSEG = PC0OW01.PC2INSEG;
  PCWREC.XPGCD = PC0OW01.XPGCD;
  PCWREC.XUMCD = PC0OW01.XUMCD;
  PCWREC.XWHCD = PC0OW01.XWHCD;
  PCWREC.PC2CUXID = PC0OW01.PC2CUXID;
  PCWREC.PC6PLAN = PC0OW01.PC6PLAN;
  PCWREC.PC6RTADT = PC0OW01.PC6RTADT;

  PCWREC.CAFROMAP[3] = "PC0O";
  COMMAREA.CATOAP = "PC0R";

end // end PC0O131

// Reset highlighted fields
Function PC0O140()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0OM001.PC0OMYR initialAttributes; /* PO ID year*/
  set PC0OM001.PC0OMM1 initialAttributes; /* PO ID buy month*/
  set PC0OM001.PC0OMM2 initialAttributes; /* PO ID delivery month*/
  set PC0OM001.FY1FCTYC initialAttributes; /* Factory*/
  set PC0OM001.PC4ORTYP initialAttributes; /* PO type*/
   /* SET PC0OM001.po-reg-cd DEFINED;    /* PO region*/
  set PC0OM001.PC0OMFROPO initialAttributes; /* From PO number*/
  set PC0OM001.PC0OMTOPO initialAttributes; /* To PO number*/
  set PC0OM001.YSMXDV initialAttributes; /* Division*/
  set PC0OM001.SY1STNBR initialAttributes; /* Style*/
  set PC0OM001.SY2CLRID initialAttributes; /* Color*/
  set PC0OM001.XDMCD initialAttributes; /* Dimension*/
  set PC0OM001.PC2INSEG initialAttributes; /* Spec difference*/
  set PC0OM001.XPGCD initialAttributes; /* Package*/
  set PC0OM001.XUMCD initialAttributes; /* Unit of Measure*/
  set PC0OM001.XOWCD initialAttributes; /* Owner group*/
  set PC0OM001.XWHCD initialAttributes; /* Warehouse*/
  set PC0OM001.PC2CUXID initialAttributes; /* Customer*/
  set PC0OM001.PC6PLAN initialAttributes; /* Plan*/
  set PC0OM001.PC6STAT initialAttributes; /* Status*/
  set PC0OM001.YACCD initialAttributes; /* Audit comment*/
  set PC0OM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0OM001.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0O140

// Verify the entered data
Function PC0O150()
   /* -------------------------------------------------------------*/
   /* Reset confirmation flag if any fields have changed.*/
   /* ------------------------------------------------------------*/
  if (PC0OM001.PC0OMYR != PC0OW01.PC0OWYR     /* PO ID year*/
   || PC0OM001.PC0OMM1 != PC0OW01.PC0OWM1     /* PO ID buy month*/
   || PC0OM001.PC0OMM2 != PC0OW01.PC0OWM2     /* PO ID delivery month*/
   || PC0OM001.FY1FCTYC != PC0OW01.FY1FCTYC   /* Factory*/
   || PC0OM001.PC4ORTYP != PC0OW01.PC4ORTYP   /* PO type*/
   || PC0OM001.PC0OMFROPO != PC0OW01.PC0OWPON /* From PO number*/
   || PC0OM001.PC0OMTOPO != PC0OW00.PC0OWTPO  /* To PO number*/
   || PC0OM001.YSMXDV != PC0OW01.YSMXDV       /* Division*/
   || PC0OM001.SY1STNBR != PC0OW01.SY1STNBR   /* Style*/
   || PC0OM001.SY2CLRID != PC0OW01.SY2CLRID   /* Color*/
   || PC0OM001.XDMCD != PC0OW01.XDMCD         /* Dimension*/
   || PC0OM001.PC2INSEG != PC0OW01.PC2INSEG   /* Spec difference*/
   || PC0OM001.XPGCD != PC0OW01.XPGCD         /* Package*/
   || PC0OM001.XUMCD != PC0OW01.XUMCD         /* Unit of measure*/
   || PC0OM001.XOWCD != PC0OW01.XOWCD         /* Owner group*/
   || PC0OM001.XWHCD != PC0OW01.XWHCD         /* Warehouse*/
   || PC0OM001.PC2CUXID != PC0OW01.PC2CUXID   /* Customer*/
   || PC0OM001.OP1CUOID != PC0OW01.OP1CUOID   /* CustomerS.O.#*/
   || PC0OM001.OP1NORID != PC0OW01.OP1NORID   /* Nike S.O.#*/
   || PC0OM001.PC6PLAN != PC0OW01.PC6PLAN     /* Plan*/
   || PC0OM001.PC0OMRTA != PC0OW01.PC0OWRTA   /* RTA*/
   || PC0OM001.PC6STAT != PC0OW01.PC6STAT     /* Status*/
   || PC0OM001.YACCD != PC0OW01.YACCD)        /* Audit comment*/
    PC0OW00.PC0OWCFG = "N"; /* Confirm flag = no*/
  else
    if (PC0OW00.PC0OWCFG == "Y") /* If confirm flag = yes*/
      return; /* Return*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate entry of PO range*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.PC0OMYR == " " /* If year = 0*/
   && PC0OM001.PC0OMM1 == " " /* or buy month = 0*/
   && PC0OM001.PC0OMM2 == " " /* or buy month = 0*/
   && PC0OM001.FY1FCTYC == " ") /* or factory entered*/
    if (PC0OM001.PC0OMTOPO != 0)
      if (PC0OM001.PC0OMFROPO == 0
       || PC0OM001.PC0OMFROPO > PC0OM001.PC0OMTOPO) /* TO PO should be GE*/
        converseLib.validationFailed(559);
        PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
        set PC0OM001.PC0OMFROPO cursor, bold; /* Highlight*/
        set PC0OM001.PC0OMTOPO bold; /* Highlight*/
        exit stack;
      end
    end

    if (PC0OM001.PC0OMFROPO != PC0OM001.PC0OMTOPO
     && PC0OM001.PC0OMTOPO != 0
     && PC0OM001.PC4ORTYP == " ") /* range is valid only for SS POs*/
      converseLib.validationFailed(558); /* Invalid PO type*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC4ORTYP cursor, bold; /* Highlight*/
      exit stack;
    end

    if (PC0OM001.PC0OMFROPO != PC0OM001.PC0OMTOPO
     && PC0OM001.PC0OMTOPO != 0
     && PC0OM001.PC4ORTYP != "SS") /* range is valid only for SS POs*/
      converseLib.validationFailed(558); /* Invalid PO type*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC4ORTYP cursor, bold; /* Highlight*/
      exit stack;
    end

    /* IF (PC0OM001.PC0OMFROPO = PC0OM001.PC0OMTOPO*/
    /* OR PC0OM001.PC0OMTOPO = 0)*/
    /* AND PC0OM001.PC4ORTYP NE ' ';*/
    /* MOVE 558 TO EZEMNO;            /* PO range & type enter together*/
    /* MOVE 'PC0O150' TO PC0OW00.XXXPRCNM;/* Module identification*/
    /* SET PC0OM001.PC4ORTYP CURSOR,BRIGHT;/* Highlight*/
    /* EZEFLO;*/
    /* END;*/

    if (PC0OM001.PC0OMTOPO == 0)
      PC0OM001.PC0OMTOPO = PC0OM001.PC0OMFROPO;
      PC0OW00.PC0OWTPO = PC0OM001.PC0OMFROPO;
    end

    /* ------------------------------------------------------------*/
    /* Validate PO number.*/
    /* ------------------------------------------------------------*/

    if (PC0OM001.PC0OMFROPO != 0) /* IF PO number entered*/
      PC0OW00.PC0OW-TEMPO1 = PC0OM001.PC0OMFROPO;
      PC0OW00.PC0OW-TEMPO2 = PC0OM001.PC0OMTOPO;
      PC0OW00.PC0OW-VALID-POFLG = "N";
      while (PC0OW00.PC0OW-TEMPO1 <= PC0OW00.PC0OW-TEMPO2
       && PC0OW00.PC0OW-VALID-POFLG == "N") /* PO is invalid*/
        VPOHDR02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
        VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
        VPOHDR02.PC3PONBR = PC0OW00.PC0OW-TEMPO1; /* PO number*/
        PC0OS02(); /* Validate the PO number*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row not found*/
          PC0OW00.PC0OW-VALID-POFLG = "Y"; /* Valid PO*/
        end
        PC0OW00.PC0OW-TEMPO1 = PC0OW00.PC0OW-TEMPO1 + 1;
      end
      if (PC0OW00.PC0OW-VALID-POFLG == "N")
        converseLib.validationFailed(69); /* PO number invalid*/
        PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
        set PC0OM001.PC0OMFROPO cursor, bold; /* Highlight*/
        set PC0OM001.PC0OMTOPO bold; /* Highlight*/
        exit stack;
      end
    end

    if (PC0OM001.PC0OMFROPO != PC0OM001.PC0OMTOPO
     && PC0OM001.PC0OMTOPO != 0
     && PC0OM001.PC4ORTYP == "SS"
     && PC0OM001.PC6STAT != "OP") /* for a range status should be OP*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(37); /* Status invalid*/
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* Validate P.O. ID*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.PC0OMYR > " " /* If year > 0*/
   || PC0OM001.PC0OMM1 > " " /* or buy month > 0*/
   || PC0OM001.PC0OMM2 > " " /* or buy month > 0*/
   || PC0OM001.FY1FCTYC != " ") /* or factory entered*/
    if (PC0OM001.PC0OMFROPO != 0 /* If From PO number entered*/
     || PC0OM001.PC0OMTOPO != 0) /* If To PO number entered*/
      converseLib.validationFailed(158); /* Cannot enter both PO ID & #*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC0OMYR cursor, bold; /* Highlight*/
      set PC0OM001.PC0OMM1 bold; /* Highlight*/
      set PC0OM001.PC0OMM2 bold; /* Highlight*/
      set PC0OM001.FY1FCTYC bold; /* Highlight*/
      set PC0OM001.PC0OMFROPO bold; /* Highlight*/
      set PC0OM001.PC0OMTOPO bold; /* Highlight*/
      exit stack;
    else
      PC0OW00.PC0OWNUM = PC0OM001.PC0OMM2; /* Redefine month*/
      if (PC0OW00.PC0OWNM1 < "0" /* If month not numeric*/
       || PC0OW00.PC0OWNM1 > "1" 
       || PC0OW00.PC0OWNM2 < "0" 
       || PC0OW00.PC0OWNM2 > "9" 
       || PC0OW00.PC0OWNUM < "01"
       || PC0OW00.PC0OWNUM > "12")
        PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0OM001.PC0OMM2 cursor, bold; /* Highlight*/
        exit stack;
      end
      PC0OW00.PC0OWNUM = PC0OM001.PC0OMM1; /* Redefine month*/
      if (PC0OW00.PC0OWNM1 < "0" /* If month not numeric*/
       || PC0OW00.PC0OWNM1 > "1" 
       || PC0OW00.PC0OWNM2 < "0" 
       || PC0OW00.PC0OWNM2 > "9" 
       || PC0OW00.PC0OWNUM < "01"
       || PC0OW00.PC0OWNUM > "12")
        PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0OM001.PC0OMM1 cursor, bold; /* Highlight*/
        exit stack;
      end
      PC0OW00.PC0OWNUM = PC0OM001.PC0OMYR; /* Redefine year*/
      if (PC0OW00.PC0OWNM1 < "0" /* If year not numeric*/
       || PC0OW00.PC0OWNM1 > "9" 
       || PC0OW00.PC0OWNM2 < "0" 
       || PC0OW00.PC0OWNM2 > "9")
        PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
        converseLib.validationFailed(80); /* Invalid year*/
        set PC0OM001.PC0OMYR cursor, bold; /* Highlight*/
        exit stack;
      end
      if (converseVar.validationMsgNum == 0) /* If no errors found*/
        PC0OW01.PC0OWYR = PC0OM001.PC0OMYR; /* From year*/
        PC0OW01.PC0OWM1 = PC0OM001.PC0OMM1; /* From buy date*/
        PC0OW01.PC0OWM2 = PC0OM001.PC0OMM2; /* From delivery date*/
        PC0OW01.PC3POIDT = PC0OW01.PC0OWPOD; /* PO ID*/
        if (PC0OW01.PC0OWYR < "80") /* If year < 80*/
          PC0OW01.PC3POIDT = PC0OW01.PC3POIDT + 20000000; /* 21st century*/
        else /* Else*/
          PC0OW01.PC3POIDT = PC0OW01.PC3POIDT + 19000000; /* 20th century*/
        end
        PC0O152(); /* Validate the PO ID*/
        if (converseVar.validationMsgNum > 0)
          exit stack;
        end
      end
    end
  else
    if (PC0OM001.PC0OMFROPO == 0) /* If PO # not entered*/
      converseLib.validationFailed(110); /* PO ID or PO # required*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC0OMYR cursor, bold; /* Highlight*/
      set PC0OM001.PC0OMM1 bold; /* Highlight*/
      set PC0OM001.PC0OMM2 bold; /* Highlight*/
      set PC0OM001.FY1FCTYC bold; /* Highlight*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate status.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.PC6STAT != "NC"
   && PC0OM001.PC6STAT != "CX"
   && PC0OM001.PC6STAT != "OP")
    PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
    set PC0OM001.PC6STAT cursor, bold; /* Highlight*/
    converseLib.validationFailed(275); /* Status invalid*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Validate status change for status of 'TN'*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.YPUCD == "TN")
    if (PC0OM001.PC6STAT == "OP" /* If cancel requested*/
     || PC0OM001.PC6STAT == "CX") /* If cancel requested*/
    /* next sentence*/
    else
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      set PC0OM001.PC6STAT cursor, bold; /* Highlight*/
      converseLib.validationFailed(314); /* Status invalid*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate audit comment.*/
   /* ------------------------------------------------------------*/

  PC0OM001.YACDESC = " "; /* Comment desc*/
  PC0OW01.YACDESC = " "; /* Comment desc*/
  if (PC0OM001.YACCD in YACTBL.YACCD /* Audit comment in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    PC0OM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex]; /* Comment desc*/
    PC0OW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex]; /* Comment desc*/
  else
    PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
    set PC0OM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Audit comment invalid*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* IF status code change is for one of the following po types,*/
   /* all key field input from the screen is ignored except for*/
   /* PO Hdr information, and all items for the header will*/
   /* have their status changed.*/
   /* ------------------------------------------------------------*/

  if (PC0OM001.PC6STAT == "CX") /* If cancel requested*/
    if (VPOHDR02.YPUCD == "TN"
     || VPOHDR02.PC4ORTYP == "SS"
     || VPOHDR02.PC4ORTYP == "PS"
     || VPOHDR02.PC4ORTYP == "CR"
     || VPOHDR02.PC4ORTYP == "LP")
      PC0O154();
      return;
    end
  end

  if (PC0OM001.PC0OMFROPO == 0)
    PC0OW00.PC0OW-TEMPO1 = VPOHDR02.PC3PONBR;
    PC0OW00.PC0OW-TEMPO2 = VPOHDR02.PC3PONBR;
  else
    PC0OW00.PC0OW-TEMPO1 = PC0OM001.PC0OMFROPO;
    PC0OW00.PC0OW-TEMPO2 = PC0OM001.PC0OMTOPO;
  end

  while (PC0OW00.PC0OW-TEMPO1 <= PC0OW00.PC0OW-TEMPO2)
    VPOHDR02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0OW00.PC0OW-TEMPO1; /* PO number*/
    PC0OS02(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row not found*/
      if (PC0OM001.PC6STAT == "OP" /* If open requested*/
       && VPOHDR02.YPUCD == "TN") 

      else

        /* ------------------------------------------------------------*/
        /* Validate the RTA date.*/
        /* ------------------------------------------------------------*/
        if (PC0OM001.PC0OMRTA != " ") /* If ETS date entered*/
          set TA2REC empty; /* Initialize date record*/
          TA2REC.TA2GRGA = PC0OM001.PC0OMRTA; /* Date*/
          TA2REC.TA2GRTYP = "A"; /* Type*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
          PC0OS14(); /* Validate date*/
          if (TA2REC.TA2RTNCD != 0)
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.PC0OMRTA cursor, bold; /* Highlight*/
            converseLib.validationFailed(38); /* Invalid date*/
            exit stack;
          else
            PC0OW01.PC6RTADT = TA2REC.TA2GRGGN; /* RTA date*/
          end
        end
        /* ------------------------------------------------------------*/
        /* Validate customer.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.PC2CUXID != " ") /* Cust xref is entered*/
          PC2REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
          PC2REC.PC2CUXID = PC0OM001.PC2CUXID; /* Customer*/
          PC0OS01(); /* Validate customer*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            converseLib.validationFailed(123); /* Customer invalid*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.PC2CUXID cursor, bold; /* Highlight*/
            exit stack;
          end
        end
        /* ------------------------------------------------------------*/
        /* Validate owner group.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.XWHCD == " ") /* If warehouse entered*/
          PCWREC.XWHCD = "51";
        else
          PCWREC.XWHCD = PC0OM001.XWHCD;
        end

        if (PC0OM001.XOWCD == "00") /* OG 00 always valid*/
                                 /* valid owner group*/
        else
          if (PC0OM001.XOWCD != " ") /* If owner group entered*/
            if (PCWREC.XWHCD in XWHTBL.XWHCD) /* Warehouse in table*/
              if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* If own grp for whse*/
                PC0OW00.PC0OWCD1 = PCWREC.XWHCD; /* warehouse*/
                PC0OW00.PC0OWCD2 = PC0OM001.XOWCD; /* owner group*/
                if (PC0OW00.PC0OWKEY in XOWTBL.XOWKEY /* Own grp key in tbl*/
                 && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
                       /* valid owner group*/
                else
                  PC0OW00.XXXPRCNM = "PC0O150";
                                   /* Module identification*/
                  set PC0OM001.XOWCD cursor, bold; /* Highlight*/
                  converseLib.validationFailed(405); /* Owner group invalid*/
                  exit stack;
                end
              else /* warehouse OG flag = N*/
                PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
                set PC0OM001.XOWCD cursor, bold; /* Highlight*/
                converseLib.validationFailed(404); /* Owner group invalid*/
                exit stack;
              end
            end
          else /* OG not entered*/
            PC0OM001.XOWCD = "00"; /* default owner group to '00'*/
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate unit of measure.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.XUMCD != " ") /* If unit of measure entered*/
          if (PC0OM001.XUMCD in XUMTBL.XUMCD /* Unit of measure in table*/
           && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.XUMCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(56); /* Unit of measure invalid*/
            exit stack;
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate package.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.XPGCD != " ") /* If package entered*/
          if (PC0OM001.XPGCD in XPGTBL.XPGCD /* Package in table*/
           && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.XPGCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(55); /* Package invalid*/
            exit stack;
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate ISEG Code*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.PC2INSEG != " ") /* If ISEG Code entered*/
          if (PC0OM001.PC2CUXID > " " /* If Xref entered*/
           && PC0OM001.PC2INSEG != PC2REC.PC2INSEG)
                                   /* ISEG Codes not equal*/
            converseLib.validationFailed(289); /* ISEG codes not same*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.PC2INSEG cursor, bold; /* Highlight*/
            set PC0OM001.PC2CUXID bold; /* Highlight*/
            exit stack;
          else

            PC2REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
            PC2REC.PC2INSEG = PC0OM001.PC2INSEG; /* ISEG*/
            PC0OS27(); /* Validate ISEG*/

            if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
              converseLib.validationFailed(51); /* ISEG    invalid*/
              PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
              set PC0OM001.PC2INSEG cursor, bold; /* Highlight*/
              exit stack;
            end

          end
        end

        /* ------------------------------------------------------------*/
        /* Validate dimension.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.XDMCD != " ") /* If dimension entered*/
          if (PC0OM001.XDMCD in XDMTBL.XDMCD /* Dimension in table*/
           && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.XDMCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(53); /* Dimension invalid*/
            exit stack;
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate color.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.SY2CLRID != " ") /* If color is entered*/
          if (PC0OM001.SY1STNBR == " ") /* If style not entered*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.SY2CLRID cursor, bold; /* Highlight*/
            converseLib.validationFailed(148); /* Cannot enter without style*/
          else
            set PG2REC empty; /* Initialize record*/
            PG2REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
            PG2REC.SY1STNBR = PC0OM001.SY1STNBR; /* Style*/
            PG2REC.SY2CLRID = PC0OM001.SY2CLRID; /* Color*/
            if (PC0OM001.XDMCD == " ") /* If dimension not entered*/
              PG2REC.XDMCD = "00"; /* Dimension*/
            else
              PG2REC.XDMCD = PC0OM001.XDMCD; /* Dimension*/
            end
            XSPG202(); /* Validate style/color*/
            if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
              converseLib.validationFailed(315); /* Invalid color/dimension*/
              PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
              set PC0OM001.SY2CLRID cursor, bold; /* Highlight color*/
              exit stack;
            end
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate PO type*/
        /* ------------------------------------------------------------*/
        if (PC0OM001.PC4ORTYP == " " /* If PO type not entered*/
         && PC0OM001.PC0OMYR != " ") /* and PO ID entered*/
          converseLib.validationFailed(274); /* Type required with PO ID*/
          PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
          set PC0OM001.PC4ORTYP cursor, bold; /* Highlight*/
          exit stack;
        end

        if (PC0OM001.PC4ORTYP != " ") /* If PO type entered*/
          if (PC0OM001.PC0OMFROPO != 0 /* Valid for PO range*/
           && PC0OM001.PC0OMTOPO != 0  
           && PC0OM001.PC0OMFROPO != PC0OM001.PC0OMTOPO)

          else
            if (PC0OM001.PC0OMFROPO == 0 /* PO nbr not entered*/
             && PC0OM001.PC0OMTOPO == 0)

            else
              converseLib.validationFailed(158); /* cannot be entered with PO#*/
              PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
              set PC0OM001.PC4ORTYP cursor, bold; /* Highlight*/
              exit stack;
            end
          end
        end
        /* ------------------------------------------------------------*/
        /* Validate warehouse.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.XWHCD != " ") /* If warehouse entered*/
          if (PC0OM001.XWHCD in XWHTBL.XWHCD /* Warehouse in table*/
           && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.XWHCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(59); /* Warehouse invalid*/
            exit stack;
          end
        end

        if (PC0OM001.XWHCD == " ") /* If warehouse entered*/
          if (PC0OM001.PC2CUXID == " ") /* Cust xref not entered*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.XWHCD cursor, bold; /* Highlight*/
            set PC0OM001.PC2CUXID bold; /* Highlight*/
            converseLib.validationFailed(134); /* Whse or cust required*/
            exit stack;
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate style.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.SY1STNBR == " ") /* If style not entered*/
          PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
          set PC0OM001.SY1STNBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(52); /* Style missing*/
          exit stack;
        else
          PG2REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
          PG2REC.SY1STNBR = PC0OM001.SY1STNBR; /* Style*/
          XSPG201(); /* Validate style*/
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            converseLib.validationFailed(52); /* Invalid style*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.SY1STNBR cursor, bold; /* Highlight style*/
            exit stack;
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate division.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.YSMXDV == "  ") /* If division not entered*/
          PC0OW01.YSMSMDSC = " "; /* Blank out description*/
          converseLib.validationFailed(50); /* Invalid division*/
          PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
          set PC0OM001.YSMXDV cursor, bold; /* Highlight division*/
          exit stack;
        else
          TA1REC.TA1PGMNM = "PC0O150"; /* Module identification*/
          YSMREC.YSMSUMCD = PC0OM001.YSMXDV; /* Division*/
          XSPCS02(); /* Get division*/
          if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
            PC0OW01.YSMSMDSC = " "; /* Blank out description*/
            converseLib.validationFailed(50); /* Invalid division*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.YSMXDV cursor, bold; /* Highlight division*/
            exit stack;
          else
            PC0OW01.YSMSMDSC = YSMREC.YSMSMDSC; /* Description*/
            PC0OM001.YSMSMDSC = PC0OW01.YSMSMDSC; /* Description*/
          end
        end

        /* ------------------------------------------------------------*/
        /* Validate factory.*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.FY1FCTYC == " ") /* If factory is blank*/
          if (PC0OM001.PC0OMM1 != " ") /* If PO ID entered*/
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.FY1FCTYC cursor, bold; /* Highlight*/
            converseLib.validationFailed(32); /* Factory missing*/
            exit stack;
          end
        else
          PC0O151(); /* Validate factory*/
        end

        /* ------------------------------------------------------------*/
        /* Validate status for PO type of FT and OR*/
        /* ------------------------------------------------------------*/

        if (PC0OM001.PC6STAT == "CX" /* If cancel requested*/
         && converseVar.validationMsgNum == 0) /* and no errors*/
          if (VPOHDR02.PC4ORTYP == "FT"
           || VPOHDR02.PC4ORTYP == "OR"
           || VPOHDR02.PC4ORTYP == "S1"
           || VPOHDR02.PC4ORTYP == "S4")
            PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
            set PC0OM001.PC6STAT cursor, bold; /* Highlight*/
            converseLib.validationFailed(314); /* Status invalid*/
            exit stack;
          end
        end
      end
    end
    PC0OW00.PC0OW-TEMPO1 = PC0OW00.PC0OW-TEMPO1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data entered*/
    PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
    set PC0OM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PC0O153(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* Verify that at least one item exists.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors found*/

    PC0OW00.PC0OW-PLAN-FOUND-FL = "N";
    PC0OW00.PC0OW-FOUND-ITMFLG = "N";

    if (PC0OM001.PC0OMFROPO == 0)
      PC0OW00.PC0OW-TEMPO1 = VPOHDR02.PC3PONBR;
      PC0OW00.PC0OW-TEMPO2 = VPOHDR02.PC3PONBR;
    else
      PC0OW00.PC0OW-TEMPO1 = PC0OM001.PC0OMFROPO;
      PC0OW00.PC0OW-TEMPO2 = PC0OM001.PC0OMTOPO;
    end

    while (PC0OW00.PC0OW-TEMPO1 <= PC0OW00.PC0OW-TEMPO2
     && PC0OW00.PC0OW-FOUND-ITMFLG == "N")
      VPOHDR02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
      VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
      VPOHDR02.PC3PONBR = PC0OW00.PC0OW-TEMPO1; /* PO number*/

      PC0OS02(); /* Validate the PO number*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row not found*/

        PC0OW00.PC0OWDC1 = "N"; /* End of cursor*/
        PC0OW00.PC0OW-PLAN-FOUND-FL = "N";
        PC0OW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
        PC0OW01.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/

        PC0OS03(); /* Open cursor for VPOITM05*/

        PC0OS04(); /* Get first VPOITM05 row*/

        if (PC0OW00.PC0OWDC1 == "N")
          PC0OW00.PC0OW-FOUND-ITMFLG = "Y";
        end
        if (PC0OW01.PC6PLAN != 0 /* If plan not selected*/
         && PC0OW01.PC6RTADT != 0)
          while (PC0OW00.PC0OWDC1 == "N"
           && PC0OW00.PC0OW-PLAN-FOUND-FL == "N")
            if (PC0OW01.PC6PLAN == VPOITM05.PC6PLAN   
             && VPOITM05.PC6RTADT == PC0OW01.PC6RTADT /* RTA date*/
             && VPOITM05.PC6STAT != "CX")            
              PC0OW00.PC0OW-PLAN-FOUND-FL = "Y";
            else
              PC0OS04(); /* Get next VPOITM05 row*/
            end
          end

        else

          if (PC0OW01.PC6PLAN != 0) /* If plan not selected*/
            while (PC0OW00.PC0OWDC1 == "N"
             && PC0OW00.PC0OW-PLAN-FOUND-FL == "N")
              if (PC0OW01.PC6PLAN == VPOITM05.PC6PLAN
               && VPOITM05.PC6STAT != "CX")
                PC0OW00.PC0OW-PLAN-FOUND-FL = "Y";
              else
                PC0OS04(); /* Get next VPOITM05 row*/
              end
            end
          end
        end

        PC0OS05(); /* Close cursor for VPOITM05*/
      end
      PC0OW00.PC0OW-TEMPO1 = PC0OW00.PC0OW-TEMPO1 + 1;
    end

    if (PC0OW00.PC0OW-FOUND-ITMFLG == "N") /* If no item found*/
      PC0OW00.XXXPRCNM = "PC0O150"; /* Module identification*/
      converseLib.validationFailed(276); /* No items found*/
      if (PC0OW01.PC6PLAN == 0)
        PC0OM001.PC0OMRTA = " "; /* RTA date*/
        PC0OM001.YMTCD = " "; /* Mode*/
      end
    end

  end
   /* ******* edits for Spain****************************************/
  if (PC0OM002.PC2CUXID != " "
   && VPOHDR02.PC4ORTYP != "SS"
   && VPOHDR02.PC4ORTYP != "SX") /* exclude SS & SX from Spain exception.*/
    PC0OS74(); /* get the location code*/
    PC0OS75(); /* open cursor for item*/
    PC0OS76(); /* fetch  row from item*/
    while (PC0OW00.PC0OWDC1 == "N") /* While more items*/
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = "03"; /* GPC code*/
      PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
      PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
      PG2REC.XDMCD = "00"; /* Dimension*/
      XSPG202(); /* select row from style/color*/
      if (PG2REC.XFCCD1 != "68"
       && PG2REC.XFCCD2 != "68"
       && PG2REC.XFCCD3 != "68"
       && PG2REC.XFCCD4 != "68"
       && PG2REC.XFCCD5 != "68"
       && PG2REC.XFCCD6 != "68")
        if (TSCREC.XCTCD == "SPAI"
         || TSCREC.XCTCD == "CNRY"
         || TSCREC.TSCLOCCD == "MO2"
         || TSCREC.TSCLOCCD == "MO3"
         || TSCREC.TSCLOCCD == "MO4") /* edits for spain*/
          converseLib.validationFailed(574);
          PC0OW00.PC0OWDC1 = "Y";
        else
          PC0OS76(); /* fetch next row from item*/
        end
      else
        PC0OS76(); /* fetch next row from item*/
      end
    end
    PC0OS77(); /* close item cursor*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    PC0OW00.PC0OWCFG = "N"; /* Confirm flag = 'no'*/
    exit stack; /* Exit to display map*/
  end

end // end PC0O150

// Validate factory code
Function PC0O151()
   /* ------------------------------------------------------------*/
   /* Load key fields for table access*/
   /* ------------------------------------------------------------*/

  VFCTY003.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VFCTY003.FY1FCTYC = PC0OM001.FY1FCTYC; /* Factory code*/

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        converseLib.validationFailed(32); /* Invalid factory*/
        set PC0OM001.FY1FCTYC cursor, bold; /* Highlight*/
        PC0OM001.XXXPRCNM = "PC0O154"; /* Module identification*/
        return; /* Return to previous process*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0O151"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VFCTY003.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKA2 = VFCTY003.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OW00.XXXPRCNM = "PC0O151";
  exit stack;

end // end PC0O151

// Validate PO ID      - VPOHDR02
Function PC0O152()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  VPOHDR02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3POIDT = PC0OW01.PC3POIDT; /* PO ID*/
  VPOHDR02.FY1FCTYC = PC0OM001.FY1FCTYC; /* Factory*/
  VPOHDR02.PC4ORTYP = PC0OM001.PC4ORTYP; /* PO type*/

   /* ------------------------------------------------------------*/
   /* Select unique PO ID row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("SA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate PO ID invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(111); /* PO ID invalid*/
      PC0OW00.XXXPRCNM = "PC0O152"; /* Module identification*/
      set PC0OM001.PC0OMYR cursor, bold; /* highlight*/
      set PC0OM001.PC0OMM1 bold; /* highlight*/
      set PC0OM001.PC0OMM2 bold; /* highlight*/
      set PC0OM001.FY1FCTYC bold; /* highlight*/
      set PC0OM001.PC4ORTYP bold; /* highlight*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If duplicate row found, indicate po id invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == -811) /* Row not found*/
      converseLib.validationFailed(112); /* Multiple PO's*/
      PC0OW00.XXXPRCNM = "PC0O152"; /* Module identification*/
      set PC0OM001.PC0OMYR cursor, bold; /* highlight*/
      set PC0OM001.PC0OMM1 bold; /* highlight*/
      set PC0OM001.PC0OMM2 bold; /* highlight*/
      set PC0OM001.FY1FCTYC bold; /* highlight*/
      set PC0OM001.PC4ORTYP bold; /* highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0O152"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO ID DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOHDR02.PC3POIDT; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOHDR02.FY1FCTYC; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOHDR02.PC4ORTYP; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0O152

// Save map data before converse
Function PC0O153()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0OW01.PC0OWYR = PC0OM001.PC0OMYR; /* PO ID year*/
  PC0OW01.PC0OWM1 = PC0OM001.PC0OMM1; /* PO ID buy date*/
  PC0OW01.PC0OWM2 = PC0OM001.PC0OMM2; /* PO ID delivery date*/
  PC0OW01.FY1FCTYC = PC0OM001.FY1FCTYC; /* Factory*/
  PC0OW01.PC4ORTYP = PC0OM001.PC4ORTYP; /* PO type*/

   /* MOVE UP0OM001.po-reg-cd TO UP0OW01.po-reg-cd;      /* PO region*/
  if (PC0OM001.XGPCD == "03") /* apparel*/
    PC0OW01.PO-REG-CD = "02"; /* PO region*/
  else
    PC0OW01.PO-REG-CD = "01"; /* PO region*/
  end

  PC0OW01.PC0OWPON = PC0OM001.PC0OMFROPO; /* From PO number*/
  PC0OW00.PC0OWTPO = PC0OM001.PC0OMTOPO; /* To PO number*/
  PC0OW01.YSMXDV = PC0OM001.YSMXDV; /* Division*/
  PC0OW01.SY1STNBR = PC0OM001.SY1STNBR; /* Style number*/
  PC0OW01.SY2CLRID = PC0OM001.SY2CLRID; /* Color*/
  PC0OW01.XDMCD = PC0OM001.XDMCD; /* Dimension*/
  PC0OW01.PC2INSEG = PC0OM001.PC2INSEG; /* Spec difference*/
  PC0OW01.XPGCD = PC0OM001.XPGCD; /* Package*/
  PC0OW01.XUMCD = PC0OM001.XUMCD; /* Unit of measure*/
  PC0OW01.XOWCD = PC0OM001.XOWCD; /* Owner group*/
  PC0OW01.XWHCD = PC0OM001.XWHCD; /* Warehouse*/
  PC0OW01.PC2CUXID = PC0OM001.PC2CUXID; /* Cust xref*/
  PC0OW01.OP1CUOID = PC0OM001.OP1CUOID; /* Cust S.O.#*/
  PC0OW01.OP1NORID = PC0OM001.OP1NORID; /* Nike S.O.#*/
  PC0OW01.PC6PLAN = PC0OM001.PC6PLAN; /* Plan*/
  PC0OW01.PC0OWRTA = PC0OM001.PC0OMRTA; /* RTA*/
  PC0OW01.PC6STAT = PC0OM001.PC6STAT; /* Status*/
  PC0OW01.YACCD = PC0OM001.YACCD; /* Audit comment*/
  if (PC0OW01.YACCD in YACTBL.YACCD)
    PC0OW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
  end /* Description*/

end // end PC0O153

// Clear key fields
Function PC0O154()
  PC0OM001.XWHCD = " "; /* warehouse*/
  PC0OW01.XWHCD = " "; /* warehouse*/
  PC0OW00.PC0OWCD1 = " "; /* warehouse*/
  PC0OM001.XOWCD = " "; /* owner group*/
  PC0OW01.XOWCD = " "; /* owner group*/
  PC0OM001.YMTCD = " "; /* mode*/
  PC0OW01.YMTCD = " "; /* mode*/
  PC0OM001.XUMCD = " "; /* unit of measure*/
  PC0OW01.XUMCD = " "; /* unit of measure*/
  PC0OM001.XPGCD = " "; /* Package type*/
  PC0OW01.XPGCD = " "; /* Package type*/
  PC0OM001.PC2INSEG = " "; /* ISEG Code*/
  PC0OW01.PC2INSEG = " "; /* ISEG Code*/
  PC0OM001.PC2CUXID = " "; /* Xref*/
  PC0OW01.PC2CUXID = " "; /* Xref*/
  PC0OM001.SY1STNBR = " "; /* style*/
  PC0OW01.SY1STNBR = " "; /* style*/
  PC0OM001.SY2CLRID = " "; /* color*/
  PC0OW01.SY2CLRID = " "; /* color*/
  PC0OM001.XDMCD = " "; /* dimension*/
  PC0OW01.XDMCD = " "; /* dimension*/
  PC0OM001.YSMXDV = " "; /* division*/
  PC0OM001.YSMSMDSC = " "; /* division description*/
  PC0OW01.YSMXDV = " "; /* division*/
  PC0OW01.YSMSMDSC = " "; /* division description*/
  PCWREC.YSMXDV = " "; /* division*/
  PC0OM001.PC0OMRTA = " "; /* rta*/
  PC0OW01.PC0OWRTA = " "; /* rta*/
  PC0OM001.PC6PLAN = 0;
  PC0OW01.PC6PLAN = PC0OM001.PC6PLAN;
  PC0OM001.OP1CUOID = 0;
  PC0OW01.OP1CUOID = PC0OM001.OP1CUOID;
  PC0OM001.OP1NORID = 0;
  PC0OW01.OP1NORID = PC0OM001.OP1CUOID;
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0OW01.PC0OWYR = PC0OM001.PC0OMYR; /* PO ID year*/
  PC0OW01.PC0OWM1 = PC0OM001.PC0OMM1; /* PO ID buy date*/
  PC0OW01.PC0OWM2 = PC0OM001.PC0OMM2; /* PO ID delivery date*/
  PC0OW01.FY1FCTYC = PC0OM001.FY1FCTYC; /* Factory*/
  PC0OW01.PC4ORTYP = PC0OM001.PC4ORTYP; /* PO type*/
  PC0OW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  PC0OW01.PC0OWPON = VPOHDR02.PC3PONBR; /* PO number*/
  PC0OW01.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  PC0OM001.PC0OMFROPO = VPOHDR02.PC3PONBR; /* From PO number*/
  PC0OM001.PC0OMTOPO = VPOHDR02.PC3PONBR; /* To PO number*/
  PC0OW01.PC6STAT = PC0OM001.PC6STAT; /* Status*/
  PC0OW01.YACCD = PC0OM001.YACCD; /* Audit comment*/
  if (PC0OW01.YACCD in YACTBL.YACCD)
    PC0OW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
  end /* Description*/

end // end PC0O154

// Process valid input request
Function PC0O160()
   /* ------------------------------------------------------------*/
   /* Display confirmation message if not yet shown.*/
   /* ------------------------------------------------------------*/
  /* IF PC0OW00.PC0OWCFG EQ 'N';      /* If confirm flag = no*/
  /* MOVE 'PC0O160' TO PC0OW00.XXXPRCNM;/* Module identification*/
  /* MOVE 84 TO EZEMNO;             /* Confirmation message*/
  /* MOVE 'Y' TO PC0OW00.PC0OWCFG;  /* Confirm flag = yes*/
  /* EZEFLO;                        /* Display message*/
  /* END;*/

  XX0XS01(); /* Get date and time*/
   /* ------------------------------------------------------------*/
   /* Fetch and update items.*/
   /* ------------------------------------------------------------*/
  if (PC0OM001.PC0OMFROPO == 0)
    PC0OW00.PC0OW-TEMPO1 = VPOHDR02.PC3PONBR; /* From PO*/
    PC0OW00.PC0OW-TEMPO2 = VPOHDR02.PC3PONBR; /* TO PO*/
  else
    PC0OW00.PC0OW-TEMPO1 = PC0OM001.PC0OMFROPO;
    PC0OW00.PC0OW-TEMPO2 = PC0OM001.PC0OMTOPO;
  end

  PC0OW00.PC0ONSC = "N"; /* Flag for SAP'PO*/
  PC0OW00.PC0OW-UPDATE-ITMFLG = "N"; /* PO range update flg= no*/
  PC0OW00.PC0OWITM = "N";
  while (PC0OW00.PC0OW-TEMPO1 <= PC0OW00.PC0OW-TEMPO2)
    VPOHDR02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0OW00.PC0OW-TEMPO1; /* PO number*/
    PC0OW01.PC6PLAN = PC0OM001.PC6PLAN;
    PC0OW00.PC0OWDC1 = "N"; /* Items end of cursor = no*/
    PC0OS02(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row not found*/

      if (PC0OM001.PC6STAT == "OP") /* If open requested*/
        if (VPOHDR02.YPUCD == "TN")
          PC0O164();
        end
      end

      PC0OS03(); /* Open cursor for VPOITM05*/
      PC0OS04(); /* Get first VPOITM05 row*/

      if (PC0OW01.PC6PLAN == 0)
        while (PC0OW00.PC0OWDC1 == "N") /* While more items*/
          if (VPOITM05.PC-SAP-PO-NBR != " "
           && COMMAREA.CACLVL[10] != "Y")
            PC0OW00.PC0ONSC = "Y";
          else
            if (PC0OW00.PC0OWCFG == "N") /* If confirm flag = no*/
              PC0OW00.XXXPRCNM = "PC0O160"; /* Module identification*/
              converseLib.validationFailed(84); /* Confirmation message*/
              PC0OW00.PC0OWCFG = "Y"; /* Confirm flag = yes*/
              exit stack; /* Display message*/
            end
            PC0OW01.PC0OWRTA = " "; /* RTA date*/
            PC0OW01.PC6RTADT = 0; /* RTA date w.s.*/
            PC0OW01.YMTCD = " "; /* Mode*/
            PC0O161(); /* Update PO*/
          end
          PC0OS04(); /* Fetch next item*/
        end
        /* MOVE 'Y' TO PC0OW00.PC0OW-UPDATE-ITMFLG;*/
      else
        while (PC0OW00.PC0OWDC1 == "N") /* While more items*/
          if (PC0OW01.PC6PLAN == VPOITM05.PC6PLAN
           && VPOITM05.PC6STAT != "CX")
            if (VPOITM05.PC-SAP-PO-NBR != " ")
              PC0OW00.PC0ONSC = "Y";
            else
              if (PC0OW00.PC0OWCFG == "N") /* If confirm flag = no*/
                PC0OW00.XXXPRCNM = "PC0O160";
                converseLib.validationFailed(84); /* Confirmation message*/
                PC0OW00.PC0OWCFG = "Y"; /* Confirm flag = yes*/
                exit stack; /* Display message*/
              end
              PC0OW01.PC6RTADT = VPOITM05.PC6RTADT;
                                   /* RTA date display*/
              set TA2REC empty; /* clear date rec*/
              TA2REC.TA2GRGGN = VPOITM05.PC6RTADT; /* Date change*/
              TA2REC.TA2DYAOD = 0; /* sum of days diff*/
              XSPCS60();
              PC0OW01.PC0OWRTA = TA2REC.TA2GRGA; /* RTA date display*/
              PC0OW01.YMTCD = VPOITM05.YMTCD; /* mode*/
              PC0O161(); /* Update PO*/
            end
          end
          PC0OS04(); /* Fetch next item*/
        end
      end
      PC0OS05(); /* Close item cursor*/

      if (PC0OW00.PC0OWITM == "Y") /* Item is updated*/
        PC0OW00.PC0OW-UPDATE-ITMFLG = "Y";
      end

      /* ------------------------------------------------------------*/
      /* If items updated to 'OP' from 'TN' status,*/
      /* update pc-po-ord-by with user id on po hdr.*/
      /* ------------------------------------------------------------*/

      if (PC0OW00.PC0OWITM == "Y") /* Item is updated*/
        /* IF PC0OW00.PC0OW-UPDATE-ITMFLG = 'Y';/* Item is updated*/
        if (VPOHDR02.YPUCD == "TN"
         && PC0OW01.PC6STAT == "OP")
          PC8REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
          PC8REC.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO region*/
          PC8REC.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
          PC8REC.YACCD = PC0OW01.YACCD; /* Audit comment*/
          PC8REC.YPUCD = PC0OW01.PC6STAT;
          if (PC0OW00.PC0ONSC == "Y")
            PCWREC.XXXMSGNO = 581; /* No SAP items are updated*/
          else
            PC0O162(); /* Update PO header for "TN" status*/
            PCWREC.XXXMSGNO = 1; /* Update successful*/
          end
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit all changes*/
          PC0OW01.PC6STAT = " "; /* Init status*/
          PC0OW01.YACCD = " "; /* Init audit comment*/
          PC0OW01.YACDESC = " "; /* Init audit comment desc*/
          PC0OW00.XXXPRCNM = "PC0O160"; /* Module identification*/
          PC0OW00.PC0OWITM = "N";
          /* MOVE 'N' TO PC0OW00.PC0OW-UPDATE-ITMFLG;*/
        else
   /* ------------------------------------------------------------*/
    /* Update header status if items updated.*/
   /* ------------------------------------------------------------*/
          set PC8REC empty;
          PC8REC.XGPCD = PC0OW01.XGPCD; /* GPC code*/
          PC8REC.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO region*/
          PC8REC.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
          PC8REC.YACCD = PC0OW01.YACCD; /* Audit comment*/
          if (PC0OW00.PC0ONSC == "Y")
            PCWREC.XXXMSGNO = 581; /* No SAP items are updated*/
          else
            XPPC010(); /* Update PO header*/
            PCWREC.XXXMSGNO = 1; /* Update successful*/
          end
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* Commit all changes*/
          PC0OW01.PC6STAT = " "; /* Init status*/
          PC0OW01.YACCD = " "; /* Init audit comment*/
          PC0OW01.YACDESC = " "; /* Init audit comment desc*/
          PC0OW00.XXXPRCNM = "PC0O160"; /* Module identification*/
          PC0OW00.PC0OWITM = "N";
          /* MOVE 'N' TO PC0OW00.PC0OW-UPDATE-ITMFLG;*/
        end
      end
    end
    PC0OW00.PC0OW-TEMPO1 = PC0OW00.PC0OW-TEMPO1 + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no items updated, set error message and exit.*/
   /* ------------------------------------------------------------*/

  if (PC0OW00.PC0OW-UPDATE-ITMFLG == "N") /* No items updated*/
    PC0OW00.XXXPRCNM = "PC0O160"; /* Module identification*/
    if (PC0OW00.PC0ONSC == "Y")
      PCWREC.XXXMSGNO = 576; /* No maintenance for SAP'PO*/
    else
      PCWREC.XXXMSGNO = 316; /* No data for selection requested*/
    end
    return;

  end

end // end PC0O160

// Update PO items
Function PC0O161()
   /* ------------------------------------------------------------*/
   /* Determine the status update request and update items*/
   /* accordingly.*/
   /* ------------------------------------------------------------*/

  if (PC0OW01.PC6STAT == "NC")

    PC0OS41(); /* ===> "NC" Status Update Routine*/

  else

    if (PC0OW01.PC6STAT == "FC")

      PC0OS42(); /* ===> "FC" Status Update Routine*/

    else

      if (PC0OW01.PC6STAT == "CX"
       || PC0OW01.PC6STAT == "TN")

        PC0OS43(); /* ===> "CX" Status Update Routine*/

      else

        if (PC0OW01.PC6STAT == "OP"
         || PC0OW01.PC6STAT == "TN")

          PC0OS44(); /* ===> "OP" Status Update Routine*/

        end /* ===> request to "OP" item check*/
      end /* ===> request to "CX" item check*/
    end /* ===> request to "FC" item check*/
  end /* ===> request to "NC" item check*/
end // end PC0O161

// Update hdr to "OP" from "TN"
Function PC0O162()
   /* ------------------------------------------------------------*/
   /* This process group will be called to update the p.o. header*/
   /* to an "OP" status from a "TN" status. A header audit will*/
   /* be written.*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ===>initialize D.B. Call record*/

  VPOHDR02.XGPCD = PC8REC.XGPCD;
  VPOHDR02.PO-REG-CD = PC8REC.PO-REG-CD; /* ==>P.O. region*/
  VPOHDR02.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. Number*/

  XSPCS14(); /* ===> Get P.O. Header row*/

   /* ------------------------------------------------------------*/
   /* 1. Update the P.O. Header row.*/
   /* 2. Insert a P.O. Header Audit row.*/
   /* ------------------------------------------------------------*/

  set VPOAHD02 empty; /* ===> intialize Header Audit record*/
  VPOAHD02.PCIBFRA = VPOHDR02.YPUCD; /* ===> Status before*/
  VPOAHD02.PCIAFTA = PC8REC.YPUCD; /* ===> Status after*/
  VPOAHD02.XXXPGUID = COMMAREA.CAUSERID; /* ===> User id*/

  VPOHDR02.YPUCD = PC8REC.YPUCD; /* ===> Load D.B. Call record*/
  VPOHDR02.PC3ORDBY = COMMAREA.CAUSERID; /* ===> User id*/
  VPOHDR02.PC3STADT = XX0XW01.XX0XWDAT; /* ===> update status dt*/
  VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ===> update change dt*/
  VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> update change time*/

  XSPCS15(); /* ===> Update P.O. Header row*/

  XSPCS16(); /* ===> insert P.O. Header audit row*/

   /* **                                                        ***/
   /* ********************** End of PC0O162 ***********************/
end // end PC0O162

// Clear key fields
Function PC0O164()
  PC0OM001.XWHCD = " "; /* warehouse*/
  PC0OW01.XWHCD = " "; /* warehouse*/
  PC0OW00.PC0OWCD1 = " "; /* warehouse*/
  PC0OM001.XOWCD = " "; /* owner group*/
  PC0OW01.XOWCD = " "; /* owner group*/
  PC0OM001.YMTCD = " "; /* mode*/
  PC0OW01.YMTCD = " "; /* mode*/
  PC0OM001.XUMCD = " "; /* unit of measure*/
  PC0OW01.XUMCD = " "; /* unit of measure*/
  PC0OM001.XPGCD = " "; /* Package type*/
  PC0OW01.XPGCD = " "; /* Package type*/
  PC0OM001.PC2INSEG = " "; /* ISEG Code*/
  PC0OW01.PC2INSEG = " "; /* ISEG Code*/
  PC0OM001.PC2CUXID = " "; /* Xref*/
  PC0OW01.PC2CUXID = " "; /* Xref*/
  PC0OM001.SY1STNBR = " "; /* style*/
  PC0OW01.SY1STNBR = " "; /* style*/
  PC0OM001.SY2CLRID = " "; /* color*/
  PC0OW01.SY2CLRID = " "; /* color*/
  PC0OM001.XDMCD = " "; /* dimension*/
  PC0OW01.XDMCD = " "; /* dimension*/
  PC0OM001.YSMXDV = " "; /* division*/
  PC0OM001.YSMSMDSC = " "; /* division description*/
  PC0OW01.YSMXDV = " "; /* division*/
  PC0OW01.YSMSMDSC = " "; /* division description*/
  PCWREC.YSMXDV = " "; /* division*/
  PC0OM001.PC0OMRTA = " "; /* rta*/
  PC0OW01.PC0OWRTA = " "; /* rta*/
  PC0OM001.PC6PLAN = 0;
  PC0OW01.PC6PLAN = PC0OM001.PC6PLAN;
  PC0OM001.OP1CUOID = 0;
  PC0OW01.OP1CUOID = PC0OM001.OP1CUOID;
  PC0OM001.OP1NORID = 0;
  PC0OW01.OP1NORID = PC0OM001.OP1CUOID;
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0OW01.PC0OWYR = PC0OM001.PC0OMYR; /* PO ID year*/
  PC0OW01.PC0OWM1 = PC0OM001.PC0OMM1; /* PO ID buy date*/
  PC0OW01.PC0OWM2 = PC0OM001.PC0OMM2; /* PO ID delivery date*/
  PC0OW01.FY1FCTYC = PC0OM001.FY1FCTYC; /* Factory*/
  PC0OW01.PC4ORTYP = PC0OM001.PC4ORTYP; /* PO type*/
  PC0OW01.PO-REG-CD = VPOHDR02.PO-REG-CD; /* PO REGION CODE*/
  PC0OW01.PC0OWPON = VPOHDR02.PC3PONBR; /* PO number*/
  PC0OW01.PC3PONBR = VPOHDR02.PC3PONBR; /* PO number*/
  PC0OM001.PC0OMFROPO = VPOHDR02.PC3PONBR; /* From PO number*/
  PC0OW01.PC6STAT = PC0OM001.PC6STAT; /* Status*/
  PC0OW01.YACCD = PC0OM001.YACCD; /* Audit comment*/
  if (PC0OW01.YACCD in YACTBL.YACCD)
    PC0OW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
  end /* Description*/

end // end PC0O164

// APPAREL       selection
Function PC0O200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0O220(); /* Format and display the map*/

  PC0O230(); /* Check attention identifier*/

  PC0O240(); /* Reset fields to normal intensity*/

  PC0O250(); /* Verify the entered data*/

  PC0O260(); /* Process valid input request*/

end // end PC0O200

// Converse selection map 002
Function PC0O220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not a PA key pressed*/
    PC0O221(); /* Format selection data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0OM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0OM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0OM002.XXXPRCNM = PC0OW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0OM002 alarm; /* Indicate sound alarm*/
  end

  converse PC0OM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0OW00.XXXPRCNM = "PC0O"; /* Module identification*/
  COMMAREA.CATOAP = PC0OM002.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0OM002.CAITEM; /* Application data*/

  PC0O222(); /* Converse popup windows*/

end // end PC0O220

// Format selection data of 001
Function PC0O221()
  set PC0OM002 initial; /* Initialize map*/

   /* ------------------------------------------------------------*/
   /* Format the item data for map 002 display.*/
   /* ------------------------------------------------------------*/
  PC0OM002.YSMXDV = PC0OW01.YSMXDV; /* Division*/
  PC0OM002.YSMSMDSC = PC0OW01.YSMSMDSC; /* Division descr*/
   /* MOVE PC0OW01.po-reg-cd TO PC0OM002.po-reg-cd    /* PO region*/
  PC0OM002.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
  PC0OM002.PC0OMPID = PC0OW00.PC0OWPID; /* Reformatted PO ID*/
  PC0OM002.SY1STNBR = PC0OW01.SY1STNBR; /* Style number*/
  PC0OM002.SY2CLRID = PC0OW01.SY2CLRID; /* Color*/
  PC0OM002.XOWCD = PC0OW01.XOWCD; /* Owner group*/
  PC0OM002.PC6PLAN = PC0OW01.PC6PLAN; /* Plan*/
  PC0OM002.YACCD = PC0OW01.YACCD; /* Audit comment code*/
  PC0OM002.YACDESC = PC0OW01.YACDESC; /* Audit comment descr*/
  PC0OM002.PC0OMETS = PC0OW01.PC0OWETS; /* ETS date*/
  PC0OM002.PC6STAT = PC0OW01.PC6STAT; /* Status*/
  PC0OM002.PC0OMETO = PC0OW01.PC0OWETO; /* ETAL override date*/
  PC0OM002.YMTCD = PC0OW01.YMTCD; /* Mode of transportation*/
  PC0OM002.PC2CUXID = PC0OW01.PC2CUXID; /* Cust xref*/
  PC0OM002.OP1CUOID = PC0OW01.OP1CUOID; /* Cust s.o.#*/
  PC0OM002.OP1NORID = PC0OW01.OP1NORID; /* Nike s.o.#*/
  PC0OM002.PG1SC4CD = PC0OW01.PG1SC4CD; /* scheduler*/
  PC0OM002.XXXUSER = PC0OW01.XXXUSER; /* scheduler's userid*/

   /* ------------------------------------------------------------*/
   /* Format the confirmation message - number of colors & plans*/
   /* ------------------------------------------------------------*/
  if (PC0OW00.PC0OWCFG == "Y") /* If confirm flag = 'y'*/
    PC0OM002.PC0OMCT1 = PC0OW01.PC0OWCT1; /* Color count*/
    PC0OM002.PC0OMCT2 = PC0OW01.PC0OWCT2; /* Plan count*/
    set PC0OM002.PC0OMCT1 skip; /* Display number of colors*/
    set PC0OM002.PC0OMLT1 skip; /* Display number of colors literal*/
    set PC0OM002.PC0OMCT2 skip; /* Display number of plans*/
    set PC0OM002.PC0OMLT2 skip; /* Display number of plans literal*/
  else
    set PC0OM002.PC0OMCT1 skip, invisible; /* Darken number of colors*/
    set PC0OM002.PC0OMLT1 skip, invisible; /* Darken number of colors lit*/
    set PC0OM002.PC0OMCT2 skip, invisible; /* Darken number of plans*/
    set PC0OM002.PC0OMLT2 skip, invisible; /* Darken number of plans lit*/
  end

end // end PC0O221

// Converse pop-up windows
Function PC0O222()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.YACCD == "?"   /* IF warehouse list requested*/
   || PC0OM002.PC6STAT == "?" /* or status list requested*/
   || PC0OM002.YMTCD == "?"   /* or audit comment list requested*/
   || PC0OM002.XOWCD == "?")  /* or owner group list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0OW00.XXXPRCNM = "PC0O222"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of audit comments.*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.YACCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " AUDIT COMMENT"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYAC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM002.YACCD = PC0OW01.YACCD; /* Restore prior code*/
    else
      PC0OM002.YACCD = YACTBL.YACCD[XX0XWPIX]; /* Selected code*/
      PC0OM002.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* Selected desc*/
    end

    set PC0OM002.YACCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of statuses.*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.PC6STAT == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " STATUS"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM002.PC6STAT = PC0OW01.PC6STAT; /* Restore prior code*/
    else
      PC0OM002.PC6STAT = YPUTBL.YPUCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM002.PC6STAT cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of modes of transportation*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.YMTCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " MODE OF TRANSPORTATION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYMT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM002.YMTCD = PC0OW01.YMTCD; /* Restore prior code*/
    else
      PC0OM002.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM002.YMTCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of owner group.*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.XOWCD == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XWHCD = 51; /* default warehouse to 51*/
    if (PC0OM002.PC3PONBR != 0) /* get po Header rec for po type*/
      VPOHDR02.XGPCD = "03";
      VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD;
      VPOHDR02.PC3PONBR = PC0OM002.PC3PONBR;
      PC0OS02();
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VPOHDR02.PC4ORTYP == "PS" /* set up OG warehouse*/
         || VPOHDR02.PC4ORTYP == "S6") /* for promo po types*/
          XX0XW02.XWHCD = 09;
        end
      end
    end
    XX0XW02.XX0XWHDR = " OWNER GROUP"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0OM002.XOWCD = PC0OW01.XOWCD; /* Restore prior code*/
    else
      PC0OM002.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0OM002.XOWCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0OW00.XXXPRCNM = "PC0O222"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0O222

// Check attention identifiers
Function PC0O230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC0OM002.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0OW00.XXXPRCNM = "PC0O230"; /* Module identification*/
      set PC0OM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0OM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC0OW00.XXXPRCNM = "PC0O230"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0O230

// Reset highlighted fields
Function PC0O240()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0OM002.YSMXDV initialAttributes; /* Division*/
   /* SET PC0OM002.po-reg-cd DEFINED;   /* PO region*/
  set PC0OM002.PC3PONBR initialAttributes; /* PO number*/
  set PC0OM002.SY1STNBR initialAttributes; /* Style*/
  set PC0OM002.SY2CLRID initialAttributes; /* Color*/
  set PC0OM002.PC6PLAN initialAttributes; /* Plan*/
  set PC0OM002.XOWCD initialAttributes; /* Owner group*/
  set PC0OM002.YACCD initialAttributes; /* Audit comment*/
  set PC0OM002.PC0OMETS initialAttributes; /* ETS date*/
  set PC0OM002.PC6STAT initialAttributes; /* Status*/
  set PC0OM002.PC0OMETO initialAttributes; /* ETAL override*/
  set PC0OM002.YMTCD initialAttributes; /* Mode of transportation*/
  set PC0OM002.PC2CUXID initialAttributes; /* Customer*/
  set PC0OM002.OP1CUOID initialAttributes; /* s.o.*/
  set PC0OM002.OP1NORID initialAttributes; /* s.o.*/
  set PC0OM002.PG1SC4CD initialAttributes; /* Scheduler*/
  set PC0OM002.PC0OMCT1 skip, invisible; /* Number of colors*/
  set PC0OM002.PC0OMLT1 skip, invisible; /* Colors literal*/
  set PC0OM002.PC0OMCT2 skip, invisible; /* Number of plans*/
  set PC0OM002.PC0OMLT2 skip, invisible; /* Plans literal*/
  set PC0OM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0OM002.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0O240

// Verify the entered data
Function PC0O250()
   /* ------------------------------------------------------------*/

   /* Reset confirmation flag if any fields have changed.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.YSMXDV != PC0OW01.YSMXDV     /* Division*/
   || PC0OM002.PC3PONBR != PC0OW01.PC3PONBR /* PO number*/
   || PC0OM002.SY1STNBR != PC0OW01.SY1STNBR /* Style number*/
   || PC0OM002.SY2CLRID != PC0OW01.SY2CLRID /* Color*/
   || PC0OM002.XOWCD != PC0OW01.XOWCD       /* Owner group*/
   || PC0OM002.PC6PLAN != PC0OW01.PC6PLAN   /* Plan*/
   || PC0OM002.YACCD != PC0OW01.YACCD       /* Audit comment*/
   || PC0OM002.PC0OMETS != PC0OW01.PC0OWETS /* ETS date*/
   || PC0OM002.PC6STAT != PC0OW01.PC6STAT   /* Status*/
   || PC0OM002.PC0OMETO != PC0OW01.PC0OWETO /* ETAL override*/
   || PC0OM002.YMTCD != PC0OW01.YMTCD       /* Transportation mode*/
   || PC0OM002.PC2CUXID != PC0OW01.PC2CUXID /* Cust xref*/
   || PC0OM002.OP1CUOID != PC0OW01.OP1CUOID /* Cust SO#*/
   || PC0OM002.OP1NORID != PC0OW01.OP1NORID /* Nike SO#*/
   || PC0OM002.PG1SC4CD != PC0OW01.PG1SC4CD) /* Scheduler*/
    PC0OW01.PC0OWETS = " "; /* ETS date*/
    PC0OW01.PC6STAT = " "; /* Status*/
    PC0OW01.PC0OWETO = " "; /* ETAL override*/
    PC0OW01.PC0OWOET = " "; /* Original ETS*/
    PC0OW01.YMTCD = " "; /* Transportation mode*/
    PC0OW01.PC2CUXID = " "; /* Customer*/
    PC0OW01.OP1CUOID = 0; /* Cust S.O.#*/
    PC0OW01.OP1NORID = 0; /* Nike S.O.#*/
    PC0OW01.PG1SC4CD = " "; /* Scheduler*/
    PC0OW00.PC0OWCFG = "N"; /* Confirm flag = no*/
  else
    if (PC0OW00.PC0OWCFG == "Y" /* If confirm flag = yes*/
     || PC0OW00.PC0OWCFG == "W") /* or confirm = warning*/
      return; /* Return*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify that fields to change have been entered.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PC0OMETS == " " /* If ETS date not entered*/
   && PC0OM002.PC6STAT == " "  /* and status not enetered*/
   && PC0OM002.PC0OMETO == " " /* and OETAL date not entered*/
   && PC0OM002.YMTCD == " "    /* and trans mode not entered*/
   && PC0OM002.PC2CUXID == " " /* and customer not entered*/
   && PC0OM002.OP1CUOID == 0   /* and customer SO#*/
   && PC0OM002.OP1NORID == 0   /* and NIKE SO#*/
   && PC0OM002.PG1SC4CD == " ") /* and scheduler not entered*/
    converseLib.validationFailed(280); /* One of these must be entered*/
    set PC0OM002.YACCD cursor; /* Highlight*/
    PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
  end

   /* ------------------------------------------------------------*/
   /* Validate scheduler*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PG1SC4CD != " ") /* ; scheduler code is present*/
    if (PC0OM002.PC6STAT != " ")
      converseLib.validationFailed(278);
      PC0OW00.XXXPRCNM = "PC0O250";
      set PC0OM002.PC6STAT cursor, bold;
    else
      if (PC0OM002.PC0OMETO != " ")
        converseLib.validationFailed(279);
        PC0OW00.XXXPRCNM = "PC0O250";
        set PC0OM002.PC0OMETO cursor, bold;
      else
        PG1REC.XGPCD = PC0OW01.XGPCD;
        PG1REC.PG1SC4CD = PC0OM002.PG1SC4CD;
        PG1REC.PG1FCTCD = "**";
        PC0OS28();
        try
          call "IO1200" ("CS", SQLCA) {isNoRefresh = yes, isExternal = yes};
        end
        if (SQLCA.VAGen_SQLCODE == 0)
          if (PG1REC.XXXSTAT == "A")
            PC0OM002.XXXUSER = PG1REC.XXXUSER;
            PC0OW01.XXXUSER = PG1REC.XXXUSER;
          else
            PC0OW00.XXXPRCNM = "PC0O250";
            set PC0OM002.PG1SC4CD cursor, bold;
            converseLib.validationFailed(210); /* invalid status*/
            PC0OW01.XXXUSER = " ";
          end
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            PC0OW00.XXXPRCNM = "PC0O250";
            set PC0OM002.PG1SC4CD cursor, bold;
            converseLib.validationFailed(380); /* scheduler not found*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate PO number.*/
   /* ------------------------------------------------------------*/
  /*IF PC0OM002.PC3PONBR > 299999    /* If PO number out of range*/
  /*  AND PC0OM002.PC3PONBR < 700000;*/
  /*;   /* next sentence*/
  /*ELSE;*/
  /*  MOVE 509 TO EZEMNO;            /* indicate so*/
  /*  MOVE 'PC0O250' TO PC0OW00.XXXPRCNM; /* Module identification*/
  /*  SET PC0OM002.PC3PONBR CURSOR,BRIGHT; /* Highlight*/
  /*  EZERTN();*/
  /*END;*/

  if (PC0OM002.PC3PONBR == 0) /* If PO number not entered*/
    converseLib.validationFailed(35); /* PO number must be entered*/
    PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
    set PC0OM002.PC3PONBR cursor, bold; /* Highlight*/
  else
    VPOHDR02.XGPCD = "03"; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0OM002.PC3PONBR; /* PO number*/
    PC0OS02(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(69); /* PO number invalid*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC3PONBR cursor, bold; /* Highlight*/
      PC0OW00.PC0OWPID = " "; /* Blank out PO ID*/
      PC0OM002.PC0OMPID = " "; /* Blank out map PO ID*/
    else
      /* ------------------------------------------------------------*/
       /* Format the PO ID for display.*/
      /* ------------------------------------------------------------*/
      PC0OW00.PCFSECD = VPOHDR02.PCFSECD; /* PO ID season code*/
      PC0OW00.PC0OWD1 = "-"; /* Dash 1*/
      PC0OW00.PC0OWPOD = VPOHDR02.PC3POIDT; /* PO ID date*/
      PC0OW00.PC0OWMM1 = PC0OW00.PC0OWM1; /* PO ID buy month*/
      PC0OW00.PC0OWD2 = "-"; /* Dash 2*/
      PC0OW00.PC0OWMM2 = PC0OW00.PC0OWM2; /* PO ID buy month*/
      PC0OW00.PC0OWD3 = "-"; /* Dash 3*/
      PC0OW00.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory code*/
      PC0OM002.PC0OMPID = PC0OW00.PC0OWPID; /* Reformatted PO ID*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate customer.*/
   /* ------------------------------------------------------------*/

  if (PC0OM002.PC2CUXID != " ") /* Cust xref is entered*/
    if (PC0OM002.SY1STNBR != " " /* style is entered*/
     || PC0OM002.SY2CLRID != " " /* color is entered*/
     || PC0OM002.XOWCD != " "    /* owner group is entered*/
     || PC0OM002.PC6PLAN != 0)   /* plan # is entered*/
      converseLib.validationFailed(457); /* Cannot enter with status*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      if (PC0OM002.SY1STNBR != " ") /* style is entered*/
        set PC0OM002.SY1STNBR cursor, bold; /* Highlight*/
        return;
      end
      if (PC0OM002.SY2CLRID != " ") /* color is entered*/
        set PC0OM002.SY2CLRID cursor, bold; /* Highlight*/
        return;
      end
      if (PC0OM002.XOWCD != " ") /* owner group is entered*/
        set PC0OM002.XOWCD cursor, bold; /* Highlight*/
        return;
      end
      if (PC0OM002.PC6PLAN != 0) /* plan is entered*/
        set PC0OM002.PC6PLAN cursor, bold; /* Highlight*/
        return;
      end
    end
  end

  if (PC0OM002.PC2CUXID == " ") /* Cust xref is NOT entered*/
    if (PC0OM002.OP1CUOID > 0
     || PC0OM002.OP1NORID > 0)
      converseLib.validationFailed(450); /* cust xref must be entered*/
      PC0OW00.XXXPRCNM = "PC0O250";
      set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      set PC0OM002.OP1CUOID bold; /* Highlight*/
      set PC0OM002.OP1NORID bold; /* Highlight*/
      return;
    end
  end

  if (PC0OM002.PC2CUXID != " ") /* Cust xref is entered*/
    if (PC0OM002.PC6STAT != " "  /* If status entered*/
     || PC0OM002.PC0OMETO != " " /* If ETALO entered*/
     || PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
      PC0OW00.XXXPRCNM = "PC0O250";
      if (PC0OM002.PC6STAT != " ") /* If status entered*/
        converseLib.validationFailed(278); /* Cannot enter with status*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      end
      if (PC0OM002.PC0OMETO != " ") /* If ETALO entered*/
        converseLib.validationFailed(279); /* Cannot enter with ETALO*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      end
      if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
        converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      end
      return;
    end
    PC2REC.XGPCD = "03"; /* GPC code*/
    PC2REC.PC2CUXID = PC0OM002.PC2CUXID; /* Customer*/
    PC0OS01(); /* Validate customer*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(123); /* Customer invalid*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      return;
    end
  end

  if (PC0OM002.PC2CUXID != " ") /* Cust xref is entered*/
    if (PC2REC.YSMXDV != PC0OM002.YSMXDV) /* If division different*/
      converseLib.validationFailed(317); /* Cust/div invalid*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
      return;
    end
    if (PC0OM002.OP1CUOID == 0 /* if cust SO# blank*/
     || PC0OM002.OP1NORID == 0) /* if nike SO# blank*/
      if (VPOHDR02.PC4ORTYP == "XD"
       || VPOHDR02.PC4ORTYP == "XI"
       || VPOHDR02.PC4ORTYP == "MM"
       || VPOHDR02.PC4ORTYP == "MD"
       || VPOHDR02.PC4ORTYP == "DS"
       || VPOHDR02.PC4ORTYP == "DC"
       || VPOHDR02.PC4ORTYP == "EM"
       || VPOHDR02.PC4ORTYP == "TS"
       || VPOHDR02.PC4ORTYP == "MX")
        converseLib.validationFailed(444); /* Must enter so# with cust xref*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module ident*/
        set PC0OM002.OP1CUOID cursor, bold; /* Highlight*/
        set PC0OM002.OP1NORID bold; /* Highlight*/
        return;
      end
      if (PC0OM002.OP1CUOID == 0 /* if cust SO# blank*/
       && PC0OM002.OP1NORID > 0) /* if nike SO# entered*/
        set PC0OM002.OP1NORID cursor, bold; /* Highlight*/
        set PC0OM002.OP1CUOID bold; /* Highlight*/
        converseLib.validationFailed(70); /* Invalid*/
        return;
      end
      if (PC0OM002.OP1CUOID > 0 /* if cust SO# entered*/
       && PC0OM002.OP1NORID == 0) /* if nike SO# not*/
        set PC0OM002.OP1NORID bold; /* Highlight*/
        set PC0OM002.OP1CUOID cursor, bold; /* Highlight*/
        converseLib.validationFailed(70); /* Invalid*/
        return;
      end
    end
  end

  if (PC0OM002.OP1CUOID > 0 /* if cust SO# not blank*/
   || PC0OM002.OP1NORID > 0) /* or nike SO# not blank*/
    PC0O253(); /* verify so#*/
    if (SQLCA.VAGen_SQLCODE != 0)
      set PC0OM002.OP1CUOID cursor, bold; /* Highlight*/
      set PC0OM002.OP1NORID bold; /* Highlight*/
      PC0OW01.OP1CUPO = " "; /* Clear cust p.o.*/
      converseLib.validationFailed(72); /* Invalid*/
      return;
    else
      PC0OW01.OP1CUPO = OP1REC.OP1CUPO; /* Save cust p.o.*/
    end
    if (VPOHDR02.PC4ORTYP == "XD"
     || VPOHDR02.PC4ORTYP == "XI"
     || VPOHDR02.PC4ORTYP == "EM"
     || VPOHDR02.PC4ORTYP == "TS"
     || VPOHDR02.PC4ORTYP == "MX")
      if (PC2REC.KUCCOID == OP1REC.KUCCOID /* verify custxref on order*/
       && PC2REC.KUMSTRID == OP1REC.KUMSTRID
       && PC2REC.XNXCD == OP1REC.XNXCD)   
        PC0O252(); /* verify all styles on order*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (OP1REC.OP1CUOID != PC0OM002.OP1CUOID
           || OP1REC.OP1NORID != PC0OM002.OP1NORID)
            converseLib.validationFailed(456); /* cust xref & S.O. non match*/
            PC0OW00.XXXPRCNM = "PC0O250";
            set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
            set PC0OM002.OP1CUOID bold; /* Highlight*/
            set PC0OM002.OP1NORID bold; /* Highlight*/
            return;
          end
        end
      else
        converseLib.validationFailed(83); /* valid but wrong cust xref*/
        PC0OW00.XXXPRCNM = "PC0O250";
        set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
        set PC0OM002.OP1CUOID bold; /* Highlight*/
        set PC0OM002.OP1NORID bold; /* Highlight*/
        return;
      end
    else
      if (PC2REC.KUCCOID == OP1REC.KUCCOID) /* verify custxref on order*/
        PC0O252(); /* verify all styles on order*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (OP1REC.OP1CUOID != PC0OM002.OP1CUOID
           || OP1REC.OP1NORID != PC0OM002.OP1NORID)
            converseLib.validationFailed(456); /* cust xref & S.O. non match*/
            PC0OW00.XXXPRCNM = "PC0O250";
            set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
            set PC0OM002.OP1CUOID bold; /* Highlight*/
            set PC0OM002.OP1NORID bold; /* Highlight*/
            return;
          end
        end
      else
        converseLib.validationFailed(83); /* valid but wrong cust xref*/
        PC0OW00.XXXPRCNM = "PC0O250";
        set PC0OM002.PC2CUXID cursor, bold; /* Highlight*/
        set PC0OM002.OP1CUOID bold; /* Highlight*/
        set PC0OM002.OP1NORID bold; /* Highlight*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate mode of transportation.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.YMTCD != " ") /* If trans mode entered*/
    if (PC0OM002.PC6STAT != " ") /* If status entered*/
      converseLib.validationFailed(278); /* Cannot enter with status*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.YMTCD cursor, bold; /* Highlight*/
    else
      if (PC0OM002.PC0OMETO != " ") /* If ETALO entered*/
        converseLib.validationFailed(279); /* Cannot enter with ETALO*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.YMTCD cursor, bold; /* Highlight*/
      else
        if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
          converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
          PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
          set PC0OM002.YMTCD cursor, bold; /* Highlight and cursor set*/
        else
          if (PC0OM002.YMTCD in YMTTBL.YMTCD /* Trans mode in table*/
           && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

          else
            PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
            set PC0OM002.YMTCD cursor, bold; /* Highlight*/
            converseLib.validationFailed(61); /* Trans mode invalid*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate ETAL override date.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PC0OMETO != " ") /* If OETAL date entered*/
    if (PC0OM002.PC6STAT != " ") /* If status entered*/
      converseLib.validationFailed(278); /* Cannot enter with status*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC0OMETO cursor, bold; /* Highlight*/
    else
      if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
        converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC0OMETO cursor, bold; /* Highlight*/
      else
        if (PC0OM002.PC0OMETO == "000000") /* If OETAL date = zeros*/
          PC0OW01.PC6OETAL = 0; /* ETAL override date*/
        else
          set TA2REC empty; /* Initialize date record*/
          TA2REC.TA2GRGA = PC0OM002.PC0OMETO; /* Date*/
          TA2REC.TA2GRTYP = "A"; /* Type*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
          PC0OS14(); /* Validate date*/
          if (TA2REC.TA2RTNCD != 0)
            PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
            set PC0OM002.PC0OMETO cursor, bold; /* Highlight*/
            converseLib.validationFailed(38); /* Invalid date*/
          else
            PC0OW01.PC6OETAL = TA2REC.TA2GRGGN; /* ETAL override date*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate status.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PC6STAT != " ") /* If entered & not valid*/
    if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
      converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC6STAT cursor, bold; /* Highlight*/
    else
      if (PC0OM002.PC6STAT != "FC"
       && PC0OM002.PC6STAT != "NC"
       && PC0OM002.PC6STAT != "CX"
       && PC0OM002.PC6STAT != "OP")
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC6STAT cursor, bold; /* Highlight*/
        converseLib.validationFailed(277); /* Status invalid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate ETS date.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PC0OMETS != " ") /* If ETS date entered*/
    if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
      converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC0OMETS cursor, bold; /* Highlight*/
    else
      if (PC0OM002.PC0OMETO != " ") /* If ETALO entered*/
        converseLib.validationFailed(279); /* Cannot enter with ETALO*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.PC0OMETS cursor, bold; /* Highlight*/
      else
        if (PC0OM002.PC6STAT != " ") /* If status entered*/
          converseLib.validationFailed(278); /* Cannot enter with status*/
          PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
          set PC0OM002.PC0OMETS cursor, bold; /* Highlight*/
        else
          set TA2REC empty; /* Initialize date record*/
          TA2REC.TA2GRGA = PC0OM002.PC0OMETS; /* To change date*/
          TA2REC.TA2GRTYP = "A"; /* Type*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
          PC0OS14(); /* Validate date*/
          if (TA2REC.TA2RTNCD != 0)
            PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
            set PC0OM002.PC0OMETS cursor, bold; /* Highlight*/
            converseLib.validationFailed(230); /* Invalid date*/
          else
            if (TA2REC.TA2GRGGN != PC0OW01.PC6ETSDT)
   /* -------------- y2k out begin --------------*/
             /* MOVE EZEDTE TO PC0OW00.PC0OWDTE;*/
             /* IF PC0OW00.PC0OWDTE > TA2REC.TA2GRGE;*/
   /* -------------- y2k out end ----------------*/
   /* -------------- y2k in  begin --------------*/
              PC0OW00.PC0OWDCY = VGVar.currentGregorianDate;
              if (PC0OW00.PC0OWDCY > TA2REC.TA2GRGGN)
   /* -------------- y2k in end -----------------*/
                PC0OW00.XXXPRCNM = "PC0O250";
                set PC0OM002.PC0OMETS cursor, bold;
                converseLib.validationFailed(409);
              end
            end
            PC0OW01.PC6ETSDT = TA2REC.TA2GRGGN; /* ETS date*/
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate audit comment.*/
   /* ------------------------------------------------------------*/
  PC0OW01.YACDESC = " "; /* Audit comment*/
  PC0OM002.YACDESC = " "; /* Audit comment*/
  if (PC0OM002.YACCD != " ") /* If audit comment entered*/
    if (PC0OM002.PG1SC4CD != " ") /* ;   Scheduler entered*/
      converseLib.validationFailed(391); /* ;   Cannot enter with scheduler*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.YACCD cursor, bold; /* Highlight*/
    else
      if (PC0OM002.YACCD in YACTBL.YACCD /* Audit comment in table*/
       && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        PC0OM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex]; /* Audit comment*/
        PC0OW01.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex]; /* Audit comment*/
      else
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.YACCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(78); /* Audit comment invalid*/
        PC0OW01.YACDESC = " "; /* Audit comment*/
      end
    end
  else
    PC0OW01.YACDESC = " "; /* Audit comment*/
  end
  PC0OM002.YACDESC = PC0OW01.YACDESC; /* Audit comment*/

   /* ------------------------------------------------------------*/
   /* Validate color.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.SY2CLRID != " ") /* If color is entered*/
    if (PC0OM002.SY1STNBR == " ") /* If style not entered*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.SY2CLRID cursor, bold; /* Highlight*/
      converseLib.validationFailed(148); /* Cannot enter without style*/
    else
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = "03"; /* GPC code*/
      PG2REC.SY1STNBR = PC0OM002.SY1STNBR; /* Style*/
      PG2REC.SY2CLRID = PC0OM002.SY2CLRID; /* Color*/
      PG2REC.XDMCD = "00"; /* Dimension*/
      XSPG202(); /* Validate style/color*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(52); /* Invalid style/color*/
        PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
        set PC0OM002.SY2CLRID cursor, bold; /* Highlight color*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate style.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.SY1STNBR == " ") /* If style not entered*/

  else
    PG2REC.XGPCD = "03"; /* GPC code*/
    PG2REC.SY1STNBR = PC0OM002.SY1STNBR; /* Style*/
    XSPG201(); /* Validate style*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(52); /* Invalid style*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.SY1STNBR cursor, bold; /* Highlight style*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate PO number.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.PC3PONBR == 0) /* If PO number not entered*/
    converseLib.validationFailed(35); /* PO number must be entered*/
    PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
    set PC0OM002.PC3PONBR cursor, bold; /* Highlight*/
  else
    VPOHDR02.XGPCD = "03"; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO region*/
    VPOHDR02.PC3PONBR = PC0OM002.PC3PONBR; /* PO number*/
    PC0OS02(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(69); /* PO number invalid*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.PC3PONBR cursor, bold; /* Highlight*/
      PC0OW00.PC0OWPID = " "; /* Blank out PO ID*/
      PC0OM002.PC0OMPID = " "; /* Blank out map PO ID*/
    else
      /* ------------------------------------------------------------*/
       /* Format the PO ID for display.*/
      /* ------------------------------------------------------------*/
      PC0OW00.PCFSECD = VPOHDR02.PCFSECD; /* PO ID season code*/
      PC0OW00.PC0OWD1 = "-"; /* Dash 1*/
      PC0OW00.PC0OWPOD = VPOHDR02.PC3POIDT; /* PO ID date*/
      PC0OW00.PC0OWMM1 = PC0OW00.PC0OWM1; /* PO ID buy month*/
      PC0OW00.PC0OWD2 = "-"; /* Dash 2*/
      PC0OW00.PC0OWMM2 = PC0OW00.PC0OWM2; /* PO ID buy month*/
      PC0OW00.PC0OWD3 = "-"; /* Dash 3*/
      PC0OW00.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory code*/
      PC0OM002.PC0OMPID = PC0OW00.PC0OWPID; /* Reformatted PO ID*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate division.*/
   /* ------------------------------------------------------------*/
  if (PC0OM002.YSMXDV == "  ") /* If division not entered*/
    PC0OW01.YSMSMDSC = " "; /* Blank out description*/
    converseLib.validationFailed(50); /* Invalid division*/
    PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
    set PC0OM002.YSMXDV cursor, bold; /* Highlight division*/
  else
    TA1REC.TA1PGMNM = "PC0O250"; /* Module identification*/
    YSMREC.YSMSUMCD = PC0OM002.YSMXDV; /* Division*/
    XSPCS02(); /* Get division*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      PC0OW01.YSMSMDSC = " "; /* Blank out description*/
      converseLib.validationFailed(50); /* Invalid division*/
      PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
      set PC0OM002.YSMXDV cursor, bold; /* Highlight division*/
    else
      PC0OW01.YSMSMDSC = YSMREC.YSMSMDSC; /* Description*/
    end
  end
  PC0OM002.YSMSMDSC = PC0OW01.YSMSMDSC; /* Division description*/

   /* ******* edits for Spain****************************************/
  if (PC0OM002.PC2CUXID != " "
   && VPOHDR02.PC4ORTYP != "SS"
   && VPOHDR02.PC4ORTYP != "SX") /* exclude SS & SX from Spain exception.*/
    PC0OS74(); /* get the location code*/
    PC0OS75(); /* open cursor for item*/
    PC0OS76(); /* fetch  row from item*/
    while (PC0OW00.PC0OWDC1 == "N") /* While more items*/
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = "03"; /* GPC code*/
      PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
      PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
      PG2REC.XDMCD = "00"; /* Dimension*/
      XSPG202(); /* select row from style/color*/
      if (PG2REC.XFCCD1 != "68"
       && PG2REC.XFCCD2 != "68"
       && PG2REC.XFCCD3 != "68"
       && PG2REC.XFCCD4 != "68"
       && PG2REC.XFCCD5 != "68"
       && PG2REC.XFCCD6 != "68")
        if (TSCREC.XCTCD == "SPAI"
         || TSCREC.XCTCD == "CNRY"
         || TSCREC.TSCLOCCD == "MO2"
         || TSCREC.TSCLOCCD == "MO3"
         || TSCREC.TSCLOCCD == "MO4") /* edits for spain*/
          converseLib.validationFailed(574);
          PC0OW00.PC0OWDC1 = "Y";
        else
          PC0OS76(); /* fetch next row from item*/
        end
      else
        PC0OS76(); /* fetch next row from item*/
      end
    end
    PC0OS77(); /* close item cursor*/
  end
   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CAITEM > " ") /* Application data entered*/
    PC0OW00.XXXPRCNM = "PC0O250"; /* Module identification*/
    set PC0OM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/
  PC0O251(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC0O250

// Save map data before converse
Function PC0O251()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/
  PC0OW01.YSMXDV = PC0OM002.YSMXDV; /* Division*/

   /* MOVE UP0OM002.po-reg-cd TO UP0OW01.po-reg-cd;      /* PO region*/
  if (PC0OM002.XGPCD == "03") /* apparel*/
    PC0OW01.PO-REG-CD = "02"; /* PO region*/
  else
    PC0OW01.PO-REG-CD = "01"; /* PO region*/
  end

  PC0OW01.PC3PONBR = PC0OM002.PC3PONBR; /* PO number*/
  PC0OW01.SY1STNBR = PC0OM002.SY1STNBR; /* Style number*/
  PC0OW01.SY2CLRID = PC0OM002.SY2CLRID; /* Color*/
  PC0OW01.PC6PLAN = PC0OM002.PC6PLAN; /* Plan*/
  PC0OW01.XOWCD = PC0OM002.XOWCD; /* Owner group*/
  PC0OW01.YACCD = PC0OM002.YACCD; /* Audit comment*/
  PC0OW01.PC0OWETS = PC0OM002.PC0OMETS; /* ETS date*/
  PC0OW01.PC6STAT = PC0OM002.PC6STAT; /* Status*/
  PC0OW01.PC0OWETO = PC0OM002.PC0OMETO; /* ETAL override*/
  PC0OW01.YMTCD = PC0OM002.YMTCD; /* Transportation mode*/
  PC0OW01.PC2CUXID = PC0OM002.PC2CUXID; /* Cust xref*/
  PC0OW01.OP1CUOID = PC0OM002.OP1CUOID; /* s.o.*/
  PC0OW01.OP1NORID = PC0OM002.OP1NORID; /* s.o.*/
  PC0OW01.PG1SC4CD = PC0OM002.PG1SC4CD; /* Scheduler*/

end // end PC0O251

// Set appropriate status flags
Function PC0O252()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the  set of all items*/
   /* on this po. Then check them all to see that all sty/clr(s)*/
   /* on these po(s) match the SO# on dorder.vitem001.*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
  PC0OW00.PC0OWDC1 = "N"; /* set end of cursor flag to no*/

  VPOITM05.XGPCD = PC0OW01.XGPCD;
  VPOITM05.PO-REG-CD = PC0OW01.PO-REG-CD; /* ==>P.O. REGIN CODE*/
  VPOITM05.PC3PONBR = PC0OW01.PC3PONBR; /* ==>P.O. number*/

  PC0OS71(); /* ========> select set and open cursor*/

  PC0OS72(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and check SO#(s) until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (PC0OW00.PC0OWDC1 == "N") /* Until EOF temp. cursor*/

    if (VPOITM05.PC6STAT == "OP") /* ONLY VERIFY OPEN ITEMS*/
      PC0OSE1(); /* VERIFY SO#*/
      if (SQLCA.VAGen_SQLCODE == 0)
  /* MOVE PC0OM002.OP1CUOID TO PC0OW01.OP1CUOID;*/
  /* MOVE PC0OM002.OP1NORID TO PC0OW01.OP1NORID;*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(453);
          PC0OW00.XXXPRCNM = "PC0O252";
          set PC0OM002.OP1CUOID cursor, bold;
          set PC0OM002.OP1NORID bold;
        else
          PC0OW00.XXXPRCNM = "PC0O252";
          if (sysVar.errorCode == "00000000" /* Call successful*/
           && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
            converseLib.validationFailed(11); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
          else
            converseLib.validationFailed(10); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNM = "PC0O252"; /* Program number*/
          TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
          TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/
        end
      end
    end

    PC0OS72(); /* ==========> Driving read*/
  end /* ===> Until EOF temp. cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0OS73(); /* Close the selected set cursor*/

   /* ********************** End of XPPC011 ***********************/
end // end PC0O252

// Verify Order Number
Function PC0O253()

  set OP1REC empty; /* Intialize record*/

  PC0OW00.PC0OWCSO = PC0OM002.OP1CUOID;
  OP1REC.OP1PARTN = PC0OW00.PC0OWPAR;
  OP1REC.OP1CUOID = PC0OM002.OP1CUOID;
  OP1REC.OP1NORID = PC0OM002.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0OW00.XXXPRCNM = "PC0N253";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC0OW00.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0o253 ***********************/
end // end PC0O253

// Process valid input request
Function PC0O260()
   /* ------------------------------------------------------------*/
   /* Display confirmation message if not yet shown.*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.YPUCD == "IN" /* IF INCOMPLETE HDR STATUS*/
   && PC0OM002.PC6STAT != "CX")
    converseLib.validationFailed(389); /* WHEN HDR 'IN' MAY ONLY GO TO 'CX'*/
    exit stack;
  end

  if (PC0OW00.PC0OWCFG != "Y") /* If confirm flag = no*/
    if (VPOHDR02.YPUCD != "IN") /* IF NOT INCOMPLETE HDR STATUS*/
      PC0O261(); /* Get color & plan counts*/
    end
    if (VPOHDR02.YPUCD == "IN") /* IF INCOMPLETE HDR STATUS*/
      PC0OW01.PC0OWCT1 = 0; /* CLR CNT*/
      PC0OW01.PC0OWCT2 = 0; /* PLAN CNT*/
    end
    if (PC0OW00.PC0ONSC == "Y" && PC0OM002.SY1STNBR != " ")
      PCWREC.XXXMSGNO = 576; /* No maintenance for SAP'POs*/
    else
      if (PC0OM002.SY1STNBR == " ")
        PCWREC.XXXMSGNO = 84; /* Confirmation message*/
        PC0OW00.PC0OWCFG = "Y"; /* Confirm flag = yes*/
        exit stack; /* Display message*/
      end
    end
  else
    PC0OW00.PC0OWCFG = "N"; /* Confirm flag = no*/
  end

  XX0XS01(); /* Get date and time*/
  PC0OW00.PC0ONSC = "N"; /* Flag for SAP'PO*/
   /* ------------------------------------------------------------*/
   /* Fetch and update items.*/
   /* ------------------------------------------------------------*/
  if (VPOHDR02.YPUCD != "IN") /* IF NOT INCOMPLETE HDR STATUS*/
    PC0OS03(); /* Open cursor PO item*/
    PC0OS04(); /* Fetch next item*/
    PC0OW00.PC0OWITM = "N"; /* Items updated flag = no*/
    while (PC0OW00.PC0OWDC1 == "N") /* While more items*/
      if (VPOITM05.PC-SAP-PO-NBR != " "
       && COMMAREA.CACLVL[10] != "Y")
        PC0OW00.PC0ONSC = "Y";
      else
        if (PC0OW00.PC0OWVS != "Y")
          if ((PC0OM002.SY1STNBR != " " && PC0OW00.PC0OWCFG != "Y"))
            PCWREC.XXXMSGNO = 84; /* Confirmation message*/
            PC0OW00.PC0OWVS = "Y"; /**/
            PC0OW00.PC0OWCFG = "Y"; /* Confirm flag = yes*/
            exit stack; /* Display message*/
          end
        end
        if (PC0OW01.PC6PLAN == 0 /* If plan not entered*/
         || PC0OW01.PC6PLAN == VPOITM05.PC6PLAN) /* or plan is same*/
          PC0O262(); /* Update PO*/
        end
      end
      PC0OS04(); /* Fetch next item*/
    end
    PC0OS05(); /* Close item cursor*/
  end
  PC0OW00.PC0OWVS = "N"; /**/

   /* ------------------------------------------------------------*/
   /* Update header if items updated.*/
   /* ------------------------------------------------------------*/
  if (PC0OW00.PC0OWITM == "Y") /* If items updated*/
    set PC8REC empty;
    PC8REC.XGPCD = "03"; /* GPC code*/
    PC8REC.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO region*/
    PC8REC.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
    PC8REC.YACCD = PC0OW01.YACCD; /* Audit comment*/
    if (PC0OW00.PC0ONSC == "Y")
      PCWREC.XXXMSGNO = 581; /* Non SAP items are updated*/
    else
      XPPC010(); /* Update PO header*/
      PCWREC.XXXMSGNO = 1; /* Update successful*/
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    PC0OW01.YACCD = " "; /* Audit comment*/
    PC0OW01.YACDESC = " "; /* Audit comment desc*/
    PC0OW01.PC0OWETS = " "; /* ETS date*/
    PC0OW01.PC6STAT = " "; /* Status*/
    PC0OW01.PC0OWETO = " "; /* ETAL override*/
    PC0OW01.PC0OWOET = " "; /* Original ETS*/
    PC0OW01.YMTCD = " "; /* Transportation mode*/
    PC0OW01.PC2CUXID = " "; /* Customer*/
    PC0OW01.OP1CUOID = 0; /* Cust S.O.#*/
    PC0OW01.OP1NORID = 0; /* Nike S.O.#*/
    PC0OW01.PG1SC4CD = " "; /* Scheduler*/
    PC0OW01.XXXUSER = " "; /* Scheduler user ID*/
    set VPOITM05 empty;
    set PC0OW03 empty;
    return;
  else
    if (PC0OW00.PC0ONSC == "Y"
     || VPOITM05.PC-SAP-PO-NBR != " ")
      /* IF PC0OM002.SY1STNBR NE ' ';*/
      PCWREC.XXXMSGNO = 576; /* cannot maintain sap po#*/
      return;
      /* ELSE;*/
       /* MOVE 581 TO PCWREC.XXXMSGNO;/* No data for selection requested*/
       /* EZERTN;*/
      /* END;*/
    else
      if (VPOHDR02.YPUCD != "IN") /* IF NOT INCOMPLETE HDR STATUS*/
        PC0OW00.XXXPRCNM = "PC0O260"; /* Module identification*/
        PCWREC.XXXMSGNO = 276; /* No data for selection requested*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* IF HEADER WAS IN A 'IN' INCOMPLETE STATUS (NO ITEMS)*/
   /* ------------------------------------------------------------*/
  if (PC0OW00.PC0ONSC == "Y")
     /* NEXT SENTENCE;*/
  else
    if (VPOHDR02.YPUCD == "IN") /* IF INCOMPLETE HDR STATUS*/
      PC8REC.XGPCD = "03"; /* GPC code*/
      PC8REC.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
      PC8REC.YACCD = PC0OW01.YACCD; /* Audit comment*/
      PC0OS50(); /* UPDATE HDR STATUS TO CX*/
      PCWREC.XXXMSGNO = 1; /* Update successful*/
    end
  end
end // end PC0O260

// Count colors & plans
Function PC0O261()
  PC0OW01.PC0OWCT1 = 0; /* Init color count*/
  PC0OW01.PC0OWCT2 = 0; /* Init plan count*/
  set VPOITM05 empty; /* Init PO item record*/
  VPOITM05.XGPCD = "03"; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0OW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0OM002.PC3PONBR; /* PO number*/
  VPOITM05.YSMXDV = PC0OM002.YSMXDV; /* Division code*/
  if (PC0OM002.SY1STNBR == " ") /* If no style entered*/
    VPOITM05.SY1STNBR = "*"; /* Wildcard style*/
  else
    VPOITM05.SY1STNBR = PC0OM002.SY1STNBR; /* Style*/
  end
  if (PC0OM002.SY2CLRID == " ") /* If no color entered*/
    VPOITM05.SY2CLRID = "*"; /* Wildcard color*/
  else
    VPOITM05.SY2CLRID = PC0OM002.SY2CLRID; /* Color*/
  end
  if (PC0OM002.XOWCD == " ") /* If no owner group entered*/
    VPOITM05.XOWCD = "*"; /* Wildcard OG*/
  else
    VPOITM05.XOWCD = PC0OM002.XOWCD; /* Owner Group*/
  end
  if (PC0OM002.PC6PLAN == 0) /* If no plan entered*/
    VPOITM05.PC6PLAN = -1; /* Wildcard plan*/
  else
    VPOITM05.PC6PLAN = PC0OM002.PC6PLAN; /* Plan*/
  end
  VPOITM05.OP1PARTN = "*"; /* wildcard Order part #*/
  VPOITM05.OP1CUOID = -1; /* wildcard cust ord id*/
  VPOITM05.OP1NORID = -1; /* wildcard cust ord id*/
  if (PC0OW01.PC6STAT != " ") /* If status entered*/
    if (PC0OW01.PC6STAT == "NC"
     || PC0OW01.PC6STAT == "FC"
     || PC0OW01.PC6STAT == "CX")

      VPOITM05.PC6STAT = "OP"; /* Status of open*/
      PCYREC.PCYFUNC = "T4"; /* Count colors*/
      PC0OS16();
      PC0OW01.PC0OWCT1 = PCYREC.PCYCOUNT; /* Color count*/

      if (PC0OW01.PC6STAT == "NC")
        VPOITM05.PC6STAT = "FC"; /* Status*/
        PCYREC.PCYFUNC = "T4"; /* Count colors*/
        PC0OS16();
        PC0OW01.PC0OWCT1 = PC0OW01.PC0OWCT1 + PCYREC.PCYCOUNT;
                                   /* Color count*/
      end

      if (PC0OW01.PC6STAT == "FC")
        VPOITM05.PC6STAT = "NC"; /* Status*/
        PCYREC.PCYFUNC = "T4"; /* Count colors*/
        PC0OS16();
        PC0OW01.PC0OWCT1 = PC0OW01.PC0OWCT1 + PCYREC.PCYCOUNT;
                                   /* Color count*/
      end

      VPOITM05.PC6STAT = "OP"; /* Status of open*/
      PCYREC.PCYFUNC = "T5"; /* Count plans*/
      PC0OS16();
      PC0OW01.PC0OWCT2 = PCYREC.PCYCOUNT; /* Plan count*/

      if (PC0OW01.PC6STAT == "NC")
        VPOITM05.PC6STAT = "FC"; /* Status*/
        PCYREC.PCYFUNC = "T5"; /* Count plans*/
        PC0OS16();
        PC0OW01.PC0OWCT2 = PC0OW01.PC0OWCT2 + PCYREC.PCYCOUNT;
                                   /* Plan count*/
      end

      if (PC0OW01.PC6STAT == "FC")
        VPOITM05.PC6STAT = "NC"; /* Status*/
        PCYREC.PCYFUNC = "T5"; /* Count plans*/
        PC0OS16();
        PC0OW01.PC0OWCT2 = PC0OW01.PC0OWCT2 + PCYREC.PCYCOUNT;
                                   /* Plan count*/
      end

    else

      if (PC0OW01.PC6STAT == "OP")

        VPOITM05.PC6STAT = "FC"; /* Status*/
        PCYREC.PCYFUNC = "T4"; /* Count colors*/
        PC0OS16();
        PC0OW01.PC0OWCT1 = PCYREC.PCYCOUNT; /* Color count*/

        VPOITM05.PC6STAT = "NC"; /* Status*/
        PCYREC.PCYFUNC = "T4"; /* Count colors*/
        PC0OS16();
        PC0OW01.PC0OWCT1 = PC0OW01.PC0OWCT1 + PCYREC.PCYCOUNT;
                                   /* Color count*/

        VPOITM05.PC6STAT = "FC"; /* Status*/
        PCYREC.PCYFUNC = "T5"; /* Count plans*/
        PC0OS16();
        PC0OW01.PC0OWCT2 = PCYREC.PCYCOUNT; /* Plan count*/

        VPOITM05.PC6STAT = "NC"; /* Status*/
        PCYREC.PCYFUNC = "T5"; /* Count plans*/
        PC0OS16();
        PC0OW01.PC0OWCT2 = PC0OW01.PC0OWCT2 + PCYREC.PCYCOUNT;
                                   /* Plan count*/

      end

    end

  else /* ===> Status change not requested (Map*/
                                   /* status = ' ')*/

    VPOITM05.PC6STAT = "FC"; /* Status*/
    PCYREC.PCYFUNC = "T4"; /* Count colors*/
    PC0OS16();
    PC0OW01.PC0OWCT1 = PCYREC.PCYCOUNT; /* Color count*/

    VPOITM05.PC6STAT = "OP"; /* Status*/
    PCYREC.PCYFUNC = "T4"; /* Count colors*/
    PC0OS16();
    PC0OW01.PC0OWCT1 = PC0OW01.PC0OWCT1 + PCYREC.PCYCOUNT; /* Color count*/

    VPOITM05.PC6STAT = "FC"; /* Status*/
    PCYREC.PCYFUNC = "T5"; /* Count plans*/
    PC0OS16();
    PC0OW01.PC0OWCT2 = PCYREC.PCYCOUNT; /* Plan count*/

    VPOITM05.PC6STAT = "OP"; /* Status*/
    PCYREC.PCYFUNC = "T5"; /* Count plans*/
    PC0OS16();
    PC0OW01.PC0OWCT2 = PC0OW01.PC0OWCT2 + PCYREC.PCYCOUNT; /* Plan count*/

  end /* ===> status change request entered*/
                                   /* check*/

  if (PC0OW01.PC0OWCT1 == 0 /* If color count = 0*/
   || PC0OW01.PC0OWCT2 == 0) /* If plan count = 0*/
    PC0OW00.XXXPRCNM = "PC0O261"; /* Module identification*/
    converseLib.validationFailed(276); /* Zero count not okay*/
    exit stack; /* Display message*/
  end
end // end PC0O261

// Update the P.O.
Function PC0O262()
   /* ------------------------------------------------------------*/
   /* Determine the status update request and update items*/
   /* accordingly.*/
   /* ------------------------------------------------------------*/

  if (PC0OW01.PC6STAT == "NC")

    PC0OS41(); /* ===> "NC" Status Update Routine*/

  else

    if (PC0OW01.PC6STAT == "FC")

      PC0OS42(); /* ===> "FC" Status Update Routine*/

    else

      if (PC0OW01.PC6STAT == "CX")

        PC0OS43(); /* ===> "CX" Status Update Routine*/

      else

        if (PC0OW01.PC6STAT == "OP")

          PC0OS44(); /* ===> "OP" Status Update Routine*/

        else /* ===> no status change was requested*/

          if (VPOITM05.PC-SAP-PO-NBR == " ")
            if (VPOITM05.PC6STAT == "OP"
             || VPOITM05.PC6STAT == "FC")

              if (PC0OM002.PC0OMETS != " " /* If ETS date entered*/
               || PC0OM002.YMTCD != " "    /* or trans mode entered*/
               || PC0OM002.PC2CUXID != " " /* or customer entered*/
               || PC0OM002.OP1CUOID != 0   /* or s.o. entered*/
               || PC0OM002.OP1NORID != 0)  /* or s.o. entered*/

                move VPOITM05 to PC0OW03 withV60Compat; /* Save the old item*/

                if (PC0OM002.PC0OMETS != " ") /* If ETS date entered*/
                  VPOITM05.PC6ETSDT = PC0OW01.PC6ETSDT;
                                   /* Change ETS date*/
                end

                if (PC0OM002.YMTCD != " ") /* If trans mode entered*/
                  VPOITM05.YMTCD = PC0OW01.YMTCD; /* Change trans mode*/
                end

                if (PC0OM002.PC2CUXID != " ") /* If customer entered*/
                  VPOITM05.PC2CUXID = PC0OW01.PC2CUXID;
                                   /* Change customer*/
                  VPOITM05.PC2INSEG = PC2REC.PC2INSEG; /* Inseg*/
                  VPOITM05.PC6XCTCD = PC2REC.XCTCD;
                                   /* move cust country*/
                  VPOITM05.YSMXDV = PC2REC.YSMXDV; /* cust division*/
                end

                if (PC0OM002.OP1CUOID != 0) /* If customer S.O.#*/
                  PC0OW00.PC0OWCSO = PC0OW01.OP1CUOID;
                  VPOITM05.OP1PARTN = PC0OW00.PC0OWPAR;
                  VPOITM05.OP1CUOID = PC0OW01.OP1CUOID;
                  VPOITM05.OP1NORID = PC0OW01.OP1NORID;
                  VPOITM05.OP1CUPO = PC0OW01.OP1CUPO;
                end

                if (PC0OM002.PC2CUXID != " " /* If customer entered*/
                 && PC0OM002.OP1CUOID == 0)  /* If S.O. NOT entered*/
                  if (VPOHDR02.PCFSEYR < 1993) /* If less than 1993*/
                    VPOITM05.OP1PARTN = " ";
                    VPOITM05.OP1CUOID = 0;
                    VPOITM05.OP1NORID = 0;
                    VPOITM05.OP1CUPO = " ";
                  else
                    if (VPOHDR02.PC4ORTYP != "XD" /* Not inline international*/
                     && VPOHDR02.PC4ORTYP != "AD" 
                     /* asia pacific direct ship*/
                     && VPOHDR02.PC4ORTYP != "XI" 
                     && VPOHDR02.PC4ORTYP != "MX") /* Canada SMU*/
                      VPOITM05.OP1PARTN = " ";
                      VPOITM05.OP1CUOID = 0;
                      VPOITM05.OP1NORID = 0;
                      VPOITM05.OP1CUPO = " ";
                    end
                  end
                end

                /* -------------------------------------------------------*/
                /* Update the item key fields*/
                /* -------------------------------------------------------*/

                if (VPOITM05.VPOITM05-GROUP != PC0OW03.VPOITM05-GROUP)
                                   /* If changes to item*/
                  PC0O800(); /* Key update*/
                  PC0OW00.PC0OWITM = "Y"; /* ===>Item update flag=yes*/
                end

              else /* ===> Only ETAL override has changed*/

                if (PC0OW01.PC6OETAL != VPOITM05.PC6OETAL)
                                   /* ===> If new ETALO*/
                  VPOITM05.PC6OETAL = PC0OW01.PC6OETAL;
                                   /* ==> Change ETALO*/
                  PC0OS07(); /* ===> Update PO item*/
                  set VPOAIT02 empty; /* ===> Init item audit*/
                  VPOAIT02.YOACD = "74";
                                   /* ===> Audit type = ETAL Override*/
                  VPOAIT02.YACCD = PC0OW01.YACCD;
                                   /* ==> Audit comment code*/
                  PC0OS08(); /* ===> Insert PO item audit*/
                  PC0OW00.PC0OWITM = "Y"; /* ===> Item update flag=y*/
                end /* ===> OETAL check*/

                if (PC0OW01.PG1SC4CD != VPOITM05.PG1SC4CD /* scheduler diff*/
                 && PC0OW01.PG1SC4CD > "  ")              /* and scheduler was entered*/
                  VPOITM05.PG1SC4CD = PC0OW01.PG1SC4CD;
                  PC0OS07(); /* ===> Update PO item*/
                  PC0OW00.PC0OWITM = "Y"; /* Item update flag=y*/
                end

              end /* ===> ETS,OETS,MODE,XREF Changed check*/
            end /* ===> item update check (for*/
                                   /* non-status change request)*/
          else
            PCWREC.XXXMSGNO = 576;
            return;
          end /* only non-sap pos*/
        end /* ===> request to "OP" item check*/
      end /* ===> request to "CX" item check*/
    end /* ===> request to "FC" item check*/
  end /* ===> request to "NC" item check*/
end // end PC0O262

// Key update
Function PC0O800()
   /* ------------------------------------------------------------*/
   /* See if an existing item can be merged to another based on*/
      /* new key.*/
      /* Note, at this point the VPOITM05 is already loaded*/
      /* with the updated data*/
   /* ------------------------------------------------------------*/

  PC0OS17(); /* Select unique VPOITM05*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If new item already exists*/
    if (VPOITM05.PC6STAT == "OP"
     || VPOITM05.PC6STAT == "FC")
      move VPOITM05 to PC0OW05 withV60Compat; /* Save item*/
      /* ------------------------------------------------------------*/
       /* Get the balance to ship*/
      /* ------------------------------------------------------------*/
      PC0OS06(); /* Get the balance to ship*/
      move PC0OW05 to VPOITM05 withV60Compat; /* Restore item*/

      /* ------------------------------------------------------------*/
       /* Insure that nothing has been shipped for this item.*/
      /* ------------------------------------------------------------*/
      if (PC5REC.PC5TRECV == 0
       && PC5REC.PC5TSHIP == 0)

        /* ------------------------------------------------------------*/
         /* Merge old key item quantities with the new key item.*/
        /* ------------------------------------------------------------*/
        PC0O810();

        /* ------------------------------------------------------------*/
         /* Cancel the old key item.*/
        /* ------------------------------------------------------------*/
        PC0O820();

      else /* Balance to ship not equal to on order*/
        PC0OW00.XXXPRCNM = "PC0O800"; /* Module identification*/
        PCWREC.XXXMSGNO = 218; /* Item has shipment*/
        exit stack; /* Display message*/
      end

    else /* Status not = 'OP' or 'FC'*/
      PC0OW00.XXXPRCNM = "PC0O800"; /* Module identification*/
      PCWREC.XXXMSGNO = 282; /* Invalid status*/
      exit stack; /* Display message*/
    end
  else
                                   /* New key row not found*/

    /* ------------------------------------------------------------*/
     /* For change in destination.*/
     /* customer changed so new FOB Prices will need to be obtained*/
       /* The loaded VPOITM05 is save and restored to build a FOB*/
           /* templete for prices because of new ISEG.*/
    /* ------------------------------------------------------------*/

    if (PC0OM002.PC2CUXID != " " /* If customer entered*/
     && PC0OM002.PC2CUXID != PC0OW03.PC2CUXID) /* and not = to item*/

      /* ------------------------------------------------------------*/
       /* Get FOB prices for new key item.*/
      /* ------------------------------------------------------------*/

      move VPOITM05 to PC0OW05 withV60Compat; /* Save item*/

      PC0OSB7(); /* =====> Get Factory FOB Prices*/

      PC0OSB0(); /* =====> Get FOB override prices*/

      move PC0OW05 to VPOITM05 withV60Compat; /* Restore item*/

      /* ------------------------------------------------------------*/
       /* Create new key item.*/
      /* ------------------------------------------------------------*/
      PC0O830();

      /* ------------------------------------------------------------*/
       /* Cancel the old key item.*/
      /* ------------------------------------------------------------*/
      PC0O820();

    else /* No destination change*/

      /* ------------------------------------------------------------*/
       /* For change in mode.*/
      /* ------------------------------------------------------------*/
      if (PC0OM002.YMTCD != " " /* Trans mode entered*/
       && PC0OM002.YMTCD != PC0OW03.YMTCD) /* and not = to item*/

        /* ------------------------------------------------------------*/
         /* Create new key item.*/
        /* ------------------------------------------------------------*/
        PC0O830();

        /* ------------------------------------------------------------*/
         /* Cancel the old key item.*/
        /* ------------------------------------------------------------*/
        PC0O820();

      else /* No destination or mode change*/

       /* ------------------------------------------------------------*/
       /* For change in S.O.*/
       /* ------------------------------------------------------------*/
        if (PC0OM002.OP1CUOID > 0) /* and not = to item*/
          if (PC0OM002.OP1CUOID != PC0OW03.OP1CUOID /* and not = to item*/
           || PC0OM002.OP1NORID != PC0OW03.OP1NORID) /* and not = to item*/

            /* ---------------------------------------------------------*/
            /* Create new key item.*/
            /* ---------------------------------------------------------*/
            PC0O830();

            /* -------------------------------------------------------*/
            /* Cancel the old key item.*/
            /* -------------------------------------------------------*/
            PC0O820();
          end

        else /* No destination or mode change*/
          if (PC0OM002.OP1CUOID == 0  /* S.O. not entered*/
           && PC0OM002.PC2CUXID > " " /* Xref entered*/
           && VPOHDR02.PCFSEYR < 1993) /* pre 1993*/
            if (PC0OM002.OP1CUOID != PC0OW03.OP1CUOID /* and not = to item*/
             || PC0OM002.OP1NORID != PC0OW03.OP1NORID) /* and not = to item*/

              /* ---------------------------------------------------*/
              /* Create new key item.*/
              /* ---------------------------------------------------*/
              PC0O830();

              /* ---------------------------------------------------*/
              /* Cancel the old key item.*/
              /* ---------------------------------------------------*/
              PC0O820();
            end

          else /* No destination or mode change*/

            /* --------------------------------------------*/
            /* Update old key item.*/
            /* --------------------------------------------*/
            PC0O840();

          end

        end
      end

    end
  end
end // end PC0O800

// Merge old qtys with new item
Function PC0O810()
   /* ------------------------------------------------------------*/
   /* Get the old VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PC0OW03.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0OW03.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0OW03.PC6ITMNB; /* Item sequence number*/
  PC0OS18(); /* Obtain item size*/
  move VPOSIZ02 to PC0OW04 withV60Compat; /* Save old item size*/

   /* ------------------------------------------------------------*/
   /* Get the new VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC0OS18(); /* Obtain item size*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/

   /* ------------------------------------------------------------*/
   /* Load the audit record before values and*/
   /* add the size quantities of the old size to the new size.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.ZFC-CRCY-CD = " ";
  PC0OW00.XXX1 = 1; /* Initialize index*/
  while (PC0OW00.XXX1 <= 40) /* While index <= 40*/
    VPOASZ02.PCIBFRN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    VPOASZ02.PCKBFRPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    if (PC0OW04.PC7ORDEQ[XXX1] != 0 /* If old item qty exists*/
     && VPOSIZ02.PC7ORDEQ[XXX1] == 0) /* and new item qty does not*/
      VPOSIZ02.FY4FOBPR[XXX1] = PC0OW04.FY4FOBPR[XXX1];
    end
    VPOASZ02.PCKAFTPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    VPOSIZ02.PC7ORDEQ[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1] +     PC0OW04.PC7ORDEQ[XXX1];
    VPOASZ02.PCIAFTN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    PC0OW00.XXX1 = PC0OW00.XXX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  PC0OS19(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update the item - VPOITM05.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE + PC0OW03.PC6TORDE;
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOITM05.PC6TADD = VPOITM05.PC6TADD + PC0OW03.PC6TORDE;
  VPOITM05.PC6MICHG = VPOITM05.PC6MICHG + PC0OW03.PC6MICHG;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  PC0OS07(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item audit - VPOAIT02.*/
   /* ------------------------------------------------------------*/
  PC0OS12(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOAIT02.YOACD = "59"; /* Audit type = qty chg*/
  PC0OS08(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02.*/
   /* ------------------------------------------------------------*/
  PC0OS13(); /* Item size audit*/

end // end PC0O810

// Cancel old key item
Function PC0O820()
  move PC0OW03 to VPOITM05 withV60Compat; /* Restore old item*/
   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC0OS18(); /* Obtain item size*/

  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
   /* ------------------------------------------------------------*/
   /* Load the audit record before values.*/
   /* Zero out the on order quantities and audit after values.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.ZFC-CRCY-CD = " ";
  PC0OW00.PC0OWIX1 = 1; /* Initialize index*/
  while (PC0OW00.PC0OWIX1 <= 40) /* While index <= 40*/

    VPOASZ02.PCIBFRN[PC0OWIX1] = VPOSIZ02.PC7ORDEQ[PC0OWIX1];
    VPOASZ02.PCKBFRPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
    VPOASZ02.PCKAFTPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
    VPOSIZ02.FY4FOBPR[PC0OWIX1] = 0;
    VPOSIZ02.PC7ORDEQ[PC0OWIX1] = 0;
    VPOASZ02.PCIAFTN[PC0OWIX1] = 0;
    VPOSIZ02.PC7FOBFL[PC0OWIX1] = "N";
    PC0OW00.PC0OWIX1 = PC0OW00.PC0OWIX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02*/
   /* ------------------------------------------------------------*/
  PC0OS19(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update item - VPOITM05*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE; /* Cancel qty*/
  VPOITM05.PC6TORDE = 0; /* On order qty*/
  VPOITM05.PC6MICHG = 0; /* Misc. chg's*/
  VPOAIT02.PCIAFTN = 0; /* After qty*/
  VPOITM05.PC6STAT = "CX"; /* Cancel status*/
  VPOITM05.PC6CXNBR = 1; /* Cancel version number*/
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status date*/
  PC0OS07(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02*/
   /* ------------------------------------------------------------*/
  PC0OS12(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  PC0OS13(); /* Item size audit*/

   /* ------------------------------------------------------------*/
   /* Create PO item audits - VPOAIT02*/
   /* ------------------------------------------------------------*/
   /* Create item audit for cancel*/
   /* ------------------------------------------------------------*/
  VPOAIT02.YOACD = "61"; /* Audit type = cancel*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  PC0OS08(); /* Item audit*/

  VPOAIT02.PCJSEQNO = 0; /* Seq # for no size audit*/
  VPOAIT02.PCJNETQT = 0; /* Cancel quantity*/
   /* ------------------------------------------------------------*/
   /* Create item audit for ETS date*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT != PC0OW01.PC6ETSDT /* If ETS date changed*/
   && PC0OW01.PC0OWETS != " ")              /* and entered*/
    VPOAIT02.YOACD = "65"; /* Audit type = ETS chg*/
    VPOAIT02.PCIBFRN = VPOITM05.PC6ETSDT; /* Before*/
    VPOAIT02.PCIAFTN = PC0OW01.PC6ETSDT; /* After*/
    PC0OS08(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for original ETS date*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETS != PC0OW01.PC6OETS /* If OETS date changed*/
   && PC0OW01.PC0OWOET != " ")            /* and entered*/
    VPOAIT02.YOACD = "80"; /* Audit type = OETS chg*/
    VPOAIT02.PCIBFRN = VPOITM05.PC6OETS; /* Before*/
    VPOAIT02.PCIAFTN = PC0OW01.PC6OETS; /* After*/
    PC0OS08(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for transportation mode*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.YMTCD != PC0OW01.YMTCD /* If trans mode changed*/
   && PC0OW01.YMTCD != " ")           /* and entered*/
    VPOAIT02.YOACD = "67"; /* Audit type = mode chg*/
    VPOAIT02.PCIBFRN = 0;
    VPOAIT02.PCIAFTN = 0;
    VPOAIT02.PCIBFRA = VPOITM05.YMTCD; /* Before*/
    VPOAIT02.PCIAFTA = PC0OW01.YMTCD; /* After*/
    PC0OS08(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for customer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC2CUXID != PC0OW01.PC2CUXID /* If customer changed*/
   && PC0OW01.PC2CUXID != " ")              /* and entered*/
    VPOAIT02.YOACD = "72"; /* Audit type = cust chg*/
    VPOAIT02.PCIBFRN = 0;
    VPOAIT02.PCIAFTN = 0;
    VPOAIT02.PCIBFRA = VPOITM05.PC2CUXID; /* Before*/
    VPOAIT02.PCIAFTA = PC0OW01.PC2CUXID; /* After*/
    PC0OS08(); /* Create item audit*/
  end

end // end PC0O820

// Create new key item
Function PC0O830()
   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = "03"; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PC0OW03.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0OW03.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0OW03.PC6ITMNB; /* Item sequence number*/
  PC0OS18(); /* Obtain item size*/

   /* ------------------------------------------------------------*/
   /* Get the next item sequence number*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "M2"; /* Function = count seq#*/
  PC0OS16(); /* Select count item seq*/
  VPOITM05.PC6ITMNB = PCYREC.PCYCOUNT + 1; /* Seq # = count + 1*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Sequence number*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
  VPOASZ02.ZFC-CRCY-CD = " ";
  PC0OW00.PC0OWIX1 = 1; /* Initialize index*/
  while (PC0OW00.PC0OWIX1 <= 40) /* While index <= 40*/

    /* ------------------------------------------------------------*/
     /* Load the audit record before values.*/
    /* ------------------------------------------------------------*/
    VPOASZ02.PCIBFRN[PC0OWIX1] = 0;

    if (VPOSIZ02.PC7ORDEQ[PC0OWIX1] > 0)

      VPOASZ02.PCIAFTN[PC0OWIX1] = VPOSIZ02.PC7ORDEQ[PC0OWIX1];

      if (PC0OM002.PC2CUXID != " " /* If customer entered*/
       && PC0OM002.PC2CUXID != PC0OW03.PC2CUXID) /* and not = to item*/

        /* ------------------------------------------------------------*/
         /* Use FOB prices, from templete, for new key item.*/
        /* ------------------------------------------------------------*/

        VPOASZ02.PCKBFRPR[PC0OWIX1] = PC0OW07.FY4FOBPR[PC0OWIX1];
        VPOASZ02.PCKAFTPR[PC0OWIX1] = PC0OW07.FY4FOBPR[PC0OWIX1];
        VPOSIZ02.FY4FOBPR[PC0OWIX1] = PC0OW07.FY4FOBPR[PC0OWIX1];
        VPOSIZ02.PC7FOBFL[PC0OWIX1] = PC0OW07.PC7FOBFL[PC0OWIX1];

      else /* ===> use existing prices*/
        VPOASZ02.PCKBFRPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
        VPOASZ02.PCKAFTPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
      end

    end /* ===> qty exist check*/

    PC0OW00.PC0OWIX1 = PC0OW00.PC0OWIX1 + 1; /* Increment index*/

  end /* ===> while more sizes*/

   /* ------------------------------------------------------------*/
   /* Create new PO item size*/
   /* ------------------------------------------------------------*/
  PC0OS20(); /* Insert item size*/

   /* ------------------------------------------------------------*/
   /* Recalculate direct ship code*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.XWHCD == " " /* ==> customer only*/
   && VPOITM05.PC2CUXID > " ")
    if (PC2REC.YPCCD == "N") /* ==> nike customer*/
      VPOITM05.XWHCD = "09"; /* ==> default promo warehouse*/
      VPOITM05.XDSCD = " "; /* ==> warehouse only*/
    else
      VPOITM05.XDSCD = "1"; /* ==> direct ship*/
    end
  end

  if (VPOITM05.XWHCD > " " /* ==> warehouse and customer*/
   && VPOITM05.PC2CUXID > " ")
    if (PC2REC.YPCCD == "N") /* ==> nike customer*/
      VPOITM05.XDSCD = " "; /* ==> warehouse only*/
    else
      VPOITM05.XDSCD = "2"; /* ==> indirect ship*/
    end
  end

  if (VPOITM05.XWHCD > " " /* ==> warehouse only*/
   && VPOITM05.PC2CUXID == " ")
    VPOITM05.XDSCD = " "; /* ==> warehouse shipment*/
  end

   /* ------------------------------------------------------------*/
   /* Create PO item audit*/
   /* ------------------------------------------------------------*/
  PC0OS12(); /* Audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOAIT02.YOACD = "60"; /* Audit type = size chg*/
  VPOAIT02.PCIBFRN = 0; /* Before qty*/
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN; /* Net change*/
  PC0OS08(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Create PO item size audit*/
   /* ------------------------------------------------------------*/
  PC0OS13(); /* Item size audit*/

   /* ************************************************************/
   /* *     insert po item*/
   /* ************************************************************/

  VPOITM05.PC3SIFL = "N"; /* Special instr flag*/
  VPOITM05.PC6PREFL = "N"; /* pc rebuild flag*/
  VPOITM05.XIB-IBANK-CD = " "; /* Bank Code*/
  VPOITM05.PC-LGL-PO-PRT-IND = " "; /* Print Indicator*/
  VPOITM05.XXXUSRID = " "; /* user id*/
  VPOITM05.PC61TMSH = "N"; /* Ship to override flag*/
  VPOITM05.PC6ETALF = "N"; /* Ship to override flag*/
  PC0OS25(); /* Insert item*/

end // end PC0O830

// Update old key item
Function PC0O840()
   /* ------------------------------------------------------------*/
   /* Calculate the plan number*/
   /* ------------------------------------------------------------*/
  PC0OS21(); /* Calculate plan number*/

   /* ------------------------------------------------------------*/
   /* Update old PO item*/
   /* ------------------------------------------------------------*/
  PC0OS07(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Create PO item audits*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit record*/

   /* ------------------------------------------------------------*/
   /* Create item audit for ETS date*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT != PC0OW03.PC6ETSDT) /* If ETS date changed*/
    VPOAIT02.YOACD = "65"; /* Audit type = ETS chg*/
    VPOAIT02.PCIBFRN = PC0OW03.PC6ETSDT; /* Before*/
    VPOAIT02.PCIAFTN = VPOITM05.PC6ETSDT; /* After*/
    PC0OS26(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for original ETS date*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETS != PC0OW03.PC6OETS) /* If OETS date changed*/
    VPOAIT02.YOACD = "80"; /* Audit type = OETS chg*/
    VPOAIT02.PCIBFRN = PC0OW03.PC6OETS; /* Before*/
    VPOAIT02.PCIAFTN = VPOITM05.PC6OETS; /* After*/
    PC0OS26(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for transportation mode*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.YMTCD != PC0OW03.YMTCD) /* If trans mode changed*/
    VPOAIT02.YOACD = "67"; /* Audit type = mode chg*/
    VPOAIT02.PCIBFRN = 0;
    VPOAIT02.PCIAFTN = 0;
    VPOAIT02.PCIBFRA = PC0OW03.YMTCD; /* Before*/
    VPOAIT02.PCIAFTA = VPOITM05.YMTCD; /* After*/
    PC0OS26(); /* Create item audit*/
  end

   /* ------------------------------------------------------------*/
   /* Create item audit for customer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC2CUXID != PC0OW03.PC2CUXID) /* If customer changed*/
    VPOAIT02.YOACD = "72"; /* Audit type = cust chg*/
    VPOAIT02.PCIBFRN = 0;
    VPOAIT02.PCIAFTN = 0;
    VPOAIT02.PCIBFRA = PC0OW03.PC2CUXID; /* Before*/
    VPOAIT02.PCIAFTA = VPOITM05.PC2CUXID; /* After*/
    PC0OS26(); /* Create item audit*/
  end

end // end PC0O840

// Get customer - DPRODC.VPRDCU01
Function PC0OS01()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = PC2REC.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKA2 = PC2REC.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS01

// Get PO header  DPRODC.VPOHDR02
Function PC0OS02()
   /* ------------------------------------------------------------*/
   /* Select unique PO number xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOHDR02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS02

// Select item cursor  - VPOITM05
Function PC0OS03()
  PC0OW00.PC0OWDC1 = "N"; /* End of VPOITM05 flag*/

  set VPOITM05 empty; /* Initialize item record*/

   /* ------------------------------------------------------------*/
   /* Format PC6REC with key values or wildcards for select set*/
   /* ------------------------------------------------------------*/
  if (PC0OW01.PC3PONBR == 0) /* If po number not entered*/
    PCYREC.PCYFUNC = "SJ"; /* Select function*/
    VPOITM05.PC3POIDT = PC0OW01.PC3POIDT; /* PO ID date*/
    VPOITM05.FY1FCTYC = PC0OW01.FY1FCTYC; /* Factory*/
    VPOITM05.PC4ORTYP = PC0OW01.PC4ORTYP; /* PO type*/
  else
    if (PC0OW01.XGPCD == "02")
      PCYREC.PCYFUNC = "SH"; /* Select function*/
    else
      PCYREC.PCYFUNC = "SI"; /* Select function*/
    end
    VPOITM05.PC3PONBR = PC0OW01.PC3PONBR; /* PO number*/
    VPOITM05.FY1FCTYC = "*"; /* Factory*/
    VPOITM05.PC4ORTYP = PC0OW01.PC4ORTYP; /* PO type*/
  end

  VPOITM05.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0OW01.PO-REG-CD; /* po region*/

  if (PC0OW01.SY1STNBR == " ")
    VPOITM05.SY1STNBR = "*"; /* Wildcard style*/
  else
    VPOITM05.SY1STNBR = PC0OW01.SY1STNBR; /* Style number*/
  end

  if (PC0OW01.SY2CLRID == " ")
    VPOITM05.SY2CLRID = "*"; /* Wildcard color*/
  else
    VPOITM05.SY2CLRID = PC0OW01.SY2CLRID; /* Color*/
  end

  if (PC0OW01.XDMCD == " ")
    VPOITM05.XDMCD = "*"; /* Wildcard dimension*/
  else
    VPOITM05.XDMCD = PC0OW01.XDMCD; /* Dimension*/
  end

  if (PC0OW01.PC2INSEG == " ")
    VPOITM05.PC2INSEG = "*"; /* Wildcard spec difference*/
  else
    VPOITM05.PC2INSEG = PC0OW01.PC2INSEG; /* Spec difference*/
  end

  if (PC0OW01.XPGCD == " ")
    VPOITM05.XPGCD = "*"; /* Wildcard package*/
  else
    VPOITM05.XPGCD = PC0OW01.XPGCD; /* package*/
  end

  if (PC0OW01.XUMCD == " ")
    VPOITM05.XUMCD = "*"; /* Wildcard unit of measure*/
  else
    VPOITM05.XUMCD = PC0OW01.XUMCD; /* Unit of measure*/
  end

  if (PC0OW01.XOWCD == " ")
    VPOITM05.XOWCD = "*"; /* Wildcard owner group*/
  else
    VPOITM05.XOWCD = PC0OW01.XOWCD; /* Owner group*/
  end

  if (PC0OW00.PCWMAP == 2) /* If apparel*/
    VPOITM05.OP1CUOID = -1; /* Wildcard Cust S.O.#*/
    VPOITM05.OP1NORID = -1; /* Wildcard Nike S.O.#*/
    VPOITM05.OP1PARTN = "*"; /* Wildcard Cust part #*/
  else
    if (PC0OW01.OP1CUOID == 0) /* Cust S.O.# entered*/
      VPOITM05.OP1CUOID = -1; /* Wildcard Cust S.O.#*/
      VPOITM05.OP1NORID = -1; /* Wildcard Nike S.O.#*/
      VPOITM05.OP1PARTN = "*"; /* Wildcard Cust part #*/
    else
      VPOITM05.OP1CUOID = PC0OW01.OP1CUOID; /* Cust S.O.#*/
      VPOITM05.OP1NORID = PC0OW01.OP1NORID; /* Cust S.O.#*/
      PC0OW00.PC0OWCSO = PC0OW01.OP1CUOID;
      VPOITM05.OP1PARTN = PC0OW00.PC0OWPAR;
    end
  end

  VPOITM05.YSMXDV = PC0OW01.YSMXDV; /* Division code*/

  if (PC0OW01.XGPCD == "02") /* If footwear*/
    if (PC0OM001.PC6STAT == "CX")
      if (VPOHDR02.YPUCD == "TN"
       || VPOHDR02.PC4ORTYP == "SS"
       || VPOHDR02.PC4ORTYP == "PS"
       || VPOHDR02.PC4ORTYP == "CR")
        VPOITM05.YSMXDV = "*";
      end
    else
      if (PC0OM001.PC6STAT == "OP"
       && VPOHDR02.YPUCD == "TN")
        VPOITM05.YSMXDV = "*";
      end
    end
  end

  if (PC0OW00.PCWMAP == 2) /* If apparel*/
    VPOITM05.PC2CUXID = "*"; /* Customer xref ID*/
    VPOITM05.XWHCD = "*"; /* Warehouse code*/
  else
    if (PC0OW01.PC2CUXID == " ")
      VPOITM05.PC2CUXID = "*"; /* Customer xref ID*/
    else
      VPOITM05.PC2CUXID = PC0OW01.PC2CUXID; /* Customer xref ID*/
    end
    if (PC0OW01.XWHCD == " ")
      VPOITM05.XWHCD = "*"; /* Warehouse code*/
    else
      VPOITM05.XWHCD = PC0OW01.XWHCD; /* Warehouse code*/
    end
  end

  VPOITM05.PCFSECD = "*"; /* Season-code*/
  VPOITM05.XCTCD = "*"; /* Foreign county code*/
  VPOITM05.SYBSTGNB = "*"; /* Style group number*/
  VPOITM05.PC6XCTCD = "*"; /* Destination country code*/
  VPOITM05.PC6STAT = "*"; /* Item status code*/
  VPOITM05.XPRCD = "*"; /* Product type code*/
  VPOITM05.XPLCD = "*"; /* Product line code*/
  VPOITM05.XPCCD = "*"; /* Product category code*/
  VPOITM05.XDSCD = "*"; /* Direct ship code*/
  VPOITM05.XQACD = "*"; /* Quality code*/
  VPOITM05.XOWCD = "*"; /* Owner-group code*/
  VPOITM05.YMTCD = "*"; /* Mode code*/
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;

  PCYREC.PCYFRDT = 0; /* From PO ID*/
  PCYREC.PCYTODT = 999999999; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS03

// Fetch next item     - VPOITM05
Function PC0OS04()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  if (PC0OW01.PC3PONBR == 0) /* If PO number not entered*/
    PCYREC.PCYFUNC = "NJ"; /* Fetch function*/
  else
    if (PC0OW01.XGPCD == "02")
      PCYREC.PCYFUNC = "NH"; /* Fetch function*/
    else
      PCYREC.PCYFUNC = "NI"; /* Fetch function*/
    end
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0OW00.PC0OWDC1 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS04"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS04

// Close item cursor   - VPOITM05
Function PC0OS05()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  if (PC0OW01.PC3PONBR == 0) /* If PO number not entered*/
    PCYREC.PCYFUNC = "CJ"; /* Close function*/
  else
    if (PC0OW01.XGPCD == "02")
      PCYREC.PCYFUNC = "CH"; /* Close function*/
    else
      PCYREC.PCYFUNC = "CI"; /* Close function*/
    end
  end

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS05"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS05

// Get balance to ship
Function PC0OS06()
   /* ------------------------------------------------------------*/
   /* Load the PC5REC with item values*/
   /* ------------------------------------------------------------*/
  PC5REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC5REC.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO region*/
  PC5REC.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC5REC.PC-ITM-SEQ-NBR = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC5REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  PC5REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  PC5REC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  PC5REC.XQACD = VPOITM05.XQACD; /* Quality*/
  PC5REC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  PC5REC.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  PC5REC.XPGCD = VPOITM05.XPGCD; /* Package*/
  PC5REC.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  PC5REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  PC5REC.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  PC5REC.YMTCD = VPOITM05.YMTCD; /* mode of trans*/
  PC5REC.OP1PARTN = VPOITM05.OP1PARTN; /* part-number*/
  PC5REC.OP1CUOID = VPOITM05.OP1CUOID; /* cust order num*/
  PC5REC.OP1NORID = VPOITM05.OP1NORID; /* nike order num*/
   /* --> changed the following per task f129, G. Amen*/
  if (VPOITM05.XGPCD == "02") /* If footwear*/
    PC5REC.PC5ERFL = "Y"; /* Include items with errors*/
  else
    PC5REC.PC5ERFL = "N"; /* Exclude items with errors*/
  end

  XPPC030(); /* Get balance to ship quantities for*/
                                   /* the item*/

end // end PC0OS06

// Update row      - VPOITM05
Function PC0OS07()
   /* ------------------------------------------------------------*/
   /* Update row for VPOITM05.*/

   /* ------------------------------------------------------------*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  PCYREC.PCYFUNC = "UA"; /* Function is update*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS07

// Insert item audit row VPOAIT02
Function PC0OS08()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD; /* dest ctry*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP; /* PO type*/
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;

  PC0OSA8(); /* set o/a and c/m flags*/

  VPOAIT02.YACCD = PC0OW01.YACCD; /* Audit comment code*/
  if (PC0OW01.PC0OWCT1 > 1) /* If more than 1 color*/
    VPOAIT02.PCJGLOFL = "Y"; /* Global color change flag*/
  else
    VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
   /* ------------------------------------------------------------*/

  PC0OS30(); /* ===> Calculate value of ammendment indicator*/

  VPOAIT02.XDSCD = VPOITM05.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD; /* Scheduler code*/
  VPOAIT02.XPRCD = VPOITM05.XPRCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0OS08"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OW00.XXXPRCNM = "PC0OS08"; /* Module identification*/
  exit stack;

end // end PC0OS08

// Cancel item & size quantities
Function PC0OS09()
   /* ------------------------------------------------------------*/
   /* Get the item size record.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init item size record*/
  VPOSIZ02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC0OS10(); /* Get item size record*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values.*/
   /* Debit the size record quantities.*/
   /* Load audit record after values.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit*/
  set VPOASZ02 empty; /* Init size audit rec*/
   /* SET AVLREC EMPTY;                /* Init blank tee  rec*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  PC0OW00.PC0OWIX1 = 1; /* Initialize index*/
  while (PC0OW00.PC0OWIX1 <= 40) /* While index <= 40*/
    VPOASZ02.PCIBFRN[PC0OWIX1] = VPOSIZ02.PC7ORDEQ[PC0OWIX1];
    VPOASZ02.PCKBFRPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
    VPOASZ02.PCKAFTPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
    /* ------------------------------------------------------------*/
     /* If available is greater than or equal to requested qty.*/
    /* ------------------------------------------------------------*/
    if (PC5REC.PC5BALC[PC0OWIX1] >= VPOSIZ02.PC7ORDEQ[PC0OWIX1])
      /* MOVE VPOSIZ02.PC7ORDEQ(PC0OWIX1) TO AVLREC.AVLADJQT(PC0OWIX1);*/
      VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - VPOSIZ02.PC7ORDEQ[PC0OWIX1];
      VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOSIZ02.PC7ORDEQ[PC0OWIX1];
      VPOSIZ02.PC7ORDEQ[PC0OWIX1] = 0;
    else
      /* ------------------------------------------------------------*/
       /* If available is less than requested qty.*/
      /* ------------------------------------------------------------*/
      /* MOVE PC5BALC(PC0OWIX1) TO AVLREC.AVLADJQT(PC0OWIX1);*/
      VPOSIZ02.PC7ORDEQ[PC0OWIX1] = VPOSIZ02.PC7ORDEQ[PC0OWIX1] -       PC5BALC[PC0OWIX1];
      VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - PC5REC.PC5BALC[PC0OWIX1];
      VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PC5REC.PC5BALC[PC0OWIX1];
    end
    VPOASZ02.PCIAFTN[PC0OWIX1] = VPOSIZ02.PC7ORDEQ[PC0OWIX1];
    if (VPOSIZ02.PC7ORDEQ[PC0OWIX1] == 0)
      VPOSIZ02.PC7FOBFL[PC0OWIX1] = "N";
    end
    PC0OW00.PC0OWIX1 = PC0OW00.PC0OWIX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* update the available inventory. (Increase)*/
   /* ------------------------------------------------------------*/

   /* IF VPOITM05.XGPCD EQ '03'        /* GPC code*/
   /* AND VPOITM05.PC4ORTYP NE 'CD'*/
   /* AND VPOITM05.PC4ORTYP NE 'SD';*/
   /* PC0OS60;*/
   /* END;*/

   /* ------------------------------------------------------------*/
   /* Write item audit and size audit for quantity changes.*/
   /* ------------------------------------------------------------*/

  PC0OS11(); /* Update item size*/
  PC0OS12(); /* Get audit seq # max*/

  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After quantity*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/

  if (VPOITM05.XGPCD == "02")
    VPOAIT02.YOACD = "18"; /* Audit type = cancel*/
  else
    VPOAIT02.YOACD = "61"; /* Audit type = cancel*/
  end

  if (VPOITM05.XGPCD == "02" /* ===>     If footwear*/
   || VPOITM05.XGPCD == "03") /* ===>     or Apparel*/
    PC0OS08(); /* Item audit*/
    PC0OS13(); /* Item size audit*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item record.*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6TORDE == 0 /* If no on order qty*/
   || VPOHDR02.YPUCD == "TN")
    VPOITM05.PC6STAT = "CX"; /* Cancel Status*/
    VPOITM05.PC6MICHG = 0; /* Misc. chg's*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* status change date*/
    VPOITM05.PC6CXNBR = 1; /* Cancel Version number*/
    VPOITM05.XXXUSRID = COMMAREA.CAUSERID; /* save cancelling user*/

  else

    if (VPOITM05.XGPCD == "02" /* If footwear*/
     || VPOITM05.XGPCD == "01" /* If footwear*/
     || VPOITM05.XGPCD == "07") /* If footwear*/

      if (PC5REC.PC5TRECV != 0 /* and quantity received*/
       && PC5REC.PC5TSHIP == 0) /* and no qty being shipped*/
        VPOITM05.PC6STAT = "NC"; /* Nike cancel status*/
        VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* status change date*/
      end

    end

  end

  PC0OS07(); /* Update PO item*/
  PC0OW00.PC0OWITM = "Y"; /* Item updated = yes*/

end // end PC0OS09

// Select unique  DPRODC.VPOSIZ02
Function PC0OS10()
   /* ------------------------------------------------------------*/
   /* Select unique VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ITEM SIZE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0OS10

// Update size  - DPRODC.VPOSIZ02
Function PC0OS11()
   /* ------------------------------------------------------------*/
   /* Update VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ITEM SIZE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0OS11

// Select max - VPOAIT02
Function PC0OS12()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/

   /* ------------------------------------------------------------*/
   /* Select max on sequence number for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "M1"; /* Function is max for seq #*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PCYREC.PCYCOUNT = VPOAIT02.PCJSEQNO; /* Sequence # max*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -305) /* No audit sequence # max*/
        PCYREC.PCYCOUNT = 0; /* Max = 0*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0OS12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT MAX SEQUENCE #";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OW00.XXXPRCNM = "PC0OS12";
  exit stack;

end // end PC0OS12

// Insert size audit row VPOASZ02
Function PC0OS13()
   /* ------------------------------------------------------------*/
   /* Move values to size audit record.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.XGPCD = PC0OW01.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO; /* Item audit sequence number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOASZ02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOASZ02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOASZ02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOASZ02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOASZ02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOASZ02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOASZ02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOASZ02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID; /* Cust order #*/
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID; /* Nike order #*/
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN; /* part #*/

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOASZ02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOASZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0OS13"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOASZ02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOASZ02.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKN3 = VPOASZ02.PCJSEQNO; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OW00.XXXPRCNM = "PC0OS13"; /* Module identification*/

  exit stack;

end // end PC0OS13

// Validate date
Function PC0OS14()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0OW00.XXXPRCNM = "PC0OS14"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = PC0OW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = PC0OW00.PCWMAP; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0OS14

// Select count    - VPOITM05
Function PC0OS16()
   /* ------------------------------------------------------------*/
   /* Select count for VPOITM05.*/

   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Null return*/

      PCYREC.PCYCOUNT = 0; /* Zero to count*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS16

// Select unique item -  VPOITM05
Function PC0OS17()
   /* ------------------------------------------------------------*/
   /* Select unique row VPOITM05.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "SE"; /* Select unique*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS17"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS17

// Select unique  DPRODC.VPOSIZ01
Function PC0OS18()
   /* ------------------------------------------------------------*/
   /* Select unique VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS18"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0OS18

// Update size  - DPRODC.VPOSIZ01
Function PC0OS19()
   /* ------------------------------------------------------------*/
   /* Update the VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS19"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0OS19

// Insert size -  DPRODC.VPOSIZ01
Function PC0OS20()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOSIZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for VPOSIZ02.*/
    /* ------------------------------------------------------------*/
    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

    try
      call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. SIZE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS20"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS20

// Calculate the new plan number
Function PC0OS21()
   /* ------------------------------------------------------------*/
   /* Select set for this plan*/
   /* ------------------------------------------------------------*/
  PC0OS22(); /* Select set VPOITM01*/

   /* ------------------------------------------------------------*/
   /* Fetch first item for this plan*/
   /* ------------------------------------------------------------*/
  PC0OS23(); /* Fetch next VPOITM01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If items exist for plan*/
    /* ------------------------------------------------------------*/
     /* Check that open items exist for this plan*/
    /* ------------------------------------------------------------*/
    while (PC0OW05.PC6STAT != "OP"             /* While status not open*/
     && PC0OW05.PC6OETS != VPOITM05.PC6OETS /* and orig ETS not match*/
     && PC0OW00.PC0OWDC2 == "N"             /* and more items exist*/
     && SQLCA.VAGen_SQLCODE == 0)

      if (PC0OW05.PC6STAT == "CX")
        PC0OW00.PC0OW-COUNT-CX = PC0OW00.PC0OW-COUNT-CX + 1;
      end

      PC0OW00.PC0OW-COUNT-ALL = PC0OW00.PC0OW-COUNT-ALL + 1;

      /* ------------------------------------------------------------*/
       /* Fetch next item for this plan*/
      /* ------------------------------------------------------------*/
      PC0OS23(); /* Fetch next VPOITM01*/

    end

    if (PC0OW00.PC0OWDC2 == "Y") /* If end of set*/
      converseLib.validationFailed(263); /* All products for plan closed*/
      PC0OW00.XXXPRCNM = "PC0O263"; /* Module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      exit stack; /* Display message*/
    else
      VPOITM05.PC6PLAN = PC0OW05.PC6PLAN; /* Plan number*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/
  PC0OS24(); /* Close cursor VPOITM01*/

end // end PC0OS21

// Select item cursor  - VPOITM05
Function PC0OS22()
  PC0OW00.PC0OWDC2 = "N"; /* End of VPOITM05 flag*/

   /* ------------------------------------------------------------*/
   /* PC0OW05 is used to maintain VPOITM05 intact*/
   /* ------------------------------------------------------------*/
  move VPOITM05 to PC0OW05 withV60Compat; /* Move item values*/
  PC0OW05.SY2CLRID = "*"; /* Color*/
  PC0OW05.XDMCD = "*"; /* Dimension*/
  PC0OW05.XQACD = "*"; /* Quality*/
  PC0OW05.XOWCD = "*"; /* Owner group*/
  PC0OW05.PC2INSEG = "*"; /* Inseg*/
  PC0OW05.XPGCD = "*"; /* Package*/
  PC0OW05.XUMCD = "*"; /* Unit of measure*/
  PC0OW05.XWHCD = "*"; /* Warehouse*/
  PC0OW05.PC2CUXID = "*"; /* Customer*/
  PC0OW05.PC6PLAN = -1; /* Plan*/
  PC0OW05.XDSCD = "*"; /* Direct ship*/
  PC0OW05.YSMXDV = "*"; /* Division*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "S8"; /* Function select set 1*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0OW05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS22"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = PC0OW05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = PC0OW05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = PC0OW05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = PC0OW05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS22

// Fetch next item     - VPOITM05
Function PC0OS23()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "N8"; /* Fetch function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0OW05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch n*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      if (PC0OW00.PC0OW-COUNT-ALL == PC0OW00.PC0OW-COUNT-CX) /* only cx items*/

        return; /* Return to previous process*/

      end

      PC0OW00.PC0OWDC2 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS23"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = PC0OW05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = PC0OW05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = PC0OW05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = PC0OW05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS23

// Close item cursor   - VPOITM05
Function PC0OS24()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "C8"; /* Close function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0OW05) {isNoRefresh = yes, isExternal = yes};
  end /* Close ta*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS24"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS24"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS24

// Insert item     - VPOITM05
Function PC0OS25()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOITM05.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SE"; /* Function = select unique*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for VPOITM05.*/
    /* ------------------------------------------------------------*/

    VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    PCYREC.PCYFUNC = "A "; /* Function = insert*/
    try
      call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS25"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS25

// Insert item audit row VPOAIT01
Function PC0OS26()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = PC0OW03.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0OW03.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = PC0OW03.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0OW03.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = PC0OW03.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = PC0OW03.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = PC0OW03.XQACD; /* Quality*/
  VPOAIT02.XOWCD = PC0OW03.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = PC0OW03.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = PC0OW03.XPGCD; /* Package*/
  VPOAIT02.XUMCD = PC0OW03.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = PC0OW03.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = PC0OW03.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = PC0OW03.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = PC0OW03.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = PC0OW03.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = PC0OW03.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = PC0OW03.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = PC0OW03.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = PC0OW03.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = PC0OW03.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = PC0OW03.PC6XCTCD; /* Customer*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = PC0OW03.PC4ORTYP; /* PO type*/
  VPOAIT02.OP1PARTN = PC0OW03.OP1PARTN;
  VPOAIT02.OP1NORID = PC0OW03.OP1NORID;
  VPOAIT02.OP1CUOID = PC0OW03.OP1CUOID;

  PC0OSA8(); /* set o/a and c/m flags*/

  VPOAIT02.YACCD = PC0OW01.YACCD; /* Audit comment code*/
  if (PC0OW01.PC0OWCT1 > 1) /* If more than 1 color*/
    VPOAIT02.PCJGLOFL = "Y"; /* Global color change flag*/
  else
    VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/
  end

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header since no destination change*/
   /* load L/C print Indicator (3,5)*/
   /* ------------------------------------------------------------*/

  PC0OS32(); /* ===> load L/C print Indicator (3,5)*/

  VPOAIT02.XDSCD = PC0OW03.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = PC0OW03.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = PC0OW03.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = PC0OW03.PG1SC4CD; /* Scheduler code*/
  VPOAIT02.XPRCD = PC0OW03.XPRCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0OS08"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OW00.XXXPRCNM = "PC0OS08"; /* Module identification*/
  exit stack;

end // end PC0OS26

// Get ISEG     - DPRODC.VPRDCU01
Function PC0OS27()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = PC2REC.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKA2 = PC2REC.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS27

Function PC0OS28()
   /* ------------------------------------------------------------*/
   /* Select/scan for scheduler*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SS", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      try
        call "IO1200" ("SN", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
      end
      if (sysVar.errorCode == "00000000")
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == +100)
          return; /* Return to previous process*/
        end

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS28"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET SCHEDULER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = PG1REC.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKA2 = PG1REC.PG1SC4CD; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS28

// Driver for setting L/C flag
Function PC0OS30()
   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.XGPCD == "02") /* GPC code*/
    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y"
     && PC0OM001.PC6STAT == "CX")
      PC0OS31(); /* ===> Load L/C Print Indicator =*/
                                   /* (1,2,3)*/
    else
      PC0OS32(); /* ===> Load L/C Print Indicator = (3,5)*/
    end
  end

  if (VPOITM05.XGPCD == "03") /* GPC code*/
    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y")
      if (PC0OW01.PC2CUXID != PC0OW03.PC2CUXID /* ===> Destination change*/
       || PC0OM002.PC6STAT == "CX")            /* ===> Global cancel requested*/
        PC0OS31(); /* ===> Load L/C Print Indicator =*/
                                   /* (1,2,3)*/
      else
        PC0OS32(); /* ===> Load L/C Print Indicator = (3,5)*/
      end
    else
      PC0OS32(); /* ===> Load L/C Print Indicator = (3,5)*/
    end
  end

end // end PC0OS30

// Load L/C Print IND (1,2,3)
Function PC0OS31()

  if (VPOHDR02.PC3NISFL == "Y")
    VPOAIT02.PCJAMEND = "1";
  else
    if (VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "2";
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end

end // end PC0OS31

// Load L/C Print IND (3,5)
Function PC0OS32()

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3NISFL == "Y")
    VPOAIT02.PCJAMEND = "5";
  else
    if (VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5";
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end

end // end PC0OS32

// "NC" Status Update Request
Function PC0OS41()
   /* ------------------------------------------------------------*/
   /* Process the "NC" update item request*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "OP"
   || VPOITM05.PC6STAT == "FC")

    /* ------------------------------------------------------------*/
     /* Get the balance to ship quantities*/
    /* ------------------------------------------------------------*/

    move VPOITM05 to PC0OW03 withV60Compat; /* ===> Save item to process*/
    PC0OS06(); /* ===> Get the balance to ship*/

    /* ------------------------------------------------------------*/
     /* If there is intransit quantities,  then error*/
    /* ------------------------------------------------------------*/

    if (PC5REC.PC5TSHIP > 0 /* If Intransit data exists*/
     && PC5REC.XGPCD == "02") /* and footwear*/

      PC0OW00.XXXPRCNM = "PC0OS41"; /* Module identification*/
      PCWREC.XXXMSGNO = 388; /* No data for selection requested*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> Roll back all changes*/
      exit stack; /* ===> Return to display message*/

    else
      if (PC5REC.PC5TSHIP > 0  /* If Intransit data exists*/
       && PC5REC.PC5TRECV == 0 /* and no receipts*/
       && PC5REC.XGPCD != "02") /* and NOT footwear*/

        PC0OW00.XXXPRCNM = "PC0OS41"; /* Module identification*/
        PCWREC.XXXMSGNO = 388; /* No data for selection requested*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* ===> Roll back all changes*/
        exit stack; /* ===> Return to display message*/

      end /* ===> proceed to process status update request*/

    end /* ===> proceed to process status update request*/

    move PC0OW03 to VPOITM05 withV60Compat; /* Restore item to process*/
    set VPOAIT02 empty; /* Init item audit rec*/
    VPOAIT02.PCIBFRA = VPOITM05.PC6STAT; /* Before Status*/
    VPOAIT02.PCIAFTA = PC0OW01.PC6STAT; /* After Status*/
    VPOITM05.PC6STAT = PC0OW01.PC6STAT; /* Status*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status change date*/
    PC0OS07(); /* Update PO item*/

    if (VPOITM05.XGPCD == "02") /* ===> set appropriate audit type code*/
      VPOAIT02.YOACD = "19"; /* Audit type = status*/
    else
      VPOAIT02.YOACD = "76"; /* Audit type = status*/
    end

    VPOAIT02.YACCD = PC0OW01.YACCD; /* Audit comment code*/

    if (VPOITM05.XGPCD == "02" /* ===> set appropriate audit type code*/
     || VPOITM05.XGPCD == "03") /* ===> set appropriate audit type code*/
      PC0OS08(); /* Insert PO item audit*/
    end

    PC0OW00.PC0OWITM = "Y"; /* Item updated flag = yes*/

  end

end // end PC0OS41

// "FC" Status Update Routine
Function PC0OS42()
   /* ------------------------------------------------------------*/
   /* Process the "FC" Update Item request*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "OP"
   || VPOITM05.PC6STAT == "NC")

    /* ------------------------------------------------------------*/
     /* Get the balance to ship quantities*/
    /* ------------------------------------------------------------*/

    move VPOITM05 to PC0OW03 withV60Compat; /* ===> Save item to process*/
    PC0OS06(); /* ===> Get the balance to ship*/

    /* ------------------------------------------------------------*/
     /* If there is intransit quantities,  then error*/
    /* ------------------------------------------------------------*/

    if (PC5REC.PC5TSHIP > 0 /* If Intransit data exists*/
     && PC5REC.XGPCD != "03") /* not apparel*/

      PC0OW00.XXXPRCNM = "PC0OS41"; /* Module identification*/
      PCWREC.XXXMSGNO = 388; /* No data for selection requested*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> Roll back all changes*/
      exit stack; /* ===> Return to display message*/

    end /* ===> proceed to process status update*/
                                   /* request*/

    move PC0OW03 to VPOITM05 withV60Compat; /* Restore item to process*/
    set VPOAIT02 empty; /* Init item audit rec*/
    VPOAIT02.PCIBFRA = VPOITM05.PC6STAT; /* Before Status*/
    VPOAIT02.PCIAFTA = PC0OW01.PC6STAT; /* After Status*/
    VPOITM05.PC6STAT = PC0OW01.PC6STAT; /* Status*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status change date*/

    PC0OS07(); /* Update PO item*/

    if (VPOITM05.XGPCD == "02")
      VPOAIT02.YOACD = "19"; /* Audit type = status*/
    else
      VPOAIT02.YOACD = "76"; /* Audit type = status*/
    end

    VPOAIT02.YACCD = PC0OW01.YACCD; /* Audit comment code*/

    if (VPOITM05.XGPCD == "02"
     || VPOITM05.XGPCD == "03")
      PC0OS08(); /* Insert PO item audit*/
    end

    PC0OW00.PC0OWITM = "Y"; /* Item updated flag = yes*/

  end

end // end PC0OS42

// "CX" Status Update Routine
Function PC0OS43()
   /* ------------------------------------------------------------*/
   /* Process the "CX" Status item Update Request*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "OP"
   || VPOITM05.PC6STAT == "FC"
   || VPOITM05.PC6STAT == "TN") /* tentative status*/

    /* ------------------------------------------------------------*/
     /* If no balance to ship qty for any size then return.*/
    /* ------------------------------------------------------------*/

    move VPOITM05 to PC0OW03 withV60Compat; /* Save item to process*/
    PC0OS06(); /* Get the balance to ship*/

    move PC0OW03 to VPOITM05 withV60Compat; /* Restore item to process*/

    PC0OW00.PC0OWIX1 = 1; /* Initialize index*/
    while (PC0OW00.PC0OWIX1 <= 40 /* While index <= 40*/
     && PC5REC.PC5BALC[PC0OWIX1] <= 0) /* and no balance to ship*/
      PC0OW00.PC0OWIX1 = PC0OW00.PC0OWIX1 + 1; /* Increment index*/
    end

    if (PC0OW00.PC0OWIX1 == 41 /* If no balance exists*/
     && VPOHDR02.YPUCD != "TN")
      return; /* Return*/
    end

    /* ------------------------------------------------------------*/
     /* If there is intransit quantities,  then error*/
    /* ------------------------------------------------------------*/

    if (PC5REC.PC5TSHIP > 0) /* ===>              If Intransit data exists*/

      PC0OW00.XXXPRCNM = "PC0OS43"; /* Module identification*/
      PCWREC.XXXMSGNO = 388; /* Intransit data exist error msg*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> Roll back all changes*/
      exit stack; /* ===> Return to display message*/

    end /* ===> proceed to process status update request*/

    PC0OS09(); /* ===> Cancel Item's QTYS and update item status*/

  end

end // end PC0OS43

// "OP" Status Update Routine
Function PC0OS44()
   /* ------------------------------------------------------------*/
   /* Process the "OP" Status update request*/
   /* ------------------------------------------------------------*/

  if (VPOITM05.PC6STAT == "NC"
   || VPOITM05.PC6STAT == "FC"
   || VPOITM05.PC6STAT == "CL"
   || VPOITM05.PC6STAT == "TN")

    set VPOAIT02 empty; /* Init item audit rec*/
    VPOAIT02.PCIBFRA = VPOITM05.PC6STAT; /* Before Status*/
    VPOAIT02.PCIAFTA = PC0OW01.PC6STAT; /* After Status*/
    VPOITM05.PC6STAT = PC0OW01.PC6STAT; /* Status*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status change date*/
    VPOITM05.XXXUSRID = COMMAREA.CAUSERID; /* User ID*/

    PC0OS07(); /* ===> Update PO item*/

    if (VPOITM05.XGPCD == "02")
      VPOAIT02.YOACD = "19"; /* Audit = status*/
    else
      VPOAIT02.YOACD = "76"; /* Audit = status*/
    end

    VPOAIT02.YACCD = PC0OW01.YACCD; /* Audit comment code*/

    if (VPOITM05.XGPCD == "02"
     || VPOITM05.XGPCD == "03")
      PC0OS08(); /* Insert PO item audit*/
    end

    PC0OW00.PC0OWITM = "Y"; /* Item updated flag = yes*/

  end

end // end PC0OS44

// Do P.O. Header "Status" Update
Function PC0OS50()
   /* ----------------------PC0OS50-------------------------------*/

         /* SET HDR STATUS TO A 'CX' FROM A  'IN'*/

   /* ----------------------PC0OS50-------------------------------*/

  if (PC8REC.XGPCD == "01" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "03" /* ===> valid GPC Code*/
   || PC8REC.XGPCD == "07") /* ===> valid GPC Code*/

    set VPOHDR02 empty; /* ===>initialize D.B. Call record*/

    VPOHDR02.XGPCD = PC8REC.XGPCD;
    VPOHDR02.PO-REG-CD = PC8REC.PO-REG-CD; /* ==>P.O. region*/
    VPOHDR02.PC3PONBR = PC8REC.PC3PONBR; /* ==>P.O. Number*/

    XSPCS14(); /* ===> Get P.O. Header row*/

    set VPOAHD02 empty; /* ===> intialize Header Audit record*/
    VPOAHD02.PCIBFRA = VPOHDR02.YPUCD; /* ===> Status before*/
    VPOAHD02.PCIAFTA = "CX"; /* ===> Status after*/

    VPOHDR02.YPUCD = "CX"; /* ===> Load D.B. Call record*/
    VPOHDR02.PC3STADT = XX0XW01.XX0XWDAT; /* ===> update status dt*/
    VPOHDR02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ===> update change dt*/
    VPOHDR02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> update change time*/

    XSPCS15(); /* ===> Update P.O. Header row*/

    if (PC8REC.XGPCD == "02" /* ===> valid GPC Code*/
     || PC8REC.XGPCD == "03") /* ===> valid GPC Code*/

      XSPCS16(); /* ===> insert P.O. Header audit row*/

    end

  end

   /* ********************** End of PC0OS50 ***********************/
end // end PC0OS50

// Select (S2) Set/Open  VPOITM05
Function PC0OS71()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "S2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> Roll Back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0OW00.XXXPRCNM = "PC0OS71";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS71"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS11 ***********************/
end // end PC0OS71

// Fetch  (N2) Next row  VPOITM05
Function PC0OS72()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "N2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, see if this sty-clr is on dorder,vitem001*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0OW00.PC0OWDC1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0OW00.XXXPRCNM = "PC0OS72";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS72"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS12 ***********************/
end // end PC0OS72

// Close  (C2) Set       VPOITM05
Function PC0OS73()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C2";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC0OW00.XXXPRCNM = "PC0OS73"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS73"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of XSPCS13 ***********************/
end // end PC0OS73

// Obtain dtrans.vtsloc01
Function PC0OS74()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Init rec*/

  TSCREC.TSCLOCCD = PC2REC.TSCLOCCD;

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0OS74"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0OM001.XXXPRCNM = "PC0OS74";
  exit stack;

end // end PC0OS74

// Select item cursor  - VPOITM05
Function PC0OS75()
  PC0OW00.PC0OWDC1 = "N"; /* End of VPOITM05 flag*/

  set VPOITM05 empty; /* Initialize item record*/

   /* ------------------------------------------------------------*/
   /* Format PC6REC with key values or wildcards for select set*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "S2"; /* Select function*/

  VPOITM05.PC3PONBR = VPOHDR02.PC3PONBR;
  VPOITM05.XGPCD = PC0OW01.XGPCD; /* GPC code*/

  PCYREC.PCYFRDT = 0; /* From PO ID*/
  PCYREC.PCYTODT = 999999999; /* To PO ID*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS75"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS75"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS75

// Fetch next item     - VPOITM05
Function PC0OS76()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "N2"; /* Fetch function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0OW00.PC0OWDC1 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS76"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS76"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS76

// Close item cursor   - VPOITM05
Function PC0OS77()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "C2"; /* Close function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0OW00.XXXPRCNM = "PC0OS77"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS77"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0OS77

// load chg memo and oa memo flag
Function PC0OSA8()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/
   /* this will force a value into ezetst in case value = 0*/
  if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/
  end

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        if (PC0OW01.PC2CUXID != " " /* if customer changed*/
         || PC0OW01.PC6OETS != 0    /* or OETS date changed*/
         || PC0OW01.PC6STAT == "CX") /* or status changed to "CX"*/
          VPOAIT02.PCJMEMO = " ";
        else
          VPOAIT02.PCJMEMO = "N";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end
      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end

    else /* ===> code not in table*/

      PC0OM002.XXXPRCNM = "PC0OSA8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0OSA8 ***********************/
end // end PC0OSA8

// Create FOB Price Templete
Function PC0OSB0()
   /* ------------------------------------------------------------*/

   /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* The prices found from this set of processes will be loaded*/
   /* to the PC0OW07 record which is the source for size insert.*/
      /* The item being used is the saved copy before cancel*/
   /* was performed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
    /* note: the VPOITM05 has the current update data already*/
          /* all that needs done is to wildcard other data*/
   /* ------------------------------------------------------------*/

  PC0OW00.PC0OWEOF = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/
  move "N" to PC0OW07.PC7FOBFL[1] for all;

  if (PCOREC.PCORECPF == "N")
    move 0 to PC0OW07.FY4FOBPR[1] for all;
  else
    move PCOREC.FY4FOBPR to PC0OW07.FY4FOBPR[1] for all;
  end

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.PC2CUXID = "*"; /* ===>*/
  VPOITM05.XWHCD = "*"; /* ===>*/

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

  PC0OSB1(); /* ========> select set and open cursor*/

  PC0OSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate FOB ovrd data asso. with each row.*/
     /* Load the FOB price tempelete with flag and price*/
     /* for the 40 size bucket associated with each item.*/
   /* Fetch and accumulate the total QTYs asso. with each row.*/

   /* ------------------------------------------------------------*/

  while (PC0OW00.PC0OWEOF == "N") /* Until end of temp. item cursor*/

    if (VPOITM05.PC6STAT == "OP" /* ===> item status code*/
     || VPOITM05.PC6STAT == "FC") /* ===> item status code*/

      PC0OSB6(); /* ==========> get size record row*/

      PC0OW00.PC0OWIX1 = 1; /* ===> initialize temp. index*/

      while (PC0OW00.PC0OWIX1 <= 40) /* Until all sizes read*/

        /* ------------------------------------------------------------*/
         /* accumulate FOB ovrd data asso. with each row.*/
        /* ------------------------------------------------------------*/

        if (VPOSIZ02.PC7FOBFL[PC0OWIX1] == "Y")
                                             /* ===> load FOB override data*/

          PC0OW07.FY4FOBPR[PC0OWIX1] = VPOSIZ02.FY4FOBPR[PC0OWIX1];
          PC0OW07.PC7FOBFL[PC0OWIX1] = "Y";

        end

        PC0OW00.PC0OWIX1 = PC0OW00.PC0OWIX1 + 1; /* ===> increment temp. index*/

      end /* ===> while more sizes*/

    end /* ===> status check*/

    PC0OSB2(); /* ==========> Fetch next item row*/
    /* ========================================> driving read*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0OSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0OSB0 ***********************/
end // end PC0OSB0

// Select (S7) Set/Open  VPOITM05
Function PC0OSB1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0OW00.XXXPRCNM = "PC0OSB1"; /* Process name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map1 before re-display*/
    converseLib.clearScreen();
     /* Reset map2 before re-display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMNM = "PC0OSB1"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map2*/

   /* **                                                        ***/
   /* ********************** End of PC0OSB1 ***********************/
end // end PC0OSB1

// Fetch  (N7) Next row  VPOITM05
Function PC0OSB2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0OW00.PC0OWEOF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0OW00.XXXPRCNM = "PC0OSB2"; /* Process name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map1 before redisplay*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PC0OSB2 FETCH NEXT ITEM NUMBER";
  TA1REC.TA1PGMNM = "PC0OSB2"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map2*/

   /* **                                                        ***/
   /* ********************** End of PC0OSB2 ***********************/
end // end PC0OSB2

// Close  (N7) Set       VPOITM05
Function PC0OSB3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0OW00.XXXPRCNM = "PC0OSB3"; /* Process name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map1 before redisplay*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMNM = "PC0OSB3"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  PC0OW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0OW00.PC0OWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0OW00.PC0OWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0OW00.PC0OWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0OW00.PC0OWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0OW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map2*/

   /* **                                                        ***/
   /* ********************** End of PC0OSB3 ***********************/
end // end PC0OSB3

// Select (S ) Unique    VPOSIZ01
Function PC0OSB6()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0OW00.XXXPRCNM = "PC0OSB6"; /* module identifier*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Reset map1 before redisplay*/
    converseLib.clearScreen();
     /* Reset map2 before redisplay*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OSB6"; /* Program name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0OSB6 ***********************/
end // end PC0OSB6

// Set-up/get Factory FOB Prices
Function PC0OSB7()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  set PCOREC empty;
  PCOREC.XGPCD = VPOITM05.XGPCD;
  PCOREC.FY1FCTYC = VPOITM05.FY1FCTYC;
  PCOREC.SY1STNBR = VPOITM05.SY1STNBR;
  PCOREC.SY2CLRID = VPOITM05.SY2CLRID;
  PCOREC.XDMCD = VPOITM05.XDMCD;
  PCOREC.XQACD = VPOITM05.XQACD;
  PCOREC.XUMCD = VPOITM05.XUMCD;
  PCOREC.XPGCD = VPOITM05.XPGCD;
  PCOREC.PC3POIDT = VPOITM05.PC3POIDT;
  PCOREC.PC3CRDT = VPOHDR02.PC3CRDT;
  PCOREC.PCFSEYR = VPOHDR02.PCFSEYR;
  PCOREC.XSECD = VPOHDR02.XSECD;

  if (PC0OM002.PC2CUXID > " ")
    VPOITM05.PC2INSEG = PC2REC.PC2INSEG;
  else /* ===>Cust = blank*/
    VPOITM05.PC2INSEG = "000";
  end

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* set appropriate flag and messages*/
   /* the PCOREC will contain the data necessary for FOB price*/
   /* processing and will not be modified until the next item*/
   /* is processed.*/
   /* ------------------------------------------------------------*/

  if (PCOREC.PCORECPF == "N")

  end

   /* **                                                        ***/
   /* ********************** End of PC0OSB7 ***********************/
end // end PC0OSB7

// Select (S7) Set/Open  VPOITM05
Function PC0OSE1()
   /* ------------------------------------------------------------*/
   /* Style/Color/Dim processing*/
   /* ------------------------------------------------------------*/

  set OP2REC empty;
  PC0OW00.PC0OWCSO = PC0OM002.OP1CUOID;
  OP2REC.OP1PARTN = PC0OW00.PC0OWPAR;
  OP2REC.OP1CUOID = PC0OM002.OP1CUOID;
  OP2REC.OP1NORID = PC0OM002.OP1NORID;
  OP2REC.XGPCD = VPOITM05.XGPCD;
  OP2REC.SY1STNBR = VPOITM05.SY1STNBR;
  OP2REC.SY2CLRID = VPOITM05.SY2CLRID;
  OP2REC.XDMCD = VPOITM05.XDMCD;
   /* MOVE ' ' TO OP2REC.OP2CGPCD;     /* COOR GROUP CODE*/

  PC0OSE2(); /* Use Se to scan sales order item table*/

  if (SQLCA.VAGen_SQLCODE == 0 /* FOUND*/
   || SQLCA.VAGen_SQLCODE == -811) /* FOUND*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
      set PC0OM002.OP1CUOID cursor, bold;
      set PC0OM002.OP1NORID bold;
      PC0OW00.XXXPRCNM = "PC0OSE1";
      converseLib.validationFailed(442); /* SALES ORDER ITEM NOT FOUND*/
      return;
    end
  end

  return;

   /* ------------- End of process pc0nSE1 -----------------------*/

end // end PC0OSE1

// Verify Order Number
Function PC0OSE2()
   /* ------------------------------------------------------------*/
   /* Obtain Sales Order Item from IOMOD IO0440.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SE", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* ROW NOT FOUND*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0OW00.XXXPRCNM = "PC0OSE2"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0OW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------- End of STATEMENT PC0OSE2 -----------------------*/

end // end PC0OSE2

//*** RECORD=PC0OW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// y2kfix   11-18-97   oricha  added pc0owdcy for working date
//                             with a century.
// ***********************
Record PC0OW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 PCWMAP PCWMAP ; 
  10 TA2GRBMM TA2GRBMM ; 
  10 PC0OWDC1 PC0OWDC1 ; 
  10 PC0OWDC2 PC0OWDC2 ; 
  10 PC0OWEOF PC0OWEOF ; 
  10 PC0OWCFG PC0OWCFG ; 
  10 XXX1 XXX1 ; 
  10 PC0OWIX1 PC0OWIX1 ; 
  10 PC0OWITM PC0OWITM ; 
  10 PC0OWFLD PC0OWFLD ; 
  10 PC0OWKEY PC0OWKEY ; 
    15 PC0OWCD1 PC0OWCD1 ; 
    15 PC0OWCD2 PC0OWCD2 ; 
  10 PC0OWAVC PC0OWAVC ; 
    15 PC0OWAV1 PC0OWAV1 ; 
    15 PC0OWAV2 PC0OWAV2 ; 
    15 PC0OWAV3 PC0OWAV3 ; 
    15 PC0OWAV4 PC0OWAV4 ; 
    15 PC0OWAV5 PC0OWAV5 ; 
    15 PC0OWAV6 PC0OWAV6 ; 
    15 PC0OWAV7 PC0OWAV7 ; 
    15 PC0OWAV8 PC0OWAV8 ; 
  10 PC0OWNUM PC0OWNUM ; 
    15 PC0OWNM1 PC0OWNM1 ; 
    15 PC0OWNM2 PC0OWNM2 ; 
  10 PC0OWSWR PC0OWSWR ; 
  10 PC0OWDCY PC0OWDCY ; 
    15 PC0OWDCC PC0OWDCC ; 
    15 PC0OWDTE PC0OWDTE ; 
  10 PC0OWPOD PC0OWPOD ; 
    15 PC0OWSYR PC0OWSYR ; 
      20 PC0OWCC PC0OWCC ; 
      20 PC0OWYY PC0OWYY ; 
    15 PC0OWM1 PC0OWM1 ; 
    15 PC0OWM2 PC0OWM2 ; 
  10 PC0OWPID PC0OWPID ; 
    15 PCFSECD PCFSECD ; 
    15 PC0OWD1 PC0OWD1 ; 
    15 PC0OWMM1 PC0OWMM1 ; 
    15 PC0OWD2 PC0OWD2 ; 
    15 PC0OWMM2 PC0OWMM2 ; 
    15 PC0OWD3 PC0OWD3 ; 
    15 FY1FCTYC FY1FCTYC ; 
  10 PC6PLAN PC6PLAN ; 
  10 PC0OW-COUNT-ALL PC0OW-COUNT-ALL ; 
  10 PC0OW-COUNT-CX PC0OW-COUNT-CX ; 
  10 PC0OW-PLAN-FOUND-FL PC0OW-PLAN-FOUND-FL ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0OWKA1 PC0OWKA1 ; 
      20 PC0OWKN1 PC0OWKN1 ; 
      20 * char(1) ; 
    15 PC0OWKA2 PC0OWKA2 ; 
      20 PC0OWKN2 PC0OWKN2 ; 
      20 * char(1) ; 
    15 PC0OWKA3 PC0OWKA3 ; 
      20 PC0OWKN3 PC0OWKN3 ; 
      20 * char(1) ; 
    15 PC0OWKA4 PC0OWKA4 ; 
      20 PC0OWKN4 PC0OWKN4 ; 
      20 * char(1) ; 
  10 PC0OWCSO PC0OWCSO ; 
    15 * num(8) ; // op-ord-part-char
    15 PC0OWPAR num(1) ; // op-ord-part-char
  10 PC0OWTPO PC0OWTPO ; 
  10 PC0OW-TEMPO1 PC0OW-TEMPO1 ; 
  10 PC0OW-TEMPO2 PC0OW-TEMPO2 ; 
  10 PC0OW-VALID-POFLG PC0OW-VALID-POFLG ; 
  10 PC0OW-UPDATE-ITMFLG PC0OW-UPDATE-ITMFLG ; 
  10 PC0OW-FOUND-ITMFLG PC0OW-FOUND-ITMFLG ; 
  10 PC0ONSC PC0ONSC ; 
  10 PC0OWVS PC0OWVS ; 
end // end PC0OW00

//*** RECORD=PC0OW01 ****
// ******* MAP ADDRESS STORAGE FOR PC05M010 *******************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 05/23/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0OW01 type basicRecord
  5 PC0OW1GP PC0OW1GP ; 
    10 XGPCD XGPCD ; 
    10 XGPDESC XGPDESC ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PC0OWPOD PC0OWPOD ; 
      15 PC0OWCC PC0OWCC ; 
      15 PC0OWYR PC0OWYR ; 
      15 PC0OWM1 PC0OWM1 ; 
      15 PC0OWM2 PC0OWM2 ; 
    10 FY1FCTYC FY1FCTYC [2] ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC4SDESC PC4SDESC ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC0OWPON PC0OWPON ; 
    10 YSMXDV YSMXDV ; 
    10 YSMSMDSC YSMSMDSC ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUPO OP1CUPO ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 XXXUSER XXXUSER ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC0OWRTA PC0OWRTA ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6STAT PC6STAT ; 
    10 YACCD YACCD ; 
    10 YACDESC YACDESC ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC0OWETD PC0OWETD ; 
      15 PC0OWETS PC0OWETS ; 
    10 PC0OWETN PC0OWETN ; 
      15 PC0OWETO PC0OWETO ; 
    10 PC0OWOEN PC0OWOEN ; 
      15 PC0OWOET PC0OWOET ; 
    10 YMTCD YMTCD ; 
    10 PC0OWCT1 PC0OWCT1 ; 
    10 PC0OWCT2 PC0OWCT2 ; 
    10 CAFROMAP CAFROMAP ; 
end // end PC0OW01

//*** RECORD=PC0OW02 ****
// ********** FUNCTION VARIABLE FOR CALL TO IO MODS ***********
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/25/89   JNEWMA   NEW RECORD.
// ***********************
Record PC0OW02 type basicRecord
  5 PC0OWFNC PC0OWFNC ; 
    10 PC0OWFN1 PC0OWFN1 ; 
    10 PC0OWFN2 PC0OWFN2 ; 
end // end PC0OW02

//*** RECORD=PC0OW03 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0OW03       (---> Mirrors vpoitm05
// 
// This record is used to hold the old item being changed.
// 
// ***********************************************************
// *                                                         *
// * 09/21/99   PCF205  DRAMMO  Modified to mirror VPOITM04  *
// * 03/24/00   PCF210J SBUNGO  Modified to mirror VPOITM05  *
// *                                                         *
// ***********************************************************
// ***********************
Record PC0OW03 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0OW03

//*** RECORD=PC0OW04 ****
// ******* COPY OF PRODUCTION ORDER DESTINATION SIZE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/01/89   JNEWMA   New record.
// 06/15/93   GAMEN    Add zfc-crcy-cd
// ***********************
Record PC0OW04 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0OW04

//*** RECORD=PC0OW05 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0OW05       (---> Mirrors vpoitm05
// 
// This record is used for getting the next item plan number
// 
// ***********************************************************
// *                                                         *
// * 09/21/99   PCF205  DRAMMO  Modified to mirror VPOITM04  *
// * 03/24/00   PCF210J SBUNGO  Modified to mirror VPOITM05  *
// *                                                         *
// ***********************************************************
// ***********************
Record PC0OW05 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0OW05

//*** RECORD=PC0OW07 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/05/88   MCHRIS   New record.
// 06/15/93   GAMEN    Add zfc-crcy-cd.
// --------   ------   ---------------------------------------
// 
//    This records is a copy of the size record associated with
// the item that is updated due to a order type change.
// 
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// ***********************
Record PC0OW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0OW07

//*** RECORD=PC0OW08 ****
// ******************   PC0OW08   *****************************
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 04/26/93   KSANFO   New record.
// --------   ------   ---------------------------------------
// 
// This record is a redefines of the PCWREC.PCWUSER3 field.
// This soul purpose of this record, is to accept the Sales
// Order number that is passed to PC0O from PC0Z.
// 
// ******************   PC0OW08   *****************************
// ***********************
Record PC0OW08 type basicRecord
  5 PC0OW08-GROUP PC0OW08-GROUP ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 * char(301) ; 
end // end PC0OW08

// SAP flag
DataItem PC0ONSC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count all status
DataItem PC0OW-COUNT-ALL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count cx/cl status
DataItem PC0OW-COUNT-CX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0OW-FOUND-ITMFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Plan found flag
DataItem PC0OW-PLAN-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0OW-TEMPO1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0OW-TEMPO2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0OW-UPDATE-ITMFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PC0OW-VALID-POFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PC0OW08-GROUP char(307)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group of selection fields
DataItem PC0OW1GP char(256)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po label
DataItem PC0OWAV1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po nbr
DataItem PC0OWAV2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style label
DataItem PC0OWAV3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PC0OWAV4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// space label
DataItem PC0OWAV5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem PC0OWAV6 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// space label
DataItem PC0OWAV7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment
DataItem PC0OWAV8 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment for avlrec
DataItem PC0OWAVC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PC0OWCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First part of key
DataItem PC0OWCD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second part of key
DataItem PC0OWCD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirm flag
DataItem PC0OWCFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem PC0OWCSO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color count
DataItem PC0OWCT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Plan count
DataItem PC0OWCT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dash 1
DataItem PC0OWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash 2
DataItem PC0OWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash 3
DataItem PC0OWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC0OWDC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC0OWDC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century cc
DataItem PC0OWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  ccyymmdd
DataItem PC0OWDCY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  work save date yymmdd
DataItem PC0OWDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of file flag
DataItem PC0OWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_Est_hdt numeric
DataItem PC0OWETD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_ETAL_OVRD_DT numeric
DataItem PC0OWETN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_ETAL_OVRD_DT alpha
DataItem PC0OWETO char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_Est_hdt alpha
DataItem PC0OWETS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fields entered flag
DataItem PC0OWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of function
DataItem PC0OWFN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of function
DataItem PC0OWFN2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function for IO mod to perform
DataItem PC0OWFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Items updated flag
DataItem PC0OWITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index
DataItem PC0OWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0OWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0OWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0OWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0OWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for table access
DataItem PC0OWKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0OWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0OWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0OWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0OWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID buy month
DataItem PC0OWM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0OWM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID buy month
DataItem PC0OWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery mnoth
DataItem PC0OWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric byte 1 as char
DataItem PC0OWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric byte 2 as char
DataItem PC0OWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric redefine as char
DataItem PC0OWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_orig_est_hdt numeric
DataItem PC0OWOEN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_orig_est_hdt alpha
DataItem PC0OWOET char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted for display
DataItem PC0OWPID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted
DataItem PC0OWPOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save map PC_PO_NBR
DataItem PC0OWPON int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RTA from map
DataItem PC0OWRTA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PC0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID season year
DataItem PC0OWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PC0OWTPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SAP flag
DataItem PC0OWVS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID year
DataItem PC0OWYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0OWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end