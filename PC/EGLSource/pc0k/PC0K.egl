package pc0k;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0K ****
// ****************  PRODUCTION ORDER SYSTEM ******************
// 
//              P.O. Product Inquiry/Maintenance
//              --------------------------------
// 
//    This program will allow the user to access multiple
// P.O. Products for inquiry/maintenance functions. Access to
// this application can be done from a number of applications.
//    Method 1 is by entering option 31 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to enter
// the desired criteria on a particular P.O. Product and be
// transfered to this application according to the entered
// data.
//    Method 2 is by entering option 4 from the P.O. Order
// Menu screen.  In doing so, the user has the ability to enter
// the desired criteria on a particular P.O. Product and be
// transfered to this application based on the selections made
// from the list screen.
//    This program will allow inquiry and change of multiple
// P.O. Product rows transfered by the above two methods.
//    The user will be able to cycle to the next selected row
// by pressing enter and return the user to the application
// that it came from.  Pressing PF3 in the cycle will return
// the user to the application that it came from.
//    The user will be able to transfer to other applications
// according to specified PF Keys.
//    Curtain fields will be protected and thus can not be
// changed dependent on security and GPC code.
// 
// 
//    Program Notes:
//    --------------
// 
// 1.)   There are mult Select Sets in this program which use
//        temporary cursor switches, and are trash after use.
//        Not intended for use over several process or carried
//        into one of the major process groups in this program.
// 
//        - The PC0KWSWT cursor switch is the main temporary
//          index used in this application.
// 
//        - The PC0KWSWC cursor is a second temporary cursor
//          used in this application when double nested
//          data base calls are necessary for processing.
// 
// 2.)    There are five indexes used in this program, each
//        having a specific purposes.
// 
//    Index:         Purpose:
//   ---------      -------------------------------------------
//    PC0MWIXR ----> Record index (for size index in record)
//             ---->              (& used in QTY change Verify)
//    PC0MWIXM ----> Size index   (for size index in the map)
//             ---->              (& used in QTY change Verify)
//    PC0MWIXS ----> Size index (for next size loaded)
//             ---->              (& used in scrolling sizes)
//    PC0MWIXT ----> Tempararory index (used/abuse/trash index)
//    PC0MWIXF ----> Finder index used in FOB audits
// 
// 3.)    There are several processing groups in this program
//        that are identified by unique prefix group names.
// 
//    PC0K100  ----> Inquiry logic (Left Screen)
//    PC0K200  ----> Inquiry logic (Right Screen)
//    PC0K300  ----> Maintenance logic (Left Screen)
//    PC0K400  ----> Maintenance logic (Right Screen)
//    PC0K500  ----> Verify/Cascade FOB routine
//    PC0K600  ----> Footwear Audit routine
//    PC0K700  ----> Apparel Audit routine
//    PC0K800  ----> Data Base Update routine
//    PC0K900  ----> Data Base Cancel routine
// 
// 
// 3.)    There are several records maintained in this program.
// 
//    PC0KW00  ----> General Working Storage
//                   (accum, indexes, and misc.)
// 
//    PC0KW01  ----> Main Working Storage
//                   (used as the source for maintenance D.B.
//                    updates)
// 
//    PC0KW02  ----> Pass Data working storage.
//                   (used to format pass data when transfer
//                    to lower level application is requested)
// 
//    PC0KW03  ----> Copy of PCWREC working storage.
//                   (used to re-format pcwrec when transfer
//                    to another application fails)
// 
//    PC0KW04  ----> Copy of VPOITM03 W.S. (maintenance row)
//                   (used as a source for audits and
//                    data base updates. (Item)
// 
//    PC0KW05  ----> Copy of vposiz02 W.S. (maintenance row)
//                   (used as a source for audits and
//                    data base updates. (size)
// 
//    PC0KW06  ----> Copy of VPOITM03 W.S. (merge row)
//                   (used as a source for audits and
//                    data base updates. (Item)
// 
//    PC0KW07  ----> Copy of vposiz02 W.S. (merge row)
//                   (used as a source for audits and
//                    data base updates. (size)
// 
// 4.)    For the working storage records, the only records
//        loaded with data are:
// 
//    PC0KW00  ----> General Working Storage
// 
//    PC0KW01  ----> Main Working Storage
// 
//    PC0KW02  ----> Pass Data working storage.
// 
//    PC0KW04  ----> Copy of VPOITM03 W.S. (maintenance row)
//                   and this particular record is only
//                   modified with a cancel status when
//                   a PF15 is pressed or a key change
//                   has a destination change w/ merge.
// 
// **                                                        **
// *************** End of Application Prologue ****************
// 
// 
// 
// ************************************************************
// **                                                        **
// *                                                          *
// *   DATE      NAME    DESCRIPTION OF CHANGE                *
// * --------   -------  ------------------------------------ *
// * 08/01/89   SFORD    New Application                      *
// *                                                          *
// * 03/29/90   SFORD    ETAL Default flag logic enhancement  *
// *                                                          *
// * 06/07/90   SFORD    Opened-up the whse & cust fields for *
// *                     GPC = 02 and Order Types = FTs       *
// *                                                          *
// * 06/12/90   SFORD    Fixed bug for selecting intransit    *
// *                     data, it was using wrong status code *
// *                                                          *
// * 06/14/90   SFORD    Enhanced program to include customer *
// *                     need date for GPC = '02'.            *
// *                                                          *
// * 07/06/90   GAMEN    Fixed B-grade FOB pricing problem    *
// *                                                          *
// * 08/17/90   CHAERT   Added scheduler user id              *
// *                                                          *
// * 09/19/90   GAMEN    Fix FOB pricing problem when it      *
// *                     automatically updates FOB price.     *
// *                                                          *
// * 09/25/90   lsutto   allow gpc 07 access                  *
// *                                                          *
// * 10/15/90   GAMEN    Fix audit comment being required     *
// *                     when no data changes.                *
// *                                                          *
// * 11/06/90   lsutto   DB2 changes - initialize PR6PREFL    *
// *                     and PR6REC.XXXUSRID.                 *
// *                                                          *
// * 11/12/90   ppeter   A51 - add misc charges (PC6MICHG) for*
// *                     apparel to Map 1 and VPOITM01        *
// *                     processing.                          *
// *            gamen    added onetime code to hide misc      *
// *                     charges in pc0k120 and pc0k920       *
// *                                                          *
// * 12/13/90   ppeter   A77 - put the sign-on of user cancel-*
// *                     ling an item in VPOITM01.xxx-user-id.*
// *                     (done for all GPC codes).            *
// *                                                          *
// * 01/09/91   lsutto   Fixed field on map2, which was not   *
// *                     being loaded (root style name).      *
// *                                                          *
// * 01/30/91   ZLefko   A77B - Display only user cancelled   *
// *                     items if status request is 'CX' and  *
// *                     display all cancelled items if       *
// *                     request is for '*X', for GPC '03' only
// *                                                          *
// * 02/12/91   ppeter   DB2 table changes                    *
// *                                                          *
// * 02/15/91   ppeter   A97B - 1)add function to change owner*
// *                     group, with audits (type 82,59/60,61)*
// *                     limited to apparel by map;           *
// *                     2)update screener AVAIL inventory when
// *                     there is a qty change on an apparel  *
// *                     screener PO other than 'SD' or 'CD'. *
// *                                                         **
// * 02/27/91   lsutto   add warning for ets date < today     *
// *                                                          *
// * 04/18/91   ppeter   Restored original PC0KSF9 to set OA  *
// *                     audit flag correctly.                *
// *                                                          *
// * 04/30/91   CHAERT   Change Balance to Ship to wildcard   *
// *                     Owner Group for all but t-shirt items*
// *                     PC0K315, 822, 852                    *
// *                                                          *
// * 05/13/91   GAMEN    Allow footwear to change RTA for 'FT'*
// *                     p.o. types, but only if the caclvl(5)*
// *                     flag is a 'Y'. Currently this is for *
// *                     one user only, DHULME.               *
// *                                                          *
// * 05/30/91   GAMEN    Add code top process interims just   *
// *                     just like screened goods as far as   *
// *                     available inventory is concerened.   *
// *                     See statement group pc0kss0.         *
// *                                                          *
// * 05/30/91   PPETER   Add code to xfer in and out of pb0d  *
// *                     in the flow portion of xppc001.      *
// *                                                          *
// * 06/10/91   LSUTTO   DB2 changes in pc0ks61               *
// *                                                          *
// * 07/22/91   LSUTTO   default price changes                *
// *                                                          *
// * 09/05/91   LSUTTO  add fy-fob/po-fob select pfkey (pf12) *
// * 10/08/91   LSUTTO   DB2 changes in pc0ks61               *
// * 10/15/91   LSUTTO   remove ovride prcs when showing fy-  *
// *                     fob (pc0k117,317)                    *
// * 10/18/91   LSUTTO   in 161 add move of pc3poidt to pcwrec*
// *                     in 121, 321 allow pf12 if cailvl(10) *
// * 11/01/91   LSUTTO   default audit comment to 92 (data    *
// *                     entry error) for QQ (B-grade) po(s)  *
// * 12/04/91   LSUTTO   fix bug that sends out err mess 378  *
// *                     in pc0k806
// * 12/10/91   LSUTTO   fix bug that loops err mess 84 when  *
// *                     adding extra sizes (pc0k317)
// * 12/18/91   chaert   pc0k451, fix read of dreado.vorhdrr1 *
// * 03/18/92   lsutto   db2 chgs add so# to poasz            *
// * 03/23/92   LSUTTO   SALES ORDER CHANGES                  *
// *                        IN PC0KSB1,SB2,SB3,S41,S42,S43    *
// *                        USE SH & SI INSTEAD OF S7 & S8    *
// * 05/06/92   lsutto   fix bad calc of partn in s16         *
// * 05/07/92   chaert   change ETAL calc A182, pc0k112,312   *
// * 05/22/92   lsutto   fix so# non-move bug in pc0k315      *
// * 06/23/92   lsutto   ROUND CALC OF B-GRADE PRICE          *
// * 07/10/92   lsutto   MOVE CUST-PO IN PC0K556              *
// * 07/20/92   chaert   increase total value of po to $1mil  *
// * 07/30/92   chaert   do not use op-cust-po in chek for    *
// *                     have key fields changed.             *
// * 08/17/92   lsutto   dont check blank avial invntry on    *
// *                     crested t's or on screeners done    *
// *                     in a foreign factory pc0k870,990    *
// * 09/01/92   lsutto   allow chng of whs and cust xref at   *
// *                     same time for FT,S1 po's  pc0k321    *
// * 09/16/92   gamen    Change xfmcd to xprcd when adjusting *
// *                     alt inv. pc0k870, pc0k990.           *
// *                                                          *
// * 09/30/92   ksanfo   allow maintenance to status 'TN':    *
// *                     pc0k315,317,364,520,820,900,910.     *
// * 10/22/92   chaert   change to xppc030 balance to ship    *
// *                     add mode of trans.                   *
// * 12/15/92   lsutto   custom logo chnges PC0K556           *
// *                     don't allow so chng for EM,CD,TS     *
// * 12/21/92   gamen    add late bookings flag to map 2      *
// * 05/07/93   dhales   decr. alt iventory for 'to' po's     *
// *                     for blank styles                     *
// * 06/07/93   ksanfo   add new po type = 'AD'.              *
// * 06/15/93   GAMEN    DB2 changes for Jun 14th, 1993. Add  *
// *                     ZFC-CRCY-CD.                         *
// * 06/21/93   chaert   chg se4 to use 'se' on dorder.vitem  *
// * 06/30/93   gamen    Use cacilvl(5) for access to whse    *
// *                     and cust xref for footwear p.o.'s.   *
// * 09/23/93   dhales   change to xspcs05 requires regen     *
// * 10/15/93   GAMEN    Add changes for whse 60 and 61.      *
// * 10/22/93   GAMEN    Fix ASRA on date validations.        *
// * 11/03/93   GAMEN    Remove PC9REC for DB2 changes.       *
// * 02/10/94   GAMEN    Enhance code to move the item seq    *
// *                     nbr to the item audit before alpha   *
// *                     filed. This will be used by the      *
// *                     case label extract, PC1270, to send  *
// *                     the info to the factory.             *
// * 05/05/94   dhales   dont adjust alt inventory if the     *
// *                     factory is not a screener fcty       *
// * 06/15/94   dhales   adjust alt inventory for crested     *
// * 01/20/95   GAMEN    Modify ETAL calc (xspcs07).          *
// * 02/07/95   GAMEN    Do not require s.o. for WHS65.       *
// * 02/28/95   GAMEN    Make changes for new DEURO customer  *
// *                     and order tables.                    *
// * 12/06/95   JNIESE   Changed the attributes for the so    *
// *                     field and modified the so edits for  *
// *                     apparel.                             *
// * 02/19/96   JNIESE   opened so field for apparel.         *
// * 02/28/96   JNIESE   changed processing for po type 'to'  *
// *                     when decrementing alt. inventory.    *
// * 03/20/96   JNIESE   dont adjust alt inv for blanks that  *
// *                     are not a 'to' po.                   *
// * 07/09/96   JNIESE   pcy199 - Air Freight percent project *
// * 09/11/96   GAMEN    REQUIRE XREF FIELD FOR WAREHOUSE 65  *
// * 10/21/96   jniese   REQUIRE so for mm, md, ds, & dc po's *
// * 11/21/96   jniese   Correct Problem with Size audits     *
// *                     being created with invalid info.     *
// * 12/06/96   jniese   recompile to get new xspcs05.        *
// * 04/29/97   asunda   recompile to get new xspcs05.        *
// * 06/02/97   PHARWO   CHANGES FOR PCA367 - PPR PROJECT     *
// * 06/25/97   jniese   corrections for ppr                  *
// * 10/09/97   jniese   correct display of prcnm in pc0k350  *
// * 11/05/97   kgraha   PCA415 - Add 'MX' po type.
// * 11/19/97   DRAMSE   PCF999 - Sales order # not required
// *                     for WHS67 and WHS68. Modified
// *                     PC0K556 and PC0k557.
// * 12/05/97   jniese   PCF999 - correct pc0ks23 to move cust
// *                     need date
// * 12/09/97   DRAMMO   Protecting OETS when GPC entered is 03
// *                     Changes are made in PC0K121, PC0K122
// *                     PC0K321, PC0K329, PC0K340.
// * 12/12/97   nfield   Y2K Compliance - changes to PC0K555
// * 01/17/97   greddy   Modified pc0k121,pc0k321,pc0k423,
// *                     pc0k440,pc0k450,pc0k805,pc0k860,
// *                     pc0km002 to allow updates for the
// *                     custmer need date when xgc code is
// *                     '02' and direct ship indicator not
// *                     equal to '1',OETS is made displayable
// *                     for foot wear PO's.
// * 02/10/98  DRAMSE   Changed to use VPRDCU03 instead of
// *                    PC2REC. Also changed to call VPRDCU03
// *                    instead of IO3340.
// *                    Changed: XPPC001(flow),PC0K110,PC0K310
// *                    PC0K552,PC0K557,PC0K558,PC0K556,PC0K366
// *                    PC0K368,PC0KS06,PC0KS98,PC0KSS0,PC0KSS1
// * 02/13/98  DRAMSE   Generated for XSPCS05 / XSPCS07
// * 04/23/98  KGRAHA   PCA353 Remove editing capabilities for
// *                    A/F nbr (Apparel only).
// * 06/10/98  drammo   PCF147 - Regen appln to get new
// *                    XSPCS05 & XSPCS06 which are changed to
// *                    include ST po type in ETAL calculation
// * 06/18/98  jniese   PCa422 - increase fob size
// * 07/09/98  drammo   PCF152 - Modified to allow qty changes
// *                    for footwear POs of 'OR' type
// *                    Changed: PC0K321, PC0K325, PC0K330,
// *                             PC0K340, PC0K355
// * 10/20/98  mhuynh   Generated due to changes to XPPC020
// * 11/09/98  jniese   pcf173 - allow so on ps pos.
// *                    changed pc0k556, pc0k557
// * 04/23/99  KGRAHA   Regen to get new XSPCS05 which now does
// *                    not include 'BA' in ETAL calculation.
// * 04/30/99  VKUMAR   Generated to move XSPCS31
// * 06/29/99  ATHELA   Changed PC0k860 to update one time ship
// *                    override flag
// * 07/12/99  TMISHR   Changed PC0KS70 to move gpc code from
// *                    PC0KW01 or PC0KM001 to find the sched
// *                    name from dprodg.vsusr01 table . Previo
// *                    -usly it was moving '03' irrespective
// *                    of the correct GPC CODE .
// * 09/24/99  vsanka   regenerated due to changes to xspcs05.
// * 09/30/99  SBUNGO   CHANGED TO USE NEW VIEW VPOITM04
// * 10/21/99  drammo   Modified to default bnk-cd to spaces
// *                    while inserting into itm tble.
// * 01/24/99  MNADEL   CORRECTED THE PROBLEM OF PRICES NOT
// *                    GETTING UPDATED PROPERLY DURING MERGING
// *                    OF ITEM AND SIZE RECORDS IN PC0K830.
// * 02/03/00  SBUNGO   CHANGED TO USE VIEW VFCTY003
// * 02/07/00  vsanka   pca479-changes for spain exception.
// * 03/24/00  SBUNGO   pcF210J CHANGED TO USE VIEW VPOITM05
// * 04/14/00  rmurth   corrected movements to
// *                    pc-rel-pln-ref-nbr of vpoitm05
// * 04/20/00  KGRAHA   When apparel transportation mode is AF
// *                    default NAF to 100 in PC0K322.
// *
// * 05/03/00  RSELVA   CHANGE THE LOGIC TO GET THE WHSE FROM
// *                    VPRDCU03, IF  CTRYCD  IS JAPAN &
// *                                  APAO-FL IS W     &
// *                                  WHSE    IS BLANK
// *                    MODIFIED: PC0KW00,PC0K330
// *                              PC0K360,PC0K860,PC00ENU
// * 05/18/00  SBUNGO  MODIFIED PROCESS PC0K320,PC0K420 TO
// *                   PREVENT MAINTENANCE FOR SAP PO'S
// *                   (note: no fields are allowed to change
// *                    in PC0K, for ets change only go to
// *                    P.P.R screen for sap po's)
// *
// * 08/02/00  RSELVA  Modified XSPCS05 for zeroing out of MADD
// *                   from 20001012 onwards
// * 08/09/00  vramac  Changed not to allow any fast path to
// *                   adding special instruction & product
// *                   for any sap po#
// * 08/13/00  vramac  Allow fast path for inquiry mode
// * 08/15/00  vramac  Protect Cancellation & adding sizes
// *                   for SAP PO#
// * 08/21/00  vramac  Allow SOs update for SAP PO#
// * 11/05/00  vramac  Changed to allow sap po# maintenance for
// *                   gpc '01' ONLY - PC0K130, PC0K230,
// *                   PC0K320, PC0K330, PC0K350, PC0K800,
// *                   PC0K420 & PC0K430
// * 11/17/00  vramac  Fix bug to populate OP1PARTN (order part
// *                   char) for sap po# maintenance - PC0K800
// * 12/21/00  rmurth  compiled for change in SGRP XSPCS07
// *                   XSPCS07 modified to have hardcoded PADD
// *                   for WHSE '51' and Origin USA for GPC 03
// * 04/11/01  spitch  change option opened for user who has
// *                   clvl(8)=y
// * 07/25/01  VMATT   To display POFOB when multiple plans
// *                   exist for a same style/color
// * 02/27/02  mnadel  removed reference to alternate
// *                   inventory in PC0K870,PC0K990
// * 05/14/02  spitch    Added currency code
// 07/10/02    spitch   compiled for XSPCS07 changes
// 08/23/02    spitch   changed not to move zero for cust need
//  date
// 08/27/02    npulug  modified PC0K810 to allow merge of two
//  similar items
// 02/11/03    npulug   modified PC0K552 to not look at DEURO.
// ************************************************************
// *********************
Program PC0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  KUMREC KUMREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC0KW00 PC0KW00; // record
  PC0KW01 PC0KW01; // record
  PC0KW02 PC0KW02; // record
  PC0KW03 PC0KW03; // record
  PC0KW04 PC0KW04; // record
  PC0KW05 PC0KW05; // record
  PC0KW06 PC0KW06; // record
  PC0KW07 PC0KW07; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PC8REC PC8REC; // record
  PCFREC PCFREC; // record
  PCOREC PCOREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PG6REC PG6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOIAD02 VPOIAD02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XWHTBL; // table
  use XOWTBL; // table
  use YACTBL; // table
  use YMTTBL; // table
  use YOATBL; // table
  use YOHTBL; // table
  use PC0KM.PC0KM001,  // forms
      PC0KM.PC0KM002, 
      PC0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* --     initialize working storage and display areas       --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    set PC0KM001 initial;
    set PC0KM002 initial;

    set PC0KW00 empty;
    set PC0KW01 empty; /* ===> display/working storage record*/
    set PC0KW02 empty; /* ===> working storage for saving pass*/
                                     /* data*/
    set PC0KW03 empty; /* ===> copy of pcwrec*/
    set PC0KW04 empty; /* ===> copy of selected item row before*/
                                     /* changes*/
    set PC0KW05 empty; /* ===> copy of selected item size row*/
                                     /* before changes*/
    set PC0KW06 empty; /* ===> copy of merge to item row*/
                                     /* (used for audits)*/
    set PC0KW07 empty; /* ===> copy of merge to item size row*/
                                     /* (used for audits)*/

    set VPRDCU03 empty;
    set VPOHDR02 empty;
    set PC5REC empty;
    set PC4REC empty;
    set VPOITM05 empty;
    set VPOSIZ02 empty;
    set PC8REC empty;
    set VPOAIT02 empty;
    set VPOASZ02 empty;
    set PCOREC empty;
    set PCYREC empty;

    set VFCTY003 empty;
    set FY4REC empty;
    set KUMREC empty;
    set OP1REC empty;
    set OP2REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set TSEREC empty;
    set TSOREC empty;
    set TSTREC empty;

    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;

    PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
    PC0KW00.PC0KWSWP = "N"; /* ===>protect map 1&2  switch*/
    PC0KW00.PC0KWSWF = "Y"; /* ===>format map 1 switch*/
    PC0KW00.PC0KWS2F = "Y"; /* ===>format map 2 switch*/
    PC0KW00.PC0KWXIT = "N"; /* ===>exit flag for invalid GPC*/
    PC0KW00.PC0KWMOD = "N"; /* ===>MODified data flag*/
    PC0KW00.PC0KW911 = "N"; /* ===>-911 flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===>data base update flag*/
    PC0KW00.PC0KWCLF = "N"; /* ===>data base cancel flag*/
    PC0KW00.PC0KWIUP = "N"; /* ===>item data base update flag*/
    PC0KW00.PC0KWSUP = "N"; /* ===>size data base update flag*/
    PC0KW00.PC0KWOFL = "N"; /* ===>save old FOB Flag (control break)*/
    PC0KW00.PC0KWNFL = "N"; /* ===>save new FOB Flag (load flag)*/
    PC0KW00.PC0KWCBF = "N"; /* ===>*/
    PC0KW00.PC0KWTSY = 1; /* ===>total number of styles*/
    PC0KW00.PC0KWCSY = 1; /* ===>current style index*/
    PC0KW00.PC0KWIXS = 1; /* ===>size index*/

    PC0KW00.PC0KMFBL = "POFOB:";

     /* ---------------------------------------------------------*/
     /* Check commarea security fields.*/
     /* ---------------------------------------------------------*/

    if (PCWREC.XGPCD == "01")
      if (COMMAREA.CAILVL[1] != "Y"
       && COMMAREA.CACLVL[1] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag no authority*/
      end
      if (COMMAREA.CACLVL[1] != "Y"
       && COMMAREA.CAILVL[1] == "Y")
        PCWREC.PCWFNC[1] = "I"; /* ===>set function inquiry*/
      end
    end

    if (PCWREC.XGPCD == "02")
      if (COMMAREA.CAILVL[2] != "Y"
       && COMMAREA.CACLVL[2] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag no authority*/
      end
      if (COMMAREA.CACLVL[2] != "Y"
       && COMMAREA.CAILVL[2] == "Y")
        PCWREC.PCWFNC[1] = "I"; /* ===>set function inquiry*/
      end
    end

    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CAILVL[3] != "Y"
       && COMMAREA.CACLVL[3] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag no authority*/
      end
      if (COMMAREA.CACLVL[3] != "Y"
       && COMMAREA.CAILVL[3] == "Y")
        PCWREC.PCWFNC[1] = "I"; /* ===>set function inquiry*/
      end
    end

    if (PCWREC.XGPCD == "07")
      if (COMMAREA.CAILVL[7] != "Y"
       && COMMAREA.CACLVL[7] != "Y")
        COMMAREA.CAITEM = " ";
        set PCWREC empty;
        PCWREC.XXXMSGNO = 138;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag no authority*/
      end
      if (COMMAREA.CACLVL[7] != "Y"
       && COMMAREA.CAILVL[7] == "Y")
        PCWREC.PCWFNC[1] = "I"; /* ===>set function inquiry*/
      end
    end

    if (PCWREC.XGPCD == "03")
      set PC0KM001.PC0KMOET skip;
      set PC0KM001.PC6AIRNB skip, noHighLight;
    end

     /* ------------------------------------------------------------*/
     /* Load the PC system common pass data to the display record*/
     /* and Set requested map*/
     /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWXIT == "N") /* ===>exit flag for invalid GPC*/

      if (COMMAREA.CAFROMAP == "PC0J" /* ===>item selection application*/
       || COMMAREA.CAFROMAP == "PC0M" /* ===>item list application*/
       /* OR COMMAREA.CAFROMAP EQ 'PC0I'*/
       /* ;===>item special instruction*/
       /* OR COMMAREA.CAFROMAP EQ*/
       /* 'PC05';==>item address override appl*/
       || COMMAREA.CAFROMAP == "PC0U" /* ===>item detail*/
       || COMMAREA.CAFROMAP == "PC0R" /* ===>item detail*/
       || COMMAREA.CAFROMAP == "PC0S" /* ===>item ?*/
       || COMMAREA.CAFROMAP == "PC0Z" /* ===>item ?*/
       || COMMAREA.CAFROMAP == "PB0D") /* ===>INQUIRY BY BLANK P.O. NBR*/

        move PCWREC to PC0KW03 byName; /* ===> load corresponding data "Display*/
                                     /* Rec 3"*/
        /* ===> save style key pass data in "Display Rec 3"*/

        while (PC0KW00.PC0KWCSY <= 20
         && PCWREC.PC6ITMNB[PC0KWCSY] > 0)
          PC0KW03.PC6ITMNB[PC0KWCSY] = PCWREC.PC6ITMNB[PC0KWCSY];
          PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;
        end

        if (PC0KW00.PC0KWCSY > 1) /* ==> styles exist*/
          PC0KW00.PC0KWTSY = PC0KW00.PC0KWCSY - 1; /* ===>tot nbr of styles*/
        else /* ==> no styles*/
          PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag for no seq nbrs*/
        end /* ==> style check*/

      else /* ===> not valid entry from appl*/

        if (COMMAREA.CAFROMAP != "PC0I" /* ===>item special instruction*/
         && COMMAREA.CAFROMAP != "PC05") /* ===>item address override appl*/

          COMMAREA.CAITEM = " ";
          PCWREC.XXXMSGNO = 191;
                                     /* ===> unauthorized access method*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag for invalid GPC*/

        end

      end

    end

    if (PC0KW00.PC0KWXIT == "N") /* ===>exit flag for invalid GPC*/

      if (COMMAREA.CAFROMAP == "PC0I" /* ===>item special instruction*/
       || COMMAREA.CAFROMAP == "PC05") /* ===>item address override appl*/

        /* ------------------------------------------------------------*/
         /* On reentry into your applicaton from a 'called'*/
         /* application find your appl id in the cafrommap*/
         /* array and use the corresponding pcwuser(n). Move*/
         /* spaces to the  cafromap field containing the name of*/
         /* the 'called' application.*/
        /* ------------------------------------------------------------*/

        if (PCWREC.CAFROMAP[1] == "PC0K")
          PC0KW02.PC0KWUSR = PCWREC.PCWUSER1;
          PCWREC.CAFROMAP[1] = " ";
          PC0KW00.PC0KWFNC = PCWREC.PCWFNC[1];
          PCWREC.PCWFNC[1] = " ";
        else

          if (PCWREC.CAFROMAP[2] == "PC0K")
            PC0KW02.PC0KWUSR = PCWREC.PCWUSER2;
            PCWREC.CAFROMAP[2] = " ";
            PC0KW00.PC0KWFNC = PCWREC.PCWFNC[2];
            PCWREC.PCWFNC[2] = " ";
          else

            if (PCWREC.CAFROMAP[3] == "PC0K")
              PC0KW02.PC0KWUSR = PCWREC.PCWUSER3;
              PCWREC.CAFROMAP[3] = " ";
              PC0KW00.PC0KWFNC = PCWREC.PCWFNC[3];
              PCWREC.PCWFNC[3] = " ";
            else

              if (PCWREC.CAFROMAP[4] == "PC0K")
                PC0KW02.PC0KWUSR = PCWREC.PCWUSER4;
                PCWREC.CAFROMAP[4] = " ";
                PC0KW00.PC0KWFNC = PCWREC.PCWFNC[4];
                PCWREC.PCWFNC[4] = " ";

              end
            end
          end
        end

        move PC0KW02 to PC0KW03 byName; /* move like names from w02 to w03*/

        if (PC0KW02.PC0KWSWM == "2")
          PC0KW00.PC0KWSWM = "2"; /* ===>set requested right map*/
        else
          PC0KW00.PC0KWSWM = "1"; /* ===>set requested left map*/
        end

        while (PC0KW00.PC0KWCSY <= 20
         && PCWREC.PC6ITMNB[PC0KWCSY] > 0)
          PC0KW03.PC6ITMNB[PC0KWCSY] = PCWREC.PC6ITMNB[PC0KWCSY];
          PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;
        end

        if (PC0KW00.PC0KWCSY > 1) /* ==> styles exist*/
          PC0KW00.PC0KWTSY = PC0KW00.PC0KWCSY - 1; /* ===>tot nbr of styles*/
        else /* ==> no styles*/
          PCWREC.XXXMSGNO = 191; /* ===> cannot fastpath in*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag for no seq nbrs*/
        end /* ==> style check*/

        if (PC0KW02.PC0KWIDX < 1 /* ===>transfered/saved style index*/
         || PC0KW02.PC0KWIDX > PC0KW00.PC0KWTSY) /* ===>tot nbr of styles*/
          PC0KW00.PC0KWCSY = 1; /* ===>current style index*/
        else
          PC0KW00.PC0KWCSY = PC0KW02.PC0KWIDX; /* ===>save style index*/
        end

        COMMAREA.CAFROMAP = PC0KW02.CAFROMAP;
                                     /* ===>reset from app field*/

      else /* ===> not from PC0I or PC05*/

        PC0KW00.PC0KWCSY = 1; /* ===>current style index*/
        PC0KW00.PC0KWSWM = "1"; /* ===>set requested left map*/

        if (PCWREC.PCWFNC[1] == "I"
         || PCWREC.PCWFNC[1] == "C")
          PC0KW00.PC0KWFNC = PCWREC.PCWFNC[1]; /* ===>set function*/
        else
          PCWREC.XXXMSGNO = 34; /* ===> invalid selection*/
          COMMAREA.CAUSERA = PCWREC.CAUSERA;
          COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
          PC0KW00.PC0KWXIT = "Y"; /* ===>exit flag for invalid GPC*/
        end

      end /* ===> from PC05 or PC0I*/

    end /* ===> if exit flag = 'n'*/

     /* --                                                        --*/
     /* ------------------------------------------------------------*/
     /* -- flow to converse the main process used to display map  --*/
     /* ------------------------------------------------------------*/
     /* --                                                        --*/
    goto PC0K001;

     /* **                                                        ***/
     /* ******************** End of XPPC001 FLOW ********************/
    PC0K001: PC0K001();
    goto PC0K001;
  end // end main
end // end PC0K

// Verify Air Freight Percents
Function PC0K-35010()
   /* ------------------------------------------------------------*/
   /* Determine if the Air Freight Percents are required.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMMOD == "AF"
   && PC0KM001.XGPCD == "03") /* ===> apparel*/
    if (PC0KM001.PC-NIKE-AFRGT-PCT > 0
     || PC0KM001.PC-FCTY-AFRGT-PCT > 0)
                                  /* ====> NEXT STATEMENT*/
    else
      PC0KW00.XXXPRCNM = "PC0K-35010"; /* Module identification*/
      set PC0KM001.PC-NIKE-AFRGT-PCT cursor, bold; /* Highlight*/
      converseLib.validationFailed(510); /* Indicate required*/
      return;
    end
  else
    if (PC0KM001.PC6AIRNB > 0
     && PC0KM001.XGPCD == "03") /* ===> apparel*/
      if (PC0KM001.PC-NIKE-AFRGT-PCT == 0
       && PC0KM001.PC-FCTY-AFRGT-PCT == 0)
        PC0KW00.XXXPRCNM = "PC0K-35010"; /* Module identification*/
        set PC0KM001.PC-NIKE-AFRGT-PCT cursor, bold; /* Highlight*/
        converseLib.validationFailed(521); /* Indicate required with af number*/
        return;
      end
    else
      PC0KW01.PC-NIKE-AFRGT-PCT = 0;
      PC0KM001.PC-NIKE-AFRGT-PCT = 0;
      PC0KW01.PC-FCTY-AFRGT-PCT = 0;
      PC0KM001.PC-FCTY-AFRGT-PCT = 0;
      return;
    end
  end

   /* ------------------------------------------------------------*/
    /* Air Freight Percents are required.  If both are entered they*/
    /* must total 100.  If only one is entered the other value is*/
    /* calculated.*/
   /* ------------------------------------------------------------*/

  PC0KW-AFRGT-CALC-AREA = PC0KM001.PC-NIKE-AFRGT-PCT + PC0KM001.PC-FCTY-AFRGT-PCT;

  if (PC0KW-AFRGT-CALC-AREA == 100)
     /* continue*/
  else
    if (PC0KW-AFRGT-CALC-AREA > 100
     || (PC0KW-AFRGT-CALC-AREA < 100
     && PC0KM001.PC-NIKE-AFRGT-PCT > 0
     && PC0KM001.PC-FCTY-AFRGT-PCT > 0))
      PC0KW00.XXXPRCNM = "PC0K-35010"; /* Module identification*/
      set PC0KM001.PC-NIKE-AFRGT-PCT cursor, bold; /* Highlight*/
      converseLib.validationFailed(522); /* Indicate pcts do not add to 100*/
      return;
    else
      if (PC0KM001.PC-NIKE-AFRGT-PCT > 0)
        PC0KM001.PC-FCTY-AFRGT-PCT = 100 - PC0KM001.PC-NIKE-AFRGT-PCT;
      else
        PC0KM001.PC-NIKE-AFRGT-PCT = 100 - PC0KM001.PC-FCTY-AFRGT-PCT;
      end
    end
  end

  PC0KW01.PC-NIKE-AFRGT-PCT = PC0KM001.PC-NIKE-AFRGT-PCT;
  PC0KW01.PC-FCTY-AFRGT-PCT = PC0KM001.PC-FCTY-AFRGT-PCT;
  PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K35010**********************/
end // end PC0K-35010

// ===> Application Main Line <==
Function PC0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* * Check to see if a SQL Code of -911 occurred in the*/
     /* obtain the data section.*/
      /* If it did set a 911 error flag so the program will*/
      /* process the same style for the user.*/

   /* * Check to see if the exit application flag was set.*/

   /* * Check to see which function should be performed.*/

   /* If Inquiry function requested*/
     /* 1) If specified, display the first map.*/
     /* 2) Otherwise, if specified, display the second map.*/
     /* 3) Otherwise, indicate error and exit to Application Menu*/

   /* If Change function requested*/
     /* 1) If specified, display the first map.*/
     /* 2) Otherwise, if specified, display the second map.*/
     /* 3) Otherwise, indicate error and exit to Application Menu*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Determine whether -911 occured in "Obtain The Data" module.*/
   /* thus an error screen was presented*/

   /* Determine whether the negative SQL code came from:*/
   /* one of the common P.O. System subroutines.*/
    /* 1. XPPC010 --> Update P.O. Header Status Subroutine*/
    /* 2. XPPC020 --> Calc remaining "Balance To Ship" subroutine*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == -911
   && PC0KW00.PC0KWSWR == "Y") /* ===> request for data switch is still*/
                                   /* set*/

    PC0KW00.PC0KW911 = "Y";

  else

    PC0KW00.PC0KW911 = "N";

  end

  if (SQLCA.VAGen_SQLCODE > 0
   && PC0KW00.XXXPRCNM == " ") /* Module identification*/

    if (PC5REC.XXXPRCNM > " ") /* Module identification*/
      PC0KW00.XXXPRCNM = PC5REC.XXXPRCNM; /* Module identification*/
    end

    if (PC8REC.XXXPRCNM > " ") /* Module identification*/
      PC0KW00.XXXPRCNM = PC8REC.XXXPRCNM; /* Module identification*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a request to exit application was*/
   /* requested.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWXIT == "Y")

    PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* =====>Exit to application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map 1*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
    PC0KW00.PC0KWSWR = "N"; /* request for data switch*/
    PC0KW00.PC0KWSWF = "Y"; /* Format the map switch*/
    PC0KW00.PC0KWSWM = "1"; /* Map 1 requested*/
    PC0KW00.PC0KWFNC = "I"; /* inquiry function requested*/
    PC0KW00.XXXPRCNM = "PC0K001"; /* Module identification*/

  end

   /* ------------------------------------------------------------*/
    /* Process Inquiry Function Program Logic*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWFNC == "I") /* ===> inqury function requested*/

    if (PC0KW00.PC0KWSWM == "1") /* Map 1 was requested*/

      PC0K100(); /* ===> process Display map 1*/

    else

      if (PC0KW00.PC0KWSWM == "2") /* ===> Map 2 was requested*/

        PC0K200(); /* ===> process Display map 2 logic*/

      else

        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K001"; /* Module identification*/
        PCWREC.XXXMSGNO = 10; /* Indicate system error*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = PC0KW00.PC0KWSWM; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = PC0KW00.XXXPRCNM; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "PC0A"; /* TO application*/

        XSPCS01(); /* Exit to another application*/
        /* ===>*/
        /* ===>if exit failed, reset and return to map 1*/
        /* ===>*/

        set PC0KM001 initial;
        set PC0KM001.CATOAP cursor, bold; /* Highlight*/
        set PC0KW01 empty; /* ==>reset map display record*/
        PC0KW01.XGPCD = COMMAREA.XGPCD;
        PC0KW00.PC0KWSWR = "N"; /* request for data switch*/
        PC0KW00.PC0KWSWF = "Y"; /* Format the map switch*/
        PC0KW00.PC0KWSWM = "1"; /* Map 1 requested*/
        PC0KW00.PC0KWFNC = "I"; /* inquiry function requested*/
        PC0KW00.XXXPRCNM = "PC0K001"; /* Module identification*/

           /* ;*/
      end

    end

  end

   /* ------------------------------------------------------------*/
    /* Process Change Function Program Logic*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWFNC == "C") /* ===> inqury function requested*/

    if (PC0KW00.PC0KWSWM == "1") /* Map 1 was requested*/

      PC0K300(); /* ===> Process Display Map 1 Logic*/

    else

      if (PC0KW00.PC0KWSWM == "2") /* ===> Map 2 was requested*/

        PC0K400(); /* ===> Process Display Map 2 Logic*/

      else

        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K001"; /* Module identification*/
        PCWREC.XXXMSGNO = 10; /* Indicate system error*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = PC0KW00.PC0KWSWM; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = PC0KW00.XXXPRCNM; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "PC0A"; /* TO application*/

        XSPCS01(); /* Exit to another application*/
        /* ===>*/
        /* ===>if exit failed, reset and return to map 1*/
        /* ===>*/

        set PC0KM001 initial;
        set PC0KM001.CATOAP cursor, bold; /* Highlight*/
        set PC0KW01 empty; /* ==>reset map display record*/
        PC0KW01.XGPCD = COMMAREA.XGPCD;
        PC0KW00.PC0KWSWR = "N"; /* request for data switch*/
        PC0KW00.PC0KWSWF = "Y"; /* Format the map switch*/
        PC0KW00.PC0KWSWM = "1"; /* Map 1 requested*/
        PC0KW00.PC0KWFNC = "I"; /* inquiry function requested*/
        PC0KW00.XXXPRCNM = "PC0K001"; /* Module identification*/

      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K001 ***********************/
end // end PC0K001

// ==>Process Map 1 Inquiry Logic
Function PC0K100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0K110(); /* Obtain the data to display*/

  PC0K120(); /* Format and display the map*/

  PC0K130(); /* Check attention identifier*/

  PC0K140(); /* Reset fields to normal intensity*/

  PC0K150(); /* Verify the entered data*/

  PC0K160(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0K100 ***********************/
end // end PC0K100

// -->Obtain The Data To Display
Function PC0K110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  set PC0KW01 empty;
  set PC0KW04 empty;
  set PC0KM001 initial;
  set PC0KM002 initial;

  PC0K111(); /* ===> get data from P.O. Item Table*/

  PC0K112(); /* ===> calc. dates for display record*/

  PC0K113(); /* ===> get data from P.O. Size Table*/

  PC0K114(); /* ===> get data from Size Desc. Trans.*/
                                   /* subroutine*/

  PC0KS05(); /* ===> get Style name and Color desc*/

  PC0K116(); /* ===> get P.O. Header info*/

  PC0K118(); /* ===> get FOB data*/

  PC0K117(); /* ===> build FOB templete*/

  PC0K119(); /* ===> calculate total value (QTY **/
                                   /* FOB)*/

  if (PC0KW01.PC2CUXID > " ")

    PC0KS06(); /* ===> Get customer info from VPRDCU01*/
                                   /* Table*/

    if (VPRDCU03.YPCCD == "N")
      PC0KW01.KUMSTRNM = VPRDCU03.PC2NAME; /* ===> move nike name*/
    else
      if (VPRDCU03.PC-PRDCU-APAO-FL == "E")
        PC0KS09(); /* ==> Get Store name from VESTOR01*/
      else
        PC0KS07(); /* ==> Get Store name from VSTORE01*/
      end
    end

  end

  PC0KS08(); /* ===> Get division group description*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0K110 ***********************/
end // end PC0K110

// Get data from P.O. Item Table
Function PC0K111()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/

  VPOITM05.XGPCD = PC0KW03.XGPCD;
  VPOITM05.PO-REG-CD = PC0KW03.PO-REG-CD;
  VPOITM05.PC3PONBR = PC0KW03.PC3PONBR;
  VPOITM05.PC6ITMNB = PC0KW03.PC6ITMNB[PC0KWCSY]; /* ===>current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    /* ===> move VPOITM05 corresponding data to:*/
    PC0KS23(); /* ===> move corresponding data to*/
                                   /* PC0KW01 (display record)*/
    PC0KS24(); /* ===> move corresponding data to*/
                                   /* PC0KW04 (save copy record)*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0K111"; /* Module identification*/
  set PC0KM001.CATOAP cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> no data to display*/
    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
                                  /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K111 ***********************/
end // end PC0K111

// calc. dates for display record
Function PC0K112()
   /* ------------------------------------------------------------*/
   /* ===> ETS date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMEST cursor, skip, bold; /* ===>ETS Date display*/
      return;
    end

    PC0KW01.PC0KWDT1 = TA2REC.TA2GRGA; /* ===>ETS Date display*/

  else

    PC0KW01.PC0KWDT1 = " "; /* ===>ETS Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> RTA date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6RTADT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6RTADT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMRTA cursor, skip, bold; /* ===>RTA Date display*/
      return;
    end

    PC0KW01.PC0KWDT4 = TA2REC.TA2GRGA; /* ===>RTA Date display*/

  else

    PC0KW01.PC0KWDT4 = " "; /* ===>RTA Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> Original ETS date;===>  left map col: trailer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETS > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6OETS; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMOET cursor, bold; /* ===>original ETS Date display*/
      return;
    end

    PC0KW01.PC0KWDT2 = TA2REC.TA2GRGA; /* ===>OETS Date display*/

  else

    PC0KW01.PC0KWDT2 = " "; /* ===>OETS Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> ETAL Override date;===>  left map col: trailer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETAL > 0) /* ===> ETAL override date*/

    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6OETAL; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMETO cursor, bold; /* ===> ETAL Override date*/
      return;
    end

    PC0KW01.PC0KWDT3 = TA2REC.TA2GRGA; /* ===> ETAL Override Date*/

  else

    PC0KW01.PC0KWDT3 = " "; /* ===> ETAL Override Date*/

  end

   /* ------------------------------------------------------------*/
   /* Always calculate ETAL, RTS, ETA.*/
     /* using XSPC005*/
   /* ------------------------------------------------------------*/

  set PCPREC empty;

  PCPREC.XGPCD = VPOITM05.XGPCD;
  PCPREC.XWHCD = VPOITM05.XWHCD;
  PCPREC.PC2CUXID = VPOITM05.PC2CUXID;
  PCPREC.FY1FCTYC = VPOITM05.FY1FCTYC;
  PCPREC.YMTCD = VPOITM05.YMTCD;
  PCPREC.PC6RTADT = VPOITM05.PC6RTADT;
  PCPREC.PC6ETSDT = VPOITM05.PC6ETSDT;
  PCPREC.PC6ETALF = VPOITM05.PC6ETALF;
  PCPREC.PC4ORTYP = VPOITM05.PC4ORTYP;
  PCPREC.PCPPOIDT = VPOITM05.PC3POIDT;
  PCPREC.YSMXDV = VPOITM05.YSMXDV;

  XSPCS05();

   /* ------------------------------------------------------------*/
          /* ETA (estimated time of arrival - for PO items)*/
    /* PCPREC.PCPETADT  = ETA  date (ETS + MADD + ETT)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWETA = PCPREC.PCPETADT; /* ===>ETA Date*/
  if (PCPREC.PCPETADT == 0) /* ===>ETA Date*/
    PC0KW01.PC0KWDT7 = " "; /* ===>ETA Date display*/
  else
    PC0KW01.PC0KWDT7 = PCPREC.PCPMETA; /* ===>ETA Date display*/
  end

   /* ------------------------------------------------------------*/
          /* RTS (requested time of shipment)*/
    /* PCPREC.PCPRTSDT  = RTS  date (RTA - ETT)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWRTS = PCPREC.PCPRTSDT; /* ===>RTA Date*/
  if (PCPREC.PCPRTSDT == 0) /* ===>RTA Date*/
    PC0KW01.PC0KWDT5 = " "; /* ===>RTA Date display*/
  else
    PC0KW01.PC0KWDT5 = PCPREC.PCPMRTS; /* ===>RTA Date display*/
  end

   /* ------------------------------------------------------------*/
          /* ETAL (Estimated time of arrival)*/
    /* PCPREC.PCPETALD  = ETAL date (ETA + PADD)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWETL = PCPREC.PCPETALD; /* ===> ETAL Date*/
  if (PCPREC.PCPETALD == 0) /* ===> ETAL Date*/
    PC0KW01.PC0KWDT6 = " "; /* ===> ETAL Date Display*/
  else
    PC0KW01.PC0KWDT6 = PCPREC.PCPMETAL; /* ===> ETAL Date Display*/
  end

   /* ------------------------------------------------------------*/
   /* ===> Customer need date;===> Right  map*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.OP1CUNDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.OP1CUNDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM002.PC0KMNDT cursor, skip, bold; /* ===> Date display*/
      return;
    end

    PC0KW01.PC0KWDT8 = TA2REC.TA2GRGA; /* ===>Need Date display*/

  else

    PC0KW01.PC0KWDT8 = " "; /* ===>Need Date display*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K112 ***********************/
end // end PC0K112

// get data from P.O. Size Table
Function PC0K113()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = PC0KW01.XGPCD;
  VPOSIZ02.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0KW01.PC3PONBR;
  VPOSIZ02.PC6ITMNB = PC0KW01.PC6ITMNB; /* ===> current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    /**/
    move VPOSIZ02 to PC0KW05 withV60Compat; /* ===>load corresponding data*/
    if (VPOSIZ02.ZFC-CRCY-CD == " ")
      PC0KW01.ZFC-CRCY-CD = "USD";
    else
      PC0KW01.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;
    end
    move VPOSIZ02.PC7ORIGQ to PC0KW01.PC7ORIGQ[1] for all; /* ===>load*/
    move VPOSIZ02.PC7ORDEQ to PC0KW01.PC7ORDEQ[1] for all; /* ===>load*/
    move VPOSIZ02.PC7FOBFL to PC0KW01.PC7FOBFL[1] for all; /* ===>load*/
    move VPOSIZ02.FY4FOBPR to PC0KW01.FY4FOBPR[1] for all; /* ===>load*/
    /**/
    return; /* Return to previous process*/
    /**/
  end

  PC0KW00.XXXPRCNM = "PC0K113"; /* Module identification*/
  set PC0KM001.CATOAP cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/
    /**/
    PCWREC.XXXMSGNO = 18; /* =======> no data to display*/
    return; /* Return to previous process*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /**/
    set PC0KM001 initial; /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K113 ***********************/
end // end PC0K113

// get data from Size Desc Trans
Function PC0K114()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PC0KW01.XGPCD;
  PG3REC.SY1STNBR = PC0KW01.SY1STNBR;
  PG3REC.SY2CLRID = PC0KW01.SY2CLRID;
  PG3REC.XDMCD = PC0KW01.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  if (PC0KW01.XGPCD != "07") /* anything but posters*/
    XSPG301(); /* Get valid sizes*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    move PG3REC.SY4IDDSC to PC0KW01.SY4IDDSC[1] for 40; /* ===>load display record*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0KW00.XXXPRCNM = "PC0K114"; /* Module identification*/
  PC0KW00.PC0KWSWM = "1"; /* request for map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    PC0KW00.PC0KW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K114 ***********************/
end // end PC0K114

// get P.O. HEADER Info
Function PC0K116()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC0KW01.XGPCD;
  VPOHDR02.PO-REG-CD = PC0KW01.PO-REG-CD;
  VPOHDR02.PC3PONBR = PC0KW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0KW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC0KW01.PC3CRDT = VPOHDR02.PC3CRDT;
    PC0KW01.XSECD = VPOHDR02.XSECD;
    PC0KW01.PCFSEYR = VPOHDR02.PCFSEYR;
    PC0KW01.PC3CMPNT = VPOHDR02.PC3CMPNT;

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0K116"; /* Module identification*/
  set PC0KM001.PC3PONBR skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPYR skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPMO skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPDM skip, bold; /* Highlight*/
  set PC0KM001.FY1FCTYC skip, bold; /* Highlight*/
  set PC0KM001.PC4ORTYP skip, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0KW00.PC0KWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K116 ***********************/
end // end PC0K116

// Get FOB ovrd templete
Function PC0K117()
   /* ------------------------------------------------------------*/

   /* For Inquiry Process: ( ie. PC0K117 series.)*/
     /* Use the single size row associated with the Item row*/
   /* that was passed/selected from the calling program.*/
   /* This templete is built because the factory FOB prices may*/
   /* change and the prices reflected on the size row may not*/
   /* be current.*/

   /* For Maintenance Process: ( ie. PC0K317 series.)*/
     /* Use the all size rows associated with the Item row*/
   /* that was passed/selected from the calling program.*/
     /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* Note: The Override templete is made up of 3 arrays*/

       /* PC0KW01.PC0KWVRD(PC0KWIXT)*/
        /* - loaded with factory Prices initially*/
        /* - overlayed with any found override prices*/

       /* PC0KW01.PC0KWVRF(PC0KWIXT)*/
        /* - loaded with "N" initially*/
        /* - overlayed with "Y" for  found override prices*/

       /* PC0KW01.PC0KWVRQ(PC0KWIXT)*/
        /* - accumulated on order QTYs for all items in item set*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and process*/
    /* The size row which has already been selected and*/
    /* resides in PC7REC.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12)
    if (PC0KW00.PC0KMFBL != "POFOB:")
      PC0KW00.PC0KMFBL = "POFOB:";
      move "POFOB:" to PC0KM001.PC0KMFBL[1] for all;
    else
      PC0KW00.PC0KMFBL = "FYFOB:";
      move "FYFOB:" to PC0KM001.PC0KMFBL[1] for all;
    end
  end

  if (converseVar.eventKey is pf9)
    PC0KW00.PC0KMFBL = "FYFOB:";
    move "FYFOB:" to PC0KM001.PC0KMFBL[1] for all;
  end

  if (PC0KW00.PC0KMFBL != "POFOB:")
    if (PC0KW00.PC0KWPFF == "Y") /* ===> factory price record foung*/
      move PCOREC.FY4FOBPR to PC0KW01.PC0KWVRD[1] for all;
    else
      move 0 to PC0KW01.PC0KWVRD[1] for all; /* ===> initialize override price*/
    end
  else
    move VPOSIZ02.FY4FOBPR to PC0KW01.PC0KWVRD[1] for all;
  end

  move "N" to PC0KW01.PC0KWVRF[1] for all; /* ===> initialize override flag*/
  move 0 to PC0KW01.PC0KWVRQ[1] for all; /* ===> initialize qtys*/

   /* ------------------------------------------------------------*/
   /* -  Accumulate FOB ovrd data asso. with the Item row.*/
       /* Load the FOB price tempelete with flag and price*/
       /* for the 40 size bucket associated with the item row.*/
   /* -  Accumulate the total QTYs asso. with each row.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/

  while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/

    /* ------------------------------------------------------------*/
     /* accumulate FOB ovrd data asso. with the item row.*/
    /* ------------------------------------------------------------*/

    if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y" /* ===> load FOB override data*/
     && PC0KW00.PC0KMFBL == "POFOB:")     

      PC0KW01.PC0KWVRD[PC0KWIXT] = VPOSIZ02.FY4FOBPR[PC0KWIXT];
      PC0KW01.PC0KWVRF[PC0KWIXT] = VPOSIZ02.PC7FOBFL[PC0KWIXT];

    end

    /* ------------------------------------------------------------*/
     /* accumulate the total on-order size QTYs asso. with each row*/
    /* ------------------------------------------------------------*/

    PC0KW00.PC0KWOR = VPOSIZ02.PC7ORDEQ[PC0KWIXT];
    PC0KW01.PC0KWVRQ[PC0KWIXT] = PC0KW01.PC0KWVRQ[PC0KWIXT] +     PC0KW00.PC0KWOR;

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K117 ***********************/
end // end PC0K117

// set-up to get FOB data
Function PC0K118()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  set PCOREC empty;

  PCOREC.XGPCD = PC0KW01.XGPCD;
  PCOREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCOREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCOREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCOREC.XDMCD = PC0KW01.XDMCD;
  PCOREC.XQACD = PC0KW01.XQACD;
  PCOREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCOREC.XUMCD = PC0KW01.XUMCD;
  PCOREC.XPGCD = PC0KW01.XPGCD;
  PCOREC.PC3POIDT = PC0KW01.PC3POIDT;
  PCOREC.PC3CRDT = PC0KW01.PC3CRDT;
  PCOREC.PCFSEYR = PC0KW01.PCFSEYR;
  PCOREC.XSECD = PC0KW01.XSECD;

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* Load the prices to display working storage*/
   /* ------------------------------------------------------------*/

  if (PCOREC.PCORECPF == "N")
    PC0KW00.PC0KWPFF = "N"; /* ===> price found flag*/

    if (COMMAREA.CAILVL[10] == "Y") /* ===> Authorized for prices*/
      PCWREC.XXXMSGNO = 118; /* No FOB price available*/
      PC0KW00.XXXPRCNM = "PC0K118"; /* Module identification*/
    end

  else
    PC0KW00.PC0KWPFF = "Y"; /* ===> price found flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K118 ***********************/
end // end PC0K118

// Calc the total value for qtys
Function PC0K119()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all the valued size quanitites*/

   /* Programming Note:*/

           /* PC0KW00.PC0KWVAL is used to calculate the value*/
            /* (accum value)   on a single size level.*/

           /* PC0KW01.PC0KWTVL is used to calculate the total*/
            /* (total value)   value for all sizes and thus is*/
                            /* saved in the map display record.*/

   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXS = 1; /* ===> Initialize size index*/

  PC0KW00.PC0KWVAL = 0; /* ===> initialize quantity value*/
  PC0KW01.PC0KWTVL = 0; /* ===> initialize total value*/

  while (PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/

    if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)

      PC0KW00.FY4FOBPR = PC0KW01.PC0KWVRD[PC0KWIXS]; /* ===> P.O. FOB*/

      PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXS];

      PC0KW00.PC0KWVAL = PC0KW00.PC7ORDEQ * PC0KW00.FY4FOBPR;
      PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW00.PC0KWVAL;

    end

    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1;

  end

  PC0KW00.PC0KWIXS = 1; /* ===> Initialize size index*/

  PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW01.PC6MICHG;

   /* **                                                        ***/
   /* ********************** End of PC0K119 ***********************/
end // end PC0K119

// -->Format And Converse Map 1
Function PC0K120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PC0KW00.PC0KWSWF == "Y") /* ===> Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0KM001 initial;

      /* ------------------------------------------------------------*/
       /* Format the LEFT map*/
      /* ------------------------------------------------------------*/

      PC0K121(); /* ===> Format the literals*/

      PC0K122(); /* ===> Format the display data*/

      PC0K123(); /* ===> Format pass record fields*/

      PC0KW00.PC0KWSWF = "N"; /* ===> Format the map switch*/
      PC0KW00.PC0KWSWS = "Y"; /* ===> sizes must be formatted*/
      PC0KW00.PC0KWIXS = 1; /* ===> initialize size index*/
      PC0KW00.PC0KWF16 = "Y"; /* ===> first 16 sizes flag*/
      PC0KW00.PC0KWM16 = "N"; /* ===> middle 16 sizes flag*/

    end

    if (PC0KW00.PC0KWSWS == "Y") /* ===> sizes must be formatted*/

      PC0K124(); /* ===> Format the size display data*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  move PC0KW00.PC0KMFBL to PC0KM001.PC0KMFBL[1] for all;

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0KM001.XXXPRCNM = PC0KW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0KM001 alarm; /* Indicate sound alarm*/

  end

   /* ===> The following two lines of code are temporary until*/
   /* ===> all phases of miscellaneous charges are installed*/

  set PC0KM001.PC0KMMCH skip, invisible;
  set PC0KM001.PC6MICHG skip, invisible;

  if (PCWREC.XGPCD == "03")
    set PC0KM001.PC6AIRNB skip, noHighLight;
  end

  converse PC0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0KW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0KM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K120 ***********************/
end // end PC0K120

// Format the display literals
Function PC0K121()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PC0KM001.PC0KMCSY = PC0KW00.PC0KWCSY; /* ===> current style index*/
  PC0KM001.PC0KMTSY = PC0KW00.PC0KWTSY; /* ===> total styles*/
  PC0KM001.PC0KMFNC = "INQUIRY"; /* ===> total styles*/
  set PC0KM001.CATOAP cursor; /* ====>  to APPL field*/
  set PC0KM001.PC0KMPLL skip, invisible; /* ====>  new plan literal*/
  set PC0KM001.PC0KMPLN skip, invisible; /* ====>  new plan*/

  if (COMMAREA.CACLVL[10] == "N") /* ===> Price security flag*/
    set PC0KM001.PC0KMTTL skip, invisible; /* ====>  Total value literal*/
    set PC0KM001.PC0KMVAL skip, invisible; /* ====>  Total Value*/
  end

  if (COMMAREA.CAILVL[10] == "N") /* ===> Price security flag*/
    set PC0KM001.PC0KMP12 skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMFBL[1] skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ====>  literal*/
  end

  if (PC0KW01.PC3BLPO <= 0)
    set PC0KM001.PC0KMBPO skip, invisible; /* ====>  Blank P.O.*/
  end

  if (PC0KW01.XGPCD == "02")
    set PC0KM001.PC0KMSCL skip, invisible; /* ====>  Scheduler code literal*/
    set PC0KM001.PG1SC4CD skip, invisible; /* ====>  Scheduler code*/
    set PC0KM001.PC0KSCNM skip, invisible; /* ====>  Scheduler name*/
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "OR"
     || PC0KW01.PC4ORTYP == "S1"
     || PC0KW01.PC4ORTYP == "S4")
      set PC0KM001.PC6ETALF skip; /* ====>  ETAL default flag*/
    else
      set PC0KM001.PC6ETALF skip, invisible; /* ====>  ETAL default flag*/
      set PC0KM001.PC0KMFLL skip, invisible; /* ====>  Default flag literal*/
    end
  else
    set PC0KM001.PC6ETALF skip, invisible; /* ====>  ETAL default flag*/
    set PC0KM001.PC0KMFLL skip, invisible; /* ====>  Default flag literal*/
    set PC0KM001.PG1SC4CD skip; /* ====>  Scheduler code*/
  end

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMOET skip;
  end

  set PC0KM001.PC0KMNQT skip; /* ====>  total quantity*/
  set PC0KM001.PC0KMEST skip; /* ====>  ETS Date*/
  set PC0KM001.PC0KMMOD skip; /* ====>  Mode*/
  set PC0KM001.PC0KMCUS skip; /* ====>  Customer xref*/
  set PC0KM001.OP1CUOID skip; /* ====>  Cust ORDER NO*/
  set PC0KM001.OP1NORID skip; /* ====>  NIKE ORDER NO*/
  set PC0KM001.PC0KMWHS skip; /* ====>  Warehouse*/
  set PC0KM001.PC0KMADD skip, invisible; /* ====>  new/add quantity*/
  set PC0KM001.PC0KMADL skip, invisible; /* ====>  new/add literal*/
  set PC0KM001.YACCD skip, invisible; /* ====>  Audit comment*/
  set PC0KM001.PC0KMAUD skip, invisible; /* ====>  Audit comment literal*/
  set PC0KM001.PC0KMOET skip; /* ====>  original ETS Date*/
  set PC0KM001.PC0KMETO skip; /* ====>  ETAL Override Date*/

  if (PC0KW01.XGPCD == "01"
   || PC0KW01.XGPCD == "07")
    set PC0KM001.PC0KMOEL skip, invisible; /* ====>  original ETS Literal*/
    set PC0KM001.PC0KMOET skip, invisible; /* ====>  original ETS Date*/
  end

  if (PC0KW01.XGPCD == "02")
    set PC0KM001.PC0KMOEL skip; /* ====>  original ETS Literal*/
    set PC0KM001.PC0KMOET skip; /* ====>  original ETS Date*/
  end

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMRTA skip, invisible; /* ====>  RTA Date*/
    set PC0KM001.PC0KMRAL skip, invisible; /* ====>  RTA Date literal*/
    set PC0KM001.PC0KMRTS skip, invisible; /* ====>  RTS Date*/
    set PC0KM001.PC0KMRSL skip, invisible; /* ====>  RTS Date literal*/
    set PC0KM001.PC0KMOW skip; /* ====>  Enterable Owner Group*/
    set PC0KM001.PC0KMMCH skip; /* ====>  misc charge literal*/
    set PC0KM001.PC6MICHG skip; /* ====>  misc charge*/
    set PC0KM001.PC-NIKE-AFRGT-PCT skip; /* ====> nike air frgt pct*/
    set PC0KM001.PC-NIKE-AFRGT-PCT-LIT skip;
                                   /* =====> nike air frgt pct literal*/
    set PC0KM001.PC-FCTY-AFRGT-PCT skip; /* ====> fact air frgt pct*/
    set PC0KM001.PC-FCTY-AFRGT-PCT-LIT skip;
                                   /* =====> fact air frgt pct literal*/
  else
    set PC0KM001.PC0KMRTA skip; /* ====>  RTA Date*/
    set PC0KM001.PC0KMOWL skip, invisible; /* ====>  Enterable Owner Grp lit*/
    set PC0KM001.PC0KMOW skip, invisible; /* ====>  Enterable Owner Grp*/
    set PC0KM001.PC0KMMCH skip, invisible; /* ====>  misc charge literal*/
    set PC0KM001.PC6MICHG skip, invisible; /* ====>  misc charge*/
  end
  set PC0KM001.PC6AIRNB skip; /* ====>  Air Request Number*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC0KMP2 skip, invisible; /* ====>  literal*/
  set PC0KM001.PC0KMP9 skip, invisible; /* ====>  literal*/
  set PC0KM001.PC0KMP15 skip, invisible; /* ====>  literal*/

   /* **                                                        ***/
   /* ********************** End of PC0K121 ***********************/
end // end PC0K121

// Format the display data
Function PC0K122()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> PC0KM001 ( the header info)*/
   /* ------------------------------------------------------------*/

  PC0KS02(); /* ===> load header data*/

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> PC0KM001 (not the header info)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC3BLPO > 0)
    set PC0KM001.PC3BLPO skip, invisible;
    set PC0KM001.PC0KMBPO skip, invisible;
  end

  PC0KM001.PC3BLPO = PC0KW01.PC3BLPO; /* => Blank P.O.*/
  PC0KM001.PC0KMMOD = PC0KW01.YMTCD; /* => Transportation Mode*/
  PC0KM001.PC6ETALF = PC0KW01.PC6ETALF; /* ===> ETAL default flag*/
  PC0KM001.PG1SC4CD = PC0KW01.PG1SC4CD; /* ===> Scheduler code*/
  PC0KS70(); /* get the scheduler name*/
  PC0KW00.PC0KWMOD = "N"; /* Reset data modified flag*/
  PC0KM001.PC0KSCNM = PG1REC.XXXUSER; /* scheduler user id*/

  if (PC0KW01.PC2CUXID <= " ") /* => Cust Xref*/
    set PC0KM001.PC0KMCUS skip, invisible; /* => Cust Xref*/
  else
    PC0KM001.PC0KMCUS = PC0KW01.PC2CUXID; /* => Cust Xref*/
  end

  if (PC0KW01.OP1CUOID <= 0) /* => Cust order no*/
    set PC0KM001.OP1CUOID skip, invisible; /* => Cust order no*/
  else
    PC0KM001.OP1CUOID = PC0KW01.OP1CUOID; /* => Cust order no*/
  end

  if (PC0KW01.OP1NORID <= 0) /* => Nike order no*/
    set PC0KM001.OP1NORID skip, invisible; /* => Nike order no*/
  else
    PC0KM001.OP1NORID = PC0KW01.OP1NORID; /* => Nike order no*/
  end

  if (PC0KW01.XWHCD <= " ") /* => Warehouse*/
    set PC0KM001.PC0KMWHS skip, invisible; /* => Warehouse*/
  else
    PC0KM001.PC0KMWHS = PC0KW01.XWHCD; /* => Warehouse*/
  end

  if (PC0KW01.XOWCD <= " ") /* => Owner Group*/
    set PC0KM001.PC0KMOW skip, invisible; /* => Owner Group*/
  else
    PC0KM001.PC0KMOW = PC0KW01.XOWCD; /* => Owner Group*/
  end

  PC0KM001.PC0KMVAL = PC0KW01.PC0KWTVL; /* => Total Value*/
  PC0KM001.PC0KMQTY = PC0KW01.PC6TORDE; /* => Total Quantity*/

  PC0KM001.PC6MICHG = PC0KW01.PC6MICHG; /* ===> Misc Charges (Apparel)*/

  if (PC0KW01.PC6AIRNB <= 0) /* ===> Air Req NBR*/
    set PC0KM001.PC6AIRNB skip, invisible; /* ===> Air Req NBR*/
  else
    PC0KM001.PC6AIRNB = PC0KW01.PC6AIRNB; /* ===> Air Req NBR*/
  end

  if (PC0KW01.YMTCD != "AF" /* ===> MODE*/
   || PC0KW01.XGPCD != "03") /* ===> not apparel*/
    set PC0KM001.PC-NIKE-AFRGT-PCT skip, invisible; /* ====> nike air frgt pct*/
    set PC0KM001.PC-NIKE-AFRGT-PCT-LIT skip, invisible;
                                   /* =====> nike air frgt pct literal*/
    set PC0KM001.PC-FCTY-AFRGT-PCT skip, invisible; /* ====> fact air frgt pct*/
    set PC0KM001.PC-FCTY-AFRGT-PCT-LIT skip, invisible;
                                   /* =====> fact air frgt pct literal*/
  else
    PC0KM001.PC-NIKE-AFRGT-PCT = PC0KW01.PC-NIKE-AFRGT-PCT; /* naf%*/
    PC0KM001.PC-FCTY-AFRGT-PCT = PC0KW01.PC-FCTY-AFRGT-PCT; /* faf%*/
  end

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMOET skip;
  end

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> M001     "Dates"*/
   /* ------------------------------------------------------------*/

  PC0KM001.PC0KMRTS = PC0KW01.PC0KWDT5; /* ===> RTS Date*/
  PC0KM001.PC0KMETL = PC0KW01.PC0KWDT6; /* ===> ETAL Date*/
  PC0KM001.PC0KMETA = PC0KW01.PC0KWDT7; /* ===> ETA Date*/

  if (PC0KW01.PC6RTADT <= 0) /* ===> RTA Date*/
    set PC0KM001.PC0KMRTA skip, invisible; /* ===> RTA Date*/
  else
    PC0KM001.PC0KMRTA = PC0KW01.PC0KWDT4; /* ===> RTA Date*/
  end

  if (PC0KW01.PC6OETS <= 0) /* ===> Original ETS Date*/
    set PC0KM001.PC0KMOET skip, invisible; /* ===> Original ETS Date*/
  else
    PC0KM001.PC0KMOET = PC0KW01.PC0KWDT2; /* ===> Original ETS Date*/
  end

  if (PC0KW01.PC6ETSDT <= 0) /* ===> ETS Date*/
    set PC0KM001.PC0KMEST skip, invisible; /* => ETS map display*/
  else
    PC0KM001.PC0KMEST = PC0KW01.PC0KWDT1; /* => ETS map display*/
  end

  if (PC0KW01.PC6OETAL <= 0) /* ===> override ETAL Date*/
    set PC0KM001.PC0KMETO skip, invisible; /* ===>override ETAL Date*/
  else
    PC0KM001.PC0KMETO = PC0KW01.PC0KWDT3; /* ===> override ETAL Date*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K122 ***********************/
end // end PC0K122

// Format the pass record data
Function PC0K123()
  set PC0KM001.XGPCD skip, bold;
   /* ------------------------------------------------------------*/
   /* If Unit of measure code, load map & display <ecord*/
   /* ------------------------------------------------------------*/
  if (PC0KW03.XUMCD > " ")
    set PC0KM001.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XPGCD > " ")
    set PC0KM001.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2INSEG > " ")
    set PC0KM001.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XOWCD > " ") /* owner group code*/
    set PC0KM001.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XQACD > " ") /* quality code*/
    set PC0KM001.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDMCD > " ")
    set PC0KM001.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YSMXDV > " ")
    set PC0KM001.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2CUXID > " ")
    set PC0KM001.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, load map & display record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6ETSDT > 0)
    set PC0KM001.PC0KMETS skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dist method, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDSCD > " "
   && PC0KW03.XDSCD != "*")
    set PC0KM001.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YMTCD > " ")
    set PC0KM001.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XWHCD > " ")
    set PC0KM001.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6PLAN > 0)
    set PC0KM001.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If item status, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6STAT > " ")
    set PC0KM001.PC6STAT skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY2CLRID > " ")
    set PC0KM001.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, load map & display record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY1STNBR > " ")
    set PC0KM001.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If P.O. Number, always valued, load map & display record*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC3PONBR skip, bold;

   /* **                                                        ***/
   /* ********************** End of PC0K123 ***********************/
end // end PC0K123

// Format the size display data
Function PC0K124()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PC0KM001.PC0KMASK[1] for 16; /* ===> Initialize FOB ORVD ID*/
  move " " to PC0KM001.SY4IDDSC[1] for 16;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PC0KM001.PC0KMNQT[1] for 16;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PC0KM001.PC0KMOQT[1] for 16; /* ===> Initialize map "on order qty"*/
  move 0 to PC0KM001.PC0KMFOB[1] for 16;
                                   /* ===> Initialize map "FOB price"*/
  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  PC0KM001.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;
  while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
   && PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/
    /**/
    if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)
      /**/
      /**/
      PC0KM001.SY4IDDSC[PC0KWIXM] = PC0KW01.SY4IDDSC[PC0KWIXS];
      PC0KM001.PC0KMOQT[PC0KWIXM] = PC0KW01.PC7ORDEQ[PC0KWIXS];
      /**/
      set PC0KM001.SY4IDDSC[PC0KWIXM] initialAttributes;
      set PC0KM001.PC0KMOQT[PC0KWIXM] initialAttributes;
      set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible; /* ==>new quantity*/
      /**/
      if (COMMAREA.CAILVL[10] == "Y") /* ===> FOB Security inquiry flag*/
        /**/
        /**/
        if (PC0KW00.PC0KWIXM == 1                          /* ==> first display position*/
         || PC0KW01.PC0KWVRD[PC0KWIXS] != PC0KW00.PC0KWCB1 /* ==> prv prc*/
         || PC0KW01.PC0KWVRF[PC0KWIXS] != PC0KW00.PC0KWCB2) /* ==> prv prc*/
          /**/
          PC0KW00.PC0KWCB1 = PC0KW01.PC0KWVRD[PC0KWIXS]; /* ==> prv prc*/
          PC0KW00.PC0KWCB2 = PC0KW01.PC0KWVRF[PC0KWIXS]; /* ==> prv prc*/
          /**/
          /**/
          if (PC0KW01.PC0KWVRF[PC0KWIXS] == "Y") /* ===> FOB override flag*/
            /**/
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip, bold;
            /**/
            PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
            PC0KM001.PC0KMASK[PC0KWIXM] = "*";
            /**/
            if (PC0KW00.PC0KWPFF == "N" /* ===> Factory FOB price data found*/
             && PCWREC.XXXMSGNO == 118)
              PCWREC.XXXMSGNO = 0;
              PC0KW00.XXXPRCNM = "PC0K";
            end
            /**/
            /**/
          else /* ===> no override price*/
            PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
          end /* ===>QTYs > 0*/
          /**/
          /**/
        else /* ===> suppress FOB Price*/
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        end /* ===> control break check for FOB*/
                                   /* Suppression*/
        /**/
        /**/
      else /* ===> lack of security*/
        /**/
        set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        /**/
      end /* ===> security check*/
      /**/
      /**/
      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
      /**/
    end
    /**/
    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1; /* ===>Increment size index*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC0KMAML[1] skip, invisible; /* ===> new amt Literal*/
  set PC0KM001.PC0KMAML[2] skip, invisible; /* ===> new amt Literal*/

  if (PC0KW00.PC0KWIXM <= 09) /* ===> size screen half full*/
    set PC0KM001.PC0KMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PC0KM001.PC0KMSZL[2] initialAttributes; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] initialAttributes; /* ===> on order literal*/
     /* SET PC0KM001.PC0KMFBL(2) DEFINED;/* ===> FOB Literal*/
  end

  while (PC0KW00.PC0KWIXM <= 16) /* Until size screen is full*/
    set PC0KM001.SY4IDDSC[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMOQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K124 ***********************/
end // end PC0K124

// -->Check Attention Identifier
Function PC0K130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* no product adding for sap po*/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01") /* VRAMAC*/
      converseLib.validationFailed(576);
      exit stack;
    end
  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0KW00.PC0KWSWR == "Y") /* Request for data*/
      set PC0KW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.CATOAP > " " /* FAST PATH was requested*/
   || PC0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
      PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PC0KM001.CATOAP cursor, bold; /* Highlight*/
      PC0KM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0KW00.XXXPRCNM = "PC0K130"; /* Module identification*/

    else

      PC0KW00.XXXPRCNM = "PC0K130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

  if (COMMAREA.CAILVL[10] != "Y"
   && converseVar.eventKey is pf12) /* and PF12 was pressed*/

    PC0KW00.XXXPRCNM = "PC0K130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* PF1 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PC0E"; /* Application find code*/
      PC0K131(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* Application find code*/
      PC0K131(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* Application find code*/
      PC0K131(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
    PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PC0KM001.CATOAP cursor, bold; /* Highlight*/
    PC0KW00.XXXPRCNM = "PC0K130"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PC0KW00.XXXPRCNM = "PC0K130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K130 ***********************/
end // end PC0K130

// load pass rec with select data
Function PC0K131()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  set PCWREC empty;

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;

  if (COMMAREA.CATOAP != "PC0M")
    PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K131 ***********************/
end // end PC0K131

// -->Reset Highlighted Fields
Function PC0K140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0KM001.CATOAP initialAttributes; /* TO application*/
  set PC0KM001.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K140 ***********************/
end // end PC0K140

// -->Verify The Entered Data
Function PC0K150()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do and ezeflo to try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KW911 == "Y" /* ===> -911 SQL*/
   && PC0KW00.PC0KWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PC0K151(); /* Verify scroll*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.CAITEM > " ") /* Application data was entered*/

    PC0KW00.XXXPRCNM = "PC0K150"; /* Module identification*/
    set PC0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K150 ***********************/
end // end PC0K150

// Verify scroll request
Function PC0K151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll sizes back request*/
   && PC0KW00.PC0KWF16 == "Y")    /* ===>First 16 sizes are displayed*/

    PC0KW00.XXXPRCNM = "PC0K151"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous sizes to display*/
    converseLib.clearScreen();
    
    set PC0KM001.CATOAP cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll sizes forward request*/

    if (PC0KW00.PC0KWF16 == "Y" /* ===>First 16 sizes are displayed*/
     || PC0KW00.PC0KWM16 == "Y") /* ===>Middle 16 sizes are displayed*/

      /* ------------------------------------------------------------*/
      /* Verify more sizes for scroll request*/
      /* ------------------------------------------------------------*/

      while (PC0KW00.PC0KWIXS <= 40) /* ===> Until end of sizes*/

        if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)
          return; /* ===> exit to process valid scroll*/
                                   /* request*/
        end

        PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1;
                                   /* ===>Increment line index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* scroll request invalid because:*/
            /* 1) last 16 styles displayed*/
        /* or  2) no more sizes to display*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K151"; /* Module identification*/
    converseLib.validationFailed(76); /* No more sizes to display*/
    converseLib.clearScreen();
    
    set PC0KM001.CATOAP cursor;
    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K151 ***********************/
end // end PC0K151

// -->Process Valid Input Request
Function PC0K160()
   /* ------------------------------------------------------------*/
   /* if PF6 was pressed,*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* Selection map requested*/

    COMMAREA.CATOAP = "PC0I";
    PC0K161(); /* =====> move pass data*/
    PC0K162(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if PF14 was pressed*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf14) /* Selection map requested*/

    COMMAREA.CATOAP = "PC05";
    PC0K161(); /* =====> move pass data to pass record*/
    PC0K162(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0KW00.PC0KWSWS = "Y"; /* Format the map switch*/
    /* always restart at size 1 when pf7 entered*/
    PC0KW00.PC0KWF16 = "Y"; /* first 16 sizes*/
    PC0KW00.PC0KWM16 = "N"; /* middle 16 sizes*/
    PC0KW00.PC0KWIXS = 1; /* initialize size index*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0KW00.PC0KWSWS = "Y"; /* Format the map switch*/
    if (PC0KW00.PC0KWF16 == "Y") /* was at first 16 sizes*/
      PC0KW00.PC0KWF16 = "N"; /* first 16 sizes*/
      PC0KW00.PC0KWM16 = "Y"; /* middle 16 sizes*/
    else /* was on middle 16 sizes*/
      PC0KW00.PC0KWF16 = "N"; /* first 16 sizes*/
      PC0KW00.PC0KWM16 = "N"; /* middle 16 sizes*/
    end

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf11) /* ===> Right map requested*/

    PC0KW00.PC0KWSWM = "2"; /* ===>set request for right map*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf12) /* ===> po/fy fob requested*/

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY)

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

      PC0K161(); /* =====> move pass data to pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      PC0KW00.PC0KWXIT = "Y";

    else

      PC0KW00.PC0KWSWR = "Y";
      PC0KW00.PC0KWSWF = "Y";
      PC0KW00.PC0KWS2F = "Y";
      PC0KW00.PC0KWIXS = 1;
    end

  end

  if (converseVar.eventKey is enter) /* ===> next style requested*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY)

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

      PC0K161(); /* =====> move pass data to pass record*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      PC0KW00.PC0KWXIT = "Y";

    else

      PC0KW00.PC0KWSWR = "Y";
      PC0KW00.PC0KWSWF = "Y";
      PC0KW00.PC0KWS2F = "Y";
      PC0KW00.PC0KWIXS = 1;
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K160 ***********************/
end // end PC0K160

// load pass rec with select data
Function PC0K161()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;
  PCWREC.XDMCD = PC0KW01.XDMCD;
  PCWREC.XQACD = PC0KW01.XQACD;
  PCWREC.XOWCD = PC0KW01.XOWCD;
  PCWREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCWREC.XPGCD = PC0KW01.XPGCD;
  PCWREC.XUMCD = PC0KW01.XUMCD;
  PCWREC.PC6ETSDT = PC0KW01.PC6ETSDT;
  PCWREC.YMTCD = PC0KW01.YMTCD;
  PCWREC.XWHCD = PC0KW01.XWHCD;
  PCWREC.PC2CUXID = PC0KW01.PC2CUXID;
  PCWREC.XSECD = PC0KW01.XSECD;
  PCWREC.XDSCD = PC0KW01.XDSCD;
  PCWREC.PC6PLAN = PC0KW01.PC6PLAN;
  PCWREC.YSMXDV = PC0KW01.YSMXDV;
  PCWREC.PC6RTADT = PC0KW01.PC6RTADT;
  PCWREC.PC6OETS = PC0KW01.PC6OETS;

   /* **                                                        ***/
   /* ********************** End of PC0K161 ***********************/
end // end PC0K161

// save key data for return
Function PC0K162()

   /* ------------------------------------------------------------*/
       /* Set the pass record with the current map indicator*/
       /* and temp storage page, for return access*/
   /* ------------------------------------------------------------*/

  move PC0KW03 to PC0KW02 withV60Compat; /* ===> save selected pass data*/
  PC0KW02.PC0KWSWM = PC0KW00.PC0KWSWM; /* ===> save map number*/
  PC0KW02.PC0KWIDX = PC0KW00.PC0KWCSY; /* ===> save style index*/
  PCWREC.PCWSYIDX = PC0KW00.PC0KWCSY; /* ===> pass style index*/
  PC0KW02.CAFROMAP = COMMAREA.CAFROMAP; /* ===> save from application*/

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.PCWFNC[1] = "I"; /* function*/
    PCWREC.CAFROMAP[1] = "PC0K"; /* From application id*/
    PCWREC.PCWUSER1 = PC0KW02.PC0KWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")
      PCWREC.PCWFNC[2] = "I"; /* function*/
      PCWREC.CAFROMAP[2] = "PC0K"; /* From application id*/
      PCWREC.PCWUSER2 = PC0KW02.PC0KWUSR;
    else

      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.PCWFNC[3] = "I"; /* function*/
        PCWREC.CAFROMAP[3] = "PC0K"; /* From application id*/
        PCWREC.PCWUSER3 = PC0KW02.PC0KWUSR;
      else

        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.PCWFNC[4] = "I"; /* function*/
          PCWREC.CAFROMAP[4] = "PC0K"; /* From application id*/
          PCWREC.PCWUSER4 = PC0KW02.PC0KWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K162 ***********************/
end // end PC0K162

// ==>Process Map 2 Inquiry Logic
Function PC0K200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0K110(); /* Obtain the data to display*/

  PC0K220(); /* Format and display the map*/

  PC0K230(); /* Check attention identifier*/

  PC0K240(); /* Reset fields to normal intensity*/

  PC0K250(); /* Verify the entered data*/

  PC0K260(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0K200 ***********************/
end // end PC0K200

// -->Format And Converse Map 2
Function PC0K220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PC0KW00.PC0KWS2F == "Y") /* ===> Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0KM002 initial;

      /* ------------------------------------------------------------*/
       /* Format the LEFT map*/
      /* ------------------------------------------------------------*/

      PC0K221(); /* ===> Format the literals*/

      PC0K222(); /* ===> Format the display data*/

      PC0K223(); /* ===> Format pass record fields*/

      PC0KW00.PC0KWS2F = "N"; /* ===> Format the map 2 switch*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

  if (PC0KM002.XGPCD == "02")
    set PC0KM002.PC0KM-LATE-BK-FL-LIT skip;
    set PC0KM002.FB-LATE-BK-FL skip;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0KM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0KM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0KM002.XXXPRCNM = PC0KW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0KM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0KM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0KW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0KM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0KM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K220 ***********************/
end // end PC0K220

// Format the display literals
Function PC0K221()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PC0KM002.PC0KMCSY = PC0KW00.PC0KWCSY; /* ===> current style index*/
  PC0KM002.PC0KMTSY = PC0KW00.PC0KWTSY; /* ===> total styles*/
  PC0KM002.PC0KMFNC = "INQUIRY"; /* ===> map function*/
  set PC0KM002.CATOAP cursor; /* =>*/

  set PC0KM002.YACCD skip, invisible; /* => Audit Code*/
  set PC0KM002.PC0KMAUD skip, invisible; /* => Audit Code literal*/
  set PC0KM002.YOHCD skip; /* => Hold Code*/
  set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
  set PC0KM002.PC0KMCUS skip; /* => Cust. Xref*/
  set PC0KM002.OP1CUOID skip; /* => Cust Order ID*/
  set PC0KM002.XCTCD skip; /* =>*/
  set PC0KM002.OP1NORID skip; /* =>*/
  set PC0KM002.OP1CUPO skip; /* =>*/
  set PC0KM002.PC6CONNO skip; /* =>*/

  set PC0KM002.OP1CUOID skip; /* =>*/
  set PC0KM002.PC6NILRF skip; /* =>*/
  if (PC0KW01.XGPCD != "02")
    set PC0KM002.PC0KMNDT skip, invisible; /* =>*/
  end

  if (PC0KW01.XGPCD == "02"
   && PC0KW01.OP1CUNDT == 0)
    set PC0KM002.PC0KMNDT skip, invisible; /* =>*/
  end

  if (PC0KW01.XGPCD == "02"
   && PC0KW01.OP1CUNDT != 0)
    set PC0KM002.PC0KMNDT skip;
  end

  if (PC0KW01.XGPCD != "02")
    set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
    set PC0KM002.PC6CONNO skip, invisible; /* =>conformation number*/
    set PC0KM002.PC0KMLT1 skip, invisible; /* ===> size avail literal*/
    set PC0KM002.PC0KMLT2 skip, invisible; /* ===> confirm number literal*/
    set PC0KM002.PC0KMLT3 skip, invisible; /* ===> dev style literal*/
    set PC0KM002.PC0KMLT4 skip, invisible; /* ===> comp ring literal*/
    set PC0KM002.PC0KMNDL skip, invisible; /* ===> need date literal*/
  end

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "QQ"
     || PC0KW01.PC4ORTYP == "OR"
     || PC0KW01.PC4ORTYP == "S1"
     || PC0KW01.PC4ORTYP == "S4")

      set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
      set PC0KM002.PC6CONNO skip, invisible; /* =>conformation number*/
      set PC0KM002.PC0KMLT1 skip, invisible; /* ===> size avail literal*/
      set PC0KM002.PC0KMLT2 skip, invisible; /* ===> confirm number literal*/
      set PC0KM002.PC0KMLT3 skip, invisible; /* ===> dev style literal*/
      set PC0KM002.PC0KMLT4 skip, invisible; /* ===> comp ring literal*/

    end /* ===> Order Type check*/
  end /* ===> GPC = '02'*/

   /* ------------------------------------------------------------*/
   /* set appropriate PF key literals if the user is authorized*/
   /* to perform various functions.*/
   /* ------------------------------------------------------------*/

  set PC0KM002.PC0KMP15 skip, invisible; /* ====>  literal*/

   /* **                                                        ***/
   /* ********************** End of PC0K221 ***********************/
end // end PC0K221

// Format the display data
Function PC0K222()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> PC0KM002 ( the header info)*/
   /* ------------------------------------------------------------*/

  PC0KS03(); /* ===> load the header data*/

   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> PC0KM002 (not the header info)*/
   /* ------------------------------------------------------------*/

  PC0KM002.PC0KMSTY = PC0KW01.SY1STNBR; /* => Style*/
  PC0KM002.PC0KMCLR = PC0KW01.SY2CLRID; /* => Color*/
  PC0KM002.SY1STYNM = PC0KW01.SY1STYNM; /* => Style short name*/
  PC0KM002.SY2CLRDS = PC0KW01.SY2CLRDS; /* => Color abbreviated*/

  PC0KM002.PC0KMDIV = PC0KW01.YSMXDV; /* => Division*/
  PC0KM002.PC0KMDVD = PC0KW01.PC0KWDVD; /* =>Division description*/

  if (PC0KW01.YOHCD <= " ") /* => Hold Code*/
    set PC0KM002.YOHCD skip, invisible; /* => Hold Code*/
  else
    PC0KM002.YOHCD = PC0KW01.YOHCD; /* => Hold Code*/
    if (PC0KW01.YOHCD in YOHTBL.YOHCD)
      PC0KM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
    end
  end

  if (PC0KW01.PC6SZAVL <= " ") /* => Size available ring*/
    set PC0KM002.PC6SZAVL skip, invisible; /* =>*/
  else
    PC0KM002.PC6SZAVL = PC0KW01.PC6SZAVL; /* => Size available ring*/
  end

  PC0KM002.PC0KMCUS = PC0KW01.PC2CUXID; /* =>*/

  PC0KM002.KUCCOID = PC0KW01.KUCCOID; /* => Company ID*/
  PC0KM002.KUMSTRID = PC0KW01.KUMSTRID; /* => Store ID*/
  PC0KM002.XNXCD = PC0KW01.XNXCD; /* => Nike dept code*/
  PC0KM002.KUMSTRNM = PC0KW01.KUMSTRNM; /* => Store name*/

  if (PC0KW01.OP1CUPO <= " ") /* => Customer P.O.*/
    set PC0KM002.OP1CUPO skip, invisible; /* =>*/
  else
    PC0KM002.OP1CUPO = PC0KW01.OP1CUPO; /* =>*/
  end

  PC0KM002.XCTCD = PC0KW01.XCTCD; /* =>  foreign country code*/
  if (PC0KW01.XCTCD in XCTTBL.XCTCD)
    PC0KM002.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
  end

  if (PC0KW01.OP1CUOID <= 0) /* => Customer Order ID*/
    set PC0KM002.OP1CUOID skip, invisible; /* =>*/
  else
    PC0KM002.OP1CUOID = PC0KW01.OP1CUOID; /* =>*/
  end

  if (PC0KW01.OP1NORID <= 0) /* => Nike order ID*/
    set PC0KM002.OP1NORID skip, invisible; /* =>*/
  else
    PC0KM002.OP1NORID = PC0KW01.OP1NORID; /* =>*/
  end

  PC0KM002.PC6TORIG = PC0KW01.PC6TORIG; /* => Total Original Quantity*/
  PC0KM002.PC6TORDE = PC0KW01.PC6TORDE; /* => Total On Order Quantity*/
  PC0KM002.PC6TADD = PC0KW01.PC6TADD; /* => Total add Quantity*/
  PC0KM002.PC6TCNCL = PC0KW01.PC6TCNCL; /* => Total Cancel Quantity*/

  if (PC0KW01.PC6NILRF <= " ") /* => Nil Reference Number*/
    set PC0KM002.PC6NILRF skip, invisible; /* =>*/
  else
    PC0KM002.PC6NILRF = PC0KW01.PC6NILRF; /* => Nil Reference Number*/
  end

  if (PC0KW01.PC6CONNO <= " ") /* => Confirmation number*/
    set PC0KM002.PC6CONNO skip, invisible; /* =>*/
  else
    PC0KM002.PC6CONNO = PC0KW01.PC6CONNO; /* =>*/
  end

  set PC0KM002.PC0KMDEV skip, invisible; /* =>*/

  if (PC0KW01.XGPCD == "02")

    PC0KM002.PC0KMNDT = PC0KW01.PC0KWDT8; /* ===> Customer need date*/

    if (PC0KW01.PC4ORTYP == "SS" /* => order type*/
     || PC0KW01.PC4ORTYP == "S3") /* => order type Side 1 salesman sample*/
      PC0KM002.PC0KMDEV = PC0KW01.SY2RSTNB; /* => development style*/
      PC0KM002.PC0KMDSC = PC0KW01.PC6CLVAR; /* => development color*/
    end

    if (PC0KW01.PC4ORTYP == "CR") /* => order type*/
      PC0KM002.PC0KMCMP = PC0KW01.SY2RSTNB; /* => component ring*/
    end

    PC0KM002.FB-LATE-BK-FL = PC0KW01.FB-LATE-BK-FL; /* Late book flag*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K222 ***********************/
end // end PC0K222

// Format the pass record data
Function PC0K223()
   /* ------------------------------------------------------------*/
   /* Format the Pass record data with Highlighted map field*/
   /* ------------------------------------------------------------*/

  set PC0KM002.XGPCD skip, bold;

   /* ------------------------------------------------------------*/
   /* If Unit of measure code, from pass Record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XUMCD > " ")
    set PC0KM002.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XPGCD > " ")
    set PC0KM002.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2INSEG > " ")
    set PC0KM002.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XOWCD > " ") /* owner group code*/
    set PC0KM002.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XQACD > " ") /* quality code*/
    set PC0KM002.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDMCD > " ")
    set PC0KM002.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YSMXDV > " ")
    set PC0KM002.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2CUXID > " ")
    set PC0KM002.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6ETSDT > 0)
    set PC0KM002.PC0KMETS skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dist method, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDSCD > " "
   && PC0KW03.XDSCD != "*")
    set PC0KM002.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YMTCD > " ")
    set PC0KM002.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XWHCD > " ")
    PC0KM002.XWHCD = PC0KW03.XWHCD;
    set PC0KM002.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6PLAN > 0)
    set PC0KM002.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If item status, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6STAT > 0)
    set PC0KM002.PC6STAT skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY2CLRID > " ")
    set PC0KM002.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY1STNBR > " ")
    set PC0KM002.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If P.O. Number, always valued, from pass record*/
   /* ------------------------------------------------------------*/

  set PC0KM002.PC3PONBR skip, bold;

   /* **                                                        ***/
   /* ********************** End of PC0K223 ***********************/
end // end PC0K223

// -->Check Attention Identifier
Function PC0K230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* no product adding for sap po*/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01") /* VRAMAC*/
      converseLib.validationFailed(576);
      exit stack;
    end
  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0KW00.PC0KWSWR == "Y") /* Request for data*/
      set PC0KW01 empty; /* m002 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.CATOAP > " " /* FAST PATH was requested*/
   || PC0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
      PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PC0KM002.CATOAP cursor, bold; /* Highlight*/
      PC0KM002.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0KW00.XXXPRCNM = "PC0K230"; /* Module identification*/

    else

      PC0KW00.XXXPRCNM = "PC0K230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* PF1 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF13 was pressed*/
     || converseVar.eventKey is pf21) /* PF17 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PC0E"; /* Application find code*/
      PC0K231(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* Application find code*/
      PC0K231(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* Application find code*/
      PC0K231(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
    PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PC0KM002.CATOAP cursor, bold; /* Highlight*/
    PC0KW00.XXXPRCNM = "PC0K230"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6  was not pressed*/
   && converseVar.eventKey not pf10  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    PC0KW00.XXXPRCNM = "PC0K230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K230 ***********************/
end // end PC0K230

// load pass rec with select data
Function PC0K231()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  set PCWREC empty;

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;

  if (COMMAREA.CATOAP != "PC0M")
    PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K231 ***********************/
end // end PC0K231

// -->Reset highlighted fields
Function PC0K240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PC0KM001.CATOAP initialAttributes; /* TO application*/
  set PC0KM001.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K240 ***********************/
end // end PC0K240

// -->Verify The Entered Data
Function PC0K250()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do and ezeflo to try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KW911 == "Y" /* ===> -911 SQL*/
   && PC0KW00.PC0KWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.CAITEM > " ") /* Application data was entered*/

    PC0KW00.XXXPRCNM = "PC0K250"; /* Module identification*/
    set PC0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K250 ***********************/
end // end PC0K250

// -->Process Valid Input Request
Function PC0K260()
   /* ------------------------------------------------------------*/
   /* if PF6 was pressed,*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* Selection map requested*/

    COMMAREA.CATOAP = "PC0I";
    PC0K261(); /* =====> move pass data*/
    PC0K262(); /* =====> move pass data*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if PF14 was pressed*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf14) /* Selection map requested*/

    COMMAREA.CATOAP = "PC05";
    PC0K261(); /* =====> move pass data to pass record*/
    PC0K262(); /* =====> move pass data to pass record*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a left map requested requested, set map switch*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* ===> Left map requested*/

    PC0KW00.PC0KWSWM = "1"; /* ===>set request for left map*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is enter) /* ===> next style requested*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY)

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

      PC0K261(); /* =====> move pass data to pass record*/

      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      PC0KW00.PC0KWXIT = "Y";

    else

      PC0KW00.PC0KWSWR = "Y";
      PC0KW00.PC0KWSWF = "Y";
      PC0KW00.PC0KWS2F = "Y";
      PC0KW00.PC0KWSWM = 1; /* ===> map 1 requested*/
      PC0KW00.PC0KWIXS = 1; /* ===> size index*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K260 ***********************/
end // end PC0K260

// load pass rec with pass data
Function PC0K261()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;
  PCWREC.XDMCD = PC0KW01.XDMCD;
  PCWREC.XQACD = PC0KW01.XQACD;
  PCWREC.XOWCD = PC0KW01.XOWCD;
  PCWREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCWREC.XPGCD = PC0KW01.XPGCD;
  PCWREC.XUMCD = PC0KW01.XUMCD;
  PCWREC.PC6ETSDT = PC0KW01.PC6ETSDT;
  PCWREC.YMTCD = PC0KW01.YMTCD;
  PCWREC.XWHCD = PC0KW01.XWHCD;
  PCWREC.PC2CUXID = PC0KW01.PC2CUXID;
  PCWREC.XSECD = PC0KW01.XSECD;
  PCWREC.XDSCD = PC0KW01.XDSCD;
  PCWREC.PC6PLAN = PC0KW01.PC6PLAN;
  PCWREC.YSMXDV = PC0KW01.YSMXDV;
  PCWREC.PC6OETS = PC0KW01.PC6OETS;
  PCWREC.PC6RTADT = PC0KW01.PC6RTADT;

   /* **                                                        ***/
   /* ********************** End of PC0K261 ***********************/
end // end PC0K261

// save key data for return
Function PC0K262()

   /* ------------------------------------------------------------*/
       /* Set the pass record with the current map indicator*/
       /* and temp storage page, for return access*/
   /* ------------------------------------------------------------*/

  move PC0KW03 to PC0KW02 withV60Compat; /* ===> save selected pass data*/
  PC0KW02.PC0KWSWM = PC0KW00.PC0KWSWM; /* ===> save map number*/
  PC0KW02.PC0KWIDX = PC0KW00.PC0KWCSY; /* ===> save style index*/
  PCWREC.PCWSYIDX = PC0KW00.PC0KWCSY; /* ===> pass style index*/
  PC0KW02.CAFROMAP = COMMAREA.CAFROMAP; /* ===> save from app*/

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.PCWFNC[1] = "I"; /* function*/
    PCWREC.CAFROMAP[1] = "PC0K"; /* From application id*/
    PCWREC.PCWUSER1 = PC0KW02.PC0KWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.PCWFNC[2] = "I"; /* function*/
      PCWREC.CAFROMAP[2] = "PC0K"; /* From application id*/
      PCWREC.PCWUSER2 = PC0KW02.PC0KWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.PCWFNC[3] = "I"; /* function*/
        PCWREC.CAFROMAP[3] = "PC0K"; /* From application id*/
        PCWREC.PCWUSER3 = PC0KW02.PC0KWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.PCWFNC[4] = "I"; /* function*/
          PCWREC.CAFROMAP[4] = "PC0K"; /* From application id*/
          PCWREC.PCWUSER4 = PC0KW02.PC0KWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K262 ***********************/
end // end PC0K262

// ==>Process Map 1 Maint Logic
Function PC0K300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0K310(); /* Obtain the data to display*/

  PC0K320(); /* Format and display the map*/

  PC0K330(); /* Check attention identifier*/

  PC0K340(); /* Reset fields to normal intensity*/

  PC0K350(); /* Verify the entered data*/

  PC0K360(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0K300 ***********************/
end // end PC0K300

// -->Obtain The Data To Display
Function PC0K310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  set PC0KM001 initial; /* ===> map display record*/
  set PC0KM002 initial; /* ===> map display record*/
  set PC0KW01 empty; /* ===> map display record*/
  set PC0KW04 empty; /* ===> saved copy of Item record*/

  PC0K311(); /* ===> get data from P.O. Item Table*/

  PC0K312(); /* ===> calc. dates for display record*/

  PC0K313(); /* ===> get data from P.O. Size Table*/

  PC0K314(); /* ===> get data from Size Desc. Trans.*/
                                   /* subroutine*/

  PC0K315(); /* ===> set-up to get Balance To Ship*/

  PC0KS05(); /* ===> get Style name and Color desc*/

  PC0K316(); /* ===> get P.O. Header info for FOB*/
                                   /* Access*/

  PC0K318(); /* ===> set-up and call for FOB data*/

  PC0K317(); /* ===> get FOB templete (all like*/
                                   /* items)*/

  PC0K319(); /* ===> calculate total value (QTY **/
                                   /* FOB)*/

  if (PC0KW01.PC2CUXID > " ")

    PC0KS06(); /* ===> Get customer info from VPRDCU01*/
                                   /* Table*/

    if (VPRDCU03.YPCCD == "N")
      PC0KW01.KUMSTRNM = VPRDCU03.PC2NAME; /* ===> move nike name*/
    else
      if (VPRDCU03.PC-PRDCU-APAO-FL == "E")
        PC0KS09(); /* ==> Get Store name from VESTOR01*/
      else
        PC0KS07(); /* ==> Get Store name from VSTORE01*/
      end
    end

  end

  PC0KS08(); /* ==> Get Division Group Desc*/

  if (PC0KW01.XGPCD == "03")
    PC0KS30(); /* ==> Get P.O. Type data*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/

   /* **                                                        ***/
   /* ********************** End of PC0K310 ***********************/
end // end PC0K310

// Get data from P.O. Item Table
Function PC0K311()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.XGPCD = PC0KW03.XGPCD;
  VPOITM05.PO-REG-CD = PC0KW03.PO-REG-CD;
  VPOITM05.PC3PONBR = PC0KW03.PC3PONBR;
  VPOITM05.PC6ITMNB = PC0KW03.PC6ITMNB[PC0KWCSY]; /* ===>current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    /* ===> move VPOITM05 corresponding data to:*/
    PC0KS23(); /* ===> move corresponding data to PC0KW01 (display record)*/
    PC0KS24(); /* ===> move corresponding data to PC0KW04 (save copy record)*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0K311"; /* Module identification*/
  set PC0KM001.CATOAP cursor, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> no data to display*/
    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K311 ***********************/
end // end PC0K311

// Calc. dates for display record
Function PC0K312()
   /* ------------------------------------------------------------*/
   /* ===> ETS date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6ETSDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMEST cursor, skip, bold; /* ===>ETS Date display*/
      return;
    end

    PC0KW01.PC0KWDT1 = TA2REC.TA2GRGA; /* ===>ETS Date display*/

  else

    PC0KW01.PC0KWDT1 = " "; /* ===>ETS Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> RTA date;===>  left  map col: header*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6RTADT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6RTADT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMRTA cursor, skip, bold; /* ===>RTA Date display*/
      return;
    end

    PC0KW01.PC0KWDT4 = TA2REC.TA2GRGA; /* ===>RTA Date display*/

  else

    PC0KW01.PC0KWDT4 = " "; /* ===>RTA Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> Original ETS date;===>  left map col: trailer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETS > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6OETS; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMOET cursor, bold; /* ===>original ETS Date display*/
      return;
    end

    PC0KW01.PC0KWDT2 = TA2REC.TA2GRGA; /* ===>OETS Date display*/

  else

    PC0KW01.PC0KWDT2 = " "; /* ===>OETS Date display*/

  end

   /* ------------------------------------------------------------*/
   /* ===> ETAL Override date;===>  left map col: trailer*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC6OETAL > 0) /* ===> ETAL override date*/

    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.PC6OETAL; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM001.PC0KMETO cursor, bold; /* ===> ETAL Override date*/
      return;
    end

    PC0KW01.PC0KWDT3 = TA2REC.TA2GRGA; /* ===> ETAL Override Date*/

  else

    PC0KW01.PC0KWDT3 = " "; /* ===> ETAL Override Date*/

  end

   /* ------------------------------------------------------------*/
   /* Always calculate ETAL, RTS, ETA.*/
     /* using XSPCS05*/
   /* ------------------------------------------------------------*/

  set PCPREC empty;

  PCPREC.XGPCD = VPOITM05.XGPCD;
  PCPREC.XWHCD = VPOITM05.XWHCD;
  PCPREC.PC2CUXID = VPOITM05.PC2CUXID;
  PCPREC.FY1FCTYC = VPOITM05.FY1FCTYC;
  PCPREC.YMTCD = VPOITM05.YMTCD;
  PCPREC.PC6RTADT = VPOITM05.PC6RTADT;
  PCPREC.PC6ETSDT = VPOITM05.PC6ETSDT;
  PCPREC.PC6ETALF = VPOITM05.PC6ETALF;
  PCPREC.PC4ORTYP = VPOITM05.PC4ORTYP;
  PCPREC.PCPPOIDT = VPOITM05.PC3POIDT;
  PCPREC.YSMXDV = VPOITM05.YSMXDV;

  XSPCS05();

   /* ------------------------------------------------------------*/
          /* ETA (estimated time of arrival - for PO items)*/
    /* PCPREC.PCPETADT  = ETA  date (ETS + MADD + ETT)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWETA = PCPREC.PCPETADT; /* ===>ETA Date*/
  if (PCPREC.PCPETADT == 0) /* ===>ETA Date*/
    PC0KW01.PC0KWDT7 = " "; /* ===>ETA Date display*/
  else
    PC0KW01.PC0KWDT7 = PCPREC.PCPMETA; /* ===>ETA Date display*/
  end

   /* ------------------------------------------------------------*/
          /* RTS (requested time of shipment)*/
    /* PCPREC.PCPRTSDT  = RTS  date (RTA - ETT)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWRTS = PCPREC.PCPRTSDT; /* ===>RTA Date*/
  if (PCPREC.PCPRTSDT == 0) /* ===>RTA Date*/
    PC0KW01.PC0KWDT5 = " "; /* ===>RTA Date display*/
  else
    PC0KW01.PC0KWDT5 = PCPREC.PCPMRTS; /* ===>RTA Date display*/
  end

   /* ------------------------------------------------------------*/
          /* ETAL (Estimated time of arrival)*/
    /* PCPREC.PCPETALD  = ETAL date (ETA + PADD)*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWETL = PCPREC.PCPETALD; /* ===> ETAL Date*/
  if (PCPREC.PCPETALD == 0) /* ===> ETAL Date*/
    PC0KW01.PC0KWDT6 = " "; /* ===> ETAL Date Display*/
  else
    PC0KW01.PC0KWDT6 = PCPREC.PCPMETAL; /* ===> ETAL Date Display*/
  end

   /* ------------------------------------------------------------*/
   /* ===> Customer need date;===> Right  map*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.OP1CUNDT > 0) /* ===> date -->(ccyymmdd)*/
    set TA2REC empty;
    TA2REC.TA2GRGGN = VPOITM05.OP1CUNDT; /* ===> date -->(ccyymmdd)*/
    TA2REC.TA2DYAOD = 0; /* ===> sum value to days diff*/

    PC0KS11(); /* ===> Call date calculation routine*/

    if (TA2REC.TA2RTNCD != 0) /* ===> invalid date*/
      set PC0KM002.PC0KMNDT cursor, skip, bold; /* ===> Date display*/
      return;
    end

    PC0KW01.PC0KWDT8 = TA2REC.TA2GRGA; /* ===>Need Date display*/

  else

    PC0KW01.PC0KWDT8 = " "; /* ===>Need Date display*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K312 ***********************/
end // end PC0K312

// Get data from P.O. Size Table
Function PC0K313()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = PC0KW01.XGPCD;
  VPOSIZ02.PO-REG-CD = PC0KW01.PO-REG-CD;
  VPOSIZ02.PC3PONBR = PC0KW01.PC3PONBR;
  VPOSIZ02.PC6ITMNB = PC0KW01.PC6ITMNB; /* ===> current style*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    /**/
    PC0KS25(); /* ===>load/save copy, in pc0kw05, for*/
                                   /* compare/audits*/
    /**/
     /* ===>load display record ======>*/
    move VPOSIZ02.PC7ORIGQ to PC0KW01.PC7ORIGQ[1] for all; /* ===>load display record*/
    move VPOSIZ02.PC7ORDEQ to PC0KW01.PC0KWNQT[1] for all; /* ===>load*/
    move VPOSIZ02.PC7ORDEQ to PC0KW01.PC7ORDEQ[1] for all; /* ===>load*/
    move VPOSIZ02.PC7FOBFL to PC0KW01.PC7FOBFL[1] for all; /* ===>load*/
    move VPOSIZ02.FY4FOBPR to PC0KW01.FY4FOBPR[1] for all; /* ===>load*/
    move VPOSIZ02.FY4FOBPR to PC0KW01.PC0KWVRD[1] for all; /* ===>load*/
    if (VPOSIZ02.ZFC-CRCY-CD == " ")
      PC0KW01.ZFC-CRCY-CD = "USD";
    else
      PC0KW01.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;
    end
    /**/
    return; /* Return to previous process*/
    /**/
  end

  PC0KW00.XXXPRCNM = "PC0K313"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor, bold; /* Highlight*/
  PC0KW00.PC0KWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/
    /**/
    PCWREC.XXXMSGNO = 18; /* =======> no data to display*/
    return; /* Return to previous process*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /**/
    set PC0KM001 initial; /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K313 ***********************/
end // end PC0K313

// Get data from Size Desc Trans
Function PC0K314()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = PC0KW01.XGPCD;
  PG3REC.SY1STNBR = PC0KW01.SY1STNBR;
  PG3REC.SY2CLRID = PC0KW01.SY2CLRID;
  PG3REC.XDMCD = PC0KW01.XDMCD;
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301(); /* Get valid sizes*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    move PG3REC.SY4IDDSC to PC0KW01.SY4IDDSC[1] for 40; /* ===>load display record*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PC0KW00.XXXPRCNM = "PC0K314"; /* Module identification*/
  PC0KW00.PC0KWSWM = "1"; /* request for map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    PC0KW00.PC0KW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K314 ***********************/
end // end PC0K314

// Set-up to get Balance To Ship
Function PC0K315()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  set PC5REC empty; /* ===> initialize record*/

  PC5REC.XGPCD = PC0KW01.XGPCD; /* ===>*/
  PC5REC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PC5REC.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  PC5REC.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  PC5REC.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  PC5REC.XDMCD = PC0KW01.XDMCD; /* ===>*/
  PC5REC.XQACD = PC0KW01.XQACD; /* ===>*/
  PC5REC.XOWCD = PC0KW01.XOWCD; /* ===>*/
  PC5REC.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
  PC5REC.XPGCD = PC0KW01.XPGCD; /* ===>*/
  PC5REC.XUMCD = PC0KW01.XUMCD; /* ===>*/
  PC5REC.PC5ERFL = "N";

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  PC5REC.PC2CUXID = PC0KW01.PC2CUXID; /* ===>*/
  PC5REC.OP1CUOID = PC0KW01.OP1CUOID; /* ===>*/
  PC5REC.OP1NORID = PC0KW01.OP1NORID; /* ===>*/
  if (PC0KW01.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW01.OP1CUOID;
    PC5REC.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    PC5REC.OP1PARTN = " ";
  end
  PC5REC.XWHCD = PC0KW01.XWHCD; /* ===>*/
  PC5REC.YMTCD = PC0KW01.YMTCD; /* ===>*/

  XPPC030(); /* ===> call subroutine to calc.*/
                                   /* "Balance to Ship"*/

   /* **                                                        ***/
   /* ********************** End of PC0K315 ***********************/
end // end PC0K315

// get P.O. HEADER Info
Function PC0K316()
   /* ------------------------------------------------------------*/
   /* Initialize the secondary key information for select unique*/
   /* ------------------------------------------------------------*/

  set VPOHDR02 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOHDR02.XGPCD = PC0KW01.XGPCD;
  VPOHDR02.PO-REG-CD = PC0KW01.PO-REG-CD;
  VPOHDR02.PC3PONBR = PC0KW01.PC3PONBR;

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Header table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S ";
  try
    call "VPOHDR02" (PCYREC, SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PC0KW01.PO-REG-CD = VPOHDR02.PO-REG-CD;
    PC0KW01.PC3CRDT = VPOHDR02.PC3CRDT;
    PC0KW01.XSECD = VPOHDR02.XSECD;
    PC0KW01.PCFSEYR = VPOHDR02.PCFSEYR;
    PC0KW01.PC3CMPNT = VPOHDR02.PC3CMPNT;

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0K316"; /* Module identification*/
   /* SET PC0KM001.PC3POIDT AUTOSKIP,BRIGHT    ; Highlight*/
  set PC0KM001.PC3PONBR skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPYR skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPMO skip, bold; /* Highlight*/
  set PC0KM001.PC0KMPDM skip, bold; /* Highlight*/
  set PC0KM001.FY1FCTYC skip, bold; /* Highlight*/
  set PC0KM001.PC4ORTYP skip, bold; /* Highlight*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(111); /* =======> no P.O. Number exists*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0KW00.PC0KWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y";

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K316 ***********************/
end // end PC0K316

// Get FOB ovrd templete
Function PC0K317()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set of items be used*/
   /* to build the FOB override templete.*/
   /* These fields are used to keep all like item's FOBs similar.*/

   /* Note: The Override templete is made up of 3 arrays*/

       /* PC0KW01.PC0KWVRD(PC0KWIXT)*/
        /* - loaded with factory Prices initially*/
        /* - overlayed with any found override prices*/

       /* PC0KW01.PC0KWVRF(PC0KWIXT)*/
        /* - loaded with "N" initially*/
        /* - overlayed with "Y" for  found override prices*/

       /* PC0KW01.PC0KWVRQ(PC0KWIXT)*/
        /* - accumulated on order QTYs for all items in item set*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12)
    if (PC0KW00.PC0KMFBL != "POFOB:")
      PC0KW00.PC0KMFBL = "POFOB:";
      move "POFOB:" to PC0KM001.PC0KMFBL[1] for all;
    else
      PC0KW00.PC0KMFBL = "FYFOB:";
      move "FYFOB:" to PC0KM001.PC0KMFBL[1] for all;
    end
  end

  if (converseVar.eventKey is pf9)
    PC0KW00.PC0KMFBL = "FYFOB:";
    move "FYFOB:" to PC0KM001.PC0KMFBL[1] for all;
  end

  if (converseVar.eventKey is pf2)
    PC0KW00.PC0KMFBL = "POFOB:";
    move "POFOB:" to PC0KM001.PC0KMFBL[1] for all;
  end

  PC0KW00.PC0KWSWT = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/
  if (PC0KW00.PC0KMFBL != "POFOB:")
    if (PC0KW00.PC0KWPFF == "Y") /* ===> factory price record found*/
      move PCOREC.FY4FOBPR to PC0KW01.PC0KWVRD[1] for all;
    else
      move 0 to PC0KW01.PC0KWVRD[1] for all; /* ===> initialize override price*/
    end
    /* ELSE;*/
    /* MOVEA VPOSIZ02.FY4FOBPR TO PC0KW01.PC0KWVRD;*/
  end
  move "N" to PC0KW01.PC0KWVRF[1] for all; /* ===> initialize override flag*/
  move 0 to PC0KW01.PC0KWVRQ[1] for all; /* ===> initialize qtys*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = PC0KW01.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0KW01.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0KW01.XQACD; /* ===>*/
  VPOITM05.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = PC0KW01.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0KW01.XUMCD; /* ===>*/

  VPOITM05.YSMXDV = PC0KW01.YSMXDV; /* ===> division*/

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.PC2CUXID = "*"; /* ===>*/
  VPOITM05.OP1PARTN = "*"; /* ===>*/
  VPOITM05.OP1CUOID = -1; /* ===>*/
  VPOITM05.OP1NORID = -1; /* ===>*/
  VPOITM05.XWHCD = "*"; /* ===>*/

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6PLAN = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

  PC0KSB1(); /* ========> select set and open cursor*/

  PC0KSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate FOB ovrd data asso. with each row.*/
     /* Load the FOB price tempelete with flag and price*/
     /* for the 40 size bucket associated with each item.*/
   /* Fetch and accumulate the total QTYs asso. with each row.*/

   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWSWT == "N") /* Until end of temp. item cursor*/

    if (VPOITM05.PC6STAT == "OP" /* ===> item status code*/
     || VPOITM05.PC6STAT == "FC" /* ===> item status code*/
     || VPOITM05.PC6STAT == "TN") /* ===> item status code*/

      PC0KSB6(); /* ==========> get size record row*/

      PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/

      while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/

        /* ------------------------------------------------------------*/
         /* accumulate FOB ovrd data asso. with each row.*/
        /* ------------------------------------------------------------*/

        if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y" /* ===> load FOB override data*/
         && PC0KW00.PC0KMFBL == "POFOB:")     

          PC0KW01.PC0KWVRD[PC0KWIXT] = VPOSIZ02.FY4FOBPR[PC0KWIXT];
          PC0KW01.PC0KWVRF[PC0KWIXT] = VPOSIZ02.PC7FOBFL[PC0KWIXT];

        end

        if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y" /* ===> load FOB override data*/
         && PC0KW00.PC0KMFBL == "FYFOB:"       
         && converseVar.eventKey is pf9)      

          PC0KW01.PC0KWVRD[PC0KWIXT] = VPOSIZ02.FY4FOBPR[PC0KWIXT];
          PC0KW01.PC0KWVRF[PC0KWIXT] = VPOSIZ02.PC7FOBFL[PC0KWIXT];

        end

        /* ------------------------------------------------------------*/
         /* accumulate the total on-order size QTYs asso. with each row*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWOR = VPOSIZ02.PC7ORDEQ[PC0KWIXT];
        PC0KW01.PC0KWVRQ[PC0KWIXT] = PC0KW01.PC0KWVRQ[PC0KWIXT] +         PC0KW00.PC0KWOR;

        PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
                                   /* ===> increment temp. index*/

      end /* ===> while more sizes*/

    end /* ===> status check*/

    PC0KSB2(); /* ==========> Fetch next item row*/
    /* ========================================> driving read*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0KSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0K317 ***********************/
end // end PC0K317

// Set-up to get (FOB data)
Function PC0K318()
   /* ------------------------------------------------------------*/
   /* Set-up and Get the FOB data*/
   /* ------------------------------------------------------------*/

  set PCOREC empty;
  PCOREC.XGPCD = PC0KW01.XGPCD;
  PCOREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCOREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCOREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCOREC.XDMCD = PC0KW01.XDMCD;
  PCOREC.XQACD = PC0KW01.XQACD;
  PCOREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCOREC.XUMCD = PC0KW01.XUMCD;
  PCOREC.XPGCD = PC0KW01.XPGCD;
  PCOREC.PC3POIDT = PC0KW01.PC3POIDT;
  PCOREC.PC3CRDT = PC0KW01.PC3CRDT;
  PCOREC.PCFSEYR = PC0KW01.PCFSEYR;
  PCOREC.XSECD = PC0KW01.XSECD;

  XSPCS04(); /* =======> Get fob prices*/

   /* ------------------------------------------------------------*/
   /* set appropriate flag and messages*/
   /* the PCOREC will contain the data necessary for FOB price*/
   /* processing and will not be modified until the next item*/
   /* is processed.*/
   /* ------------------------------------------------------------*/

  if (PCOREC.PCORECPF == "N")

    if (PCWREC.XXXMSGNO == 12 /* ===> data updated from another*/
     || PCWREC.XXXMSGNO == 1) /* ===>  update succesful*/
      /* ======= Next Sentence =========> to display data w/ message*/
    else

      if (COMMAREA.CAILVL[10] == "Y") /* ===> Authorized for prices*/
        PCWREC.XXXMSGNO = 118; /* No FOB price available*/
        PC0KW00.XXXPRCNM = "PC0K318"; /* Module identification*/
      end

    end

    PC0KW00.PC0KWPFF = "N"; /* ===> Price found flag*/

  else
    PC0KW00.PC0KWPFF = "Y"; /* ===> Price found flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K318 ***********************/
end // end PC0K318

// Calc the total value for qtys
Function PC0K319()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all the valued size quanitites*/

   /* Programming Note:*/

           /* PC0KW00.PC0KWVAL is used to calculate the value*/
            /* (accum value)   on a single size level.*/

           /* PC0KW01.PC0KWVAL is used to calculate the total*/
            /* (total value)   value for all sizes and thus is*/
                            /* saved in the map display record.*/
                            /* It is recalculate when maintenance*/
                            /* to Sizes or FOBs occur.*/

           /* PC0KW01.PC0KWAVL is used to calculate the net diff*/
            /* (audit value)   when writing out audits.*/
                            /* It is the saved total value before*/
                            /* maintenance to Sizes or FOBs.*/

   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXS = 1; /* ===> Initialize size index*/

  PC0KW00.PC0KWVAL = 0; /* ===> initialize quantity value*/
  PC0KW01.PC0KWTVL = 0; /* ===> initialize total value*/

  while (PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/

    if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)

      PC0KW00.FY4FOBPR = PC0KW01.PC0KWVRD[PC0KWIXS]; /* ===> P.O. FOB*/

      PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXS];

      PC0KW00.PC0KWVAL = PC0KW00.PC7ORDEQ * PC0KW00.FY4FOBPR;
      PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW00.PC0KWVAL;

    end

    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1;

  end

  PC0KW01.PC0KWAVL = PC0KW01.PC0KWTVL; /* =>SAVE AUDIT VALUE*/

  if (PC0KW01.XGPCD == "03")
    PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW01.PC6MICHG;
  end

  PC0KW00.PC0KWIXS = 1; /* ===> re-Initialize size index*/

   /* **                                                        ***/
   /* ********************** End of PC0K319 ***********************/
end // end PC0K319

// -->Format And Converse Map 1
Function PC0K320()
   /* ------------------------------------------------------------*/
   /* If no errors detected, then format the map*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PC0KW00.PC0KWSWF == "Y") /* ===> Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0KM001 initial;

      /* ------------------------------------------------------------*/
       /* Format the LEFT map data, excluding size data*/
      /* ------------------------------------------------------------*/

      PC0K321(); /* ===> Format the literals*/

      if (PC0KW01.PC6STAT == "CL" /* ===> status*/
       || PC0KW01.PC6STAT == "NC" /* ===> status*/
       || PC0KW01.PC6STAT == "CX" /* ===> status*/
       || PC0KW00.PC0KWSWP == "Y") /* ===>protect/update successful*/

        PC0K329(); /* ===> Format all display data*/
                                   /* protected*/

      end

      PC0K322(); /* ===> Format the display data*/

      PC0K323(); /* ===> Format pass record fields*/

      PC0KW00.PC0KWSWF = "N"; /* ===> Format the map switch*/
      PC0KW00.PC0KWSWS = "Y"; /* ===> sizes must be formatted*/
      PC0KW00.PC0KWF16 = "Y"; /* ===> first 16 sizes flag*/
      PC0KW00.PC0KWM16 = "N"; /* ===> middle 16 sizes flag*/
      if (converseVar.eventKey not pf2)
        PC0KW00.PC0KWPF2 = "N";
      end
      if (converseVar.eventKey not pf9)
        PC0KW00.PC0KWPF9 = "N";
      end
      PC0KW00.PC0KWIXS = 1; /* ===> initialize size index*/

    end

    /* ------------------------------------------------------------*/
     /* Format the LEFT map data, size data*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWSWS == "Y") /* ===> sizes must be formated*/

      if (PC0KW01.PC6STAT == "NC" /* ===> status*/
       || PC0KW01.PC6STAT == "CX" /* ===> status*/
       || PC0KW01.PC6STAT == "CL" /* ===> status*/
       || PC0KW00.PC0KWSWP == "Y") /* ===> protect/update successful*/

        PC0K324(); /* ===> Format the valued size display*/
                                   /* data*/
        /* ===================> protected*/
      else

        if (PC0KW00.PC0KWPF9 == "N") /* ===> open all sizes requested?*/

          PC0K325(); /* ===> Format the valued size display*/
                                   /* data*/
          /* ===================> unprotected*/

        else

          PC0K326(); /* ===> Format all size display data*/
          /* ===================> unprotected*/

        end /* ===> PF9 Key flag*/

      end /* ===> status check*/

    end /* ===> format sizes switch*/

    /* ------------------------------------------------------------*/
     /* Format the LEFT map data, FOB data unprotected*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWPF2 == "Y") /* ===> FOB must be formated unprotected*/

      PC0K327(); /* ===> Format FOBs for valued size*/
                                   /* display data*/

    end

    /* ----------------------------------------------------------*/
    /* validate for sap po items. For sap po's only SOs*/
    /* are allowed to change thru this application*/
    /* ----------------------------------------------------------*/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01" /* VRAMAC*/
     && COMMAREA.CACLVL[8] != "Y") /* Change lvl flg is set y for sap po*/
      PCWREC.XXXMSGNO = 584;
      PC0KW00.XXXPRCNM = "PC0K320";
      set PC0KM001.PC0KMPLN skip;
      set PC0KM001.PG1SC4CD skip;
      set PC0KM001.PC0KMEST skip;
      set PC0KM001.PC0KMCUS skip;
      set PC0KM001.PC0KMMOD skip;
      set PC0KM001.PC0KMWHS skip;
      set PC0KM001.OP1CUOID cursor;
       /* SET PC0KM001.OP1NORID AUTOSKIP;*/
      set PC0KM001.PC0KMADD skip;
      set PC0KM001.PC-NIKE-AFRGT-PCT skip;
      set PC0KM001.PC-FCTY-AFRGT-PCT skip;
      set PC0KM001.PC0KMOET skip;
      set PC0KM001.PC0KMETO skip;

      /* format display data for qty*/

      PC0KW00.PC0KWIXM = 1;
      while (PC0KW00.PC0KWIXM <= 16)

        if (PC0KM001.PC0KMNQT[PC0KWIXM] > 0)
          set PC0KM001.PC0KMNQT[PC0KWIXM] skip;
        else
          set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible;
        end
        PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1;
      end

      /* format display data for fob fields*/

      PC0KW00.PC0KWIXM = 1;
      while (PC0KW00.PC0KWIXM <= 16)

        if (PC0KM001.PC0KMFOB[PC0KWIXM] > 0)
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
        else
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        end
        PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1;
      end

      set PC0KM001.YACCD skip;
      if (PC0KW04.XGPCD == "03")
        set PC0KM001.PC0KMOW skip;
      else
        set PC0KM001.PC0KMRTA skip;
        set PC0KM001.PC6ETALF skip;
        set PC0KM001.PC6AIRNB skip;
      end
    end /* end of SAP PO# validation*/

  else /* ===> error found*/

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

  move PC0KW00.PC0KMFBL to PC0KM001.PC0KMFBL[1] for all;

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0KM001.XXXPRCNM = PC0KW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0KM001 alarm; /* Indicate sound alarm*/

  end

   /* ------------------------------------------------------------*/
   /* If inline footwear, protect air freight request number.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "OR")
      set PC0KM001.PC6AIRNB skip;
    end
  end

   /* ===> The following two lines of code are temporary until*/
   /* ===> all phases of miscellaneous charges are installed*/

  set PC0KM001.PC0KMMCH skip, invisible;
  set PC0KM001.PC6MICHG skip, invisible;

  if (PCWREC.XGPCD == "03")
    set PC0KM001.PC6AIRNB skip, noHighLight;
  end

  converse PC0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0KW00.XXXPRCNM = " "; /* Module identification*/
  PC0KM001.XXXPRCNM = "PC0K"; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0K328(); /* ===> pop up window routine*/
  end

  COMMAREA.CATOAP = PC0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0KM001.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K320 ***********************/
end // end PC0K320

// Format literals/protect fields
Function PC0K321()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PC0KM001.PC0KMCSY = PC0KW00.PC0KWCSY; /* ===> current style index*/
  PC0KM001.PC0KMTSY = PC0KW00.PC0KWTSY; /* ===> total styles*/
  PC0KM001.PC0KMFNC = "MAINTENANCE"; /* ===> Function literal*/
  set PC0KM001.PC0KMEST cursor; /* ====>  ETS date*/

  if (PC0KW01.PC3BLPO <= 0)
    set PC0KM001.PC0KMBPO skip, invisible; /* ====> Blank P.O. literal*/
  end

  if (PC0KW01.PC6STAT == "CL" /* ===> status*/
   || PC0KW01.PC6STAT == "NC" /* ===> status*/
   || PC0KW01.PC6STAT == "CX" /* ===> status*/
   || PC0KW00.PC0KWSWP == "Y") /* ===> protect (successful update msg)*/

    set PC0KM001.PC0KMP2 skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMP9 skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMP15 skip, invisible; /* ====>  literal*/

  end

   /* ------------------------------------------------------------*/
   /* Set fields askip if GPC = '02' and Order Type = 'FT' or 'OR'*/
                                  /* = 'S1' or 'S4'*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "02") /* ===>*/

    if (PC0KW01.PC4ORTYP == "FT" /* ===> footwear inline*/
     || PC0KW01.PC4ORTYP == "OR" /* ===> footwear overrun*/
     || PC0KW01.PC4ORTYP == "S1" 
     || PC0KW01.PC4ORTYP == "S4")

      set PC0KM001.PC0KMADD skip, invisible; /* ====>  new/add quantity*/
      set PC0KM001.PC0KMADL skip, invisible; /* ====>  new/add literal*/

      if (COMMAREA.CACLVL[5] == "N") /* RTA security flag*/
        set PC0KM001.PC0KMMOD skip; /* ====>  Mode*/
        set PC0KM001.PC0KMRTA skip; /* ====>  RTA Date*/
        set PC0KM001.PC0KMWHS skip; /* ===>  Warehouse*/
        set PC0KM001.PC0KMCUS skip; /* ===>  Customer xref*/
      end

      if (PC0KW01.PC4ORTYP != "OR") /* ===> footwear overrun*/
        set PC0KM001.PC0KMP9 skip, invisible; /* ====>  literal*/
      end
      set PC0KM001.PC0KMP15 skip, invisible; /* ====>  literal*/

    else

      set PC0KM001.PC6ETALF skip, invisible; /* ====>  ETAL default flag*/
      set PC0KM001.PC0KMFLL skip, invisible; /* ====>  Default flag literal*/

    end /* ===> Type=FT,OR,S1,S4*/

  end /* ===> GPC=02*/

   /* ------------------------------------------------------------*/
   /* Set fields protected to GPC = '03' (APPAREL)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMRTA skip, invisible; /* ====>  RTA Date*/
    set PC0KM001.PC0KMRAL skip, invisible; /* ====>  RTA Date literal*/
    set PC0KM001.PC0KMRTS skip, invisible; /* ====>  RTS Date*/
    set PC0KM001.PC0KMRSL skip, invisible; /* ====>  RTS Date literal*/
    set PC0KM001.PC6ETALF skip, invisible; /* ====>  ETAL default flag*/
    set PC0KM001.PC0KMFLL skip, invisible; /* ====>  Default flag literal*/

  end

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMOET skip;
  end

   /* ------------------------------------------------------------*/
   /* Set fields protected for GPC not = '03' (APPAREL)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD != "03")
    set PC0KM001.PC6MICHG skip, invisible; /* ====>  misc charge*/
    set PC0KM001.PC0KMMCH skip, invisible; /* ====>  misc charge literal*/
    set PC0KM001.PC0KMOWL skip, invisible;
                                   /* ====>  Enterable Owner Gp literal*/
    set PC0KM001.PC0KMOW skip, invisible; /* ====>  Enterable Owner Gp*/
  end

   /* ------------------------------------------------------------*/
   /* Set fields protected for GPC = '02' (FOOTWEAR)*/
   /* Set fields protected for GPC = '01' (promo   )*/
   /* Set fields protected for GPC = '07' (posters )*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "01"
   || PC0KW01.XGPCD == "07")
    set PC0KM001.PC0KMOEL skip, invisible; /* ====>  OETS Date literal*/
    set PC0KM001.PC0KMOET skip, invisible; /* ====>  OETS Date*/
    set PC0KM001.PC0KMSCL skip, invisible; /* ====>  Scheduler code literal*/
    set PC0KM001.PG1SC4CD skip, invisible; /* ====>  Scheduler code*/
  end

  if (PC0KW01.XGPCD == "02")
    set PC0KM001.PC0KMOEL skip; /* ====>  OETS Date literal*/
    set PC0KM001.PC0KMOET skip; /* ====>  OETS Date*/
  end

  if (COMMAREA.CACLVL[10] == "N") /* Price security flag*/
    set PC0KM001.PC0KMP2 skip, invisible; /* ====>  PF2 literal*/
    set PC0KM001.PC0KMTTL skip, invisible; /* ====>  Total value literal*/
    set PC0KM001.PC0KMVAL skip, invisible; /* ====>  Total Value*/
  end

  if (COMMAREA.CAILVL[10] == "N") /* Price security flag*/
    set PC0KM001.PC0KMP12 skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMFBL[1] skip, invisible; /* ====>  literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ====>  literal*/
  end

   /* -----------------------------------------------------------***/
   /* PROTECT SALES ORDER FIELDS IF NOT REQUIRED  -------------***/
   /* -----------------------------------------------------------***/

   /* --------------------------------------------------------------------*/
   /* ONLY ALLOW ACCESS TO SALES ORDER FIELDS IF gpc 2 or 3.*/
   /* --------------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "02")
    set PC0KM001.OP1CUOID initialAttributes;
    set PC0KM001.OP1NORID initialAttributes;
  else
    if (PC0KW01.XGPCD == "03")
      set PC0KM001.PC0KMCUS initialAttributes;
      set PC0KM001.OP1CUOID initialAttributes;
      set PC0KM001.OP1NORID initialAttributes;
    end
  end

   /* ********************** End of PC0K321 ***********************/
end // end PC0K321

// Format the data (not sizes)
Function PC0K322()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> PC0KM001 ( the header info)*/
   /* ------------------------------------------------------------*/

  PC0KS02(); /* ===> Load the header data*/

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> PC0KM001 (not the header info)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC3BLPO > 0)
    PC0KM001.PC3BLPO = PC0KW01.PC3BLPO; /* => Blank P.O.*/
  end

  PC0KM001.PC6ETALF = PC0KW01.PC6ETALF; /* ===> ETAL default flag*/

  PC0KM001.PG1SC4CD = PC0KW01.PG1SC4CD; /* ===> Scheduler Code*/
  PC0KS70(); /* scheduler user id*/
  PC0KW00.PC0KWMOD = "N"; /* Reset data modified flag*/
  PC0KM001.PC0KSCNM = PG1REC.XXXUSER;

  PC0KM001.PC0KMPLN = PC0KW01.PC6PLAN; /* => Plan*/

  PC0KM001.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;
  PC0KM001.PC0KMMOD = PC0KW01.YMTCD; /* => Transportation Mode*/

  PC0KM001.PC0KMCUS = PC0KW01.PC2CUXID; /* => Cust Xref*/

  PC0KM001.OP1CUOID = PC0KW01.OP1CUOID; /* => Cust order no*/

  PC0KM001.OP1NORID = PC0KW01.OP1NORID; /* => Nike order no*/

  PC0KM001.PC0KMWHS = PC0KW01.XWHCD; /* => Warehouse*/

  PC0KM001.PC0KMOW = PC0KW01.XOWCD; /* => Enterable Owner Grp*/

  PC0KM001.PC6MICHG = PC0KW01.PC6MICHG; /* ===> Misc charges*/

  PC0K319(); /* => Calculate New Total Value*/
  PC0KM001.PC0KMVAL = PC0KW01.PC0KWTVL; /* => Total Value*/
  PC0KM001.PC0KMQTY = PC0KW01.PC6TORDE; /* => Total Quantity*/
  PC0KM001.PC0KMADD = PC0KW01.PC6TORDE; /* => New/Add Total Quantity*/

  PC0KM001.PC6AIRNB = PC0KW01.PC6AIRNB; /* ===> Air Req NBR*/

  if (PC0KW01.XGPCD == "03" /* => Apparel*/
   && PC0KW04.YMTCD == "AF" /* => Transportation Mode is Air Freight*/
   && PC0KW01.PC-NIKE-AFRGT-PCT == 0
   && PC0KW01.PC-FCTY-AFRGT-PCT == 0)
    PC0KM001.PC-NIKE-AFRGT-PCT = 100;
    PC0KW01.PC-NIKE-AFRGT-PCT = 100;
    PC0KW01.PC-FCTY-AFRGT-PCT = 0;
    PC0KM001.PC-FCTY-AFRGT-PCT = 0;
  else
    PC0KM001.PC-NIKE-AFRGT-PCT = PC0KW01.PC-NIKE-AFRGT-PCT;
    PC0KM001.PC-FCTY-AFRGT-PCT = PC0KW01.PC-FCTY-AFRGT-PCT;
  end

   /* ------------------------------------------------------------*/
   /* LEFT Map ---> PC0KM001     "dates"*/
   /* ------------------------------------------------------------*/

  PC0KM001.PC0KMEST = PC0KW01.PC0KWDT1; /* => ETS map display*/
  PC0KM001.PC0KMOET = PC0KW01.PC0KWDT2; /* ===> original ETS Date*/
  PC0KM001.PC0KMETO = PC0KW01.PC0KWDT3; /* ===> override ETAL Date*/
  PC0KM001.PC0KMRTA = PC0KW01.PC0KWDT4; /* ===> RTA Date*/
  PC0KM001.PC0KMRTS = PC0KW01.PC0KWDT5; /* ===> RTS Date*/
  PC0KM001.PC0KMETL = PC0KW01.PC0KWDT6; /* ===> ETAL Date*/
  PC0KM001.PC0KMETA = PC0KW01.PC0KWDT7; /* ===> ETA Date*/

   /* ------------------------------------------------------------*/
   /* Default audit comment to 'data entry error' for B-grades.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC4ORTYP == "QQ"
   && PC0KM001.YACCD == "  ")
    PC0KM001.YACCD = "92";
  end

   /* **                                                        ***/
   /* ********************** End of PC0K322 ***********************/
end // end PC0K322

// Format the pass record data
Function PC0K323()
   /* ------------------------------------------------------------*/
   /* Highlight the header fields value from the pass record*/
   /* ------------------------------------------------------------*/

  set PC0KM001.XGPCD skip, bold;
   /* ------------------------------------------------------------*/
   /* If Unit of measure code, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XUMCD > " ")
    set PC0KM001.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XPGCD > " ")
    set PC0KM001.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2INSEG > " ")
    set PC0KM001.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XOWCD > " ") /* owner group code*/
    set PC0KM001.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XQACD > " ") /* quality code*/
    set PC0KM001.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDMCD > " ")
    set PC0KM001.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YSMXDV > " ")
    set PC0KM001.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2CUXID > " ")
    set PC0KM001.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6ETSDT > 0)
    set PC0KM001.PC0KMETS skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dist method, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDSCD > " "
   && PC0KW03.XDSCD != "*")
    set PC0KM001.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YMTCD > " ")
    set PC0KM001.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XWHCD > " ")
    set PC0KM001.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6PLAN > 0)
    set PC0KM001.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY2CLRID > " ")
    set PC0KM001.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY1STNBR > " ")
    set PC0KM001.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If P.O. Number, always valued, from pass record*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC3PONBR skip, bold;

   /* **                                                        ***/
   /* ********************** End of PC0K323 ***********************/
end // end PC0K323

// Format existing sizes protect
Function PC0K324()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PC0KM001.PC0KMASK[1] for 16; /* ===> Initialize FOB OVRD Id*/
  move " " to PC0KM001.SY4IDDSC[1] for 16;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PC0KM001.PC0KMNQT[1] for 16;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PC0KM001.PC0KMOQT[1] for 16; /* ===> Initialize map "on order qty"*/
  move 0 to PC0KM001.PC0KMFOB[1] for 16;
                                   /* ===> Initialize map "FOB price"*/
  PC0KM001.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;
  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/

  if (PC0KW00.PC0KWSWP == "Y") /* ===> switch to display update message*/
     /* ======== Next Sentence ==============>*/
  else
    /**/
    if (PC0KW01.PC6STAT == "CX"
     || PC0KW01.PC6STAT == "NC"
     || PC0KW01.PC6STAT == "FC"
     || PC0KW01.PC6STAT == "CL")
      PCWREC.XXXMSGNO = 164; /* ===> Cannot change qty with current*/
                                   /* status*/
      PC0KW00.XXXPRCNM = "PC0K324"; /* ===> module identification*/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
   && PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/
    /**/
    if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)
      /**/
      PC0KM001.SY4IDDSC[PC0KWIXM] = PC0KW01.SY4IDDSC[PC0KWIXS];
      PC0KM001.PC0KMOQT[PC0KWIXM] = PC0KW01.PC7ORDEQ[PC0KWIXS];
      /**/
      set PC0KM001.SY4IDDSC[PC0KWIXM] initialAttributes;
      set PC0KM001.PC0KMOQT[PC0KWIXM] initialAttributes;
      set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible; /* ==>new quantity*/
      /**/
      if (COMMAREA.CAILVL[10] == "Y")
        /**/
        /**/
        if (PC0KW00.PC0KWIXM == 1                          /* ==> first display position*/
         || PC0KW01.PC0KWVRD[PC0KWIXS] != PC0KW00.PC0KWCB1 /* ==> prv prc*/
         || PC0KW01.PC0KWVRF[PC0KWIXS] != PC0KW00.PC0KWCB2) /* ==> prv prc*/
          /**/
          PC0KW00.PC0KWCB1 = PC0KW01.PC0KWVRD[PC0KWIXS]; /* ==> prv prc*/
          PC0KW00.PC0KWCB2 = PC0KW01.PC0KWVRF[PC0KWIXS]; /* ==> prv prc*/
          /**/
          if (PC0KW01.PC0KWVRF[PC0KWIXS] == "Y") /* ===> FOB override flag*/
            /**/
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip, bold;
            /**/
            PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
            PC0KM001.PC0KMASK[PC0KWIXM] = "*";
            /**/
            if (PC0KW00.PC0KWPFF == "N" /* ===> Factory FOB price data found*/
             && PCWREC.XXXMSGNO == 118)
              PCWREC.XXXMSGNO = 0;
              PC0KW00.XXXPRCNM = "PC0K";
            end
            /**/
          else /* ===> no override price*/
            /**/
            PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
                                  /* MOVE FY4REC.FY4FOBPR(PC0KWIXS) TO*/
                                   /* PC0KM001.PC0KMFOB(PC0KWIXM);*/
            /**/
            if (FY4REC.FY4FOBPR[PC0KWIXS] == 0)
              set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
            else
              set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
            end
            /**/
            if (PC0KW00.PC0KMFBL == "POFOB:")
              set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
            end
            /**/
          end /* ===>QTYs > 0*/
          /**/
        else /* ===> suppress FOB Price*/
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        end /* ===> control break check for FOB*/
                                   /* Suppression*/
        /**/
        /**/
      else /* ===> lack of security*/
        set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
      end
      /**/
      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment map  index*/
      /**/
    end
    /**/
    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1; /* ===>Increment size index*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC0KMAML[1] skip, invisible; /* ===> new amt Literal*/
  set PC0KM001.PC0KMAML[2] skip, invisible; /* ===> new amt Literal*/

  if (PC0KW00.PC0KWIXM <= 9) /* ===> size screen half full*/
    set PC0KM001.PC0KMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PC0KM001.PC0KMSZL[2] initialAttributes; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] initialAttributes; /* ===> on order literal*/
     /* SET PC0KM001.PC0KMFBL(2) DEFINED;/* ===> FOB Literal*/
  end

  while (PC0KW00.PC0KWIXM <= 16) /* Until size screen is full*/
    set PC0KM001.SY4IDDSC[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMOQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K324 ***********************/
end // end PC0K324

// Format existing sizes unprotec
Function PC0K325()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PC0KM001.PC0KMASK[1] for 16; /* ===> Initialize FOB identifier*/
  move " " to PC0KM001.SY4IDDSC[1] for 16;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PC0KM001.PC0KMNQT[1] for 16;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PC0KW01.PC0KWPRC[1] for 16;
                                   /* ===> Initialize temp. price map*/
  move 0 to PC0KM001.PC0KMOQT[1] for 16; /* ===> Initialize map "on order qty"*/
  move 0 to PC0KM001.PC0KMFOB[1] for 16;
                                   /* ===> Initialize map "FOB price"*/
  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/
  PC0KW00.PC0KWIXZ = PC0KW00.PC0KWIXS; /* ===> save size index*/

  PC0KM001.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;
   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
   && PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/
    /**/
    if (PC0KW01.PC7ORDEQ[PC0KWIXS] > 0)
      /**/
      PC0KM001.SY4IDDSC[PC0KWIXM] = PC0KW01.SY4IDDSC[PC0KWIXS];
      PC0KM001.PC0KMNQT[PC0KWIXM] = PC0KW01.PC0KWNQT[PC0KWIXS];
      PC0KM001.PC0KMOQT[PC0KWIXM] = PC0KW01.PC7ORDEQ[PC0KWIXS];
      /**/
      set PC0KM001.SY4IDDSC[PC0KWIXM] initialAttributes;
      set PC0KM001.PC0KMOQT[PC0KWIXM] initialAttributes;
      /**/
       /* ------------------------------------------------------------*/
        /* Determine whether qtys modified allowed, set appropriately*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC0KW01.XGPCD == "02") /* ===>*/
        if (PC0KW01.PC4ORTYP == "FT" /* footwear inline*/
         /* OR PC0KW01.PC4ORTYP EQ 'OR'/**/
         /* footwear overrun*/
         || PC0KW01.PC4ORTYP == "S1" /* side 1   inline*/
         || PC0KW01.PC4ORTYP == "S4") /* side 1   overrun*/
          /**/
          set PC0KM001.PC0KMNQT[PC0KWIXM] skip;
          /**/
        else
          /**/
          set PC0KM001.PC0KMNQT[PC0KWIXM] initialAttributes;
          /**/
        end
        /**/
      else /* ===> GPC ^= '02'*/
        /**/
        set PC0KM001.PC0KMNQT[PC0KWIXM] initialAttributes;
        /**/
      end
      /**/
       /* ------------------------------------------------------------*/
        /* Load the size data*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC0KW01.PC0KWNQT[PC0KWIXS] > 0) /* ===> new QTYs request*/
        /**/
        PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
        /**/
        if (COMMAREA.CAILVL[10] == "Y")
          /**/
          /**/
          if (PC0KW00.PC0KWIXM == 1                          /* ==> first display position*/
           || PC0KW01.PC0KWVRD[PC0KWIXS] != PC0KW00.PC0KWCB1 /* prv prc*/
           || PC0KW01.PC0KWVRF[PC0KWIXS] != PC0KW00.PC0KWCB2) /* prv prc*/
            /**/
            PC0KW00.PC0KWCB1 = PC0KW01.PC0KWVRD[PC0KWIXS]; /* prv prc*/
            PC0KW00.PC0KWCB2 = PC0KW01.PC0KWVRF[PC0KWIXS]; /* prv prc*/
            /**/
            if (PC0KW01.PC0KWVRF[PC0KWIXS] == "Y") /* ===> FOB override flag*/
              /**/
              set PC0KM001.PC0KMFOB[PC0KWIXM] skip, bold;
              PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
              PC0KM001.PC0KMASK[PC0KWIXM] = "*";
              /**/
              if (PC0KW00.PC0KWPFF == "N" /* ===> Factory FOB prices?*/
               && PCWREC.XXXMSGNO == 118)
                PCWREC.XXXMSGNO = 0;
                PC0KW00.XXXPRCNM = "PC0K";
              end
              /**/
            else /* ===> move data from FOB Table*/
              /**/
              PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
              set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
              /**/
            end /* ===> FOB override check*/
            /**/
          else /* ===> no requested QTYs, therefore no*/
                                   /* price*/
            /**/
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
          end /* ===> New Requested QTYs Check*/
          /**/
        else /* ===> suppress FOB Price*/
          /**/
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        end /* ===> control break check for FOB*/
                                   /* Suppression*/
        /**/
      else /* ===> lack of FOB security check*/
        set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
      end
      /**/
      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
      /**/
    end
    /**/
    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1; /* ===>Increment size index*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWIXM <= 09) /* ===> size screen only half full*/
    set PC0KM001.PC0KMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0KM001.PC0KMAML[2] skip, invisible; /* ===> new amount literal*/
    set PC0KM001.PC0KMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PC0KM001.PC0KMSZL[2] initialAttributes; /* ===> size literal*/
    set PC0KM001.PC0KMAML[2] initialAttributes; /* ===> new amount literal*/
    set PC0KM001.PC0KMORL[2] initialAttributes; /* ===> on order literal*/
  end

  while (PC0KW00.PC0KWIXM <= 16) /* ===> Until size screen is full*/
    set PC0KM001.SY4IDDSC[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMOQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K325 ***********************/
end // end PC0K325

// Format all valid sizes unprote
Function PC0K326()
   /* ------------------------------------------------------------*/
   /* initialize the size portion for the map*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWS = "N"; /* ===> format map sizes switch*/
  move " " to PC0KM001.PC0KMASK[1] for 16; /* ===> reset mask ovrd ident.*/
  move " " to PC0KM001.SY4IDDSC[1] for 16;
                                   /* ===> Initialize map "size desc"*/
  move 0 to PC0KM001.PC0KMNQT[1] for 16;
                                   /* ===> Initialize map "new order qty"*/
  move 0 to PC0KM001.PC0KMOQT[1] for 16; /* ===> Initialize map "on order qty"*/
  move 0 to PC0KW01.PC0KWPRC[1] for 16; /* ===> simulated map "FOB price"*/
  move 0 to PC0KM001.PC0KMFOB[1] for 16;
                                   /* ===> Initialize map "FOB price"*/
  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/
  PC0KW00.PC0KWIXZ = PC0KW00.PC0KWIXS; /* ===> save size index*/

   /* ------------------------------------------------------------*/
   /* Format the size data from the storage area record to the map*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
   && PC0KW00.PC0KWIXS <= 40) /* ===> and size index at max*/

    if (PC0KW01.SY4IDDSC[PC0KWIXS] > " ")

      PC0KM001.SY4IDDSC[PC0KWIXM] = PC0KW01.SY4IDDSC[PC0KWIXS];
      set PC0KM001.SY4IDDSC[PC0KWIXM] initialAttributes; /* ===>unprotected*/

      PC0KM001.PC0KMNQT[PC0KWIXM] = PC0KW01.PC0KWNQT[PC0KWIXS];
      set PC0KM001.PC0KMNQT[PC0KWIXM] initialAttributes; /* ===>unprotected*/

      PC0KM001.PC0KMOQT[PC0KWIXM] = PC0KW01.PC7ORDEQ[PC0KWIXS];
      set PC0KM001.PC0KMOQT[PC0KWIXM] initialAttributes; /* ===>unprotected*/

      /* ------------------------------------------------------------*/
       /* Load simulated FOB map to W.S. area record*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWNQT[PC0KWIXS] > 0) /* ===> new QTYs request*/
        PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
      end

      if (COMMAREA.CAILVL[10] == "Y")

        /* ------------------------------------------------------------*/
         /* Load FOB portion of the map*/
         /* Load FOB portion of the map display record*/
         /* Load Control Break data to suppress FOB Prices*/
          /* The source for the FOB data is loaded from the FOB*/
          /* templete built to module "PC0K317"*/
        /* ------------------------------------------------------------*/

        if (PC0KW00.PC0KWIXM == 1 /* ==> first display position*/
         || PC0KW01.PC0KWVRD[PC0KWIXS] != PC0KW00.PC0KWCB1
         /* ==> prev. price*/
         || PC0KW01.PC0KWVRF[PC0KWIXS] != PC0KW00.PC0KWCB2)
                                   /* ==> prev. price*/

          PC0KM001.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
                                   /* ==> map disp*/
          PC0KW01.PC0KMFOB[PC0KWIXM] = PC0KW01.PC0KWVRD[PC0KWIXS];
                                   /* ==> rec disp*/
          PC0KW00.PC0KWCB1 = PC0KW01.PC0KWVRD[PC0KWIXS];
                                   /* ==> previous price*/
          PC0KW00.PC0KWCB2 = PC0KW01.PC0KWVRF[PC0KWIXS];
                                   /* ==> previous price*/

          if (PC0KW01.PC0KWVRF[PC0KWIXS] == "Y") /* ===> ovrd fl (templete)*/
            PC0KM001.PC0KMASK[PC0KWIXM] = "*";
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip, bold;
          else
            set PC0KM001.PC0KMFOB[PC0KWIXM] skip;
          end

        else /* ===> suppress FOB Price*/
          set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
        end /* ===> control break check for FOB*/
                                   /* Suppression*/

      else /* ===> lack fo security*/
        set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
      end

      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
    end

    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXS + 1; /* ===>Increment size index*/
  end

   /* ------------------------------------------------------------*/
   /* set the unused map's size related fields askip*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWIXM <= 09) /* ===> size screen only half full*/
    set PC0KM001.PC0KMSZL[2] skip, invisible; /* ===> size literal*/
    set PC0KM001.PC0KMAML[2] skip, invisible; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] skip, invisible; /* ===> on order literal*/
    set PC0KM001.PC0KMFBL[2] skip, invisible; /* ===> FOB Literal*/
  else
    set PC0KM001.PC0KMSZL[2] initialAttributes; /* ===> size literal*/
    set PC0KM001.PC0KMAML[2] initialAttributes; /* ===> size literal*/
    set PC0KM001.PC0KMORL[2] initialAttributes; /* ===> on order literal*/
  end

  while (PC0KW00.PC0KWIXM <= 16) /* ===> Until size screen is full*/
    set PC0KM001.SY4IDDSC[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMNQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMOQT[PC0KWIXM] skip, invisible;
    set PC0KM001.PC0KMFOB[PC0KWIXM] skip, invisible;
    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K326 ***********************/
end // end PC0K326

// Format/unprotect FOB fields
Function PC0K327()
   /* ------------------------------------------------------------*/
   /* initialize the map size index to unprotect FOBs*/
   /* ------------------------------------------------------------*/

  set PC0KM001.PC0KMFBL[1] initialAttributes;
  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/

   /* ------------------------------------------------------------*/
   /* Format the FOB size data unprotected in map size valued*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
   && PC0KM001.SY4IDDSC[PC0KWIXM] > " ") /* ===>and more sizes available*/

    if (PC0KM001.PC0KMASK[PC0KWIXM] == "*") /* ==> mask ovrd indicator*/
      set PC0KM001.PC0KMFOB[PC0KWIXM] bold;
    else
      set PC0KM001.PC0KMFOB[PC0KWIXM] initialAttributes;
    end

    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/

  end

  if (PC0KW00.PC0KWIXM <= 09) /* ===> Until size screen is full*/
    set PC0KM001.PC0KMFBL[2] skip, invisible;
  else
    set PC0KM001.PC0KMFBL[2] initialAttributes;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K327 ***********************/
end // end PC0K327

// Pop-up window routine
Function PC0K328()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMMOD == "?" /* ===> if any '?'*/
   || PC0KM001.PC0KMWHS == "?" 
   || PC0KM001.PC0KMOW == "?"  
   || PC0KM001.YACCD == "?")  

    /* ------------------------------------------------------------*/
            /* TRANSPORTATION MODE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMMOD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " TRANSPORTATION MODE TABLE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform transportation mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KM001.PC0KMMOD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        PC0KM001.PC0KMMOD = PC0KW01.YMTCD; /* ===> reset map field*/
      end
    end

    /* ------------------------------------------------------------*/
                 /* WAREHOUSE TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMWHS == "?") /* if ? in warehouse code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "      WAREHOUSE TABLE     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* =======> perform warehouse code*/
                                   /* window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KM001.PC0KMWHS = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        PC0KM001.PC0KMWHS = PC0KW01.XWHCD; /* ===> reset map field*/
      end
    end

    /* ------------------------------------------------------------*/
                 /* OWNER GROUP TABLE WINDOW*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMOW == "?" /* if ? in changeable owner grp field*/
     && PC0KM001.PC0KMWHS != "  ") /* If warehousenot spaces*/
      PC0KW00.PC0KWWHS = PC0KM001.PC0KMWHS;

      if (PC0KW00.PC0KWWHS in XWHTBL.XWHCD /* Warehouse in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* If whse has owner grp flag*/
          /* ;;;;===> next sentence*/
        else
          PC0KW00.XXXPRCNM = "PC0K328"; /* Module id*/
          set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
          converseLib.validationFailed(404); /* This whse accepts only OG code '00'*/
          return;
        end
      else
        PC0KW00.XXXPRCNM = "PC0K328"; /* Module id*/
        set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
        converseLib.validationFailed(404); /* This whse accepts only OG code '00'*/
        return;
      end
    end

    if (PC0KM001.PC0KMOW == "?") /* if ? in changeable owner grp field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "  OWNER GROUP "; /* heading*/
      if (PC0KM001.PC0KMWHS == "  ") /* if whse is spaced out*/
        XX0XW02.XWHCD = "51"; /* use whse '51'*/
      else
        XX0XW02.XWHCD = PC0KM001.PC0KMWHS; /* whse entered*/
      end

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* show owner grp code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the owner group**/
       /* *  table code to the map.                               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KM001.PC0KMOW = XOWTBL.XOWCD[XX0XWPIX]; /* code to map*/
      else
        PC0KM001.PC0KMOW = PC0KW01.XOWCD; /* ===> reset map field*/
      end
    end

    /* ------------------------------------------------------------*/
            /* Audit Comment Table Window*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.YACCD == "?") /* if ? in transportation mode field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " AUDIT COMMENT TABLE    "; /* heading*/
      XX0XW02.XGPCD = PC0KW01.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYAC01(); /* perform Audit comment  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KW01.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PC0KM001.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PC0KM001.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* move code*/
      else
        PC0KM001.YACCD = PC0KW01.YACCD; /* ===> reset map field*/
        if (PC0KM001.YACCD in YACTBL.YACCD)
          PC0KM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
        end

      end
    end

    converseLib.clearScreen();
     /* ===> restore the map*/

     /* MOVE 84 TO EZEMNO;*/

     /* EZEFLO;*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K328 ***********************/
end // end PC0K328

// Format all data protected
Function PC0K329()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set PC0KM001.CATOAP cursor; /* ====>*/

  if (PC0KW01.PC3BLPO <= 0)
    set PC0KM001.PC0KMBPO skip, invisible; /* ====>*/
  end

  set PC0KM001.PC0KMPLN skip; /* ====>  plan*/
  set PC0KM001.PC0KMEST skip; /* ====>  ETS Date*/
  set PC0KM001.PC0KMMOD skip; /* ====>  Mode*/
  set PC0KM001.PC0KMCUS skip; /* ====>  Customer xref*/
  set PC0KM001.OP1CUOID skip; /* ====>  Cust order no*/
  set PC0KM001.OP1NORID skip; /* ====>  Nike order no*/
  set PC0KM001.PC0KMWHS skip; /* ====>  Warehouse*/
  set PC0KM001.PC0KMADD skip, invisible; /* ====>  new/add quantity*/
  set PC0KM001.PC0KMADL skip, invisible; /* ====>  new/add literal*/
  set PC0KM001.YACCD skip, invisible; /* ====>  Audit comment*/
  set PC0KM001.PC0KMAUD skip, invisible; /* ====>  Audit comment literal*/
  set PC0KM001.PC0KMETO skip; /* ====>  ETAL Override Date*/

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMOET skip;
  end

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "OR"
     || PC0KW01.PC4ORTYP == "S1"
     || PC0KW01.PC4ORTYP == "S4")
      set PC0KM001.PC6ETALF skip; /* ====>  ETAL default flag*/
    end /* ===> Order Type check*/
  end /* ===> GPC = '02'*/

  if (PC0KW01.XGPCD == "03")
    set PC0KM001.PC0KMOW skip; /* ====>  Enterable Owner Grp*/
    set PC0KM001.PC0KMRTA skip, invisible; /* ====>  RTA Date*/
    set PC0KM001.PC0KMRTS skip, invisible; /* ====>  RTS Date*/
    set PC0KM001.PC0KMOET skip; /* ====>  Original ETS Date*/
    set PC0KM001.PG1SC4CD skip; /* ====>  Scheduler Code*/
    set PC0KM001.PC6MICHG skip; /* ====>  Misc charges*/
  else
    set PC0KM001.PC0KMRTA skip; /* ====>  RTA Date*/
  end

  set PC0KM001.PC6AIRNB skip; /* ====>  Air Request Number*/
  set PC0KM001.PC-NIKE-AFRGT-PCT skip; /* ===> nike af percent*/
  set PC0KM001.PC-FCTY-AFRGT-PCT skip; /* ===> fact af percent*/

  set PC0KM001.PC-NIKE-AFRGT-PCT-LIT skip;
                                   /* =====> nike af percent literal*/
  set PC0KM001.PC-FCTY-AFRGT-PCT-LIT skip;
                                   /* =====> fact af percent literal*/

  PC0KM001.PC0KMFNC = "INQUIRY";

   /* **                                                        ***/
   /* ********************** End of PC0K329 ***********************/
end // end PC0K329

// -->Check Attention Identifier
Function PC0K330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6  /* no special instruction for sap po*/
   || converseVar.eventKey is pf9  /* no size adding for sap po*/
   || converseVar.eventKey is pf13 /* no product adding for sap po*/
   || converseVar.eventKey is pf14 /* no overwritten address for sap po*/
   || converseVar.eventKey is pf15) /* no cancellation for sap po*/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01" /* VRAMAC*/
     && COMMAREA.CACLVL[8] != "Y") /* change lvl flg is set for sap po*/
      converseLib.validationFailed(576);
      exit stack;
    end
  end


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0KW00.PC0KWSWR == "Y") /* Request for data*/
      set PC0KW01 empty; /* M001 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    /* 05/03/00 Change begins*/
    if (PC0KW00.PC0K-JAP-SW == "Y")
      PC0KW00.PC0K-JAP-SW = "N"; /* reset jap-sw as cancel requested*/
      PC0KM001.PC0KMWHS = "  "; /* whse code blanked to the prev state*/
    end
    /* 05/03/00 Change ends*/

    PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.CATOAP > " " /* FAST PATH was requested*/
   || PC0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
      PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PC0KM001.CATOAP cursor, bold; /* Highlight*/
      PC0KM001.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/

    else

      PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* PF1 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF5 was pressed*/
     || converseVar.eventKey is pf21) /* PF21 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PC0E"; /* Application find code*/
      PC0K331(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* Application find code*/
      PC0K331(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* Application find code*/
      PC0K331(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
    PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PC0KM001.CATOAP cursor, bold; /* Highlight*/
    PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf2   /* and PF2  was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6  was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7  was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8  was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9  WAS NOT PRESSED*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* transfer on a item with an invalid status*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* PF6  S.I. Key*/

    if (PC0KW01.PC6STAT == "OP")

      /* ======= Next Sentence ==========>*/

    else

         /* MOVE 'PC0K330' TO PC0KW00.XXXPRCNM ; Module ident*/
         /* MOVE 223 TO EZEMNO          ; Indicate invalid attn key*/
         /* EZEFLO                      ; Exit to display map*/

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 Addr Ovrd Key*/

    if (PC0KW01.PC6STAT == "OP")

      /* ======= Next Sentence ==========>*/

    else

         /* MOVE 'PC0K330' TO PC0KW00.XXXPRCNM ; Module ident*/
         /* MOVE 242 TO EZEMNO     ; cannot transfer with curr status*/
         /* EZEFLO                      ; Exit to display map*/

    end

  end

  if (COMMAREA.CACLVL[10] != "Y"
   && converseVar.eventKey is pf2) /* and PF2  was pressed*/

    PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to display map*/

  end

  if (COMMAREA.CAILVL[10] != "Y"
   && converseVar.eventKey is pf12) /* and PF12 was pressed*/

    PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to display map*/

  end

  if (PC0KW01.PC6STAT == "CL" /* ===> status*/
   || PC0KW01.PC6STAT == "NC" /* ===> status*/
   || PC0KW01.PC6STAT == "CX" /* ===> status*/
   || PC0KW00.PC0KWSWP == "Y") /* ===> protect switch*/

    if (converseVar.eventKey is pf2 /* and PF2  was pressed*/
     || converseVar.eventKey is pf9 /* and PF9  was pressed*/
     || converseVar.eventKey is pf15) /* and PF15 was pressed*/

      PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to display map*/

    end

  end

  if (PC0KW01.XGPCD == "02") /* ===>*/

    if (PC0KW01.PC4ORTYP == "FT" /* ===>*/
     || PC0KW01.PC4ORTYP == "S1" /* ===>*/
     || PC0KW01.PC4ORTYP == "S4") /* ===>*/

      if (converseVar.eventKey is pf9 /* and PF9  was pressed*/
       || converseVar.eventKey is pf15) /* and PF15 was pressed*/

        PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/
        exit stack; /* Exit to display map*/

      end

    end /* ===> Order Type check*/

    if (PC0KW01.PC4ORTYP == "OR" /* ===>*/
     && converseVar.eventKey is pf15) /* and PF15 was pressed*/

      PC0KW00.XXXPRCNM = "PC0K330"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to display map*/

    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K330 ***********************/
end // end PC0K330

// load pass rec with select data
Function PC0K331()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  set PCWREC empty;

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;

  if (COMMAREA.CATOAP != "PC0M")
    PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K331 ***********************/
end // end PC0K331

// -->Reset Highlighted Fields
Function PC0K340()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6STAT == "CL" /* ===> status*/
   || PC0KW01.PC6STAT == "NC" /* ===> status*/
   || PC0KW01.PC6STAT == "CX" /* ===> status*/
   || PC0KW00.PC0KWSWP == "Y") /* ===> AUTOSKIP switch*/

    /* ======== Next Sentence ========>*/

  else

    if (PC0KW01.XGPCD == "02" /* ===> footwear*/
     || PC0KW01.XGPCD == "01" /* ===> promo*/
     || PC0KW01.XGPCD == "07") /* ===> posters*/

      if (PC0KW01.PC4ORTYP == "FT" /* ===>*/
       || PC0KW01.PC4ORTYP == "OR" /* ===>*/
       || PC0KW01.PC4ORTYP == "S1" /* ===>*/
       || PC0KW01.PC4ORTYP == "S4") /* ===>*/

        set PC0KM001.YACCD initialAttributes; /* ===> Audit code*/
        set PC0KM001.PC0KMETO initialAttributes; /* ===> Override ETAL Date*/
        set PC0KM001.PC0KMEST initialAttributes; /* ===> ETS Date*/
        set PC0KM001.PC6AIRNB initialAttributes; /* ===> Air Req NBR*/
        set PC0KM001.PC6ETALF initialAttributes; /* ===> ETAL default flag*/

        if (PC0KW01.PC2CUXID > "  " /* ===>*/
         && PC0KW01.XWHCD == "  ")  /* ===> Warehouse*/
          set PC0KM001.PC0KMWHS initialAttributes; /* ===> Warehouse*/
        else /* ===>*/
          if (PC0KW01.PC2CUXID == "  " /* ===>*/
           && PC0KW01.XWHCD > "  ")    /* ===> Warehouse*/
            set PC0KM001.PC0KMCUS initialAttributes; /* ===> Cust Xref*/
            set PC0KM001.OP1CUOID initialAttributes; /* ===> Cust order no*/
            set PC0KM001.OP1NORID initialAttributes; /* ===> Nike order no*/
          else /* ===>*/
            set PC0KM001.PC0KMWHS initialAttributes; /* ===> Warehouse*/
            set PC0KM001.PC0KMCUS initialAttributes; /* ===> Cust Xref*/
            set PC0KM001.OP1CUOID initialAttributes; /* ===> Cust S.O.#*/
            set PC0KM001.OP1NORID initialAttributes; /* ===> Nike S.O.#*/
          end
        end

      else /* ===> set all modified fields defined*/
                                   /* for other O.T.*/

        set PC0KM001.PC0KMADD initialAttributes; /* ===> new/add total*/
        set PC0KM001.PC0KMEST initialAttributes; /* ===> ETS map display*/
        set PC0KM001.PC0KMMOD initialAttributes; /* ===> Mode of Transportation*/
        set PC0KM001.PC0KMCUS initialAttributes; /* ===> Cust Xref*/
        set PC0KM001.OP1CUOID initialAttributes; /* ===> Cust order no*/
        set PC0KM001.OP1NORID initialAttributes; /* ===> Nike order no*/
        set PC0KM001.PC0KMWHS initialAttributes; /* ===> Warehouse*/
        set PC0KM001.YACCD initialAttributes; /* ===> Audit code*/
        set PC0KM001.PC0KMETO initialAttributes; /* ===> Override ETAL Date*/
        set PC0KM001.PC6AIRNB initialAttributes; /* ===> Air Req NBR*/
        set PC0KM001.PC-NIKE-AFRGT-PCT initialAttributes; /* ===> nike air frgt pct*/
        set PC0KM001.PC-FCTY-AFRGT-PCT initialAttributes; /* ===> fact air frgt pct*/
        set PC0KM001.PC-NIKE-AFRGT-PCT-LIT initialAttributes;
                                   /* ===> nike air frgt pct - literal*/
        set PC0KM001.PC-FCTY-AFRGT-PCT-LIT initialAttributes;
                                   /* ===> fact air frgt pct - literal*/
        set PC0KM001.PC0KMPLN initialAttributes; /* ===> Plan number*/
        set PC0KM001.PC0KMRTA initialAttributes; /* ===> RTA Date*/

        if (PC0KW01.PC0KWDT2 == " ") /* ===> Original ETS Date*/
          /* ========= Next Sentence ===============>*/
        else
          set PC0KM001.PC0KMOET initialAttributes; /* ===> Original ETS Date*/
        end

      end /* ===>  order type check*/

    else /* ===> set modified feilds defined or*/
                                   /* '03'*/

      set PC0KM001.PC0KMADD initialAttributes; /* ===> new/add total*/
      set PC0KM001.PC0KMEST initialAttributes; /* ===> ETS map display*/
      set PC0KM001.PC0KMMOD initialAttributes; /* ===> Mode of Transportation*/
      set PC0KM001.PC0KMCUS initialAttributes; /* ===> Cust Xref*/
      set PC0KM001.OP1CUOID initialAttributes; /* ===> Cust order no*/
      set PC0KM001.OP1NORID initialAttributes; /* ===> Nike order no*/
      set PC0KM001.PC0KMWHS initialAttributes; /* ===> Warehouse*/
      set PC0KM001.PC0KMOW initialAttributes; /* ===> Enterable Owner Grp*/
      set PC0KM001.YACCD initialAttributes; /* ===>  Audit code*/
      set PC0KM001.PC0KMETO initialAttributes; /* ===> Override ETAL Date*/
      /* SET PC0KM001.PC6AIRNB DEFINED;/* ===> Air Req NBR*/
      set PC0KM001.PC-NIKE-AFRGT-PCT initialAttributes; /* ===> nike air frgt pct*/
      set PC0KM001.PC-FCTY-AFRGT-PCT initialAttributes; /* ===> fact air frgt pct*/
      set PC0KM001.PC0KMPLN initialAttributes; /* ===> Plan number*/
      set PC0KM001.PG1SC4CD initialAttributes; /* ===> Scheduler code*/

      if (PC0KW01.PC0KWDT2 == " ") /* ===> Original ETS Date*/
        set PC0KM001.PC0KMOET skip; /* ===> Original ETS Date*/
      else
        set PC0KM001.PC0KMOET initialAttributes; /* ===> Original ETS Date*/
      end

    end /* ===> GPC=02,01  check*/

    if (PC0KW01.XGPCD == "03")
      set PC0KM001.PC0KMOET skip;
    end

    /* ------------------------------------------------------------*/
     /* Reset highlighted price fields*/
     /* All P.O. Types are allowed to change prices PF2 pressed*/
      /* Note: The only way PF2 flag set = 'y' is if security*/
            /* flag 10 allowed them to press PF2 to maintain prices*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWPF2 == "Y") /* ===> if PF2 Key was pressed*/

      PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/

      while (PC0KW00.PC0KWIXM <= 16 /* ===> Until size screen is full*/
       && PC0KM001.SY4IDDSC[PC0KWIXM] > " ") /* ===> more sizes available*/

        if (PC0KM001.PC0KMASK[PC0KWIXM] == "*") /* ===> mask ovrd indicator*/
          set PC0KM001.PC0KMFOB[PC0KWIXM] bold;
        else
          set PC0KM001.PC0KMFOB[PC0KWIXM] initialAttributes;
        end

        PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1;
                                   /* ===>Increment line index*/

      end /* ===> while*/

      set PC0KM001.PC0KMFOB[1] cursor;

    end /* ===> PF2 was pressed*/

    if (PC0KW01.XGPCD == "02" /* ===> footwear*/
     && PC0KW01.PC4ORTYP == "OR") /* ===>*/
      set PC0KM001.PC0KMQTY initialAttributes; /* Total qty*/
    end

  end /* ===> status check*/

  set PC0KM001.CATOAP initialAttributes; /* TO application*/
  set PC0KM001.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K340 ***********************/
end // end PC0K340

// -->Verify The Entered Data
Function PC0K350()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do and ezeflo to try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KW911 == "Y" /* ===> -911 SQL*/
   && PC0KW00.PC0KWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether application data was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.CAITEM > " ") /* Application data was entered*/

    PC0KW00.XXXPRCNM = "PC0K350"; /* Module identification*/
    set PC0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    /* ------------------------------------------------------------*/
     /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      PC0K351(); /* Verify scroll*/

    else /* ===> Do edit checks*/

      if (PC0KW04.PC6STAT == "CL" /* ===>fields a not modifiable*/
       || PC0KW04.PC6STAT == "NC" /* ===>fields a not modifiable*/
       || PC0KW04.PC6STAT == "CX" /* ===>fields a not modifiable*/
       || PC0KW00.PC0KWSWP == "Y") /* ===>fields a not modifiable*/

        return; /* ===> return to previous process*/

      end

      if (PC0KW04.PC-SAP-PO-NBR != " "
       && PC0KW04.XGPCD != "01" /* VRAMAC*/
       && COMMAREA.CACLVL[8] != "Y")
        /* If ETS Date was changed, verify the entered code.*/
        /* IF PC0KM001.PC0KMEST NE PC0KW01.PC0KWDT1/* est time of ship.*/
         /* OR PC0KM001.PC0KMEST EQ '000000';*/
         /* PERFORM PC0K555;         /* ===========> Verify date*/
        /* END;*/

        /* if sap po nbr check only for SO in header table!*/
        if (PC0KM001.OP1CUOID != PC0KW01.OP1CUOID
         || PC0KM001.OP1NORID != PC0KW01.OP1NORID)
          PC0K350A(); /* check entered SO is valid*/
        end
      else
        /* ------------------------------------------------------------*/
        /* Do edit for GPC = '02' and Order Type = 'ft' or 'or*/
        /* they are limited to the amount of modifiable fields*/
        /* ------------------------------------------------------------*/

        if (PC0KW04.XGPCD == "02") /* ===>fields a not modifiable*/
          if (PC0KW04.PC4ORTYP == "FT" /* ===>fields a not modifiable*/
           || PC0KW04.PC4ORTYP == "OR" /* ===>fields a not modifiable*/
           || PC0KW04.PC4ORTYP == "S1" /* ===>fields a not modifiable*/
           || PC0KW04.PC4ORTYP == "S4") /* ===>fields a not modifiable*/

            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf11)

            /* ------------------------------------------------------------*/
              /* If RTA Date was changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMRTA != PC0KW01.PC0KWDT4 /* ===> RTA Date*/
               || PC0KM001.PC0KMRTA == "000000")       
                PC0K353(); /* ===========> Verify date*/
              end

            /* ------------------------------------------------------------*/
              /* If Plan number was changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMPLN != PC0KW01.PC6PLAN) /* ===> Plan number*/
                PC0KW01.PC6PLAN = PC0KM001.PC0KMPLN;
                                   /* ===> Plan number*/
                PC0KW00.PC0KWMOD = "Y";
              end

            /* ------------------------------------------------------------*/
                                  /* If Air Request Number was changed,*/
                                   /* verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC6AIRNB != PC0KW01.PC6AIRNB
               /* ===> Air req. Number*/
               || PC0KM001.PC6AIRNB == 0)
                PC0K352(); /* ===========>*/
              end

            /* ------------------------------------------------------------*/
                                  /* If Air Freight percent fields have*/
                                   /* changed verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC-NIKE-AFRGT-PCT != PC0KW01.PC-NIKE-AFRGT-PCT
               || PC0KM001.PC-FCTY-AFRGT-PCT != PC0KW01.PC-FCTY-AFRGT-PCT)
                PC0K-35010(); /* ===========>*/
              end

            /* ------------------------------------------------------------*/
              /* If ETAL default flag changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC6ETALF != PC0KW01.PC6ETALF) /* ETAL default flag*/
                PC0K356(); /* ===========> Verify flag*/
              end

            /* ------------------------------------------------------------*/
                                  /* If ETAL Override Date was changed,*/
                                   /* verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMETO != PC0KW01.PC0KWDT3)
                                   /* ETAL Override Date*/
                PC0K354(); /* ===========> Verify date*/
              end

            /* ------------------------------------------------------------*/
              /* Verify the total quantities against the size quantities*/
              /* to validate they are equal.*/
              /* Note: Qtys ar not modifiable but prices are.  The Price*/
                  /* validation is within same process.*/

            /* ------------------------------------------------------------*/

              PC0K355(); /* ===========> Verify tot QTYs/size*/
                                   /* QTYs*/

            /* ------------------------------------------------------------*/
              /* If warehouse was changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMWHS != PC0KW01.XWHCD
               || PC0KM001.PC0KMCUS == " ") /* customer xref id*/

                PC0K359(); /* =========> Verify warehouse code*/

              end

            /* ------------------------------------------------------------*/
              /* If Cust Xref            , verify the entered code.*/

            /* ------------------------------------------------------------*/

              PC0K552(); /* ===========> Verify xref-id on table*/

            /* ------------------------------------------------------------*/
          /* If trans mode changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMMOD != PC0KW01.YMTCD
               || PC0KM001.PC0KMMOD == " ")
                PC0K554(); /* =========> Verify trans mode*/
              end

            /* ------------------------------------------------------------*/
              /* If ETS Date was changed, verify the entered code.*/

            /* ------------------------------------------------------------*/

              if (PC0KM001.PC0KMEST != PC0KW01.PC0KWDT1 /* est time of ship.*/
               || PC0KM001.PC0KMEST == "000000")       

                PC0K555(); /* ===========> Verify date*/

              end

            /* ------------------------------------------------------------*/
              /* If any errors were found, exit to display the map.*/
              /* If any data was modified, verifiy audit comment.*/

            /* ------------------------------------------------------------*/

              if (converseVar.validationMsgNum != 0) /* Errors were found*/
                exit stack; /* Exit to display map*/
              end

              if (PC0KW00.PC0KWMOD == "Y"
               || PC0KM001.YACCD != PC0KW01.YACCD)

                PC0K357(); /* ===========> Verify audit comment*/

              end

              if (converseVar.validationMsgNum != 0) /* Errors were found*/
                exit stack; /* Exit to display map*/
              else
                return; /* ===> return to previous process*/
              end

            end /* ===> <Enter>, PF11 check*/

          end /* ===> Footwear FT,OR,S1,S4 edit*/

        end /* ===> GPC = '02'*/

        /* ------------------------------------------------------------*/
        /* now do the edits for the rest of the NIKE order types.*/
        /* ------------------------------------------------------------*/
        /* If none of the fields changed, return to previous process.*/
        /* Highlight any application data that was entered & in error*/
        /* ------------------------------------------------------------*/

        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf11)

          /* ------------------------------------------------------------*/
          /* If Plan number was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMPLN != PC0KW01.PC6PLAN) /* ===> Plan number*/
            PC0KW01.PC6PLAN = PC0KM001.PC0KMPLN; /* ===> Plan number*/
            PC0KW00.PC0KWMOD = "Y";
          end

          /* ------------------------------------------------------------*/
          /* If Air Request Number was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KW01.XGPCD == "03" /* ===> Apparel*/
           && PC0KW01.YMTCD == "AF") /* ===> mode is Air Freight*/

            /* ========= Next Sentence ==============>*/
            /* ==> (will be processed later)*/
          else

            if (PC0KM001.PC6AIRNB != PC0KW01.PC6AIRNB
             /* ===> Air request Number*/
             || PC0KM001.PC6AIRNB == 0)
              PC0K352(); /* ===========>*/
            end

          end

          /* ------------------------------------------------------------*/
          /* If RTA Date was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMRTA != PC0KW01.PC0KWDT4 /* ===> RTA Date*/
           || PC0KM001.PC0KMRTA == "000000")       
            PC0K353(); /* ===========> Verify date*/
          end

          /* ------------------------------------------------------------*/
          /* If ETAL Override Date was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMETO != PC0KW01.PC0KWDT3) /* ETAL Override Date*/
            PC0K354(); /* ===========> Verify date*/
          end

          /* ------------------------------------------------------------*/
          /* If Original ETS Date was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KW01.PC6OETS != 0) /* ===> Original ETS*/
            if (PC0KM001.PC0KMOET != PC0KW01.PC0KWDT2 /* ===> Original ETS*/
             && PC0KW01.XGPCD == "03")                /* ===> apparel*/
              PC0K358(); /* ===========> Verify date*/
            end
          end

          /* ------------------------------------------------------------*/
          /* If Misc. charges field was changed, set data modified flag*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC6MICHG != PC0KW01.PC6MICHG) /* ===> Misc. chg*/
            PC0KW01.PC6MICHG = PC0KM001.PC6MICHG;
            PC0KW00.PC0KWMOD = "Y"; /* =>set data modify flag*/
            PC0KW00.PC0KWUPF = "N"; /* =>reset updt confirm flag*/

          end

          /* ------------------------------------------------------------*/
          /* Verify the total quantities against the size quantities*/
          /* to validate they are equal.*/
          /* ------------------------------------------------------------*/

          PC0K355(); /* ===========> Verify tot QTYs/size*/
                                   /* QTYs*/

          /* ------------------------------------------------------------*/
          /* If owner group was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KW04.XGPCD == "03") /* Apparel only*/
            if (PC0KM001.PC0KMOW != PC0KW01.XOWCD) /* enterable owner group*/
              PC0K530(); /* =========> Verify Owner Group*/
              if (PC0KW00.PC0KWOGV == "Y") /* If valid owner group*/
                PC0KW01.XOWCD = PC0KM001.PC0KMOW; /* new owner group*/
                PC0KW00.PC0KWMOD = "Y"; /* =>set data modify flag*/
                PC0KW00.PC0KWUPF = "N"; /* =>reset updt confirm flag*/
              end
            end
          end

          /* ------------------------------------------------------------*/
          /* If warehouse was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMWHS != PC0KW01.XWHCD
           || PC0KM001.PC0KMCUS == " ") /* customer xref id*/

            PC0K359(); /* =========> Verify warehouse code*/

          end

          /* ------------------------------------------------------------*/
          /* If Cust Xref            , verify the entered code.*/
          /* ------------------------------------------------------------*/

        /* IF PC0KM001.PC4ORTYP NE 'XD';*/
          /* AND PC0KM001.PC4ORTYP NE 'XI';*/
          PC0K552(); /* ===========> Verify xref-id on table*/
        /* END;*/
          if (PC0KM001.PC0KMCUS != PC0KW04.PC2CUXID) /* xref change*/
            if (PC0KM001.PC4ORTYP != "SS"
             && PC0KM001.PC4ORTYP != "SX") /* exclude salesman sample*/
              PC0KS100(); /* obtain the location code*/
              PC0KS101(); /* Select from style/color table*/
              if (PC0KW01.XGPCD == "03"
               || PC0KW01.XGPCD == "02")
                if (PG2REC.XFCCD1 != "68"
                 && PG2REC.XFCCD2 != "68"
                 && PG2REC.XFCCD3 != "68"
                 && PG2REC.XFCCD4 != "68"
                 && PG2REC.XFCCD5 != "68"
                 && PG2REC.XFCCD6 != "68")
                  if (TSCREC.XCTCD == "SPAI"
                   || TSCREC.XCTCD == "CNRY"
                   || TSCREC.TSCLOCCD == "MO2"
                   || TSCREC.TSCLOCCD == "MO3"
                   || TSCREC.TSCLOCCD == "MO4") /* spain edits*/
                    converseLib.validationFailed(574);
                    PC0KW00.XXXPRCNM = "PC0K350";
                    set PC0KM001.PC0KMCUS cursor, bold;
                  end
                end
              end
            end
          end

          /* ------------------------------------------------------------*/
          /* If Cust Xref and/or warehouse change and P.O. Not printed*/
          /* then error.  Cannot change or have multiple destinations*/
          /* ------------------------------------------------------------*/

          if (PC0KW04.XGPCD == "03"
           && VPOHDR02.PC3PRTIN != "P") /* PO has not been printed*/
            if (PC0KM001.PC0KMWHS != PC0KW04.XWHCD)
              converseLib.validationFailed(245); /* Cannot have multiple destinations*/
              set PC0KM001.PC0KMWHS cursor, bold;
            end
            if (PC0KM001.PC0KMCUS != PC0KW04.PC2CUXID)
              converseLib.validationFailed(245); /* Cannot have multiple destinations*/
              PC0KW00.XXXPRCNM = "PC0K350";
            end
          end /* ===> GPC='03' & not printed P.O.*/

          if (PC0KW04.XGPCD == "03")
            if (PC0KM001.PC4ORTYP == "XD"
             || PC0KM001.PC4ORTYP == "XI"
             || PC0KM001.PC4ORTYP == "AD"
             || PC0KM001.PC4ORTYP == "MX")
              if (PC0KM001.PC0KMWHS != PC0KW04.XWHCD)
                converseLib.validationFailed(458); /* Cannot have multiple destinations*/
                PC0KW00.XXXPRCNM = "PC0K350";
                set PC0KM001.PC0KMWHS cursor, bold;
              end
              if (PC0KM001.PC0KMCUS != PC0KW04.PC2CUXID)
                converseLib.validationFailed(458); /* Cannot have multiple destinations*/
                PC0KW00.XXXPRCNM = "PC0K350";
                set PC0KM001.PC0KMCUS cursor, bold;
              end
            end
          end /* ===> GPC='03' & 'xd','xi'*/
                                   /* restriction*/

          /* ------------------------------------------------------------*/
          /* If trans mode changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMMOD != PC0KW01.YMTCD
           || PC0KM001.PC0KMMOD == " ")
            PC0K554(); /* =========> Verify trans mode*/
          end

          /* ------------------------------------------------------------*/
          /* If ETS Date was changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PC0KMEST != PC0KW01.PC0KWDT1 /* est time of shipment*/
           || PC0KM001.PC0KMEST == "000000")       

            PC0K555(); /* ===========> Verify date*/

          end

          /* ------------------------------------------------------------*/
          /* If Scheduler Code  changed, verify the entered code.*/
          /* ------------------------------------------------------------*/

          if (PC0KM001.PG1SC4CD != PC0KW01.PG1SC4CD) /* ===> Scheduler Code*/

            PC0KS70(); /* ===========> Verify Scheduler Code*/

          end

          /* ------------------------------------------------------------*/
          /* Reset AIR Freight error message if  data not modified*/
          /* ------------------------------------------------------------*/

          /* IF PC0KW01.XGPCD EQ '03'   /* ===> Apparel*/
          /* AND PC0KW01.YMTCD EQ 'AF';/* ===> mode is Air Freight*/

          /* IF PC0KW00.PC0KWMOD EQ 'N'/* ===> data modified*/
           /* AND PC0KW00.PC0KWSWS EQ 'N'/* ===> format sizes switch*/
                                  /* AND PC0KM001.PC6AIRNB EQ*/
                                   /* PC0KW01.PC6AIRNB;/* ===> Air Req. Nbr*/

            /* ========= Next Sentence ==============>*/

          /* ELSE;*/

           /* IF PC0KM001.PC6AIRNB NE PC0KW01.PC6AIRNB*/
                                   /* ===> Air Req. Number*/
             /* OR PC0KM001.PC6AIRNB EQ 0;*/
             /* PERFORM PC0K352;     /* ===========> verify*/
           /* END;*/

          /* END;*/

          /* END;*/

          if (PC0KW01.YMTCD == "AF") /* ===> mode is Air Freight*/

            if (PC0KW00.PC0KWMOD == "N" /* ===> data modified*/
             && PC0KW00.PC0KWSWS == "N" /* ===> format sizes switch*/
             && PC0KM001.PC-NIKE-AFRGT-PCT == PC0KW01.PC-NIKE-AFRGT-PCT
             && PC0KM001.PC-FCTY-AFRGT-PCT == PC0KW01.PC-FCTY-AFRGT-PCT)

              /* ========= Next Sentence ==============>*/

            else

              if (PC0KM001.PC-NIKE-AFRGT-PCT != PC0KW01.PC-NIKE-AFRGT-PCT
               || PC0KM001.PC-FCTY-AFRGT-PCT != PC0KW01.PC-FCTY-AFRGT-PCT)
                PC0K-35010(); /* ==========> verify af percents*/
              end

            end

          end

        end
        /* ------------------------------------------------------------*/
        /* If any errors were found, exit to display the map.*/
        /* If any data was modified, verifiy audit comment.*/
        /* ------------------------------------------------------------*/

        if (converseVar.validationMsgNum != 0) /* Errors were found*/
          exit stack; /* Exit to display map*/
        end

        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf11)

          if (PC0KW00.PC0KWMOD == "Y"
           || PC0KM001.YACCD != PC0KW01.YACCD)

            if (PC0KM001.YACCD == " "
             && PC0KW01.XGPCD == "01") /* ==> Promo GPC*/
              PC0KW01.YACCD = " "; /* ==> reset field*/
            else

              if (PC0KM001.YACCD == " "
               && PC0KW01.XGPCD == "07") /* ==> Posters gpc*/
                PC0KW01.YACCD = " "; /* ==> reset field*/
              else

                PC0K357(); /* ===========> Verify audit comment*/

              end /* ===> GPC  = '01' By-pass check*/

            end /* ===> GPC  = '07' By-pass check*/

          end /* ===> verify Audit comment check*/

        end /* ===> ENTER or PF11 if statement*/

      end /* ===> sap po#*/

    end /* ===> pf7/pf8 if statement*/

  end /* ===> no error messages*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K350 ***********************/
end // end PC0K350

Function PC0K350A()
   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KM001.OP1CUOID;
  OP1REC.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  OP1REC.OP1CUOID = PC0KM001.OP1CUOID;
  OP1REC.OP1NORID = PC0KM001.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0KW00.PC0KWUPF = "N";
      PC0KW00.PC0KWMOD = "Y";
      PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
      PC0KW01.OP1NORID = PC0KM001.OP1NORID;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PC0KM001.OP1CUOID cursor, bold;
        set PC0KM001.OP1NORID bold;
        PC0KW00.XXXPRCNM = "PC0K350A";
        converseLib.validationFailed(70);
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0K556";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pc0k350a **********************/
end // end PC0K350A

// Verify scroll request
Function PC0K351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll sizes back request*/
   && PC0KW00.PC0KWF16 == "Y")    /* ===>First 16 sizes are displayed*/

    PC0KW00.XXXPRCNM = "PC0K351"; /* Module identification*/
    converseLib.validationFailed(77); /* No previous sizes to display*/
    converseLib.clearScreen();
    
    set PC0KM001.CATOAP cursor;

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll sizes forward request*/

    if (PC0KW00.PC0KWF16 == "Y" /* ===>First 16 sizes are displayed*/
     || PC0KW00.PC0KWM16 == "Y") /* ===>middle 16 sizes are displayed*/

      /* ------------------------------------------------------------*/
      /* Verify more sizes for scroll request*/

      /* - if a size is found,  the finder index is used as the*/
        /* positioning index.  It is loaded to the size index in*/
        /* Scroll Request module PC0K367.*/
      /* ------------------------------------------------------------*/

      PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXS; /* ===>load Finder index*/

      while (PC0KW00.PC0KWIXF <= 40) /* ===> Until end of sizes*/

        if (PC0KW00.PC0KWPF9 == "Y") /* ===>Pf9 Key switch (all sizes)*/

          if (PC0KW01.SY4IDDSC[PC0KWIXF] > " ") /* ===> valid size available*/
            return; /* ===> exit to process valid scroll*/
                                   /* request*/
          end

        else /* ===> verify size/qty exist*/

          if (PC0KW01.PC7ORDEQ[PC0KWIXF] > 0)
                                   /* ===>valid size/qty available*/
            return; /* ===> exit to process valid scroll*/
                                   /* request*/
          end

        end

        PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXF + 1; /* ===>Inc. size index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* scroll request invalid because:*/
            /* 1) last 16 styles already displayed*/
        /* or  2) no more sizes to display*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K351"; /* Module identification*/
    converseLib.validationFailed(76); /* No more sizes to display*/
    converseLib.clearScreen();
    
    set PC0KM001.CATOAP cursor;
    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K351 ***********************/
end // end PC0K351

// Verify Air Request Number
Function PC0K352()
   /* ------------------------------------------------------------*/
   /* Determine if the Air Number is required.*/
   /* ------------------------------------------------------------*/

   /* IF PC0KM001.PC6AIRNB EQ 0;*/
    /* AND PC0KM001.PC0KMMOD EQ 'AF';*/
    /* AND PC0KM001.XGPCD EQ '03';*/

   /* MOVE 'PC0K352' TO PC0KW00.XXXPRCNM  ; Module identification*/
   /* SET PC0KM001.PC6AIRNB CURSOR,BRIGHT  ; Highlight*/
   /* MOVE 81 TO EZEMNO             ; Indicate missing or invalid*/
   /* EZERTN;*/

   /* END ;*/

  if (PC0KM001.PC6AIRNB != PC0KW01.PC6AIRNB)
    PC0KW01.PC6AIRNB = PC0KM001.PC6AIRNB;
    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K352 ***********************/
end // end PC0K352

// Verify RTA date
Function PC0K353()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requetoed/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMRTA == "000000"
   || PC0KM001.PC0KMRTA == " ")

    if (PC0KW01.XGPCD == "02")
      converseLib.validationFailed(38); /* Indicate missing or invalid*/
    else

      if (PC0KM001.PC0KMRTA != PC0KW01.PC0KWDT4)
        PC0KW01.PC6RTADT = 0;
        PC0KW01.PC0KWDT4 = " ";

        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

      end

    end

    return;

  end

  if (PC0KM001.PC0KMRTA == PC0KW01.PC0KWDT4)
    return;
  end

   /* ------------------------------------------------------------*/
   /* set up date (mmddyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* ===>  move date type to record*/

  TA2REC.TA2GRGA = PC0KM001.PC0KMRTA; /* => MMDDYY format*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    PC0KW01.PC6RTADT = TA2REC.TA2GRGGN; /* ===> save RTA  Date*/
    PC0KW01.PC0KWDT4 = PC0KM001.PC0KMRTA; /* ===> load display record*/

    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K353"; /* Module identification*/
    set PC0KM001.PC0KMRTA cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K353 ***********************/
end // end PC0K353

// Verify ETAL Override date
Function PC0K354()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMETO == "000000"
   || PC0KM001.PC0KMETO == " ")

    if (PC0KM001.PC0KMETO != PC0KW01.PC0KWDT3)
      PC0KW01.PC0KWDT3 = " "; /* ===> clear ETAL map display*/
      PC0KM001.PC0KMETO = " "; /* ===> clear ETAL map display*/
      PC0KW01.PC6OETAL = 0; /* ===> clear ETAL Date display record*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* ===>  move date type to record*/

  TA2REC.TA2GRGA = PC0KM001.PC0KMETO; /* MMDDYY format*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    PC0KW01.PC6OETAL = TA2REC.TA2GRGGN;
                                   /* ===> save ETAL Override Date*/
    PC0KW01.PC0KWDT3 = PC0KM001.PC0KMETO; /* ===> load display record*/

    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K354"; /* Module identification*/
    set PC0KM001.PC0KMETO cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K354 ***********************/
end // end PC0K354

// Verify New/Add Total QTYS
Function PC0K355()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC0K505(); /* ===> load simulated FOB record map*/

  if (converseVar.validationMsgNum != 0) /* ===> verification not successful*/
    return; /* ===> invalid price requested*/
  end

  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/
  PC0KW00.PC0KWIXR = 0; /* ===> Initialize record size index*/
  PC0KW00.PC0KWQTY = 0; /* ===> Initialize QTY Accumulator*/
  PC0KW01.PC0KWTVL = 0; /* ===> Initialize QTY value Accumulator*/
  PC0KW00.PC0KWADD = 0; /* ===> Initialize QTY added Accumulator*/
  PC0KW00.PC0KWCNL = 0; /* ===> Initialize QTY cancel*/
                                   /* Accumulator*/
  PC0KW00.PC0KWCFL = "N"; /* ===> Initialize Cascade FOB flag*/
  PC0KW00.PC0KWOFL = "N"; /* ===> Initialize old FOB flag*/
  PC0KW00.PC0KWNFL = "N"; /* ===> Initialize new FOB flag*/

  PC0K510(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* verify the total qty against the size quantities*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXR <= 40) /* ===> Until size all processed*/

    PC0K520(); /* ===> verify size QTYs changed*/

  end

   /* ------------------------------------------------------------*/
    /* Calculate total order value for display.*/
    /* Add misc. charges to the total (qty x price) order value*/
    /* calculated in PC0K520/529 .*/
    /* Only apparel (GPC = '03') actually uses PC6MICHG.*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW01.PC6MICHG;
                                   /* ==>total PO value*/

  if (PC0KW00.PC0KWQTY != PC0KM001.PC0KMADD)
                                   /* ===> temp QTY accum vs entered*/
    if (PC0KW01.XGPCD == "02"
     && PC0KW01.PC4ORTYP == "OR")
      converseLib.validationFailed(556); /* ===> total qty cannot be changed*/
      PC0KW00.XXXPRCNM = "PC0K355";
      set PC0KM001.PC0KMQTY bold, skip;
    else
      converseLib.validationFailed(64); /* ===> total of all sizes must mach*/
                                   /* request*/
      PC0KW00.XXXPRCNM = "PC0K355";
      set PC0KM001.PC0KMADD cursor, bold;
    end

  else /* accum qty and entered qty are equal*/

    if (PC0KW00.PC0KWQTY == 0)
      converseLib.validationFailed(165); /* ===> total QTYs must be greater than*/
                                   /* zero*/
      PC0KW00.XXXPRCNM = "PC0K355";
      if (PC0KW01.XGPCD == "02"
       && PC0KW01.PC4ORTYP == "OR")
        set PC0KM001.PC0KMQTY bold, skip;
      else
        set PC0KM001.PC0KMADD cursor, bold;
      end

    else

      /* ------------------------------------------------------------*/
       /* Successful verification of Total QTYs vs. Size Quantities*/
      /* ------------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* ===> verification successful*/

        PC0KW01.PC0KWADD = PC0KW00.PC0KWQTY;
                                   /* ===> Total New/Add QTYs*/
        PC0KW01.PC6TORDE = PC0KW00.PC0KWQTY; /* ===> Total On Ord QTYs*/

        PC0KM001.PC0KMVAL = PC0KW01.PC0KWTVL; /* ===> new tot value*/
        PC0KM001.PC0KMQTY = PC0KW01.PC6TORDE; /* ===> map display*/
        PC0KM002.PC6TORDE = PC0KW01.PC6TORDE; /* ===> map display*/
        PC0KW01.PC6TADD = PC0KW04.PC6TADD + PC0KW00.PC0KWADD;
        PC0KM002.PC6TADD = PC0KW01.PC6TADD; /* ===> map display*/

        PC0KW01.PC6TCNCL = PC0KW04.PC6TCNCL + PC0KW00.PC0KWCNL;
        PC0KM002.PC6TCNCL = PC0KW01.PC6TCNCL; /* ===> map display*/

        if (PC0KW01.PC0KWADD != PC0KM001.PC0KMADD)
          PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
          PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
          PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirm flag*/
        end

      end /* ===> verification successful*/

    end /* ===> total qtys must be > 0*/

  end /* ===> temp QTY accum vs entered check*/

   /* **                                                        ***/
   /* ********************** End of PC0K355 ***********************/
end // end PC0K355

// Verify ETAL Default flag
Function PC0K356()
   /* ------------------------------------------------------------*/
   /* If l/c required flag changed, verify the entered code.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC6ETALF != PC0KW01.PC6ETALF) /* spec required flag*/
    PC0KW00.PC0KWMOD = "Y"; /* ==>modified field flag*/

    if (PC0KM001.PC6ETALF == "Y"
     || PC0KM001.PC6ETALF == "N")
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update conformation flag*/
      PC0KW01.PC6ETALF = PC0KM001.PC6ETALF;
    else

      /* ------------------------------------------------------------*/
       /* If not valid, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      PC0KW00.XXXPRCNM = "PC0K356"; /* Module identification*/
      set PC0KM001.PC6ETALF cursor, bold; /* Highlight*/
      converseLib.validationFailed(42);
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K356 ***********************/
end // end PC0K356

// Verify Audit Comment Code
Function PC0K357()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.YACCD in YACTBL.YACCD /* Code in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PC0KM001.YACCD != PC0KW01.YACCD) /* Code in table*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update conformation flag*/
      PC0KW01.YACCD = PC0KM001.YACCD;
      PC0KM002.YACCD = PC0KM001.YACCD;
      PC0KM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
      PC0KM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KM001.YACDESC = " ";
    PC0KM002.YACDESC = " ";
    PC0KW00.XXXPRCNM = "PC0K357"; /* Module identification*/
    set PC0KM001.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K357 ***********************/
end // end PC0K357

// Verify Original ETS date
Function PC0K358()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* ===>  move date type to record*/

  TA2REC.TA2GRGA = PC0KM001.PC0KMOET; /* MMDDYY format*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    PC0KW01.PC6OETS = TA2REC.TA2GRGGN; /* ===> save Original ETS Date*/
    PC0KW01.PC0KWDT2 = PC0KM001.PC0KMOET; /* ===> load display record*/

    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K358"; /* Module identification*/
    set PC0KM001.PC0KMOET cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K358 ***********************/
end // end PC0K358

// Verify Warehouse
Function PC0K359()
   /* ------------------------------------------------------------*/
   /* Determine if code is requested/entered.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMWHS == " ")

    if (PC0KM001.PC0KMCUS == " ")
      converseLib.validationFailed(59); /* ===> warehouse missing or invalid*/
      PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
      set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
      return;

    else /* valid*/

      if (PC0KM001.PC0KMWHS != PC0KW01.XWHCD)
        if (PC0KW04.XGPCD == "03")
          PC0K530(); /* validate owner group for whse ' '*/
          if (PC0KW00.PC0KWOGV == "Y") /* have valid owner group*/
            PC0KW01.XWHCD = " ";
            PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
            PC0KW00.PC0KWUPF = "N"; /* ===> reset updt confirm flag*/
          end
        else
          PC0KW01.XWHCD = " ";
          PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
          PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
        end
      end

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* Customer xref required for warehouse 65 orders.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMWHS == "65"
   && PC0KM001.PC0KMCUS == " ")
    converseLib.validationFailed(45); /* ===> xref missing or invalid*/
    PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
    set PC0KM001.PC0KMCUS cursor, bold; /* Highlight*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Determine if code was modified*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMWHS == PC0KW01.XWHCD)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* For apparel, determine if the owner group is valid for*/
     /* the new warehouse.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "03")
    PC0K530(); /* validate owner group for new whse*/
  end

  if (PC0KM001.PC0KMWHS in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PC0KW01.XGPCD == "03")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "03" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "03") /* valid for this GPC*/

        if (PC0KM001.PC0KMCUS > "  ")
          if (PC0KW00.PC0KWOGV == "Y") /* have valid owner grp for whse*/
            PC0KW01.XWHCD = PC0KM001.PC0KMWHS;
            PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
            PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
          end
        else

          if (PC0KW04.YSMXDV == "20") /* ===> division of saved copy*/
            if (PC0KM001.PC0KMWHS != "12"
             && PC0KM001.PC0KMWHS != "60"
             && PC0KM001.PC0KMWHS != "61")
              PC0KW00.XXXPRCNM = "PC0K359"; /* Module ident*/
              set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
              converseLib.validationFailed(167); /* ===> cannot change divisions*/
            end
          end

          if (PC0KW04.YSMXDV == "10") /* ===> division of saved copy*/
            if (PC0KM001.PC0KMWHS == "12"
             || PC0KM001.PC0KMWHS == "60"
             || PC0KM001.PC0KMWHS == "61")
              PC0KW00.XXXPRCNM = "PC0K359"; /* Module ident*/
              set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
              converseLib.validationFailed(167); /* ===> cannot change divisions*/
            end
          end

          if (PC0KW04.YSMXDV == "10") /* ===> division of saved copy*/
            if (PC0KM001.PC0KMWHS != "12"
             && PC0KM001.PC0KMWHS != "60"
             && PC0KM001.PC0KMWHS != "61")
              if (PC0KW00.PC0KWOGV == "Y") /* have valid owner group for whse*/
                PC0KW01.XWHCD = PC0KM001.PC0KMWHS;
                PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
                PC0KW00.PC0KWUPF = "N";
                                   /* ===> reset update confirm flag*/
              end
            end
          end

          if (PC0KW04.YSMXDV == "20") /* ===> division of saved copy*/
            if (PC0KM001.PC0KMWHS == "12"
             || PC0KM001.PC0KMWHS == "60"
             || PC0KM001.PC0KMWHS == "61")
              if (PC0KW00.PC0KWOGV == "Y") /* have valid owner group for whse*/
                PC0KW01.XWHCD = PC0KM001.PC0KMWHS;
                PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
                PC0KW00.PC0KWUPF = "N";
                                   /* ===> reset update confirm flag*/
              end
            end
          end

        end

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
        set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '03'*/

    if (PC0KW01.XGPCD == "02")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "02" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "02") /* valid for this GPC*/

        PC0KW01.XWHCD = PC0KM001.PC0KMWHS;
        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
        set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '02'*/

    if (PC0KW01.XGPCD == "01"
     || PC0KW01.XGPCD == "07")

      if (XWHTBL.XGPCD1[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "01" /* valid for this GPC*/
       || XWHTBL.XGPCD1[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD2[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD3[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD4[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD5[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD6[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD7[sysVar.arrayIndex] == "07" /* valid for this GPC*/
       || XWHTBL.XGPCD8[sysVar.arrayIndex] == "07") /* valid for this GPC*/

        PC0KW01.XWHCD = PC0KM001.PC0KMWHS;
        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/

      else /* ===> not valid*/

        /* ------------------------------------------------------------*/
         /* If not found or inactive, indicate missing or invalid.*/
        /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
        set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
        converseLib.validationFailed(59); /* Indicate missing or invalid*/

      end /* ===> check GPC warehouse*/

    end /* ===> GPC = '01'*/

  else /* ===> not found or inactive*/

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K359"; /* Module identification*/
    set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K359 ***********************/
end // end PC0K359

// -->Process Valid Input Request
Function PC0K360()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (PC0KW01.XGPCD == "02"
     && PC0KW00.PC0KWPF2 == "N") /* ===> FOB PF2 Key not Requested*/

      if (PC0KW01.PC4ORTYP == "FT"
       || PC0KW01.PC4ORTYP == "OR"
       || PC0KW01.PC4ORTYP == "S1"
       || PC0KW01.PC4ORTYP == "S4")
        /* ======== Next Sentence =======>*/
      else
        PC0K367(); /* ===> Process scroll request*/
      end

    else
      PC0K367(); /* ===> Process scroll request*/
    end

    if (converseVar.validationMsgNum == 0)
      PC0KW00.PC0KWSWS = "Y"; /* Format the map switch*/
      /* always restart at size 1 when pf7 entered.*/
      PC0KW00.PC0KWF16 = "Y"; /* first 16 sizes*/
      PC0KW00.PC0KWM16 = "N"; /* middle 16 sizes*/
      PC0KW00.PC0KWIXS = 1; /* initialize size index*/
      if (PC0KW01.XGPCD == "02")
        if (PC0KW01.PC4ORTYP == "FT"
         || PC0KW01.PC4ORTYP == "OR"
         || PC0KW01.PC4ORTYP == "S1"
         || PC0KW01.PC4ORTYP == "S4")
          /* ======== Next Sentence =======>*/
        else
          set PC0KM001.PC0KMNQT[1] cursor; /* ==> set cursor 1st size*/
        end
      else
        set PC0KM001.PC0KMNQT[1] cursor; /* ==> set cursor 1st size*/
      end
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    if (PC0KW01.XGPCD == "02"
     && PC0KW00.PC0KWPF2 == "N") /* ===> FOB PF2 Key not Requested*/

      if (PC0KW01.PC4ORTYP == "FT"
       || PC0KW01.PC4ORTYP == "OR"
       || PC0KW01.PC4ORTYP == "S1"
       || PC0KW01.PC4ORTYP == "S4")
        /* ======== Next Sentence =======>*/
      else
        PC0K367(); /* ===> Process scroll request*/
      end

    else
      PC0K367(); /* ===> Process scroll request*/
    end

    if (converseVar.validationMsgNum == 0)
      PC0KW00.PC0KWSWS = "Y"; /* Format the map switch*/
      if (PC0KW00.PC0KWF16 == "Y") /* was at first 16 sizes*/
        PC0KW00.PC0KWF16 = "N"; /* first 16 sizes*/
        PC0KW00.PC0KWM16 = "Y"; /* middle 16 sizes*/
      else /* was on middle 16 sizes*/
        PC0KW00.PC0KWF16 = "N"; /* first 16 sizes*/
        PC0KW00.PC0KWM16 = "N"; /* middle 16 sizes*/
      end
      PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXF; /* ===> finder index*/
      if (PC0KW01.XGPCD == "02")
        if (PC0KW01.PC4ORTYP == "FT"
         || PC0KW01.PC4ORTYP == "OR"
         || PC0KW01.PC4ORTYP == "S1"
         || PC0KW01.PC4ORTYP == "S4")
          /* ======== Next Sentence =======>*/
        else
          set PC0KM001.PC0KMNQT[1] cursor; /* ==> set cursor 1st size*/
        end
      else
        set PC0KM001.PC0KMNQT[1] cursor; /* ==> set cursor 1st size*/
      end
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* process the entered data and get new plan if any item*/
   /* key data has changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Selection map requested*/
   || converseVar.eventKey is pf6   /* Selection map requested*/
   || converseVar.eventKey is pf11  /* Selection map requested*/
   || converseVar.eventKey is pf12  /* Selection map requested*/
   || converseVar.eventKey is pf14) /* Selection map requested*/

    if (PC0KW00.PC0KWMOD == "Y")

      /* ------------------------------------------------------------*/
        /* IF Item plan     has changed. (Map's modifiable data)*/
         /* ---> check if an item in plan is open*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6PLAN != PC0KW04.PC6PLAN) /* ===> plan*/

        PC0KW00.PC6PLAN = PC0KM001.PC0KMPLN; /* => W.S. Record*/

        PC0K364(); /* ===> check if any items in plan open*/

      end /* ===> plan changed*/

      /* ------------------------------------------------------------*/
        /* IF Item key data has changed. (Map's modifiable data)*/
         /* ---> calculate direct ship code*/
         /* ---> calculate spec diff code*/
         /* ---> calculate dest country*/
        /* else*/
        /* ---> reset to original value*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust Xref ID*/
       || PC0KW01.XWHCD != PC0KW04.XWHCD)      /* ===> warehouse*/

        /* ------------------------------------------------------------*/
         /* get cust info if available, necessary for subsequent calc.*/
        /* ===>         for ISEG & D.S. & CNTY*/
        /* ------------------------------------------------------------*/

        if (PC0KW01.PC2CUXID > " ") /* ===> Cust Xref*/
          PC0KS98(); /* ===>get cust info*/

          /* 05/03/00 Change begins*/
          if (VPRDCU03.XCTCD == "JAPA" && VPRDCU03.PC-PRDCU-APAO-FL == "W")
            if (PC0KW01.XWHCD <= " ") /* ===> If Whse NOT supplied*/
              PC0KW00.PC0KXWHCD = VPRDCU03.XWHCD; /* save for later use*/
              PC0KM001.PC0KMWHS = VPRDCU03.XWHCD; /* move whse to map*/
              set PC0KM001.PC0KMWHS cursor, bold; /* Highlight*/
              PC0KW00.PC0K-JAP-SW = "Y"; /* japan xref switch set*/
              converseLib.validationFailed(580); /* msg for user that whse defaulted by appl*/
              exit stack; /* return to prev process*/
            end
          end
          /* 05/03/00 Change ends*/

        end

        PC0K366(); /* ===> calculate direct ship code*/

        PC0K368(); /* ===> calc. dest cntry and Spec. diff.*/

      else /* ===> item key data not changed*/

        if (PC0KW01.XDSCD != PC0KW04.XDSCD) /* ===> reset direct ship code*/
          PC0KW01.XDSCD = PC0KW04.XDSCD; /* ===>*/
        end /* ===>*/

        if (PC0KW01.PC2INSEG != PC0KW04.PC2INSEG) /* ===> reset ISEG*/
          PC0KW01.PC2INSEG = PC0KW04.PC2INSEG; /* ===>*/
        end /* ===>*/

        if (PC0KW01.PC6XCTCD != PC0KW04.PC6XCTCD) /* ===> reset dest cntry*/
          PC0KW01.PC6XCTCD = PC0KW04.PC6XCTCD; /* ===>*/
        end /* ===>*/

        if (PC0KW01.YSMXDV != PC0KW04.YSMXDV) /* ===> reset division*/
          PC0KW01.YSMXDV = PC0KW04.YSMXDV; /* ===>*/
        end /* ===>*/

      end /* ===> item key data changed*/

    end /* ===> modified data flag*/

    if (converseVar.eventKey is pf11) /* ===> Right map requested*/
      PC0KW00.PC0KWSWM = "2"; /* ===>set request for right map*/
      return; /* Return to previous process*/
    end

    if (PC0KW00.PC0KWMOD == "Y")

      if (converseVar.eventKey is enter /* Selection map requested*/
       || converseVar.eventKey is pf6   /* Selection map requested*/
       || converseVar.eventKey is pf14) /* Selection map requested*/

        PC0K800(); /* ===> do common data base update*/

      end

    end /* ===> modified data flag*/

  end

   /* ------------------------------------------------------------*/
   /* if PF6 was pressed,*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* Selection map requested*/

    COMMAREA.CATOAP = "PC0I";
    PC0K361(); /* =====> move pass data*/
    PC0K362(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if PF14 was pressed*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf14) /* Selection map requested*/

    COMMAREA.CATOAP = "PC05";
    PC0K361(); /* =====> move pass data to pass record*/
    PC0K362(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if pf12 pressed do same as 'enter' but dont incrmnt style*/
       /* Set up for the next style or transfer to the from*/
       /* from application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* ===> fy/po fob requested*/

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY) /* ===> no more styles*/

      if (PC0KW00.PC0KWSWP == "Y" /* ===> protect switch is set*/
       || PC0KW00.PC0KWMOD == "N") /* ===> protect switch is set*/

        if (COMMAREA.CAFROMAP == "PC0I" /**/
         /* ===> get the saved from appl.*/
         || COMMAREA.CAFROMAP == "PC05") /**/
                                  /* ===>saved in user level area*/

          COMMAREA.CATOAP = PC0KW02.CAFROMAP;

        else /* ===> use commare from appl.*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        end

        PC0K361(); /* ===> move pass data to pass record*/

        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        PC0KW00.PC0KWXIT = "Y"; /* ===> exit application flag*/

      else

           /* ------------------------------------------------------------*/
            /* set-up to obtain data on updated item and display the data*/
            /* with a update message.*/
           /* ------------------------------------------------------------*/

        PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY - 1; /* ==> reset style index*/
        PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
        PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
        PC0KW00.PC0KWSWP = "Y"; /* ===>Protect switch map 1&2*/
        PC0KW00.PC0KWSWF = "Y"; /* ===> format map 1*/
        PC0KW00.PC0KWS2F = "Y"; /* ===> format map 2*/
        PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
        PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/

        PC0K369(); /* ===>*/
                                   /* Set-up updated item to display*/

      end

    else /* ===> set up for next style*/

      PC0KW00.PC0KWPF9 = "N"; /* ===>set request for PF9 switch*/
      PC0KW00.PC0KWPF2 = "N"; /* ===>set request for PF2 switch*/
      PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
      PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
      PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
      PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
      PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/
      PC0KW00.PC0KWIXS = 1; /* ===>initialize index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* if enter was pressed*/
       /* Set up for the next style or transfer to the from*/
       /* from application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ===> next style requested*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY) /* ===> no more styles*/

      if (PC0KW00.PC0KWSWP == "Y" /* ===> protect switch is set*/
       || PC0KW00.PC0KWMOD == "N") /* ===> protect switch is set*/

        if (COMMAREA.CAFROMAP == "PC0I" /* ===> get the saved from appl.*/
         || COMMAREA.CAFROMAP == "PC05") /* ===>saved in user level area*/

          COMMAREA.CATOAP = PC0KW02.CAFROMAP;

        else /* ===> use commare from appl.*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        end

        PC0K361(); /* ===> move pass data to pass record*/

        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        PC0KW00.PC0KWXIT = "Y"; /* ===> exit application flag*/

      else

        /* ------------------------------------------------------------*/
         /* set-up to obtain data on updated item and display the data*/
         /* with a update message.*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY - 1; /* ==> reset style index*/
        PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
        PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
        PC0KW00.PC0KWSWP = "Y"; /* ===>Protect switch map 1&2*/
        PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
        PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
        PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
        PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/

        PC0K369(); /* ===> Set-up updated item to display*/

      end

    else /* ===> set up for next style*/

      PC0KS99(); /* ===>re-initialize index & flagsr*/

    end

  end

   /* ------------------------------------------------------------*/
   /* if PF2 was pressed,*/
       /* Set up for release of FOB prices*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf2) /* ===> unprotect FOBs requested*/
    PC0KW00.PC0KWPF2 = "Y"; /* ===>set request for PF2 switch*/
    PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
    PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
    set PC0KM001.PC0KMFOB[1] cursor;
  end

   /* ------------------------------------------------------------*/
   /* if PF9 was pressed,*/
       /* Set up for release of additional sizes*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* ===> all sizes requested*/
    PC0KW00.PC0KWIXS = 1;
    PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
    PC0KW00.PC0KWPF9 = "Y"; /* ===>set request for PF9 switch*/
    PC0KW00.PC0KWSWS = "Y"; /* ===>size format request*/
    PC0KW00.PC0KWF16 = "Y"; /* ===>first 16 sizes flag*/
    PC0KW00.PC0KWM16 = "Y"; /* ===>middle 16 sizes flag*/
    PC0KW00.PC0KWMOD = "Y"; /* ===>reset modified flag*/
    PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
    set PC0KM001.PC0KMNQT[1] cursor;
  end

   /* ------------------------------------------------------------*/
   /* if PF15 was pressed,*/
       /* Set up for minimum order request for size QTYs*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* ===> Data Base cancel requested*/

    PC0K900(); /* ===> do common data base cancel*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1; /* ==> style index*/

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY) /* ===> no more styles*/

      if (PC0KW00.PC0KWSWP == "Y" /* ===> protect switch is set*/
       || PC0KW00.PC0KWMOD == "N") /* ===> protect switch is set*/

        if (COMMAREA.CAFROMAP == "PC0I" /* ===> get the saved from appl.*/
         || COMMAREA.CAFROMAP == "PC05") /* ===>saved in user level area*/

          COMMAREA.CATOAP = PC0KW02.CAFROMAP;

        else /* ===> use commare from appl.*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        end

        PC0K361(); /* ===> move pass data to pass record*/

        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        PC0KW00.PC0KWXIT = "Y"; /* ===> exit application flag*/

      else
        PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY - 1; /* ==> reset style index*/
        PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
        PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
        PC0KW00.PC0KWSWP = "Y"; /* ===>Protect switch map 1&2*/
        PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
        PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
        PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
        PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/

      end

    else /* ===> set up for next style*/

      PC0KS99(); /* ===> re-initialize indexes & flags*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K360 ***********************/
end // end PC0K360

// load pass rec with select data
Function PC0K361()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;
  PCWREC.XDMCD = PC0KW01.XDMCD;
  PCWREC.XQACD = PC0KW01.XQACD;
  PCWREC.XOWCD = PC0KW01.XOWCD;
  PCWREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCWREC.XPGCD = PC0KW01.XPGCD;
  PCWREC.XUMCD = PC0KW01.XUMCD;
  PCWREC.PC6ETSDT = PC0KW01.PC6ETSDT;
  PCWREC.YMTCD = PC0KW01.YMTCD;
  PCWREC.XWHCD = PC0KW01.XWHCD;
  PCWREC.PC2CUXID = PC0KW01.PC2CUXID;
  PCWREC.XSECD = PC0KW01.XSECD;
  PCWREC.XDSCD = PC0KW01.XDSCD;
  PCWREC.PC6PLAN = PC0KW01.PC6PLAN;
  PCWREC.YSMXDV = PC0KW01.YSMXDV;
  PCWREC.PC6OETS = PC0KW01.PC6OETS;
  PCWREC.PC6RTADT = PC0KW01.PC6RTADT;

   /* **                                                        ***/
   /* ********************** End of PC0K361 ***********************/
end // end PC0K361

// save key data for return
Function PC0K362()

   /* ------------------------------------------------------------*/
       /* Set the pass record with the current map indicator*/
       /* and temp storage page, for return access*/
   /* ------------------------------------------------------------*/

  move PC0KW03 to PC0KW02 withV60Compat; /* ===> save selected pass data number*/
  PC0KW02.PC0KWSWM = PC0KW00.PC0KWSWM; /* ===> save map number*/
  PC0KW02.PC0KWIDX = PC0KW00.PC0KWCSY; /* ===> save style index*/
  PCWREC.PCWSYIDX = PC0KW00.PC0KWCSY; /* ===> pass style index*/
  PC0KW02.CAFROMAP = COMMAREA.CAFROMAP; /* ===> save from application*/

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.PCWFNC[1] = "C"; /* function*/
    PCWREC.CAFROMAP[1] = "PC0K"; /* From application id*/
    PCWREC.PCWUSER1 = PC0KW02.PC0KWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.PCWFNC[2] = "C"; /* function*/
      PCWREC.CAFROMAP[2] = "PC0K"; /* From application id*/
      PCWREC.PCWUSER2 = PC0KW02.PC0KWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.PCWFNC[3] = "C"; /* function*/
        PCWREC.CAFROMAP[3] = "PC0K"; /* From application id*/
        PCWREC.PCWUSER3 = PC0KW02.PC0KWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.PCWFNC[4] = "C"; /* function*/
          PCWREC.CAFROMAP[4] = "PC0K"; /* From application id*/
          PCWREC.PCWUSER4 = PC0KW02.PC0KWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K362 ***********************/
end // end PC0K362

// check Plan has open status row
Function PC0K364()
   /* ------------------------------------------------------------*/

   /* Select set on all the items using the GPC code, the PO*/
   /* number and Plan. (wild card the product key)*/
   /* For each of the items within the specified plan, a check*/
   /* will be made to see if at least one item within that plan*/
   /* is in open status. If not then error: "Can not add to a*/
   /* plan which has no open items."*/

   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIOF = "N"; /* Item open flag*/
  PC0KW00.PC0KWSWT = "N"; /* end of temp Cursor flag*/

  set VPOITM05 empty;

  VPOITM05.XGPCD = PC0KW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* PO number*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/

  VPOITM05.SY1STNBR = "*";
  VPOITM05.SY2CLRID = "*";
  VPOITM05.XDMCD = "*";
  VPOITM05.XQACD = "*";
  VPOITM05.XOWCD = "*";
  VPOITM05.PC2INSEG = "*";
  VPOITM05.XPGCD = "*";
  VPOITM05.XUMCD = "*";

   /* =========> DESTINATION FIELDS*/
   /* =========> ------------------*/

  VPOITM05.XWHCD = "*";
  VPOITM05.PC2CUXID = "*";

   /* =========> PLAN*/
   /* =========> ----*/

  VPOITM05.PC6PLAN = PC0KW00.PC6PLAN; /* ===>saved plan from screen*/

   /* =========> WILD CARD FIELDS*/
   /* =========> ------------------*/

  VPOITM05.PC6ETSDT = -1;
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.XDSCD = "*";
  VPOITM05.PC6XCTCD = "*";
  VPOITM05.YSMXDV = "*";

  PC0KS41(); /* Open cursor for item*/

  PC0KS42(); /* Fetch first item*/
   /* -------------------------------===> Prime read*/

  if (PC0KW00.PC0KWSWT == "Y") /* ===> end of temp cursor on prime read*/
    PC0KW00.PC0KWIOF = "Y"; /* Set Item open flag to yes*/
    PC0KW01.PC6PLAN = PC0KW00.PC6PLAN; /* load saved plan*/
  end

  while (PC0KW00.PC0KWSWT == "N") /* ===> until end of temp cursor*/

    if (VPOITM05.PC6STAT == "OP" /* Status is open*/
     || VPOITM05.PC6STAT == "TN") /* Status is tentative*/

      PC0KW00.PC0KWIOF = "Y"; /* Set Item open flag to yes*/
      PC0KW00.PC0KWSWT = "Y"; /* Set end of temp cursor*/
      PC0KW01.PC6PLAN = PC0KW00.PC6PLAN; /* load saved plan*/

    else

      PC0KS42(); /* Fetch next item*/
      /* -------------------------------===> Driving read*/

    end

  end

  PC0KS43(); /* Close cursor for PO item*/

  if (PC0KW00.PC0KWIOF == "N") /* There is no open PO item*/
    converseLib.validationFailed(263); /* All products in requested plan are closed*/
    PC0KW00.XXXPRCNM = "PC0K364"; /* Module identification*/
    set PC0KM001.PC0KMPLN cursor, bold;
    exit stack; /* ===> exit to display map and error*/
                                   /* msg*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K364 ***********************/
end // end PC0K364

// re-calculate direct ship code
Function PC0K366()
   /* ------------------------------------------------------------*/
   /* re-calculate dirct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XWHCD == " "
   && PC0KW01.PC2CUXID > " ")

    if (PC0KW01.XDSCD != "1")
      PC0KW01.XDSCD = "1"; /* ===> default direct ship code*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
    end /* ===> direct ship code check*/

  end /* ===> warehouse blank and customer*/
                                   /* valued*/

   /* ------------------------------------------------------------*/
   /* re-calculate direct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XWHCD > " "
   && PC0KW01.PC2CUXID == " ")

    if (PC0KW01.XDSCD != " ")
      PC0KW01.XDSCD = " "; /* ===> default direct ship code*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
    end /* ===> direct ship code check*/

  end /* ===> warehouse valued and customer*/
                                   /* blank*/

   /* ------------------------------------------------------------*/
   /* re-calculate dirct ship code.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XWHCD > " "
   && PC0KW01.PC2CUXID > " ")

    if (VPRDCU03.YPCCD == "N"
     && PC0KW01.XDSCD != " ")

      PC0KW01.XDSCD = " "; /* ===> default direct ship code*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/

    end /* ===> customer type check*/

    if (VPRDCU03.YPCCD == "C"
     || VPRDCU03.YPCCD == "S")

      if (PC0KW01.XDSCD != "2")
        PC0KW01.XDSCD = "2"; /* ===> default direct ship code*/
        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
      end /* ===> direct ship code check*/

    end /* ===> customer type check*/

  end /* ===> warehouse and customer both*/
                                   /* valued*/

   /* **                                                        ***/
   /* ********************** End of PC0K366 ***********************/
end // end PC0K366

// process scroll request
Function PC0K367()
   /* ------------------------------------------------------------*/
   /* Initialize necessary indexes and accumulatiors.*/
   /* ------------------------------------------------------------*/

  PC0K505(); /* ===> load simulated FOB record map*/

  if (converseVar.validationMsgNum != 0) /* ===> verification not successful*/
    exit stack; /* ===> invalid price requested*/
  end

  PC0KW00.PC0KWIXM = 1; /* ===> Initialize map size index*/
  PC0KW00.PC0KWIXR = 0; /* ===> Initialize record size index*/
  PC0KW00.PC0KWCFL = "N"; /* ===> Initialize Cascade FOB flag*/
  PC0KW00.PC0KWOFL = "N"; /* ===> Initialize old FOB flag*/
  PC0KW00.PC0KWNFL = "N"; /* ===> Initialize new FOB flag*/

  PC0K510(); /* ===> get next valid size (prime read)*/

   /* ------------------------------------------------------------*/
   /* Verify the total changed and load data to W.S.*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWIXR <= 40) /* ===> Until size all processed*/

    PC0K515(); /* ===> verify size QTYs changed*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K367 ***********************/
end // end PC0K367

// calc. dest.ctry & spec.diff
Function PC0K368()
   /* ------------------------------------------------------------*/
   /* calc and Load Spec diff to W.S.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID > " ")
    PC0KW01.PC2INSEG = VPRDCU03.PC2INSEG;
  else /* ===>Cust = blank*/
    PC0KW01.PC2INSEG = "000";
  end /* ===>Cust >  blank*/

   /* ------------------------------------------------------------*/
   /* calc and Load DEST CTRY to W.S.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID > " ")
    PC0KW01.PC6XCTCD = VPRDCU03.XCTCD;
    PC0KW01.YSMXDV = VPRDCU03.YSMXDV;
  else /* ===>*/
    if (PC0KW01.XWHCD == "12")
      PC0KW01.PC6XCTCD = "USA";
      PC0KW01.YSMXDV = "20";
    else
      if (PC0KW01.XWHCD == "60")
        PC0KW01.PC6XCTCD = "BELG";
        PC0KW01.YSMXDV = "20";
      else
        if (PC0KW01.XWHCD == "61")
          PC0KW01.PC6XCTCD = "NETH";
          PC0KW01.YSMXDV = "20";
        else
          PC0KW01.PC6XCTCD = "USA";
          PC0KW01.YSMXDV = "10";
        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K368 ***********************/
end // end PC0K368

// set-up updated item to display
Function PC0K369()
   /* ------------------------------------------------------------*/
    /* This module is performed when the last Maintence item*/
       /* has been processed. Consequently, the original item*/
       /* which was maintenanced may have been cancelled due to*/
       /* a merge or destination type process.*/
    /* In these two cases, the PC0KW03 will be loaded with the*/
       /* Item Seq. NBR of the ("Merge to" or "Created New") item*/
   /* Note:*/
    /* The PC0KW03 record is a saved copy of the PCWREC that*/
       /* was passed to this application. It holds the array of*/
       /* item sequence numberS requested for maintenance.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB == PC0KW04.PC6ITMNB) /* ===> seq. number*/
    /* ---------------------------------> cancel due to merge*/
    /* ---------------------------------> therefore "Merge" occured*/

    /* ---> load the seq nbr from the save merge to row (PC0KW06)*/
    PC0KW03.PC6ITMNB[PC0KWCSY] = PC0KW06.PC6ITMNB; /* ===> seq. number*/
    PCWREC.PC6ITMNB[PC0KWCSY] = PC0KW06.PC6ITMNB; /* ===> seq. number*/

  end

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB) /* ===> seq. number*/
    /* -------------------> cancel due to destination change,mode*/
    /* -------------------> therefore "destination change" occured*/

    /* ---> load the seq nbr from the display W.S.  row (PC0KW01)*/
    PC0KW03.PC6ITMNB[PC0KWCSY] = PC0KW01.PC6ITMNB; /* ===> seq. number*/
    PCWREC.PC6ITMNB[PC0KWCSY] = PC0KW01.PC6ITMNB; /* ===> seq. number*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K369 ***********************/
end // end PC0K369

// ==>Process Map 2 Maint Logic
Function PC0K400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0K310(); /* Obtain the data to display*/

  PC0K420(); /* Format and display the map*/

  PC0K430(); /* Check attention identifier*/

  PC0K440(); /* Reset fields to normal intensity*/

  PC0K450(); /* Verify the entered data*/

  PC0K460(); /* Process valid input request*/

   /* **                                                        ***/
   /* ********************** End of PC0K400 ***********************/
end // end PC0K400

// -->Format And Converse Map 2
Function PC0K420()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No error found*/

    if (PC0KW00.PC0KWS2F == "Y") /* ===> Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0KM002 initial;

      /* ------------------------------------------------------------*/
       /* Format the LEFT map*/
      /* ------------------------------------------------------------*/

      PC0K421(); /* ===> Format the literals*/

      if (PC0KW01.PC6STAT == "CL" /* ===> status*/
       || PC0KW01.PC6STAT == "NC" /* ===> status*/
       || PC0KW01.PC6STAT == "CX" /* ===> status*/
       || PC0KW00.PC0KWSWP == "Y")
                                   /* ===> display successful message*/

        PC0K424(); /* ===> Format the display data*/
                                   /* protected*/

      end

      PC0K422(); /* ===> Format the display data*/

      PC0K423(); /* ===> Format pass record fields*/

      PC0KW00.PC0KWS2F = "N"; /* ===> Format the map 2 switch*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

  if (PC0KM002.XGPCD == "02")
    if (converseVar.validationMsgNum == 0
     && PC0KW01.PC6STAT != "CL" /* ===> status*/
     && PC0KW01.PC6STAT != "NC" /* ===> status*/
     && PC0KW01.PC6STAT != "CX" /* ===> status*/
     && PC0KW00.PC0KWSWP != "Y")
      set PC0KM002.FB-LATE-BK-FL normal;
    end
    set PC0KM002.PC0KM-LATE-BK-FL-LIT skip;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0KM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0KM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ----------------------------------------------------------*/
   /* validate for sap po items (NOTE: for sap po's no fields*/
   /* are allowed to change thru this application*/
   /* ----------------------------------------------------------*/
  if (PC0KW04.PC-SAP-PO-NBR > " "
   && PC0KW04.XGPCD != "01" /* VRAMAC*/
   && COMMAREA.CACLVL[8] != "Y")
    PCWREC.XXXMSGNO = 576;
    PC0KW00.XXXPRCNM = "PC0K420";
    set PC0KM002.CATOAP cursor;
    set PC0KM002.YACCD skip;
    set PC0KM002.YOHCD skip;
    set PC0KM002.PC6NILRF skip;
    if (PC0KW04.XGPCD == "02")
      set PC0KM002.FB-LATE-BK-FL skip;
      if (PC0KM002.PC6CONNO > " ")
        set PC0KM002.PC6CONNO skip;
      else
        set PC0KM002.PC6CONNO skip, invisible;
      end
      if (PC0KM002.PC6SZAVL > " ")
        set PC0KM002.PC6SZAVL skip;
      else
        set PC0KM002.PC6SZAVL skip, invisible;
      end
      set PC0KM002.PC0KMNDT skip;
    end
    if (PC0KW04.XGPCD == "03")
      set PC0KM002.PC6CONNO skip, invisible;
      set PC0KM002.PC6SZAVL skip, invisible;
      set PC0KM002.FB-LATE-BK-FL skip, invisible;
    end
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0KM002.XXXPRCNM = PC0KW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0KM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0KM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0KW00.XXXPRCNM = " "; /* Module identification*/
  PC0KM002.XXXPRCNM = "PC0K"; /* Module identification*/

  if (converseVar.eventKey is enter)
    PC0K425(); /* ===> Pop-up window routine*/
  end

  COMMAREA.CATOAP = PC0KM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0KM002.CAITEM; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K420 ***********************/
end // end PC0K420

// Format the display literals
Function PC0K421()
   /* ------------------------------------------------------------*/
   /* Display the page information on the screen*/
   /* ------------------------------------------------------------*/

  PC0KM002.PC0KMCSY = PC0KW00.PC0KWCSY; /* ===> current style index*/
  PC0KM002.PC0KMTSY = PC0KW00.PC0KWTSY; /* ===> total styles*/
  PC0KM002.PC0KMFNC = "MAINTENANCE"; /* ===> map function*/

  if (PC0KW01.XGPCD != "02")
    set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
    set PC0KM002.PC6CONNO skip, invisible; /* =>conformation number*/
    set PC0KM002.PC0KMLT1 skip, invisible; /* ===> size avail literal*/
    set PC0KM002.PC0KMLT2 skip, invisible; /* ===> confirm number literal*/
    set PC0KM002.PC0KMLT3 skip, invisible; /* ===> dev style literal*/
    set PC0KM002.PC0KMLT4 skip, invisible; /* ===> comp ring literal*/
    set PC0KM002.PC0KMNDL skip, invisible; /* ===> need date literal*/
  end

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "QQ"
     || PC0KW01.PC4ORTYP == "OR"
     || PC0KW01.PC4ORTYP == "S1"
     || PC0KW01.PC4ORTYP == "S4"
     || PC0KW01.PC4ORTYP == "OS")

      set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
      set PC0KM002.PC6CONNO skip, invisible; /* =>conformation number*/
      set PC0KM002.PC0KMLT1 skip, invisible; /* ===> size avail literal*/
      set PC0KM002.PC0KMLT2 skip, invisible; /* ===> confirm number literal*/
      set PC0KM002.PC0KMLT3 skip, invisible; /* ===> dev style literal*/
      set PC0KM002.PC0KMLT4 skip, invisible; /* ===> comp ring literal*/

      if (PC0KW01.PC4ORTYP == "FT"
       || PC0KW01.PC4ORTYP == "OR"
       || PC0KW01.PC4ORTYP == "S1"
       || PC0KW01.PC4ORTYP == "S4")
        set PC0KM002.PC0KMP15 skip, invisible; /* =>*/
      end

    end /* ===> Order Type check*/
  end /* ===> GPC = '02'*/

   /* **                                                        ***/
   /* ********************** End of PC0K421 ***********************/
end // end PC0K421

// Format the display data
Function PC0K422()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> PC0KM002 ( the header info)*/
   /* ------------------------------------------------------------*/

  PC0KS03(); /* ===> Load the header data*/

   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> PC0KM002 (not the header info)*/
   /* ------------------------------------------------------------*/

  PC0KM002.PC0KMSTY = PC0KW01.SY1STNBR; /* => Style*/
  PC0KM002.PC0KMCLR = PC0KW01.SY2CLRID; /* => Color*/
  PC0KM002.SY1STYNM = PC0KW01.SY1STYNM; /* => Style name*/
  PC0KM002.SY2CLRDS = PC0KW01.SY2CLRDS; /* => Color desc*/

  PC0KM002.PC0KMDIV = PC0KW01.YSMXDV; /* => Division*/
  PC0KM002.PC0KMDVD = PC0KW01.PC0KWDVD; /* =>Division description*/

  PC0KM002.YOHCD = PC0KW01.YOHCD; /* => Hold Code*/
  if (PC0KW01.YOHCD in YOHTBL.YOHCD)
    PC0KM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
  end

  PC0KM002.YACCD = PC0KW01.YACCD; /* => Hold Code*/
  if (PC0KW01.YACCD in YACTBL.YACCD)
    PC0KM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
  end

  PC0KM002.PC0KMCUS = PC0KW01.PC2CUXID; /* =>*/

  PC0KM002.KUCCOID = PC0KW01.KUCCOID; /* => Company ID*/
  PC0KM002.KUMSTRID = PC0KW01.KUMSTRID; /* => Store ID*/
  PC0KM002.XNXCD = PC0KW01.XNXCD; /* => Nike dept code*/
  PC0KM002.KUMSTRNM = PC0KW01.KUMSTRNM; /* => Store name*/

  PC0KM002.OP1CUPO = PC0KW01.OP1CUPO; /* =>*/

  PC0KM002.XCTCD = PC0KW01.XCTCD; /* =>  foreign country code*/
  if (PC0KW01.XCTCD in XCTTBL.XCTCD)
    PC0KM002.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
  end

  PC0KM002.OP1CUOID = PC0KW01.OP1CUOID; /* =>*/

  PC0KM002.OP1NORID = PC0KW01.OP1NORID; /* =>*/

  PC0KM002.PC6TORIG = PC0KW01.PC6TORIG; /* => Total Original Quantity*/
  PC0KM002.PC6TORDE = PC0KW01.PC6TORDE; /* => Total On Order Quantity*/
  PC0KM002.PC6TADD = PC0KW01.PC6TADD; /* => Total add Quantity*/
  PC0KM002.PC6TCNCL = PC0KW01.PC6TCNCL; /* => Total Cancel Quantity*/

  PC0KM002.PC6NILRF = PC0KW01.PC6NILRF; /* => Nil Reference Number*/

  PC0KM002.PC6CONNO = PC0KW01.PC6CONNO; /* =>*/

  if (PC0KW01.XGPCD == "02")

    PC0KM002.PC6SZAVL = PC0KW01.PC6SZAVL; /* => Size available ring*/
    PC0KM002.PC0KMNDT = PC0KW01.PC0KWDT8; /* => Customer Need Date*/
    PC0KM002.FB-LATE-BK-FL = PC0KW01.FB-LATE-BK-FL;

    if (PC0KW01.PC4ORTYP == "SS" /* => order type*/
     || PC0KW01.PC4ORTYP == "S3") /* => order type Side 1 salesman sample*/
      PC0KM002.PC0KMDEV = PC0KW01.SY2RSTNB; /* => development style*/
      PC0KM002.PC0KMDSC = PC0KW01.PC6CLVAR; /* => development color*/
    end

    if (PC0KW01.PC4ORTYP == "CR") /* => order type*/
      PC0KM002.PC0KMCMP = PC0KW01.SY2RSTNB; /* => component ring*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K422 ***********************/
end // end PC0K422

// Format the pass record data
Function PC0K423()
   /* ------------------------------------------------------------*/
   /* Hightlight the data  that was passed in.*/
   /* ------------------------------------------------------------*/

  set PC0KM002.XGPCD skip, bold;

   /* ------------------------------------------------------------*/
   /* If Unit of measure code, from pass <ecord*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XUMCD > " ")
    set PC0KM002.XUMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Package type code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XPGCD > " ")
    set PC0KM002.XPGCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Spec dIff code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2INSEG > " ")
    set PC0KM002.PC2INSEG skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Owner group,  from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XOWCD > " ") /* owner group code*/
    set PC0KM002.XOWCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Quality, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XQACD > " ") /* quality code*/
    set PC0KM002.XQACD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dimension, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDMCD > " ")
    set PC0KM002.XDMCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Division, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YSMXDV > " ")
    set PC0KM002.YSMXDV skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Customer XREF, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC2CUXID > " ")
    set PC0KM002.PC2CUXID skip, bold;
  end

   /* ------------------------------------------------------------*/
    /* If Estimated time of Shipment, from pass record*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6ETSDT > 0)
    set PC0KM002.PC0KMETS skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Dist method, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XDSCD > " "
   && PC0KW03.XDSCD != "*")
    set PC0KM002.XDSCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Trans mode, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.YMTCD > " ")
    set PC0KM002.YMTCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Warehouse, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.XWHCD > " ")
    set PC0KM002.XWHCD skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Plan, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6PLAN > 0)
    set PC0KM002.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If item status, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.PC6PLAN > 0)
    set PC0KM002.PC6PLAN skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Color code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY2CLRID > " ")
    set PC0KM002.SY2CLRID skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If Style code, from pass record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW03.SY1STNBR > " ")
    set PC0KM002.SY1STNBR skip, bold;
  end

   /* ------------------------------------------------------------*/
   /* If P.O. Number, always valued, from pass record*/
   /* ------------------------------------------------------------*/

  set PC0KM002.PC3PONBR skip, bold;

   /* ------------------------------------------------------------*/
   /* Protect the field customer need date from being updated*/
   /* for xgp code other '02'*/
   /* ------------------------------------------------------------*/
  if (PC0KM002.XGPCD != "02")
    set PC0KM002.PC0KMNDT skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* Protect the field customer need date from being updated*/
   /* for xgp code other '02'*/
   /* ------------------------------------------------------------*/
  if (PC0KM002.XGPCD == "02"
   && PC0KW01.XDSCD == "1")
    set PC0KM002.PC0KMNDT skip, noHighLight;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K423 ***********************/
end // end PC0K423

// Format all data protected
Function PC0K424()
   /* ------------------------------------------------------------*/
   /* set maintenance map protected with Inquiry look and feel*/
   /* ------------------------------------------------------------*/

  PC0KM002.PC0KMFNC = "INQUIRY"; /* ===> map function*/

  set PC0KM002.CATOAP cursor; /* =>*/

  set PC0KM002.YACCD skip, invisible; /* => Audit Code*/
  set PC0KM002.PC0KMAUD skip, invisible; /* => Audit Code*/
  set PC0KM002.YOHCD skip; /* => Hold Code*/
  set PC0KM002.PC6SZAVL skip; /* => Size Available*/
  set PC0KM002.PC0KMCUS skip; /* => Cust. Xref*/
  set PC0KM002.OP1CUOID skip; /* => Cust Order ID*/
  set PC0KM002.XCTCD skip; /* =>*/
  set PC0KM002.OP1NORID skip; /* =>*/
  set PC0KM002.OP1CUPO skip; /* =>*/
  set PC0KM002.PC6CONNO skip; /* =>*/

  set PC0KM002.OP1CUOID skip; /* =>*/
  set PC0KM002.PC6NILRF skip; /* =>*/
  set PC0KM002.PC0KMNDT skip; /* =>*/

  set PC0KM002.PC0KMP15 skip, invisible; /* =>*/

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "QQ"
     || PC0KW01.PC4ORTYP == "OR"
     || PC0KW01.PC4ORTYP == "OS")

      set PC0KM002.PC6SZAVL skip, invisible; /* => Size Available*/
      set PC0KM002.PC6CONNO skip, invisible; /* =>*/

    end
    set PC0KM002.FB-LATE-BK-FL skip;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K424 ***********************/
end // end PC0K424

// perform pop-up window routine
Function PC0K425()

   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (PC0KM002.YACCD == "?" /* ===> if any '?'*/
   || PC0KM002.YOHCD == "?") /* ===> if any '?'*/

    /* ------------------------------------------------------------*/
            /* Audit Comment Table Window*/
    /* ------------------------------------------------------------*/

    if (PC0KM002.YACCD == "?") /* if ? in Audit comment field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " AUDIT COMMENT TABLE    "; /* heading*/
      XX0XW02.XGPCD = PC0KW01.XGPCD;

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYAC01(); /* perform Audit comment  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KM002.YACCD = YACTBL.YACCD[XX0XWPIX]; /* move code*/
        PC0KM002.YACDESC = YACTBL.YACDESC[XX0XWPIX]; /* move code*/
      else
        PC0KM002.YACCD = PC0KW01.YACCD; /* ===> reset map field*/
        if (PC0KM002.YACCD in YACTBL.YACCD)
          PC0KM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
        end
      end
    end

    /* ------------------------------------------------------------*/
            /* Hold Code Table Window*/
    /* ------------------------------------------------------------*/

    if (PC0KM002.YOHCD == "?") /* if ? in Hold code field*/
      XPXX001(); /* =========> perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = " HOLD CODE TABLE    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYOH01(); /* perform Hold code  window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the data       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        PC0KM002.YOHCD = YOHTBL.YOHCD[XX0XWPIX]; /* move code*/
        PC0KM002.YOHSDESC = YOHTBL.YOHSDESC[XX0XWPIX]; /* move code*/
      else
        PC0KM002.YOHCD = PC0KW01.YOHCD; /* ===> reset map field*/
        if (PC0KM002.YOHCD in YOHTBL.YOHCD)
          PC0KM002.YOHSDESC = YOHTBL.YOHSDESC[sysVar.arrayIndex];
        end
      end
    end

    converseLib.clearScreen();
     /* ===> restore the map*/

     /* MOVE 84 TO EZEMNO;*/

     /* EZEFLO;*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K425 ***********************/
end // end PC0K425

// -->Check Attention Identifier
Function PC0K430()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6  /* no special instruction for sap po*/
   || converseVar.eventKey is pf9  /* no size adding for sap po*/
   || converseVar.eventKey is pf13 /* no product adding for sap po*/
   || converseVar.eventKey is pf14 /* no overwritten address for sap po*/
   || converseVar.eventKey is pf15) /* no cancellation for sap po*/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01" /* VRAMAC*/
     && COMMAREA.CACLVL[8] != "Y")
      converseLib.validationFailed(576);
      exit stack;
    end
  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PC0KW00.PC0KWSWR == "Y") /* Request for data*/
      set PC0KW01 empty; /* m002 display storage*/
    end

    converseLib.clearScreen();
     /* ===>clears input on map*/

    PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.CATOAP > " " /* FAST PATH was requested*/
   || PC0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;
      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

      XSPCS01(); /* Exit to another application*/
      /* ===>*/
      /* ===>if exit failed, reset and return to map*/
      /* ===>*/

      COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
      PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      set PC0KM002.CATOAP cursor, bold; /* Highlight*/
      PC0KM002.XGPCD = COMMAREA.XGPCD; /* GPC code*/
      PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/

    else

      PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If exit to the Master Menu, or other application*/
   /* was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3  /* PF1 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf21) /* or PF21 was pressed*/

    /* ------------------------------------------------------------*/
     /* if PF3 was pressed, return to display from application*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf3) /* Selection map requested*/

      if (COMMAREA.CAFROMAP == "PC0I"
       || COMMAREA.CAFROMAP == "PC05")
        COMMAREA.CATOAP = PC0KW02.CAFROMAP;
      else
        COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      end

    end

    if (converseVar.eventKey is pf4 /* PF4  was pressed*/
     || converseVar.eventKey is pf5 /* PF13 was pressed*/
     || converseVar.eventKey is pf21) /* PF17 was pressed*/

      set PCWREC empty;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PC0E"; /* Application find code*/
      PC0K431(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PC0L"; /* Application find code*/
      PC0K431(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PC0M"; /* Application find code*/
      PC0K431(); /* ===> load pass record*/
    end

    if (converseVar.eventKey is pf21) /* PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* Application find code*/
    end

    PC0KW00.CAFROMAP = COMMAREA.CAFROMAP;

    XSPCS01(); /* Exit to another application*/
    /* ===>*/
    /* ===>if exit failed, reset and return to map*/
    /* ===>*/

    COMMAREA.CAFROMAP = PC0KW00.CAFROMAP;
    PCWREC.CAUSERA = PC0KW03.CAUSERA; /* ===> reset user area*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    set PC0KM002.CATOAP cursor, bold; /* Highlight*/
    PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER    was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6  was not pressed*/
   && converseVar.eventKey not pf10  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* transfer on a item with an invalid status*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* PF6  S.I. Key*/

    if (PC0KW01.PC6STAT == "OP")

      /* ======= Next Sentence ==========>*/

    else

         /* MOVE 'PC0K430' TO PC0KW00.XXXPRCNM ; Module ident*/
         /* MOVE 223 TO EZEMNO         ; Indicate invalid attn key*/
         /* EZEFLO                      ; Exit to display map*/

    end

  end

  if (converseVar.eventKey is pf14) /* PF14 Addr Ovrd Key*/

    if (PC0KW01.PC6STAT == "OP")

      /* ======= Next Sentence ==========>*/

    else

       /* MOVE 'PC0K430' TO PC0KW00.XXXPRCNM ; Module identification*/
        /* MOVE 242 TO EZEMNO      ; cannot transfer with curr status*/
        /* EZEFLO                      ; Exit to display map*/

    end

  end

  if (converseVar.eventKey is pf15) /* and PF15 was pressed*/

    if (PC0KW01.PC6STAT == "CL" /* ===> status*/
     || PC0KW01.PC6STAT == "NC" /* ===> status*/
     || PC0KW01.PC6STAT == "CX" /* ===> status*/
     || PC0KW00.PC0KWSWP == "Y") /* ===> protect switch*/

      PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to display map*/

    end

    if (PC0KW01.XGPCD == "02") /* ===>*/
      if (PC0KW01.PC4ORTYP == "FT" /* ===>*/
       || PC0KW01.PC4ORTYP == "OR" /* ===>*/
       || PC0KW01.PC4ORTYP == "S1" /* ===>*/
       || PC0KW01.PC4ORTYP == "S4") /* ===>*/

        PC0KW00.XXXPRCNM = "PC0K430"; /* Module identification*/
        converseLib.validationFailed(4); /* Indicate invalid attention key*/
        exit stack; /* Exit to display map*/

      end
    end

  end /* ===> PF15 pressed*/

   /* **                                                        ***/
   /* ********************** End of PC0K430 ***********************/
end // end PC0K430

// load pass rec with select data
Function PC0K431()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  set PCWREC empty;

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;

  if (COMMAREA.CATOAP != "PC0M")
    PCWREC.PC3POIDT = PC0KW01.PC3POIDT;
  end

   /* **                                                        ***/
   /* ********************** End of PC0K431 ***********************/
end // end PC0K431

// -->Reset highlighted fields
Function PC0K440()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6STAT == "CL" /* ===> status*/
   || PC0KW01.PC6STAT == "NC" /* ===> status*/
   || PC0KW01.PC6STAT == "CX" /* ===> status*/
   || PC0KW00.PC0KWSWP == "Y") /* ===> protect switch*/

    /* ======== Next Sentence ========>*/

  else

    set PC0KM002.YACCD initialAttributes; /* Audit Comment code*/
    set PC0KM002.YOHCD initialAttributes; /* Hold Code*/
    set PC0KM002.OP1CUOID initialAttributes; /* Customer Order ID*/
    set PC0KM002.OP1NORID initialAttributes; /* Nike Order ID*/
    set PC0KM002.OP1CUPO initialAttributes; /* Customer PO*/
    set PC0KM002.PC6NILRF initialAttributes; /* NIL reference number*/
    set PC0KM002.PC0KMNDT initialAttributes; /* NIL reference number*/

    if (PC0KW01.XGPCD != "03") /* ===>*/
      set PC0KM002.PC6SZAVL initialAttributes; /* size available*/
      set PC0KM002.PC6CONNO initialAttributes; /* Conformation number*/
    end /* ===> GPC=02*/

  end /* ===> status check*/

  set PC0KM002.PC0KM-LATE-BK-FL-LIT initialAttributes;
  set PC0KM002.FB-LATE-BK-FL initialAttributes;

  set PC0KM002.CATOAP initialAttributes; /* TO application*/
  set PC0KM002.CAITEM initialAttributes; /* Application data*/

   /* **                                                        ***/
   /* ********************** End of PC0K440 ***********************/
end // end PC0K440

// -->Verify The Entered Data
Function PC0K450()
   /* ------------------------------------------------------------*/
   /* If a -911 SQL code occurred in the "Obtain the Data*/
   /* section, do and ezeflo to try to "Obtain The Data" again.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KW911 == "Y" /* ===> -911 SQL*/
   && PC0KW00.PC0KWSWR == "Y") /* ===> occurred in "Obtain The Data"*/
    exit stack; /* ===> exit application to*/
  end

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.CAITEM > " ") /* Application data was entered*/

    PC0KW00.XXXPRCNM = "PC0K450"; /* Module identification*/
    set PC0KM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.validationMsgNum == 0) /* NO Errors were found*/

    if (PC0KM002.XGPCD == "02")
      if (PC0KM002.FB-LATE-BK-FL != PC0KW01.FB-LATE-BK-FL)

        if (PC0KM002.FB-LATE-BK-FL == "Y"
         || PC0KM002.FB-LATE-BK-FL == "N")
          PC0KW01.FB-LATE-BK-FL = PC0KM002.FB-LATE-BK-FL;
          PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
          PC0KW00.PC0KWUPF = "N";
                                   /* ===> reset update confirmation flag*/

        else
          PC0KW00.XXXPRCNM = "PC0K450"; /* Module identification*/
          set PC0KM002.FB-LATE-BK-FL cursor, bold;
          converseLib.validationFailed(42); /* Indicate missing or invalid*/

        end
      end
    end

    if (PC0KM002.OP1CUPO != PC0KW01.OP1CUPO) /* ===> Cust P.O. NBR*/
      PC0KW01.OP1CUPO = PC0KM002.OP1CUPO; /* ===> Cust P.O. NBR*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
    end

    if (PC0KM002.PC6NILRF != PC0KW01.PC6NILRF) /* ===> NIL fer Number*/
      PC0KW01.PC6NILRF = PC0KM002.PC6NILRF;
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
    end

    if (PC0KM002.PC6SZAVL != PC0KW01.PC6SZAVL)
      PC0KW01.PC6SZAVL = PC0KM002.PC6SZAVL;
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
    end

    if (PC0KM002.XGPCD == "02"
     && PC0KW01.XDSCD == "1")
      set PC0KM002.PC0KMNDT skip, noHighLight;
    end

    if (PC0KM002.XGPCD != "02")
      set PC0KM002.PC0KMNDT skip, invisible;
    end

    /* ------------------------------------------------------------*/
    /* set up date (mmddyy) for processing date validation*/
    /* ------------------------------------------------------------*/

    if (PC0KM002.XGPCD == "02"
     && PC0KM002.XDSCD != "1"
     && PC0KM002.PC0KMNDT != " ")
      set TA2REC empty; /* Clear working record*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
      TA2REC.TA2GRTYP = "A"; /* ===>  move date type to record*/

      TA2REC.TA2GRGA = PC0KM002.PC0KMNDT; /* => MMDDYY format*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

      if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

        PC0KW04.OP1CUNDT = TA2REC.TA2GRGGN;

      else

          /* ------------------------------------------------------------*/
          /* If not found, indicate  invalid.*/
          /* ------------------------------------------------------------*/

        PC0KW00.XXXPRCNM = "PC0K450"; /* Module identification*/
        set PC0KM002.PC0KMNDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(38); /* Indicate missing or invalid*/

      end
    end

    if (PC0KW01.OP1CUNDT != PC0KW04.OP1CUNDT)
      PC0KW01.OP1CUNDT = PC0KW04.OP1CUNDT;
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===>*/
                                  /* reset update confirmation flag*/
    end

    if (PC0KM002.YOHCD != PC0KW01.YOHCD)
      PC0K452();
    end
    /* ------------------------------------------------------------*/
     /* If any errors were found, exit to display the map.*/
     /* if data was modified then verify audit code*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      exit stack; /* Exit to display map*/
    end

    if (PC0KW00.PC0KWMOD == "Y" /* ===> Modified data flag*/
     || PC0KM002.YACCD != PC0KW01.YACCD)

      if (PC0KM002.YACCD == " "
       && PC0KW01.XGPCD == "01") /* ==> Promo GPC*/
        PC0KW01.YACCD = " ";
      else

        if (PC0KM002.YACCD == " "
         && PC0KW01.XGPCD == "07") /* ==> Posters gpc*/
          PC0KW01.YACCD = " ";
        else

          PC0K453(); /* ===> verify audit comment*/

        end /* ===> GPC  = '01' By-pass check*/

      end /* ===> GPC  = '07' By-pass check*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K450 ***********************/
end // end PC0K450

// Verify Hold Code
Function PC0K452()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.YOHCD in YOHTBL.YOHCD /* Code in table*/
   && YOHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0KW01.YOHCD = PC0KM002.YOHCD;
    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K452"; /* Module identification*/
    set PC0KM002.YOHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K452 ***********************/
end // end PC0K452

// Verify Audit Code
Function PC0K453()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0KM002.YACCD in YACTBL.YACCD /* Code in table*/
   && YACTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    if (PC0KM002.YACCD != PC0KW01.YACCD) /* Code change*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update conformation flag*/
      PC0KW01.YACCD = PC0KM002.YACCD;
      PC0KM001.YACCD = PC0KM002.YACCD;
      PC0KM001.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
      PC0KM002.YACDESC = YACTBL.YACDESC[sysVar.arrayIndex];
    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KM001.YACDESC = " ";
    PC0KM002.YACDESC = " ";

    PC0KW00.XXXPRCNM = "PC0K453"; /* Module identification*/
    set PC0KM002.YACCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(78); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K453 ***********************/
end // end PC0K453

// -->Process Valid Input Request
Function PC0K460()
   /* ------------------------------------------------------------*/
   /* if ENTER, PF6, PF10, or PF 14 pressed,*/
    /* process the modified data to the update record*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* Selection map requested*/
   || converseVar.eventKey is pf6   /* Selection map requested*/
   || converseVar.eventKey is pf10  /* Selection map requested*/
   || converseVar.eventKey is pf14) /* Selection map requested*/

    if (converseVar.eventKey is pf10) /* ===> Right map requested*/
      PC0KW00.PC0KWSWM = "1"; /* ===>set request for right map*/
      return; /* Return to previous process*/
    end

    if (PC0KW00.PC0KWMOD == "Y")

      if (converseVar.eventKey is enter /* Selection map requested*/
       || converseVar.eventKey is pf6   /* Selection map requested*/
       || converseVar.eventKey is pf14) /* Selection map requested*/

        PC0K800(); /* ===> do common data base update*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* if PF6 was pressed,*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* Selection map requested*/

    COMMAREA.CATOAP = "PC0I";
    PC0K461(); /* =====> move pass data*/
    PC0K462(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if PF14 was pressed*/
       /* Set up the pass record with the current map indicator*/
       /* and related pass data*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf14) /* Selection map requested*/

    COMMAREA.CATOAP = "PC05";
    PC0K461(); /* =====> move pass data to pass record*/
    PC0K462(); /* =====> set up save fields for return*/
    COMMAREA.CAUSERA = PCWREC.CAUSERA;
    PC0KW00.PC0KWXIT = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if enter was pressed*/
       /* Set up for the next style or transfer to the from*/
       /* from application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ===> next style requested*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY)

      if (PC0KW00.PC0KWSWP == "Y" /* ===> protect switch is set*/
       || PC0KW00.PC0KWMOD == "N") /* ===> protect switch is set*/

        if (COMMAREA.CAFROMAP == "PC0I" /* ===> get the saved from appl.*/
         || COMMAREA.CAFROMAP == "PC05") /* ===>saved in user level area*/

          COMMAREA.CATOAP = PC0KW02.CAFROMAP;

        else /* ===> use commare from appl.*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        end

        PC0K461(); /* ===> move pass data to pass record*/

        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        PC0KW00.PC0KWXIT = "Y"; /* ===> exit application flag*/

      else
        PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY - 1;
        PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
        PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
        PC0KW00.PC0KWSWP = "Y"; /* ===>Protect switch map 1&2*/
        PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
        PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
        PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
        PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/
        PC0KW00.PC0KWSWM = 1; /* ===> request for map 1*/

        PC0K469(); /* ===> set-up last item to display update message*/

      end

    else /* ===> set up for next style*/

      PC0KS99(); /* ===> re-initialize indexes and flags*/

      PC0KW00.PC0KWSWM = 1; /* ===> request for map 1*/
    end

  end

  if (converseVar.eventKey is pf15) /* ===> unprotect FOBs requested*/

    PC0K900(); /* ===> do common data base cancel*/

    PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY + 1;

    if (PC0KW00.PC0KWCSY > PC0KW00.PC0KWTSY)

      if (PC0KW00.PC0KWSWP == "Y" /* ===> protect switch is set*/
       || PC0KW00.PC0KWMOD == "N") /* ===> protect switch is set*/

        if (COMMAREA.CAFROMAP == "PC0I" /* ===> get the saved from appl.*/
         || COMMAREA.CAFROMAP == "PC05") /* ===>saved in user level area*/

          COMMAREA.CATOAP = PC0KW02.CAFROMAP;

        else /* ===> use commare from appl.*/
          COMMAREA.CATOAP = COMMAREA.CAFROMAP;
        end

        PC0K461(); /* ===> move pass data to pass record*/

        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        PC0KW00.PC0KWXIT = "Y"; /* ===> exit application flag*/

      else
        PC0KW00.PC0KWCSY = PC0KW00.PC0KWCSY - 1;
        PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
        PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
        PC0KW00.PC0KWSWP = "Y"; /* ===>Protect switch map 1&2*/
        PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
        PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
        PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
        PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/
        PC0KW00.PC0KWSWM = 1; /* ===> request for map 1*/

      end

    else /* ===> set up for next style*/

      PC0KS99(); /* ===> re-initialize indexes and flags*/

      PC0KW00.PC0KWSWM = 1; /* ===> request for map 1*/

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K460 ***********************/
end // end PC0K460

// load pass rec with select data
Function PC0K461()
   /* ------------------------------------------------------------*/
       /* Set the pass record*/
   /* ------------------------------------------------------------*/

  PCWREC.XGPCD = PC0KW01.XGPCD;
  PCWREC.PO-REG-CD = PC0KW01.PO-REG-CD;
  PCWREC.PC3PONBR = PC0KW01.PC3PONBR;
  PCWREC.FY1FCTYC = PC0KW01.FY1FCTYC;
  PCWREC.PCFSECD = PC0KW01.PCFSECD;
  PCWREC.SY1STNBR = PC0KW01.SY1STNBR;
  PCWREC.SY2CLRID = PC0KW01.SY2CLRID;
  PCWREC.PC4ORTYP = PC0KW01.PC4ORTYP;
  PCWREC.XDMCD = PC0KW01.XDMCD;
  PCWREC.XQACD = PC0KW01.XQACD;
  PCWREC.XOWCD = PC0KW01.XOWCD;
  PCWREC.PC2INSEG = PC0KW01.PC2INSEG;
  PCWREC.XPGCD = PC0KW01.XPGCD;
  PCWREC.XUMCD = PC0KW01.XUMCD;
  PCWREC.PC6ETSDT = PC0KW01.PC6ETSDT;
  PCWREC.YMTCD = PC0KW01.YMTCD;
  PCWREC.XWHCD = PC0KW01.XWHCD;
  PCWREC.PC2CUXID = PC0KW01.PC2CUXID;
  PCWREC.XSECD = PC0KW01.XSECD;
  PCWREC.XDSCD = PC0KW01.XDSCD;
  PCWREC.PC6PLAN = PC0KW01.PC6PLAN;
  PCWREC.YSMXDV = PC0KW01.YSMXDV;
  PCWREC.PC6OETS = PC0KW01.PC6OETS;
  PCWREC.PC6RTADT = PC0KW01.PC6RTADT;

   /* **                                                        ***/
   /* ********************** End of PC0K461 ***********************/
end // end PC0K461

// save key data for return
Function PC0K462()

   /* ------------------------------------------------------------*/
       /* Set the pass record with the current map indicator*/
       /* and temp storage page, for return access*/
   /* ------------------------------------------------------------*/

  move PC0KW03 to PC0KW02 withV60Compat; /* ===> saved selected pass data*/
  PC0KW02.PC0KWSWM = PC0KW00.PC0KWSWM; /* ===> save map number*/
  PC0KW02.PC0KWIDX = PC0KW00.PC0KWCSY; /* ===> save style index*/
  PCWREC.PCWSYIDX = PC0KW00.PC0KWCSY; /* ===> pass style index*/
  PC0KW02.CAFROMAP = COMMAREA.CAFROMAP; /* ===> save from app*/

   /* ------------------------------------------------------------*/
   /* When transferring from your application to a lower level*/
   /* find the first empty CAFROMAP entry in the PCWREC array*/
   /* and move your application id to that field. Use the*/
   /* Pcwrec.Pcwuser(n) that corresponds to the cafromap*/
   /* array.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.CAFROMAP[1] == " ")

    PCWREC.PCWFNC[1] = "C"; /* From application id*/
    PCWREC.CAFROMAP[1] = "PC0K"; /* From application id*/
    PCWREC.PCWUSER1 = PC0KW02.PC0KWUSR;

  else
    if (PCWREC.CAFROMAP[2] == " ")

      PCWREC.PCWFNC[2] = "C"; /* From application id*/
      PCWREC.CAFROMAP[2] = "PC0K"; /* From application id*/
      PCWREC.PCWUSER2 = PC0KW02.PC0KWUSR;
    else
      if (PCWREC.CAFROMAP[3] == " ")
        PCWREC.PCWFNC[3] = "C"; /* From application id*/
        PCWREC.CAFROMAP[3] = "PC0K"; /* From application id*/
        PCWREC.PCWUSER3 = PC0KW02.PC0KWUSR;

      else
        if (PCWREC.CAFROMAP[4] == " ")
          PCWREC.PCWFNC[4] = "C"; /* From application id*/
          PCWREC.CAFROMAP[4] = "PC0K"; /* From application id*/
          PCWREC.PCWUSER4 = PC0KW02.PC0KWUSR;

        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of PC0K462 ***********************/
end // end PC0K462

// set-up updated item to display
Function PC0K469()
   /* ------------------------------------------------------------*/
    /* This module is performed when the last Maintence item*/
       /* has been processed. Consequently, the original item*/
       /* which was maintenanced may have been cancelled due to*/
       /* a merge or destination type process.*/
    /* In these two cases, the PC0KW03 will be loaded with the*/
       /* Item Seq. NBR of the ("Merge to" or "Created New") item*/
   /* Note:*/
    /* The PC0KW03 record is a saved copy of the PCWREC that*/
       /* was passed to this application.  It holds the array of*/
       /* item sequence numbers requested for maintenance.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB == PC0KW04.PC6ITMNB) /* ===> seq. number*/
    /* ---------------------------------> cancel due to merge*/
    /* ---------------------------------> therefore "Merge" occured*/

    /* ---> load the seq nbr from the save merge to row (PC0KW06)*/
    PC0KW03.PC6ITMNB[PC0KWCSY] = PC0KW06.PC6ITMNB; /* ===> seq. number*/
    PCWREC.PC6ITMNB[PC0KWCSY] = PC0KW06.PC6ITMNB; /* ===> seq. number*/

  end

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB) /* ===> seq. number*/
    /* -------------------> cancel due to destination change,mode*/
    /* -------------------> therefore "destination change" occured*/

    /* ---> load the seq nbr from the display W.S.  row (PC0KW01)*/
    PC0KW03.PC6ITMNB[PC0KWCSY] = PC0KW01.PC6ITMNB; /* ===> seq. number*/
    PCWREC.PC6ITMNB[PC0KWCSY] = PC0KW01.PC6ITMNB; /* ===> seq. number*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K469 ***********************/
end // end PC0K469

// Load/verify FOB W.S. area
Function PC0K505()
   /* ------------------------------------------------------------*/
    /* Load the simulated map with changes that were made*/
    /* made to the display map.*/

    /* This simulation map will be the work area for cascading*/
    /* FOB prices and the source for data base updates.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXM = 1; /* ===>init. line index*/

  while (PC0KW00.PC0KWIXM <= 16 /* Until size screen*/
   && PC0KM001.SY4IDDSC[PC0KWIXM] > " ") /* ===> and more sizes available*/

    /* ------------------------------------------------------------*/
      /* Verify that FOB price request has QTYs*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMFOB[PC0KWIXM] > 0  /* ===> FOB price*/
     && PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> on-order*/
     && PC0KM001.PC0KMNQT[PC0KWIXM] == 0) /* ===> new qty request*/

      if (PC0KW00.PC0KWPF9 == "Y"
       && PC0KM001.PC0KMFOB[PC0KWIXM] == PC0KW01.PC0KMFOB[PC0KWIXM])

        /* ============ Next Sentence ================>*/

      else /* ====> error*/

        if (PC0KM001.PC0KMFOB[PC0KWIXM] != PC0KWPRC[PC0KWIXM])
          set PC0KM001.PC0KMFOB[PC0KWIXM] cursor, bold;
          converseLib.validationFailed(211); /* ===> FOB price changed and no QTY*/
                                   /* requested*/
          PC0KW00.XXXPRCNM = "PC0K505";
        end /* ===> FOB price check*/

      end /* ===> FOB price check*/

    end /* ===> FOB price check*/

    /* ------------------------------------------------------------*/
      /* Case 1:   FOB Price change*/
               /* -   Request for Size portion of the map to be*/
                   /* formatted next pass load saved starting index*/
               /* -   Load saved starting Size index*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMFOB[PC0KWIXM] > 0
     && PC0KM001.PC0KMFOB[PC0KWIXM] != PC0KW01.PC0KWPRC[PC0KWIXM]
     && converseVar.validationMsgNum != 211) /* ===> FOB price error*/

      if (PC0KW00.PC0KWPF9 == "Y"          
       && PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> on-order*/
       && PC0KM001.PC0KMNQT[PC0KWIXM] == 0) /* ===> new qty request*/

        /* ============ Next Sentence ================>*/

      else /* ====> load simulated FOB map*/

        PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KM001.PC0KMFOB[PC0KWIXM];
        if (converseVar.eventKey is enter)
          PC0KW00.PC0KWSWS = "Y"; /* ===> set format sizes*/
          PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ;
                                   /* ===> reset size index*/
        end

      end

    end /* ===> case 1*/

    /* ------------------------------------------------------------*/
      /* Case 2:   FOB Price reset to factory*/
               /* -   Load a 0 to the FOB W.S. area*/
               /* -   Request for Size portion of the map to be*/
                   /* formatted next pass load saved starting index*/
               /* -   Load saved starting Size index*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMFOB[PC0KWIXM] == 0
     && PC0KM001.PC0KMASK[PC0KWIXM] == "*")

      if (PC0KW00.PC0KWPF9 == "Y")

        PC0K507(); /* ===> get valid size qty and load Sim.*/
                                   /* FOB map*/

      else /* ====> load simulate FOB map record*/

        PC0KW01.PC0KWPRC[PC0KWIXM] = 0;
        if (converseVar.eventKey is enter)
          PC0KW00.PC0KWSWS = "Y"; /* ===> set format sizes*/
          PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ;
                                   /* ===> reset size index*/
        end

      end

    end /* ===> case 2*/

    /* ------------------------------------------------------------*/
      /* Case 3:  New Quantity added to non-valued size/QTY.*/
               /* -   Request for Size portion of the map to be*/
                   /* formatted next pass load saved starting index*/
               /* -   Load saved starting Size index*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> on-order*/
     && PC0KM001.PC0KMNQT[PC0KWIXM] > 0) /* ===> new qty request*/

      if (converseVar.eventKey is enter)
        if (PC0KM001.PC0KMFOB[PC0KWIXM] > 0)
          PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KM001.PC0KMFOB[PC0KWIXM];
        end
        PC0KW00.PC0KWSWS = "Y"; /* ===> set format sizes*/
        PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ; /* ===> reset size inde*/
      end

    end

    PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment line index*/

  end /* ===> case 3*/

   /* ------------------------------------------------------------*/
   /* If errors detected reset format switch and size index*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 211) /* ===> FOB price changed and no QTY*/
                                   /* requested*/
    PC0KW00.PC0KWSWS = "N"; /* ===> reset format sizes*/
    PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ; /* ===> reset size index*/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K505 ***********************/
end // end PC0K505

// Get valued Size/QTY  (map)
Function PC0K507()
   /* ------------------------------------------------------------*/
   /* Get the next valued size QTY from the display record*/
   /* by using the current index as the starting index for the*/
   /* search.*/
   /* If found, the Simulated FOB map record will be loaded.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXM; /* ===>Init starting index*/

  while (PC0KW00.PC0KWIXT <= 16) /* ===> Until all sizes read*/

    if (PC0KM001.PC0KMNQT[PC0KWIXT] > 0) /* ===> and valued size/QTY found*/
      PC0KW01.PC0KWPRC[PC0KWIXT] = 0; /* ===> load reset value*/
      if (converseVar.eventKey is enter)
        PC0KW00.PC0KWSWS = "Y"; /* ===> set format sizes*/
        PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ; /* ===> reset size index*/
      end
      return; /* ===> Return with loaded Simulated FOB*/
                                   /* map record*/
    end

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K507 ***********************/
end // end PC0K507

// Get valued size/desc (record)
Function PC0K510()
   /* ------------------------------------------------------------*/
   /* Get the next valued size desc. from the display record*/
   /* ------------------------------------------------------------*/
  PC0KW00.PC0KWIXR = PC0KW00.PC0KWIXR + 1; /* ===>Increment rec size index*/

  while (PC0KW00.PC0KWIXR <= 40 /* ===> Until all sizes read*/
   && PC0KW01.SY4IDDSC[PC0KWIXR] == " ") /* ===> and valued size found*/

    PC0KW00.PC0KWIXR = PC0KW00.PC0KWIXR + 1;
                                   /* ===>Increment rec size index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K510 ***********************/
end // end PC0K510

// process/save data for scroll
Function PC0K515()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/

   /* Note:*/
      /* This driver module is similar to the Verify the Quantity*/
   /* modified module PC0K520 and is performed when scroll sizes*/
   /* is requested.  If PC0K520 changes than more than*/
   /* this module will have to be changed accordingly.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] == PC0KW01.SY4IDDSC[PC0KWIXR])

    if (PC0KM001.PC0KMOQT[PC0KWIXM] != PC0KM001.PC0KMNQT[PC0KWIXM]
     || PC0KM001.PC0KMNQT[PC0KWIXM] != PC0KW01.PC0KWNQT[PC0KWIXR])

      if (PC0KM001.PC0KMNQT[PC0KWIXM] != PC0KW01.PC0KWNQT[PC0KWIXR])

        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
        PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirmation flag*/

        /* ------------------------------------------------*/
         /* Load the FOB templete with QTYs if No Qtys*/
         /* existed when first created.*/
        /* ------------------------------------------------*/

        if (PC0KM001.PC0KMNQT[PC0KWIXM] > 0  /* ===> new QTYs*/
         && PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> On-order bfr maint.*/
         && PC0KW01.PC0KWVRQ[PC0KWIXR] == 0) /* ===> QTYs on Templete*/

          PC0KW01.PC0KWVRQ[PC0KWIXR] = PC0KM001.PC0KMNQT[PC0KWIXM];

          if (PC0KW01.PC0KWPRC[PC0KWIXM] == FY4REC.FY4FOBPR[PC0KWIXR]
           && PC0KW00.PC0KWPFF == "Y") /* ===> Factory FOB's found flag*/

            if (PC0KW00.PC0KWCFL == "N") /* ===> reset cascade FOB flag*/
              PC0KW01.PC0KWPRC[PC0KWIXM] = 0;
            else
              PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWBPR;
            end

          end
        end

        /* ------------------------------------------------*/
         /* Load the previous price and flag to the record*/
         /* if cancelled and then re-added (this session)*/
        /* ------------------------------------------------*/

        if (PC0KW01.PC0KWNQT[PC0KWIXR] == 0 /* ===> changed prev session*/
         && PC0KM001.PC0KMOQT[PC0KWIXM] > 0 /* ===> changed this session*/
         && PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ===> on-order befor maint.*/

          PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW05.FY4FOBPR[PC0KWIXR];

          if (PC0KW05.PC7FOBFL[PC0KWIXR] == "Y")
            PC0KW01.PC7FOBFL[PC0KWIXR] = "Y";
          end

        end

        /* ------------------------------------------------*/
         /* Load New QTY request to the display record.*/
        /* ------------------------------------------------*/

        PC0KW01.PC0KWNQT[PC0KWIXR] = PC0KM001.PC0KMNQT[PC0KWIXM];

        if (PC0KM001.PC0KMNQT[PC0KWIXM] == 0) /* ===>reset fields*/
          PC0KW01.FY4FOBPR[PC0KWIXR] = 0;
          PC0KW01.PC0KWPRC[PC0KWIXM] = 0;
          PC0KW01.PC7FOBFL[PC0KWIXR] = "N";
        end

      end /* ===> new QTY field changed*/

      /* ------------------------------------------------*/
       /* Check for cancel QTYs error*/
      /* ===>  cancel QTYs request (item/size)*/
      /* ------------------------------------------------*/

      PC0KWDIF = PC0KW01.PC0KWNQT[PC0KWIXR] - PC0KW01.PC7ORDEQ[PC0KWIXR];

      if (PC0KW00.PC0KWDIF < 0)

        PC0KW00.PC0KWDIF = PC0KW00.PC0KWDIF * -1; /* ===> Reverse sign*/

        if (PC0KW00.PC0KWDIF > PC5REC.PC5BALC[PC0KWIXR])

          converseLib.validationFailed(233); /* ===> QTYs reduction invalid*/
          PC0KW00.XXXPRCNM = "PC0K515";
          set PC0KM001.PC0KMNQT[PC0KWIXM] cursor, bold;

        end /* ===> reduction error check*/

      end /* ===> cancel QTYs requested*/

    end /* ===> On-order not = to New request*/

    /* ------------------------------------------------------------*/
             /* If new quantity field is valued (ie. > 0)*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMNQT[PC0KWIXM] > 0)

      if (PC0KW01.PC7FOBFL[PC0KWIXR] == "N")

        if (PC0KW00.PC0KWPFF == "Y") /* ===> Factory FOB's found flag*/
          if (PC0KW01.PC0KWPRC[PC0KWIXM] != FY4REC.FY4FOBPR[PC0KWIXR])
            PC0KW00.PC0KWCFL = "N"; /* ==> reset cascade FOB flag*/
          end
        end

        if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
          if (PC0KW01.PC0KWPRC[PC0KWIXM] != PC0KW01.PC0KWVRD[PC0KWIXR])
            PC0KW00.PC0KWCFL = "N"; /* ==> reset cascade FOB flag*/
          end
        end

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != FY4REC.FY4FOBPR[PC0KWIXR]
         || PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> qtys added to new*/
         || PC0KW00.PC0KWCFL == "Y")         /* ===> cascade FOB price flag*/

          if (PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> qtys added to new*/
           && PC0KW01.PC0KWPRC[PC0KWIXM] == FY4REC.FY4FOBPR[PC0KWIXR]
           && PC0KW00.PC0KWPFF == "Y")         /* ===> Factory FOB's found flag*/
            /* ====> Next Sentence ======>*/
          else

            if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
              PC0K521(); /* ===> perform FOB cascade routine*/
            else
              PC0K525(); /* ===> perform FOB cascade routine*/
            end

          end

          if (PC0KW01.PC0KWPRC[PC0KWIXM] != FY4REC.FY4FOBPR[PC0KWIXR])
            PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
            PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
            PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirm flag*/
          end
        end

      else /* ===> FOB Overide flag = 'y'*/

        /* ------------------------------------------------------------*/
                 /* If new quantity field is valued (ie. > 0)*/
                  /* and*/
                      /* if override flag  set*/
        /* ------------------------------------------------------------*/

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != PC0KW01.FY4FOBPR[PC0KWIXR])
          PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB price flag*/
        end

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != PC0KW01.FY4FOBPR[PC0KWIXR]
         || PC0KW00.PC0KWCFL == "Y") /* ===> cascade FOB price flag*/

          if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
            PC0K521(); /* ===> perform FOB cascade routine*/
          else
            PC0K525(); /* ===> perform FOB cascade routine*/
          end

          PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
          PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
          PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirm flag*/
        end

      end /* ===> override flag check*/

    end /* ===> new-QTY  > 0*/

    PC0K510(); /* ===> get next record size desc*/

    if (PC0KW00.PC0KWIXM < 16) /* ===> map size index*/
      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment size index*/
    end

    return;

  end /* ===> map and record size desc match*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] != PC0KW01.SY4IDDSC[PC0KWIXR])

    if (PC0KW01.PC0KWNQT[PC0KWIXR] > 0)

      if (PC0KW00.PC0KWCFL == "Y") /* ===> cascade FOB price flag*/
        PC0K521(); /* ===> perform FOB cascade routine*/
      else
        PC0K525(); /* ===> perform FOB cascade routine*/
      end

    end

    PC0K510(); /* ===> get next record size desc*/

    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K515 ***********************/
end // end PC0K515

// accumulate QTYs for all sizes
Function PC0K520()
   /* ------------------------------------------------------------*/
      /* This module uses a two file/record match. The display*/
    /* record is the primary file and the map size array*/
    /* is the secondary file.  This algorithm is possible*/
    /* since they are sorted by size description in accending*/
    /* order.*/
      /* The display record is read until a size description*/
    /* is found and then it is compared against the map size*/
    /* description field and processed accordingly.*/

   /* Note:*/
      /* This driver module is similar to a Process Scroll*/
   /* Request module PC0K515, which is performed when a scroll*/
   /* sizes is requested.  If PC0K520 changes, more than likely,*/
   /* the PC0K515 module will have to be changed accordingly.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] == PC0KW01.SY4IDDSC[PC0KWIXR])

    if (PC0KM001.PC0KMOQT[PC0KWIXM] != PC0KM001.PC0KMNQT[PC0KWIXM]
     || PC0KM001.PC0KMNQT[PC0KWIXM] != PC0KW01.PC0KWNQT[PC0KWIXR])

      if (PC0KM001.PC0KMNQT[PC0KWIXM] != PC0KW01.PC0KWNQT[PC0KWIXR])

        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
        PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirmation flag*/

        /* ------------------------------------------------*/
         /* Load the FOB templete with QTYs if No Qtys*/
         /* existed when first created.*/
        /* ------------------------------------------------*/

        if (PC0KM001.PC0KMNQT[PC0KWIXM] > 0  /* ===> new QTYs*/
         && PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> On-order bfr maint.*/
         && PC0KW01.PC0KWVRQ[PC0KWIXR] == 0) /* ===> QTYs on Templete*/

          PC0KW01.PC0KWVRQ[PC0KWIXR] = PC0KM001.PC0KMNQT[PC0KWIXM];

          if (PC0KW01.PC0KWPRC[PC0KWIXM] == PCOREC.FY4FOBPR[PC0KWIXR]
           && PC0KW00.PC0KWPFF == "Y") /* ===> Factory FOB's found flag*/

            if (PC0KW00.PC0KWCFL == "N") /* ===> reset cascade FOB flag*/
              PC0KW01.PC0KWPRC[PC0KWIXM] = 0;
            else
              PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWBPR;
            end

          end
        end

        /* ------------------------------------------------*/
         /* Load the previous price and flag to the record*/
         /* if cancelled and then re-added (this session)*/
        /* ------------------------------------------------*/

        if (PC0KW01.PC0KWNQT[PC0KWIXR] == 0 /* ===> changed prev session*/
         && PC0KM001.PC0KMOQT[PC0KWIXM] > 0 /* ===> changed this session*/
         && PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ===> on-order befor maint.*/

          PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW05.FY4FOBPR[PC0KWIXR];
          if (PC0KW05.PC7FOBFL[PC0KWIXR] == "Y")
            PC0KW01.PC7FOBFL[PC0KWIXR] = "Y";
            PC0KW00.PC0KWSWS = "Y"; /* ===> format sizes*/
            PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ; /* ===> reset size index*/
          end

        end

        /* ------------------------------------------------*/
         /* Load New QTY request to the display record.*/
        /* ------------------------------------------------*/

        PC0KW01.PC0KWNQT[PC0KWIXR] = PC0KM001.PC0KMNQT[PC0KWIXM];

        if (PC0KM001.PC0KMNQT[PC0KWIXM] == 0) /* ===>reset fields*/
          PC0KW01.FY4FOBPR[PC0KWIXR] = 0;
          PC0KW01.PC0KWPRC[PC0KWIXM] = 0;
          PC0KW01.PC7FOBFL[PC0KWIXR] = "N";
          PC0KW00.PC0KWSWS = "Y"; /* ===> format sizes*/
          PC0KW00.PC0KWIXS = PC0KW00.PC0KWIXZ;
                                   /* ===> reset size index*/
        end

      end /* ===> New QTYs request changed*/

      /* ------------------------------------------------*/
       /* Accummulate the total requested QTYs.*/
      /* ------------------------------------------------*/

      PC0KW00.PC0KWQTY = PC0KW00.PC0KWQTY + PC0KW01.PC0KWNQT[PC0KWIXR];
      PC0KWDIF = PC0KW01.PC0KWNQT[PC0KWIXR] - PC0KW01.PC7ORDEQ[PC0KWIXR];

      if (PC0KW00.PC0KWDIF > 0)
        PC0KW00.PC0KWADD = PC0KW00.PC0KWADD + PC0KW00.PC0KWDIF;
      else

        PC0KW00.PC0KWDIF = PC0KW00.PC0KWDIF * -1; /* ===> Reverse sign*/
        PC0KW00.PC0KWCNL = PC0KW00.PC0KWCNL + PC0KW00.PC0KWDIF;

        /* ------------------------------------------------*/
         /* Check for cancel QTYs error (Balance to Ship)*/
        /* ===>  cancel QTYs request (item/size)*/
        /* ------------------------------------------------*/

        if (PC0KW00.PC0KWDIF > PC5REC.PC5BALC[PC0KWIXR])

          if (VPOITM05.PC6STAT != "TN")
            converseLib.validationFailed(233); /* ===> QTYs reduction invalid*/
            PC0KW00.XXXPRCNM = "PC0K520";
            set PC0KM001.PC0KMNQT[PC0KWIXM] cursor, bold;
          end

        end /* ===> reduction error check*/

      end /* ===> diff check*/

    else /* ===> no change in qty*/
      PC0KW00.PC0KWQTY = PC0KW00.PC0KWQTY + PC0KW01.PC7ORDEQ[PC0KWIXR];
    end

    /* ------------------------------------------------------------*/
             /* If new quantity field is valued (ie. > 0)*/
              /* and*/
                  /* if override flag not set*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMNQT[PC0KWIXM] > 0)

      if (PC0KW01.PC7FOBFL[PC0KWIXR] == "N")

        if (PC0KW00.PC0KWPFF == "Y") /* ===> Factory FOB's found flag*/
          if (PC0KW01.PC0KWPRC[PC0KWIXM] != PCOREC.FY4FOBPR[PC0KWIXR])
            PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB flag*/
          end
        end

        if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
          if (PC0KW01.PC0KWPRC[PC0KWIXM] != 0)
            PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB flag*/
          end
        end

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != PCOREC.FY4FOBPR[PC0KWIXR]
         || PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> qtys added to new*/
         || PC0KW00.PC0KWCFL == "Y")         /* ===> cascade FOB price flag*/

          if (PC0KM001.PC0KMOQT[PC0KWIXM] == 0 /* ===> qtys added to new*/
           && PC0KW01.PC0KWPRC[PC0KWIXM] == PCOREC.FY4FOBPR[PC0KWIXR]
           && PC0KW00.PC0KWPFF == "Y")         /* ===> Factory FOB's found flag*/
            /* ====> Next Sentence ======>*/
          else

            if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
              PC0K521(); /* ===> perform FOB cascade routine*/
            else
              PC0K525(); /* ===> perform FOB cascade routine*/
            end

          end

          if (PC0KW01.PC0KWPRC[PC0KWIXM] != PCOREC.FY4FOBPR[PC0KWIXR])
            PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
            PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
            PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirm flag*/
          end
        end

      else /* ===> FOB Overide flag = 'y'*/

        /* ------------------------------------------------------------*/
                 /* If new quantity field is valued (ie. > 0)*/
                  /* and*/
                      /* if override flag  set*/
        /* ------------------------------------------------------------*/

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != PC0KW01.FY4FOBPR[PC0KWIXR])
          PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB price flag*/
        end

        if (PC0KW01.PC0KWPRC[PC0KWIXM] != PC0KW01.FY4FOBPR[PC0KWIXR]
         || PC0KW00.PC0KWCFL == "Y") /* ===> cascade FOB price flag*/

          if (PC0KW00.PC0KWPFF == "N") /* ===> Factory FOB's found flag*/
            PC0K521(); /* ===> perform FOB cascade routine*/
          else
            PC0K525(); /* ===> perform FOB cascade routine*/
          end

          PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
          PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirm flag*/
          PC0KW00.PC0KWCLF = "N"; /* ===> reset cancel confirm flag*/
        end

      end /* ===> override flag check*/

    end /* ===> new-QTY  > 0*/

    /* ------------------------------------------------------------*/
          /* Accumulate total value.*/
    /* ------------------------------------------------------------*/

    PC0K529(); /* ===> calculate total value (SUM)*/

    PC0K510(); /* ===> get next record size desc*/

    if (PC0KW00.PC0KWIXM < 16) /* ===> map size index*/
      PC0KW00.PC0KWIXM = PC0KW00.PC0KWIXM + 1; /* ===>Increment size index*/
    end

    return;

  end /* ===> map and record size desc match*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc > rec-size-desc*/
       /* or  If map-size-desc < rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] != PC0KW01.SY4IDDSC[PC0KWIXR])

    if (PC0KW01.PC7ORDEQ[PC0KWIXR] != PC0KW01.PC0KWNQT[PC0KWIXR])

      PC0KW00.PC0KWQTY = PC0KW00.PC0KWQTY + PC0KW01.PC0KWNQT[PC0KWIXR];
      PC0KWDIF = PC0KW01.PC0KWNQT[PC0KWIXR] - PC0KW01.PC7ORDEQ[PC0KWIXR];

      if (PC0KW00.PC0KWDIF > 0)
        PC0KW00.PC0KWADD = PC0KW00.PC0KWADD + PC0KW00.PC0KWDIF;
      else
        PC0KW00.PC0KWCNL = PC0KW00.PC0KWCNL - PC0KW00.PC0KWDIF;
      end

    else
      PC0KW00.PC0KWQTY = PC0KW00.PC0KWQTY + PC0KW01.PC7ORDEQ[PC0KWIXR];
    end

    if (PC0KW01.PC0KWNQT[PC0KWIXR] > 0)

      if (PC0KW00.PC0KWCFL == "Y") /* ===> cascade FOB price flag*/
        PC0K521(); /* ===> perform FOB cascade routine*/
      else
        PC0K525(); /* ===> perform FOB cascade routine*/
      end

      PC0K529(); /* ===> calculate total value (SUM)*/

    end

    PC0K510(); /* ===> get next record size desc*/

    return;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K520 ***********************/
end // end PC0K520

// cascade FOB's(No Factory data)
Function PC0K521()
   /* ------------------------------------------------------------*/
      /* This module cascades FOB Prices until there is a change*/
      /* in FOB price*/
            /* step 1: save FOB price and flag ----> (First Pass)*/
                    /* - before-change*/
                    /* - after-change*/
            /* step 2: load FOB price and flag ---->(Second pass)*/
                    /* - if current FOB/Flag = saved before-chg*/
                      /* load saved after-chg*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] == PC0KW01.SY4IDDSC[PC0KWIXR])

    /* ------------------------------------------------------------*/
           /* STEP 1: save FOB price and flag ----> (First Pass)*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWCFL == "N") /* => if cascade FOB flag = 'n'*/

      if (PC0KM001.PC0KMOQT[PC0KWIXM] > 0 /* ===> on order before maint.*/
       || PC0KW01.PC0KWPRC[PC0KWIXM] > 0) /* ===> price added w/ new QTY*/

        if (PC0KW01.PC0KWPRC[PC0KWIXM] > 0) /* ===> price requested*/
          PC0K522(); /* ===>save valid FOB Price*/
        else /* ===> get next available price*/
          PC0K524(); /* ===>get and save valid FOB Price (reset)*/
          PC0KW00.PC0KWSWS = "Y"; /* ===> request to format sizes*/
        end

      else

        PC0K524(); /* ===>get and save valid FOB Price*/
        PC0KW00.PC0KWSWS = "Y"; /* ===> request to format sizes*/

      end

      /* ===> set cascade FOB Flag done in PC0K522 and PC0K524*/

      return;

    end /* ===> map-size-desc = rec-size-desc*/

    /* ------------------------------------------------------------*/
           /* STEP 2: load FOB price and flag ---->(Second pass)*/

          /* Load the cascading prices if no Price break*/
                                      /* or a new QTY to size added*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.FY4FOBPR[PC0KWIXR] == PC0KW00.PC0KWOPR /* ===> cur = saved*/
     && PC0KW01.PC7FOBFL[PC0KWIXR] == PC0KW00.PC0KWOFL)
                                   /* ===> cur = saved*/

      PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWNPR; /* new price*/
      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

    else

      if (PC0KW01.PC7ORDEQ[PC0KWIXR] == 0 /* ===>  added to new size*/
       && PC0KW01.PC0KWNQT[PC0KWIXM] > 0) /* ===> added to new size*/

        PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* =>new price*/
        PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* =>new flag*/
        PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWNPR; /* =>new*/

      else /* ===> end cascade FOB prices*/

        if (PC0KW01.PC0KWVRQ[PC0KWIXR] > 0 /* ==> QTYs exist on templete*/
         || PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ==> QTYs exist on item*/
          PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB Flag*/
        end

      end /* ===> load cascade FOB Price to new Size/QTY*/

    end /* ===> load cascade FOB Price to*/
                                   /* existing Size/QTY*/

  end /* ===> map-size-desc = record-size-desc*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc ^= rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] != PC0KW01.SY4IDDSC[PC0KWIXR]
   && PC0KW01.PC0KWNQT[PC0KWIXR] > 0
   && PC0KW00.PC0KWCFL == "Y") /* ===> reset cascade FOB Flag*/

    if (PC0KW01.FY4FOBPR[PC0KWIXR] == PC0KW00.PC0KWOPR /* ===> cur = saved*/
     && PC0KW01.PC7FOBFL[PC0KWIXR] == PC0KW00.PC0KWOFL)
                                   /* ===> cur = saved*/

      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

    else

      if (PC0KW01.PC0KWVRQ[PC0KWIXR] > 0 /* ==> QTYs exist on templete*/
       || PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ==> QTYs exist on item*/
        PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB Flag*/
      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K521 ***********************/
end // end PC0K521

// save price/flag for cascade
Function PC0K522()
   /* ------------------------------------------------------------*/
   /* QTYs existed before maintenance so save old and new Price*/
   /* for future cascade price load*/
    /* also laod the FOB Templete to update all asso items later.*/
   /* ------------------------------------------------------------*/

  PC0K523(); /* ===> load FOB override templete*/

  PC0KW00.PC0KWOPR = PC0KW01.FY4FOBPR[PC0KWIXR]; /* ===> row*/

   /* MOVE PC0KW01.PC0KWVRF(PC0KWIXR) TO PC0KW00.PC0KWOFL;old flag*/
  PC0KW00.PC0KWOFL = PC0KW01.PC7FOBFL[PC0KWIXR]; /* old flag*/

  if (PC0KW01.PC0KWPRC[PC0KWIXM] > 0)

    PC0KW01.PC7FOBFL[PC0KWIXR] = "Y"; /* ===> load display record*/
    PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW01.PC0KWPRC[PC0KWIXM];

  else

    PC0KW01.PC7FOBFL[PC0KWIXR] = "N"; /* ===> load display record*/
    PC0KW01.FY4FOBPR[PC0KWIXR] = 0;

  end

  PC0KW00.PC0KWNPR = PC0KW01.PC0KWPRC[PC0KWIXM]; /* save new price*/
  PC0KW00.PC0KWNFL = PC0KW01.PC7FOBFL[PC0KWIXR]; /* new  flag*/

  PC0KW00.PC0KWCFL = "Y"; /* ===> set cascade FOB Flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K522 ***********************/
end // end PC0K522

// re-calc FOB override templete
Function PC0K523()
   /* ------------------------------------------------------------*/
      /* This module load the FOB override templete so all*/
      /* associated items can be updated in process group PC0K640*/
       /* or PC0K740.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWOPR = PC0KW01.PC0KWVRD[PC0KWIXR]; /* ===> for templete*/

  PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXR; /* ===> load temp index*/

  PC0KW00.PC0KWFL1 = "N"; /* ===> temp flag  (exit loop)*/

  while (PC0KW00.PC0KWIXT <= 40
   && PC0KW00.PC0KWFL1 == "N") /* ===> temp flag*/

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " " /* ===> valid size value*/
     && PC0KW01.PC0KWVRQ[PC0KWIXT] > 0)  /* ===> templete size has QTYs*/

      if (PC0KW01.PC0KWVRD[PC0KWIXT] == PC0KW00.PC0KWOPR /* ===>old price*/
       || PC0KW01.PC0KWVRD[PC0KWIXT] == 0)               /* ===>no price*/

        if (PC0KM001.PC0KMFOB[PC0KWIXM] == 0)
          PC0KW01.PC0KWVRD[PC0KWIXT] = 0;
          PC0KW01.PC0KWVRF[PC0KWIXT] = "N";
        else
          if (PC0KM001.PC0KMFOB[PC0KWIXM] == VFCTY003.FY1DFPRC)
            PC0KW01.PC0KWVRD[PC0KWIXT] = PC0KM001.PC0KMFOB[PC0KWIXM];
            PC0KW01.PC0KWVRF[PC0KWIXT] = "N";
          else
            PC0KW01.PC0KWVRD[PC0KWIXT] = PC0KM001.PC0KMFOB[PC0KWIXM];
            PC0KW01.PC0KWVRF[PC0KWIXT] = "Y";
          end
        end

      else

        PC0KW00.PC0KWFL1 = "Y"; /* ===> temp flag  (exit loop)*/

      end

    end /* ===> valid size value*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> incr. temp index*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K523 ***********************/
end // end PC0K523

// get & save price/flag cascade
Function PC0K524()
   /* ------------------------------------------------------------*/
      /* This module cascades FOB Prices until there is a change*/
      /* in FOB price*/
       /* - First look at override templete for valued price*/
         /* record index*/
         /* - if none*/
           /* - next look for previous valid price*/
             /* - if none*/
               /* - no FOB price available*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* - Check override templete for current valued price*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC0KWVRD[PC0KWIXR] > 0) /* ===> use FOB templete price*/

    PC0KW00.PC0KWOPR = PC0KW01.PC0KWVRD[PC0KWIXR]; /* ===> price*/
    PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWOPR;
    PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWOPR;
    PC0KW00.PC0KWNPR = PC0KW00.PC0KWOPR;

    PC0KW00.PC0KWOFL = PC0KW01.PC0KWVRF[PC0KWIXR]; /* ===> flag*/
    PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWOFL;
    PC0KW00.PC0KWNFL = PC0KW00.PC0KWOFL;

    return; /* ===> return with loaded FOB price*/

  end /* ===> FOB price change found*/

   /* ------------------------------------------------------------*/
    /* - Check for next valued price (backward)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXR - 1; /* ===> set temp array index*/

  while (PC0KW00.PC0KWIXT >= 1)

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " ")

      if (PC0KW01.PC0KWVRD[PC0KWIXT] > 0) /* => use FOB templete price*/

        PC0KW00.PC0KWOPR = PC0KW01.PC0KWVRD[PC0KWIXT]; /* ===> price*/
        PC0KW01.PC0KWVRD[PC0KWIXR] = PC0KW00.PC0KWOPR; /* ===> load templete*/
        PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWOPR;
        PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWOPR;
        PC0KW00.PC0KWNPR = PC0KW00.PC0KWOPR;

        PC0KW00.PC0KWOFL = PC0KW01.PC0KWVRF[PC0KWIXT]; /* ===> flag*/
        PC0KW01.PC0KWVRF[PC0KWIXR] = PC0KW00.PC0KWOFL; /* ===> load templete*/
        PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWOFL;
        PC0KW00.PC0KWNFL = PC0KW00.PC0KWOFL;

        return; /* ===> return with loaded FOB price*/

      end /* ===> FOB price change found*/

    end /* ===> size description found*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT - 1;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K524 ***********************/
end // end PC0K524

// cascade FOB's   (Factory data)
Function PC0K525()
   /* ------------------------------------------------------------*/
      /* This module cascades FOB Prices until there is a change*/
      /* in Factory FOB price.*/

                 /* (Based on Factory FOB size/price ranges)*/

            /* Step 1: save FOB price and flag ----> (First Pass)*/
                    /* - before-change (for price break)*/
                    /* - after-change  (for cascade loading)*/

            /* Step 2: load FOB price and flag ---->(Second pass)*/
                    /* - if current FOB/Flag = saved before-chg*/
                      /* load saved after-change*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc = rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] == PC0KW01.SY4IDDSC[PC0KWIXR])

    /* ------------------------------------------------------------*/
           /* STEP 1: save FOB price and flag ----> (First Pass)*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWCFL == "N") /* => if cascade FOB flag = 'n'*/

      if (PC0KW01.PC0KWPRC[PC0KWIXM] == PCOREC.FY4FOBPR[PC0KWIXR]
       && PC0KW01.PC0KWVRD[PC0KWIXR] == 0
       && PC0KM001.PC0KMASK[PC0KWIXM] == " ")
        return; /* ===>*/
      end

      if (PC0KM001.PC0KMOQT[PC0KWIXM] > 0 /* ===> on order before maint.*/
       || PC0KW01.PC0KWPRC[PC0KWIXM] > 0) /* ===> New QTY or FOB reset*/

        PC0K526(); /* ===>save valid FOB Price*/

        PC0KW00.PC0KWCFL = "Y"; /* ===> set cascade FOB Flag*/

      else

        PC0K528(); /* ===>get and save valid FOB Price*/

      end

      return;

    end

    /* ------------------------------------------------------------*/
           /* STEP 2: load FOB price and flag ---->(Second pass)*/

          /* Load the cascading prices if no Price break*/
                                      /* or a new QTY to size added*/
    /* ------------------------------------------------------------*/

    if (PCOREC.FY4FOBPR[PC0KWIXR] == PC0KW00.PC0KWOPR /* ===> cur =  fcty*/
     && PC0KW01.PC0KWPRC[PC0KWIXM] == PC0KW00.PC0KWBPR)

      PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWNPR; /* ===>*/
      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

    else /* ===> end cascade FOB prices*/

      if (PC0KW01.PC0KWVRQ[PC0KWIXR] > 0 /* ==> QTYs exist on templete*/
       || PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ==> QTYs exist on item*/
        PC0KW00.PC0KWCFL = "N"; /* ===> cascade FOB Flag*/
      end

    end /* ===> load cascade FOB Price to*/
                                   /* Size/QTY*/

  end /* ===> map-size-desc = record-size-desc*/

   /* ------------------------------------------------------------*/
           /* If map-size-desc ^= rec-size-desc*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.SY4IDDSC[PC0KWIXM] != PC0KW01.SY4IDDSC[PC0KWIXR]
   && PC0KW01.PC0KWNQT[PC0KWIXR] > 0
   && PC0KW00.PC0KWCFL == "Y") /* ===> reset cascade FOB Flag*/

    if (PCOREC.FY4FOBPR[PC0KWIXR] == PC0KW00.PC0KWOPR) /* ===> cur = saved*/

      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

      PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWNPR; /* ===>new price*/
      PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWNFL; /* ===>new flag*/

    else

      if (PC0KW01.PC0KWVRQ[PC0KWIXR] > 0 /* ==> QTYs exist on templete*/
       || PC0KW01.PC7ORDEQ[PC0KWIXR] > 0) /* ==> QTYs exist on item*/
        PC0KW00.PC0KWCFL = "N"; /* ===> reset cascade FOB Flag*/
      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K525 ***********************/
end // end PC0K525

// save price/flag for cascade
Function PC0K526()
   /* ------------------------------------------------------------*/
   /* Since QTYs existed before maintenance, save old and new*/
   /* price and flag for future cascade price loads.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWOPR = PCOREC.FY4FOBPR[PC0KWIXR]; /* save old price*/

  if (PC0KW01.PC0KWPRC[PC0KWIXM] == 0) /* ===> FOB W.S. Map*/
    PC0KW01.PC0KWPRC[PC0KWIXM] = PCOREC.FY4FOBPR[PC0KWIXR];
  end

  PC0K527(); /* ===> re-calc the FOB templete for later processing*/

  PC0KW00.PC0KWBPR = PC0KW01.FY4FOBPR[PC0KWIXR]; /* price*/

  if (PC0KW01.PC0KWPRC[PC0KWIXM] != PCOREC.FY4FOBPR[PC0KWIXR])

    PC0KW01.PC7FOBFL[PC0KWIXR] = "Y";
    PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW01.PC0KWPRC[PC0KWIXM];

    PC0KW00.PC0KWNPR = PC0KW01.PC0KWPRC[PC0KWIXM]; /* save new price*/
    PC0KW00.PC0KWNFL = PC0KW01.PC7FOBFL[PC0KWIXR]; /* new  flag*/

  else

    PC0KW00.PC0KWNPR = PCOREC.FY4FOBPR[PC0KWIXR]; /* save new price*/
    PC0KW01.FY4FOBPR[PC0KWIXR] = PCOREC.FY4FOBPR[PC0KWIXR];
    PC0KW01.PC7FOBFL[PC0KWIXR] = "N";

  end

   /* **                                                        ***/
   /* ********************** End of PC0K526 ***********************/
end // end PC0K526

// re-calc FOB override templete
Function PC0K527()
   /* ------------------------------------------------------------*/
      /* This module loads the FOB override templete so all*/
      /* associated items can be updated in process group PC0KF40*/
       /* or PC0KA40.*/

      /* Load the temp index with the current index from the*/
      /* previous process and proceed to update the templete*/
      /* from the loaded starting index.*/

      /* It first examines for a Factory FOB price range break*/
      /* then checks for a FOB override templete break.*/

      /* if none of these breaks occur when processing the array*/
      /* the override price is loaded to the FOB ovrd templete.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWBPR = PC0KW01.PC0KWVRD[PC0KWIXR]; /* templete price*/

  PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXR; /* ===> load temp index*/

  PC0KW00.PC0KWFL1 = "N"; /* ===> temp flag  (exit loop)*/

  while (PC0KW00.PC0KWIXT <= 40
   && PC0KW00.PC0KWFL1 == "N") /* ===> temp flag*/

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " " /* ===> valid size value*/
     && PC0KW01.PC0KWVRQ[PC0KWIXT] > 0)  /* ===> templete size has QTYs*/

      if (PCOREC.FY4FOBPR[PC0KWIXT] == PC0KW00.PC0KWOPR) /* ===>old price*/

        if (PC0KW01.PC0KWVRD[PC0KWIXT] == PC0KW00.PC0KWBPR
         /* ===>break price*/
         || PC0KW01.PC0KWVRD[PC0KWIXT] == 0) /* ===>no price*/
           /* OR PC0KW01.PC0KWVRD(PC0KWIXT) EQ pcoREC.FY4FOBPR(PC0KWIXT);*/

          /* ------------------------------------------------------------*/
           /* The price loaded is the one that was entered from the map*/
           /* the PC0KWIXM index is stationary through this process*/
          /* ------------------------------------------------------------*/

          if (PC0KW01.PC0KWPRC[PC0KWIXM] == PCOREC.FY4FOBPR[PC0KWIXT])
            PC0KW01.PC0KWVRD[PC0KWIXT] = PCOREC.FY4FOBPR[PC0KWIXT];
            PC0KW01.PC0KWVRF[PC0KWIXT] = "N"; /* ===> flag*/
          else /* ===> FOB templete price break*/
            PC0KW01.PC0KWVRD[PC0KWIXT] = PC0KW01.PC0KWPRC[PC0KWIXM];
            PC0KW01.PC0KWVRF[PC0KWIXT] = "Y"; /* ===> flag*/
          end

        else /* ===> FOB templete price break*/

          PC0KW00.PC0KWFL1 = "Y"; /* ===> temp flag  (force exit loop)*/

        end

      else /* ===> Factory FOB price range break*/

        PC0KW00.PC0KWFL1 = "Y"; /* ===> temp flag  (exit loop)*/

      end

    end /* ===> valid size value*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> incr. temp index*/

  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K527 ***********************/
end // end PC0K527

// get & save price/flag cascade
Function PC0K528()
   /* ------------------------------------------------------------*/
   /* Since QTYs did not exist before maintenance, save/load the*/
   /* Factory FOB price and flag for future cascade price loads.*/
   /* unless the FOB override templete contains an override price*/
   /* which is associated with all like items.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWOPR = PC0KW01.PC0KWVRD[PC0KWIXR];
  PC0KW00.PC0KWOFL = PC0KW01.PC0KWVRF[PC0KWIXR];

  PC0KW01.PC0KWPRC[PC0KWIXM] = PC0KW00.PC0KWOPR;
  PC0KW01.FY4FOBPR[PC0KWIXR] = PC0KW00.PC0KWOPR;
  PC0KW00.PC0KWNPR = PC0KW00.PC0KWOPR;

  PC0KW01.PC7FOBFL[PC0KWIXR] = PC0KW00.PC0KWOFL;
  PC0KW00.PC0KWNFL = PC0KW00.PC0KWOFL;

   /* **                                                        ***/
   /* ********************** End of PC0K528 ***********************/
end // end PC0K528

// calc. QTYs values all sizes
Function PC0K529()
   /* ------------------------------------------------------------*/
   /* Calculate the total value for all sizes*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC0KWNQT[PC0KWIXR] > 0)

    if (PC0KW01.PC7FOBFL[PC0KWIXR] == "Y") /* ===> FOB override flag*/
      PC0KW00.FY4FOBPR = PC0KW01.FY4FOBPR[PC0KWIXR];
    else /* ===> move data from FOB Table*/
      PC0KW00.FY4FOBPR = PCOREC.FY4FOBPR[PC0KWIXR];
    end

    PC0KW00.PC7ORDEQ = PC0KW01.PC0KWNQT[PC0KWIXR];

    PC0KW00.PC0KWVAL = PC0KW00.PC7ORDEQ * PC0KW00.FY4FOBPR;
    PC0KW01.PC0KWTVL = PC0KW01.PC0KWTVL + PC0KW00.PC0KWVAL;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K529 ***********************/
end // end PC0K529

// Verify Owner Group
Function PC0K530()
   /* ------------------------------------------------------------*/
       /* Verify Owner Group*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWOGV = "N"; /* '00' is always valid*/

  if (PC0KM001.PC0KMOW == "  ") /* If owner group is spaced out*/
    PC0KW00.XXXPRCNM = "PC0K530"; /* Module id*/
    set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
    converseLib.validationFailed(406); /* Owner group cannot be spaces-Enter '00' or ?*/
    return;
  end

  if (PC0KM001.PC0KMOW == "00") /* If owner group is '00'*/
    PC0KW00.PC0KWOGV = "Y"; /* '00' is always valid*/
    return;
  end

  if (PC0KM001.PC0KMWHS == "  ") /* If no warehouse*/
    PC0KW00.PC0KWWHS = "51"; /* Default whse for owner gp test*/
  else
    PC0KW00.PC0KWWHS = PC0KM001.PC0KMWHS;
  end

  if (PC0KW00.PC0KWWHS in XWHTBL.XWHCD /* Warehouse in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* If whse has owner grp flag*/
      PC0KW00.PC0KWOK1 = PC0KW00.PC0KWWHS; /* warehouse*/
      PC0KW00.PC0KWOK2 = PC0KM001.PC0KMOW; /* owner group*/
      if (PC0KW00.PC0KWOKY in XOWTBL.XOWKEY /* Owner grp in tbl*/
       && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
        PC0KW00.PC0KWOGV = "Y"; /* OG is valid*/
      else
        PC0KW00.XXXPRCNM = "PC0K530"; /* Module id*/
        set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
        converseLib.validationFailed(405); /* Owner grp entered not valid for whse*/
      end
    else
      PC0KW00.XXXPRCNM = "PC0K530"; /* Module id*/
      set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
      converseLib.validationFailed(404); /* This whse accepts only OG code '00'*/
    end
  else
    PC0KW00.XXXPRCNM = "PC0K530"; /* Module identification*/
    set PC0KM001.PC0KMOW cursor, bold; /* Highlight*/
    converseLib.validationFailed(59); /* Whse missing or invalid*/
  end

end // end PC0K530

// Verify Cust Xref
Function PC0K552()
   /* ------------------------------------------------------------*/
   /* Determine if the non-valued entered data is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMCUS == " ")
    if (PC0KM001.OP1CUOID > 0
     || PC0KM001.OP1NORID > 0)
      converseLib.validationFailed(443); /* ===> cant ENTER SO# W/O CUST XREF*/
      set PC0KM001.PC0KMCUS cursor, bold;
      PC0KW00.XXXPRCNM = "PC0K552"; /* Module ident*/
      return; /* ========> Return to previous process*/
    end
  end

  if (PC0KM001.PC0KMCUS == " ")
    if (PC0KM001.PC0KMCUS != PC0KW01.PC2CUXID)
      PC0KW01.PC2CUXID = " ";
      PC0KW01.OP1CUPO = " ";
      PC0KW01.OP1PARTN = " ";
      PC0KW01.OP1CUOID = 0;
      PC0KW01.OP1NORID = 0;
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
    end
    return;
  end /* ===> Cust EQ ' '*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* Row storage area*/

  VPRDCU03.XGPCD = PC0KM001.XGPCD; /* ===> GPC*/
  VPRDCU03.PC2CUXID = PC0KM001.PC0KMCUS; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* after doing additional processing.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* Normal return code*/
   && VPRDCU03.XXXSTAT == "A")      

    /* ------------------------------------------------------------*/
     /* for apparel, make sure division does not change*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.XGPCD == "03" /* ===> GPC*/
     && VPRDCU03.YSMXDV != PC0KW04.YSMXDV) /* ===> group div code*/
      converseLib.validationFailed(167); /* ===> cannot change divisions*/
      set PC0KM001.PC0KMCUS cursor, bold;
      PC0KW00.XXXPRCNM = "PC0K552"; /* Module ident*/
      return; /* ========> Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If the customer xref dataon the maintenance map has changed*/
     /* get new customer's data for P.O. item row. (store info)*/
    /* ------------------------------------------------------------*/

    if (PC0KM001.PC0KMCUS != PC0KW01.PC2CUXID)

      PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
      /* ----DONT MOVE ABOVE FIELD UNTIL SO# VERIFIED ALSO-------*/
      PC0KM002.OP1CUPO = OP1REC.OP1CUPO;
      PC0KW01.OP1CUPO = OP1REC.OP1CUPO;
      PC0KW01.YPCCD = VPRDCU03.YPCCD;
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

      if (VPRDCU03.KUCCOID != PC0KW01.KUCCOID   /* ===> company ID*/
       || VPRDCU03.KUMSTRID != PC0KW01.KUMSTRID /* ===> store ID*/
       || VPRDCU03.XNXCD != PC0KW01.XNXCD)      /* ===> nike dept code*/

        PC0KW01.KUCCOID = VPRDCU03.KUCCOID; /* ===>*/
        PC0KW01.KUMSTRID = VPRDCU03.KUMSTRID; /* ===>*/
        PC0KW01.XNXCD = VPRDCU03.XNXCD; /* ===>*/

        /*IF VPRDCU03.PC-PRDCU-APAO-FL EQ 'E';*/
        /*  PC0KS09();               /* ===> Get DEURO Store name*/
        /*ELSE;*/
        PC0KS07(); /* ===> Get Store name*/
        /*END;*/

        PC0KM002.KUCCOID = VPRDCU03.KUCCOID; /* ===>*/
        PC0KM002.KUMSTRID = VPRDCU03.KUMSTRID; /* ===>*/
        PC0KM002.KUMSTRNM = KUMREC.KUMSTRNM; /* ===>*/
        PC0KM002.XNXCD = VPRDCU03.XNXCD; /* ===>*/

      end /* ===> company/store/dept fields differ*/

    end /* ===> customer changed check*/

    if (PC0KW04.PC-SAP-PO-NBR == " ")
      /*IF VPRDCU03.PC-PRDCU-APAO-FL EQ 'E';*/
      /*  PC0K557();                 /* verify DEURO sales order #*/
      /*ELSE;*/
      if (PC0KM001.XGPCD == "03") /* ===> GPC*/
        PC0K558(); /* verify apparrel sales order #*/
      else
        PC0K556(); /* verify footwear sales order #*/
      end
      /*END;*/
    end

    return; /* ========> Return to previous process*/

  end /* ===> successful SQL = 0*/

   /* ------------------------------------------------------------*/
   /* If row found and not active , indicate invalid.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* Normal return code*/
   && VPRDCU03.XXXSTAT != "A")       /* ===> not active*/

    converseLib.clearScreen();
    
    set PC0KM001.PC0KMCUS cursor, bold;
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    PC0KW00.XXXPRCNM = "PC0K552"; /* Module identification*/
    converseLib.validationFailed(45); /* ===> missing or invalid*/

    return; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    converseLib.clearScreen();
    
    set PC0KM001.PC0KMCUS cursor, bold;
    PC0KW00.PC0KWSWF = "N"; /* Format the map switch*/

    PC0KW00.XXXPRCNM = "PC0K552"; /* Module identification*/
    converseLib.validationFailed(45); /* ===> missing invalid*/

    return; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  PC0KW00.XXXPRCNM = "PC0K552"; /* Module identification*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K552 ***********************/
end // end PC0K552

// Verify Trans Mode
Function PC0K554()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMMOD in YMTTBL.YMTCD /* Code in table*/
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PC0KW01.YMTCD = PC0KM001.PC0KMMOD;
    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K554"; /* Module identification*/
    set PC0KM001.PC0KMMOD cursor, bold; /* Highlight*/
    converseLib.validationFailed(61); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K554 ***********************/
end // end PC0K554

// Verify ETS Date
Function PC0K555()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATE*/

   /* 1) check if date was requested/required*/

   /* 2) Verify that the date entered is valid.*/
   /* ------------------------------------------------------------*/

  if (PC0KM001.PC0KMEST == "000000"
   || PC0KM001.PC0KMEST == " ")

    PC0KM001.PC0KMEST = " "; /* ===> ETS Date map display*/

    if (PC0KW01.XGPCD == "03")
      converseLib.validationFailed(38); /* ===> required/ invalid date*/
      PC0KW00.XXXPRCNM = "PC0K555"; /* Module identification*/
      set PC0KM001.PC0KMEST cursor, bold; /* ===> ETS Date map display*/
    else

      if (PC0KM001.PC0KMEST != PC0KW01.PC0KWDT1)
        PC0KW01.PC0KWDT1 = " "; /* ===> ETS Date map display*/
        PC0KW01.PC6ETSDT = 0; /* ===> ETS Date display record*/
        PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
        PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/
      end

    end

    return;

  end /* ===> ets date cleared check*/

   /* ------------------------------------------------------------*/
   /* set up date (mmddccyy) for processing date validation*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* ===>     move date type to record*/
                                   /* -->(mmddyy)*/

                                  /* MOVE PC0KW00.PC0KW1MM TO*/
                                   /* PC0KW00.PC0KWMM;/* ===> ETS Date*/
                                   /* Month display*/
                                  /* MOVE PC0KW00.PC0KW1DD TO*/
                                   /* PC0KW00.PC0KWDD;/* ===> ETS Date Day*/
                                   /* display*/
                                  /* MOVE PC0KW00.PC0KW1YY TO*/
                                   /* PC0KW00.PC0KWYY;/* ===> ETS Date Year*/
                                   /* display*/
   /* IF PC0KW00.PC0KW1YY GT 85;       /* ===> set up ETS Century*/
    /* MOVE 19 TO PC0KW00.PC0KWCC;*/
   /* ELSE;*/
    /* MOVE 20 TO PC0KW00.PC0KWCC;*/
   /* END;*/
                                  /* MOVE PC0KW00.TA2GRECN TO*/
                                   /* TA2REC.TA2GRECN;/* ===> move date*/
                                   /* -->(mmddccyy)*/

  TA2REC.TA2GRGA = PC0KM001.PC0KMEST; /* ===> move date in mmddy*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/

    PC0KW01.PC6ETSDT = TA2REC.TA2GRGGN; /* ===> save ETS Date*/
    PC0KW01.PC0KWDT1 = PC0KM001.PC0KMEST; /* ===> load display record*/

    if (PC0KW01.XGPCD == "02")

      if (PC0KW04.PC4ORTYP == "FT")

        if (PC0KW04.PC6ETALF == "Y") /* ===> ETAL default flag is set*/
          PC0KW01.PC6OETAL = 0; /* ===> reset override ETAL date*/
          PC0KW01.PC0KWDT3 = " "; /* ===> clear ETAL map display*/
          PC0KM001.PC0KMETO = " "; /* ===> clear ETAL map display*/
          VPOITM05.PC6ETALF = "N"; /* ===> reset ETAL default flag*/
        else
          VPOITM05.PC6ETALF = PC0KW04.PC6ETALF; /* ===> reset flag*/
        end /* ===> 'FT' processing*/

      else

        PC0KW01.PC0KWDT3 = " "; /* ===> clear ETAL map display*/
        PC0KM001.PC0KMETO = " "; /* ===> clear ETAL map display*/
        PC0KW01.PC6OETAL = 0; /* ===> clear ETAL Date display record*/

      end /* ===> 'FT' processing*/

    else /* end of GPC 02 processing*/
      if (PC0KW01.XGPCD == "03")
   /* ***************Y2K IN**********************/
        PC0KW00.PC0KWFDT = VGVar.currentGregorianDate;
        if (PC0KW00.PC0KWFDT > TA2REC.TA2GRGGN)
          converseLib.validationFailed(409);
          PC0KW00.XXXPRCNM = "PC0K555";
          set PC0KM001.PC0KMEST cursor, bold;
        end
   /* ***************Y2K OUT*********************/
      end
    end

    PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
    PC0KW00.PC0KWUPF = "N"; /* ===> reset update confirmation flag*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate  invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K555"; /* Module identification*/
    set PC0KM001.PC0KMEST cursor, bold; /* Highlight*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K555 ***********************/
end // end PC0K555

// VERIFY SALES ORDER NUMBER
Function PC0K556()
    /* ------------------------------------------------------------*/
     /* If sales order number not required do ezertn*/
    /* ------------------------------------------------------------*/

  if (PC0KW01.XGPCD == "02")
    if (PC0KW01.PC4ORTYP == "FT"
     || PC0KW01.PC4ORTYP == "S1"
     || PC0KW01.PC4ORTYP == "PS"
     || PC0KW01.PC4ORTYP == "QQ")
      if (VPOHDR02.PC3POIDT < 19920701
       && PC0KM001.OP1CUOID == 0
       && PC0KM001.OP1NORID == 0)
        return;
      /* ELSE;*/
     /* IF (PC0KW01.PC4ORTYP EQ 'PS' OR*/
     /* PC0KW01.PC2CUXID EQ 'WHS65' OR*/
      /* PC0KW01.PC2CUXID EQ 'WHS67' OR*/
       /* PC0KW01.PC2CUXID EQ 'WHS68')*/
      /* AND PC0KM001.OP1CUOID EQ 0*/
       /* AND PC0KM001.OP1NORID EQ 0;*/
          /* MOVE PC0KM001.OP1CUOID TO PC0KW01.OP1CUOID;*/
      /* MOVE PC0KM001.OP1NORID TO PC0KW01.OP1NORID;*/
       /* MOVE ' ' TO PC0KW01.OP1CUPO;*/
       /* MOVE 0 TO PC0KW01.OP1CUNDT;*/
        /* MOVE 'Y' TO PC0KW00.PC0KWMOD; /* ===>mod data fl*/
       /* EZERTN();*/
       /* END;*/
      end
    else
      return;
    end
  else
    return;
  end

    /* ------------------------------------------------------------*/
     /* IF BLANKING OUT SALES ORDER # WHEN CUST XREF ALSO BLANK:*/
    /* ------------------------------------------------------------*/

  if (PC0KM001.OP1CUOID == 0
   && PC0KM001.OP1NORID == 0
   && PC0KM001.PC0KMCUS == " ")
    PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
    PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
    PC0KW01.OP1NORID = PC0KM001.OP1NORID;
    PC0KW01.OP1CUPO = " ";
    PC0KW01.OP1CUNDT = 0;
    return;
  end

    /* ------------------------------------------------------------*/
     /* so # not required on these (but is allowed)*/
     /* BUT IF CUST XREF IS ENTERED SO# MUST ALSO BE ENTERED*/
    /* ------------------------------------------------------------*/

  if (PC0KM001.OP1CUOID == 0)
    if (PC0KW01.PC4ORTYP == "PS"
     || PC0KW01.PC4ORTYP == "QQ"
     || PC0KW01.PC2CUXID == "WHS65"
     || PC0KW01.PC2CUXID == "WHS67"
     || PC0KW01.PC2CUXID == "WHS68"
     || PC0KW01.PC2CUXID == "BEL30")
      return;
    else
      set PC0KM001.OP1CUOID cursor, bold;
      set PC0KM001.OP1NORID bold;
      PC0KW00.XXXPRCNM = "PC0K556";
      converseLib.validationFailed(70);
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KM001.OP1CUOID;
  OP1REC.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  OP1REC.OP1CUOID = PC0KM001.OP1CUOID;
  OP1REC.OP1NORID = PC0KM001.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    /**/
     /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
     /* ------------------------------------------------------------*/
    /**/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      /**/
      if (PC0KW01.PC2CUXID != " ")
        /**/
        if (VPRDCU03.KUCCOID == OP1REC.KUCCOID   /* match cust*/
         && VPRDCU03.KUMSTRID == OP1REC.KUMSTRID /* numbers*/
         && VPRDCU03.XNXCD == OP1REC.XNXCD)     
          /**/
          PC0KSE2(); /* ===> see if this style/clr matches*/
                                   /* order-number*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
            if (PC0KM001.OP1CUOID != PC0KW01.OP1CUOID
             || PC0KM001.OP1NORID != PC0KW01.OP1NORID)
              PC0KW00.PC0KWMOD = "Y"; /* ===>mod data fl*/
            end
            PC0KM002.OP1CUPO = OP1REC.OP1CUPO;
            PC0KW01.OP1CUPO = OP1REC.OP1CUPO;
            PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
            PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
            PC0KW01.OP1NORID = PC0KM001.OP1NORID;
          end
          /**/
        else
          converseLib.validationFailed(83); /* ===>Cust number must match*/
          PC0KW00.XXXPRCNM = "PC0K556";
          set PC0KM001.OP1CUOID cursor, bold;
          set PC0KM001.OP1NORID bold;
        end
        /**/
      else /* NO CUST-XREF ON THIS ITEM*/
        converseLib.validationFailed(443); /* ===>Cust number must match*/
        PC0KW00.XXXPRCNM = "PC0K556";
        set PC0KM001.OP1CUOID cursor, bold;
        set PC0KM001.OP1NORID bold;
      end
      /**/
      return;
      /**/
    end
    /**/
     /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
     /* ------------------------------------------------------------*/
    /**/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set PC0KM001.OP1CUOID cursor, bold;
      set PC0KM001.OP1NORID bold;
      PC0KW00.XXXPRCNM = "PC0K556";
      converseLib.validationFailed(70);
      return;
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0K556";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pc0k556 ***********************/
end // end PC0K556

Function PC0K558()
    /* ------------------------------------------------------------*/
     /* BLANKING OUT SALES ORDER # WHEN CUST XREF ALSO BLANK:*/
    /* ------------------------------------------------------------*/

  if (PC0KM001.OP1CUOID == 0
   && PC0KM001.OP1NORID == 0
   && PC0KM001.PC0KMCUS == " ")
    PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
    PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
    PC0KW01.OP1NORID = PC0KM001.OP1NORID;
    PC0KW01.OP1PARTN = " ";
    return;
  end

    /* ------------------------------------------------------------*/
     /* SO# MUST ALSO BE ENTERED for direct ship po's.*/
     /* so# is optional for all other PO types.*/
    /* ------------------------------------------------------------*/

  if (PC0KM001.OP1CUOID == 0
   || PC0KM001.OP1NORID == 0)
    if (PC0KW01.PC4ORTYP == "XD" /* S.O. must be entered*/
     || PC0KW01.PC4ORTYP == "XI" 
     || PC0KW01.PC4ORTYP == "MM" 
     || PC0KW01.PC4ORTYP == "MD" 
     || PC0KW01.PC4ORTYP == "DC" 
     || PC0KW01.PC4ORTYP == "DS" 
     || PC0KW01.PC4ORTYP == "EM" 
     || PC0KW01.PC4ORTYP == "TS" 
     || PC0KW01.PC4ORTYP == "MX")
      set PC0KM001.OP1CUOID cursor, bold;
      set PC0KM001.OP1NORID bold;
      PC0KW00.XXXPRCNM = "PC0K558";
      converseLib.validationFailed(70);
      return; /* no more edits required*/
    else
      if (PC0KM001.OP1CUOID == 0
       && PC0KM001.OP1NORID == 0)
        if (PC0KM001.OP1CUOID != PC0KW01.OP1CUOID
         || PC0KM001.OP1NORID != PC0KW01.OP1NORID)
          PC0KW00.PC0KWMOD = "Y"; /* ===>mod data fl*/
          PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
          PC0KW01.OP1NORID = PC0KM001.OP1NORID;
          PC0KW01.OP1PARTN = " ";
        end
        return; /* no more edits required*/
      else
        PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
        PC0KW01.OP1NORID = PC0KM001.OP1NORID;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KM001.OP1CUOID;
  OP1REC.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  OP1REC.OP1CUOID = PC0KM001.OP1CUOID;
  OP1REC.OP1NORID = PC0KM001.OP1NORID;

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (PC0KW01.PC2CUXID != " ")
        if (PC0KW01.PC4ORTYP == "XD"
         || PC0KW01.PC4ORTYP == "XI"
         || PC0KW01.PC4ORTYP == "EM"
         || PC0KW01.PC4ORTYP == "TS"
         || PC0KW01.PC4ORTYP == "MX")
          if (VPRDCU03.KUCCOID == OP1REC.KUCCOID   /* match cust*/
           && VPRDCU03.KUMSTRID == OP1REC.KUMSTRID /* numbers*/
           && VPRDCU03.XNXCD == OP1REC.XNXCD)     

            PC0KSE2(); /* ===> see if this style/clr matches*/
                                   /* order-number*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
              if (PC0KM001.OP1CUOID != PC0KW01.OP1CUOID
               || PC0KM001.OP1NORID != PC0KW01.OP1NORID)
                PC0KW00.PC0KWMOD = "Y"; /* ===>mod data fl*/
              end
              PC0KM002.OP1CUPO = OP1REC.OP1CUPO;
              PC0KW01.OP1CUPO = OP1REC.OP1CUPO;
              PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
              PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
              PC0KW01.OP1NORID = PC0KM001.OP1NORID;
              return;
            end
          else
            converseLib.validationFailed(83); /* ===>Cust number must match*/
            PC0KW00.XXXPRCNM = "PC0K558";
            set PC0KM001.OP1CUOID cursor, bold;
            set PC0KM001.OP1NORID bold;
            return;
          end
        else
          if (VPRDCU03.KUCCOID == OP1REC.KUCCOID) /* match cust*/

            PC0KSE2(); /* ===> see if this style/clr matches*/
                                   /* order-number*/
            if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
              if (PC0KM001.OP1CUOID != PC0KW01.OP1CUOID
               || PC0KM001.OP1NORID != PC0KW01.OP1NORID)
                PC0KW00.PC0KWMOD = "Y"; /* ===>mod data fl*/
              end
              PC0KM002.OP1CUPO = OP1REC.OP1CUPO;
              PC0KW01.OP1CUPO = OP1REC.OP1CUPO;
              PC0KW01.PC2CUXID = PC0KM001.PC0KMCUS;
              PC0KW01.OP1CUOID = PC0KM001.OP1CUOID;
              PC0KW01.OP1NORID = PC0KM001.OP1NORID;
              return;
            end
          else
            converseLib.validationFailed(83); /* ===>Cust number must match*/
            PC0KW00.XXXPRCNM = "PC0K558";
            set PC0KM001.OP1CUOID cursor, bold;
            set PC0KM001.OP1NORID bold;
            return;
          end
        end
      else /* NO CUST-XREF ON THIS ITEM*/
        converseLib.validationFailed(443); /* ===>Cust number must match*/
        PC0KW00.XXXPRCNM = "PC0K558";
        set PC0KM001.OP1CUOID cursor, bold;
        set PC0KM001.OP1NORID bold;
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        set PC0KM001.OP1CUOID cursor, bold;
        set PC0KM001.OP1NORID bold;
        PC0KW00.XXXPRCNM = "PC0K558";
        converseLib.validationFailed(70);
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      return;
    end
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0K558";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of pc0k558 ***********************/
end // end PC0K558

// ===> "FOOTWEAR" Audit routine
Function PC0K600()
   /* ------------------------------------------------------------*/
   /* Get item audit sequence number for update record.*/
   /* for size audit record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSUP == "Y" /* ===> size update flag (QTYs/FOBs*/
   || PC0KW04.PC6STAT == "CX") /* ===> Old item cancelled*/

    set PCYREC empty;
    PCYREC.PCYFUNC = "M1"; /* Select max count*/

    PC0KS28(); /* ==> load item audit record (old*/
                                   /* copy--> PC0KW04)*/

    PC0KSF0(); /* ===> get next audit item sequence number*/

  end

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
      /* and a cancel old item did not occur.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT != "CX") /* ===> Old item not cancelled*/
    /* ------------------------------> therefore "No Merge" occured*/
    /* ---------------------------> or "destination change" occured*/

    /* ------------------------------------------------------------*/
     /* If item data changed and no merge of item rows occured*/
      /* or no (destination, RTA Date, or Mode) change occured*/
         /* process audit item routine*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode of Trans.*/
     || PC0KW01.YOHCD != PC0KW04.YOHCD       /* => Hold Code*/
     || PC0KW01.PC6SZAVL != PC0KW04.PC6SZAVL /* => Size available ring*/
     || PC0KW01.PC6AIRNB != PC0KW04.PC6AIRNB /* ===> Air Freight Number*/
     || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA Date*/
     || PC0KW01.PC6OETAL != PC0KW04.PC6OETAL /* ===> ETAL Override date*/
     || PC0KW00.PC0KWSUP == "Y")             /* ===> Size update flag (QTYs/FOBs)*/

      PC0K620(); /* ===> process item audit routine*/

    end

    /* ------------------------------------------------------------*/
     /* If Size QTY/FOB changed and no merge*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWSUP == "Y") /* ===> size update flag (QTYs/FOBs)*/

      PC0K630(); /* ===> process size level audit*/

    end

    /* ------------------------------------------------------------*/
     /* process FOB's Price changed for related items*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWPCF == "Y") /* ===> FOB price change found flag*/

      PC0K640(); /* ===> process size level audit*/

    end

  end /* ===> old item not cancelled*/
   /* =============> (No "Merge" or "Destination change" occurred)*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from merge*/
    /* * do for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
    /* * do for updated merged to item*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX"              /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB == PC0KW04.PC6ITMNB /* ===> seq. number*/
   && converseVar.eventKey not pf15)       /* ===> cancel due to merge*/
    /* ---------------------------------> therefore "Merge" occured*/

    /* ------------------------------------------------------------*/
     /* process audit for old item (cancelled item)*/
        /* - process item audit process. (cancelled)*/
        /* - process size audit process. (cancelled)*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
     || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA Date*/
     || PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> Warehouse code*/
     || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Customer xref*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD)      /* ===> Mode of Trans*/

      PC0K650(); /* ===> process item audit merge*/
                                   /* (Cancel)*/

    end

    PC0K660(); /* ===> process size level audit*/
                                   /* (Cancel)*/

    /* ------------------------------------------------------------*/
     /* process audit for merged to item (merged item updated)*/
       /* - process item audit process. (merged item updated)*/
       /* - process size audit process. (merged size level updated)*/
    /* ------------------------------------------------------------*/

    PC0K670(); /* ===> process item audit merge*/
                                   /* (update)*/

    PC0K680(); /* ===> process size audit merge*/
                                   /* (update)*/

  end /* ===> audit for merge*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from destination change*/
    /* * do for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
    /* * do for inserted new item*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX"              /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB /* ===> seq. number*/
   && converseVar.eventKey not pf15)       /* ===> cancel due to destination change*/
    /* -------------------> therefore "destination change" occured*/

    /* ------------------------------------------------------------*/
     /* process audit for old item (cancelled item)*/
        /* - process item audit process. (cancelled)*/
        /* - process size audit process. (cancelled)*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> Warehouse code*/
     || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Customer xref*/
     || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA date*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD)      /* ===> Mode of Transportation*/

      PC0K650(); /* ===> process item audit dest.*/
                                   /* (Cancel)*/

    end

    PC0K660(); /* ===> process size level audit*/
                                   /* (Cancel)*/

    /* ------------------------------------------------------------*/
     /* process audit for inserted item (item updated)*/
       /* - process item audit process. (insert item updated)*/
       /* - process size audit process. (insert size level updated)*/
    /* ------------------------------------------------------------*/

    PC0K690(); /* ===> process item audit (insert)*/

    PC0K691(); /* ===> process size audit  (insert)*/

  end /* ===> end audit for destination change*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from PF15 key*/
    /* * for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/

   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && converseVar.eventKey is pf15) /* ===> cancel due to PF15 Key request*/

    PC0K650(); /* ===> process item audit from cancel*/

    PC0K660(); /* ===> process size level audit cancel*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K600 ***********************/
end // end PC0K600

// Process item  audit "NO MERGE"
Function PC0K620()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  PC0KS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/

  VPOAIT02.PCJSEQNO = 0;

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* ETS CHANGE - NO SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6ETSDT; /* ===> before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6ETSDT; /* ===> after*/
    VPOAIT02.YOACD = "10"; /* ETS CHANGE - NO SPLIT*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                   /* MODE CHANGE - NO SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.YMTCD != PC0KW04.YMTCD) /* ===> Mode of Trans.*/
    VPOAIT02.PCIBFRA = PC0KW04.YMTCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.YMTCD; /* ===> after*/
    VPOAIT02.YOACD = "12"; /* MODE CHANGE - NO SPLIT*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                           /* WAREHOUSE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XWHCD != PC0KW04.XWHCD) /* ===> warehouse code*/
    VPOAIT02.PCIBFRA = PC0KW04.XWHCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.XWHCD; /* ===> after*/
    VPOAIT02.YOACD = "14"; /* WAREHOUSE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                  /* CUSTOMER CROSS REFERENCE CODE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ===> Cust. Xref code*/
    VPOAIT02.PCIBFRA = PC0KW04.PC2CUXID; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.PC2CUXID; /* ===> after*/
    VPOAIT02.YOACD = "15"; /* CUSTOMER CROSS REFERENCE CODE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                  /* CUSTOMER PO NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.OP1CUPO != PC0KW04.OP1CUPO) /* ===> Cust. PO Number*/
    VPOAIT02.PCIBFRA = PC0KW04.OP1CUPO; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.OP1CUPO; /* ===> after*/
    VPOAIT02.YOACD = "42"; /* CUSTOMER PO NUMBER CODE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                 /* AIR FREIGHT REQUEST NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6AIRNB != PC0KW04.PC6AIRNB) /* ===> Air Freight Number*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6AIRNB; /* ===> before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6AIRNB; /* ===> after*/
    VPOAIT02.YOACD = "20"; /* AIR FREIGHT REQUEST NUMBER*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* ETAL OVERRIDE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6OETAL != PC0KW04.PC6OETAL) /* ===> ETAL OVERRIDE Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6OETAL; /* ===> before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6OETAL; /* ===> after*/
    VPOAIT02.YOACD = "21"; /* ETAL OVERRIDE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* RTA CHANGE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6RTADT != PC0KW04.PC6RTADT) /* ===> RTA Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6RTADT; /* ===> before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6RTADT; /* ===> after*/
    VPOAIT02.YOACD = "13"; /* RTA CHANGE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                    /* ITEM STATUS (NO CX)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6STAT != PC0KW04.PC6STAT) /* ===> item status*/
    VPOAIT02.PCIBFRA = PC0KW04.PC6STAT; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.PC6STAT; /* ===> after*/
    VPOAIT02.YOACD = "19"; /* ITEM STATUS (NO CX)*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* SIZE AVAILABLE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6SZAVL != PC0KW04.PC6SZAVL) /* => Size available ring*/
    VPOAIT02.PCIBFRA = PC0KW04.PC6SZAVL; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.PC6SZAVL; /* ===> after*/
    VPOAIT02.YOACD = "35"; /* SIZE AVAILABLE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                       /* ITEM HOLD CODE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.YOHCD != PC0KW04.YOHCD) /* => Hold Code*/
    VPOAIT02.PCIBFRA = PC0KW04.YOHCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.YOHCD; /* ===> after*/
    VPOAIT02.YOACD = "34"; /* ITEM HOLD CODE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                   /* CONFIRMATION NUMBER*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6CONNO != PC0KW04.PC6CONNO) /* => confimation number*/
    VPOAIT02.PCIBFRA = PC0KW04.PC6CONNO; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.PC6CONNO; /* ===> after*/
    VPOAIT02.YOACD = "36"; /* CONFIRMATION NUMBER*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
               /* ADD PRODUCT SIZE QUANITITIES*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSUP == "Y") /* ===> size/FOB update flag (QTYs)*/

    VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;

    if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
     || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/

      VPOAIT02.PCIBFRN = PC0KW04.PC6TORDE;
      VPOAIT02.PCIAFTN = PC0KW01.PC6TORDE;
      VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

      VPOAIT02.YOACD = "16"; /* ADD PRODUCT SIZE QUANITITIES*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end /* ===>QTY changed Audit*/

    PC0K623(); /* ===> check FOB prices modified?*/
    /* ------------------------====> for QTYs existed before maint.*/

  end /* ===> size/FOB update flag (QTYs)*/

   /* **                                                        ***/
   /* ********************** End of PC0K620 ***********************/
end // end PC0K620

// Check for FOB Price change
Function PC0K623()
   /* ------------------------------------------------------------*/
   /* process FOB's Price changed*/
    /* - verify that aleast one FOB price was changed*/
      /* the index is save in a finder index for next process*/
      /* the finder index saved is used as the lowest size.*/
    /* - accumulate the before and after (Price * QTY) change*/
    /* - process item audit load if price change found*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index &*/
  PC0KW00.PC0KWPCF = "N"; /* ===> FOB Price change found flag*/
  PC0KW00.PC0KWNBC = 0; /* ==>net before change (FOB accum)*/
  PC0KW00.PC0KWNAC = 0; /* ==>net after  change (FOB accum)*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===> Until end of sizes*/

    if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0) /* ===> QTYs existed before*/

      /* ------------------------------------------------------------*/
        /* - process override FOB price changed*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWVRF[PC0KWIXT] == "Y" /* ===> FOB override flag*/
       && PC0KW01.PC0KWVRD[PC0KWIXT] != PC0KW05.FY4FOBPR[PC0KWIXT])

        PC0KW00.PC0KWNB = PC0KW05.FY4FOBPR[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

        PC0KW00.PC0KWNA = PC0KW01.PC0KWVRD[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

        if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/

          PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT;
                                   /* ===>save finder index*/
          PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/

        end /* ===> if FOB price changed flag*/

      end

      /* ------------------------------------------------------------*/
        /* - process override FOB price reset to Factory price*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWVRF[PC0KWIXT] == "N" /* ===> FOB override flag*/
       && PC0KW05.PC7FOBFL[PC0KWIXT] == "Y") /* ===> ovrd existed before maint*/

        PC0KW00.PC0KWNB = PC0KW05.FY4FOBPR[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

        PC0KW00.PC0KWNA = PC0KW01.PC0KWVRD[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

        if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/

          PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT;
                                   /* ===>save finder index*/
          PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/

        end /* ===> if FOB price changed flag*/

      end /* ===> QTYs exested check*/

    end /* ===> while more sizes*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===>Increment size index*/

  end /* ===> while more sizes*/

   /* ------------------------------------------------------------*/
    /* Process item audit load if price change found*/
      /* if the schedler size matches an FOB that was modified*/
       /* then-->  use that size to format the audit record*/
       /* else--> use the finder index that was identified above*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> fob price change flag*/

    PC0KSF3(); /* ==> get schduler size index*/

    if (PG6REC.PG6FOBSZ > 0) /* ==>loaded schdler index is > 0*/

      PC0KW00.PC0KWIXT = PG6REC.PG6FOBSZ; /* ==>load schdler index*/

      if (PC0KW01.PC0KWVRF[PC0KWIXT] == "Y" /* ===> FOB override flag*/
       && PC0KW01.PC0KWVRD[PC0KWIXT] != PC0KW05.FY4FOBPR[PC0KWIXT]
       && PC0KW05.PC7ORDEQ[PC0KWIXT] != 0) 
                                   /* => did not exist before maint*/

        PC0K624(); /* ===> process format FOB change audit*/

      else /* ===>use finder index to process audit record*/

        if (PC0KW01.PC0KWVRF[PC0KWIXT] == "N" /* ===> FOB override flag*/
         && PC0KW05.PC7FOBFL[PC0KWIXT] == "Y") /* ===> ovrd existed before maint*/

          PC0K624(); /* ===> process format FOB change audit*/

        else /* ===>use finder index to process audit record*/
          /* --------------------->because Schdler size not modified*/

          PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF;
                                   /* =>loaded finder index*/

          PC0K624(); /* ===> process lowest size in audit*/

        end

      end /* ==> FOB price change flag*/

    else /* ===>use finder index to process audit record*/
      /* --------------------->because Schdler size did not exist*/

      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF; /* ==>loaded finder index*/

      PC0K624(); /* ===> process lowest size in audit*/

    end /* ==>schdler size index?*/

  end /* ==> FOB price change flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K623 ***********************/
end // end PC0K623

// Format & load FOB audit record
Function PC0K624()
   /* ------------------------------------------------------------*/
                    /* FOB PRICE CHANGE*/
     /* This module uses the lowest FOB price change together*/
     /* with its associated size description as the before*/
     /* and after picture. (ie.  "9.5 - 2.25")*/
     /* It also uses the accumulate Net Change which was*/
     /* set up in module PC0K723.*/
     /* -  (Sum of (QTYs before  * Prices before)*/
     /* -  (Sum of (QTYs before  * Prices after)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFB1 = PC0KW01.SY4IDDSC[PC0KWIXT]; /* load size*/
  PC0KW00.PC0KWFB2 = "-";
  PC0KW00.PC0KWFB4 = ".";

   /* ------------------------------------------------------------*/
   /* ===>saved price (before) PC0KW05*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = PC0KW05.FY4FOBPR[PC0KWIXT]; /* ===> FOB Numeric*/
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA; /* ===> FOB Character*/
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIBFRA = PC0KW00.PC0KWFB0;
                                   /* ==> before audit pic (character)*/

   /* ------------------------------------------------------------*/
   /* ===>saved price (after)  PC0KW01*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = PC0KW01.PC0KWVRD[PC0KWIXT];
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA;
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIAFTA = PC0KW00.PC0KWFB0;
                                   /* ==> after audit pic (character)*/

  VPOAIT02.PCJNETQT = PC0KW00.PC0KWNAC - PC0KW00.PC0KWNBC;

  VPOAIT02.YOACD = "03"; /* FOB PRICE CHANGE*/

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/

    VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO + 1; /* ===>Increment audit seq*/

  end /* ===>QTY change Audit written*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K624 ***********************/
end // end PC0K624

// Process size audit "NO MERGE"
Function PC0K630()
   /* ------------------------------------------------------------*/
   /* If any QTYs were added this session*/
      /* write out an size audit*/

   /* Note: This audit is for the the change in QTYs and uses*/
         /* the after price in the before & after price array to*/
         /* keep the audits in check when an FOB change occurs.*/

   /* Note: If an FOB Price change occurs the FOB audit will*/
         /* make up for this type of processing. The end*/
         /* net change will be correct because the FOB Audit*/
         /* uses the before change QTYs in the before and after*/
         /* QTY array to keep the audits in check when a change*/
         /* in FOB price change occurs. (PC0K632)*/

   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/

    PC0KS17(); /* ===> Load Maint. Copy of item to audit record*/

    move PC0KW05.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
    move PC0KW01.PC0KWNQT to VPOASZ02.PCIAFTN[1] for all;

    PC0KW00.PC0KWIXT = 1; /* ===> temp Initialize index*/

    while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/

      if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0
       || PC0KW01.PC0KWNQT[PC0KWIXT] > 0)

        VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];

      end /* ===> size QTY exists*/

      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/

    end /* ===> while more sizes*/

    VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0KSF2(); /* ===> insert the size audit record*/

  end

   /* ------------------------------------------------------------*/
   /* process FOB's Price changed*/
    /* - verify that aleast one FOB price change found*/
      /* flag was set in process PC0K623*/
    /* - process size audit load if price change found flag = yes*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> FOB price change found flag*/

    PC0K632(); /* ===> format the size/FOB audit record*/

    PC0KSF2(); /* ===> insert the size audit record*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K630 ***********************/
end // end PC0K630

// format size/FOB  "NO MERGE"
Function PC0K632()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/

   /* If any FOB prices were changed this session*/
      /* write out an size audit*/

   /* Note: This audit is for the the change in FOB price and*/
         /* uses the before QTYs in the before & after QTY*/
         /* array to keep the audits in check when an QTY change*/
         /* occurs.*/

   /* Note: If a change in QTYs occur, the QTYs change audit will*/
         /* make up for this type of processing. The end*/
         /* net change will be correct because the QTY Audit*/
         /* uses the after change QTYs in the before and after*/
         /* QTY array to keep the audits in check when a change*/
         /* in QTYs occur. (PC0K630).*/

   /* ------------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW04.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/
    /**/
    VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO + 1; /* audit sequence number*/
    /**/
  else
    /**/
    VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO; /* audit sequence number*/
    /**/
  end /* ===>QTY changed Audit*/

  VPOASZ02.SY1STNBR = PC0KW04.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW04.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW04.XDMCD;
  VPOASZ02.XQACD = PC0KW04.XQACD;
  VPOASZ02.XOWCD = PC0KW04.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW04.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW04.XPGCD;
  VPOASZ02.XUMCD = PC0KW04.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW04.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW04.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW04.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW04.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW04.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW04.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW04.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW04.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW04.OP1NORID;

  if (PC0KW04.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW04.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/
  VPOASZ02.ZFC-CRCY-CD = PC0KW05.ZFC-CRCY-CD;

  PC0KW00.PC0KWIXT = 1; /* Size position in display storage*/

  while (PC0KW00.PC0KWIXT <= 40)
    /**/
    if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0) /* ===> QTY before maint*/
      VPOASZ02.PCIBFRN[PC0KWIXT] = PC0KW05.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCIAFTN[PC0KWIXT] = PC0KW05.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW05.FY4FOBPR[PC0KWIXT];
      VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
    end
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
    /**/
  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0K632 ***********************/
end // end PC0K632

// do FOB Change for asso. items
Function PC0K640()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set of items be used*/
   /* to update the FOB override fields for related item/size*/
     /* In the event that an item's size record is updated*/
        /* - an Update the Size D.B will be called*/
        /* - an insert to the Item audit will be called*/
        /* - an insert to the Size audit will be called*/

     /* There is a check to see if the record read is the one*/
     /* that has been maintained and thus needs no processing.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWT = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = PC0KW01.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0KW01.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0KW01.XQACD; /* ===>*/
  VPOITM05.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = PC0KW01.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0KW01.XUMCD; /* ===>*/

  if (PC0KW01.YSMXDV == "10")
    /* ============>DESTINATION FIELDS*/
    /* ============>------------------*/
    VPOITM05.PC2CUXID = "*"; /* ===>*/
    VPOITM05.XWHCD = "*"; /* ===>*/
    VPOITM05.YSMXDV = "10";
  end

  if (PC0KW01.YSMXDV == "20")
    /* ============>DESTINATION FIELDS*/
    /* ============>------------------*/
    VPOITM05.PC2CUXID = "*"; /* ===>*/
    VPOITM05.XWHCD = "*"; /* ===>*/
    VPOITM05.YSMXDV = "20";
  end

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

   /* ------------------------------------------------------------*/
   /* Select Set Open cursor, read the first item rocord and*/
   /* process accordingly.*/
   /* ------------------------------------------------------------*/

  PC0KSB1(); /* ========> select set and open cursor*/

  PC0KSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

  if (VPOITM05.PC6ITMNB == PC0KW04.PC6ITMNB)
    PC0KSB2(); /* ==========> Fetch selected rows*/
    /* ==========================================> prime read*/
  end

   /* ------------------------------------------------------------*/
   /* Fetch and check FOB ovrd data asso. with each row.*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWSWT == "N") /* Until end of temp. "Item" cursor*/

    PC0KSB6(); /* ==========> get size record row*/

    PC0K643(); /* ====> Format size and Audit records*/

    if (PC0KW00.PC0KWPFF == "N")
      PC0K641(); /* ====> process item/sizes for ovrd FOB*/
                                   /* Data*/
    else
      PC0K642(); /* ====> process item/sizes for ovrd FOB*/
                                   /* Data*/
    end

    if (PC0KW00.PC0KWFL1 == "Y") /* ===> item/FOB  updated needed*/

      VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PC0KSD0(); /* ====> Update (U ) size record*/

      PC0K644(); /* ====> Format FOB Change for item*/
                                   /* audit*/

      PC0KSF1(); /* ====> insert a item audit record*/

      PC0KSF2(); /* ====> insert a size audit record*/

    end

    PC0KSB2(); /* ==========> Fetch selected rows*/
    /* ==========================================> driving read*/

    if (VPOITM05.PC6ITMNB == PC0KW04.PC6ITMNB) /* ===> old copy Maint. row*/
      /* ======================================> already has an audit*/
      PC0KSB2(); /* ==========> Fetch selected rows*/
      /* ======================================> driving read*/
    end

  end /* ===> while not end ot item cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0KSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0K640 ***********************/
end // end PC0K640

// do FOB ovrd (no FCTY FOB data)
Function PC0K641()
   /* ------------------------------------------------------------*/
   /* process item/sizes for ovrd FOB data for asso. items*/
   /* - first check to see if the FOB price on the selected item*/
     /* is valued.*/
   /* - if it is, then check the FOB override templete to*/
     /* see if the price needs to be updated in oreder to keep*/
     /* all size QTY prices the same.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> set size/FOB Update flag*/

  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all; /* ===>load size audit rec*/

  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all; /* ===>load size audit rec*/
  VPOASZ02.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;

  while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/
    /**/
    if (VPOSIZ02.PC7ORDEQ[PC0KWIXT] > 0)
      /**/
      if (VPOSIZ02.FY4FOBPR[PC0KWIXT] != PC0KW01.PC0KWVRD[PC0KWIXT])
        /**/
        if (VPOSIZ02.FY4FOBPR[PC0KWIXT] != VFCTY003.FY1DFPRC) /* deflt-price*/
          VPOSIZ02.PC7FOBFL[PC0KWIXT] = "Y"; /* ===> set FOB ovrd flag*/
        end
        /**/
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        PC0KW00.PC0KWFL1 = "Y"; /* ===> set size/FOB Update flag*/
        /**/
      end /* ===> load item/size row and audit*/
                                   /* record*/
      /**/
      /**/
    end /* ===> size QTY exists*/
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/
    /**/
  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K641 ***********************/
end // end PC0K641

// do FOB ovrd (FCTY FOB data)
Function PC0K642()
   /* ------------------------------------------------------------*/
   /* process item/sizes for ovrd FOB data for asso. items*/
   /* - first check to see if the FOB price on the selected item*/
     /* is valued.*/
   /* - if it is then, then check the FOB override templete to*/
     /* see if the price needs to be updated in oreder to keep*/
     /* all size QTY prices the same.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> set size/FOB Update flag*/

  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all; /* ===>load size audit rec*/

  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all; /* ===>load size audit rec*/
  VPOASZ02.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;

  while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/
    /**/
    if (VPOSIZ02.PC7ORDEQ[PC0KWIXT] > 0)
      /**/
      if (VPOSIZ02.FY4FOBPR[PC0KWIXT] != PC0KW01.PC0KWVRD[PC0KWIXT]
       && PC0KW01.PC0KWVRD[PC0KWIXT] != 0)
        /**/
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = PC0KW01.PC0KWVRF[PC0KWIXT];
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        PC0KW00.PC0KWFL1 = "Y"; /* ===> set size/FOB Update flag*/
        /**/
      end /* ===> load item/size row and audit record*/
      /**/
    end /* ===> size QTY exists*/
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/
    /**/
  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K642 ***********************/
end // end PC0K642

// Format the audit records
Function PC0K643()
   /* ------------------------------------------------------------*/
   /* Get item audit sequence number for update record.*/
   /* Format the audit record with the common header data*/
   /* that relates to the item bing updated.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS20(); /* ==> move VPOITM04 to VPOAIT02*/

  PC0KSF0(); /* ===> get next audit item sequence*/
                                   /* number*/

  PC0KS21(); /* ==> move VPOITM04 to VPOASZ02*/

   /* **                                                        ***/
   /* ********************** End of PC0K643 ***********************/
end // end PC0K643

// check for  FOB's Price change
Function PC0K644()
   /* ------------------------------------------------------------*/
   /* process FOB's Price changed (for Associated items to Maint)*/
    /* - verify that aleast one FOB price was changed*/
      /* the index is save in a finder index for next process*/
      /* the finder index saved is used as the lowest size.*/
    /* - accumulate the before and after (Price * QTY) change*/
    /* - process item audit load if price change found*/

    /* - PC0KWNBC is accumulator for "Net before change" value*/
    /* - PC0KWNAC is accumulator for "Net after  change" value*/

   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index &*/
  PC0KW00.PC0KWPCF = "N"; /* ===> FOB Price change found flag*/
  PC0KW00.PC0KWNBC = 0; /* ==>net before change (FOB accum)*/
  PC0KW00.PC0KWNAC = 0; /* ==>net after  change (FOB accum)*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===> Until end of sizes*/

    if (VPOASZ02.PCKBFRPR[PC0KWIXT] != VPOASZ02.PCKAFTPR[PC0KWIXT])

      PC0KW00.PC0KWNB = VPOASZ02.PCKBFRPR[PC0KWIXT] *       VPOSIZ02.PC7ORDEQ[PC0KWIXT];
      PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

      PC0KW00.PC0KWNA = VPOASZ02.PCKAFTPR[PC0KWIXT] *       VPOSIZ02.PC7ORDEQ[PC0KWIXT];
      PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

      if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/
        PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT; /* ===>save finder index*/
        PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/
      end

    end

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===>Increment size index*/

  end

   /* ------------------------------------------------------------*/
    /* Process item audit load if price change found*/
      /* if the schedler size matches an FOB that was modified*/
       /* then-->  use that size to format the audit record*/
       /* else--> use the finder index that was identified above*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> fob price change flag*/

    PC0KSF3(); /* ==> get schduler size index from VGASIZ01*/

    if (PG6REC.PG6FOBSZ > 0) /* ==>loaded schdler index is > 0*/

      PC0KW00.PC0KWIXT = PG6REC.PG6FOBSZ; /* ==>load schdler index*/

      if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y" /* ===> FOB override flag*/
       && VPOASZ02.PCKBFRPR[PC0KWIXT] != VPOASZ02.PCKAFTPR[PC0KWIXT])

        PC0K645(); /* ===> process format FOB change audit*/

      else /* ===>use finder index to process audit record*/
        /* --------------------->because Schdler size not modified*/

        PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF; /* =>loaded finder index*/
        PC0K645(); /* ===> process lowest size in audit*/

      end

    else /* ===>use finder index to process audit record*/
      /* --------------------->because Schdler size did not exist*/

      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF; /* ==>loaded finder index*/
      PC0K645(); /* ===> process lowest size in audit*/

    end /* ==>schdler size index?*/

  end /* ==> FOB price change flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K644 ***********************/
end // end PC0K644

// Format & Load FOB audit record
Function PC0K645()
   /* ------------------------------------------------------------*/
                    /* FOB PRICE CHANGE*/
     /* This module uses the lowest FOB price change together*/
     /* with its associated size description as the before*/
     /* and after picture. (ie.  "9.5 - 2.25")*/
     /* It also uses the accumulate Net Change which was*/
     /* set up in module PC0K644.*/
     /* -  (Sum of (QTYs before  * Prices before)*/
     /* -  (Sum of (QTYs before  * Prices after)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFB1 = PC0KW01.SY4IDDSC[PC0KWIXT]; /* load size*/
  PC0KW00.PC0KWFB2 = "-";
  PC0KW00.PC0KWFB4 = ".";

   /* ------------------------------------------------------------*/
   /* ===>saved price (before) Size audit record*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = VPOASZ02.PCKBFRPR[PC0KWIXT]; /* ===> FOB Numeric*/
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA; /* ===> FOB Character*/
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIBFRA = PC0KW00.PC0KWFB0;
                                   /* ==> before audit pic (character)*/

   /* ------------------------------------------------------------*/
   /* ===>saved price (after)  Size audit record*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = VPOASZ02.PCKAFTPR[PC0KWIXT];
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA;
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIAFTA = PC0KW00.PC0KWFB0;
                                   /* ==> after audit pic (character)*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO; /* ===> item audit seq. number*/
  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO; /* ===> size audit seq. number*/

  VPOAIT02.PCJNETQT = PC0KW00.PC0KWNAC - PC0KW00.PC0KWNBC;

  VPOAIT02.YOACD = "03"; /* FOB PRICE CHANGE*/

  PC0KSF4(); /* ===> Driver module to Get and Load Audit record flags*/

   /* **                                                        ***/
   /* ********************** End of PC0K645 ***********************/
end // end PC0K645

// Process item  audit "CANCEL"
Function PC0K650()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  PC0KS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/

  VPOAIT02.PCJSEQNO = 0;

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
   /* and PF15 not pressed. (ie. Item was cancelled for dest. chg*/
       /* (ie. Item was cancelled for destination change.*/
   /* - Write out an audit. (One for each change.)*/
   /* - Then write out audits for cancelled QTYs*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf15) /* ===> item cancel request*/

    /* ------------------------------------------------------------*/
                      /* ETS CHANGE - NO SPLIT*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date*/
      VPOAIT02.PCIBFRN = PC0KW04.PC6ETSDT; /* ===> before*/
      VPOAIT02.PCIAFTN = PC0KW01.PC6ETSDT; /* ===> after*/
      VPOAIT02.YOACD = "10"; /* ETS CHANGE - NO SPLIT*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                     /* MODE CHANGE - NO SPLIT*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.YMTCD != PC0KW04.YMTCD) /* ===> Mode of Trans.*/
      VPOAIT02.PCIBFRA = PC0KW04.YMTCD; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.YMTCD; /* ===> after*/
      VPOAIT02.YOACD = "12"; /* MODE CHANGE - NO SPLIT*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                             /* WAREHOUSE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XWHCD != PC0KW04.XWHCD) /* ===> warehouse code*/
      VPOAIT02.PCIBFRA = PC0KW04.XWHCD; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.XWHCD; /* ===> after*/
      VPOAIT02.YOACD = "14"; /* WAREHOUSE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                    /* CUSTOMER CROSS REFERENCE CODE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ===> Cust. Xref code*/
      VPOAIT02.PCIBFRA = PC0KW04.PC2CUXID; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.PC2CUXID; /* ===> after*/
      VPOAIT02.YOACD = "15"; /* CUSTOMER CROSS REFERENCE CODE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                        /* RTA CHANGE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6RTADT != PC0KW04.PC6RTADT) /* ===> RTA Date*/
      VPOAIT02.PCIBFRN = PC0KW04.PC6RTADT; /* ===> before*/
      VPOAIT02.PCIAFTN = PC0KW01.PC6RTADT; /* ===> after*/
      VPOAIT02.YOACD = "13"; /* RTA CHANGE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
      /* If the cancel was do to a destination change, other audits*/
      /* may be required.*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB) /* ===> seq. number*/
      /* -------------------> therefore "destination change" occured*/

      /* ------------------------------------------------------------*/
                          /* ETAL OVERRIDE DATE*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6OETAL != PC0KW04.PC6OETAL) /* ===> ETAL OVERRIDE Date*/
        VPOAIT02.PCIBFRN = PC0KW04.PC6OETAL; /* ===> before*/
        VPOAIT02.PCIAFTN = PC0KW01.PC6OETAL; /* ===> after*/
        VPOAIT02.YOACD = "21"; /* ETAL OVERRIDE DATE*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

      /* ------------------------------------------------------------*/
                     /* AIR FREIGHT REQUEST NUMBER*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6AIRNB != PC0KW04.PC6AIRNB) /* ===> Air Freight Number*/
        VPOAIT02.PCIBFRN = PC0KW04.PC6AIRNB; /* ===> before*/
        VPOAIT02.PCIAFTN = PC0KW01.PC6AIRNB; /* ===> after*/
        VPOAIT02.YOACD = "20"; /* AIR FREIGHT REQUEST NUMBER*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

      /* ------------------------------------------------------------*/
                          /* SIZE AVAILABLE*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6SZAVL != PC0KW04.PC6SZAVL) /* => Size available ring*/
        VPOAIT02.PCIBFRA = PC0KW04.PC6SZAVL; /* ===> before*/
        VPOAIT02.PCIAFTA = PC0KW01.PC6SZAVL; /* ===> after*/
        VPOAIT02.YOACD = "35"; /* SIZE AVAILABLE*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

      /* ------------------------------------------------------------*/
                           /* ITEM HOLD CODE*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.YOHCD != PC0KW04.YOHCD) /* => Hold Code*/
        VPOAIT02.PCIBFRA = PC0KW04.YOHCD; /* ===> before*/
        VPOAIT02.PCIAFTA = PC0KW01.YOHCD; /* ===> after*/
        VPOAIT02.YOACD = "34"; /* ITEM HOLD CODE*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

      /* ------------------------------------------------------------*/
                       /* CONFIRMATION NUMBER*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.YOHCD != PC0KW04.YOHCD) /* => Hold Code*/
        VPOAIT02.PCIBFRA = PC0KW04.YOHCD; /* ===> before*/
        VPOAIT02.PCIAFTA = PC0KW01.YOHCD; /* ===> after*/
        VPOAIT02.YOACD = "36"; /* CONFIRMATION NUMBER*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

    end /* ===> Destination change check*/

  end /* ===> PF15 not pressed*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = PC0KW04.PC6TORDE; /* ===> before*/
  VPOAIT02.PCIAFTN = 0; /* ===>  after*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;
  VPOAIT02.YOACD = "18"; /* CANCEL PRODUCT QUANTITIES*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K650 ***********************/
end // end PC0K650

// Process size audit "CANCEL"
Function PC0K660()
   /* ----------------------------------------------------------*/
                    /* "CANCEL" SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* saved working storage PC0Kw04 to the size audit record.*/
      /* Note:*/
             /* This process uses the old/saved item key*/
           /* and the saved size record "PC0KW05" that is*/
           /* associated with the key.*/
             /* The saved size record "PC0KW05" that is*/
           /* associated this key is and has been loaded*/
           /* in the obtain the data step.*/
   /* ----------------------------------------------------------*/

  PC0KS17(); /* ===>load common data to audit record*/
   /* =============================> load saved Maint copy PC0KW04*/

  move PC0KW05.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCIAFTN[1] for all;
  move PC0KW05.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all;
  move PC0KW05.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K660 ***********************/
end // end PC0K660

// Process item audit "MERGE"
Function PC0K670()
   /* ------------------------------------------------------------*/
                    /* MERGED TO ITEM AUDIT*/
   /* - Load the audit record with the "new key" data.*/
     /* - the saved merge to item row*/
   /* - Get the audit sequence number for the "new key" data.*/
     /* - Load the item update record with the merged from*/
       /* on order quantities. This is the only audit for the*/
       /* merge to item key.*/
      /* Note:*/
             /* This process uses the new "merge to" item key.*/
           /* The item record "PC0KW06" that is assosiated with*/
           /* this "merge" audit is and has been loaded in the*/
           /* Update D.B. --> Item merge step.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS29(); /* ==> move corresponding data (merge copy--> PC0KW06)*/

  PC0KSF0(); /* ===> get next audit item sequence number*/

   /* ------------------------------------------------------------*/
     /* Load & Write out an item audit.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                /* ADD PRODUCT SIZE QUANTITIES*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCIBFRN = PC0KW06.PC6TORDE + 0; /* ================> before*/
  VPOAIT02.PCIAFTN = PC0KW06.PC6TORDE + PC0KW01.PC6TORDE; /* ===> after*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;
  VPOAIT02.PCJNETQT = PC0KW01.PC6TORDE;
  VPOAIT02.YOACD = "16"; /* ADD PRODUCT SIZE QUANTITIES*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K670 ***********************/
end // end PC0K670

// Process size audit "MERGE"
Function PC0K680()
   /* ----------------------------------------------------------*/
                    /* MERGED TO SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* saved working storage to the record.*/
      /* Note:*/
             /* This process uses the new "merge to" item key*/
           /* and the size record "PC0KW07" that is associated*/
           /* with the key.*/
             /* The size record "PC0KW07" that is associated with*/
           /* this key is and has been loaded in the Update size*/
           /* merge step.*/
   /* ----------------------------------------------------------*/

  PC0KS18(); /* ===> load saved split to item's size row*/

  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO;
  PC0KW00.PC0KWIXT = 1; /* Size position in display storage*/

  while (PC0KW00.PC0KWIXT <= 40)

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " ") /* ===> size desc exists*/

      VPOASZ02.PCIBFRN[PC0KWIXT] = PC0KW07.PC7ORDEQ[PC0KWIXT] + 0;
      PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCIAFTN[PC0KWIXT] = PC0KW07.PC7ORDEQ[PC0KWIXT] +       PC0KW00.PC7ORDEQ;

      VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW07.FY4FOBPR[PC0KWIXT];
      VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW07.FY4FOBPR[PC0KWIXT];

      if (PC0KW07.PC7ORDEQ[PC0KWIXT] == 0
       && PC0KW01.PC7ORDEQ[PC0KWIXT] > 0)
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.FY4FOBPR[PC0KWIXT];
      end /* ===> load price (new size QTY)*/

    end /* ===> size desc exists*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;

  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K680 ***********************/
end // end PC0K680

// Process item audit "INSERT"
Function PC0K690()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the maint. update data.*/
     /* then load audit data.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS22(); /* ===> Load new/maintenance row to*/
                                   /* audit record*/

  PC0KSF0(); /* ===> get next audit item sequence*/
                                   /* number*/

   /* ------------------------------------------------------------*/
                   /* ADD NEW PRODUCT W/ NEW QUANIT.*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = 0; /* ===>  before*/
  VPOAIT02.PCIAFTN = PC0KW01.PC6TORDE; /* ===> after*/
  VPOAIT02.PCJNETQT = PC0KW01.PC6TORDE;
  PC0KW01.PC0KW-ITM-SEQ-NBR = PC0KW04.PC6ITMNB;
  VPOAIT02.PCIBFRA = PC0KW01.PC0KW-ITM-SEQ-NBR; /* ===> after*/

  VPOAIT02.YOACD = "17"; /* ADD NEW PRODUCT W/ NEW QUANIT.*/

  PC0KSF4(); /* ===> Driver for Get and Load audit*/
                                   /* record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K690 ***********************/
end // end PC0K690

// Process size audit "INSERT"
Function PC0K691()
   /* ----------------------------------------------------------*/
                    /* "INSERT" SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
      /* Note:*/
        /* 1. This process uses the old/saved item key*/
           /* and the saved size record "PC0KW05" that is*/
           /* associated with the key.*/
             /* The saved size record "PC0KW05" that is*/
           /* associated this key is and has been loaded*/
           /* in the obtain the data step.*/
        /* 2. This item was inserted because the old item*/
           /* was cancelled.  If this new item has different*/
           /* Cust Xref the new prices were obtained and were*/
           /* saved in the FOB price templete.  The templete*/
           /* was the source for the size insert and thus*/
           /* is used in inserting the audit as well.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW01.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO number*/
  VPOASZ02.PC3PONBR = PC0KW01.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO;
  VPOASZ02.SY1STNBR = PC0KW01.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW01.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW01.XDMCD;
  VPOASZ02.XQACD = PC0KW01.XQACD;
  VPOASZ02.XOWCD = PC0KW01.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW01.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW01.XPGCD;
  VPOASZ02.XUMCD = PC0KW01.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW01.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW01.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW01.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW01.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW01.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW01.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW01.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW01.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW01.OP1NORID;
  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/
  VPOASZ02.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;

  if (PC0KW01.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW01.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;
  move PC0KW05.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;

  if (PC0KW01.PC2CUXID == PC0KW04.PC2CUXID) /* ==> Cust Xref not changed*/
    /**/
    move PC0KW05.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;
    /**/
  else
    /**/
     /* ------------------------------------------------------------*/
     /* load the FOB Price from the FOB override templete*/
     /* ------------------------------------------------------------*/
    /**/
    PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/
    /**/
    while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/
      /**/
      if (PC0KW01.SY4IDDSC[PC0KWIXT] > " " /* ===> size desc exists*/
       && PC0KW05.PC7ORDEQ[PC0KWIXT] > 0)  /* QTYs to load*/
        /**/
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        /**/
      end /* ===> size desc exists*/
      /**/
      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
      /**/
    end /* ===> while more sizes*/
    /**/
  end /* ===> Cust Xref change check*/

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2();

   /* **                                                        ***/
   /* ********************** End of PC0K691 ***********************/
end // end PC0K691

// ===> "APPAREL" Audit routine
Function PC0K700()
   /* ------------------------------------------------------------*/
   /* Get item audit sequence number for update record.*/
   /* for size audit record.*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSUP == "Y" /* ===> size update flag (QTYs/FOBs*/
   || PC0KW04.PC6STAT == "CX") /* ===> Old item not cancelled*/

    set PCYREC empty;
    PCYREC.PCYFUNC = "M1"; /* Select max count*/

    PC0KS28(); /* ==> laod item audit record (old*/
                                   /* copy--> PC0KW04)*/

    PC0KSF0(); /* ===> get next audit item sequence number*/

  end

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
      /* and a cancel old item did not occur.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT != "CX") /* ===> Old item not cancelled*/
    /* ------------------------------> therefore "No Merge" occured*/
    /* ---------------------------> or "destination change" occured*/

    /* ------------------------------------------------------------*/
     /* If item data changed and no merge of item rows occured*/
      /* or no destination change ocurred process audit item*/
         /* routine process audit item routine*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode of Trans.*/
     || PC0KW01.PC6OETS != PC0KW04.PC6OETS   /* ===> Original ETS Date*/
     || PC0KW01.PC6OETAL != PC0KW04.PC6OETAL /* ===> ETAL Override date*/
     || PC0KW00.PC0KWSUP == "Y")             /* ===> Size update flag (QTYs/FOBs)*/

      PC0K720(); /* ===> process item audit routine*/

    end

    /* ------------------------------------------------------------*/
     /* If Size QTY/FOB changed and no merge*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWSUP == "Y") /* ===> size update flag (QTYs/FOBs)*/

      PC0K730(); /* ===> process size level audit*/

    end

    /* ------------------------------------------------------------*/
     /* Process FOB's Price changed for related items*/
     /* and update rows and write audits appropriatly*/
    /* ------------------------------------------------------------*/

    if (PC0KW00.PC0KWPCF == "Y") /* ===> FOB price change found flag*/

      PC0K740(); /* ===> process size level audit*/

    end

  end /* ===> old item not cancelled*/
   /* =============> (No "Merge" or "Destination change" occurred)*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from merge*/
   /* or the Item was cancelled from destination change*/
    /* * do for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
    /* * do for updated merged to item*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX"              /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB == PC0KW04.PC6ITMNB /* ===> seq. number*/
   && converseVar.eventKey not pf15)       /* ===> cancel due to merge*/
    /* ---------------------------------> therefore "Merge" occured*/
    /* ---------------------------> or "destination change" occured*/

    /* ------------------------------------------------------------*/
     /* process audit for old item (cancelled item)*/
        /* - process item audit process. (cancelled)*/
        /* - process size audit process. (cancelled)*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode code*/
     || PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> Warehouse code*/
     || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Customer xref*/
     || PC0KW01.PC6OETS != PC0KW04.PC6OETS   /* ===> Original ETS Date*/
     || PC0KW01.XOWCD != PC0KW04.XOWCD)      /* ===> Owner Group*/

      PC0K750(); /* ===> process item audit merge*/
                                   /* (Cancel)*/

    end

    PC0K760(); /* ===> process size level audit*/
                                   /* (Cancel)*/

    /* ------------------------------------------------------------*/
     /* process audit for merged to item (merged item updated)*/
       /* - process item audit process. (merged item updated)*/
       /* - process size audit process. (merged size level updated)*/
    /* ------------------------------------------------------------*/

    PC0K770(); /* ===> process item audit merge*/
                                   /* (update)*/

    PC0K780(); /* ===> process size audit merge*/
                                   /* (update)*/

  end /* ===> audit for merge*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from destination change*/
    /* * do for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/
    /* * do for inserted new item*/
      /* - process item audit process.*/
      /* - process size audit process.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX"              /* ===> items status of saved copy*/
   && PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB /* ===> seq. number*/
   && converseVar.eventKey not pf15)       /* ===> cancel due to destination change*/
    /* -------------------> therefore "destination change" occured*/

    /* ------------------------------------------------------------*/
     /* process audit for old item (cancelled item)*/
        /* - process item audit process. (cancelled)*/
        /* - process size audit process. (cancelled)*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> Warehouse code*/
     || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Customer xref*/
     || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA date*/
     || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode of Transportation*/
     || PC0KW01.XOWCD != PC0KW04.XOWCD)      /* ===> Owner Group*/

      PC0K750(); /* ===> process item audit dest.*/
                                   /* (Cancel)*/

      PC0K760(); /* ===> process size level audit*/
                                   /* (Cancel)*/

    end

    /* ------------------------------------------------------------*/
     /* process audit for inserted item (item updated)*/
       /* - process item audit process. (insert item updated)*/
       /* - process size audit process. (insert size level updated)*/
    /* ------------------------------------------------------------*/

    PC0K790(); /* ===> process item audit (insert)*/

    PC0K791(); /* ===> process size audit  (insert)*/

  end /* ===> end audit for destination change*/

   /* ------------------------------------------------------------*/
   /* If the Item was cancelled from PF15 key*/
    /* * for cancelled item.*/
      /* - process item audit process.*/
      /* - process size audit process.*/

   /* ------------------------------------------------------------*/

  if (PC0KW04.PC6STAT == "CX" /* ===> items status of saved copy*/
   && converseVar.eventKey is pf15) /* ===> cancel due to PF15 Key request*/

    PC0K750(); /* ===> process item audit from cancel*/

    PC0K760(); /* ===> process size level audit cancel*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K700 ***********************/
end // end PC0K700

// Process item  audit "NO MERGE"
Function PC0K720()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  PC0KS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/

  VPOAIT02.PCJSEQNO = 0;

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* ETS CHANGE - NO SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6ETSDT; /* ===> ETS Date before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6ETSDT; /* ===> ETS Date after*/
    VPOAIT02.YOACD = "65"; /* ETS CHANGE - NO SPLIT*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                   /* MODE CHANGE - NO SPLIT*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.YMTCD != PC0KW04.YMTCD) /* ===> Mode of Trans.*/
    VPOAIT02.PCIBFRA = PC0KW04.YMTCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.YMTCD; /* ===> after*/
    VPOAIT02.YOACD = "64"; /* MODE CHANGE - NO SPLIT*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                           /* WAREHOUSE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XWHCD != PC0KW04.XWHCD) /* ===> warehouse code*/
    VPOAIT02.PCIBFRA = PC0KW04.XWHCD; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.XWHCD; /* ===> after*/
    VPOAIT02.YOACD = "71"; /* WAREHOUSE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                  /* CUSTOMER CROSS REFERENCE CODE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ===> Cust. Xref code*/
    VPOAIT02.PCIBFRA = PC0KW04.PC2CUXID; /* ===> before*/
    VPOAIT02.PCIAFTA = PC0KW01.PC2CUXID; /* ===> after*/
    VPOAIT02.YOACD = "72"; /* CUSTOMER CROSS REFERENCE CODE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* ETAL OVERRIDE DATE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6OETAL != PC0KW04.PC6OETAL) /* ===> ETAL OVERRIDE Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6OETAL; /* ===> before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6OETAL; /* ===> after*/
    VPOAIT02.YOACD = "74"; /* ETAL OVERRIDE DATE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
                      /* ORIGINAL ETS DATE*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6OETS != PC0KW04.PC6OETS) /* ===> Original ETS Date*/
    VPOAIT02.PCIBFRN = PC0KW04.PC6OETS; /* ===> orig. ETS Date before*/
    VPOAIT02.PCIAFTN = PC0KW01.PC6OETS; /* ===> Orig. ETS Date after*/
    VPOAIT02.YOACD = "80"; /* ORIGINAL ETS DATE*/

    PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

    PC0KSF1(); /* ===> insert the item audit record*/

  end

   /* ------------------------------------------------------------*/
               /* ADD PRODUCT SIZE QUANITITIES*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWSUP == "Y") /* ===> size/FOB update flag (QTYs)*/

    VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;

    if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
     || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/

      VPOAIT02.PCIBFRN = PC0KW04.PC6TORDE;
      VPOAIT02.PCIAFTN = PC0KW01.PC6TORDE;
      VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;

      VPOAIT02.YOACD = "59"; /* ADD PRODUCT SIZE QUANITITIES*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end /* ===>QTY changed Audit*/

    PC0K723(); /* ===> check FOB prices modified?*/
    /* ------------------------====> for QTYs existed before maint.*/

  end /* ===> size/FOB update flag (QTYs)*/

   /* **                                                        ***/
   /* ********************** End of PC0K720 ***********************/
end // end PC0K720

// Check for FOB's Price change
Function PC0K723()
   /* ------------------------------------------------------------*/
   /* process FOB's Price changed*/
    /* - verify that aleast one FOB price was changed*/
      /* the index is save in a finder index for next process*/
      /* the finder index saved is used as the lowest size.*/
    /* - accumulate the before and after (Price * QTY) change*/
    /* - process item audit load if price change found*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index &*/
  PC0KW00.PC0KWPCF = "N"; /* ===> FOB Price change found flag*/
  PC0KW00.PC0KWNBC = 0; /* ==>net before change (FOB accum)*/
  PC0KW00.PC0KWNAC = 0; /* ==>net after  change (FOB accum)*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===> Until end of sizes*/

    if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0) /* ===> QTYs existed before*/

      /* ------------------------------------------------------------*/
        /* - process override FOB price changed (override change)*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWVRD[PC0KWIXT] != PC0KW05.FY4FOBPR[PC0KWIXT]
       && PC0KW01.PC0KWVRF[PC0KWIXT] == "Y" /* ===> FOB override flag*/
       && PC0KW05.PC7ORDEQ[PC0KWIXT] > 0)  

        /* ------------------------------------------------------------*/
         /* Do Net Before Change accumulation*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWNB = PC0KW05.FY4FOBPR[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

        /* ------------------------------------------------------------*/
         /* Do Net After Change accumulation*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWNA = PC0KW01.PC0KWVRD[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

        if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/

          PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT;
                                   /* ===>save finder index*/
          PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/

        end

      end

      /* ------------------------------------------------------------*/
        /* - process override FOB price reset to Factory price*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWVRF[PC0KWIXT] == "N" /* ===> FOB override flag*/
       && PC0KW05.PC7FOBFL[PC0KWIXT] == "Y") /* ===> ovrd existed before maint*/

        /* ------------------------------------------------------------*/
         /* Do Net Before Change accumulation*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWNB = PC0KW05.FY4FOBPR[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

        /* ------------------------------------------------------------*/
         /* Do Net After Change accumulation*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWNA = PC0KW01.PC0KWVRD[PC0KWIXT] * PC0KW05.PC7ORDEQ[PC0KWIXT];
        PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

        if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/

          PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT;
                                   /* ===>save finder index*/
          PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/

        end

      end

    end /* ===> QTYs existed check*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===>Increment size index*/

  end /* ===> while more sizes*/

   /* ------------------------------------------------------------*/
    /* Process item audit load if price change found*/
      /* --> use the finder index that was identified above*/
      /* --> Format the insert audit record for:*/

                    /* FOB PRICE CHANGE*/

   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> fob price change flag*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF; /* ==>loaded finder index*/

    PC0K724(); /* ===> process lowest size in audit*/

  end /* ==> FOB price change flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K723 ***********************/
end // end PC0K723

// Format & load the FOB audit
Function PC0K724()
   /* ------------------------------------------------------------*/
                    /* FOB PRICE CHANGE*/
     /* This module uses the lowest FOB price change together*/
     /* with its associated size description as the before*/
     /* and after picture. (ie.  "9.5 - 2.25")*/
     /* It also uses the accumulate Net Change which was*/
     /* set up in module PC0K723.*/
     /* -  (Sum of (QTYs before  * Prices before)*/
     /* -  (Sum of (QTYs before  * Prices after)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFB1 = PC0KW01.SY4IDDSC[PC0KWIXT]; /* load size*/
  PC0KW00.PC0KWFB2 = "-";
  PC0KW00.PC0KWFB4 = ".";

   /* ------------------------------------------------------------*/
   /* ===>saved price (before) PC0KW05 (character representation)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = PC0KW05.FY4FOBPR[PC0KWIXT]; /* ===> FOB Numeric*/
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA; /* ===> FOB Character*/
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIBFRA = PC0KW00.PC0KWFB0;
                                   /* ==> before audit pic (character)*/

   /* ------------------------------------------------------------*/
   /* ===>saved price (after ) PC0KW01 (character representation)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = PC0KW01.PC0KWVRD[PC0KWIXT];
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA;
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIAFTA = PC0KW00.PC0KWFB0;
                                   /* ==> after audit pic (character)*/

  VPOAIT02.PCJNETQT = PC0KW00.PC0KWNAC - PC0KW00.PC0KWNBC;

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/

    VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO + 1; /* ===>Increment audit seq*/

  end /* ===>QTY changed Audit*/

  VPOAIT02.YOACD = "75"; /* FOB PRICE CHANGE*/

  PC0KSF4(); /* ===> Get and Load L/C Amend print indicator (1,2,3,5)*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K724 ***********************/
end // end PC0K724

// Process size audit "NO MERGE"
Function PC0K730()
   /* ------------------------------------------------------------*/
   /* If any QTYs were added this session*/
      /* write out an size audit*/

   /* Note: This audit is for the the change in QTYs and uses*/
         /* the after price in the before & after price array to*/
         /* keep the audits in check when an FOB change occurs.*/

   /* Note: If an FOB Price change occurs the FOB audit will*/
         /* make up for this type of processing. The end*/
         /* net change will be correct because the FOB Audit*/
         /* uses the before change QTYs in the before and after*/
         /* QTY array to keep the audits in check when a change*/
         /* in FOB price change occurs. (PC0K732)*/

   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/
    /**/
    /**/
    PC0KS17(); /* ===> Load Maint. Copy of item to audit record*/
    /**/
    move PC0KW05.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
    move PC0KW01.PC0KWNQT to VPOASZ02.PCIAFTN[1] for all;
  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/
    VPOASZ02.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;
    /**/
    PC0KW00.PC0KWIXT = 1; /* ===> temp Initialize index*/
    /**/
    while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/
      /**/
      if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0
       || PC0KW01.PC0KWNQT[PC0KWIXT] > 0)
        /**/
        /**/
        VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        /**/
        /**/
      end /* ===> size QTY exists*/
      /**/
      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/
      /**/
    end /* ===> while more sizes*/
    /**/
    /**/
    /**/
    VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    /**/
    /**/
    PC0KSF2(); /* ===> insert the size audit record*/
    /**/
  end

   /* ------------------------------------------------------------*/
   /* process FOB's Price changed*/
    /* - verify that aleast one FOB price change found*/
      /* flag was set in process PC0K723*/
    /* - process size audit load if price change found flag = yes*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> FOB price change found flag*/
    /**/
    PC0K732(); /* ===> format the size/FOB audit record*/
    /**/
    PC0KSF2(); /* ===> insert the size audit record*/
    /**/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K730 ***********************/
end // end PC0K730

// Format size audit  "NO MERGE"
Function PC0K732()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/

   /* If any FOB prices were changed this session*/
      /* write out an size audit*/

   /* Note: This audit is for the the change in FOB price and*/
         /* uses the before QTYs in the before & after QTY*/
         /* array to keep the audits in check when an QTY change*/
         /* occurs.*/

   /* Note: If a change in QTYs occur, the QTYs change audit will*/
         /* make up for this type of processing. The end*/
         /* net change will be correct because the QTY Audit*/
         /* uses the after change QTYs in the before and after*/
         /* QTY array to keep the audits in check when a change*/
         /* in QTYs occur. (PC0K730).*/

   /* ------------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW04.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/
  VPOASZ02.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;

  if (PC0KW00.PC0KWADD > 0 /* ===> QTYs added    this session*/
   || PC0KW00.PC0KWCNL > 0) /* ===> QTYs canceled this session*/
    /**/
    VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO + 1; /* audit sequence number*/
    /**/
  else
    /**/
    VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO; /* audit sequence number*/
    /**/
  end /* ===>QTY changed Audit*/

  VPOASZ02.SY1STNBR = PC0KW04.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW04.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW04.XDMCD;
  VPOASZ02.XQACD = PC0KW04.XQACD;
  VPOASZ02.XOWCD = PC0KW04.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW04.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW04.XPGCD;
  VPOASZ02.XUMCD = PC0KW04.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW04.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW04.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW04.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW04.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW04.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW04.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW04.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW04.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW04.OP1NORID;

  if (PC0KW04.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW04.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/

  PC0KW00.PC0KWIXT = 1; /* Size position in display storage*/

  while (PC0KW00.PC0KWIXT <= 40)
    /**/
    if (PC0KW05.PC7ORDEQ[PC0KWIXT] > 0) /* ===> QTY before maint*/
      VPOASZ02.PCIBFRN[PC0KWIXT] = PC0KW05.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCIAFTN[PC0KWIXT] = PC0KW05.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW05.FY4FOBPR[PC0KWIXT];
      VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
    end
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
    /**/
  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0K732 ***********************/
end // end PC0K732

// Do FOB Update for asso. items
Function PC0K740()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set of items be used*/
   /* to update the FOB override fields for related item/size*/
     /* In the event that an item's size record is updated*/
        /* - an Update the Size D.B will be called*/
        /* - an insert to the Item audit will be called*/
        /* - an insert to the Size audit will be called*/

     /* There is a check to see if the record read is the one*/
     /* that has been maintained and thus needs no processing.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWT = "N"; /* ===> initialize temp. cursor for*/
                                   /* "ITEM"*/

  set VPOITM05 empty; /* ===>initialize record before loading*/
                                   /* it*/

  VPOITM05.XGPCD = PC0KW01.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0KW01.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0KW01.XQACD; /* ===>*/
  VPOITM05.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = PC0KW01.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0KW01.XUMCD; /* ===>*/

  if (PC0KW01.YSMXDV == "10")
    /* ============>DESTINATION FIELDS*/
    /* ============>------------------*/
    VPOITM05.PC2CUXID = "*"; /* ===>*/
    VPOITM05.XWHCD = "*"; /* ===>*/
    VPOITM05.YSMXDV = "10";
  end

  if (PC0KW01.YSMXDV == "20")
    /* ============>DESTINATION FIELDS*/
    /* ============>------------------*/
    VPOITM05.PC2CUXID = "*"; /* ===>*/
    VPOITM05.XWHCD = "*"; /* ===>*/
    VPOITM05.YSMXDV = "20";
  end

   /* ============>WILD CARD FIELDS*/
   /* ============>----------------*/
  VPOITM05.PC6RTADT = -1;
  VPOITM05.PC6OETS = -1;
  VPOITM05.PC6ETSDT = -1;
  VPOITM05.YMTCD = "*";
  VPOITM05.PC6PLAN = -1;
  VPOITM05.XDSCD = "*";
  VPOITM05.XOWCD = "*"; /* ===>*/

   /* ------------------------------------------------------------*/
   /* Select Set Open cursor, read the first item rocord and*/
   /* process accordingly.*/
   /* ------------------------------------------------------------*/

  PC0KSB1(); /* ========> select set and open cursor*/

  PC0KSB2(); /* ==========> Fetch selected rows*/
   /* ==========================================> prime read*/

  if (VPOITM05.PC6ITMNB == PC0KW04.PC6ITMNB)
    PC0KSB2(); /* ==========> Fetch selected rows*/
    /* ==========================================> prime read*/
  end

   /* ------------------------------------------------------------*/
   /* Fetch and check FOB ovrd data asso. with each row.*/
   /* ------------------------------------------------------------*/

  while (PC0KW00.PC0KWSWT == "N") /* Until end of temp. "Item" cursor*/

    PC0KSB6(); /* ==========> get size record row*/

    PC0K743(); /* ====> Format size and Audit records*/

    if (PC0KW00.PC0KWPFF == "N")
      PC0K741(); /* ====> Do item/sizes for ovrd FOB (No*/
                                   /* FCTY)data*/
    else
      PC0K742(); /* ====> process item/sizes for ovrd FOB*/
                                   /* (FCTY) Data*/
    end

    if (PC0KW00.PC0KWFL1 == "Y") /* ===> item/FOB  updated needed*/

      VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PC0KSD0(); /* ====> Update (U ) size record*/

      PC0K744(); /* ====> Format FOB Change for item*/
                                   /* audit*/

      PC0KSF1(); /* ====> insert a item audit record*/

      PC0KSF2(); /* ====> insert a size audit record*/

    end

    PC0KSB2(); /* ==========> Fetch selected rows*/
    /* ==========================================> driving read*/

    if (VPOITM05.PC6ITMNB == PC0KW04.PC6ITMNB) /* ===> old copy Maint. row*/
      /* ======================================> already has an audit*/

      PC0KSB2(); /* ==========> Fetch selected rows*/
      /* ======================================> driving read*/

    end

  end /* ===> while not end ot item cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0KSB3(); /* Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0K740 ***********************/
end // end PC0K740

// Do FOB ovrd (No FCTY FOB data)
Function PC0K741()
   /* ------------------------------------------------------------*/
   /* process item/sizes for ovrd FOB data for asso. items*/
   /* - first check to see if the FOB price on the selected item*/
     /* is valued.*/
   /* - if it is, then check the FOB override templete to*/
     /* see if the price needs to be updated in oreder to keep*/
     /* all size QTY prices the same.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> set size/FOB Update flag*/

  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all; /* ===>load size audit rec*/

  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all; /* ===>load size audit rec*/
  VPOASZ02.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;

  while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/
    /**/
    if (VPOSIZ02.PC7ORDEQ[PC0KWIXT] > 0)
      /**/
      if (VPOSIZ02.FY4FOBPR[PC0KWIXT] != PC0KW01.PC0KWVRD[PC0KWIXT])
        /**/
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = "Y"; /* ===> set FOB ovrd flag*/
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        PC0KW00.PC0KWFL1 = "Y"; /* ===> set size/FOB Update flag*/
        /**/
      end /* ===> load item/size row and audit record*/
      /**/
      /**/
    end /* ===> size QTY exists*/
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/
    /**/
  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K741 ***********************/
end // end PC0K741

// Do FOB ovrd (FCTY FOB data)
Function PC0K742()
   /* ------------------------------------------------------------*/
   /* process item/sizes for ovrd FOB data for asso. items*/
   /* - first check to see if the FOB price on the selected item*/
     /* is valued.*/
   /* - if it is then, then check the FOB override templete to*/
     /* see if the price needs to be updated in oreder to keep*/
     /* all size QTY prices the same.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===> initialize temp. index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> set size/FOB Update flag*/

  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all; /* ===>load size audit rec*/

  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all; /* ===>load size audit rec*/
  move VPOSIZ02.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all; /* ===>load size audit rec*/
  VPOASZ02.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;

  while (PC0KW00.PC0KWIXT <= 40) /* Until all sizes read*/
    /**/
    if (VPOSIZ02.PC7ORDEQ[PC0KWIXT] > 0)
      /**/
      if (VPOSIZ02.FY4FOBPR[PC0KWIXT] != PC0KW01.PC0KWVRD[PC0KWIXT]
       && PC0KW01.PC0KWVRD[PC0KWIXT] != 0)
        /**/
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = PC0KW01.PC0KWVRF[PC0KWIXT];
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        PC0KW00.PC0KWFL1 = "Y"; /* ===> set size/FOB Update flag*/
        /**/
      end /* ===> load item/size row and audit record*/
      /**/
    end /* ===> size QTY exists*/
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===> increment temp. index*/
    /**/
  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K742 ***********************/
end // end PC0K742

// Format audit rec. (FOB change)
Function PC0K743()
   /* ------------------------------------------------------------*/
   /* Get item audit sequence number for update record.*/
   /* Format the audit record with the common header data*/
   /* that relates to the item bing updated.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS20(); /* ==> move VPOITM04 to VPOAIT02*/

  PC0KSF0(); /* ===> get next audit item sequence*/
                                   /* number*/

  PC0KS21(); /* ==> move VPOITM04 to VPOASZ02*/

   /* **                                                        ***/
   /* ********************** End of PC0K743 ***********************/
end // end PC0K743

// Check for FOB's Price change
Function PC0K744()
   /* ------------------------------------------------------------*/
   /* process FOB's Price changed (for Associated items to Maint)*/
    /* - verify that aleast one FOB price was changed*/
      /* the index is save in a finder index for next process*/
      /* the finder index saved is used as the lowest size.*/
    /* - accumulate the before and after (Price * QTY) change*/
    /* - process item audit load if price change found*/

    /* - PC0KWNBC is accumulator for "Net before change" value*/
    /* - PC0KWNAC is accumulator for "Net after  change" value*/

   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index &*/
  PC0KW00.PC0KWPCF = "N"; /* ===> FOB Price change found flag*/
  PC0KW00.PC0KWNBC = 0; /* ==>net before change (FOB accum)*/
  PC0KW00.PC0KWNAC = 0; /* ==>net after  change (FOB accum)*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===> Until end of sizes*/

    if (VPOASZ02.PCKBFRPR[PC0KWIXT] != VPOASZ02.PCKAFTPR[PC0KWIXT])

      PC0KW00.PC0KWNB = VPOASZ02.PCKBFRPR[PC0KWIXT] *       VPOSIZ02.PC7ORDEQ[PC0KWIXT];
      PC0KW00.PC0KWNBC = PC0KW00.PC0KWNBC + PC0KW00.PC0KWNB;

      PC0KW00.PC0KWNA = VPOASZ02.PCKAFTPR[PC0KWIXT] *       VPOSIZ02.PC7ORDEQ[PC0KWIXT];
      PC0KW00.PC0KWNAC = PC0KW00.PC0KWNAC + PC0KW00.PC0KWNA;

      if (PC0KW00.PC0KWPCF == "N") /* ===> fob price change flag*/
        PC0KW00.PC0KWIXF = PC0KW00.PC0KWIXT; /* ===>save finder index*/
        PC0KW00.PC0KWPCF = "Y"; /* ===> FOB Price change found*/
      end

    end

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1; /* ===>Increment size index*/

  end

   /* ------------------------------------------------------------*/
    /* Process item audit load if price change found*/
      /* --> use the finder index that was identified above*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWPCF == "Y") /* ===> fob price change flag*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXF; /* ==>loaded finder index*/

    PC0K745(); /* ===> process lowest size in audit*/

  end /* ==> FOB price change flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K744 ***********************/
end // end PC0K744

// Format & Load the FOB Audit
Function PC0K745()
   /* ------------------------------------------------------------*/
                    /* FOB PRICE CHANGE*/
     /* This module uses the lowest FOB price change together*/
     /* with its associated size description as the before*/
     /* and after picture. (ie.  "9.5 - 2.25")*/
     /* It also uses the accumulate Net Change which was*/
     /* set up in module PC0K744.*/
     /* -  (Sum of (QTYs before  * Prices before)*/
     /* -  (Sum of (QTYs before  * Prices after)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFB1 = PC0KW01.SY4IDDSC[PC0KWIXT]; /* load size*/
  PC0KW00.PC0KWFB2 = "-";
  PC0KW00.PC0KWFB4 = ".";

   /* ------------------------------------------------------------*/
   /* ===>saved price (before) Size audit record*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = VPOASZ02.PCKBFRPR[PC0KWIXT]; /* ===> FOB Numeric*/
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA; /* ===> FOB Character*/
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIBFRA = PC0KW00.PC0KWFB0;
                                   /* ==> before audit pic (character)*/

   /* ------------------------------------------------------------*/
   /* ===>saved price (after)  Size audit record*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWFBN = VPOASZ02.PCKAFTPR[PC0KWIXT];
  PC0KW00.PC0KWFOB = PC0KW00.PC0KWFBA;
  PC0KW00.PC0KWFB3 = PC0KW00.PC0KWFB6;
  PC0KW00.PC0KWFB5 = PC0KW00.PC0KWFB7;
  VPOAIT02.PCIAFTA = PC0KW00.PC0KWFB0;
                                   /* ==> after audit pic (character)*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO; /* ===> item audit record*/
  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO; /* ===> size audit record*/

  VPOAIT02.PCJNETQT = PC0KW00.PC0KWNAC - PC0KW00.PC0KWNBC;

  VPOAIT02.YOACD = "75"; /* FOB PRICE CHANGE*/

  PC0KSF4(); /* ===> Driver module to Get and Load Audit record flags*/

   /* **                                                        ***/
   /* ********************** End of PC0K745 ***********************/
end // end PC0K745

// Process item  audit "CANCEL"
Function PC0K750()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the common update data.*/
   /* - For any of the following item data changes:*/
     /* - Load the item update record accordingly*/
     /* - Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  PC0KS28(); /* ================> format the item audit record*/
   /* ========================> using the "before change" item key*/

  VPOAIT02.PCJSEQNO = 0;

   /* ------------------------------------------------------------*/
   /* If any of the following item data has changed*/
   /* and PF15 not pressed*/
     /* Write out an audit. (One for each change.)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf15) /* ===> item cancel request*/

    /* ------------------------------------------------------------*/
                      /* ETS CHANGE - NO SPLIT*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date*/
      VPOAIT02.PCIBFRN = PC0KW04.PC6ETSDT; /* ===> ETS Date before*/
      VPOAIT02.PCIAFTN = PC0KW01.PC6ETSDT; /* ===> ETS Date after*/
      VPOAIT02.YOACD = "65"; /* ETS CHANGE - NO SPLIT*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                     /* MODE CHANGE - NO SPLIT*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.YMTCD != PC0KW04.YMTCD) /* ===> Mode of Trans.*/
      VPOAIT02.PCIBFRA = PC0KW04.YMTCD; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.YMTCD; /* ===> after*/
      VPOAIT02.YOACD = "67"; /* MODE CHANGE - NO SPLIT*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                             /* WAREHOUSE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XWHCD != PC0KW04.XWHCD) /* ===> warehouse code*/
      VPOAIT02.PCIBFRA = PC0KW04.XWHCD; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.XWHCD; /* ===> after*/
      VPOAIT02.YOACD = "71"; /* WAREHOUSE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                    /* CUSTOMER CROSS REFERENCE CODE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ===> Cust. Xref code*/
      VPOAIT02.PCIBFRA = PC0KW04.PC2CUXID; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.PC2CUXID; /* ===> after*/
      VPOAIT02.YOACD = "72"; /* CUSTOMER CROSS REFERENCE CODE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                        /* ORIGINAL ETS DATE*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6OETS != PC0KW04.PC6OETS) /* ===> Original ETS Date*/
      VPOAIT02.PCIBFRN = PC0KW04.PC6OETS;
                                              /* ===> orig. ETS Date before*/
      VPOAIT02.PCIAFTN = PC0KW01.PC6OETS; /* ===> Orig. ETS Date after*/
      VPOAIT02.YOACD = "80"; /* ORIGINAL ETS DATE*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
                       /* OWNER GROUP*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XOWCD != PC0KW04.XOWCD) /* ===> owner group code*/
      VPOAIT02.PCIBFRA = PC0KW04.XOWCD; /* ===> before*/
      VPOAIT02.PCIAFTA = PC0KW01.XOWCD; /* ===> after*/
      VPOAIT02.YOACD = "82"; /* OWNER GROUP*/

      PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

      PC0KSF1(); /* ===> insert the item audit record*/

    end

    /* ------------------------------------------------------------*/
      /* If the cancel was do to a destination change, other audits*/
      /* may be required.*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB) /* ===> seq. number*/
      /* -------------------> therefore "destination change" occured*/

      /* ------------------------------------------------------------*/
                          /* ETAL OVERRIDE DATE*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6OETAL != PC0KW04.PC6OETAL) /* ===> ETAL OVERRIDE Date*/
        VPOAIT02.PCIBFRN = PC0KW04.PC6OETAL; /* ===> before*/
        VPOAIT02.PCIAFTN = PC0KW01.PC6OETAL; /* ===> after*/
        VPOAIT02.YOACD = "74"; /* ETAL OVERRIDE DATE*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

      /* ------------------------------------------------------------*/
                     /* AIR FREIGHT REQUEST NUMBER*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC6AIRNB != PC0KW04.PC6AIRNB) /* ===> Air Freight Number*/
        VPOAIT02.PCIBFRN = PC0KW04.PC6AIRNB; /* ===> before*/
        VPOAIT02.PCIAFTN = PC0KW01.PC6AIRNB; /* ===> after*/
        VPOAIT02.YOACD = "73"; /* AIR FREIGHT REQUEST NUMBER*/

        PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

        PC0KSF1(); /* ===> insert the item audit record*/

      end

    end /* ===> other destination audit types*/

  end /* ===> PF15 not pressed*/

   /* ------------------------------------------------------------*/
                   /* CANCEL PRODUCT QUANTITIES*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO; /* ==> Audit sequence number*/
  VPOAIT02.PCIBFRN = PC0KW04.PC6TORDE; /* ===> before*/
  VPOAIT02.PCIAFTN = 0; /* ===>  after*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN;
  VPOAIT02.YOACD = "61"; /* CANCEL PRODUCT QUANTITIES*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K750 ***********************/
end // end PC0K750

// Process size audit "CANCEL"
Function PC0K760()
   /* ----------------------------------------------------------*/
                    /* "CANCEL" SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* saved working storage PC0Kw04 to the size audit record.*/
      /* Note:*/
             /* This process uses the old/saved item key*/
           /* and the saved size record "PC0KW05" that is*/
           /* associated with the key.*/
             /* The saved size record "PC0KW05" that is*/
           /* associated this key is and has been loaded*/
           /* in the obtain the data step.*/
   /* ----------------------------------------------------------*/

  PC0KS17(); /* ===>load common data to audit record*/
   /* =============================> load saved Maint copy PC0KW04*/

  move PC0KW05.PC7ORDEQ to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCIAFTN[1] for all;
  move PC0KW05.FY4FOBPR to VPOASZ02.PCKBFRPR[1] for all;
  move PC0KW05.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;
  VPOASZ02.ZFC-CRCY-CD = PC0KW05.ZFC-CRCY-CD;
  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K760 ***********************/
end // end PC0K760

// Process item  audit "MERGE"
Function PC0K770()
   /* ------------------------------------------------------------*/
                    /* MERGED TO ITEM AUDIT*/
   /* - Load the audit record with the "new key" data.*/
     /* - the saved merge to item row*/
   /* - Get the audit sequence number for the "new key" data.*/
     /* - Load the item audit record with the merged from*/
       /* on order quantities. This is the only audit for the*/
       /* merge to item key.*/
      /* Note:*/
             /* This process uses the new "merge to" item key.*/
           /* The item record "PC0KW06" that is assosiated with*/
           /* this "merge" audit is and has been loaded in the*/
           /* Update D.B. --> Item merge step.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty;
  set PCYREC empty;
  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS29(); /* ==> move corresponding data (merge copy--> PC0KW06)*/

  PC0KSF0(); /* ===> get next audit item sequence number*/

   /* ------------------------------------------------------------*/
     /* Load & Write out an item audit.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                /* ADD PRODUCT SIZE QUANTITIES*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCIBFRN = PC0KW06.PC6TORDE + 0; /* ================> before*/
  VPOAIT02.PCIAFTN = PC0KW06.PC6TORDE + PC0KW01.PC6TORDE; /* ===> after*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;
  VPOAIT02.PCJNETQT = PC0KW01.PC6TORDE;
  VPOAIT02.YOACD = "59"; /* ADD PRODUCT SIZE QUANTITIES*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K770 ***********************/
end // end PC0K770

// Process size audit "MERGE"
Function PC0K780()
   /* ----------------------------------------------------------*/
                    /* MERGED TO SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* saved working storage to the record.*/
      /* Note:*/
             /* This process uses the new "merge to" item key*/
           /* and the size record "PC0KW07" that is associated*/
           /* with the key.*/
             /* The size record "PC0KW07" that is associated with*/
           /* this key is and has been loaded in the Update size*/
           /* merge step.*/
   /* ----------------------------------------------------------*/

  PC0KS18();

  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO;
  PC0KW00.PC0KWIXT = 1; /* Size position in display storage*/
  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/
  VPOASZ02.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;

  while (PC0KW00.PC0KWIXT <= 40)
    /**/
    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " ") /* ===> size desc exists*/
      /**/
      VPOASZ02.PCIBFRN[PC0KWIXT] = PC0KW07.PC7ORDEQ[PC0KWIXT] + 0;
      PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXT];
      VPOASZ02.PCIAFTN[PC0KWIXT] = PC0KW07.PC7ORDEQ[PC0KWIXT] +       PC0KW00.PC7ORDEQ;
      /**/
      VPOASZ02.PCKBFRPR[PC0KWIXT] = PC0KW07.FY4FOBPR[PC0KWIXT];
      VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW07.FY4FOBPR[PC0KWIXT];
      /**/
      if (PC0KW07.PC7ORDEQ[PC0KWIXT] == 0
       && PC0KW01.PC7ORDEQ[PC0KWIXT] > 0)
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.FY4FOBPR[PC0KWIXT];
      end /* ===> load price check*/
      /**/
    end /* ===> size desc exists*/
    /**/
    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
    /**/
  end

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2(); /* ===> insert the size audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K780 ***********************/
end // end PC0K780

// Process item audit "INSERT"
Function PC0K790()
   /* ------------------------------------------------------------*/
   /* - First load the audit record with the maint. update data.*/
     /* then load audit data.*/
   /* ------------------------------------------------------------*/

  set VPOAIT02 empty; /* ===> initialize item audit record*/
  set PCYREC empty; /* ===> initialize pass record*/

  PCYREC.PCYFUNC = "M1"; /* Select max count*/

  PC0KS22(); /* ===> Load new/maintenance row to audit record*/

  PC0KSF0(); /* ===> get next audit item sequence number*/

   /* ------------------------------------------------------------*/
                   /* ADD NEW PRODUCT W/ NEW QUANIT.*/
   /* ------------------------------------------------------------*/

  VPOAIT02.PCJSEQNO = PC0KW00.PCJSEQNO;

  VPOAIT02.PCIBFRN = 0; /* ===>  before*/
  VPOAIT02.PCIAFTN = PC0KW01.PC6TORDE; /* ===> after*/
  VPOAIT02.PCJNETQT = PC0KW01.PC6TORDE;

  VPOAIT02.YOACD = "60"; /* ADD NEW PRODUCT W/ NEW QUANIT.*/

  PC0KSF4(); /* ===> Driver for Get and Load audit record flags*/

  PC0KSF1(); /* ===> insert the item audit record*/

   /* **                                                        ***/
   /* ********************** End of PC0K790 ***********************/
end // end PC0K790

// Format size audit "INSERT"
Function PC0K791()
   /* ----------------------------------------------------------*/
                    /* "INSERT" SIZE AUDIT*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
      /* Note:*/
        /* 1. This process uses the old/saved item key*/
           /* and the saved size record "PC0KW05" that is*/
           /* associated with the key.*/
             /* The saved size record "PC0KW05" that is*/
           /* associated this key is and has been loaded*/
           /* in the obtain the data step.*/
        /* 2. This item was inserted because the old item*/
           /* was cancelled.  If this new item has different*/
           /* Cust Xref the new prices were obtained and were*/
           /* saved in the FOB price templete.  The templete*/
           /* was the source for the size insert and thus*/
           /* is used in inserting the audit as well.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW01.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0KW01.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO;
  VPOASZ02.SY1STNBR = PC0KW01.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW01.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW01.XDMCD;
  VPOASZ02.XQACD = PC0KW01.XQACD;
  VPOASZ02.XOWCD = PC0KW01.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW01.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW01.XPGCD;
  VPOASZ02.XUMCD = PC0KW01.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW01.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW01.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW01.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW01.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW01.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW01.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW01.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW01.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW01.OP1NORID;

  if (PC0KW01.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW01.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

  /* MOVE ' ' TO VPOASZ02.ZFC-CRCY-CD;*/
  VPOASZ02.ZFC-CRCY-CD = PC0KW01.ZFC-CRCY-CD;

  move 0 to VPOASZ02.PCIBFRN[1] for all;
  move 0 to VPOASZ02.PCKBFRPR[1] for all;
  move PC0KW05.PC7ORDEQ to VPOASZ02.PCIAFTN[1] for all;

  if (PC0KW01.PC2CUXID == PC0KW04.PC2CUXID) /* ==> Cust Xref not changed*/
    /**/
    move PC0KW05.FY4FOBPR to VPOASZ02.PCKAFTPR[1] for all;
    /**/
  else
    /**/
     /* ------------------------------------------------------------*/
     /* load the FOB Price from the FOB override templete*/
     /* ------------------------------------------------------------*/
    /**/
    PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/
    /**/
    while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/
      /**/
      if (PC0KW01.SY4IDDSC[PC0KWIXT] > " " /* ===> size desc exists*/
       && PC0KW05.PC7ORDEQ[PC0KWIXT] > 0)  /* QTYs to load*/
        /**/
        VPOASZ02.PCKAFTPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
        /**/
      end /* ===> size desc exists*/
      /**/
      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
      /**/
    end /* ===> while more sizes*/
    /**/
  end /* ===> Cust Xref change check*/

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSF2();

   /* **                                                        ***/
   /* ********************** End of PC0K791 ***********************/
end // end PC0K791

// ===> Process Database update
Function PC0K800()
   /* ------------------------------------------------------------*/
   /* check update confirmation flag*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWUPF == "N") /* ===>update confirmation flag*/
    /**/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01" /* VRAMAC*/
     && COMMAREA.CACLVL[8] != "Y")
      /**/
    else
      PC0K805(); /* ===> check QTY change and data other*/
                                   /* change*/
    end
    /**/
    PCWREC.XXXMSGNO = 84; /* ===>update flag*/
    converseLib.validationFailed(84); /* ===>update flag*/
    PC0KW00.XXXPRCNM = "PC0K800"; /* ===> module identification*/
    PC0KW00.PC0KWUPF = "Y"; /* ===>update confirmation flag*/
    PC0KW00.PC0KWCLF = "N"; /* ===>cancel confirmation flag*/
    exit stack;
  end

  if (PC0KW00.PC0KWUPF == "Y") /* ===>update flag*/
    /**/
    PC0KW00.PC0KWUPF = "N"; /* ===>reset update flag*/
    PC0KW00.PC0KWIUP = "N"; /* ===> init item update flag*/
    PC0KW00.PC0KWSUP = "N"; /* ===> init size update flag*/
    /**/
    XX0XS01(); /* ==> get current date and time for*/
                                   /* D.B. Updates*/
    /**/
    if (PC0KW04.PC-SAP-PO-NBR != " "
     && PC0KW04.XGPCD != "01" /* VRAMAC*/
     && COMMAREA.CACLVL[8] != "Y")
      if (PC0KW01.OP1CUOID != PC0KW04.OP1CUOID /* ===> Cust. Order Nbr.*/
       || PC0KW01.OP1NORID != PC0KW04.OP1NORID) /* ===> Nike Order Nbr.*/
        /**/
        PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
        move PC0KW04 to VPOITM05 withV60Compat;
        VPOITM05.OP1CUOID = PC0KW01.OP1CUOID;
        VPOITM05.OP1NORID = PC0KW01.OP1NORID;
        PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KM001.OP1CUOID;
        VPOITM05.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
        VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;
        PC0KS60();
        /**/
        /**/
        if (PC0KW00.PC0KWIUP == "Y") /* ===> item update flag*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit(); /* ===> commit all changes*/
          PC0KW00.XXXPRCNM = "PC0K800"; /* Module identification*/
          PCWREC.XXXMSGNO = 1; /* ===> update successful*/
          converseLib.validationFailed(1); /* ===> update successful*/
        else /* ===> confirm update flag*/
          PC0KW00.PC0KWMOD = "N"; /* ===> data not modified*/
        end /* ===> confirm update flag*/
        /**/
      end /* ===> SOs update for SAP PO#*/
      /**/
    else
       /* ------------------------------------------------------------*/
       /* If any of the item's key data has changed*/
       /* - Check to see if an item row exist*/
         /* ** YES ***/
        /* - perform merge item routine*/
          /* & update row with the new key and modified data*/
         /* ** NO  ***/
          /* - Check to see if destination changed*/
             /* ** YES ***/
             /* - add new item/size to table with new seq nbr*/
             /* - cancel old item/size from table with old seq nbr*/
             /* ** NO  ***/
             /* - update row with the new key and modified data*/
       /* else*/
       /* - update row with the current key and modified data*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
       || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode of Trans.*/
       || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust. Xref code*/
       || PC0KW01.PC6OETS != PC0KW04.PC6OETS   /* ===> Orig. ETS date*/
       || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA Date*/
       || PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> warehouse code*/
       || PC0KW01.XOWCD != PC0KW04.XOWCD       /* ===> Owner group code*/
       || PC0KW01.OP1CUOID != PC0KW04.OP1CUOID /* ===> Cust. Order Nbr.*/
       || PC0KW01.OP1NORID != PC0KW04.OP1NORID) /* ===> Nike Order Nbr.*/
        /**/
        PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
        /**/
        PC0K810(); /* ===> select (SE) row for existence*/
        /**/
        /**/
        if (SQLCA.VAGen_SQLCODE == 0) /* ===>row exists*/
          /**/


           /* ------------------------------------------------------------*/
           /* row exists therefore merge is required*/
             /* - VPOITM05 is now the merge to row and is save in PC0KW06*/
             /* - load any changes made to the update record*/
             /* - by using the new sequence number, update the D.B.*/
             /* - if Merge/update was successful*/
               /* - the old item qtys will be moved to the existing row*/
           /* ------------------------------------------------------------*/
          /**/
          PC0KS26(); /* ===> save VPOITM05 "merge to" item*/
                                   /* row in PC0KW06*/
          /**/
          /**/
          PC0K820(); /* ===> process merge items routine*/
          /**/
          PC0K830(); /* ===> perform merge the size QTYs*/
          /**/
          /**/
           /* ------------------------------------------------------------*/
           /* (merge/update) was successful*/
           /* the old item must be closed/cancelled*/
             /* - initialize the update record*/
             /* - load the old copy of the row to the update record*/
             /* - load close/cancel criteria to the update record*/
             /* - by using the old sequence number update the D.B.*/
           /* the old item sizes must be zeroed out.*/
           /* ------------------------------------------------------------*/
          /**/
          /**/
          PC0KS14(); /* ===> load corr. data to the update*/
                                   /* record*/
           /* =========> this is a copy of the record before modifications*/
          /**/
          PC0K880(); /* ===> process cancel row*/
          /**/
          PC0K890(); /* ===> process update (u ) item's size*/
                                   /* row*/
          /**/
          /**/
        else /* ===>row does not exist*/
          /**/
           /* ------------------------------------------------------------*/
           /* Row did not exist, therefore update the item in the D.B.*/
           /* use the existing sequence number and update the rows*/
           /* provided that the destination was not changed.*/
              /* If destination, RTA date or Mode of trans changed*/
               /* then*/
                 /* create/insert new rows with new sequence number*/
                 /* cancel old rows with old sequence number*/
               /* else*/
                 /* update current rows with old sequence number*/
                   /* if Quantity reduction*/
                    /* - check to see if status needs update*/
           /* ------------------------------------------------------------*/
          /**/
          /**/
          if (PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> warehouse code*/
           || PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust. Xref code*/
           || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT /* ===> RTA Date*/
           || PC0KW01.YMTCD != PC0KW04.YMTCD       /* ===> Mode of Transportation*/
           || PC0KW01.XOWCD != PC0KW04.XOWCD)      /* ===> Owner group code*/
            /**/
            PC0K850(); /* ===> Do dest. change valid check*/
            /**/
            PC0KS00(); /* ===> get/load new sequence number*/
            /**/
            /**/
            PC0KS14(); /* ===> load corr. to update record*/
                                  /* =========> this is a copy of the*/
                                   /* record before modifications*/
            /**/
            PC0K860(); /* ===> load changes to the update*/
                                   /* record*/
            /**/
            VPOITM05.XIB-IBANK-CD = " "; /* default bnk-cd for insert*/
            VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
            VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT;
            /**/
            PC0KS61(); /* ===> insert (A ) item row*/
            /**/
            PC0K840(); /* ===> perform add the size QTYs*/
            /**/
             /* ------------------------------------------------------------*/
             /* Copy the ship to override address.Donot copy the address*/
             /* of the existing item with the same details in the new PO*/
             /* ------------------------------------------------------------*/
            if (VPOITM05.PC61TMSH == "Y") /* If ship to override address*/
              /**/
              VPOIAD02.PO-REG-CD = PC0KW04.PO-REG-CD; /**/
              VPOIAD02.PC-PO-NBR = PC0KW04.PC3PONBR; /* Use old PO number*/
              VPOIAD02.PC-ITM-SEQ-NBR = PC0KW04.PC6ITMNB; /* Use old seq no*/
              VPOIAD02.XGP-GPC-CD = PC0KW01.XGPCD;
              PC0KSS2(); /* Get override address*/
              VPOIAD02.PC-ITM-SEQ-NBR = VPOITM05.PC6ITMNB; /* Use new itm no*/
              /**/
              PC0KSS3(); /* Add ship to address*/
               /* END;*/
              /**/
            end
            /**/
            /**/
            /**/
            /* ------------------------------------------------------------*/
             /* (insert) was successful*/
             /* the old item must be closed/cancelled*/
               /* - initialize the update record*/
               /* - load the old copy of the row to the update record*/
               /* - load close/cancel criteria to the update record*/
               /* - by using the old sequence number, update the D.B.*/
             /* the old item sizes must be zeroed out.*/
            /**/
            /* ------------------------------------------------------------*/
            /**/
            /**/
            PC0KS14(); /* ===> load corr. to update record*/
                                  /* =========> this is a copy of the*/
                                   /* record before modifications*/
            /**/
            PC0K880(); /* ===> load cancel criteria to update*/
                                   /* record*/
            /**/
            PC0K890(); /* ===> process update (u ) item's size*/
                                   /* row*/
            /**/
            /**/
          else /* ===> no destination change*/
            /**/
            /**/
            /* ------------------------------------------------------------*/
             /* Else, Key data change & No (Merge or Dest. change) occurred*/
                   /* update current rows with old sequence number*/
                     /* if Quantity reduction*/
                      /* - check to see if status needs update*/
            /**/
            /* ------------------------------------------------------------*/
            /**/
            /**/
            PC0KS14(); /* ===> load corr. data to  update*/
                                   /* record*/
                                  /* =========> this is a copy of the*/
                                   /* record before modifications*/
            /**/
            /**/
            PC0K860(); /* ===> load changes to the update*/
                                   /* record*/
            /**/
            if (PC0KW01.XGPCD == "02"
             && PC0KW01.PC6TCNCL != PC0KW04.PC6TCNCL)
                                   /* ===> Qtys Cancelled*/
              /**/
              PC0K861(); /* ===> check for status update need*/
              /**/
            end
            /**/
            PC0KS60(); /* ===> Update (UA) item row*/
            /**/
            PC0K870(); /* ===> process update (U ) item's size*/
                                   /* row*/
            /**/
            /**/
            /**/
            /* ------------------------------------------------------------*/
             /* If the status of the Item row was update, call the*/
             /* subroutine that will update the status of the related*/
             /* P.O. Header row and write an audit, if necessary.*/
            /**/
            /* ------------------------------------------------------------*/
            /**/
            if (VPOITM05.PC6STAT != PC0KW04.PC6STAT) /* ===> status updated*/
              /**/
              set PC8REC empty; /* ===>initialize record*/
              /**/
              PC8REC.XGPCD = PC0KW01.XGPCD; /* ===>GPC Code*/
              PC8REC.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>P.O. reg*/
              PC8REC.PC3PONBR = PC0KW01.PC3PONBR; /* ===>P.O. Number*/
              PC8REC.YACCD = PC0KW01.YACCD; /* ===>audit comment code*/
              /**/
              XPPC010(); /* ===> call Update P.O. Header Status*/
              /**/
            end /* ===> status updated*/
            /**/
            /**/
          end /* ===> change in destination check*/
          /**/
        end /* ===> SQL = 0 merge item check*/
        /**/
        /**/
        /**/
      else /* ===> key data has not changed*/
        /**/
         /* ------------------------------------------------------------*/
         /* Since item key data was not changed*/
         /* - initialize the update record*/
         /* - load the saved copy of the item row to the update record*/
         /* - load the changes to the item row to the update record*/
         /* - by using the old sequence number, update the D.B.*/
         /* ------------------------------------------------------------*/
        /**/
        /**/
        PC0KS14(); /* ===> load corr. data to the update*/
                                   /* record*/
        /**/
        PC0K860(); /* ===> load the changes to the update*/
                                   /* record*/
        /**/
        if (PC0KW01.XGPCD == "02"
         && PC0KW01.PC6TCNCL != PC0KW04.PC6TCNCL) /* ===> Qtys Cancelled*/
          /**/
          PC0K861(); /* ===> check for status update need*/
          /**/
        end
        /**/
        if (PC0KW00.PC0KWIUP == "Y") /* ===> item update flag*/
          PC0KS60(); /* ===> update (UA) item row*/
        end /* ===> item's key data changed*/
        /**/
        PC0K870(); /* ===> process update (U ) item's size*/
                                   /* row*/
        /**/
         /* ------------------------------------------------------------*/
         /* If the status of the Item row was update, call the*/
         /* subroutine that will update the status of the related*/
         /* P.O. Header row and write an audit if necessary.*/
         /* ------------------------------------------------------------*/
        /**/
        if (VPOITM05.PC6STAT != PC0KW04.PC6STAT) /* ===> status updated*/
          /**/
          set PC8REC empty; /* ===>initialize record*/
          /**/
          PC8REC.XGPCD = PC0KW01.XGPCD; /* ===>GPC Code*/
          PC8REC.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>P.O. Number*/
          PC8REC.PC3PONBR = PC0KW01.PC3PONBR; /* ===>P.O. Number*/
          PC8REC.YACCD = PC0KW01.YACCD; /* ===>audit comment code*/
          /**/
          XPPC010(); /* ===> call Update P.O. Header Status*/
          /**/
        end /* ===> status updated*/
        /**/
      end /* ===> item's key data changed*/
      /**/
       /* ------------------------------------------------------------*/
       /* Process the audits for the updates that have occured*/
       /* ------------------------------------------------------------*/
      /**/
      if (PC0KW00.PC0KWIUP == "Y" /* ===> item update flag*/
       || PC0KW00.PC0KWSUP == "Y") /* ===> size update flag*/
        /**/
        if (PC0KW01.XGPCD == "02")
          PC0K600(); /* ===> process "FOOTWEAR" audits*/
                                   /* routine*/
        end
        /**/
        if (PC0KW01.XGPCD == "03")
          PC0K700(); /* ===> process "APPAREL" audits routine*/
        end
        /**/
      end /* ===> confirm update flag*/
      /**/
      /**/
       /* ------------------------------------------------------------*/
      /**/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ===> commit all changes*/
      /**/
       /* ------------------------------------------------------------*/
      /**/
      /**/
      /**/
      if (PC0KW00.PC0KWIUP == "Y" /* ===> item update flag*/
       || PC0KW00.PC0KWSUP == "Y") /* ===> size update flag*/
        /**/
        PC0KW00.XXXPRCNM = "PC0K800"; /* Module identification*/
        PCWREC.XXXMSGNO = 1; /* ===> update successful*/
        /**/
      else /* ===> confirm update flag*/
        /**/
        PC0KW00.PC0KWMOD = "N"; /* ===> data not modified*/
        /**/
      end /* ===> confirm update flag*/
      /**/
    end /* ===> SOs update for SAP PO#*/
    /**/
  end /* ===> confirm update flag*/

   /* **                                                        ***/
   /* ********************** End of PC0K800 ***********************/
end // end PC0K800

// check Data change not sizes
Function PC0K805()
   /* ------------------------------------------------------------*/
     /* - check for data, other than sizes, have been modified.*/
     /* - if true, check to see if qtys have been modified*/
     /* - cannot change size data and other date at the same time*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* LEFT  Map ---> M001*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust Xref*/
   || PC0KW01.XWHCD != PC0KW04.XWHCD       
   || PC0KW01.YMTCD != PC0KW04.YMTCD       /* => mode Code*/
   /* OR PC0KW01.PC6AIRNB NE*/
   /* PC0KW04.PC6AIRNB;*/
   || PC0KW01.PC6OETAL != PC0KW04.PC6OETAL 
   || PC0KW01.PC6RTADT != PC0KW04.PC6RTADT 
   || PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* ===> ETS Date*/
   || PC0KW01.PC6OETS != PC0KW04.PC6OETS   
   || PC0KW01.PC6MICHG != PC0KW04.PC6MICHG /* Misc charges*/
   || PC0KW01.XOWCD != PC0KW04.XOWCD       /* Owner group*/
                                           
   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> M002*/
   /* ------------------------------------------------------------*/
                                           
   || PC0KW01.YOHCD != PC0KW04.YOHCD       /* => Hold Code*/
   || PC0KW01.PC6SZAVL != PC0KW04.PC6SZAVL /* => Size available ring*/
   /* R PC0KW01.OP1CUPO NE*/
   /* PC0KW04.OP1CUPO;/* =>Customer P.O.*/
   || PC0KW01.OP1CUOID != PC0KW04.OP1CUOID /* =>customer order number*/
   || PC0KW01.OP1NORID != PC0KW04.OP1NORID /* =>NIKE order number*/
   || PC0KW01.PC6NILRF != PC0KW04.PC6NILRF /* => Nil Reference Number*/
   || PC0KW01.PC6CONNO != PC0KW04.PC6CONNO /* =>confirmation number*/
   || PC0KW01.OP1CUNDT != PC0KW04.OP1CUNDT) /* =>confirmation number*/

    PC0K806(); /* ====> check sizes/prices modified*/

    if (PC0KW00.PC0KWSUP == "Y")
      PC0KW00.XXXPRCNM = "PC0K805"; /* Module identification*/
      converseLib.validationFailed(378); /* ===>QTYs must be modified seperately*/
      PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
      exit stack; /* ===> exit to display error on the map*/
    end

    if (PC0KW01.PC6PLAN != PC0KW04.PC6PLAN) /* =>plan*/
      PC0KW00.XXXPRCNM = "PC0K805"; /* Module identification*/
      converseLib.validationFailed(322); /* ===>cannot change plan and key data*/
      PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
      exit stack; /* ===> exit to display error on the map*/
    end

  end

  if (PC0KW01.PC6PLAN != PC0KW04.PC6PLAN) /* =>plan*/

    PC0K806(); /* ====> check sizes/prices modified*/

    if (PC0KW00.PC0KWSUP == "Y")
      PC0KW00.XXXPRCNM = "PC0K805"; /* Module identification*/
      converseLib.validationFailed(378); /* ===>QTYs must be modified seperately*/
      PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
      exit stack; /* ===> exit to display error on the map*/
    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K805 ***********************/
end // end PC0K805

// check size data change
Function PC0K806()
   /* ------------------------------------------------------------*/
   /* Process a preliminary check to verify that sizes were not*/
      /* modified.*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSUP = "N"; /* ===> initialize size update flag*/
  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " ") /* ===> size desc exists*/

      if (PC0KW01.PC0KWNQT[PC0KWIXT] != PC0KW05.PC7ORDEQ[PC0KWIXT])
        PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
      end

      /* ------------------------------------------------------------*/
       /* load the FOB Price from the FOB override templete*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWNQT[PC0KWIXT] == 0 /* ===> QTY do not exist*/
       || COMMAREA.CAILVL[10] == "N")    

        /* ======= Next Sentence ==============>*/

      else

        if (PC0KW01.PC7FOBFL[PC0KWIXT] == "Y")

          if (PC0KW05.PC7FOBFL[PC0KWIXT] == "Y")
            if (PC0KW01.FY4FOBPR[PC0KWIXT] != PC0KW05.FY4FOBPR[PC0KWIXT])
              PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
            end
          else
            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
          end

        end

        if (PC0KW01.PC7FOBFL[PC0KWIXT] == "N")

          if (PC0KW05.PC7FOBFL[PC0KWIXT] == "Y")
            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
          end

          if (PC0KW01.FY4FOBPR[PC0KWIXT] != PC0KW05.FY4FOBPR[PC0KWIXT])
            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
          end

        end /* ===> price change*/

      end /* ===> QTYs Exist check*/

    end /* ===> size desc exists*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K806 ***********************/
end // end PC0K806

// Select (S ) item row (exist ?)
Function PC0K810()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>row storage area*/

  VPOITM05.XGPCD = PC0KW01.XGPCD; /* ===>*/
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===> PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS*/
   /* ============>--------------*/
  VPOITM05.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  VPOITM05.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  VPOITM05.XDMCD = PC0KW01.XDMCD; /* ===>*/
  VPOITM05.XQACD = PC0KW01.XQACD; /* ===>*/
  VPOITM05.XOWCD = PC0KW01.XOWCD; /* ===>*/
  VPOITM05.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
  VPOITM05.XPGCD = PC0KW01.XPGCD; /* ===>*/
  VPOITM05.XUMCD = PC0KW01.XUMCD; /* ===>*/

   /* ============>DESTINATION FIELDS*/
   /* ============>------------------*/
  VPOITM05.XWHCD = PC0KW01.XWHCD; /* ===>*/
  VPOITM05.PC2CUXID = PC0KW01.PC2CUXID; /* ===>*/

  VPOITM05.PC6ETSDT = PC0KW01.PC6ETSDT; /* ===> ETS Date*/
  VPOITM05.YMTCD = PC0KW01.YMTCD; /* ===> Mode of transportation*/
  VPOITM05.YSMXDV = PC0KW01.YSMXDV;
  VPOITM05.PC6CXNBR = PC0KW01.PC6CXNBR;
  VPOITM05.PC6RTADT = PC0KW01.PC6RTADT; /* ===> RTA Date*/
  VPOITM05.OP1CUOID = PC0KW01.OP1CUOID;
  VPOITM05.OP1NORID = PC0KW01.OP1NORID;
  if (PC0KW01.OP1CUOID > 0)
    VPOITM05.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOITM05.OP1PARTN = " ";
  end

  /*IF PC0KW01.XGPCD EQ '03';*/
  if (PC0KW01.PC6OETS > 0) /* ===> OETS exists*/
    VPOITM05.PC6OETS = PC0KW01.PC6OETS; /* ===> Orig. ETS Date*/
  else
    if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date modified*/
      VPOITM05.PC6OETS = PC0KW01.PC6ETSDT; /* ===> default OETS Date*/
    end
  end
  /*END;*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SE";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0KW00.XXXPRCNM = "PC0K810"; /* Module identification*/
  set PC0KM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
                                  /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ALT 2";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0K810 ***********************/
end // end PC0K810

// Process "Merge" item logic
Function PC0K820()
   /* ------------------------------------------------------------*/
    /* process the  merge of two item plans*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
      /* - check to see either changed/merge item is open*/
        /* - cannot merge plans if either item is not open*/
   /* ------------------------------------------------------------*/

  if (PC0KW06.PC6STAT == "OP" /* ===>check status*/
   || PC0KW04.PC6STAT == "OP") /* ===>check status*/
   /* next sentence*/
  else
    if (PC0KW06.PC6STAT == "TN" /* ===>check status*/
     && PC0KW04.PC6STAT == "TN") /* ===>check status*/
     /* next sentence*/
    else
      PC0KW00.XXXPRCNM = "PC0K820"; /* Module identification*/
      converseLib.validationFailed(368); /* ===>cannot merging plans with current status*/
      PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
      exit stack; /* ===> exit to display error on the map*/
    end
  end

   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped*/
               /* (for both row destinations (old and new))*/
        /* - cannot merge plans if products have been shipped*/
   /* ------------------------------------------------------------*/

  PC0K821(); /* ===>check for shipped quantities*/

   /* ------------------------------------------------------------*/
      /* - check to see if a vfypo001 row exists*/
        /* - cannot merge plans if either item has receipts data*/
   /* ------------------------------------------------------------*/

  PC0K822(); /* ===>check for receipt data*/

   /* ------------------------------------------------------------*/
   /* Load merge data from changed maintenance item*/
   /* to the current merge to row. (Load Total QTYs)*/
   /* ------------------------------------------------------------*/

  PC0K823(); /* ===>merge data to update record*/

  PC0KS60(); /* ===> update (UA) item row*/

   /* **                                                        ***/
   /* ********************** End of PC0K820 ***********************/
end // end PC0K820

// Check shipped QTYs information
Function PC0K821()
   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped*/
     /* (for both rows product/destinations (old and new))*/
        /* - can not merge plans if products have been shipped*/

   /* Note: 1. the select call record is initialized here.*/
           /* - the non-modifiable data required for the call*/
             /* is loaded in the PC0KS81 statement group*/
           /* - the modifiable/re-calculated data required*/
             /* for the call are loaded here.*/
   /* A97B - Now owner group is a modifiable field, so the*/
         /* 'before' and 'after' owner group values must be*/
          /* loaded in this module.*/
   /* ------------------------------------------------------------*/

  set TSTREC empty; /* ===> initialize record*/

   /* =========> PRODUCT FIELDS  ---> (loaded in PC0KS81)*/
  TSTREC.PC2INSEG = PC0KW04.PC2INSEG; /* ===>*/
  TSTREC.XOWCD = PC0KW04.XOWCD; /* ===>*/

   /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  TSTREC.PC2CUXID = PC0KW04.PC2CUXID; /* ===>*/
  TSTREC.XWHCD = PC0KW04.XWHCD; /* ===>*/

  PC0KS80(); /* ===>get shipped quantities*/

  if (PC0KW00.TSISHPQT != 0) /* ===>products have been shipped*/

    PC0KW00.XXXPRCNM = "PC0K821"; /* Module identification*/
    converseLib.validationFailed(218); /* ===>cannot merge when products have*/
                                   /* been shipped*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
    exit stack; /* ===> exit to display error on the map*/

  else

    if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust Xref*/
     || PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> warehouse code*/
     || PC0KW01.PC2INSEG != PC0KW04.PC2INSEG) /* ===> spec diff code*/

      /* ==========> PRODUCT FIELDS  ---> (loaded in PC0KS81)*/
      /* ==========> --------------  --->  for merge 'to' row*/
      TSTREC.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/
      TSTREC.XOWCD = PC0KW01.XOWCD; /* ===>*/

      /* ==========> DESTINATION FIELDS  ---> (for row after changes)*/
      /* ==========> ------------------  --->  for merge 'to' row*/
      TSTREC.PC2CUXID = PC0KW01.PC2CUXID; /* ===>*/
      TSTREC.XWHCD = PC0KW01.XWHCD; /* ===>*/

      PC0KS80(); /* ===>get shipped quantities*/

      if (PC0KW00.TSISHPQT != 0) /* ===>products have been shipped*/

        PC0KW00.XXXPRCNM = "PC0K821"; /* Module identification*/
        converseLib.validationFailed(218); /* ===>cannot merge when products*/
                                   /* shipped*/
        PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
        exit stack; /* ===> exit to display error on the map*/

      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K821 ***********************/
end // end PC0K821

// Check receipt data information
Function PC0K822()
   /* ------------------------------------------------------------*/
      /* - check to see if item has reicept data*/
     /* (for both rows product/destinations (old and new))*/
        /* - can not merge plans if products have receipt data*/

    /* Note: The only data fields that differ between*/
          /* the old and new record is:*/
           /* -   spec diff code and warehouse code*/
           /* -   the other data is loaded in PC0KS91*/
     /* A97B - now owner group can be changed, so the 'before'*/
          /* and 'after' values must be loaded in this module*/
   /* ------------------------------------------------------------*/

  set VFYPO002 empty;

   /* =========> PRODUCT FIELDS  ---> (loaded in PC0KS91)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.PC2INSEG = PC0KW04.PC2INSEG; /* ===>*/

   /* =========> owner group field*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.XOWCD = "*";
  if (PC0KW01.XWHCD == "09") /* --> if apparel*/
         /* leave OG '*'*/
  else
    if (PC0KW01.XGPCD == "03") /* --> if apparel*/
      set PG2REC empty;
      PG2REC.XGPCD = PC0KW01.XGPCD;
      PG2REC.SY1STNBR = PC0KW01.SY1STNBR;
      PG2REC.SY2CLRID = PC0KW01.SY2CLRID;
      PG2REC.XDMCD = PC0KW01.XDMCD;
      XSPG202(); /* read the syclr rec*/
      if (PG2REC.XFMCD == "21" /* if finished good*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC0KW04.XOWCD; /* ===> owner group*/
      end
    end
  end

   /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.XWHCD = PC0KW04.XWHCD; /* ===>*/

  PC0KS90(); /* ===>get receipt data*/

  if (PC0KW00.PCMRCPTQ != 0) /* ===>products has receipt data*/

    PC0KW00.XXXPRCNM = "PC0K822"; /* Module identification*/
    converseLib.validationFailed(218); /* ===>cannot merge ,products shipped/received*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
    exit stack; /* ===> exit to display error on the map*/

  else

    if (PC0KW01.XWHCD != PC0KW04.XWHCD /* ===> warehouse code*/
     || PC0KW01.PC2INSEG != PC0KW04.PC2INSEG) /* ===>spec diff code*/

      set VFYPO002 empty;

      /* =========> PRODUCT FIELDS  ---> (loaded in PC0KS81)*/
      /* =========> ------------------  --->  for merge 'to' row*/
      VFYPO002.PC2INSEG = PC0KW01.PC2INSEG; /* ===>*/

      /* =========> owner group field*/
      /* =========> ------------------  --->  for merge 'from' row*/
      VFYPO002.XOWCD = "*";
      if (PC0KW01.XGPCD == "03") /* --> if apparel*/
        set PG2REC empty;
        PG2REC.XGPCD = PC0KW01.XGPCD;
        PG2REC.SY1STNBR = PC0KW01.SY1STNBR;
        PG2REC.SY2CLRID = PC0KW01.SY2CLRID;
        PG2REC.XDMCD = PC0KW01.XDMCD;
        XSPG202(); /* read the syclr rec*/
        if (PG2REC.XFMCD == "21" /* if finished good*/
         || PG2REC.SY1BSTNB > " ")
          VFYPO002.XOWCD = PC0KW01.XOWCD; /* ===> owner group*/
        end
      end

      /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
      /* ==========> -----------------------> merge for 'to' row*/
      VFYPO002.XWHCD = PC0KW01.XWHCD; /* ===>*/

      PC0KS90(); /* ===>get shipped quantities*/

      if (PC0KW00.PCMRCPTQ != 0) /* ===>products has receipt data*/

        PC0KW00.XXXPRCNM = "PC0K822"; /* Module identification*/
        converseLib.validationFailed(218); /* ===>cannot merge ,products shipped/received*/
        PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
        exit stack; /* ===> exit to display error on the map*/

      end

    end

  end

   /* **                                                        ***/
   /* ********************** End of PC0K822 ***********************/
end // end PC0K822

// "Load"  item data "Merge"
Function PC0K823()
   /* ------------------------------------------------------------*/
    /* merge the maintenanced Item's QTYs to requested Items QTYs*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty;

  PC0KS16(); /* ===> load saved copy of "merge to" row to update record*/

  VPOITM05.PC6TORIG = PC0KW06.PC6TORIG + PC0KW01.PC6TORIG;
  VPOITM05.PC6TORDE = PC0KW06.PC6TORDE + PC0KW01.PC6TORDE;
  VPOITM05.PC6MICHG = PC0KW06.PC6MICHG + PC0KW01.PC6MICHG;
  VPOITM05.PC6TADD = PC0KW06.PC6TADD + PC0KW01.PC6TADD;
  VPOITM05.PC6TCNCL = PC0KW06.PC6TCNCL + PC0KW01.PC6TCNCL;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0K823 ***********************/
end // end PC0K823

// Process Size QTYs "Merge"
Function PC0K830()
   /* ------------------------------------------------------------*/
   /* Process the merge of two item's Size QTYs.*/
      /* Select the size row that will merged to*/
         /* if it exist proceed to update it*/
         /* else error*/
   /* ------------------------------------------------------------*/

  PC0KSB6(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    PC0KS27(); /* ===> save "Merge To" size row for*/
                                   /* audits in PC0KW07*/

    /* ------------------------------------------------------------*/
     /* load the sizes to the size record & do update call*/
       /* - the QTYs loaded to the merged row are on the display*/
         /* record.  (ie: the old item row.)*/
    /* ------------------------------------------------------------*/

    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/

    while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/

      PC0KW00.PC7ORIGQ = PC0KW01.PC7ORIGQ[PC0KWIXT];
      VPOSIZ02.PC7ORIGQ[PC0KWIXT] = VPOSIZ02.PC7ORIGQ[PC0KWIXT] +       PC0KW00.PC7ORIGQ;

      if (VPOSIZ02.PC7ORDEQ[PC0KWIXT] == 0)
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.FY4FOBPR[PC0KWIXT];
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = PC0KW01.PC7FOBFL[PC0KWIXT];
      end

      PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXT];
      VPOSIZ02.PC7ORDEQ[PC0KWIXT] = VPOSIZ02.PC7ORDEQ[PC0KWIXT] +       PC0KW00.PC7ORDEQ;

      PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;

    end

    PC0KSD0(); /* ===> update size row*/

  else

    converseLib.validationFailed(12); /* ===> updated by another*/
    PC0KW00.XXXPRCNM = "PC0K830"; /* ===> process identification*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> ROLL BACK ALL CHANGES*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K830 ***********************/
end // end PC0K830

// process add new Size QTYs
Function PC0K840()
   /* ------------------------------------------------------------*/
   /* Process the add of new item's Size QTYs row.*/
   /* ------------------------------------------------------------*/

  PC0KSB6(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/
    /**/
    PC0KW00.XXXPRCNM = "PC0K840"; /* Module identification*/
    set PC0KM001.PC3PONBR cursor;
    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/
    /**/
    PC0KS99(); /* ===> re-initialize indexes and sizes*/
    /**/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/
    /**/
    exit stack; /* Return to display map*/
    /**/
  else
    /**/
     /* ------------------------------------------------------------*/
     /* Initialize the key information for select call INSERT*/
     /* ------------------------------------------------------------*/
    /**/
    set VPOSIZ02 empty; /* ====> row storage area*/
    /**/
    /**/
    VPOSIZ02.XGPCD = PC0KW01.XGPCD;
    VPOSIZ02.PO-REG-CD = PC0KW01.PO-REG-CD;
    VPOSIZ02.PC3PONBR = PC0KW01.PC3PONBR;
    VPOSIZ02.PC6ITMNB = PC0KW01.PC6ITMNB; /* ===> current style*/
    /* MOVE PC0KW05.ZFC-CRCY-CD TO VPOSIZ02.ZFC-CRCY-CD;*/
    /**/
    /**/
     /* ------------------------------------------------------------*/
      /* If the Customer Xref did not change*/
       /* then - use the prices from the original item's sizes,*/
              /* which were saved in PC0KW05 in "Obtain data step"*/
       /* else - use the prices from the FOB Price Templete*/
     /* ------------------------------------------------------------*/
    /**/
    if (PC0KW01.PC2CUXID == PC0KW04.PC2CUXID) /* ==> Cust Xref not changed*/
      /**/
      move PC0KW05.PC7ORIGQ to VPOSIZ02.PC7ORIGQ[1] for all;
                                   /* ===>load display record*/
      move PC0KW05.PC7ORDEQ to VPOSIZ02.PC7ORDEQ[1] for all; /* ===>load*/
      move PC0KW05.PC7FOBFL to VPOSIZ02.PC7FOBFL[1] for all; /* ===>load*/
      move PC0KW05.FY4FOBPR to VPOSIZ02.FY4FOBPR[1] for all; /* ===>load*/
      /**/
    else
      /**/
      move "N" to VPOSIZ02.PC7FOBFL[1] for all;
      PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/
      /**/
      while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/
        /**/
        if (PC0KW01.SY4IDDSC[PC0KWIXT] > " " /* ===> size desc exists*/
         && PC0KW05.PC7ORDEQ[PC0KWIXT] > 0)  /* QTYs to load*/
          /**/
          VPOSIZ02.PC7ORIGQ[PC0KWIXT] = PC0KW05.PC7ORIGQ[PC0KWIXT];
          VPOSIZ02.PC7ORDEQ[PC0KWIXT] = PC0KW05.PC7ORDEQ[PC0KWIXT];
          /**/
           /* ------------------------------------------------------------*/
           /* load the FOB Price from the FOB override templete*/
           /* ------------------------------------------------------------*/
          /**/
          VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
          VPOSIZ02.PC7FOBFL[PC0KWIXT] = PC0KW01.PC0KWVRF[PC0KWIXT];
          /**/
        end /* ===> size desc exists*/
        /**/
        PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
        /**/
      end
      /**/
    end
    /**/
    /**/
    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    /**/
    PC0KSD1(); /* ===> Insert (A ) size row*/
    /**/
  end

   /* **                                                        ***/
   /* ********************** End of PC0K840 ***********************/
end // end PC0K840

// ** Destination Change check **
Function PC0K850()
   /* ------------------------------------------------------------*/
    /* Process the  change in destination*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped*/
               /* (for row destinations (old)*/
        /* - cannot change plans if products have been shipped*/
   /* ------------------------------------------------------------*/

  PC0K851(); /* ===>check for shipped quantities*/

   /* ------------------------------------------------------------*/
      /* - check to see if a VFYPO001 row exists*/
        /* - cannot merge plans if item has receipts data*/
   /* ------------------------------------------------------------*/

  PC0K852(); /* ===>check for receipt data*/

   /* ------------------------------------------------------------*/
      /* - if the above conditions satisfied & customer changed,*/
          /* & the customer xref changed  (ie. ISEG & div)*/
        /* - then (based of the key data for the new item)*/
          /* - Get factory FOB Price*/
          /* - Re-build FOB Price templete for the new*/
            /* item's prices.*/

      /* Note:*/
           /* Since the maintenance item's W.S. contains the*/
          /* the key data for the new item to be created,*/
         /* the process used in the obtain the data can be*/
         /* used to build the FOB templete.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ==> Cust Xref changed*/

    PC0K318(); /* ===> Get Factory FOB Price*/

    PC0K317(); /* ===> Build FOB Price Templete*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K850 ***********************/
end // end PC0K850

// Check shipped QTYs information
Function PC0K851()
   /* ------------------------------------------------------------*/
   /* --->*/
  return; /* ==========> This code is by-passed for now (06/13/90)*/
   /* --->               ------------------------------*/
   /* ------------------------------------------------------------*/
   /* --*/
   /* ------------------------------------------------------------*/
      /* - check to see if qtys have been shipped*/
     /* (for product/destination (old row))*/
        /* - cannot change dest. if products have been shipped*/
          /* go to split item application.*/
   /* ------------------------------------------------------------*/

  set TSTREC empty; /* ===> initialize record*/

   /* =========> PRODUCT FIELDS  ---> (loaded in PC0KS81)*/
  TSTREC.PC2INSEG = PC0KW04.PC2INSEG; /* ===>*/

   /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  TSTREC.PC2CUXID = PC0KW04.PC2CUXID; /* ===>*/
  TSTREC.XWHCD = PC0KW04.XWHCD; /* ===>*/

  PC0KW00.TSISHPQT = 0; /* ===>*/

  PC0KS80(); /* ===>get shipped quantities*/

  if (PC0KW00.TSISHPQT != 0) /* ===>products have been shipped*/

    PC0KW00.XXXPRCNM = "PC0K821"; /* Module identification*/
    converseLib.validationFailed(262); /* ===>cannot change destination QTYs shipped*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
    exit stack; /* ===> exit to display error on the map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K851 ***********************/
end // end PC0K851

// Check receipt data information
Function PC0K852()
   /* ------------------------------------------------------------*/
   /* --->*/
  return; /* ===> This code is by-passed for now (06/13/90)*/
   /* --->       ------------------------------*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* - check to see if item has reicept data*/
    /* (for product/destination (old row)*/
     /* - cannot change destination if products have receipt data*/
   /* ------------------------------------------------------------*/

  set VFYPO002 empty;

   /* =========> PRODUCT FIELDS  ---> (loaded in PC0KS91)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.PC2INSEG = PC0KW04.PC2INSEG; /* Spec code*/

   /* =========> owner group field*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.XOWCD = "*";
  if (PC0KW01.XWHCD == "09") /* --> if promo*/
        /* leave OG = '*'*/
  else
    if (PC0KW01.XGPCD == "03") /* --> if apparel*/
      set PG2REC empty;
      PG2REC.XGPCD = PC0KW01.XGPCD;
      PG2REC.SY1STNBR = PC0KW01.SY1STNBR;
      PG2REC.SY2CLRID = PC0KW01.SY2CLRID;
      PG2REC.XDMCD = PC0KW01.XDMCD;
      XSPG202(); /* read the syclr rec*/
      if (PG2REC.XFMCD == "21" /* if finished good*/
       || PG2REC.SY1BSTNB > " ")
        VFYPO002.XOWCD = PC0KW04.XOWCD; /* ===> owner group*/
      end
    end
  end

   /* =========> DESTINATION FIELDS  ---> (for row before changes)*/
   /* =========> ------------------  --->  for merge 'from' row*/
  VFYPO002.XWHCD = PC0KW04.XWHCD; /* ===>*/

  PC0KS90(); /* ===>get receipt data*/

  if (PC0KW00.PCMRCPTQ != 0) /* ===>products has reciepts*/

    PC0KW00.XXXPRCNM = "PC0K852"; /* Module identification*/
    converseLib.validationFailed(262); /* ===>cannot change dest. when products shipped*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request map 1*/
    exit stack; /* ===> exit to display error on the map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K852 ***********************/
end // end PC0K852

// "Load" changes to updt record
Function PC0K860()
   /* ------------------------------------------------------------*/
   /* Load modified data from left map  (PC0KM001)*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIUP = "N"; /* ===> item update flag*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (PC0KW01.PG1SC4CD != PC0KW04.PG1SC4CD)
    VPOITM05.PG1SC4CD = PC0KW01.PG1SC4CD;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6PLAN != PC0KW04.PC6PLAN)
    VPOITM05.PC6PLAN = PC0KW01.PC6PLAN;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

   /* ------------------------------------------------------------*/
   /* if the warehouse or Customer Xref code changed then load*/
   /* the update criteria related to change.*/
   /* Several fields may need to be update depending on change.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust Xref*/
   || PC0KW01.XWHCD != PC0KW04.XWHCD)     

    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/

    VPOITM05.PC61TMSH = "N"; /* ===> One Time Ship Override Flag*/

    if (PC0KW01.YSMXDV != PC0KW04.YSMXDV) /* ===> Division*/
      VPOITM05.YSMXDV = PC0KW01.YSMXDV;
    end

    if (PC0KW01.XDSCD != PC0KW04.XDSCD) /* ===> direct ship*/
      VPOITM05.XDSCD = PC0KW01.XDSCD;
    end

    if (PC0KW01.PC2INSEG != PC0KW04.PC2INSEG) /* ===> spec diff*/
      VPOITM05.PC2INSEG = PC0KW01.PC2INSEG;
    end

    if (PC0KW01.PC6XCTCD != PC0KW04.PC6XCTCD) /* ===> dest. country code*/
      VPOITM05.PC6XCTCD = PC0KW01.PC6XCTCD; /* ===> ultimate*/
    end

    if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID) /* ===> Cust Xref*/
      VPOITM05.PC2CUXID = PC0KW01.PC2CUXID; /* ===> Cust Xref*/
    end

    if (PC0KW01.XWHCD != PC0KW04.XWHCD)
      VPOITM05.XWHCD = PC0KW01.XWHCD;
    end

    /* 05/03/00 Change begins*/
    if (PC0KW00.PC0K-JAP-SW == "Y")
      PC0KW00.PC0K-JAP-SW = "N";
      if (PC0KW00.PC0KXWHCD == PC0KW01.XWHCD)
        VPOITM05.XWHCD = VPRDCU03.XWHCD;
        if (VPRDCU03.XWHCD == " ")
          if (PC0KW01.XDSCD != "1")
            VPOITM05.XDSCD = "1"; /* ===>default direct ship cd*/
          end
        end
        if (VPRDCU03.XWHCD > " ")
          if (VPRDCU03.YPCCD == "N"
           && PC0KW01.XDSCD != " ")
            VPOITM05.XDSCD = " "; /* ===>default non DRS code*/
          end
          if (VPRDCU03.YPCCD == "C"
           || VPRDCU03.YPCCD == "S")
            if (PC0KW01.XDSCD != "2")
              VPOITM05.XDSCD = "2"; /* ===>default indir/dir shi*/
            end
          end
        end
      end
    end
    /* 05/03/00 Change ends*/

  end /* ===>Cust or Whse Changed*/

   /* ------------------------------------------------------------*/
   /* if the Mode changed then load the update criteria related*/
   /* to change.*/
   /* Several fields may need to be update depending on change.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.YMTCD != PC0KW04.YMTCD) /* => mode Code*/

    VPOITM05.YMTCD = PC0KW01.YMTCD; /* => mode Code*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/

    if (PC0KW01.YMTCD != "AF")
      PC0KW01.PC6AIRNB = 0;
      VPOITM05.PC6AIRNB = 0;
      VPOITM05.PC6AIRDT = 0;
      VPOITM05.PC-NIKE-AFRGT-PCT = 0;
      PC0KW01.PC-NIKE-AFRGT-PCT = 0;
      VPOITM05.PC-FCTY-AFRGT-PCT = 0;
      PC0KW01.PC-FCTY-AFRGT-PCT = 0;
    end

  end

  if (PC0KW01.PC6AIRNB != PC0KW04.PC6AIRNB)
    VPOITM05.PC6AIRNB = PC0KW01.PC6AIRNB;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC-NIKE-AFRGT-PCT != PC0KW04.PC-NIKE-AFRGT-PCT
   || PC0KW01.PC-FCTY-AFRGT-PCT != PC0KW04.PC-FCTY-AFRGT-PCT)
    VPOITM05.PC-NIKE-AFRGT-PCT = PC0KW01.PC-NIKE-AFRGT-PCT;
    VPOITM05.PC-FCTY-AFRGT-PCT = PC0KW01.PC-FCTY-AFRGT-PCT;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

   /* ------------------------------------------------------------*/
   /* if the Owner Group changed, load the new Owner Group*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.XOWCD != PC0KW04.XOWCD) /* => owner group*/
    VPOITM05.XOWCD = PC0KW01.XOWCD; /* => owner group*/
    PC0KW00.PC0KWIUP = "Y"; /* => item update flag*/
    VPOITM05.PC61TMSH = "N"; /* ===> One Time Ship Override Flag*/
  end

   /* ------------------------------------------------------------*/
   /* Load Key Date update criteria & related modified data from*/
   /* screen PC0KM001.*/
   /* ------------------------------------------------------------*/

  if (PC0KW04.XGPCD == "02"                
   && PC0KW01.PC6ETALF != PC0KW04.PC6ETALF /* ===> ETAL Default flag*/
   && PC0KW01.PC6ETSDT == PC0KW04.PC6ETSDT) /* ===> ETS Date (not changed)*/

    if (PC0KW04.PC4ORTYP == "FT"
     || PC0KW04.PC4ORTYP == "OR"
     || PC0KW04.PC4ORTYP == "S1"
     || PC0KW04.PC4ORTYP == "S4")
      VPOITM05.PC6ETALF = PC0KW01.PC6ETALF; /* ===>default flag*/
      PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
    end /* ===> GPC = '02' & 'FT' processing*/

  end /* ===> GPC = '02' & 'FT' processing*/

  if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* ===> ETS Date*/

    if (PC0KW04.XGPCD == "02")
      if (PC0KW04.PC4ORTYP == "FT"
       || PC0KW04.PC4ORTYP == "OR"
       || PC0KW04.PC4ORTYP == "S1"
       || PC0KW04.PC4ORTYP == "S4")
        PC0KW01.PC6OETAL = 0; /* ===> reset override ETAL date*/
        VPOITM05.PC6ETALF = "N"; /* ===> reset ETAL default flag*/
      end /* ===> GPC = '02' & 'FT' processing*/
    end /* ===> GPC = '02' & 'FT' processing*/

    if (PC0KW04.XGPCD == "03")
      if (PC0KW04.PC6OETS == 0)
        VPOITM05.PC6OETS = PC0KW01.PC6ETSDT; /* ===> original ETS Date*/
      end
      VPOITM05.PC6PETS = PC0KW04.PC6ETSDT; /* ===> previous ETS Date*/
    end /* ===> GPC = '03' processing*/

    VPOITM05.PC6ETSDT = PC0KW01.PC6ETSDT;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/

  end /* ===> ETS date processing*/

  if (PC0KW01.PC6OETAL != PC0KW04.PC6OETAL)
    VPOITM05.PC6OETAL = PC0KW01.PC6OETAL;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6MICHG != PC0KW04.PC6MICHG)
    VPOITM05.PC6MICHG = PC0KW01.PC6MICHG;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6RTADT != PC0KW04.PC6RTADT)
    VPOITM05.PC6RTADT = PC0KW01.PC6RTADT;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6OETS != PC0KW04.PC6OETS)
    VPOITM05.PC6OETS = PC0KW01.PC6OETS;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

   /* ------------------------------------------------------------*/
   /* Load Quantity update criteria related modified data from*/
   /* screen PC0KM001.*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6TORDE != PC0KW04.PC6TORDE)
    VPOITM05.PC6TORDE = PC0KW01.PC6TORDE;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6TADD != PC0KW04.PC6TADD)
    VPOITM05.PC6TADD = PC0KW01.PC6TADD;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6TCNCL != PC0KW04.PC6TCNCL)
    VPOITM05.PC6TCNCL = PC0KW01.PC6TCNCL;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

   /* ------------------------------------------------------------*/
   /* Load modified data from right map  (PC0KM002)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* RIGHT Map ---> M002*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.YOHCD != PC0KW04.YOHCD) /* => Hold Code*/
    VPOITM05.YOHCD = PC0KW01.YOHCD; /* => Hold Code*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6SZAVL != PC0KW04.PC6SZAVL) /* => Size available ring*/
    VPOITM05.PC6SZAVL = PC0KW01.PC6SZAVL; /* => Size available ring*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.OP1CUPO != PC0KW04.OP1CUPO) /* =>Customer P.O.*/
    VPOITM05.OP1CUPO = PC0KW01.OP1CUPO; /* =>*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  VPOITM05.OP1CUNDT = PC0KW01.OP1CUNDT; /* =>Customer need date*/
  PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* =>Cust xref*/
   && OP1REC.OP1CUPO > " ")               
    VPOITM05.OP1CUPO = OP1REC.OP1CUPO; /* =>*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.OP1CUOID != PC0KW04.OP1CUOID) /* =>customer order number*/
    VPOITM05.OP1CUOID = PC0KW01.OP1CUOID; /* =>*/
    if (PC0KW01.OP1CUOID > 0)
      PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW01.OP1CUOID;
      VPOITM05.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
    else
      VPOITM05.OP1PARTN = " ";
    end
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.OP1NORID != PC0KW04.OP1NORID) /* =>NIKE order number*/
    VPOITM05.OP1NORID = PC0KW01.OP1NORID; /* =>*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6NILRF != PC0KW04.PC6NILRF) /* => Nil Reference Number*/
    VPOITM05.PC6NILRF = PC0KW01.PC6NILRF; /* => Nil Reference Number*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.PC6CONNO != PC0KW04.PC6CONNO) /* =>confirmation number*/
    VPOITM05.PC6CONNO = PC0KW01.PC6CONNO; /* =>*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

  if (PC0KW01.FB-LATE-BK-FL != PC0KW04.FB-LATE-BK-FL)
    VPOITM05.FB-LATE-BK-FL = PC0KW01.FB-LATE-BK-FL;
    VPOITM05.FB-LATE-BK-FL-MDT = XX0XW01.XX0XWDAT;
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
  end

   /* ------------------------------------------------------------*/
      /* Item sequence number changes when there is a*/
      /* destination type change. Item cancelled and re-created*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6ITMNB != PC0KW04.PC6ITMNB) /* =>item sequence number*/
    VPOITM05.PC6ITMNB = PC0KW01.PC6ITMNB; /* =>*/
    PC0KW00.PC0KWIUP = "Y"; /* ===> item update flag*/
    VPOITM05.PC3SIFL = "N"; /* ===> Special Instruction Flag*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K860 ***********************/
end // end PC0K860

// Check for  status update need
Function PC0K861()

   /* ------------------------------------------------------------*/
    /* This module is used as a driver to determine which kind*/
    /* of status check should be performed.*/
      /* It uses the "Balance to Ship" subroutine's totals.*/

   /* If the maintenance row has a QTY reduction request*/
     /* and GPC = "02" this module will be executed.*/

   /* - Check to see if the Total Shipped QTYs = 0*/
     /* - if false: no status change required, product in transit*/
   /* - Check to see if the Total Received QTYs > 0*/
     /* - if true : perform "Check 'NC' status update need."*/
     /* - if false: perform "Check 'CX' status update need."*/

   /* ------------------------------------------------------------*/

  if (PC5REC.PC5TSHIP == 0) /* ===> no QTYs in shipment (VCPLIT01)*/

    if (PC5REC.PC5TRECV > 0) /* ===> if QTYs received    (VFYPO001)*/

      PC0K862(); /* ===> check all QTYs received*/

      if (PC0KW00.PC0KWFL1 == "N") /* ===> QTYs still left to receive*/
        VPOITM05.PC6STAT = "NC";
                                   /* ===> QTYs still left to receive*/
        PC0KW01.PC6STAT = "NC";
                                   /* ===> QTYs still left ot receive*/
        VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
      end

    else /* ===> No Shipped or Received QTYS*/

      PC0K863(); /* ===> check all QTYs cancelled*/

      if (PC0KW00.PC0KWFL1 == "N") /* ===> QTYs still left on order*/
        VPOITM05.PC6STAT = "CX"; /* ===>*/
        PC0KW01.PC6STAT = "CX"; /* ===>*/
        VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
        VPOITM05.PC6CXNBR = 1;
      end

    end /* ===> if QTYs received    (VFYPO001)*/

  end /* ===> no QTYs in shipment (VCPLIT01)*/

   /* **                                                        ***/
   /* ********************** End of PC0K861 ***********************/
end // end PC0K861

// Check "NC" status update need
Function PC0K862()
   /* ------------------------------------------------------------*/

     /* If the maintenance "Split From" row has QTYs*/
      /* -Check to see if the Balance to Ship  >= On Order*/
       /* - if true:  Check to see if "All QTYs" cancelled*/
               /* **  true: O.K. to close item "FC"*/
               /* ** false: still QTYs left to receive and Item*/
                         /* cannot be close "FC"*/
       /* - if false: Check to see if "Balance to Ship" cancelled*/
               /* **  true: O.K. to close item "FC"*/
               /* ** false: still QTYs left to receive and Item*/
                         /* cannot be close "FC"*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXR = 1; /* ===> initialize record index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> init QTYs still left to receive*/

  while (PC0KW00.PC0KWIXR <= 40)

    if (PC0KW01.SY4IDDSC[PC0KWIXR] > " " /* ==> valid siz desc.*/
     && PC0KW01.PC7ORDEQ[PC0KWIXR] > 0)  /* ==> on-order QTYs exist*/

      if (PC5REC.PC5BALC[PC0KWIXR] >= PC0KW01.PC7ORDEQ[PC0KWIXR])

        /* ------------------------------------------------------------*/
           /* Check to see if "All QTYs" canceled*/
        /* ------------------------------------------------------------*/

        if (PC0KW01.PC0KWNQT[PC0KWIXR] == 0) /* ===> all QTYs cancelled*/
          /* ========= Next Sentence ===============>*/
        else
          PC0KW00.PC0KWFL1 = "Y";
                                   /* ===> QTYs still left to receive*/
        end

      else /* ===> check QTYs cancelled*/

        /* ------------------------------------------------------------*/
           /* Check to see if "Balance to Ship" QTYs cancelled*/
           /* - if QTYs not added to size*/
                 /* - get QTY minimum order allowed*/
                    /* (min-order = on-order - balance to ship)*/
                /* - if min-order ne new QTYs-order*/
                    /* then QTYs still left to receive.*/
             /* else*/
                /* - then QTYs still left to receive. (new order QTYs)*/
        /* ------------------------------------------------------------*/

        if (PC0KW01.PC7ORDEQ[PC0KWIXR] >= PC0KW01.PC0KWNQT[PC0KWIXR])

          PC0KW00.PC0KWBAL = PC5REC.PC5BALC[PC0KWIXR];
          PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXR] - PC0KW00.PC0KWBAL;

          /* --> if minimum-order = new-order*/
          if (PC0KW00.PC7ORDEQ == PC0KW01.PC0KWNQT[PC0KWIXR])
            /* ========= Next Sentence ===============>*/
          else
            PC0KW00.PC0KWFL1 = "Y";
                                   /* ===> QTYs still left to receive*/
          end

        else /* ===> QTYs add to size*/

          PC0KW00.PC0KWFL1 = "Y";
                                   /* ===> QTYs still left to receive*/

        end /* ===> on-order > new QTYs request*/
                                   /* check*/

      end /* ===> Balance to ship > on order check*/

    end /* ===> size QTYs on-order exist*/

    PC0KW00.PC0KWIXR = PC0KW00.PC0KWIXR + 1;

  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K862 ***********************/
end // end PC0K862

// check "CX" status update need
Function PC0K863()
   /* ------------------------------------------------------------*/

     /* If the maintenance  row has QTYs*/
      /* -Since this module is only executed if there*/
        /* is no shipment product data (VCPLIT01)*/
       /* and no receipt  product data (VFYPO001)*/

     /* Check to see if all QTYs have been reduced to zero*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXR = 1; /* ===> initialize record index*/
  PC0KW00.PC0KWFL1 = "N"; /* ===> init QTYs still left to receive*/

  while (PC0KW00.PC0KWIXR <= 40)

    if (PC0KW01.SY4IDDSC[PC0KWIXR] > " " /* ==> Size desc. exist*/
     && PC0KW01.PC7ORDEQ[PC0KWIXR] >= 0) /* ==> on-order QTYs exist*/

      /* ------------------------------------------------------------*/
         /* Check to see if "All QTYs" cancelled*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWNQT[PC0KWIXR] == 0) /* ===> all QTYs cancelled*/
        /* ========= Next Sentence ===============>*/
      else
        PC0KW00.PC0KWFL1 = "Y"; /* ===> QTYs still on order*/
      end

    end /* ===> sizes QTYs on-order exist*/

    PC0KW00.PC0KWIXR = PC0KW00.PC0KWIXR + 1;

  end /* ===> while more sizes*/

   /* **                                                        ***/
   /* ********************** End of PC0K863 ***********************/
end // end PC0K863

// process Size QTYs "NO MERGE"
Function PC0K870()
   /* ------------------------------------------------------------*/
   /* Process the update of the item's Size QTYs row.*/
      /* select the size row to be updated*/
   /* ------------------------------------------------------------*/

  PC0KSB6(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* ===> size row existed*/

    PC0KW00.XXXPRCNM = "PC0K870"; /* Module identification*/
    set PC0KM001.PC3PONBR cursor;
    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Update apparel screener availability inventory*/
   /* ------------------------------------------------------------*/

   /* IF VPOITM05.XGPCD = '03';*/
   /* IF VPOITM05.PC4ORTYP NE 'SD'*/
   /* AND VPOITM05.PC4ORTYP NE 'CD';*/
   /* IF VFCTY003.FY1FRGN NE 'Y';    /* not a foreign factory*/
   /* PC0KSS0;                   /* upd screener avail inventory*/
   /* END;*/
   /* END;*/
   /* END;*/

   /* ------------------------------------------------------------*/
   /* load the sizes to the size record & do update call*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSUP = "N"; /* ===> initialize size update flag*/
  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/

    if (PC0KW01.SY4IDDSC[PC0KWIXT] > " ") /* ===> size desc exists*/

      if (PC0KW01.PC0KWNQT[PC0KWIXT] != VPOSIZ02.PC7ORDEQ[PC0KWIXT])
        VPOSIZ02.PC7ORDEQ[PC0KWIXT] = PC0KW01.PC0KWNQT[PC0KWIXT];
        PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
      end

      /* ------------------------------------------------------------*/
       /* load the FOB Price from the FOB override templete*/
      /* ------------------------------------------------------------*/

      if (PC0KW01.PC0KWNQT[PC0KWIXT] == 0) /* ===> QTY do not exist*/

        VPOSIZ02.FY4FOBPR[PC0KWIXT] = 0; /* ===> reset value*/
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = "N";

      else

        if (PC0KW01.PC0KWVRF[PC0KWIXT] == "Y")
          if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y")
            if (PC0KW01.PC0KWVRD[PC0KWIXT] != VPOSIZ02.FY4FOBPR[PC0KWIXT])
              PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
              VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
            end
          else
            VPOSIZ02.PC7FOBFL[PC0KWIXT] = "Y";
            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
            VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
          end

        end

        if (PC0KW01.PC0KWVRF[PC0KWIXT] == "N")

          if (VPOSIZ02.PC7FOBFL[PC0KWIXT] == "Y")
            VPOSIZ02.PC7FOBFL[PC0KWIXT] = "N";
            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
            VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
          end

          if (PC0KW01.PC0KWVRD[PC0KWIXT] != VPOSIZ02.FY4FOBPR[PC0KWIXT])
            /* AND PC0KW01.PC0KWVRF(PC0KWIXT) EQ 'Y';*/

            if (PC0KW00.PC0KWPFF == "Y")
              VPOSIZ02.FY4FOBPR[PC0KWIXT] = PC0KW01.PC0KWVRD[PC0KWIXT];
            else
              if (PC0KW01.XGPCD == "02")
                VPOSIZ02.FY4FOBPR[PC0KWIXT] = VFCTY003.FY1DFPRC;
              else
                VPOSIZ02.FY4FOBPR[PC0KWIXT] = 0; /* ===> reset value*/
              end
            end

            PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/

          else
            if (PC0KW01.PC0KWVRD[PC0KWIXT] == 0
             && PC0KW01.XGPCD == "02")
              VPOSIZ02.FY4FOBPR[PC0KWIXT] = VFCTY003.FY1DFPRC;
              PC0KW00.PC0KWSUP = "Y"; /* ===> size update flag*/
            end
          end

        end /* ===> price change*/

      end /* ===> QTYs Exist check*/

    end /* ===> size desc exists*/

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;

  end

  if (PC0KW00.PC0KWSUP == "N") /* ==> size update flag*/
    return;
  end

  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KSD0(); /* ===> update size row*/

   /* **                                                        ***/
   /* ********************** End of PC0K870 ***********************/
end // end PC0K870

// "Load" cancel old item data
Function PC0K880()
   /* ------------------------------------------------------------*/
   /* Load appropriate data to cancel a item*/
   /* ------------------------------------------------------------*/

  PC0KW04.PC6STAT = "CX"; /* ===> set cancel status on item copy*/

  VPOITM05.PC6STAT = "CX"; /* ===> cancel status*/
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE;
  VPOITM05.PC6TORDE = 0;
  VPOITM05.PC6MICHG = 0;
  VPOITM05.PC6CXNBR = 1;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PC0KS60(); /* ===> update/cancel (UA) item row*/
   /* =============================> using the old sequence number*/

   /* **                                                        ***/
   /* ********************** End of PC0K880 ***********************/
end // end PC0K880

// process cancel Size QTYs
Function PC0K890()
   /* ------------------------------------------------------------*/
   /* Process the cancel of old item's Size QTYs row.*/
   /* ------------------------------------------------------------*/

  PC0KSB6(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    /* ------------------------------------------------------------*/
     /* load the sizes to the size record & do update call*/
    /* ------------------------------------------------------------*/

    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    move 0 to VPOSIZ02.PC7ORDEQ[1] for all;
    move 0 to VPOSIZ02.FY4FOBPR[1] for all;
    move "N" to VPOSIZ02.PC7FOBFL[1] for all;

    PC0KSD0(); /* ===> update size row*/

  else

    PC0KW00.XXXPRCNM = "PC0K890"; /* Module identification*/
    set PC0KM001.PC3PONBR cursor;

    PCWREC.XXXMSGNO = 12; /* =======> data updated by another*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K890 ***********************/
end // end PC0K890

// ===> Process Database cancel
Function PC0K900()
   /* ------------------------------------------------------------*/
   /* check cancel confirmation flag*/
   /* ------------------------------------------------------------*/

  if (PC0KW00.PC0KWCLF == "N") /* ===>cancel flag*/

    PC0K910(); /* ===> get/load the shipped/received*/
                                   /* products*/

    if (PC0KW01.PC0KWADD == PC0KW04.PC6TORDE /* ===> nothing to cancel*/
     && VPOITM05.PC6STAT != "TN")           
      PCWREC.XXXMSGNO = 291; /* ===>no QTYs to cancel*/
      PC0KW00.XXXPRCNM = "PC0K900"; /* ===> module identification*/
      PC0KW00.PC0KWSWM = "1"; /* ===>request map one*/

    else

      PCWREC.XXXMSGNO = 44; /* ===>cancel confirmation message*/
      PC0KW00.XXXPRCNM = "PC0K900"; /* ===> module identification*/
      PC0KW00.PC0KWCLF = "Y"; /* ===>cancel flag*/
      PC0KW00.PC0KWUPF = "N"; /* ===>update flag*/
      PC0KW00.PC0KWMOD = "Y"; /* ===>modified data flag*/
      PC0KW00.PC0KWSWM = "1"; /* ===>request map one*/

    end

    exit stack; /* ===> flow to display cancel QTYs and*/
                                   /* Message*/

  end

  if (PC0KW00.PC0KWCLF == "Y") /* ===>cancel flag*/
    PC0KW00.PC0KWCLF = "N"; /* ===>cancel flag*/

    XX0XS01(); /* ===> get system date & time*/

    /* ------------------------------------------------------------*/
       /* the old item must be closed/cancelled*/
         /* - load the old copy of the row to the update record*/
         /* - load close/cancel criteria to the update record*/
         /* - update the D.B. by using the old sequence number*/
       /* the old item sizes must be updated.*/
    /* ------------------------------------------------------------*/

    PC0KS14(); /* ===> load PC0KW04 to Item D.B. call*/
                                   /* record*/
    /* =========> this is a copy of the record before modifications*/

    PC0K920(); /* ===> load cancel criteria to update*/
                                   /* record*/

    PC0KS60(); /* ===> cancel (UA) item row*/
    /* =============================> using the old sequence number*/

    PC0K990(); /* ===> process update (u ) item's size*/
                                   /* row*/

    /* ------------------------------------------------------------*/
      /* If the maintenance display record was set closed*/
        /* or the old item copy was set cancelled*/
     /* Call subroutine to update the related P.O. Header's status*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.PC6STAT == "NC" /* ===> maintenance display record*/
     /* closed*/
     || PC0KW04.PC6STAT == "CX") /* ===> old item copy cancelled*/

      set PC8REC empty; /* ===>initialize record*/

      PC8REC.XGPCD = PC0KW01.XGPCD; /* ===>GPC Code*/
      PC8REC.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===>P.O. reg*/
      PC8REC.PC3PONBR = PC0KW01.PC3PONBR; /* ===>P.O. Number*/
      PC8REC.YACCD = PC0KW01.YACCD; /* ===>audit comment*/

      XPPC010(); /* ===> Call Update Header Status*/
                                   /* subroutine*/

    end

    /* ------------------------------------------------------------*/
      /* Perform the audit routine for the updates performed.*/
    /* ------------------------------------------------------------*/

    if (PC0KW01.XGPCD == "02")
      PC0K600(); /* ===> process "FOOTWEAR" audits*/
                                   /* routine*/
    end

    if (PC0KW01.XGPCD == "03")
      PC0K700(); /* ===> process "APPAREL" audits routine*/
    end

    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* ===> commit all changes*/

    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0K900"; /* Module identification*/
    PCWREC.XXXMSGNO = 1; /* ===> update successful*/

  end /* ===> Confirmation cancel flag*/
   /* **                                                        ***/
   /* ********************** End of PC0K900 ***********************/
end // end PC0K900

// get Minimum Order QTYs allowed
Function PC0K910()
   /* ------------------------------------------------------------*/

     /* If the maintenance  row has QTYs*/
      /* -Check to see if the Balance to Ship  >= On Order*/
       /* - if true:  load zero to the maps NEW QTY feild*/
       /* - if false: load Balance to Ship toNEW QTY Feild*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXR = 1; /* ===> initialize record index*/
  PC0KW00.PC0KWQTY = 0; /* ===> Initialize QTY Accumulator*/
  PC0KW01.PC0KWTVL = 0; /* ===> new tot value*/

  while (PC0KW00.PC0KWIXR <= 40)

    if (PC0KW01.PC7ORDEQ[PC0KWIXR] >= 0) /* ==> on-order QTYs exist*/

      if (PC5REC.PC5BALC[PC0KWIXR] >= PC0KW01.PC7ORDEQ[PC0KWIXR]
       || VPOITM05.PC6STAT == "TN")

        /* ------------------------------------------------------------*/
           /* Check to see if "All QTYs" canceled*/
        /* ------------------------------------------------------------*/

        PC0KW01.PC0KWNQT[PC0KWIXR] = 0; /* ===> all QTYs cancelled*/
        PC0KW01.FY4FOBPR[PC0KWIXR] = 0; /* ===> FOB Price cleared*/
        PC0KW01.PC7FOBFL[PC0KWIXR] = "N"; /* ===> FOB Flag reset*/

      else /* ===> check QTYs cancelled*/

        /* ------------------------------------------------------------*/
                 /* - get & laod QTY minimum order allowed to map*/
                    /* (min-order = on-order - balance to ship)*/
                 /* - accumulate new total order and value*/
        /* ------------------------------------------------------------*/

        PC0KW00.PC0KWBAL = PC5REC.PC5BALC[PC0KWIXR];
        PC0KW00.PC7ORDEQ = PC0KW01.PC7ORDEQ[PC0KWIXR] - PC0KW00.PC0KWBAL;
        /* --> load minimum-order  to    new-order*/
        PC0KW01.PC0KWNQT[PC0KWIXR] = PC0KW00.PC7ORDEQ;

        PC0KW00.PC0KWQTY = PC0KW00.PC0KWQTY + PC0KW01.PC0KWNQT[PC0KWIXR];

        PC0K529(); /* ===> calculate the new value for item*/

      end /* ===> Balance to ship > on order check*/

    end /* ===> sizes QTYs on-order exist*/

    PC0KW00.PC0KWIXR = PC0KW00.PC0KWIXR + 1;

  end /* ===> while more sizes*/

   /* ------------------------------------------------------------*/
     /* Load the appropriate data to the display record and*/
     /* the maps*/
   /* ------------------------------------------------------------*/

  PC0KW01.PC0KWADD = PC0KW00.PC0KWQTY; /* ===> Total New/Add QTYs*/
  PC0KW01.PC6TORDE = PC0KW00.PC0KWQTY; /* ===> Total On Ord QTYs*/

  PC0KM001.PC0KMVAL = PC0KW01.PC0KWTVL; /* ===> new tot value*/
  PC0KM001.PC0KMQTY = PC0KW01.PC6TORDE; /* ===> map display*/
  PC0KM001.PC0KMADD = PC0KW01.PC6TORDE; /* ===> map display*/
  PC0KM002.PC6TORDE = PC0KW01.PC6TORDE; /* ===> map display*/
  set PC0KM001.PC0KMADD cursor; /* ===> map display*/

  PC0KW01.PC6TADD = PC0KW04.PC6TADD + 0;
  PC0KM002.PC6TADD = PC0KW01.PC6TADD; /* ===> map display*/

  PC0KW00.PC0KWCNL = PC0KW04.PC6TORDE - PC0KW00.PC0KWQTY;

  PC0KW01.PC6TCNCL = PC0KW04.PC6TCNCL + PC0KW00.PC0KWCNL;
  PC0KM002.PC6TCNCL = PC0KW01.PC6TCNCL; /* ===> map display*/

  PC0KW00.PC0KWSWS = "Y"; /* ===> format size request switch*/
  PC0KW00.PC0KWF16 = "Y"; /* ===> first 16 sizes*/
  PC0KW00.PC0KWM16 = "N"; /* ===> middle 16 sizes*/
  PC0KW00.PC0KWIXS = 1; /* ===> size index*/

   /* **                                                        ***/
   /* ********************** End of PC0K910 ***********************/
end // end PC0K910

// load cancel criteria for item
Function PC0K920()
   /* ------------------------------------------------------------*/
   /* Load appropriate data to cancel a item*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC6TORDE == 0) /* ===> on-order reduced to Zero*/
    PC0KW04.PC6STAT = "CX"; /* ===> set cancel status on item copy*/
    VPOITM05.PC6STAT = "CX"; /* ===> cancel status*/
    VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
    VPOITM05.PC6MICHG = 0; /* ===> set misc. chg's to zero*/
    VPOITM05.PC6CXNBR = 1;
    VPOITM05.XXXUSRID = COMMAREA.CAUSERID; /* =>save cancelling user*/
  else

    if (PC0KW01.XGPCD == "02" /* ===>*/
     && PC5REC.PC5TSHIP == 0) /* ===> product not in-transit*/
      PC0KW01.PC6STAT = "NC"; /* ===> set cancel status on item copy*/
      VPOITM05.PC6STAT = "NC"; /* ===> cancel status*/
      VPOITM05.PC6STADT = XX0XW01.XX0XWDAT;
    end

  end

  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + PC0KW00.PC0KWCNL;
  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE - PC0KW00.PC0KWCNL;

  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0K920 ***********************/
end // end PC0K920

// process cancel Size QTYs
Function PC0K990()
   /* ------------------------------------------------------------*/
   /* Process the cancel of old item's Size QTYs row.*/
   /* ------------------------------------------------------------*/

  PC0KSB6(); /* ===> select size row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> size row existed*/

    /* ------------------------------------------------------------*/
     /* Update apparel screener availability inventory*/
    /* ------------------------------------------------------------*/

    /* IF VPOITM05.XGPCD = '03';*/
    /* IF VPOITM05.PC4ORTYP NE 'SD'*/
    /* AND VPOITM05.PC4ORTYP NE 'CD';*/
    /* IF VFCTY003.FY1FRGN NE 'Y';  /* not a frgn factory*/
    /* PC0KSS0;                 /* upd screener avail inventory*/
    /* END;*/
    /* END;*/
    /* END;*/

    /* ------------------------------------------------------------*/
     /* load the sizes to the size record & do update call*/
    /* ------------------------------------------------------------*/

    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    if (VPOITM05.PC6STAT == "CX") /* ===> item cancelled/closed*/

      move 0 to VPOSIZ02.PC7ORDEQ[1] for all;
      move 0 to VPOSIZ02.FY4FOBPR[1] for all;
      move "N" to VPOSIZ02.PC7FOBFL[1] for all;

    else /* ===> item is in  "OP" or "CL" status*/

      PC0K991(); /* ===> load item's size QTYs request*/

    end

    PC0KSD0(); /* ===> update size row*/

  else

    PC0KW00.XXXPRCNM = "PC0K990"; /* Module identification*/
    set PC0KM001.PC3PONBR cursor;

    converseLib.validationFailed(12); /* =======> data updated by another*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0K990 ***********************/
end // end PC0K990

// load size record with new QTYs
Function PC0K991()
   /* ------------------------------------------------------------*/
   /* load the sizes to the size record & do update call*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWIXT = 1; /* ===>initialize temp index*/
  PC0KW00.PC0KWSUP = "Y"; /* ===>size update flag*/

  while (PC0KW00.PC0KWIXT <= 40) /* ===>until all sizes processed*/

    if (PC0KW01.PC0KWNQT[PC0KWIXT] != VPOSIZ02.PC7ORDEQ[PC0KWIXT])

      if (PC0KW01.PC0KWNQT[PC0KWIXT] == 0)
        VPOSIZ02.FY4FOBPR[PC0KWIXT] = 0; /* ===> reset value*/
        VPOSIZ02.PC7FOBFL[PC0KWIXT] = "N"; /* ===> reset value*/
      end

      VPOSIZ02.PC7ORDEQ[PC0KWIXT] = PC0KW01.PC0KWNQT[PC0KWIXT];

    end

    PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;

  end

   /* **                                                        ***/
   /* ********************** End of PC0K991 ***********************/
end // end PC0K991

// Select (M2) Seq Nbr   VPOITM05
Function PC0KS00()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select alternate call*/
   /* ------------------------------------------------------------*/

  set VPOITM05 empty; /* ====>row storage area*/
  set PCYREC empty; /* ====>pass row storage area*/

  VPOITM05.XGPCD = PC0KW01.XGPCD;
  VPOITM05.PO-REG-CD = PC0KW01.PO-REG-CD; /* ===> P.O. REGION CODE*/
  VPOITM05.PC3PONBR = PC0KW01.PC3PONBR; /* ===> P.O. NBR*/
  PCYREC.PCYFUNC = "M2";

   /* ------------------------------------------------------------*/
   /* Select Set of rows from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* load the display record with the new sequence number.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      PC0KW01.PC6ITMNB = PCYREC.PCYCOUNT + 1; /* ===> seq number to changed row*/

      return; /* Return to previous process*/

    end

  end

  PC0KW00.XXXPRCNM = "PC0KS00"; /* Module identification*/
  set PC0KM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MAX (M2) SEQ. NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS00 ***********************/
end // end PC0KS00

// load header data to map
Function PC0KS02()
   /* ----------------------------------------------------------*/
    /* Load the map header data.*/
   /* ----------------------------------------------------------*/

  PC0KM001.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/

  PC0KW00.TA2GRGGN = PC0KW04.PC3POIDT; /* ===>number form*/
  PC0KW00.TA2GRGG = PC0KW00.PC0KWDT; /* ===>char form*/
  if (PC0KW01.XGPCD == "03")
    PC0KM001.PC0KMPYR = PC0KW01.PCFSECD; /* ===>production/season year*/
  else
    PC0KM001.PC0KMPYR = PC0KW00.PC0KWPYR; /* ===>production year*/
  end

  PC0KM001.PC0KMPMO = PC0KW00.PC0KWPMO; /* ===>production month*/
  PC0KM001.PC0KMPDM = PC0KW00.PC0KWPDM; /* ===>prod. delivery month*/
  PC0KM001.FY1FCTYC = PC0KW04.FY1FCTYC;
  PC0KM001.PC4ORTYP = PC0KW04.PC4ORTYP;
  PC0KM001.SY1STNBR = PC0KW04.SY1STNBR;
  PC0KM001.SY2CLRID = PC0KW04.SY2CLRID;
  PC0KM001.PC6PLAN = PC0KW04.PC6PLAN;
  if (PC0KW03.PC6STAT == "*X")
    if (PC0KW04.PC6STAT == "CX"
     && PC0KW04.XXXUSRID == " ")
      PC0KM001.PC6STAT = PC0KW04.PC6STAT;
    else
      PC0KM001.PC6STAT = "UX";
    end
  else
    PC0KM001.PC6STAT = PC0KW04.PC6STAT;
  end
  PC0KM001.XWHCD = PC0KW04.XWHCD;
  PC0KM001.YMTCD = PC0KW04.YMTCD;
  PC0KM001.XDSCD = PC0KW04.XDSCD;
  PC0KM001.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  PC0KM001.PC0KMETS = PC0KW01.PC0KWDT1; /* => ETS map display*/
  PC0KM001.PC2CUXID = PC0KW04.PC2CUXID;
  PC0KM001.YSMXDV = PC0KW04.YSMXDV;
  PC0KM001.XDMCD = PC0KW04.XDMCD;
  PC0KM001.XQACD = PC0KW04.XQACD;
  PC0KM001.XOWCD = PC0KW04.XOWCD;
  PC0KM001.PC2INSEG = PC0KW04.PC2INSEG;
  PC0KM001.XPGCD = PC0KW04.XPGCD;
  PC0KM001.XUMCD = PC0KW04.XUMCD;
   /* **                                                        ***/
   /* ********************** End of PC0KS02 ***********************/
end // end PC0KS02

// load header data to map
Function PC0KS03()
   /* ----------------------------------------------------------*/
    /* Load the map header data.*/
   /* ----------------------------------------------------------*/

  PC0KM002.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/

  PC0KW00.TA2GRGGN = PC0KW04.PC3POIDT; /* ===>number form*/
  PC0KW00.TA2GRGG = PC0KW00.PC0KWDT; /* ===>char form*/
  if (PC0KW01.XGPCD == "03")
    PC0KM002.PC0KMPYR = PC0KW01.PCFSECD; /* ===>production/season year*/
  else
    PC0KM002.PC0KMPYR = PC0KW00.PC0KWPYR; /* ===>production year*/
  end

  PC0KM002.PC0KMPMO = PC0KW00.PC0KWPMO; /* ===>production month*/
  PC0KM002.PC0KMPDM = PC0KW00.PC0KWPDM; /* ===>prod. delivery month*/
  PC0KM002.FY1FCTYC = PC0KW04.FY1FCTYC;
  PC0KM002.PC4ORTYP = PC0KW04.PC4ORTYP;
  PC0KM002.SY1STNBR = PC0KW04.SY1STNBR;
  PC0KM002.SY2CLRID = PC0KW04.SY2CLRID;
  PC0KM002.PC6PLAN = PC0KW04.PC6PLAN;
  if (PC0KW03.PC6STAT == "*X")
    if (PC0KW04.PC6STAT == "CX"
     && PC0KW04.XXXUSRID == " ")
      PC0KM002.PC6STAT = PC0KW04.PC6STAT;
    else
      PC0KM002.PC6STAT = "UX";
    end
  else
    PC0KM002.PC6STAT = PC0KW04.PC6STAT;
  end
  PC0KM002.XWHCD = PC0KW04.XWHCD;
  PC0KM002.YMTCD = PC0KW04.YMTCD;
  PC0KM002.XDSCD = PC0KW04.XDSCD;
  PC0KM002.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  PC0KM002.PC0KMETS = PC0KW01.PC0KWDT1; /* => ETS map display*/
  PC0KM002.PC2CUXID = PC0KW04.PC2CUXID;
  PC0KM002.YSMXDV = PC0KW04.YSMXDV;
  PC0KM002.XDMCD = PC0KW04.XDMCD;
  PC0KM002.XQACD = PC0KW04.XQACD;
  PC0KM002.XOWCD = PC0KW04.XOWCD;
  PC0KM002.PC2INSEG = PC0KW04.PC2INSEG;
  PC0KM002.XPGCD = PC0KW04.XPGCD;
  PC0KM002.XUMCD = PC0KW04.XUMCD;
   /* **                                                        ***/
   /* ********************** End of PC0KS02 ***********************/
end // end PC0KS03

// get style name and color desc
Function PC0KS05()

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  PG2REC.XGPCD = PC0KW01.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = PC0KW01.SY1STNBR; /* ===> style code*/
  PG2REC.SY2CLRID = PC0KW01.SY2CLRID; /* ===> color code*/
  PG2REC.XDMCD = PC0KW01.XDMCD;

  XSPG202(); /* ====>subroutine to verify color code*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0KW01.SY1STYNM = PG2REC.SY1STYNM; /* ===>load style*/
      PC0KW01.SY2CLRDS = PG2REC.SY2CLRDS; /* ===>load color*/
      PC0KW01.SY2RSTNB = PG2REC.SY2RSTNB; /* ===>load root style*/

      return; /* Return to previous process*/

    end

  end

  PC0KW00.XXXPRCNM = "PC0KS05"; /* Module identification*/
  set PC0KM001.CATOAP cursor;

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    PC0KW00.PC0KW911 = "Y"; /* -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS05 ***********************/
end // end PC0KS05

// Get Cust/Store data   VPRDCU01
Function PC0KS06()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* Row storage area*/

  VPRDCU03.XGPCD = PC0KW01.XGPCD; /* ===> GPC*/
  VPRDCU03.PC2CUXID = PC0KW01.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PC0KW01.KUCCOID = VPRDCU03.KUCCOID;
      PC0KW01.KUMSTRID = VPRDCU03.KUMSTRID;
      PC0KW01.XNXCD = VPRDCU03.XNXCD;
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PC0KW00.XXXPRCNM = "PC0KS06"; /* Module identification*/
      PCWREC.XXXMSGNO = 45;
      set PC0KM001.PC2CUXID skip, bold;

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  PC0KM001.XXXPRCNM = "PC0KS06";
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS06 ***********************/
end // end PC0KS06

// Get Store data        VSTORE01
Function PC0KS07()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set KUMREC empty; /* Row storage area*/

  KUMREC.KUCCOID = PC0KW01.KUCCOID; /* ===> company id*/
  KUMREC.KUMSTRID = PC0KW01.KUMSTRID; /* ===> store ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0KW01.KUMSTRNM = KUMREC.KUMSTRNM;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "STORE01"; /* Table view name*/
   /* MOVE kumREC.kumKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  PC0KM001.XXXPRCNM = "PC0KS07";
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS07 ***********************/
end // end PC0KS07

// Get division group description
Function PC0KS08()
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Code to calling process record*/
  YSMREC.YSMSUMCD = PC0KW01.YSMXDV;
                                   /* Code to calling process record*/
  TA1REC.TA1PGMNM = "PC0KS08";
                                   /* process to      process record*/

  XSPCS02(); /* ===> call subroutine for division group description*/

  if (SQLCA.VAGen_SQLCODE == 0)

    PC0KW01.PC0KWDVD = YSMREC.YSMSMDSC;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    PC0KW00.XXXPRCNM = "PC0KS08"; /* Module identification*/
    set PC0KM002.YSMXDV cursor, bold; /* Highlight*/
    PCWREC.XXXMSGNO = 50; /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0KS08 ***********************/
end // end PC0KS08

// Get DEURO Store data VESTOR01
Function PC0KS09()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set KUMREC empty; /* Row storage area*/

  KUMREC.KUCCOID = PC0KW01.KUCCOID; /* ===> company id*/
  KUMREC.KUMSTRID = PC0KW01.KUMSTRID; /* ===> store ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VESTOR01" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PC0KW01.KUMSTRNM = KUMREC.KUMSTRNM;
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DEURO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VESTOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/
  PC0KM001.XXXPRCNM = "PC0KS09";
  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS09 ***********************/
end // end PC0KS09

// Obtain dtrans.vtsloc01
Function PC0KS100()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Init rec*/

  TSCREC.TSCLOCCD = VPRDCU03.TSCLOCCD;

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS100"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0KM001.XXXPRCNM = "PC0KS100";
  exit stack;

end // end PC0KS100

// Obtain dprodg.vsyclr01
Function PC0KS101()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = PC0KW01.XGPCD;
  PG2REC.SY1STNBR = PC0KW01.SY1STNBR;
  PG2REC.SY2CLRID = PC0KW01.SY2CLRID;
  PG2REC.XDMCD = PC0KW01.XDMCD;

  XSPG202();

end // end PC0KS101

// call calc.  "date routine"
Function PC0KS11()
   /* ------------------------------------------------------------*/

               /* Calculate DATE difference*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* set up date (ccyymmdd) for processing date validation*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* ===>  move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* ===>     move date type to record*/
                                   /* -->(ccyymmdd)*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* ===> calculate date w/routine*/

  if (TA2REC.TA2RTNCD == 0) /* valid date*/

    return; /* === return with date*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, error occured. Exit and display map*/
    /* ------------------------------------------------------------*/

    PC0KW00.PC0KWSWM = "1"; /* ===> map request switch*/
    PC0KW00.XXXPRCNM = "PC0KS11"; /* Module identification*/
    converseLib.validationFailed(38); /* Indicate missing or invalid*/

  end

   /* **                                                        ***/
   /* ********************** End of PC0KS11 ***********************/
end // end PC0KS11

// load saved ("Maint." Item row)
Function PC0KS14()
   /* ----------------------------------------------------------*/
    /* load Saved copy of the "Maintenance" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05.*/
   /* ----------------------------------------------------------*/

  set VPOITM05 empty; /* initialize Item D.B. Call record*/

  VPOITM05.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0KW04.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0KW04.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PC0KW04.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PC0KW04.PC3POIDT;
  VPOITM05.PCFSECD = PC0KW04.PCFSECD;
  VPOITM05.FY1FCTYC = PC0KW04.FY1FCTYC;
  VPOITM05.XCTCD = PC0KW04.XCTCD;
  VPOITM05.SY1STNBR = PC0KW04.SY1STNBR;
  VPOITM05.SY2CLRID = PC0KW04.SY2CLRID;
  VPOITM05.XDMCD = PC0KW04.XDMCD;
  VPOITM05.XQACD = PC0KW04.XQACD;
  VPOITM05.XOWCD = PC0KW04.XOWCD;
  VPOITM05.PC2INSEG = PC0KW04.PC2INSEG;
  VPOITM05.XPGCD = PC0KW04.XPGCD;
  VPOITM05.XUMCD = PC0KW04.XUMCD;
  VPOITM05.PC6ETSDT = PC0KW04.PC6ETSDT;
  VPOITM05.PC6OETS = PC0KW04.PC6OETS;
  VPOITM05.PC6RTADT = PC0KW04.PC6RTADT;
  VPOITM05.YMTCD = PC0KW04.YMTCD;
  VPOITM05.PC6CXNBR = PC0KW04.PC6CXNBR;
  VPOITM05.PC6PLAN = PC0KW04.PC6PLAN;
  VPOITM05.XPLCD = PC0KW04.XPLCD;
  VPOITM05.XPRCD = PC0KW04.XPRCD;
  VPOITM05.XPCCD = PC0KW04.XPCCD;
  VPOITM05.SYBSTGNB = PC0KW04.SYBSTGNB;
  VPOITM05.XGACD = PC0KW04.XGACD;
  VPOITM05.PG1SC4CD = PC0KW04.PG1SC4CD;
  VPOITM05.PC6CLVAR = PC0KW04.PC6CLVAR;
  VPOITM05.XWHCD = PC0KW04.XWHCD;
  VPOITM05.PC2CUXID = PC0KW04.PC2CUXID;
  VPOITM05.YSMXDV = PC0KW04.YSMXDV;
  VPOITM05.PC6XCTCD = PC0KW04.PC6XCTCD;
  VPOITM05.OP1CUPO = PC0KW04.OP1CUPO;
  VPOITM05.OP1CUOID = PC0KW04.OP1CUOID;
  VPOITM05.OP1NORID = PC0KW04.OP1NORID;
  if (PC0KW04.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW04.OP1CUOID;
    VPOITM05.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOITM05.OP1PARTN = " ";
  end
  VPOITM05.OP1CUNDT = PC0KW04.OP1CUNDT;
  VPOITM05.PC4ORTYP = PC0KW04.PC4ORTYP;
  VPOITM05.PC61TMSH = PC0KW04.PC61TMSH;
  VPOITM05.XDSCD = PC0KW04.XDSCD;
  VPOITM05.PC6STAT = PC0KW04.PC6STAT;
  VPOITM05.PC6STADT = PC0KW04.PC6STADT;
  VPOITM05.XFRCD = PC0KW04.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PC0KW04.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PC0KW04.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PC0KW04.PC6AIRNB;
  VPOITM05.PC6AIRDT = PC0KW04.PC6AIRDT;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0KW04.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0KW04.PC-FCTY-AFRGT-PCT;
  VPOITM05.PC6NILRF = PC0KW04.PC6NILRF;
  VPOITM05.YOHCD = PC0KW04.YOHCD;
  VPOITM05.PC3SIFL = PC0KW04.PC3SIFL;
  VPOITM05.PC6SZAVL = PC0KW04.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0KW04.PC6CONNO;
  VPOITM05.PC6PETS = PC0KW04.PC6PETS;
  VPOITM05.PC6OETAL = PC0KW04.PC6OETAL;
  VPOITM05.PC6ETALF = PC0KW04.PC6ETALF;
  VPOITM05.PC6MICHG = PC0KW04.PC6MICHG;
  VPOITM05.PC6TORIG = PC0KW04.PC6TORIG;
  VPOITM05.PC6TORDE = PC0KW04.PC6TORDE;
  VPOITM05.PC6TADD = PC0KW04.PC6TADD;
  VPOITM05.PC6TCNCL = PC0KW04.PC6TCNCL;
  VPOITM05.PC6PREFL = PC0KW04.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PC0KW04.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PC0KW04.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PC0KW04.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PC0KW04.XXXUSRID;
  VPOITM05.ZZZSDT = PC0KW04.ZZZSDT;
  VPOITM05.ZZZCHGDT = PC0KW04.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PC0KW04.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PC0KW04.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS14 ***********************/
end // end PC0KS14

// load saved "Merge To" Item Row
Function PC0KS16()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Merge To" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to VPOITM05 and is a mirror image of the PC0KW06.*/
   /* ----------------------------------------------------------*/

  VPOITM05.XGPCD = PC0KW06.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0KW06.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0KW06.PC3PONBR; /* PO number*/
  VPOITM05.PC6ITMNB = PC0KW06.PC6ITMNB;
  VPOITM05.PC-SAP-PO-NBR = PC0KW06.PC-SAP-PO-NBR;
  VPOITM05.PC3POIDT = PC0KW06.PC3POIDT;
  VPOITM05.PCFSECD = PC0KW06.PCFSECD;
  VPOITM05.FY1FCTYC = PC0KW06.FY1FCTYC;
  VPOITM05.XCTCD = PC0KW06.XCTCD;
  VPOITM05.SY1STNBR = PC0KW06.SY1STNBR;
  VPOITM05.SY2CLRID = PC0KW06.SY2CLRID;
  VPOITM05.XDMCD = PC0KW06.XDMCD;
  VPOITM05.XQACD = PC0KW06.XQACD;
  VPOITM05.XOWCD = PC0KW06.XOWCD;
  VPOITM05.PC2INSEG = PC0KW06.PC2INSEG;
  VPOITM05.XPGCD = PC0KW06.XPGCD;
  VPOITM05.XUMCD = PC0KW06.XUMCD;
  VPOITM05.PC6ETSDT = PC0KW06.PC6ETSDT;
  VPOITM05.PC6OETS = PC0KW06.PC6OETS;
  VPOITM05.PC6RTADT = PC0KW06.PC6RTADT;
  VPOITM05.YMTCD = PC0KW06.YMTCD;
  VPOITM05.PC6CXNBR = PC0KW06.PC6CXNBR;
  VPOITM05.PC6PLAN = PC0KW06.PC6PLAN;
  VPOITM05.XPLCD = PC0KW06.XPLCD;
  VPOITM05.XPRCD = PC0KW06.XPRCD;
  VPOITM05.XPCCD = PC0KW06.XPCCD;
  VPOITM05.SYBSTGNB = PC0KW06.SYBSTGNB;
  VPOITM05.XGACD = PC0KW06.XGACD;
  VPOITM05.PG1SC4CD = PC0KW06.PG1SC4CD;
  VPOITM05.PC6CLVAR = PC0KW06.PC6CLVAR;
  VPOITM05.XWHCD = PC0KW06.XWHCD;
  VPOITM05.PC2CUXID = PC0KW06.PC2CUXID;
  VPOITM05.YSMXDV = PC0KW06.YSMXDV;
  VPOITM05.PC6XCTCD = PC0KW06.PC6XCTCD;
  VPOITM05.OP1CUPO = PC0KW06.OP1CUPO;
  VPOITM05.OP1CUOID = PC0KW06.OP1CUOID;
  VPOITM05.OP1NORID = PC0KW06.OP1NORID;
  if (PC0KW06.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW06.OP1CUOID;
    VPOITM05.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOITM05.OP1PARTN = " ";
  end
  VPOITM05.OP1CUNDT = PC0KW06.OP1CUNDT;
  VPOITM05.PC4ORTYP = PC0KW06.PC4ORTYP;
  VPOITM05.PC61TMSH = PC0KW06.PC61TMSH;
  VPOITM05.XDSCD = PC0KW06.XDSCD;
  VPOITM05.PC6STAT = PC0KW06.PC6STAT;
  VPOITM05.PC6STADT = PC0KW06.PC6STADT;
  VPOITM05.XFRCD = PC0KW06.XFRCD;
  VPOITM05.FB-LATE-BK-FL = PC0KW06.FB-LATE-BK-FL;
  VPOITM05.FB-LATE-BK-FL-MDT = PC0KW06.FB-LATE-BK-FL-MDT;
  VPOITM05.PC6AIRNB = PC0KW06.PC6AIRNB;
  VPOITM05.PC6AIRDT = PC0KW06.PC6AIRDT;
  VPOITM05.PC-NIKE-AFRGT-PCT = PC0KW04.PC-NIKE-AFRGT-PCT;
  VPOITM05.PC-FCTY-AFRGT-PCT = PC0KW04.PC-FCTY-AFRGT-PCT;
  VPOITM05.PC6NILRF = PC0KW06.PC6NILRF;
  VPOITM05.YOHCD = PC0KW06.YOHCD;
  VPOITM05.PC3SIFL = PC0KW06.PC3SIFL;
  VPOITM05.PC6SZAVL = PC0KW06.PC6SZAVL;
  VPOITM05.PC6CONNO = PC0KW06.PC6CONNO;
  VPOITM05.PC6PETS = PC0KW06.PC6PETS;
  VPOITM05.PC6OETAL = PC0KW06.PC6OETAL;
  VPOITM05.PC6ETALF = PC0KW06.PC6ETALF;
  VPOITM05.PC6MICHG = PC0KW06.PC6MICHG;
  VPOITM05.PC6TORIG = PC0KW06.PC6TORIG;
  VPOITM05.PC6TORDE = PC0KW06.PC6TORDE;
  VPOITM05.PC6TADD = PC0KW06.PC6TADD;
  VPOITM05.PC6TCNCL = PC0KW06.PC6TCNCL;
  VPOITM05.PC6PREFL = PC0KW06.PC6PREFL;
  VPOITM05.XIB-IBANK-CD = PC0KW06.XIB-IBANK-CD;
  VPOITM05.PC-REL-PLN-REF-NBR = PC0KW06.PC-REL-PLN-REF-NBR;
  VPOITM05.PC-LGL-PO-PRT-IND = PC0KW06.PC-LGL-PO-PRT-IND;
  VPOITM05.XXXUSRID = PC0KW06.XXXUSRID;
  VPOITM05.ZZZSDT = PC0KW06.ZZZSDT;
  VPOITM05.ZZZCHGDT = PC0KW06.ZZZCHGDT;
  VPOITM05.ZZZCHGTM = PC0KW06.ZZZCHGTM;
  VPOITM05.ZZZCHGCT = PC0KW06.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS16 ***********************/
end // end PC0KS16

// load saved "Maint." item row
Function PC0KS17()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* saved "Maintenance" row to the record.*/
      /* Note:*/
             /* This process uses the old/saved item key*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW04.PO-REG-CD; /* PO REGION*/
  VPOASZ02.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO;
  VPOASZ02.SY1STNBR = PC0KW04.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW04.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW04.XDMCD;
  VPOASZ02.XQACD = PC0KW04.XQACD;
  VPOASZ02.XOWCD = PC0KW04.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW04.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW04.XPGCD;
  VPOASZ02.XUMCD = PC0KW04.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW04.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW04.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW04.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW04.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW04.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW04.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW04.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW04.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW04.OP1NORID;

  if (PC0KW04.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW04.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

   /* **                                                        ***/
   /* ********************** End of PC0KS17 ***********************/
end // end PC0KS17

// load saved "Split To" item row
Function PC0KS18()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* saved "Merge To" row to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = PC0KW06.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = PC0KW06.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = PC0KW06.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = PC0KW00.PCJSEQNO;
  VPOASZ02.SY1STNBR = PC0KW06.SY1STNBR;
  VPOASZ02.SY2CLRID = PC0KW06.SY2CLRID;
  VPOASZ02.XDMCD = PC0KW06.XDMCD;
  VPOASZ02.XQACD = PC0KW06.XQACD;
  VPOASZ02.XOWCD = PC0KW06.XOWCD;
  VPOASZ02.PC2INSEG = PC0KW06.PC2INSEG;
  VPOASZ02.XPGCD = PC0KW06.XPGCD;
  VPOASZ02.XUMCD = PC0KW06.XUMCD;
  VPOASZ02.PC6ETSDT = PC0KW06.PC6ETSDT;
  VPOASZ02.PC6OETS = PC0KW06.PC6OETS;
  VPOASZ02.PC6RTADT = PC0KW06.PC6RTADT;
  VPOASZ02.YMTCD = PC0KW06.YMTCD;
  VPOASZ02.PC6CXNBR = PC0KW06.PC6CXNBR;
  VPOASZ02.XWHCD = PC0KW06.XWHCD;
  VPOASZ02.PC2CUXID = PC0KW06.PC2CUXID;
  VPOASZ02.OP1CUOID = PC0KW06.OP1CUOID;
  VPOASZ02.OP1NORID = PC0KW06.OP1NORID;

  if (PC0KW06.OP1CUOID == 0)
    VPOASZ02.OP1PARTN = " ";
  else
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW06.OP1CUOID;
    VPOASZ02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  end

   /* **                                                        ***/
   /* ********************** End of PC0KS18 ***********************/
end // end PC0KS18

// load VPOITM05 to PCJREC
Function PC0KS20()
   /* ----------------------------------------------------------*/
    /* Load current item record to call  audit record*/
   /* ----------------------------------------------------------*/

  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR;
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID;
  VPOAIT02.XDMCD = VPOITM05.XDMCD;
  VPOAIT02.XQACD = VPOITM05.XQACD;
  VPOAIT02.XOWCD = VPOITM05.XOWCD;
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOAIT02.XPGCD = VPOITM05.XPGCD;
  VPOAIT02.XUMCD = VPOITM05.XUMCD;
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD;
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT;
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC;
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS;
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOAIT02.YMTCD = VPOITM05.YMTCD;
  VPOAIT02.XWHCD = VPOITM05.XWHCD;
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD;
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR;
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN;
  VPOAIT02.XDSCD = VPOITM05.XDSCD;
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV;
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP;

  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;

  VPOAIT02.XPRCD = VPOITM05.XPRCD;

  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0KW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> ZZ_CHNG_HHMM*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0KS20 ***********************/
end // end PC0KS20

// load VPOITM05 to PCKREC
Function PC0KS21()
   /* ----------------------------------------------------------*/
    /* Initialize the size audit record and move the fields from*/
    /* display storage and working storage to the record.*/
   /* ----------------------------------------------------------*/

  set VPOASZ02 empty;

  VPOASZ02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* reg code*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* product key*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID;
  VPOASZ02.XDMCD = VPOITM05.XDMCD;
  VPOASZ02.XQACD = VPOITM05.XQACD;
  VPOASZ02.XOWCD = VPOITM05.XOWCD;
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG;
  VPOASZ02.XPGCD = VPOITM05.XPGCD;
  VPOASZ02.XUMCD = VPOITM05.XUMCD;
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT;
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS;
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT;
  VPOASZ02.YMTCD = VPOITM05.YMTCD;
  VPOASZ02.PC6CXNBR = VPOITM05.PC6CXNBR;
  VPOASZ02.XWHCD = VPOITM05.XWHCD;
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID;
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID;
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOASZ02.ZFC-CRCY-CD = " ";

  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0KS21 ***********************/
end // end PC0KS21

// load "Maintenance" item data
Function PC0KS22()
   /* ----------------------------------------------------------*/
    /* Load the Maintenance item's data to Item audit record*/
    /* to process and audit for the inserted/updated item*/
   /* ----------------------------------------------------------*/

  VPOAIT02.XGPCD = PC0KW01.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO region*/
  VPOAIT02.PC3PONBR = PC0KW01.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0KW01.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0KW01.SY2CLRID;
  VPOAIT02.XDMCD = PC0KW01.XDMCD;
  VPOAIT02.XQACD = PC0KW01.XQACD;
  VPOAIT02.XOWCD = PC0KW01.XOWCD;
  VPOAIT02.PC2INSEG = PC0KW01.PC2INSEG;
  VPOAIT02.XPGCD = PC0KW01.XPGCD;
  VPOAIT02.XUMCD = PC0KW01.XUMCD;
  VPOAIT02.PCFSECD = PC0KW01.PCFSECD;
  VPOAIT02.PC3POIDT = PC0KW01.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0KW01.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0KW01.PC6ETSDT;
  VPOAIT02.PC6OETS = PC0KW01.PC6OETS;
  VPOAIT02.PC6RTADT = PC0KW01.PC6RTADT;
  VPOAIT02.YMTCD = PC0KW01.YMTCD;
  VPOAIT02.XWHCD = PC0KW01.XWHCD;
  VPOAIT02.PC2CUXID = PC0KW01.PC2CUXID;
  VPOAIT02.PC6XCTCD = PC0KW01.PC6XCTCD;
  VPOAIT02.PC6CXNBR = PC0KW01.PC6CXNBR;
  VPOAIT02.PC6PLAN = PC0KW01.PC6PLAN;
  VPOAIT02.XDSCD = PC0KW01.XDSCD;
  VPOAIT02.YSMXDV = PC0KW01.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0KW01.PC4ORTYP;

  VPOAIT02.OP1CUOID = PC0KW01.OP1CUOID;
  VPOAIT02.OP1NORID = PC0KW01.OP1NORID;
  if (PC0KW01.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW01.OP1CUOID;
    VPOAIT02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOAIT02.OP1PARTN = " ";
  end

  VPOAIT02.XPRCD = PC0KW04.XPRCD;

  VPOAIT02.YACCD = PC0KW01.YACCD;

  VPOAIT02.PG1SC4CD = PC0KW01.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0KW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ===> ZZ_CHNG_HHMM*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;

   /* **                                                        ***/
   /* ********************** End of PC0NS22 ***********************/
end // end PC0KS22

// load display rec. w/ Item data
Function PC0KS23()
   /* ----------------------------------------------------------*/
    /* Saved display data for maintenance item row.*/

    /* This module moves everything that is pertinant to*/
    /* the maintenance item passed in from another program.*/
    /* the data is loaded to PC0KW01.*/
   /* ----------------------------------------------------------*/

  PC0KW01.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0KW01.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0KW01.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0KW01.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0KW01.PC3POIDT = VPOITM05.PC3POIDT;
  PC0KW01.PCFSECD = VPOITM05.PCFSECD;
  PC0KW01.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0KW01.XCTCD = VPOITM05.XCTCD;
  PC0KW01.SY1STNBR = VPOITM05.SY1STNBR;
  PC0KW01.SY2CLRID = VPOITM05.SY2CLRID;
  PC0KW01.XDMCD = VPOITM05.XDMCD;
  PC0KW01.XQACD = VPOITM05.XQACD;
  PC0KW01.XOWCD = VPOITM05.XOWCD;
  PC0KW01.PC2INSEG = VPOITM05.PC2INSEG;
  PC0KW01.XPGCD = VPOITM05.XPGCD;
  PC0KW01.XUMCD = VPOITM05.XUMCD;
  PC0KW01.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0KW01.PC6OETS = VPOITM05.PC6OETS;
  PC0KW01.PC6RTADT = VPOITM05.PC6RTADT;
  PC0KW01.YMTCD = VPOITM05.YMTCD;
  PC0KW01.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0KW01.PC6PLAN = VPOITM05.PC6PLAN;
  PC0KW01.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0KW01.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0KW01.XWHCD = VPOITM05.XWHCD;
  PC0KW01.PC2CUXID = VPOITM05.PC2CUXID;
  PC0KW01.YSMXDV = VPOITM05.YSMXDV;
  PC0KW01.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0KW01.OP1CUPO = VPOITM05.OP1CUPO;
  PC0KW01.OP1PARTN = VPOITM05.OP1PARTN;
  PC0KW01.OP1CUOID = VPOITM05.OP1CUOID;
  PC0KW01.OP1NORID = VPOITM05.OP1NORID;
  PC0KW01.OP1CUNDT = VPOITM05.OP1CUNDT;
  PC0KW01.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0KW01.XDSCD = VPOITM05.XDSCD;
  PC0KW01.PC6STAT = VPOITM05.PC6STAT;
  PC0KW01.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0KW01.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0KW01.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0KW01.PC6MICHG = VPOITM05.PC6MICHG;
  PC0KW01.PC6NILRF = VPOITM05.PC6NILRF;
  PC0KW01.YOHCD = VPOITM05.YOHCD;
  PC0KW01.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0KW01.PC6CONNO = VPOITM05.PC6CONNO;
  PC0KW01.PC6OETAL = VPOITM05.PC6OETAL;
  PC0KW01.PC6ETALF = VPOITM05.PC6ETALF;
  PC0KW01.PC6TORIG = VPOITM05.PC6TORIG;
  PC0KW01.PC6TORDE = VPOITM05.PC6TORDE;
  PC0KW01.PC6TADD = VPOITM05.PC6TADD;
  PC0KW01.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0KW01.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PC0KW01.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;

   /* **                                                        ***/
   /* ********************** End of PC0KS23 ***********************/
end // end PC0KS23

// save ("Maintenance" Item Row)
Function PC0KS24()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split From" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0KW04 and is a mirror image of the VPOITM02.*/
   /* ----------------------------------------------------------*/

  PC0KW04.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0KW04.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0KW04.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0KW04.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0KW04.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0KW04.PC3POIDT = VPOITM05.PC3POIDT;
  PC0KW04.PCFSECD = VPOITM05.PCFSECD;
  PC0KW04.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0KW04.XCTCD = VPOITM05.XCTCD;
  PC0KW04.SY1STNBR = VPOITM05.SY1STNBR;
  PC0KW04.SY2CLRID = VPOITM05.SY2CLRID;
  PC0KW04.XDMCD = VPOITM05.XDMCD;
  PC0KW04.XQACD = VPOITM05.XQACD;
  PC0KW04.XOWCD = VPOITM05.XOWCD;
  PC0KW04.PC2INSEG = VPOITM05.PC2INSEG;
  PC0KW04.XPGCD = VPOITM05.XPGCD;
  PC0KW04.XUMCD = VPOITM05.XUMCD;
  PC0KW04.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0KW04.PC6OETS = VPOITM05.PC6OETS;
  PC0KW04.PC6RTADT = VPOITM05.PC6RTADT;
  PC0KW04.YMTCD = VPOITM05.YMTCD;
  PC0KW04.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0KW04.PC6PLAN = VPOITM05.PC6PLAN;
  PC0KW04.XPLCD = VPOITM05.XPLCD;
  PC0KW04.XPRCD = VPOITM05.XPRCD;
  PC0KW04.XPCCD = VPOITM05.XPCCD;
  PC0KW04.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0KW04.XGACD = VPOITM05.XGACD;
  PC0KW04.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0KW04.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0KW04.XWHCD = VPOITM05.XWHCD;
  PC0KW04.PC2CUXID = VPOITM05.PC2CUXID;
  PC0KW04.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0KW04.YSMXDV = VPOITM05.YSMXDV;
  PC0KW04.OP1CUPO = VPOITM05.OP1CUPO;
  PC0KW04.OP1PARTN = VPOITM05.OP1PARTN;
  PC0KW04.OP1CUOID = VPOITM05.OP1CUOID;
  PC0KW04.OP1NORID = VPOITM05.OP1NORID;
  PC0KW04.OP1CUNDT = VPOITM05.OP1CUNDT;
  PC0KW04.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0KW04.PC61TMSH = VPOITM05.PC61TMSH;
  PC0KW04.XDSCD = VPOITM05.XDSCD;
  PC0KW04.PC6STAT = VPOITM05.PC6STAT;
  PC0KW04.PC6STADT = VPOITM05.PC6STADT;
  PC0KW04.PC6STADT = VPOITM05.PC6STADT;
  PC0KW04.XFRCD = VPOITM05.XFRCD;
  PC0KW04.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PC0KW04.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PC0KW04.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0KW04.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0KW04.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0KW04.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0KW04.PC6NILRF = VPOITM05.PC6NILRF;
  PC0KW04.YOHCD = VPOITM05.YOHCD;
  PC0KW04.PC3SIFL = VPOITM05.PC3SIFL;
  PC0KW04.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0KW04.PC6CONNO = VPOITM05.PC6CONNO;
  PC0KW04.PC6PETS = VPOITM05.PC6PETS;
  PC0KW04.PC6OETAL = VPOITM05.PC6OETAL;
  PC0KW04.PC6ETALF = VPOITM05.PC6ETALF;
  PC0KW04.PC6TORIG = VPOITM05.PC6TORIG;
  PC0KW04.PC6MICHG = VPOITM05.PC6MICHG;
  PC0KW04.PC6TORDE = VPOITM05.PC6TORDE;
  PC0KW04.PC6TADD = VPOITM05.PC6TADD;
  PC0KW04.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0KW04.PC6PREFL = VPOITM05.PC6PREFL;
  PC0KW04.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0KW04.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0KW04.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0KW04.XXXUSRID = VPOITM05.XXXUSRID;
  PC0KW04.ZZZSDT = VPOITM05.ZZZSDT;
  PC0KW04.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0KW04.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0KW04.ZZZCHGCT = VPOITM05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS24 ***********************/
end // end PC0KS24

// save ("Maintenance" Size Row)
Function PC0KS25()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split from" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0KW05 and is a mirror image of the PC7REC.*/
   /* ----------------------------------------------------------*/

  PC0KW05.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PC0KW05.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* PO REGION CODE*/
  PC0KW05.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PC0KW05.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PC0KW05.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;
  move VPOSIZ02.PC7ORIGQ to PC0KW05.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PC0KW05.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PC0KW05.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PC0KW05.FY4FOBPR[1] for all;
  PC0KW05.ZZZSDT = VPOSIZ02.ZZZSDT;
  PC0KW05.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PC0KW05.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PC0KW05.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS25 ***********************/
end // end PC0KS25

// save ("Merge To" Item Row)
Function PC0KS26()
   /* ----------------------------------------------------------*/
    /* Save copy of the "Merge To" item row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0KW06 and is a mirror image of the VPOITM02.*/
   /* ----------------------------------------------------------*/

  PC0KW06.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC0KW06.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  PC0KW06.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC0KW06.PC6ITMNB = VPOITM05.PC6ITMNB;
  PC0KW06.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
  PC0KW06.PC3POIDT = VPOITM05.PC3POIDT;
  PC0KW06.PCFSECD = VPOITM05.PCFSECD;
  PC0KW06.FY1FCTYC = VPOITM05.FY1FCTYC;
  PC0KW06.XCTCD = VPOITM05.XCTCD;
  PC0KW06.SY1STNBR = VPOITM05.SY1STNBR;
  PC0KW06.SY2CLRID = VPOITM05.SY2CLRID;
  PC0KW06.XDMCD = VPOITM05.XDMCD;
  PC0KW06.XQACD = VPOITM05.XQACD;
  PC0KW06.XOWCD = VPOITM05.XOWCD;
  PC0KW06.PC2INSEG = VPOITM05.PC2INSEG;
  PC0KW06.XPGCD = VPOITM05.XPGCD;
  PC0KW06.XUMCD = VPOITM05.XUMCD;
  PC0KW06.PC6ETSDT = VPOITM05.PC6ETSDT;
  PC0KW06.PC6OETS = VPOITM05.PC6OETS;
  PC0KW06.PC6RTADT = VPOITM05.PC6RTADT;
  PC0KW06.YMTCD = VPOITM05.YMTCD;
  PC0KW06.PC6CXNBR = VPOITM05.PC6CXNBR;
  PC0KW06.PC6PLAN = VPOITM05.PC6PLAN;
  PC0KW06.XPLCD = VPOITM05.XPLCD;
  PC0KW06.XPRCD = VPOITM05.XPRCD;
  PC0KW06.XPCCD = VPOITM05.XPCCD;
  PC0KW06.SYBSTGNB = VPOITM05.SYBSTGNB;
  PC0KW06.XGACD = VPOITM05.XGACD;
  PC0KW06.PG1SC4CD = VPOITM05.PG1SC4CD;
  PC0KW06.PC6CLVAR = VPOITM05.PC6CLVAR;
  PC0KW06.XWHCD = VPOITM05.XWHCD;
  PC0KW06.PC2CUXID = VPOITM05.PC2CUXID;
  PC0KW06.YSMXDV = VPOITM05.YSMXDV;
  PC0KW06.PC6XCTCD = VPOITM05.PC6XCTCD;
  PC0KW06.OP1CUPO = VPOITM05.OP1CUPO;
  PC0KW06.OP1PARTN = VPOITM05.OP1PARTN;
  PC0KW06.OP1CUOID = VPOITM05.OP1CUOID;
  PC0KW06.OP1NORID = VPOITM05.OP1NORID;
  PC0KW06.OP1CUNDT = VPOITM05.OP1CUNDT;
  PC0KW06.PC4ORTYP = VPOITM05.PC4ORTYP;
  PC0KW06.PC61TMSH = VPOITM05.PC61TMSH;
  PC0KW06.XDSCD = VPOITM05.XDSCD;
  PC0KW06.PC6STAT = VPOITM05.PC6STAT;
  PC0KW06.XFRCD = VPOITM05.XFRCD;
  PC0KW06.FB-LATE-BK-FL = VPOITM05.FB-LATE-BK-FL;
  PC0KW06.FB-LATE-BK-FL-MDT = VPOITM05.FB-LATE-BK-FL-MDT;
  PC0KW06.PC6AIRNB = VPOITM05.PC6AIRNB;
  PC0KW06.PC6AIRDT = VPOITM05.PC6AIRDT;
  PC0KW06.PC-NIKE-AFRGT-PCT = VPOITM05.PC-NIKE-AFRGT-PCT;
  PC0KW06.PC-FCTY-AFRGT-PCT = VPOITM05.PC-FCTY-AFRGT-PCT;
  PC0KW06.PC6NILRF = VPOITM05.PC6NILRF;
  PC0KW06.YOHCD = VPOITM05.YOHCD;
  PC0KW06.PC3SIFL = VPOITM05.PC3SIFL;
  PC0KW06.PC6SZAVL = VPOITM05.PC6SZAVL;
  PC0KW06.PC6CONNO = VPOITM05.PC6CONNO;
  PC0KW06.PC6PETS = VPOITM05.PC6PETS;
  PC0KW06.PC6OETAL = VPOITM05.PC6OETAL;
  PC0KW06.PC6ETALF = VPOITM05.PC6ETALF;
  PC0KW06.PC6TORIG = VPOITM05.PC6TORIG;
  PC0KW06.PC6MICHG = VPOITM05.PC6MICHG;
  PC0KW06.PC6TORDE = VPOITM05.PC6TORDE;
  PC0KW06.PC6TADD = VPOITM05.PC6TADD;
  PC0KW06.PC6TCNCL = VPOITM05.PC6TCNCL;
  PC0KW06.PC6PREFL = VPOITM05.PC6PREFL;
  PC0KW06.XIB-IBANK-CD = VPOITM05.XIB-IBANK-CD;
  PC0KW06.PC-REL-PLN-REF-NBR = VPOITM05.PC-REL-PLN-REF-NBR;
  PC0KW06.PC-LGL-PO-PRT-IND = VPOITM05.PC-LGL-PO-PRT-IND;
  PC0KW06.XXXUSRID = VPOITM05.XXXUSRID;
  PC0KW06.ZZZSDT = VPOITM05.ZZZSDT;
  PC0KW06.ZZZCHGDT = VPOITM05.ZZZCHGDT;
  PC0KW06.ZZZCHGTM = VPOITM05.ZZZCHGTM;
  PC0KW06.ZZZCHGCT = VPOITM05.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS26 ***********************/
end // end PC0KS26

// Save ("Merge To" size Row)
Function PC0KS27()
   /* ----------------------------------------------------------*/
    /* Saved copy of the "Split to" size row.*/

    /* This module moves everything, like "move corresponding",*/
    /* to PC0KW07 and is a mirror image of the PC7REC.*/
   /* ----------------------------------------------------------*/

  PC0KW07.XGPCD = VPOSIZ02.XGPCD; /* GPC code*/
  PC0KW07.PO-REG-CD = VPOSIZ02.PO-REG-CD; /* PO REGION CODE*/
  PC0KW07.PC3PONBR = VPOSIZ02.PC3PONBR; /* PO number*/
  PC0KW07.PC6ITMNB = VPOSIZ02.PC6ITMNB;
  PC0KW07.ZFC-CRCY-CD = VPOSIZ02.ZFC-CRCY-CD;
  move VPOSIZ02.PC7ORIGQ to PC0KW07.PC7ORIGQ[1] for all;
  move VPOSIZ02.PC7ORDEQ to PC0KW07.PC7ORDEQ[1] for all;
  move VPOSIZ02.PC7FOBFL to PC0KW07.PC7FOBFL[1] for all;
  move VPOSIZ02.FY4FOBPR to PC0KW07.FY4FOBPR[1] for all;
  PC0KW07.ZZZSDT = VPOSIZ02.ZZZSDT;
  PC0KW07.ZZZCHGDT = VPOSIZ02.ZZZCHGDT;
  PC0KW07.ZZZCHGTM = VPOSIZ02.ZZZCHGTM;
  PC0KW07.ZZZCHGCT = VPOSIZ02.ZZZCHGCT;

   /* **                                                        ***/
   /* ********************** End of PC0KS27 ***********************/
end // end PC0KS27

// load saved "Maint." item row
Function PC0KS28()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Maintenance" item row.*/
    /* the copy before any changes made.*/
   /* ----------------------------------------------------------*/

  set VPOAIT02 empty;

  VPOAIT02.XGPCD = PC0KW04.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0KW04.PO-REG-CD; /* PO reg*/
  VPOAIT02.PC3PONBR = PC0KW04.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0KW04.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0KW04.SY2CLRID;
  VPOAIT02.XDMCD = PC0KW04.XDMCD;
  VPOAIT02.XQACD = PC0KW04.XQACD;
  VPOAIT02.XOWCD = PC0KW04.XOWCD;
  VPOAIT02.PC2INSEG = PC0KW04.PC2INSEG;
  VPOAIT02.XPGCD = PC0KW04.XPGCD;
  VPOAIT02.XUMCD = PC0KW04.XUMCD;
  VPOAIT02.PCFSECD = PC0KW04.PCFSECD;
  VPOAIT02.PC3POIDT = PC0KW04.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0KW04.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0KW04.PC6ETSDT;
  VPOAIT02.PC6OETS = PC0KW04.PC6OETS;
  VPOAIT02.PC6RTADT = PC0KW04.PC6RTADT;
  VPOAIT02.YMTCD = PC0KW04.YMTCD;
  VPOAIT02.XWHCD = PC0KW04.XWHCD;
  VPOAIT02.PC2CUXID = PC0KW04.PC2CUXID;
  VPOAIT02.PC6XCTCD = PC0KW04.PC6XCTCD;
  VPOAIT02.PC6CXNBR = PC0KW04.PC6CXNBR;
  VPOAIT02.PC6PLAN = PC0KW04.PC6PLAN;
  VPOAIT02.XDSCD = PC0KW04.XDSCD;
  VPOAIT02.YSMXDV = PC0KW04.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0KW04.PC4ORTYP;
  VPOAIT02.XPRCD = PC0KW04.XPRCD;

  VPOAIT02.OP1CUOID = PC0KW04.OP1CUOID;
  VPOAIT02.OP1NORID = PC0KW04.OP1NORID;
  if (PC0KW04.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW04.OP1CUOID;
    VPOAIT02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOAIT02.OP1PARTN = " ";
  end

  VPOAIT02.PG1SC4CD = PC0KW04.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0KW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0KS28 ***********************/
end // end PC0KS28

// load saved "Split To" Item row
Function PC0KS29()
   /* ----------------------------------------------------------*/
    /* Load saved copy of the "Split To" item row.*/
   /* ----------------------------------------------------------*/

  VPOAIT02.XGPCD = PC0KW06.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = PC0KW06.PO-REG-CD; /* PO number*/
  VPOAIT02.PC3PONBR = PC0KW06.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = PC0KW06.SY1STNBR;
  VPOAIT02.SY2CLRID = PC0KW06.SY2CLRID;
  VPOAIT02.XDMCD = PC0KW06.XDMCD;
  VPOAIT02.XQACD = PC0KW06.XQACD;
  VPOAIT02.XOWCD = PC0KW06.XOWCD;
  VPOAIT02.PC2INSEG = PC0KW06.PC2INSEG;
  VPOAIT02.XPGCD = PC0KW06.XPGCD;
  VPOAIT02.XUMCD = PC0KW06.XUMCD;
  VPOAIT02.PCFSECD = PC0KW06.PCFSECD;
  VPOAIT02.PC3POIDT = PC0KW06.PC3POIDT;
  VPOAIT02.FY1FCTYC = PC0KW06.FY1FCTYC;
  VPOAIT02.PC6ETSDT = PC0KW06.PC6ETSDT;
  VPOAIT02.PC6OETS = PC0KW06.PC6OETS;
  VPOAIT02.PC6RTADT = PC0KW06.PC6RTADT;
  VPOAIT02.YMTCD = PC0KW06.YMTCD;
  VPOAIT02.XWHCD = PC0KW06.XWHCD;
  VPOAIT02.PC2CUXID = PC0KW06.PC2CUXID;
  VPOAIT02.PC6XCTCD = PC0KW06.PC6XCTCD;
  VPOAIT02.PC6CXNBR = PC0KW06.PC6CXNBR;
  VPOAIT02.PC6PLAN = PC0KW06.PC6PLAN;
  VPOAIT02.XDSCD = PC0KW06.XDSCD;
  VPOAIT02.YSMXDV = PC0KW06.YSMXDV;
  VPOAIT02.PC4ORTYP = PC0KW06.PC4ORTYP;

  VPOAIT02.OP1CUOID = PC0KW06.OP1CUOID;
  VPOAIT02.OP1NORID = PC0KW06.OP1NORID;
  if (PC0KW06.OP1CUOID > 0)
    PC0KW01.PC0KW-FRMT-CUST-ORD = PC0KW06.OP1CUOID;
    VPOAIT02.OP1PARTN = PC0KW01.PC0KW-FRMT-PART-NBR;
  else
    VPOAIT02.OP1PARTN = " ";
  end

  VPOAIT02.XPRCD = PC0KW06.XPRCD;

  VPOAIT02.PG1SC4CD = PC0KW06.PG1SC4CD;
  VPOAIT02.PCJGLOFL = "N";
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID;

  VPOAIT02.YACCD = PC0KW01.YACCD;

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* **                                                        ***/
   /* ********************** End of PC0KS29 ***********************/
end // end PC0KS29

// Get P.O.Type data     VPOTYP01
Function PC0KS30()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set PC4REC empty; /* Row storage area*/

  PC4REC.XGPCD = PC0KW01.XGPCD; /* ===> GPC*/
  PC4REC.PC4ORTYP = PC0KW01.PC4ORTYP; /* ===> p.o. type code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set PC0KM001.PC4ORTYP cursor, skip, bold;
      PC0KW00.XXXPRCNM = "PC0KS30"; /* Module identification*/
      PCWREC.XXXMSGNO = 33; /* Indicate missing or invalid*/

      if (PC0KW00.PC0KWSWR == "Y") /* ===> request for data in progress*/
        return; /* =============> Exit to display map*/
      else
        exit stack; /* =============> Exit to display map*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.PC0KWSWM = "1"; /* Map to be displayed switch*/
  PC0KW00.PC0KWSWR = "N"; /* Request for data switch*/

  PC0KW00.XXXPRCNM = "PC0KS30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* ================> Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS30 ***********************/
end // end PC0KS30

// Select (S7) Set/Open  VPOITM05
Function PC0KS41()
   /* ------------------------------------------------------------*/
   /* Declare cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

   /* ===> initialization done in PC0K364*/

  PCYREC.PCYFUNC = "SH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS41";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS41"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS41 ***********************/
end // end PC0KS41

// Fetch  (N7) Next row  VPOITM05
Function PC0KS42()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0KW00.PC0KWSWT = "Y"; /* Set end of temp cursor*/
      return; /* Return to previous process*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS42";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS42"; /* Process name*/
  TA1REC.TA1LOC = "SELECT ITEM ROW         ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS42 ***********************/
end // end PC0KS42

// Close  (C7) Set       VPOITM05
Function PC0KS43()
   /* ------------------------------------------------------------*/
   /* Close cursor for VPOITM05*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS43";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS43"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS43 ***********************/
end // end PC0KS43

// Update (UA) item row  VPOITM05
Function PC0KS60()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "UA";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0KS60"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PC0KS99(); /* ===> reset indexes & flags for request for data*/

    PCWREC.XXXMSGNO = 12; /* ======> data updated by another*/
    exit stack; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
                                                              /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ALTENATE (UA) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS60 ***********************/
end // end PC0KS60

// Insert (A ) Item row  VPOITM05
Function PC0KS61()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Item table.*/
   /* ------------------------------------------------------------*/

  VPOITM05.PC6PREFL = "N";
   /* ------------------------------------------------------------*/
   /* also adding init of new fields for db2 chngs 10/08/91*/
   /* ------------------------------------------------------------*/
  VPOITM05.FB-LATE-BK-FL = "N";
  VPOITM05.FB-LATE-BK-FL-MDT = 0;
  VPOITM05.XFRCD = " ";
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "A ";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0KS61"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;

   /* IF EZERT8 EQ '00000000'         ; Call successful*/
    /* AND SQLCA.SQLCODE EQ 100      ; and normal return code*/

    /* PERFORM PC0K368     ;===> reset indexes & flags*/

    /* MOVE 12 TO EZEMNO   ;=======> data updated by another*/

    /* EZEFLO                        ; Return to previous process*/

   /* END ;*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Exit to display map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/
                                  /* ***/
  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS61 ***********************/
end // end PC0KS61

// verify Scheduler Code
Function PC0KS70()
   /* ------------------------------------------------------------*/
   /* Set-up and Select the row to display from the table.*/
   /* Note: the first row is all that needs to be selected to*/
         /* verify that it exists.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty;
  /* Code changed due to error to find the scheduler Name */
  /* MOVE '03' TO PG1REC.XGPCD;*/
  if (PC0KW01.XGPCD != PC0KM001.XGPCD)
    PG1REC.XGPCD = PC0KM001.XGPCD;
  else
    PG1REC.XGPCD = PC0KW01.XGPCD;
  end
   /* MOVE '03' TO PG1REC.XGPCD;       /* */
  PG1REC.PG1SC4CD = PC0KM001.PG1SC4CD;
  PG1REC.PG1FCTCD = "**";

  PC0KS71(); /* Open cursor for row*/

  PC0KS72(); /* Fetch first row*/
   /* -------------------------------===> Prime read*/

   /* ------------------------------------------------------------*/
   /* If row found, Load Scheduler Code to display record*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    PC0KW01.PG1SC4CD = PC0KM001.PG1SC4CD;
  
    if (PC0KM001.PG1SC4CD == "    ")
      PG1REC.XXXUSER = "N/A";
    end
    PC0KM001.PC0KSCNM = PG1REC.XXXUSER;
  
                                   /* move scheduler user to map*/
    PC0KW00.PC0KWMOD = "Y";
  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate the Scheduler invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(380); /* ===>scheduler missing or invalid*/
    PC0KW00.XXXPRCNM = "PC0KS70"; /* Module identification*/
    set PC0KM001.PG1SC4CD cursor, bold; /* Highlight userid*/
  end

  PC0KS73(); /* Close cursor for rows*/

   /* **                                                        ***/
   /* ********************** End of PC0KS70 ***********************/
end // end PC0KS70

// Select (SS) Set/Open  VSUSER01
Function PC0KS71()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SS", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS71"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET/OPEN  TABLE    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS71 ***********************/
end // end PC0KS71

// Fetch  (SN) Next row  VSUSER01
Function PC0KS72()
   /* ------------------------------------------------------------*/
   /* Fetch Next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SN", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT (SN)  TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS72 ***********************/
end // end PC0KS72

// Close  (CS) Set       VSUSER01
Function PC0KS73()
   /* ------------------------------------------------------------*/
   /* Close Select Set from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("CS", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Exit to display map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS73"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET (CS) OF ROWS    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG1REC.PG1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS73 ***********************/
end // end PC0KS73

// get shipped quantities
Function PC0KS80()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - Accumulate the the total quantities shipped for*/
     /* the given ---> Product & Destination*/
   /* ------------------------------------------------------------*/

  PC0KS81(); /* ===>Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and accumulate the "Balance to Ship" until EOF*/
   /* ------------------------------------------------------------*/

  PC0KS82(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC0KW00.PC0KWSWT == "N") /* ===>Until end of cursor temp for*/
                                   /* "CPL"*/

    if (TSTREC.TSISTAT == "IT" /* ===> Shipped quantities*/
     || TSTREC.TSISTAT == "RC" /* ===> Recieved quantities*/
     || TSTREC.TSISTAT == "CC") /* ===> Custom carried quantities*/

      PC0KW00.TSISHPQT = PC0KW00.TSISHPQT + TSTREC.TSISHPQT;

    end

    PC0KS82(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0KS83(); /* ===> Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0KS80 ***********************/
end // end PC0KS80

// Select (S1)  Set/Open VCPLHD02
Function PC0KS81()
   /* ------------------------------------------------------------*/
    /* Initialize fields and*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0KW00.TSISHPQT = 0; /* ===>reset total shipped qtys*/
  PC0KW00.PC0KWSWT = "N"; /* ===> initialize temp cursor "CPLHD"'*/

  TSTREC.XGPCD = PC0KW01.XGPCD; /* ===>*/
  TSTREC.PC3PONBR = PC0KW01.PC3PONBR; /* ===>*/

   /* ============>PRODUCT FIELDS  (non modifialble fields)*/
   /* ============>--------------*/
  TSTREC.SY1STNBR = PC0KW01.SY1STNBR; /* ===>*/
  TSTREC.SY2CLRID = PC0KW01.SY2CLRID; /* ===>*/
  TSTREC.XDMCD = PC0KW01.XDMCD; /* ===>*/
  TSTREC.XQACD = PC0KW01.XQACD; /* ===>*/
  TSTREC.XPGCD = PC0KW01.XPGCD; /* ===>*/
  TSTREC.XUMCD = PC0KW01.XUMCD; /* ===>*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("S1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KS81"; /* Module identification*/
  PC0KW00.PC0KWSWM = "1"; /* ==>set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KWSWR = "N"; /* ==>set request for data switch*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS81 ***********************/
end // end PC0KS81

// Fetch  (N1)  Next row VCPLHD02
Function PC0KS82()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("N1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, accumulate the  "Total Shipped Quantites"*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0KW00.PC0KWSWT = "Y"; /* Indicate end of temp cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KS82"; /* Module identification*/
  PC0KW00.PC0KWSWM = "1"; /* ==> set map switch*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    PC0KW00.PC0KWSWR = "N"; /* ==> set request for data switch*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS82 ***********************/
end // end PC0KS82

// Close  (C1)  Set      VCPLHD02
Function PC0KS83()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4230" ("C1", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KS83"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS83 ***********************/
end // end PC0KS83

// get item receipt data
Function PC0KS90()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for a set of shipped quantities*/
   /* - process the set of rows for value in receipt array*/
     /* - cannot merge plans because receipt data exists*/
   /* ------------------------------------------------------------*/

  PC0KS91(); /* ===>Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next receipt data*/
   /* ------------------------------------------------------------*/

  PC0KS92(); /* ===> Fetch next selected row*/
   /* ------------------------------===> Prime read*/

  while (PC0KW00.PC0KWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/

    /* ------------------------------------------------------------*/
     /* If there is size quanitities in the size quantity array*/
     /* for received data in working storage set end of cursor and*/
     /* signify error for merging plans not allowed if either plan*/
     /* has receipt data.*/
    /* ------------------------------------------------------------*/

    if (VFYPO002.YRSCD == "10") /* ===> good status code*/

      PC0KW00.PC0KWIXT = 1; /* Initialize general index*/

      while (PC0KW00.PC0KWIXT <= 40
       && PC0KW00.PC0KWSWT == "N") /* ===> Until end of temp cursor "FYPO"*/
        if (VFYPO002.PCMRCPTQ[PC0KWIXT] != 0)
          PC0KW00.PCMRCPTQ = VFYPO002.PCMRCPTQ[PC0KWIXT];
          PC0KW00.PC0KWSWT = "Y";
                                   /* ===> force  EOF temp cursor "FYPO"*/
        end
        PC0KW00.PC0KWIXT = PC0KW00.PC0KWIXT + 1;
      end

    end /* ===> status of record check*/

    PC0KS92(); /* ===> Fetch next selected row*/
    /* ------------------------------===> Driving read*/

  end /* ====> while EOF of temp cursor*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PC0KS93(); /* ===> Close the selected set cursor*/

   /* **                                                        ***/
   /* ********************** End of PC0KS90 ***********************/
end // end PC0KS90

// Select (S1) Set/Open  VFYPO001
Function PC0KS91()
   /* ------------------------------------------------------------*/
    /* Set up the key for the Select Set Open cursor*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWSWT = "N"; /* Set EOF Temp cursor flag to no*/
  PC0KW00.PCMRCPTQ = 0; /* reciept data accumulator*/

   /* =========> PRODUCT FIELDS      ---> non-modifiable data*/
   /* =========> ------------------  --->  for merge 'from/to' row*/

  VFYPO002.XGPCD = PC0KW01.XGPCD;
  VFYPO002.PO-REG-CD = PC0KW01.PO-REG-CD; /* PO REGION CODE*/
  VFYPO002.PC3PONBR = PC0KW01.PC3PONBR; /* PO number*/
  VFYPO002.SY1STNBR = PC0KW01.SY1STNBR; /* Style number*/
  VFYPO002.SY2CLRID = PC0KW01.SY2CLRID; /* Color code*/
  VFYPO002.XDMCD = PC0KW01.XDMCD; /* Dimension code*/
  VFYPO002.XQACD = PC0KW01.XQACD; /* Quality code*/
  VFYPO002.XPGCD = PC0KW01.XPGCD; /* Package code*/
  VFYPO002.XUMCD = PC0KW01.XUMCD; /* Unit of measure*/

  try
    call "VFYPO002" ("S1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS91"; /* Process name*/
  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS91"; /* Process name*/
  TA1REC.TA1LOC = "DECLARE CURSOR          ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS91 ***********************/
end // end PC0KS91

// Fetch  (N1) Next row  VFYPO001
Function PC0KS92()
   /* ------------------------------------------------------------*/
   /* If row not found return to previous process.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("N1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PC0KW00.PC0KWSWT = "Y"; /* Indicate temp cursor at EOF*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS92";
  PC0KW00.PC0KWSWM = "1"; /* ===> request for map switch*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS92"; /* Process name*/
  TA1REC.TA1LOC = "FETCH ROW               ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS92 ***********************/
end // end PC0KS92

// Close  (C1) Set       VFYPO001
Function PC0KS93()
   /* ------------------------------------------------------------*/
   /* Close cursor for VFYPO002*/
   /* ------------------------------------------------------------*/

  try
    call "VFYPO002" ("C1", SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  PC0KW00.XXXPRCNM = "PC0KS93"; /* ===> process identification*/
  PC0KW00.PC0KWSWM = "1"; /* ===>request for map switch*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KS93"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE CURSOR            ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KS93 ***********************/
end // end PC0KS93

// Select (S ) Unique    VPRDCU01
Function PC0KS98()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key information.*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* Row storage area*/

  VPRDCU03.XGPCD = PC0KW01.XGPCD; /* ===> GPC*/
  VPRDCU03.PC2CUXID = PC0KW01.PC2CUXID; /* ===> cust. xref ID*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If row not found, indicate invalid.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    converseLib.clearScreen();
    
    set PC0KM001.PC0KMCUS cursor, bold;

    PC0KW00.XXXPRCNM = "PC0KS98"; /* Module identification*/
    converseLib.validationFailed(45);

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KS98"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
   /* MOVE VPRDCU03.PC2KEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KS98 ***********************/
end // end PC0KS98

// re-initialize indexes & flags
Function PC0KS99()
   /* ------------------------------------------------------------*/
   /* re-initialize indexes and flags for requested new data*/
   /* ------------------------------------------------------------*/

  PC0KW00.PC0KWUPF = "N"; /* ===>D.B. Update flag*/
  PC0KW00.PC0KWCLF = "N"; /* ===>D.B. Cancel flag*/
  PC0KW00.PC0KWMOD = "N"; /* ===>reset modified flag*/
  PC0KW00.PC0KWPF9 = "N"; /* ===>set request for PF9 switch*/
  PC0KW00.PC0KWPF2 = "N"; /* ===>set request for PF2 switch*/
  PC0KW00.PC0KWSWR = "Y"; /* ===>request for data*/
  PC0KW00.PC0KWSWF = "Y"; /* ===>request for format map 1*/
  PC0KW00.PC0KWS2F = "Y"; /* ===>request for format map 2*/
  PC0KW00.PC0KWF16 = "Y"; /* ===>initialize first sizes*/
  PC0KW00.PC0KWM16 = "N"; /* ===>initialize middle sizes*/
  PC0KW00.PC0KWIXS = 1; /* ===>initialize index*/

   /* **                                                        ***/
   /* ********************** End of PC0KS99 ***********************/
end // end PC0KS99

// Select (S7) Set/Open  VPOITM05
Function PC0KSB1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "SH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KSB1"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSB1 ***********************/
end // end PC0KSB1

// Fetch  (N7) Next row  VPOITM05
Function PC0KSB2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NH";
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0KW00.PC0KWSWT = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC0KW00.XXXPRCNM = "PC0KSB2"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSB2 ***********************/
end // end PC0KSB2

// Close  (C7) Set       VPOITM05
Function PC0KSB3()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CH";
  try
    call "VPOITM05" ("CH", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC0KW00.XXXPRCNM = "PC0KSB3"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSB3 ***********************/
end // end PC0KSB3

// Select (S ) Unique    VPOSIZ01
Function PC0KSB6()
   /* ------------------------------------------------------------*/
   /* Initialize the key information for select call*/
   /* ------------------------------------------------------------*/

  set VPOSIZ02 empty; /* ====> row storage area*/

  VPOSIZ02.XGPCD = VPOITM05.XGPCD;
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD;
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR;
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* ===> current item seq nbr*/

   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0KW00.XXXPRCNM = "PC0KSB6"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;
  PC0KW00.PC0KWSWM = "1";

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSB6 ***********************/
end // end PC0KSB6

// Update (U ) Size row  VPOSIZ01
Function PC0KSD0()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0KSD0"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;
  PC0KW00.PC0KWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    PCWREC.XXXMSGNO = 18; /* =======> data updated by another*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSD0 ***********************/
end // end PC0KSD0

// Insert (A ) Size row  VPOSIZ01
Function PC0KSD1()
   /* ------------------------------------------------------------*/
   /* Select/update unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

  PC0KW00.XXXPRCNM = "PC0KSD1"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;
  PC0KW00.PC0KWSWM = "1";

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and normal return code*/

    converseLib.validationFailed(18); /* =======> data updated by another*/

    PC0KS99(); /* ===>re-initialize indexes and flags*/
                                   /* for new data*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* Return to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    PC0KW00.PC0KW911 = "Y"; /* ===> -911 flag*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT (A ) SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSD1 ***********************/
end // end PC0KSD1

// Select sales order
Function PC0KSE2()
   /* ------------------------------------------------------------*/
   /* Style/Color/Dim processing*/
   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  OP2REC.XGPCD = PC0KW01.XGPCD;
  OP2REC.SY1STNBR = PC0KW01.SY1STNBR;
  OP2REC.SY2CLRID = PC0KW01.SY2CLRID;
  OP2REC.XDMCD = PC0KW01.XDMCD;
   /* MOVE ' ' TO OP2REC.OP2CGPCD;     /* COOR GROUP CODE*/

  PC0KSE4(); /* Use SA to scan sales order item table*/

  if (SQLCA.VAGen_SQLCODE == 100) /* NOT FOUND*/
    set PC0KM001.OP1CUOID cursor, bold;
    set PC0KM001.OP1NORID bold;
    PC0KW00.XXXPRCNM = "PCOKSE2";
    converseLib.validationFailed(442); /* SALES ORDER ITEM NOT FOUND*/
    return;
  end

   /* ------------- End of process PC0KSE2 -----------------------*/

end // end PC0KSE2

// Verify Order Number
Function PC0KSE4()
   /* ------------------------------------------------------------*/
   /* Obtain Sales Order Item from IOMOD IO0440.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0440" ("SE", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* ROW NOT FOUND*/
     || SQLCA.VAGen_SQLCODE == -811) /* multiple rows*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that the system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PC0KW00.XXXPRCNM = "PC0KSE4"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911    /* and resource not available*/
  )                                 
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER   "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VITEM001 "; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ----------- End of STATEMENT Pc0kse4 -----------------------*/

end // end PC0KSE4

// Select (M1) audit seq VPOAIT01
Function PC0KSF0()
   /* ----------------------------------------------------------*/
    /* Do a select max count on the item audit sequence number*/
    /* and add 1 to the count.*/
   /* ----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* A -305 return code indicates the count was a zero--make the*/
   /* plan number 1, otherwise add one to the SEQ NBR returned*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PC0KW00.PCJSEQNO = VPOAIT02.PCJSEQNO + 1;
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == -305) /* Zero count returned*/
      PC0KW00.PCJSEQNO = 1;
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  PC0KW00.XXXPRCNM = "PC0KSF0";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KSF0"; /* Process name*/
  TA1REC.TA1LOC = "MAX COUNT ON ITEM AUDIT ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;
   /* **                                                        ***/
   /* ********************** End of PC0KSF0 ***********************/
end // end PC0KSF0

// Insert (A) Item audit VPOAIT01
Function PC0KSF1()
   /* ------------------------------------------------------------*/
    /* Add the formatted item audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "A ";
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/

    VPOAIT02.PCJNETQT = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIAFTN = 0; /* ===> reset audit field*/
    VPOAIT02.PCIBFRA = " "; /* ===> reset audit field*/
    VPOAIT02.PCIAFTA = " "; /* ===> reset ausit field*/
    return;

  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PC0KW00.XXXPRCNM = "PC0KSF1";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KSF1"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOAIT02.VPOAIT02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KSF1 ***********************/
end // end PC0KSF1

// Insert (A) Size audit VPOASZ01
Function PC0KSF2()
   /* ------------------------------------------------------------*/
   /* Insert/add the formatted size audit record to the D.B.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  PC0KW00.XXXPRCNM = "PC0KSF2";
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0KSF2"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOASZ02.VPOASZ02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack;

   /* **                                                        ***/
   /* ********************** End of PC0KSF2 ***********************/
end // end PC0KSF2

// Select (S ) Unique    VGASIZ01
Function PC0KSF3()
   /* ------------------------------------------------------------*/
   /* Select unique row from the P.O. Size Table.*/
   /* ------------------------------------------------------------*/

  set PG6REC empty;

  PG6REC.XGACD = PG2REC.XGACD;
  PG6REC.SY4SZSCL = PG2REC.SY4SZSCL;

  try
    call "IO0960" ("S ", SQLCA, PG6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end

  end

  PC0KW00.XXXPRCNM = "PC0KSF3"; /* Module identification*/
  set PC0KM001.PC3PONBR cursor;
  PC0KW00.PC0KWSWM = "1";

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set PC0KM001 initial; /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all D.B Changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT GENDER AGE/SIZE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPGSIZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG6REC.PG6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* **                                                        ***/
   /* ********************** End of PC0KSF3 ***********************/
end // end PC0KSF3

// Driver (set audit rec. flags)
Function PC0KSF4()
   /* ------------------------------------------------------------*/
   /* This module is preformed to process and load audits flags*/
   /* for an  audit on the "maintenance From" item row.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                    /* L/C Amend print indicator*/
     /* If the destination changed*/
      /* or QTYs and/or Prices changed*/
      /* or cancel of item through PF15 performed*/
        /* The L/C Amendment print indicator need to be set*/
        /* (1,2,3,5)*/
   /* else*/
        /* The L/C Amendment print indicator need to be set*/
        /* (3,5)*/
   /* ------------------------------------------------------------*/

  if (PC0KW01.PC2CUXID != PC0KW04.PC2CUXID /* ===> Cust. Xref code*/
   || PC0KW01.XWHCD != PC0KW04.XWHCD       /* ===> warehouse code*/
   || PC0KW00.PC0KWSUP == "Y"              /* ===> size type update occured*/
   || converseVar.eventKey is pf15)        /* ===> PF15 cancelled performed*/

    PC0KSF6(); /* ===> Get and Load L/C Amend print indicator*/

  else

    PC0KSF7(); /* ===> Get and Load L/C Amend print indicator*/

  end

   /* ------------------------------------------------------------*/
                     /* Change Memo flag*/
   /* ------------------------------------------------------------*/

  PC0KSF8(); /* ===> Get and Load Change Memo Flag*/

   /* ------------------------------------------------------------*/
                    /* Order Adjustment flag*/
   /* ------------------------------------------------------------*/

  PC0KSF9(); /* ===> Get and Load Order adjustment*/
                                   /* flag*/

   /* **                                                        ***/
   /* ********************** End of PC0KSF4 ***********************/
end // end PC0KSF4

// Get & Load L/C Amend (1,2,3,5)
Function PC0KSF6()
   /* ------------------------------------------------------------*/
   /* Determine if the L/C flag is set and load the appropriate*/
   /* L/C amendment indicator accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOAIT02.YOACD in YOATBL.YOACD /* ===> Cose is in table*/
   && YOATBL.XGPCD[sysVar.arrayIndex] == VPOAIT02.XGPCD)

    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y")

      if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
        VPOAIT02.PCJAMEND = "1"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "2";
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    else /* ===> L/C Flag set to "N"*/

      if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
        VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end

    end /* ===> L/C Flag check*/

  else /* ===> code not in table*/

    PC0KW00.XXXPRCNM = "PC0KSF6"; /* Module identification*/
    converseLib.validationFailed(139); /* Indicate missing or invalid*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> rollback all changes*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of PC0KSF6 ***********************/
end // end PC0KSF6

// Get & Load L/C Amend (5,3)
Function PC0KSF7()
   /* ------------------------------------------------------------*/
   /* The size record was not updated so load the appropriate*/
   /* L/C Amendment Print Indicator accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3NISFL == "Y") /* ===> If PC_NISSHO_SNT_FL*/
    VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
  else
    if (VPOHDR02.PC3NISFL == "N")
      VPOAIT02.PCJAMEND = "5"; /* ==> Load PC_LOCR_AMD_PRTIND*/
    else
      VPOAIT02.PCJAMEND = "3";
    end
  end /* ===> code not in table*/

   /* **                                                        ***/
   /* ********************** End of PC0KSF7 ***********************/
end // end PC0KSF7

// Get & Load "Change Memo Flag"
Function PC0KSF8()
   /* ------------------------------------------------------------*/
   /* Determine if the change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT /* IF ETS changed*/
         || PC0KW01.YMTCD != PC0KW04.YMTCD)      /* or mode changed*/
          if (PC0KW01.PC2CUXID == PC0KW04.PC2CUXID /* IF cust not changed*/
           && PC0KW01.XWHCD == PC0KW04.XWHCD       /* and whse not changed*/
           && PC0KW01.XOWCD == PC0KW04.XOWCD)      /* owner gp not changed*/
            VPOAIT02.PCJMEMO = "N";
          else
            VPOAIT02.PCJMEMO = " ";
          end
        else
          VPOAIT02.PCJMEMO = " ";
        end
      else
        VPOAIT02.PCJMEMO = "N";
      end

    else /* ===> code not in table*/

      PC0KW00.XXXPRCNM = "PC0KSF8"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0KSF8 ***********************/
end // end PC0KSF8

// Get & Load "Order Adj. Flag"
Function PC0KSF9()
   /* ------------------------------------------------------------*/
   /* Determine if the Order Adjustment flag is set and load the*/
   /* appropriate Order Adjustment flag accordingly*/
   /* ------------------------------------------------------------*/

  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> Order adjustment flag*/
        if (PC0KW01.PC6ETSDT != PC0KW04.PC6ETSDT) /* if ETS changed*/
          if (PC0KW01.PC2CUXID == PC0KW04.PC2CUXID /* if cust not changed*/
           && PC0KW01.XWHCD == PC0KW04.XWHCD       /* and whse not changed*/
           && PC0KW01.YMTCD == PC0KW04.YMTCD)      /* and mode not changed*/
            VPOAIT02.PCJOAPRT = "N";
          else
            VPOAIT02.PCJOAPRT = " ";
          end
        else
          VPOAIT02.PCJOAPRT = " ";
        end
      else
        VPOAIT02.PCJOAPRT = "N";
      end

    else /* ===> code not in table*/

      PC0KW00.XXXPRCNM = "PC0KSF9"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJOAPRT = "N";
  end

   /* **                                                        ***/
   /* ********************** End of PC0KSF9 ***********************/
end // end PC0KSF9

Function PC0KSS2()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table row access.*/
   /* ------------------------------------------------------------*/
   /* /*/
   /* ------------------------------------------------------------*/
   /* Get the override address data.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOIAD02" ("S ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      /**/
      return; /* Return to previous process*/
      /**/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KSS2"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    /**/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /**/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD02"; /* Table view name*/

  PC0KW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0KW00.PC0KWKA1 = VPOIAD02.XGP-GPC-CD; /* Key field 1*/
  PC0KW00.PC0KWKN2 = VPOIAD02.SY-STY-NBR; /* Key field 2*/
  PC0KW00.PC0KWKA3 = VPOIAD02.SY-COLR-CD-ID; /* Key field 3*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0KSS2

Function PC0KSS3()
   /* ------------------------------------------------------------*/
   /* Add the override address data.*/
   /* ------------------------------------------------------------*/
  VPOIAD02.ZZ-SDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOIAD02.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOIAD02.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "VPOIAD02" ("A ", SQLCA, VPOIAD02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      /**/
      return; /* Return to previous process*/
      /**/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0KW00.XXXPRCNM = "PC0KSS3"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    /**/
    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    /**/
  else
    /**/
    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /**/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW";
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0KW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD02"; /* Table view name*/

  PC0KW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0KW00.PC0KWKA1 = VPOIAD02.XGP-GPC-CD; /* Key field 1*/
  PC0KW00.PC0KWKN2 = VPOIAD02.SY-STY-NBR; /* Key field 2*/
  PC0KW00.PC0KWKA3 = VPOIAD02.SY-COLR-CD-ID; /* Key field 3*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0KSS3

//*** RECORD=PC0KW00 ****
// ------------------------------------------------------------
// Application working storage.
// used for general working storage functions such uses as:
//     Indexes
//     Flags
//     Temp. accumulators
//     Date calculation fields
//     and other Miscellanous stuff
// 
// ------------------------------------------------------------
// ***********************
Record PC0KW00 type basicRecord
  10 PC0KWSWR PC0KWSWR ; 
  10 PC0KWSWM PC0KWSWM ; 
  10 PC0KWSWS PC0KWSWS ; 
  10 PC0KWSWF PC0KWSWF ; 
  10 PC0KWSWP PC0KWSWP ; 
  10 PC0KWS2F PC0KWS2F ; 
  10 PC0KWXIT PC0KWXIT ; 
  10 PC0KWSWT PC0KWSWT ; 
  10 PC0KWSWC PC0KWSWC ; 
  10 * char(1) ; 
  10 PC0KWFNC PC0KWFNC ; 
  10 PC0KWF16 PC0KWF16 ; 
  10 PC0KWM16 PC0KWM16 ; 
  10 PC0KWMOD PC0KWMOD ; 
  10 PC0KWUPF PC0KWUPF ; 
  10 PC0KWCLF PC0KWCLF ; 
  10 PC0KWPFF PC0KWPFF ; 
  10 PC0KWPCF PC0KWPCF ; 
  10 PC0KWCBF PC0KWCBF ; 
  10 PC0KWFL1 PC0KWFL1 ; 
  10 PC0KWFL2 PC0KWFL2 ; 
  10 PC0KWSUP PC0KWSUP ; 
  10 PC0KWIUP PC0KWIUP ; 
  10 PC0KWIOF PC0KWIOF ; 
  10 PC0KWPF9 PC0KWPF9 ; 
  10 PC0KWPF2 PC0KWPF2 ; 
  10 PC0KWP12 PC0KWP12 ; 
  10 PC0KW911 PC0KW911 ; 
  10 PC0KMFBL PC0KMFBL ; 
  10 * char(1) ; 
  10 PC0KWCSY PC0KWCSY ; 
  10 PC0KWTSY PC0KWTSY ; 
  10 * char(1) ; 
  10 PC0KWCFL PC0KWCFL ; 
  10 PC0KWOFL PC0KWOFL ; 
  10 PC0KWNFL PC0KWNFL ; 
  10 PC0KWOPR PC0KWOPR ; 
  10 PC0KWNPR PC0KWNPR ; 
  10 PC0KWBPR PC0KWBPR ; 
  10 * char(1) ; 
  10 PC0KWIXM PC0KWIXM ; 
  10 PC0KWIXS PC0KWIXS ; 
  10 PC0KWIXR PC0KWIXR ; 
  10 PC0KWIXT PC0KWIXT ; 
  10 PC0KWIXF PC0KWIXF ; 
  10 PC0KWIXZ PC0KWIXZ ; 
  10 * char(1) ; 
  10 PC0KWCB1 PC0KWCB1 ; 
  10 PC0KWCB2 PC0KWCB2 ; 
  10 * char(1) ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 CAFROMAP CAFROMAP ; 
  10 PC6PLAN PC6PLAN ; 
  10 * char(1) ; 
  10 PC0KWDT PC0KWDT ; 
    15 TA2GRGGN TA2GRGGN ; 
  10 * char(1) ; 
  10 TA2GRGG TA2GRGG ; 
    15 PC0KWPCC PC0KWPCC ; 
    15 PC0KWPYR PC0KWPYR ; 
    15 PC0KWPMO PC0KWPMO ; 
    15 PC0KWPDM PC0KWPDM ; 
  10 * char(1) ; 
  10 TA2GRECN TA2GRECN ; 
    15 PC0KWMM PC0KWMM ; 
    15 PC0KWDD PC0KWDD ; 
    15 PC0KWCC PC0KWCC ; 
    15 PC0KWYY PC0KWYY ; 
  10 * char(1) ; 
  10 PC0KW1DT PC0KW1DT ; 
    15 PC0KW1MM PC0KW1MM ; 
    15 PC0KW1DD PC0KW1DD ; 
    15 PC0KW1YY PC0KW1YY ; 
  10 * char(1) ; 
  10 PC0KWFDT PC0KWFDT ; 
    15 PC0KWFCC PC0KWFCC ; 
    15 PC0KWFYY PC0KWFYY ; 
    15 PC0KWFMM PC0KWFMM ; 
    15 PC0KWFDD PC0KWFDD ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 PCMRCPTQ PCMRCPTQ ; 
  10 PC0KWSZQ PC0KWSZQ [40] ; 
  10 PC0KWWSZ PC0KWWSZ ; 
  10 PC0KWORD PC0KWORD [40] ; 
  10 PC0KWOR PC0KWOR ; 
  10 PC0KWBAL PC0KWBAL ; 
  10 * char(1) ; 
  10 PC0KWVAL PC0KWVAL ; 
  10 PC0KWNA PC0KWNA ; 
  10 PC0KWNAC PC0KWNAC ; 
  10 PC0KWNB PC0KWNB ; 
  10 PC0KWNBC PC0KWNBC ; 
  10 PC0KW-AFRGT-CALC-AREA PC0KW-AFRGT-CALC-AREA ; 
  10 PC0KWDIF PC0KWDIF ; 
  10 PC0KWADD PC0KWADD ; 
  10 PC0KWCNL PC0KWCNL ; 
  10 PC0KWQTY PC0KWQTY ; 
  10 FY4FOBPR FY4FOBPR ; 
  10 PC7ORDEQ PC7ORDEQ ; 
  10 PC7ORIGQ PC7ORIGQ ; 
  10 PC0KWSUM PC0KWSUM ; 
  10 XWHPAD XWHPAD ; 
  10 PCJSEQNO PCJSEQNO ; 
  10 * char(1) ; 
  10 PC0KWFB0 PC0KWFB0 ; 
    15 PC0KWFB1 PC0KWFB1 ; 
    15 PC0KWFB2 PC0KWFB2 ; 
    15 PC0KWFB3 PC0KWFB3 ; 
    15 PC0KWFB4 PC0KWFB4 ; 
    15 PC0KWFB5 PC0KWFB5 ; 
  10 * char(1) ; 
  10 PC0KWFOB PC0KWFOB ; 
    15 PC0KWFB6 PC0KWFB6 ; 
    15 PC0KWFB7 PC0KWFB7 ; 
  10 * char(1) ; 
  10 PC0KWFBA PC0KWFBA ; 
    15 PC0KWFBN PC0KWFBN ; 
  10 * char(1) ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0KWKA1 PC0KWKA1 ; 
      20 PC0KWKN1 PC0KWKN1 ; 
      20 * char(1) ; 
    15 PC0KWKA2 PC0KWKA2 ; 
      20 PC0KWKN2 PC0KWKN2 ; 
      20 * char(1) ; 
    15 PC0KWKA3 PC0KWKA3 ; 
      20 PC0KWKN3 PC0KWKN3 ; 
      20 * char(1) ; 
    15 PC0KWKA4 PC0KWKA4 ; 
      20 PC0KWKN4 PC0KWKN4 ; 
      20 * char(1) ; 
  10 PC0KWOKY PC0KWOKY ; 
    15 PC0KWOK1 PC0KWOK1 ; 
    15 PC0KWOK2 PC0KWOK2 ; 
  10 PC0KWWHS PC0KWWHS ; 
  10 PC0KWAIN PC0KWAIN ; 
  10 PC0KWAVQ PC0KWAVQ ; 
  10 PC0KWOGV PC0KWOGV ; 
  10 PC0KWACM PC0KWACM ; 
    15 PC0KWAC1 PC0KWAC1 ; 
    15 PC0KWAC2 PC0KWAC2 ; 
    15 PC0KWAC3 PC0KWAC3 ; 
    15 PC0KWAC4 PC0KWAC4 ; 
    15 PC0KWAC5 PC0KWAC5 ; 
    15 PC0KWAC6 PC0KWAC6 ; 
    15 PC0KWAC7 PC0KWAC7 ; 
  10 * char(1) ; 
  10 PC0K-JAP-SW PC0K-JAP-SW ; 
  10 PC0KXWHCD PC0KXWHCD ; 
end // end PC0KW00

//*** RECORD=PC0KW01 ****
// ********** PRODUCTION ORDER ITEM MAP RECORD ****************
// **                INQUIRY/MAINTANCE                       **
// **                  Display Record                        **
// 
// 
//   RECORD NAME:      PC0KW01
// 
//     MAP NAMES:      PC0KM001 & PC0KM002
// 
//      This record is a working storage record used to
//   hold data that is pertinent to maps PC0KM001 & PC0KM002.
//      It holds information  that relates to a P.O. Item/sizes
//   and is used as working storage to load both maps.
//      It is also used as the source for data base updates
//   to the maintenanace item selected.
// 
// **                                                        **
// **                                                        **
// ********** PRODUCTION ORDER ITEM MAP RECORD ****************
// ***********************
Record PC0KW01 type basicRecord
  3 XGPCD XGPCD ; 
  3 PO-REG-CD PO-REG-CD ; 
  3 PC3PONBR PC3PONBR ; 
  3 PC3POIDT PC3POIDT ; 
  3 PCFSECD PCFSECD ; 
  3 PC3CRDT PC3CRDT ; 
  3 PC4CUSFL PC4CUSFL ; 
  3 PC6STAT PC6STAT ; 
  3 PC6PLAN PC6PLAN ; 
  3 PC6ITMNB PC6ITMNB ; 
  3 PC6XCTCD PC6XCTCD ; 
  3 FY1FCTYC FY1FCTYC ; 
  3 PC4ORTYP PC4ORTYP ; 
  3 PC3BLPO PC3BLPO ; 
  3 PCFSEYR PCFSEYR ; 
  3 * char(1) ; 
  3 SY1STNBR SY1STNBR ; 
  3 SY2CLRID SY2CLRID ; 
  3 PG1SC4CD PG1SC4CD ; 
  3 SY1STYNM SY1STYNM ; 
  3 SY2CLRDS SY2CLRDS ; 
  3 PC6CLVAR PC6CLVAR ; 
  3 PC0KWDSC PC0KWDSC ; 
  3 PC3CMPNT PC3CMPNT ; 
  3 PC6CXNBR PC6CXNBR ; 
  3 SY2RSTNB SY2RSTNB ; 
  3 SY1FNSHG SY1FNSHG ; 
  3 YPCCD YPCCD ; 
  3 * char(1) ; 
  3 XSECD XSECD ; 
  3 XQACD XQACD ; 
  3 PC2INSEG PC2INSEG ; 
  3 XUMCD XUMCD ; 
  3 XOWCD XOWCD ; 
  3 XPGCD XPGCD ; 
  3 * char(1) ; 
  3 XWHCD XWHCD ; 
  3 PC2CUXID PC2CUXID ; 
  3 YMTCD YMTCD ; 
  3 YOHCD YOHCD ; 
  3 YSMXDV YSMXDV ; 
  3 PC0KWDVD PC0KWDVD ; 
  3 XDMCD XDMCD ; 
  3 XDSCD XDSCD ; 
  3 XCTCD XCTCD ; 
  3 XCTABRV XCTABRV ; 
  3 YACCD YACCD ; 
  3 YACDESC YACDESC ; 
  3 * char(1) ; 
  3 PC6SZAVL PC6SZAVL ; 
  3 PC6AIRNB PC6AIRNB ; 
  3 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
  3 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
  3 PC6CONNO PC6CONNO ; 
  3 PC6NILRF PC6NILRF ; 
  3 PC6MICHG PC6MICHG ; 
  3 * char(1) ; 
  3 KUCCOID KUCCOID ; 
  3 KUMSTRID KUMSTRID ; 
  3 XNXCD XNXCD ; 
  3 KUMSTRNM KUMSTRNM ; 
  3 * char(1) ; 
  3 PC0KW-FRMT-CUST-ORD PC0KW-FRMT-CUST-ORD ; 
    4 * num(8) ; 
    4 PC0KW-FRMT-PART-NBR PC0KW-FRMT-PART-NBR ; 
  3 OP1CUPO OP1CUPO ; 
  3 OP1PARTN OP1PARTN ; 
  3 OP1CUOID OP1CUOID ; 
  3 OP1NORID OP1NORID ; 
  3 * char(1) ; 
  3 PC0KWAVL PC0KWAVL ; 
  3 PC0KWTVL PC0KWTVL ; 
  3 PC0KWADD PC0KWADD ; 
  3 PC6TORIG PC6TORIG ; 
  3 PC6TORDE PC6TORDE ; 
  3 PC6TADD PC6TADD ; 
  3 PC6TCNCL PC6TCNCL ; 
  3 * char(1) ; 
  3 SY4IDDSC SY4IDDSC [40] ; 
  3 PC7ORIGQ PC7ORIGQ [40] ; 
  3 PC7ORDEQ PC7ORDEQ [40] ; 
  3 PC0KWNQT PC0KWNQT [40] ; 
  3 PC7FOBFL PC7FOBFL [40] ; 
  3 FY4FOBPR FY4FOBPR [40] ; 
  3 PC0KWPRC PC0KWPRC [16] ; 
  3 PC0KMFOB PC0KMFOB [16] ; 
  3 * char(1) ; 
  3 PC0KWVRD PC0KWVRD [40] ; 
  3 PC0KWVRF PC0KWVRF [40] ; 
  3 PC0KWVRQ PC0KWVRQ [40] ; 
  3 * char(1) ; 
  3 PC6ETSDT PC6ETSDT ; 
  3 PC0KWDT1 PC0KWDT1 ; 
  3 * char(1) ; 
  3 PC0KWETA PC0KWETA ; 
  3 PC0KWDT7 PC0KWDT7 ; 
  3 * char(1) ; 
  3 PC0KWETL PC0KWETL ; 
  3 PC0KWDT6 PC0KWDT6 ; 
  3 * char(1) ; 
  3 PC6ETALF PC6ETALF ; 
  3 PC6OETAL PC6OETAL ; 
  3 PC0KWDT3 PC0KWDT3 ; 
  3 * char(1) ; 
  3 PC6OETS PC6OETS ; 
  3 PC0KWDT2 PC0KWDT2 ; 
  3 * char(1) ; 
  3 PC0KWRTS PC0KWRTS ; 
  3 PC0KWDT5 PC0KWDT5 ; 
  3 * char(1) ; 
  3 PC6RTADT PC6RTADT ; 
  3 PC0KWDT4 PC0KWDT4 ; 
  3 * char(1) ; 
  3 OP1CUNDT OP1CUNDT ; 
  3 PC0KWDT8 PC0KWDT8 ; 
  3 * char(1) ; 
  3 FB-LATE-BK-FL FB-LATE-BK-FL ; 
  3 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
  3 PC0KW-ITM-SEQ-NBR PC0KW-ITM-SEQ-NBR ; 
  3 ZFC-CRCY-CD ZFC-CRCY-CD ; 
end // end PC0KW01

//*** RECORD=PC0KW02 ****
// ***************** po common pass data *********************
//                        "COPY"
//   RECORD : PC0KW02
// 
//   This record contains commonly passed data for the
//   production order applications
// 
//   Note: this is a mirror copy of PCWREC and must be deleted
//         and copyed from PCWREC when PCWREC is modified in
//         cases where a structure change has occurred in
//         its format.
// 
// ***************** po common pass data *********************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/17/89   SFORD    New record.
// ***********************
Record PC0KW02 type basicRecord
  5 PC0KWUSR PC0KWUSR ; 
    10 PC0KWSWM PC0KWSWM ; 
    10 PC0KWIDX PC0KWIDX ; 
    10 PC0KWFNC PC0KWFNC ; 
    10 PCWITMKY PCWITMKY [20] ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PCWITKEY PCWITKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 PC6ETSDT PC6ETSDT ; 
      15 YMTCD YMTCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 XSECD XSECD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 CAFROMAP CAFROMAP [4] ; 
    10 XGPCD XGPCD ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC6STAT PC6STAT ; 
    10 * char(378) ; 
end // end PC0KW02

//*** RECORD=PC0KW03 ****
// ***************** po common pass data *********************
//                        "COPY"
//   This record contains commonly passed data for the
//   production order applications
// 
//   Note: this is a mirror copy of PCWREC and must be deleted
//         and copyed from PCWREC when PCWREC is modified.
// 
// ***************** po common pass data *********************
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 08/17/89   SFORD    New record.
// ***********************
Record PC0KW03 type basicRecord
  5 CAUSERA CAUSERA ; 
    10 PO-REG-CD PO-REG-CD ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PCFSECD PCFSECD ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PCWITKEY PCWITKEY ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 PC6ETSDT PC6ETSDT ; 
      15 YMTCD YMTCD ; 
      15 XWHCD XWHCD ; 
      15 PC2CUXID PC2CUXID ; 
      15 XSECD XSECD ; 
    10 YSMXDV YSMXDV ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PCWMAP PCWMAP ; 
    10 PCWFNC PCWFNC [4] ; 
    10 PCWSYIDX PCWSYIDX ; 
    10 PCWITMKY PCWITMKY [20] ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 PCWDEST PCWDEST [15] ; 
      15 PCWWHSE PCWWHSE ; 
      15 PCWCUST PCWCUST ; 
    10 YSICD YSICD ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 CAFROMAP CAFROMAP [4] ; 
    10 XGPCD XGPCD ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 PCWFRDT PCWFRDT ; 
    10 PCWTODT PCWTODT ; 
    10 YOACD YOACD ; 
    10 PCWUSER1 PCWUSER1 ; 
    10 PCWUSER2 PCWUSER2 ; 
    10 PCWUSER3 PCWUSER3 ; 
    10 PCWUSER4 PCWUSER4 ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PCWSIZE PCWSIZE ; 
    10 PCWDEVCD PCWDEVCD ; 
    10 PCWAUDFL PCWAUDFL ; 
    10 PC6STAT PC6STAT ; 
    10 PC6RTADT PC6RTADT ; 
    10 PC6OETS PC6OETS ; 
end // end PC0KW03

//*** RECORD=PC0KW04 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0KW04       (---> Mirrors VPOITM05 )
// 
//    This record is a mirror image to the item row selected
// from application PC0M/PC0J before any changes have been
// made.
//   It is used in the update and audit processes to maximize
// coding maintenance and D.B. resources.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PC0KW04 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0KW04

//*** RECORD=PC0KW05 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/05/88   MCHRIS   New record.
// 06/15/93   GAMEN    Add zfc-crcy-cd.
// ***********************
Record PC0KW05 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0KW05

//*** RECORD=PC0KW06 ****
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    Record Name:      PC0KW06   (----> Mirrors VPOITM05 )
// 
//    This record is a mirror image of the merge to item row
// when the selected item change has warrented a merge process.
//   It is used in the update and audit processes to maximize
// coding and D.B. resources.
// 
// ******* PRODUCTION ORDER DESTINATION ITEM PLAN TABLE *******
// ***********************
Record PC0KW06 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0KW06

//*** RECORD=PC0KW07 ****
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// 
// DB2 TABLE VIEW:      Dprodc.vposiz01
// 
// COPYLIB MEMBER:      DCL00592
// 
// I/O MODULE:          IO3640
// 
// KEY TO DB2 TABLE:    PC7CD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 02/05/88   MCHRIS   New record.
// 06/15/93   gamen    Add zfc-crcy-cd.
// --------   ------   ---------------------------------------
// 
//    This records is a copy of the size record associated with
// the merge to item row and is used in audit processing.
// 
// ******* PRODUCTION ORDER DESTINATION SIZE PLAN TABLE *******
// ***********************
Record PC0KW07 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0KW07

// JAPAN XREF SWITCH
DataItem PC0K-JAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xse-sesn-cd
DataItem PC0KMFBL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC
DataItem PC0KMFOB num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// diff QTYs   (temp accumulator)
DataItem PC0KW-AFRGT-CALC-AREA num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws for op1cuoid
DataItem PC0KW-FRMT-CUST-ORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws to get ord-part-char
DataItem PC0KW-FRMT-PART-NBR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric item sequence number
DataItem PC0KW-ITM-SEQ-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date day map display
DataItem PC0KW1DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wdate-greg-mmddccyy-num
DataItem PC0KW1DT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date month map display
DataItem PC0KW1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date year map display
DataItem PC0KW1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// -911 flag
DataItem PC0KW911 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-PO literal
DataItem PC0KWAC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-PO nbr changed
DataItem PC0KWAC2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AV2CMNT-Style literal
DataItem PC0KWAC3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-Finished Style chgd
DataItem PC0KWAC4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-Color literal
DataItem PC0KWAC5 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-Color changed
DataItem PC0KWAC6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AV2CMNT-CX if item cancelled
DataItem PC0KWAC7 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AVAIL audit comment,to AV2CMNT
DataItem PC0KWACM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// added  new QTYs (temp accum.)
DataItem PC0KWADD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Qty adjustment switch
DataItem PC0KWAIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit value (saved for audits)
DataItem PC0KWAVL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Size Qty adj to AVL inventory
DataItem PC0KWAVQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "Balance To Ship" (W.S.)
DataItem PC0KWBAL int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved break FOB price
DataItem PC0KWBPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// control break 1 (FY_FOB_PRC)
DataItem PC0KWCB1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// control break 2 (ovrd flag)
DataItem PC0KWCB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Compute B grade flag
DataItem PC0KWCBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETS date century
DataItem PC0KWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cascade FOB price flag
DataItem PC0KWCFL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// cancel confirm flag
DataItem PC0KWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancel new QTYs (temp accum.)
DataItem PC0KWCNL num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current Style index
DataItem PC0KWCSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date day map display
DataItem PC0KWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diff QTYs   (temp accumulator)
DataItem PC0KWDIF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PG_COLR_VAR_NBR W.S.
DataItem PC0KWDSC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHAR data form
DataItem PC0KWDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ets date display
DataItem PC0KWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_ORIG_EST_HDT map display
DataItem PC0KWDT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ETAL override date display
DataItem PC0KWDT3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTA date display
DataItem PC0KWDT4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated RTS date display
DataItem PC0KWDT5 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETAL date display
DataItem PC0KWDT6 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA date display
DataItem PC0KWDT7 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-need-dt map display
DataItem PC0KWDT8 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx_sum_cd_desc for division
DataItem PC0KWDVD char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETA Date
DataItem PC0KWETA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calculated ETAL date
DataItem PC0KWETL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first 16 sizes format switch
DataItem PC0KWF16 char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// FOB audit field (W.S.)
DataItem PC0KWFB0 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PC0KWFB1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for '-'
DataItem PC0KWFB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (whole number part)
DataItem PC0KWFB3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler for '.'
DataItem PC0KWFB4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (decimal part)
DataItem PC0KWFB5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (whole number part)
DataItem PC0KWFB6 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (decimal part)
DataItem PC0KWFB7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (character)
DataItem PC0KWFBA char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FY_FOB_PRC (numeric)
DataItem PC0KWFBN num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat year
DataItem PC0KWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat day
DataItem PC0KWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reformat date CCYYmmdd
DataItem PC0KWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag 1 (temp use)
DataItem PC0KWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag 2 (temp use)
DataItem PC0KWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat month
DataItem PC0KWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function Passed to Application
DataItem PC0KWFNC char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// FY_FOB_PRC (character)
DataItem PC0KWFOB char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reformat year
DataItem PC0KWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved style index
DataItem PC0KWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// item open flag
DataItem PC0KWIOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item update flag (D.B. CALL)
DataItem PC0KWIUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for audits (Finder idx)
DataItem PC0KWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map size fields
DataItem PC0KWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for size rec sort/match
DataItem PC0KWIXR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes
DataItem PC0KWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for temp index
DataItem PC0KWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for sizes (saved)
DataItem PC0KWIXZ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key char
DataItem PC0KWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of error key char
DataItem PC0KWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of error key char
DataItem PC0KWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of error key char
DataItem PC0KWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of error key num
DataItem PC0KWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of error key num
DataItem PC0KWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of error key num
DataItem PC0KWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of error key num
DataItem PC0KWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// middle 16 sizes format switch
DataItem PC0KWM16 char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// date month map display
DataItem PC0KWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified data flag
DataItem PC0KWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// net after  (price * qty)
DataItem PC0KWNA num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// net after change  (sum above)
DataItem PC0KWNAC num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// net before (price * qty)
DataItem PC0KWNB num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// net before change  (sum above)
DataItem PC0KWNBC num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved new FOB ovrd flag
DataItem PC0KWNFL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// saved new FOB price
DataItem PC0KWNPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new QTY map display
DataItem PC0KWNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved old FOB ovrd flag
DataItem PC0KWOFL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Valid owner group switch
DataItem PC0KWOGV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st part XOWTBL key-whse
DataItem PC0KWOK1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd part XOWTBL key-owner grp
DataItem PC0KWOK2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key to XOWTBL-owner grp tbl
DataItem PC0KWOKY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved old FOB price
DataItem PC0KWOPR decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// on order QTY (W.S.)
DataItem PC0KWOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// on order (size level accum)
DataItem PC0KWORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF2 switch (unprotect FOBs)
DataItem PC0KWP12 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. ID Production century
DataItem PC0KWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Price cursor flag
DataItem PC0KWPCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Delivery Month
DataItem PC0KWPDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PF2 switch (unprotect FOBs)
DataItem PC0KWPF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF9 switch (add new sizes)
DataItem PC0KWPF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Price found flag
DataItem PC0KWPFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Month
DataItem PC0KWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// FOB price simulate map/record
DataItem PC0KWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// P.O. Id Year
DataItem PC0KWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// total QTYs  (temp accumulator)
DataItem PC0KWQTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calculated RTS date
DataItem PC0KWRTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 2 switch
DataItem PC0KWS2F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MADD + ETT (temp accumulator)
DataItem PC0KWSUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size update flag (D.B. CALL)
DataItem PC0KWSUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0KWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem PC0KWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for map switch
DataItem PC0KWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format/protect map 1 switch
DataItem PC0KWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PC0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 sizes switch
DataItem PC0KWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file "temp use"
DataItem PC0KWSWT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size quantity
DataItem PC0KWSZQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Styles
DataItem PC0KWTSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total value (temp accum.)
DataItem PC0KWTVL num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update confirm flag
DataItem PC0KWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pass level user area
DataItem PC0KWUSR char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size level value (temp accum.)
DataItem PC0KWVAL num(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FOB Override templete (price)
DataItem PC0KWVRD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FOB Override templete (flag)
DataItem PC0KWVRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FOB Override templete (QTYs)
DataItem PC0KWVRQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold whse to set up pc0kowk1
DataItem PC0KWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size total work field
DataItem PC0KWWSZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// exit application switch
DataItem PC0KWXIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date year map display
DataItem PC0KWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WHSE CD
DataItem PC0KXWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end