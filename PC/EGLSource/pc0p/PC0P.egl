package pc0p;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PC0P ****
//   This screen is used to transfer PO products from one
// PO to another because a factory source has changed for
// some or all of the products of a production/delivery
// date has changed.
// 
// 
//   DATE      NAME          DESCRIPTION OF CHANGE
// --------   ------         --------------------------
//  4/18/90   JNEWMA         New application.
//  8/06/90   mchris         changed pc0p264 process to create
//                           a po audit for the newly added
//                           item after the item add instead of
//                           before.
//  8/13/90   mchris         changed pc0p264 process - deleted
//                           code that recalculated mode.
//  9/27/90   lsutto         allow gpc 07 access
// 11/06/90   kdenne         incorporated pc prebuild flag and
//                           user id in PC0P264,PC0PW03,PC0PW05
// 12/03/90   PPETER   A51 - added misc charges (PC6MICHG)
//                           processing.  In case of a merge,
//                           charges are summed.
// 12/26/90   lsutto         Add owner group to screens
// 01/04/90   mpisto   A87 - copy special intruction text.
// 01/21/91   CHAERT         changes for T-shirt owner group.
// 04/11/91   CHAERT         DB2 changes, add pc item # to s.i.
// 04/16/91   CHAERT         new select for special instruction
//                           pc0ps20, pc0ps21, pc0ps23
// 05/17/91   Gamen          Change code to use current
//                           inventory and not original
//                           inventory when adjusting
//                           availibilty inventory
// 06/11/91   CHAERT         DB2 changes, move so # from po itm
//                           to po audit itm, pc0ps10
// 07/18/91   CHAERT         FY60, default fob price from fcty
// 10/09/91   Gamen          Change pc0pw03 & pc0pw05 to match
//                           pc6rec for Oct 91 db2 changes.
// 03/10/92   Gamen          Add s.o. to poasz for db2 chgs.
// 02/04/92   Gamen          Add s.o. to map 3 and pc6rec.
// 04/13/92   Gamen          Insure that when p.o. id changes
//                           l/c's are printed.
// 04/23/92   CHAERT         a182-add division to PCPREC for
//                           ETAL calculation
// 06/30/92   Gamen          Format p.o. id for apparel with
//                           season code. pc0p152, pc0p154.
//                           Move userid to 'CX' items so they
//                           show up as user cancels for aprl.
//                           pc0p263.
//                           Print LC's if p.o. id changes.
//                           pc0ps10.
// 09/21/92   CHAERT         F173-ADD MODE TO BALANCE TO SHIP
//                           PC0PS05, ADD TS5REC.
// 11/19/92   Gamen          Allow p.o. ids to be the same for
//                           apparel.
// 12/11/92   Gamen          Do not allow xfer from or to
//                           p.o. types 'EM'.
// 02/22/93   Gamen          Move map nbr to caitem for pf1
// 05/07/93   dhales         added error if try to transfer a
//                           a blank style "to" po
// 06/11/93   ksanfo         Add po type = "AD".
// 06/18/93   ksanfo         DB2 Structure Change - VPOIAD01
//                           VPOSIZ01, VPOASZ01.
// 09/23/93   dhales         change to xspcs05 requires regen
// 10/11/93   GAMEN          Change to pc0ps10 to look in
//                           yoatbl prior to setting l/c ind.
// 02/04/94   dhales         invalid range if gpc = 03 and
//                           po number < 300000
// 03/07/94   chaert         database changes, pc0pw03/w05
//                           to match PC6REC.
// 06/06/94   dhuffm         Add P.O. order type 'PX'.
// 01/20/95   gamen          change etal calc (xspcs07) for.
// 02/28/96   jniese         added error if try to transfer a
//                           a interim or unfinished style
//                           po type 'to'.
// 12/06/96   jniese         recompile to get new xspcs05.
// 04/29/97   asunda         recompile to get new xspcs05.
// 06/03/97   PHARWO         PCA367 - PPR PROJECT, PO VIEWS
// 07/07/97   jniese         pca367 - ppr corrections
// 02/10/98   DRMASE         Changed to use VPRDCU03 instead of
//                           PC2REC. Changed to call VPRDCU03
//                           instead of IO3340.
//                           Changed: PC0P001,PC0P150,PC0P267
//                           PC0PS02,PC0PS41
// 02/13/98   DRAMSE         recompile to get new xspcs05
//                           and XSPCS07
// 06/10/98   drammo         PCF147 - Regen appln to get new
//                           XSPCS05 & XSPCS06 which are
//                           changed to include ST po type in
//                           ETAL Calculation.
// 08/03/98   WROBIN         remove temporary code for Overruns
// 10/20/98   MHUYNH         Generatd due to changes to XPPC030
// 12/14/98   DRAMMO         PCA458 - Modified to create an
//                           audit itms for PO Transfers.
// 04/23/99  KGRAHA     Regen to get new XSPCS05 which now does
//                      not include 'BA' in ETAL calculation.
// 04/30/99   VKUMAR         Generatd to move XSPCS31
// 05/14/99   DRAMSE         PC0PS10. Changed logic which sets
//                           LOCR amendment indicator flag
// 07/06/99   DRAMMO PCF198  Modified to prevent transfer of
//                           POs (FROM & TO) of type 'LP'.
// 09/24/99   vsanka         regenearated due to changes  to
//                           XSPCS05.
// 09/30/99   DRAMMO PCF205  Changed to use VPOITM04 & default
//                           the bnk-cd to spaces for inserts
// 01/19/2000 VMATT  PCF205  Cleaned up VPOITM03
// 02/07/00   SBUNGO PCA999  CHANGED TO USE VIEW VFCTY003
// 03/24/00   SBUNGO PCF210J CHANGED TO USE VIEW VPOITM05
// 05/16/00   SBUNGO PCF210  MODIFIED PROCESS PC0P150,CREEATED
//                           NEW STATEMENT GROUP PC0PS55 TO
//                           PREVENT TRANSFERS IF THERE ARE ANY
//                           SAP CREATED PO'S EITHER IN FROM
//                           OR TO PO NUMBERS
// 08/02/00   RSELVA         Modified XSPCS05 for zeroing
//                           out of MADD from 20001012 onwards
// 12/21/00   rmurth        compiled for change in SGRP XSPCS07
// *                   XSPCS07 modified to have hardcoded PADD
// *                   for WHSE '51' and Origin USA for GPC 03
// *********************
Program PC0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVJREC AVJREC; // record
  AVKREC AVKREC; // record
  AVLREC AVLREC; // record
  COMMAREA COMMAREA ; // record
  FY4REC FY4REC; // record
  FYCREC FYCREC; // record
  PC0PW00 PC0PW00; // record
  PC0PW01 PC0PW01; // record
  PC0PW02 PC0PW02; // record
  PC0PW03 PC0PW03; // record
  PC0PW04 PC0PW04; // record
  PC0PW05 PC0PW05; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PC8REC PC8REC; // record
  PC9REC PC9REC; // record
  PCBREC PCBREC; // record
  PCDREC PCDREC; // record
  PCGREC PCGREC; // record
  PCOREC PCOREC; // record
  PCPREC PCPREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS5REC TS5REC; // record
  TSEREC TSEREC; // record
  TSHREC TSHREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VFYPO002 VFYPO002; // record
  VPOAHD02 VPOAHD02; // record
  VPOAIT02 VPOAIT02; // record
  VPOASZ02 VPOASZ02; // record
  VPOHDR02 VPOHDR02; // record
  VPOITM05 VPOITM05; // record
  VPOSIZ02 VPOSIZ02; // record
  VPRDCU03 VPRDCU03; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOATBL {deleteAfterUse = yes}; // table
  use PC0PM.PC0PM001,  // forms
      PC0PM.PC0PM002, 
      PC0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPC001: XPPC001();
     /* ------------------------------------------------------------*/
     /* Flow to Special Initialization*/
     /* ------------------------------------------------------------*/


    goto PC0P001; /* Special Initialization*/

    PC0P001: PC0P001();
     /* ------------------------------------------------------------*/
     /* Converse main process*/
     /* ------------------------------------------------------------*/


    goto PC0P002; /* Converse main process*/
    PC0P002: PC0P002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Detail Schedule List.*/
     /* ------------------------------------------------------------*/

    goto PC0P002; /* Converse Detail Schedule List*/

  end // end main
end // end PC0P

// Special Initialization
Function PC0P001()
   /* ---------------------------------------------------------*/
   /* Check commarea security fields.*/
   /* ---------------------------------------------------------*/
  if (PCWREC.XGPCD == "02")
    if (COMMAREA.CACLVL[2] != "Y")
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138; /* User not authorized for this GPC*/
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      XSEXIT();
    end
  else
    if (PCWREC.XGPCD == "03")
      if (COMMAREA.CACLVL[3] != "Y")
        COMMAREA.CAITEM = " ";
        PCWREC.XXXMSGNO = 138; /* User not authorized for this GPC*/
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
        COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
        XSEXIT();
      end
    else /* If GPC not '02' or '03'*/
      COMMAREA.CAITEM = " ";
      PCWREC.XXXMSGNO = 138;
      COMMAREA.CAUSERA = PCWREC.CAUSERA;
      COMMAREA.CATOAP = "PC0A"; /* Return to menu*/
      XSEXIT();
    end
  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage and map output areas.*/
   /* Flow to converse the main process.*/
   /* ------------------------------------------------------------*/
  set VFCTY003 empty;
  set VPOAHD02 empty;
  set VPOAIT02 empty;
  set VPOASZ02 empty;
  set PCYREC empty;
  set PC0PW00 empty;
  set PC0PW01 empty;
  set PC0PM001 initial;
  set PC0PM002 initial;
  set VPRDCU03 empty;
  set VPOHDR02 empty;
  set VPOITM05 empty;
  set PG2REC empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA5REC empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set YSMREC empty;

  PC0PW01.XGPCD = PCWREC.XGPCD; /* GPC code*/
  PC0PW01.PO-REG-CD = "01"; /* po region*/
  PC0PW01.PC0PWALL = "Y"; /* Select all flag*/
  PC0PW00.XXXPRCNM = "PC0P"; /* Module identification*/
  PC0PW00.PC0PWSWR = "Y"; /* Request for data*/
  PC0PW00.PC0PWMAP = "1"; /* Request map 1*/
end // end PC0P001

// Main process to display a map
Function PC0P002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PC0PW00.PC0PWMAP == "1") /* Map 1 was requested*/

    PC0P100(); /* Display map 1*/

  else

    if (PC0PW00.PC0PWMAP == "2") /* Map 2 was requested*/

      PC0P200(); /* Display map 2*/

    end

  end

end // end PC0P002

// Audit inquiry selection
Function PC0P100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display appropriate map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0P120(); /* Format and display the map*/

  PC0P130(); /* Check attention identifier*/

  PC0P140(); /* Reset fields to normal intensity*/

  PC0P150(); /* Verify the entered data*/

  PC0P160(); /* Process valid input request*/


end // end PC0P100

// Converse selection map 001
Function PC0P120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the map data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   && converseVar.eventKey not pakey)   /* and not a PA key pressed*/
    PC0P121(); /* Format selection data*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0PM001.XXXPRCNM = PC0PW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0PM001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PC0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Display information message if no error message exists*/
   /* ------------------------------------------------------------*/

  PC0PM001.XXXPRCNM = PC0PW00.XXXPRCNM; /* Module identification*/
  if (PCWREC.XXXMSGNO != 0 /* Information message to display*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/
  end
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set PC0PM001 alarm; /* Indicate sound alarm*/
  end

  converse PC0PM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0PW00.XXXPRCNM = "PC0P"; /* Module identification*/
  COMMAREA.CATOAP = PC0PM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PC0PM001.CAITEM; /* Application data*/

  PC0P122(); /* Converse popup windows*/

end // end PC0P120

// Format selection data of 001
Function PC0P121()
  set PC0PM001 initial; /* Initialize map*/

   /* ------------------------------------------------------------*/
   /* Format the selection data for map 001 display.*/
   /* ------------------------------------------------------------*/
  if (PC0PW01.XGPCD == "03")
    set PC0PM001.PC0PMFPN cursor; /* Set cursor on PO #*/
    set PC0PM001.PC0PMFYR skip;
    set PC0PM001.PC0PMFM1 skip;
    set PC0PM001.PC0PMFM2 skip;
    set PC0PM001.PC0PMFFY skip;
    set PC0PM001.PC0PMTYR skip;
    set PC0PM001.PC0PMTM1 skip;
    set PC0PM001.PC0PMTM2 skip;
    set PC0PM001.PC0PMTFY skip;
  else
    set PC0PM001.PC0PMFYR cursor; /* Set cursor on PO ID*/
    PC0PM001.PC0PMFYR = PC0PW01.PC0PWFYR; /* PO ID year*/
    PC0PM001.PC0PMFM1 = PC0PW01.PC0PWFM1; /* PO ID buy month*/
    PC0PM001.PC0PMFM2 = PC0PW01.PC0PWFM2; /* PO ID dlv month*/
    PC0PM001.PC0PMFFY = PC0PW01.PC0PWFFY; /* Factory code*/
    PC0PM001.PC0PMTYR = PC0PW01.PC0PWTYR; /* PO ID year*/
    PC0PM001.PC0PMTM1 = PC0PW01.PC0PWTM1; /* PO ID buy month*/
    PC0PM001.PC0PMTM2 = PC0PW01.PC0PWTM2; /* PO ID dlv month*/
    PC0PM001.PC0PMTFY = PC0PW01.PC0PWTFY; /* Factory code*/
  end

  PC0PM001.PC0PMFPN = PC0PW01.PC0PWFPN; /* PO number*/
  PC0PM001.PC0PMALL = PC0PW01.PC0PWALL; /* Select all ? flag*/
  PC0PM001.PC4ORTYP = PC0PW01.PC4ORTYP; /* PO type*/
  PC0PM001.XGPCD = PC0PW01.XGPCD; /* GPC code*/
   /* MOVE PC0PW01.po-reg-cd TO PC0PM001.po-reg-cd;  /* po region*/
  PC0PM001.PC0PMSTY = PC0PW01.SY1STNBR; /* Style number*/
  PC0PM001.PC0PMCLR = PC0PW01.SY2CLRID; /* Color*/
  PC0PM001.PC0PMDIM = PC0PW01.XDMCD; /* Dimension code*/
  PC0PM001.PC0PMWHS = PC0PW01.XWHCD; /* Warehouse*/
  PC0PM001.PC0PMCST = PC0PW01.PC2CUXID; /* Cust xref*/
  PC0PM001.PC0PMDIV = PC0PW01.YSMXDV; /* Division*/
  PC0PM001.PC0PMTPN = PC0PW01.PC0PWTPN; /* PO number*/
  PC0PM001.FY1FCTSN = PC0PW01.FY1FCTSN; /* Factory description*/

end // end PC0P121

// Converse pop-up windows
Function PC0P122()
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMDIM == "?" /* IF dimension list requested*/
   || PC0PM001.PC0PMWHS == "?") /* or warehouse list requested*/
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PC0PW00.XXXPRCNM = "PC0P122"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimensions.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMDIM == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " DIMENSION"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0PM001.PC0PMDIM = PC0PW01.XDMCD; /* Restore prior code*/
    else
      PC0PM001.PC0PMDIM = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0PM001.PC0PMDIM cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouses.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMWHS == "?") /* List requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = " WAREHOUSE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PC0PM001.PC0PMWHS = PC0PW01.XWHCD; /* Restore prior code*/
    else
      PC0PM001.PC0PMWHS = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
    end

    set PC0PM001.PC0PMWHS cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PC0PW00.XXXPRCNM = "PC0P122"; /* Module identification*/
  converseLib.validationFailed(84); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/

end // end PC0P122

// Check attention identifiers
Function PC0P130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      XSPCS01(); /* transfer*/
      set PC0PM001.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0PW00.XXXPRCNM = "PC0P130"; /* Module identification*/
      set PC0PM001.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf3 /* If PF3 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5) /* If PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0PM001"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf3) /* If PF3 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* If invalid PF or PA key pressed*/
    PC0PW00.XXXPRCNM = "PC0P130"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

end // end PC0P130

// Reset highlighted fields
Function PC0P140()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  if (PC0PW01.XGPCD == "03")
    set PC0PM001.PC0PMFYR skip; /* From PO ID year*/
    set PC0PM001.PC0PMFM1 skip; /* From PO ID buy month*/
    set PC0PM001.PC0PMFM2 skip; /* From PO ID delivery month*/
    set PC0PM001.PC0PMFFY skip; /* Factory*/
    set PC0PM001.PC0PMTYR skip; /* To PO ID year*/
    set PC0PM001.PC0PMTM1 skip; /* To PO ID buy month*/
    set PC0PM001.PC0PMTM2 skip; /* To PO ID delivery month*/
    set PC0PM001.PC0PMTFY skip; /* Factory*/
  else
    set PC0PM001.PC0PMFYR initialAttributes; /* From PO ID year*/
    set PC0PM001.PC0PMFM1 initialAttributes; /* From PO ID buy month*/
    set PC0PM001.PC0PMFM2 initialAttributes; /* From PO ID delivery month*/
    set PC0PM001.PC0PMFFY initialAttributes; /* Factory*/
    set PC0PM001.PC0PMTYR initialAttributes; /* To PO ID year*/
    set PC0PM001.PC0PMTM1 initialAttributes; /* To PO ID buy month*/
    set PC0PM001.PC0PMTM2 initialAttributes; /* To PO ID delivery month*/
    set PC0PM001.PC0PMTFY initialAttributes; /* Factory*/
  end

  set PC0PM001.PC0PMFPN initialAttributes; /* From PO number*/
  set PC0PM001.PC0PMALL initialAttributes; /* Select all ? flag*/
  set PC0PM001.PC4ORTYP initialAttributes; /* PO type*/
  set PC0PM001.PC0PMSTY initialAttributes; /* Style*/
  set PC0PM001.PC0PMCLR initialAttributes; /* Color*/
  set PC0PM001.PC0PMDIM initialAttributes; /* Dimension*/
  set PC0PM001.PC0PMWHS initialAttributes; /* Warehouse*/
  set PC0PM001.PC0PMCST initialAttributes; /* Customer*/
  set PC0PM001.PC0PMDIV initialAttributes; /* Division*/
  set PC0PM001.PC0PMTPN initialAttributes; /* To PO number*/
  set PC0PM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0PM001.CAITEM initialAttributes; /* Commarea application data*/

end // end PC0P140

// Verify the entered data
Function PC0P150()
   /* ------------------------------------------------------------*/
   /* Validate To PO ID and factory for footwear.*/
   /* ------------------------------------------------------------*/

  PC0P151(); /* Validate To PO ID*/

   /* ------------------------------------------------------------*/
   /* Validate To PO number.*/
   /* ------------------------------------------------------------*/

  PC0P152(); /* Validate To PO number*/

   /* ------------------------------------------------------------*/
   /* Validate division.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMDIV != "  ") /* If entered*/
    TA1REC.TA1PGMNM = "PC0P150"; /* Module identification*/
    YSMREC.YSMSUMCD = PC0PM001.PC0PMDIV; /* Division*/
    XSPCS02(); /* Get division*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(50); /* Invalid division*/
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMDIV cursor, bold; /* Highlight division*/
    else
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate customer.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMCST != " ") /* Cust xref is entered*/
    VPRDCU03.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    VPRDCU03.PC2CUXID = PC0PM001.PC0PMCST; /* Customer*/
    PC0PS02(); /* Validate customer*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(123); /* Customer invalid*/
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMCST cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate warehouse.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMWHS != " ") /* If warehouse entered*/
    if (PC0PM001.PC0PMWHS in XWHTBL.XWHCD /* Warehouse in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    else
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMWHS cursor, bold; /* Highlight*/
      converseLib.validationFailed(59); /* Warehouse invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate dimension.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMDIM != " ") /* If dimension entered*/
    if (PC0PM001.PC0PMDIM in XDMTBL.XDMCD /* Dimension in table*/
     && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    else
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMDIM cursor, bold; /* Highlight*/
      converseLib.validationFailed(53); /* Dimension invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate color.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMCLR != " ") /* If color is entered*/
    if (PC0PM001.PC0PMSTY == " ") /* If style not entered*/
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMCLR cursor, bold; /* Highlight*/
      converseLib.validationFailed(148); /* Cannot enter without style*/
    else
      set PG2REC empty; /* Initialize record*/
      PG2REC.XGPCD = PC0PW01.XGPCD; /* GPC code*/
      PG2REC.SY1STNBR = PC0PM001.PC0PMSTY; /* Style*/
      PG2REC.SY2CLRID = PC0PM001.PC0PMCLR; /* Color*/
      if (PC0PM001.PC0PMDIM == " ") /* If dimension not entered*/
        PG2REC.XDMCD = "00"; /* Dimension*/
      else
        PG2REC.XDMCD = PC0PM001.PC0PMDIM; /* Dimension*/
      end
      XSPG202(); /* Validate style/color*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(315); /* Invalid color/dimension*/
        PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
        set PC0PM001.PC0PMCLR cursor, bold; /* Highlight color*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate style.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMSTY != " ") /* If style not entered*/
    PG2REC.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    PG2REC.SY1STNBR = PC0PM001.PC0PMSTY; /* Style*/
    XSPG201(); /* Validate style*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(52); /* Invalid style*/
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC0PMSTY cursor, bold; /* Highlight style*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate PO type*/
   /* ------------------------------------------------------------*/
  if (PC0PM001.PC4ORTYP == " ") /* If PO type not entered*/
    if (PC0PM001.PC0PMFYR != " " /* If From PO ID entered*/
     || PC0PM001.PC0PMTYR != " ") /* or To PO ID entered*/
      converseLib.validationFailed(274); /* Type required with PO ID*/
      PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
      set PC0PM001.PC4ORTYP cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate select all flag*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMALL != "Y" /* If not yes*/
   && PC0PM001.PC0PMALL != "N") /* and not no*/
    PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
    set PC0PM001.PC0PMALL cursor, bold; /* Highlight*/
    converseLib.validationFailed(42); /* Flag invalid*/
  end

   /* ------------------------------------------------------------*/
   /* Validate From PO ID and factory for footwear.*/
   /* ------------------------------------------------------------*/

  PC0P153(); /* Validate From PO ID*/

   /* ------------------------------------------------------------*/
   /* Validate From PO number.*/
   /* ------------------------------------------------------------*/

  PC0P154(); /* Validate From PO number*/

   /* ----------------------------------------------------------*/
   /* validate from po # to check whether it has any SAP po items.*/
   /* if it is, then transfer not possible*/
   /* -----------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0)
    set VPOITM05 empty;
    set PCYREC empty;
    VPOITM05.XGPCD = PC0PW01.XGPCD;
    VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD;
    VPOITM05.PC3PONBR = PC0PW01.PC0PWFPO;
    PCYREC.PCYFUNC = "T9";
    PCYREC.PCYCOUNT = 0;
    PC0PS55();
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -305)
      if (PCYREC.PCYCOUNT > 0)
        if (PC0PM001.PC0PMFPN > 0)
          PC0PW00.XXXPRCNM = "PC0P150"; /* mod identification*/
          set PC0PM001.PC0PMFPN cursor, bold; /* highlight*/
          converseLib.validationFailed(583); /* cannot maintain sap po's*/
        else
          PC0PW00.XXXPRCNM = "PC0P150"; /* mod identification*/
          set PC0PM001.PC0PMFYR cursor, bold; /* highlight*/
          set PC0PM001.PC0PMFM1 cursor, bold; /* highlight*/
          set PC0PM001.PC0PMFM2 cursor, bold; /* highlight*/
          set PC0PM001.PC0PMFFY cursor, bold; /* highlight*/
          converseLib.validationFailed(583); /* cannot maintain sap po's*/
        end
      end
    end
  end

   /* ----------------------------------------------------------*/
   /* validate TO   po # to check whether it has any SAP po items.*/
   /* if it is, then transfer not possible*/
   /* -----------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0)
    set VPOITM05 empty;
    set PCYREC empty;
    VPOITM05.XGPCD = PC0PW01.XGPCD;
    VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD;
    VPOITM05.PC3PONBR = PC0PW01.PC0PWTPO;
    PCYREC.PCYFUNC = "T9";
    PCYREC.PCYCOUNT = 0;
    PC0PS55();
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == -305)
      if (PCYREC.PCYCOUNT > 0)
        if (PC0PM001.PC0PMTPN > 0)
          PC0PW00.XXXPRCNM = "PC0P150"; /* mod identification*/
          set PC0PM001.PC0PMTPN cursor, bold; /* highlight*/
          converseLib.validationFailed(583); /* cannot maintain sap po's*/
        else
          PC0PW00.XXXPRCNM = "PC0P150"; /* mod identification*/
          set PC0PM001.PC0PMTYR cursor, bold; /* highlight*/
          set PC0PM001.PC0PMTM1 cursor, bold; /* highlight*/
          set PC0PM001.PC0PMTM2 cursor, bold; /* highlight*/
          set PC0PM001.PC0PMTFY cursor, bold; /* highlight*/
          converseLib.validationFailed(583); /* cannot maintain sap po's*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Compare From and To PO Numbers, IDs, Types, and Divisions*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PC0P155(); /* Compare From and To*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data entered*/
    PC0PW00.XXXPRCNM = "PC0P150"; /* Module identification*/
    set PC0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Save the map data*/
   /* ------------------------------------------------------------*/

  PC0P158(); /* Save map data*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PC0P150

// Validate the To PO ID
Function PC0P151()
   /* ------------------------------------------------------------*/
   /* Validate To Factory.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMTFY == " ") /* If factory is blank*/
    if (PC0PM001.PC0PMTM1 != " ") /* If PO ID entered*/
      PC0PW01.FY1FCTSN = " "; /* Factory description*/
      PC0PM001.FY1FCTSN = " "; /* Factory description*/
      PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
      set PC0PM001.PC0PMTFY cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Factory missing*/
    end
  else
    VFCTY003.XGPCD = PC0PW01.XGPCD;
    VFCTY003.FY1FCTYC = PC0PM001.PC0PMTFY;
    PC0PS50(); /* Validate factory*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If factory not found*/
      PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
      set PC0PM001.PC0PMTFY cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Factory invalid*/
      PC0PW01.FY1FCTSN = " "; /* Factory description*/
      PC0PM001.FY1FCTSN = " "; /* Factory description*/
    else
      PC0PW01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory description*/
      PC0PM001.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory description*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate To P.O. ID*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMTYR > " " /* If year > 0*/
   || PC0PM001.PC0PMTM1 > " " /* or buy month > 0*/
   || PC0PM001.PC0PMTM2 > " " /* or buy month > 0*/
   || PC0PM001.PC0PMTFY != " ") /* or factory entered*/
    if (PC0PM001.PC0PMTPN != 0) /* If PO number entered*/
      converseLib.validationFailed(158); /* Cannot enter both PO ID & #*/
      PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
      set PC0PM001.PC0PMTYR cursor, bold; /* Highlight*/
      set PC0PM001.PC0PMTM1 bold; /* Highlight*/
      set PC0PM001.PC0PMTM2 bold; /* Highlight*/
      set PC0PM001.PC0PMTFY bold; /* Highlight*/
      set PC0PM001.PC0PMTPN bold; /* Highlight*/
    else
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMTM2; /* Redefine month*/
      if (PC0PW00.PC0PWNM1 < "0" /* If month not numeric*/
       || PC0PW00.PC0PWNM1 > "1" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9" 
       || PC0PW00.PC0PWNUM < "01"
       || PC0PW00.PC0PWNUM > "12")
        PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0PM001.PC0PMTM2 cursor, bold; /* Highlight*/
      end
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMTM1; /* Redefine month*/
      if (PC0PW00.PC0PWNM1 < "0" /* If month not numeric*/
       || PC0PW00.PC0PWNM1 > "1" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9" 
       || PC0PW00.PC0PWNUM < "01"
       || PC0PW00.PC0PWNUM > "12")
        PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0PM001.PC0PMTM1 cursor, bold; /* Highlight*/
      end
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMTYR; /* Redefine year*/
      if (PC0PW00.PC0PWNM1 < "0" /* If year not numeric*/
       || PC0PW00.PC0PWNM1 > "9" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9")
        PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
        converseLib.validationFailed(80); /* Invalid year*/
        set PC0PM001.PC0PMTYR cursor, bold; /* Highlight*/
      end
      if (converseVar.validationMsgNum == 0) /* If no errors found*/
        PC0PW01.PC0PWTYR = PC0PM001.PC0PMTYR; /* From year*/
        PC0PW01.PC0PWTM1 = PC0PM001.PC0PMTM1; /* From buy date*/
        PC0PW01.PC0PWTM2 = PC0PM001.PC0PMTM2; /* From dlvry date*/
        if (PC0PW01.PC0PWTYR < "80") /* If year < 80*/
          PC0PW01.PC0PWTCC = "20"; /* 21st century*/
        else /* Else*/
          PC0PW01.PC0PWTCC = "19"; /* 20th century*/
        end
        VPOHDR02.PC3POIDT = PC0PW01.PC0PWTPD; /* PO ID*/
        VPOHDR02.FY1FCTYC = PC0PM001.PC0PMTFY; /* Factory*/
        PC0P157(); /* Validate the PO ID*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          if (VPOHDR02.XGPCD == "02"
           && VPOHDR02.PC4ORTYP == "LP") /* Local Product PO*/
            converseLib.validationFailed(567); /* Cannot transfer LP typ POs*/
            PC0PW00.XXXPRCNM = "PC0P151"; /* Module id*/
            set PC0PM001.PC0PMTYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMTM1 bold; /* highlight*/
            set PC0PM001.PC0PMTM2 bold; /* highlight*/
            set PC0PM001.PC0PMTFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          else
            PC0PW01.PC0PWTPO = VPOHDR02.PC3PONBR; /* Save To PO nbr*/
            PC0PW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* Save To PO type*/
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            converseLib.validationFailed(111); /* PO ID invalid*/
            PC0PW00.XXXPRCNM = "PC0P151"; /* Module id*/
            set PC0PM001.PC0PMTYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMTM1 bold; /* highlight*/
            set PC0PM001.PC0PMTM2 bold; /* highlight*/
            set PC0PM001.PC0PMTFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          end
          if (SQLCA.VAGen_SQLCODE == -811) /* Row not found*/
            converseLib.validationFailed(112); /* Multiple po's found*/
            PC0PW00.XXXPRCNM = "PC0P151"; /* Module id*/
            set PC0PM001.PC0PMTYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMTM1 bold; /* highlight*/
            set PC0PM001.PC0PMTM2 bold; /* highlight*/
            set PC0PM001.PC0PMTFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          end
        end
      end
    end
  else
    if (PC0PM001.PC0PMTPN == 0) /* If PO # not entered*/
      converseLib.validationFailed(110); /* PO ID or PO # required*/
      PC0PW00.XXXPRCNM = "PC0P151"; /* Module identification*/
      set PC0PM001.PC0PMTPN cursor, bold; /* Highlight*/
      set PC0PM001.PC0PMTYR bold; /* Highlight*/
      set PC0PM001.PC0PMTM1 bold; /* Highlight*/
      set PC0PM001.PC0PMTM2 bold; /* Highlight*/
    end
  end

end // end PC0P151

// Validate the To PO number
Function PC0P152()
   /* ------------------------------------------------------------*/
   /* Validate To PO number.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMTPN != 0) /* IF To PO number entered*/
    VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0PM001.PC0PMTPN; /* PO number*/
    PC0PS01(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      if (VPOHDR02.PC4ORTYP == "LP"
       && VPOHDR02.XGPCD == "02") /* Local Product PO*/
        converseLib.validationFailed(567); /* Cannot transfer 'LP' POs*/
        PC0PW00.XXXPRCNM = "PC0P152"; /* Module identification*/
        set PC0PM001.PC0PMTPN cursor, bold; /* Highlight*/
      else
        if (VPOHDR02.PC4ORTYP == "EM"
         && VPOHDR02.XGPCD == "03")
          converseLib.validationFailed(473); /* PO number invalid*/
          PC0PW00.XXXPRCNM = "PC0P152"; /* Module identification*/
          set PC0PM001.PC0PMTPN cursor, bold; /* Highlight*/
        else
          if (VPOHDR02.PO-REG-CD != "01" /* usa po's only*/
           && VPOHDR02.XGPCD == "03")    /**/
            converseLib.validationFailed(509); /**/
            PC0PW00.XXXPRCNM = "PC0P152"; /* Module ident*/
            set PC0PM001.PC0PMTPN cursor, bold; /* Highlight*/
          else
            PC0PW01.PC0PWTPO = VPOHDR02.PC3PONBR; /* Save To PO nbr*/
            PC0PW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* Save To PO type*/
            if (converseVar.validationMsgNum == 0)
              VFCTY003.XGPCD = PC0PW01.XGPCD;
              VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;
              PC0PS50(); /* Get factory description*/
              if (SQLCA.VAGen_SQLCODE == 100) /* If factory not found*/
                PC0PW01.FY1FCTSN = "UNKNOWN"; /* Factory descript*/
              else
                PC0PW01.FY1FCTSN = VFCTY003.FY1FCTSN; /* Factory des*/
                PC0PM001.FY1FCTSN = VFCTY003.FY1FCTSN;
                                   /* Factory description*/
              end
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        PC0PW01.FY1FCTSN = " "; /* Factory description*/
        PC0PM001.FY1FCTSN = " "; /* Factory description*/
        converseLib.validationFailed(69); /* PO number invalid*/
        PC0PW00.XXXPRCNM = "PC0P152"; /* Module identification*/
        set PC0PM001.PC0PMTPN cursor, bold; /* Highlight*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the To PO ID for display on detail screen (M002)*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PC0PW00.PC4ORTYP = VPOHDR02.PC4ORTYP; /* Save the To PO type*/
    PC0PW00.PC0PWPOD = VPOHDR02.PC3POIDT; /* Reformat To PO ID*/
    if (VPOHDR02.XGPCD == "03") /* If apparel*/
      PC0PW00.PC0PWMYR = VPOHDR02.PCFSECD;
    else
      PC0PW00.PC0PWMYR = PC0PW00.PC0PWYY;
    end
    PC0PW00.PC0PWMM1 = PC0PW00.PC0PWM1;
    PC0PW00.PC0PWMM2 = PC0PW00.PC0PWM2;
    PC0PW00.FY1FCTYC = VPOHDR02.FY1FCTYC;
    PC0PW01.PC0PWTPX = PC0PW00.PC0PWPID;
  end

end // end PC0P152

// Validate the From PO ID
Function PC0P153()
   /* ------------------------------------------------------------*/
   /* Validate From Factory.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMFFY == " ") /* If factory is blank*/
    if (PC0PM001.PC0PMFM1 != " ") /* If PO ID entered*/
      PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
      set PC0PM001.PC0PMFFY cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Factory missing*/
    end
  else
    VFCTY003.XGPCD = PC0PW01.XGPCD;
    VFCTY003.FY1FCTYC = PC0PM001.PC0PMFFY;
    PC0PS50(); /* Validate factory*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If factory not found*/
      PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
      set PC0PM001.PC0PMFFY cursor, bold; /* Highlight*/
      converseLib.validationFailed(32); /* Factory invalid*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate From P.O. ID*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMFYR > " " /* If year > 0*/
   || PC0PM001.PC0PMFM1 > " " /* or buy month > 0*/
   || PC0PM001.PC0PMFM2 > " " /* or buy month > 0*/
   || PC0PM001.PC0PMFFY != " ") /* or factory entered*/
    if (PC0PM001.PC0PMFPN != 0) /* If PO number entered*/
      converseLib.validationFailed(158); /* Cannot enter both PO ID & #*/
      PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
      set PC0PM001.PC0PMFYR cursor, bold; /* Highlight*/
      set PC0PM001.PC0PMFM1 bold; /* Highlight*/
      set PC0PM001.PC0PMFM2 bold; /* Highlight*/
      set PC0PM001.PC0PMFFY bold; /* Highlight*/
      set PC0PM001.PC0PMFPN bold; /* Highlight*/
    else
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMFM2; /* Redefine month*/
      if (PC0PW00.PC0PWNM1 < "0" /* If month not numeric*/
       || PC0PW00.PC0PWNM1 > "1" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9" 
       || PC0PW00.PC0PWNUM < "01"
       || PC0PW00.PC0PWNUM > "12")
        PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0PM001.PC0PMFM2 cursor, bold; /* Highlight*/
      end
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMFM1; /* Redefine month*/
      if (PC0PW00.PC0PWNM1 < "0" /* If month not numeric*/
       || PC0PW00.PC0PWNM1 > "1" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9" 
       || PC0PW00.PC0PWNUM < "01"
       || PC0PW00.PC0PWNUM > "12")
        PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
        converseLib.validationFailed(31); /* Invalid month*/
        set PC0PM001.PC0PMFM1 cursor, bold; /* Highlight*/
      end
      PC0PW00.PC0PWNUM = PC0PM001.PC0PMFYR; /* Redefine year*/
      if (PC0PW00.PC0PWNM1 < "0" /* If year not numeric*/
       || PC0PW00.PC0PWNM1 > "9" 
       || PC0PW00.PC0PWNM2 < "0" 
       || PC0PW00.PC0PWNM2 > "9")
        PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
        converseLib.validationFailed(80); /* Invalid year*/
        set PC0PM001.PC0PMFYR cursor, bold; /* Highlight*/
      end
      if (PC0PW00.XXXPRCNM != "PC0P153") /* If no errors for PO ID*/
        PC0PW01.PC0PWFYR = PC0PM001.PC0PMFYR; /* From year*/
        PC0PW01.PC0PWFM1 = PC0PM001.PC0PMFM1; /* From buy date*/
        PC0PW01.PC0PWFM2 = PC0PM001.PC0PMFM2; /* From dlvry date*/
        if (PC0PW01.PC0PWFYR < "80") /* If year < 80*/
          PC0PW01.PC0PWFCC = "20"; /* 21st century*/
        else /* Else*/
          PC0PW01.PC0PWFCC = "19"; /* 20th century*/
        end
        VPOHDR02.PC3POIDT = PC0PW01.PC0PWFPD; /* PO ID*/
        VPOHDR02.FY1FCTYC = PC0PM001.PC0PMFFY; /* Factory*/
        PC0P157(); /* Validate PO ID*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
          if (VPOHDR02.XGPCD == "02"
           && VPOHDR02.PC4ORTYP == "LP") /* Local Product PO*/
            converseLib.validationFailed(567); /* Cannot transfer 'LP' POs*/
            PC0PW00.XXXPRCNM = "PC0P153"; /* Module id*/
            set PC0PM001.PC0PMFYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMFM1 bold; /* highlight*/
            set PC0PM001.PC0PMFM2 bold; /* highlight*/
            set PC0PM001.PC0PMFFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          else
            PC0PW01.PC0PWFPO = VPOHDR02.PC3PONBR; /* Save From PO nbr*/
            PC0PW01.PC0PWTYP = VPOHDR02.PC4ORTYP; /* Save From PO type*/
            VPOHDR02.FY1FCTYC = PC0PW01.PC0PWFFY; /* Factory*/
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            converseLib.validationFailed(111); /* PO ID invalid*/
            PC0PW00.XXXPRCNM = "PC0P153"; /* Module id*/
            set PC0PM001.PC0PMFYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMFM1 bold; /* highlight*/
            set PC0PM001.PC0PMFM2 bold; /* highlight*/
            set PC0PM001.PC0PMFFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          end
          if (SQLCA.VAGen_SQLCODE == -811) /* Row not found*/
            converseLib.validationFailed(112); /* Multiple po's found*/
            PC0PW00.XXXPRCNM = "PC0P153"; /* Module id*/
            set PC0PM001.PC0PMFYR cursor, bold; /* highlight*/
            set PC0PM001.PC0PMFM1 bold; /* highlight*/
            set PC0PM001.PC0PMFM2 bold; /* highlight*/
            set PC0PM001.PC0PMFFY bold; /* highlight*/
            set PC0PM001.PC4ORTYP bold; /* highlight*/
          end
        end
      end
    end
  else
    if (PC0PM001.PC0PMFPN == 0) /* If PO # not entered*/
      converseLib.validationFailed(110); /* PO ID or PO # required*/
      PC0PW00.XXXPRCNM = "PC0P153"; /* Module identification*/
      set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
      set PC0PM001.PC0PMFYR bold; /* Highlight*/
      set PC0PM001.PC0PMFM1 bold; /* Highlight*/
      set PC0PM001.PC0PMFM2 bold; /* Highlight*/
    end
  end

end // end PC0P153

// Validate the From PO number
Function PC0P154()
   /* ------------------------------------------------------------*/
   /* Validate From PO number.*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMFPN != 0) /* IF To PO number entered*/
    VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
    VPOHDR02.PC3PONBR = PC0PM001.PC0PMFPN; /* PO number*/
    PC0PS01(); /* Validate the PO number*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row not found*/
      if (VPOHDR02.PC4ORTYP == "LP"
       && VPOHDR02.XGPCD == "02") /* Local Product PO*/
        converseLib.validationFailed(567); /* Cannot transfer 'LP' POs*/
        PC0PW00.XXXPRCNM = "PC0P154"; /* Module identification*/
        set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
      else
        if (VPOHDR02.PC4ORTYP == "EM" /* cannot xfer 'em' types*/
         && VPOHDR02.XGPCD == "03")   /* apparel*/
          converseLib.validationFailed(473); /* PO number invalid*/
          PC0PW00.XXXPRCNM = "PC0P154"; /* Module identification*/
          set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
        else
          if (VPOHDR02.PO-REG-CD != "01" /* us po's only*/
           && VPOHDR02.XGPCD == "03")    /**/
            converseLib.validationFailed(509); /* PO number out of range*/
            PC0PW00.XXXPRCNM = "PC0P154"; /* Module identification*/
            set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
          else
            PC0PW01.PC0PWFPO = VPOHDR02.PC3PONBR;
                                   /* Save From PO number*/
            PC0PW01.PC0PWTYP = VPOHDR02.PC4ORTYP; /* Save From PO type*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        converseLib.validationFailed(69); /* PO number invalid*/
        PC0PW00.XXXPRCNM = "PC0P154"; /* Module identification*/
        set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the PO ID for display on detail screen (M002)*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PC0PW01.PC0PWTYP = VPOHDR02.PC4ORTYP;
    PC0PW00.PC0PWPOD = VPOHDR02.PC3POIDT;
    if (VPOHDR02.XGPCD == "03") /* If apparel*/
      PC0PW00.PC0PWMYR = VPOHDR02.PCFSECD;
    else
      PC0PW00.PC0PWMYR = PC0PW00.PC0PWYY;
    end
    PC0PW00.PC0PWMM1 = PC0PW00.PC0PWM1;
    PC0PW00.PC0PWMM2 = PC0PW00.PC0PWM2;
    if (PC0PM001.PC0PMFPN != 0)
      PC0PW00.FY1FCTYC = VPOHDR02.FY1FCTYC;
    else
      PC0PW00.FY1FCTYC = PC0PM001.PC0PMFFY;
    end
    PC0PW01.PC0PWFPX = PC0PW00.PC0PWPID;
  end

end // end PC0P154

// Compare To & From POs
Function PC0P155()
   /* ------------------------------------------------------------*/
   /* From PO number cannot be the same as To PO number*/
   /* ------------------------------------------------------------*/

  if (PC0PM001.PC0PMTPN == PC0PM001.PC0PMFPN /* If same PO #s*/
   && PC0PM001.PC0PMFPN != 0)                /* and PO# entered*/
    converseLib.validationFailed(369); /* PO numbers cannot be the same*/
  end

   /* ------------------------------------------------------------*/
   /* From PO ID cannot be the same as To PO ID*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0    /* If no errors*/
   && PC0PW01.PC0PWFPX == PC0PW01.PC0PWTPX /* and same PO IDs*/
   && PC0PW01.XGPCD == "02")               /* and footwear*/
    converseLib.validationFailed(371); /* PO IDs cannot be the same*/
  end

   /* ------------------------------------------------------------*/
   /* Compare To and From PO types*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* If no errors*/
   && PC0PW00.PC4ORTYP != PC0PW01.PC0PWTYP) /* If PO types different*/
    if (PC0PW01.XGPCD == "02") /* If footwear*/
      converseLib.validationFailed(372); /* PO types cannot be different*/
    else
      if (PC0PW00.PC4ORTYP == "CD" /* If PO types different*/
       && PC0PW01.PC0PWTYP != "TS") /* If PO types different*/
        converseLib.validationFailed(474); /* Can only xfer between these types*/

      else
        if (PC0PW00.PC4ORTYP == "TS" /* If PO types different*/
         && PC0PW01.PC0PWTYP != "CD") /* If PO types different*/
          converseLib.validationFailed(474); /* Can only xfer between these types*/

        else
          if (PC0PW01.PC0PWTYP == "CD" /* If PO types different*/
           && PC0PW00.PC4ORTYP != "TS") /* If PO types different*/
            converseLib.validationFailed(474); /* Can only xfer between these types*/

          else
            if (PC0PW01.PC0PWTYP == "TS" /* If PO types different*/
             && PC0PW00.PC4ORTYP != "CD") /* If PO types different*/
              converseLib.validationFailed(474); /* Can only xfer between these types*/

            else
              if (PC0PW00.PC4ORTYP == "PX" /* If PO types different*/
               && PC0PW01.PC0PWTYP != "PS" /* If PO types different*/
               && PC0PW01.PC0PWTYP != "IL") /* If PO types different*/
                converseLib.validationFailed(512); /* Can only xfer between these types*/

              else
                if (PC0PW01.PC0PWTYP == "PX" /* If FROM po type = 'PX'*/
                 && PC0PW00.PC4ORTYP != "PS" /* and TO po type not = 'PS'*/
                 && PC0PW00.PC4ORTYP != "IL") /* and TO po type not = 'IL'*/
                  converseLib.validationFailed(511); /* Can only xfer between these types*/

                else
                  PC4REC.XGPCD = "03"; /* Apparel GPC*/
                  PC4REC.PC4ORTYP = PC0PW00.PC4ORTYP; /* To PO type*/
                  PC0P159(); /* Select unique PO type*/
                  PC0PW00.XQACD = PC4REC.XQACD; /* Quality code*/
                  PC0PW00.PC4LCSFL = PC4REC.PC4LCSFL;
                                   /* LC ammend flag*/
                  PC4REC.PC4ORTYP = PC0PW01.PC0PWTYP; /* From PO type*/
                  PC0P159(); /* Select unique PO type*/
                  if (PC4REC.PC4LCSFL == "N" /* LC ammend flag*/
                   && PC0PW00.PC4LCSFL == "N") /* LC ammend flag*/
                    if (PC4REC.XQACD != PC0PW00.XQACD) /* Quality code*/
                      converseLib.validationFailed(131); /* Quality code cant be different*/
                    end
                  else
                    converseLib.validationFailed(130); /* PO types cannot be different*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* From PO item division must be same as To PO item divisison*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    VPOITM05.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* To PO region*/
    VPOITM05.PC3PONBR = PC0PW01.PC0PWTPO; /* To PO number*/
    VPOITM05.PC6ITMNB = 1; /* Item seq # of 1*/
    PCYREC.PCYFUNC = "SA"; /* Select unique*/
    PC0PS03(); /* Select item*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If item found*/
      PC0PW00.YSMXDV = VPOITM05.YSMXDV; /* Save To division*/
      PC0PW00.OP1PARTN = VPOITM05.OP1PARTN; /* Save sales order*/
      PC0PW00.OP1CUOID = VPOITM05.OP1CUOID;
      PC0PW00.OP1NORID = VPOITM05.OP1NORID;
      PC0PW00.PC0PW-TO-PO-TYP = VPOITM05.PC4ORTYP; /* "TO" p.o. type*/
      VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* From PO region*/
      VPOITM05.PC3PONBR = PC0PW01.PC0PWFPO; /* From PO number*/
      PC0PS03(); /* Select item*/
      if (SQLCA.VAGen_SQLCODE == 0 /* If item found*/
       && VPOITM05.XGPCD == "03"   
       && VPOITM05.YSMXDV != PC0PW00.YSMXDV) /* If divisions different*/
        converseLib.validationFailed(361); /* PO divisions must be the same*/
      else
        if (VPOITM05.XGPCD == "03") /* p.o. for apparel*/
          if (PC0PW00.YSMXDV == "20") /* NIL p.o.*/
            if (PC0PW00.PC4ORTYP == "XD" /* NIL p.o. Type*/
             || PC0PW00.PC4ORTYP == "AD" /* asia pacific direct ship*/
             || PC0PW00.PC4ORTYP == "XI" 
             || PC0PW00.PC4ORTYP == "SD") /* Dummy p.o. Type*/
              if (VPOITM05.OP1PARTN != PC0PW00.OP1PARTN /* If s.o. differs*/
               || VPOITM05.OP1CUOID != PC0PW00.OP1CUOID 
               || VPOITM05.OP1NORID != PC0PW00.OP1NORID)
                converseLib.validationFailed(452); /* S.O.'s must be the same*/
              end
            end
          else
            if (PC0PW00.PC4ORTYP == "TS" /* NIL p.o. Type*/
             || PC0PW00.PC4ORTYP == "CD")
              if (VPOITM05.OP1PARTN != PC0PW00.OP1PARTN /* If s.o. differs*/
               || VPOITM05.OP1CUOID != PC0PW00.OP1CUOID 
               || VPOITM05.OP1NORID != PC0PW00.OP1NORID)
                converseLib.validationFailed(452); /* S.O.'s must be the same*/
              end
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Highlight appropriate selection fields for relational error*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* If no errors*/
    PC0PW00.XXXPRCNM = "PC0P155"; /* Module identification*/
    if (PC0PM001.PC0PMFPN != 0) /* IF From PO# entered*/
      set PC0PM001.PC0PMFPN cursor, bold; /* Highlight*/
    else
      set PC0PM001.PC0PMFYR cursor, bold; /* Highlight*/
      set PC0PM001.PC0PMFM1 bold; /* Highlight*/
      set PC0PM001.PC0PMFM2 bold; /* Highlight*/
      set PC0PM001.PC0PMFFY bold; /* Highlight*/
      set PC0PM001.PC4ORTYP bold; /* Highlight*/
    end
    if (PC0PM001.PC0PMTPN != 0) /* If To PO# entered*/
      set PC0PM001.PC0PMTPN bold; /* Highlight*/
    else
      set PC0PM001.PC0PMTYR bold; /* Highlight*/
      set PC0PM001.PC0PMTM1 bold; /* Highlight*/
      set PC0PM001.PC0PMTM2 bold; /* Highlight*/
      set PC0PM001.PC0PMTFY bold; /* Highlight*/
      set PC0PM001.PC4ORTYP bold; /* Highlight*/
    end
  end

end // end PC0P155

// Validate PO ID      - VPOHDR01
Function PC0P157()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table access.*/
   /* ------------------------------------------------------------*/

  VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* P.O. REGION CODE*/
  VPOHDR02.PC4ORTYP = PC0PM001.PC4ORTYP; /* PO type*/

   /* ------------------------------------------------------------*/
   /* Select unique PO ID row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("SA", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* or row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* or row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P157"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO ID DATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOHDR02.PC3POIDT; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOHDR02.FY1FCTYC; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOHDR02.PC4ORTYP; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P157

// Save map data before converse
Function PC0P158()
   /* ------------------------------------------------------------*/
   /* Save the selection map data*/
   /* ------------------------------------------------------------*/

  PC0PW01.PC0PWFPN = PC0PM001.PC0PMFPN; /* PO number*/
  PC0PW01.PC0PWFYR = PC0PM001.PC0PMFYR; /* PO ID year*/
  PC0PW01.PC0PWFM1 = PC0PM001.PC0PMFM1; /* PO ID buy month*/
  PC0PW01.PC0PWFM2 = PC0PM001.PC0PMFM2; /* PO ID dlv month*/
  PC0PW01.PC0PWFFY = PC0PM001.PC0PMFFY; /* Factory code*/
  PC0PW01.PC0PWALL = PC0PM001.PC0PMALL; /* Select all ? flag*/
  PC0PW01.PC4ORTYP = PC0PM001.PC4ORTYP; /* PO type*/
  PC0PW01.SY1STNBR = PC0PM001.PC0PMSTY; /* Style number*/
  PC0PW01.SY2CLRID = PC0PM001.PC0PMCLR; /* Color*/
  PC0PW01.XDMCD = PC0PM001.PC0PMDIM; /* Dimension code*/
  PC0PW01.XWHCD = PC0PM001.PC0PMWHS; /* Warehouse*/
  PC0PW01.PC2CUXID = PC0PM001.PC0PMCST; /* Cust xref*/
  PC0PW01.YSMXDV = PC0PM001.PC0PMDIV; /* Division*/
  PC0PW01.PC0PWTPN = PC0PM001.PC0PMTPN; /* PO number*/
  PC0PW01.PC0PWTYR = PC0PM001.PC0PMTYR; /* PO ID year*/
  PC0PW01.PC0PWTM1 = PC0PM001.PC0PMTM1; /* PO ID buy month*/
  PC0PW01.PC0PWTM2 = PC0PM001.PC0PMTM2; /* PO ID dlv month*/
  PC0PW01.PC0PWTFY = PC0PM001.PC0PMTFY; /* Factory code*/

end // end PC0P158

// Validate PO type    - VPOTYP01
Function PC0P159()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P159"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = PC4REC.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKA2 = PC4REC.PC4ORTYP; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P159

// -->Process valid input request
Function PC0P160()
  if (converseVar.eventKey is enter
   && converseVar.validationMsgNum == 0)

    PC0PW00.PC0PWMAP = "2"; /* Map requested is 2*/
    PC0PW00.PC0PWSWR = "Y"; /* Request for data is yes*/
    PC0PW00.PC0PWSWF = "Y"; /* Request map format is yes*/
    PC0PW00.PC0PWSWU = "N"; /* Storage update is no*/
    PC0PW00.PC0PWCFG = "N"; /* Confirm flag is no*/

  end
end // end PC0P160

// Audit inquiry selection
Function PC0P200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain data to display.*/
   /* 2) Display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PC0P210(); /* Obtain data to display*/

  PC0P220(); /* Format and display the map*/

  PC0P230(); /* Check attention identifier*/

  PC0P240(); /* Reset fields to normal intensity*/

  PC0P250(); /* Verify the entered data*/

  PC0P260(); /* Process valid input request*/

end // end PC0P200

// -->Obtain the data to display
Function PC0P210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (PC0PW00.PC0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  PC0PW00.XXXTSLEN = 840; /* Temporary storage page length*/
   /* ==> (14 display lines) * (60 length of display line) = 840*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  PC0P211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PC0PW00.PC0PWIXM = 1; /* init row-index*/

  PC0P212(); /* Select Set items*/

  PC0P213(); /* Fetch next item*/
  while (VPOITM05.PC6STAT != "OP" /* Select only open items*/
   && PC0PW00.PC0PWDC2 == "N")
    PC0P213(); /* Fetch next item*/
  end

  while (PC0PW00.PC0PWDC2 == "N") /* Until end of cursor for items*/

    PC0P214(); /* Load item to detail line*/

    PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM + 1; /* Increment line count*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (PC0PW00.PC0PWIXM > 14)
      PC0P215(); /* Add page to temporary storage*/
    end

    PC0P213(); /* Fetch next item*/
    while (VPOITM05.PC6STAT != "OP" /* Select only open items*/
     && PC0PW00.PC0PWDC2 == "N")
      PC0P213(); /* Fetch next item*/
    end

  end

  PC0P216(); /* Close cursor item*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PC0PW00.PC0PWIXM > 1) /* Page was formatted*/
    PC0P215(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, or too many pages formatted*/
   /* indicate error and redisplay Map 1*/
   /* ------------------------------------------------------------*/
  if (PC0PW00.TA5TSQIX == 0) /* No pages formatted*/

    PC0PW00.PC0PWMAP = "1"; /* Set map switch*/
    PC0PW00.PC0PWSWF = "N"; /* Request for data switch*/
    PC0PW00.XXXPRCNM = "PC0P210"; /* Module identification*/
    converseLib.validationFailed(18); /* Indicate no data to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* set to display page 1.*/
   /* ------------------------------------------------------------*/
  PC0PW00.XXXTSPAG = 1; /* Desired page number*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  PC0PW00.PC0PWSWR = "N"; /* Request for data switch*/

end // end PC0P210

// purge any temporary storage
Function PC0P211()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PC0PW02 empty; /* Map 2 display storage record*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PC0PW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PC0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0PW00.PC0PWMAP = "1"; /* ===> request for map 1*/
  PC0PW00.XXXPRCNM = "PC0P211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0P211 ***********************/
end // end PC0P211

// Select Set Item - VPOITM05
Function PC0P212()
  PC0PW00.PC0PWDC2 = "N"; /* End of VPOITM05 flag*/

  VPOITM05.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0PW01.PC0PWFPO; /* PO number*/

  if (PC0PW01.SY1STNBR == " ")
    VPOITM05.SY1STNBR = "*"; /* Wildcard style*/
  else
    VPOITM05.SY1STNBR = PC0PW01.SY1STNBR; /* Style number*/
  end

  if (PC0PW01.SY2CLRID == " ")
    VPOITM05.SY2CLRID = "*"; /* Wildcard color*/
  else
    VPOITM05.SY2CLRID = PC0PW01.SY2CLRID; /* Color*/
  end

  if (PC0PW01.XDMCD == " ")
    VPOITM05.XDMCD = "*"; /* Wildcard dimension*/
  else
    VPOITM05.XDMCD = PC0PW01.XDMCD; /* Dimension*/
  end

  if (PC0PW01.YSMXDV == " ")
    VPOITM05.YSMXDV = "*"; /* Wildcard division*/
  else
    VPOITM05.YSMXDV = PC0PW01.YSMXDV; /* Division code*/
  end

  if (PC0PW01.XWHCD == " " /* If warehouse and*/
   && PC0PW01.PC2CUXID == " ") /* customer not entered*/
    VPOITM05.PC2CUXID = "*"; /* wildacard both*/
    VPOITM05.XWHCD = "*";
  else
    VPOITM05.PC2CUXID = PC0PW01.PC2CUXID; /* Customer xref ID*/
    VPOITM05.XWHCD = PC0PW01.XWHCD; /* Warehouse code*/
  end

  VPOITM05.XQACD = "*"; /* Quality code*/
  VPOITM05.XOWCD = "*"; /* Owner group code*/
  VPOITM05.PC2INSEG = "*"; /* Inventory segment code*/
  VPOITM05.XPGCD = "*"; /* Package code*/
  VPOITM05.XUMCD = "*"; /* Unit of measure code*/
  VPOITM05.PC6ETSDT = -1; /* ETS date*/
  VPOITM05.YMTCD = "*"; /* Mode of transportation*/
  VPOITM05.PC6PLAN = -1; /* Plan number*/
  VPOITM05.XDSCD = "*"; /* Direct ship code*/
  VPOITM05.PC6RTADT = -1; /* RTA date*/
  VPOITM05.PC6OETS = -1; /* OETS date*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "S7"; /* Function select set 1*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0P212"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P212

// Fetch next item - VPOITM05
Function PC0P213()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "N7"; /* Fetch function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0PW00.PC0PWDC2 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0P213"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P213

// Load item to page storage rec
Function PC0P214()
   /* ------------------------------------------------------------*/
   /* Load/save the row in Temp. Storage. ---> (PC0PW02)*/
   /* ------------------------------------------------------------*/

  if (PC0PW01.PC0PWALL == "Y") /* If autoselect is yes*/
    PC0PW02.PC0PWSEL[PC0PWIXM] = "S"; /* Preselect line*/
  end

  PC0PW02.PC6ITMNB[PC0PWIXM] = VPOITM05.PC6ITMNB;
  PC0PW02.SY1STNBR[PC0PWIXM] = VPOITM05.SY1STNBR;
  PC0PW02.SY2CLRID[PC0PWIXM] = VPOITM05.SY2CLRID;
  PC0PW02.XDMCD[PC0PWIXM] = VPOITM05.XDMCD;
  PC0PW02.XOWCD[PC0PWIXM] = VPOITM05.XOWCD;
  PC0PW02.XWHCD[PC0PWIXM] = VPOITM05.XWHCD;
  PC0PW02.YMTCD[PC0PWIXM] = VPOITM05.YMTCD;
  PC0PW02.XDSCD[PC0PWIXM] = VPOITM05.XDSCD;
  PC0PW02.PC2CUXID[PC0PWIXM] = VPOITM05.PC2CUXID;
  PC0PW02.PC6PLAN[PC0PWIXM] = VPOITM05.PC6PLAN;
  PC0PW02.PC6TORDE[PC0PWIXM] = VPOITM05.PC6TORDE;
  if (VPOITM05.OP1CUOID > 0) /* Sales order number exits*/
    PC0PW00.PC0PWSNB = VPOITM05.OP1CUOID; /* Sales order number*/
    PC0PW00.PC0PWDOT = "."; /* Period*/
    PC0PW00.PC0PWNNB = VPOITM05.OP1NORID; /* Nike order number*/
  else
    PC0PW00.PC0PWSNB = 0; /* Sales order number*/
    PC0PW00.PC0PWDOT = " "; /* Period*/
    PC0PW00.PC0PWNNB = 0; /* Nike order number*/
  end
  PC0PW02.PC0PMSON[PC0PWIXM] = PC0PW00.PC0PWSGP;

  if (VPOITM05.PC6ETSDT != 0) /* If ETS date*/
    set TA2REC empty; /* Init date record*/
    TA2REC.TA2GRGGN = VPOITM05.PC6ETSDT; /* Set up date*/
    TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
    PC0PS04(); /* Convert date*/
    PC0PW02.PC0PWEST[PC0PWIXM] = TA2REC.TA2GRGA; /* MMDDYY*/
  end

  if (VPOITM05.PC6OETAL != 0) /* If ETAL Override date*/

    set TA2REC empty; /* Init date record*/
    TA2REC.TA2GRGGN = VPOITM05.PC6OETAL; /* Set up date*/
    TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
    PC0PS04(); /* Convert date*/
    PC0PW02.PC0PWETL[PC0PWIXM] = TA2REC.TA2GRGA; /* MMDDYY*/
    PC0PW02.PC0PWETF[PC0PWIXM] = "Y"; /* ETALO flag*/

  else

    set PCPREC empty;

    PCPREC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
    PCPREC.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory code*/
    PCPREC.XWHCD = VPOITM05.XWHCD;
    PCPREC.PC2CUXID = VPOITM05.PC2CUXID;
    PCPREC.YMTCD = VPOITM05.YMTCD;
    PCPREC.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
    PCPREC.PC6ETSDT = VPOITM05.PC6ETSDT; /* Ets date*/
    PCPREC.PC4ORTYP = VPOITM05.PC4ORTYP; /* Order type*/
    PCPREC.PCPPOIDT = VPOITM05.PC3POIDT; /* P.O. ID Date*/
    PCPREC.PC6ETALF = VPOITM05.PC6ETALF; /* ETAL Default flag*/
    PCPREC.YSMXDV = VPOITM05.YSMXDV; /* division*/

    XSPCS05(); /* Calculate dates*/

    if (PCPREC.PCPETALD != 0)
      set TA2REC empty; /* Init date record*/
      TA2REC.TA2GRGGN = PCPREC.PCPETALD; /* Set up date*/
      TA2REC.TA2GRTYP = "G"; /* Type is ccyymmdd*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* Validate all greg formats*/
      PC0PS04(); /* Convert date*/
      PC0PW02.PC0PWETL[PC0PWIXM] = TA2REC.TA2GRGA; /* MMDDYY*/
    end

  end

  PC0PW02.YSMXDV[PC0PWIXM] = VPOITM05.YSMXDV;
  PC0PW02.PC6STAT[PC0PWIXM] = VPOITM05.PC6STAT;
end // end PC0P214

// Add page to temporary storage
Function PC0P215()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PC0PW02.XXXTSLEN = PC0PW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (PC0PW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (PC0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PC0PW02 empty; /* M002 display storage*/

    PC0PW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    PC0PW00.PC0PWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0PW00.PC0PWMAP = "1"; /* request for map switch*/
  PC0PW00.XXXPRCNM = "PC0P215"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of PC0P215 ***********************/
end // end PC0P215

// Close cursor item - VPOITM05
Function PC0P216()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "C7"; /* Close function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Close table*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P216"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0P216"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P216

// -->Format and converse map 2
Function PC0P220()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (PC0PW00.PC0PWSWF == "Y") /* Map must be formatted*/

      /* ------------------------------------------------------------*/
       /* Clear the fields in the map storage area to be formatted.*/
      /* ------------------------------------------------------------*/

      set PC0PM002 initial;

      PC0PW00.PC0PWSWF = "N"; /* Format the map switch*/

      PC0P221(); /* ===> Format the data from T.S.*/

    end

  else

    PCWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PC0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PC0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PC0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO != 0) /* Message to display*/

    PC0PM002.XXXPRCNM = PC0PW00.XXXPRCNM; /* Module identification*/
    if (PCWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PCWREC.XXXMSGNO);
    end /* Message number*/

    set PC0PM002 alarm; /* Indicate sound alarm*/

  end

  converse PC0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PCWREC.XXXMSGNO = 0; /* Message number*/
  PC0PW00.XXXPRCNM = " "; /* Module identification*/

  COMMAREA.CATOAP = PC0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PC0PM002.CAITEM; /* Application data*/

end // end PC0P220

// Format the display data
Function PC0P221()
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PC0PW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PC0PW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PC0PW00.PC0PWSWU == "Y") /* Current page was changed*/
        PC0P225(); /* Update the current page*/
        PC0PW00.PC0PWSWU = "N"; /* Storage update switch*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PC0PW00.XXXTSPAG > PC0PW00.TA5TSQIX) /* Desired > highest*/
        PC0PW00.XXXTSPAG = PC0PW00.TA5TSQIX; /* Default to highest*/
      end

      PC0P222(); /* Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (PCWREC.XXXMSGNO == 0) /* no previous messages*/
    if (PC0PW01.PC0PWALL == "N") /* If autoselect is no*/
      PCWREC.XXXMSGNO = 25; /* please select a line message*/
      PC0PW00.XXXPRCNM = "PC0P221"; /* Module identification*/
    else
      PCWREC.XXXMSGNO = 375; /* press enter to validate*/
      PC0PW00.XXXPRCNM = "PC0P221"; /* Module identification*/
    end
  end

  PC0P223(); /* Load header fields*/

  PC0PM002.XXXTSPAG = PC0PW00.XXXTSPAG; /* Current page*/
  PC0PM002.TA5TSQIX = PC0PW00.TA5TSQIX; /* Highest page*/

   /* ------------------------------------------------------------*/
   /* format the storage area record to the map*/
   /* ------------------------------------------------------------*/

  set PC0PM002.CATOAP cursor; /* Set curson position*/
  PC0PW00.PC0PWIXM = 14; /* Initialize line index*/

  while (PC0PW00.PC0PWIXM >= 1) /* Until screen is full*/

    /* ------------------------------------------------------------*/
     /* Load Detail Lines*/
    /* ------------------------------------------------------------*/

    if (PC0PW02.SY1STNBR[PC0PWIXM] == " ") /* If no data*/
      set PC0PM002.PC0PMSEL[PC0PWIXM] skip, invisible; /* Protect selection*/
    else
      PC0P224(); /* Load detail*/
      if (PC0PW02.PC0PWSEL[PC0PWIXM] == "V") /* If already processed*/
        set PC0PM002.PC0PMSEL[PC0PWIXM] skip; /* Protect selection*/
      else
        set PC0PM002.PC0PMSEL[PC0PWIXM] cursor; /* Set curson position*/
      end
    end

    PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM - 1; /* Decrement line index*/

  end

end // end PC0P221

// Read temporary storage page
Function PC0P222()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PC0PW02.XXXTSLEN = PC0PW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PC0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PC0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0PW00.PC0PWMAP = "1"; /* request for map switch*/
  PC0PW00.XXXPRCNM = "PC0P222"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P222

// Format selection data of 002
Function PC0P223()
   /* ------------------------------------------------------------*/
   /* Format the selection data for map 002 display.*/
   /* ------------------------------------------------------------*/
  PC0PM002.PC0PMFPN = PC0PW01.PC0PWFPO; /* From PO number*/
  PC0PM002.PC0PMFPX = PC0PW01.PC0PWFPX; /* From PO ID year*/
  PC0PM002.PC4ORTYP = PC0PW01.PC0PWTYP; /* PO type*/
  PC0PM002.XGPCD = PC0PW01.XGPCD; /* GPC code*/
   /* MOVE PC0PW01.po-reg-cd tO PC0PM002.po-reg-cd;  /* po region*/
  PC0PM002.PC0PMSTY = PC0PW01.SY1STNBR; /* Style number*/
  PC0PM002.PC0PMCLR = PC0PW01.SY2CLRID; /* Color*/
  PC0PM002.PC0PMDIM = PC0PW01.XDMCD; /* Dimension code*/
  PC0PM002.PC0PMCST = PC0PW01.XWHCD; /* Warehouse*/
  PC0PM002.PC0PMCST = PC0PW01.PC2CUXID; /* Cust xref*/
  PC0PM002.PC0PMDIV = PC0PW01.YSMXDV; /* Division*/
  PC0PM002.PC0PMTPN = PC0PW01.PC0PWTPO; /* PO number*/
  PC0PM002.PC0PMTPX = PC0PW01.PC0PWTPX; /* PO ID*/
  PC0PM002.FY1FCTSN = PC0PW01.FY1FCTSN; /* Factory description*/

end // end PC0P223

// Load map from page storage rec
Function PC0P224()
   /* ------------------------------------------------------------*/
   /* Load the map detail line from the row in temp storage*/
   /* ------------------------------------------------------------*/

  PC0PM002.PC0PMSEL[PC0PWIXM] = PC0PW02.PC0PWSEL[PC0PWIXM];
  PC0PM002.SY1STNBR[PC0PWIXM] = PC0PW02.SY1STNBR[PC0PWIXM];
  PC0PM002.SY2CLRID[PC0PWIXM] = PC0PW02.SY2CLRID[PC0PWIXM];
  PC0PM002.XDMCD[PC0PWIXM] = PC0PW02.XDMCD[PC0PWIXM];
  PC0PM002.XOWCD[PC0PWIXM] = PC0PW02.XOWCD[PC0PWIXM];
  PC0PM002.XWHCD[PC0PWIXM] = PC0PW02.XWHCD[PC0PWIXM];
  PC0PM002.YMTCD[PC0PWIXM] = PC0PW02.YMTCD[PC0PWIXM];
  PC0PM002.XDSCD[PC0PWIXM] = PC0PW02.XDSCD[PC0PWIXM];
  PC0PM002.PC2CUXID[PC0PWIXM] = PC0PW02.PC2CUXID[PC0PWIXM];
  PC0PM002.PC6PLAN[PC0PWIXM] = PC0PW02.PC6PLAN[PC0PWIXM];
  PC0PM002.PC6TORDE[PC0PWIXM] = PC0PW02.PC6TORDE[PC0PWIXM];
  PC0PM002.PC0PMEST[PC0PWIXM] = PC0PW02.PC0PWEST[PC0PWIXM];
  PC0PM002.PC0PMETL[PC0PWIXM] = PC0PW02.PC0PWETL[PC0PWIXM];
  PC0PM002.YSMXDV[PC0PWIXM] = PC0PW02.YSMXDV[PC0PWIXM];
  PC0PM002.PC6STAT[PC0PWIXM] = PC0PW02.PC6STAT[PC0PWIXM];
  PC0PM002.PC0PMSON[PC0PWIXM] = PC0PW02.PC0PMSON[PC0PWIXM];

  if (PC0PW02.PC0PWETF[PC0PWIXM] == "Y") /* IF ETAL Override date*/
    set PC0PM002.PC0PMETL[PC0PWIXM] skip, bold;
  end

end // end PC0P224

// Update the temp storage page
Function PC0P225()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PC0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PC0PW00.XXXPRCNM = "PC0P225"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P225

// Check attention identifiers
Function PC0P230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If PA2 was pressed*/
    converseLib.clearScreen();
     /* Clear map*/
    COMMAREA.CATOAP = " "; /* Application data*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      set PCWREC empty; /* Initialize PC communication record*/
      PC0P211(); /* purge temp storage*/
      XSPCS01(); /* transfer*/
      set PC0PM002.CATOAP cursor, bold; /* Highlight if transfer error*/
    else
      PC0PW00.XXXPRCNM = "PC0P230"; /* Module identification*/
      set PC0PM002.CATOAP cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Enter must be used for fast path*/
    end
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Handle PF-keys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* If PF1 was pressed*/
   || converseVar.eventKey is pf4 /* If PF4 was pressed*/
   || converseVar.eventKey is pf5 /* If PF5 was pressed*/
   || converseVar.eventKey is pf21) /* If PF21 was pressed*/

    if (converseVar.eventKey is pf1) /* If PF1 was pressed*/
      COMMAREA.CAITEM = "PC0PM002"; /* transfer to help*/
    end

    if (converseVar.eventKey is pf4) /* If PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* transfer to main menu*/
    end

    if (converseVar.eventKey is pf5) /* If PF5 was pressed*/
      COMMAREA.CATOAP = "FY0M"; /* transfer to production menu*/
    end

    if (converseVar.eventKey is pf21) /* If PF21 was pressed*/
      COMMAREA.CATOAP = "PC0A"; /* transfer to P.O. menu*/
    end

    PC0P211(); /* purge temp storage*/
    XSPCS01(); /* transfer*/
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* Return to selection screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* If PF3*/
    PC0PW00.PC0PWMAP = "1"; /* request selection screen*/
    PC0P211(); /* purge temp storage*/
    exit stack; /* Return to main*/
  end

   /* ------------------------------------------------------------*/
   /* Handle invalid request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* If invalid PF or PA key pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf9) 
    PC0PW00.XXXPRCNM = "PC0P230"; /* Module identification*/
    converseLib.validationFailed(4); /* ; Indicate invalid key used*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Return to show error message*/
  end

   /* ------------------------------------------------------------*/
   /* check for changes on confirmation*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* If add requested*/
   && PC0PW00.PC0PWCFG == "Y")    /* and confirm is yes*/
    if (PC0PM002 is modified) /* If any fields have changed*/
      PC0PM002.XXXPRCNM = "PC0P230"; /* Process name*/
      converseLib.validationFailed(91); /* Customer not added due to changes*/
      PC0PW00.PC0PWCFG = "N";
      exit stack;
    end
  else
    PC0PW00.PC0PWCFG = "N";
  end

end // end PC0P230

// Reset highlighted fields
Function PC0P240()
   /* ------------------------------------------------------------*/
   /* Return field attributes to their original state.*/
   /* ------------------------------------------------------------*/

  set PC0PM002.CATOAP initialAttributes; /* Commarea TO application*/
  set PC0PM002.CAITEM initialAttributes; /* Commarea application data*/

  PC0PW00.PC0PWIXM = 1; /* Initialize map index*/
  while (PC0PW00.PC0PWIXM <= 14) /* For each map line*/
    if (PC0PM002.SY1STNBR[PC0PWIXM] == " ") /* If no data for detail line*/
      set PC0PM002.PC0PMSEL[PC0PWIXM] skip, invisible;
                                   /* non-selectable field*/
    else
      if (PC0PM002.PC0PMSEL[PC0PWIXM] == "V") /* If already processed*/
        set PC0PM002.PC0PMSEL[PC0PWIXM] skip; /* non-selectable field*/
      else
        set PC0PM002.PC0PMSEL[PC0PWIXM] initialAttributes; /* Normal display*/
      end
    end
    PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM + 1; /* Increment map index*/
  end
end // end PC0P240

// Verify the entered data
Function PC0P250()
   /* ------------------------------------------------------------*/
   /* Check confirmation flag*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9
   && PC0PW00.PC0PWCFG == "Y")
    /* ------------------------------------------------------------*/
     /* If more than approximately 5 minutes since validation*/
     /* display error to decrease chance of shipments or receipts*/
    /* ------------------------------------------------------------*/
    XX0XS01(); /* Get date and time*/
    PC0PW00.XX0XWHMS[2] = XX0XW01.XX0XWHMS; /* Save current time*/
    PC0PW00.XX0XWHMS[2] = PC0PW00.XX0XWHMS[2] - PC0PW00.XX0XWHMS[1];
    if (PC0PW00.XX0XWHMS[2] > 500)
                                   /* If more than approx 5 minutes elapsed*/
      converseLib.validationFailed(373);
      exit stack;
    else
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If page backward*/
    if (PC0PW00.XXXTSPAG < 2) /* and no previous pages*/
      PC0PW00.XXXPRCNM = "PC0P250"; /* Module identification*/
      PCWREC.XXXMSGNO = 2; /* No previous pages to display*/
      exit stack; /* Display map*/
    else
      return;
    end
  end

  if (converseVar.eventKey is pf8) /* If page forward*/
    if (PC0PW00.XXXTSPAG >= PC0PW00.TA5TSQIX) /* if no more pages*/
      PC0PW00.XXXPRCNM = "PC0P250"; /* Module identification*/
      PCWREC.XXXMSGNO = 3; /* No more pages to display*/
      exit stack; /* Display map*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check each selection for validity.*/
   /* ------------------------------------------------------------*/

  PC0PW00.PC0PWIXM = 14; /* Initialize map index*/
  PC0PW00.PC0PMSEL = "N"; /* Initialize selection flag*/
  while (PC0PW00.PC0PWIXM >= 1) /* For each map detail line*/
    if (PC0PM002.PC0PMSEL[PC0PWIXM] == "S") /* If line selected*/
      PC0PW00.PC0PMSEL = "Y"; /* Set selection flag*/
    end
    if (PC0PM002.PC0PMSEL[PC0PWIXM] != PC0PW02.PC0PWSEL[PC0PWIXM])
      if (PC0PM002.PC0PMSEL[PC0PWIXM] != " " /* If other than ' '*/
       && PC0PM002.PC0PMSEL[PC0PWIXM] != "S") /* If other than ' '*/
        converseLib.validationFailed(13); /* Only 'S' can be used for select*/
        PC0PW00.XXXPRCNM = "PC0P250"; /* Module identification*/
        set PC0PM002.PC0PMSEL[PC0PWIXM] cursor, bold; /* Highlight*/
      else
        PC0PW02.PC0PWSEL[PC0PWIXM] = PC0PM002.PC0PMSEL[PC0PWIXM];
        PC0PW00.PC0PWSWU = "Y"; /* Storage update flag is yes*/
      end
    end
    PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM - 1; /* Decrement map line index*/
  end

   /* ------------------------------------------------------------*/
   /* If CAITEM entered without fastpath display error message*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    PC0PW00.XXXPRCNM = "PC0P250"; /* Module identification*/
    set PC0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    if (PC0PW00.PC0PMSEL == "N") /* If no lines selected*/
      converseLib.validationFailed(25); /* No selection made*/
      PC0PW00.XXXPRCNM = "PC0P250"; /* Module identification*/
      exit stack; /* Display error*/
    else
      PC0PW00.PC0PWIXM = 14; /* Initialize map index*/
      while (PC0PW00.PC0PWIXM >= 1) /* For each map detail line*/
        if (PC0PM002.PC0PMSEL[PC0PWIXM] == "S") /* If line selected*/
          PC0P251(); /* Check bal to ship for item*/
        end
        PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM - 1;
                                   /* Decrement map line index*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* If no errors*/
    PC0PW00.PC0PWCFG = "Y"; /* Confirm flag is yes*/
    converseLib.validationFailed(376); /* Press PF9 to update*/
    XX0XS01(); /* Get date and time*/
    PC0PW00.XX0XWHMS[1] = XX0XW01.XX0XWHMS; /* Save current time*/
  end

  exit stack; /* Display message*/
end // end PC0P250

// Save map data before converse
Function PC0P251()
   /* ------------------------------------------------------------*/
   /* if transfer from Dummy po type to "Live", skip this routine*/
   /* ------------------------------------------------------------*/

  if (PC0PW01.XGPCD == "03") /* GPC Code = 03*/
    if (PC0PW01.PC0PWTYP == "SD" /* and from PO Type*/
     || PC0PW01.PC0PWTYP == "CD") /* is a Dummy*/
      if (PC0PW00.PC4ORTYP != "SD" /* and to PO Type*/
       && PC0PW00.PC4ORTYP != "CD") /* is "live"*/
        return; /* return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check balance to ship for from item and merge to item*/
   /* ------------------------------------------------------------*/

  VPOITM05.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0PW01.PC0PWFPO; /* PO number*/
  VPOITM05.PC6ITMNB = PC0PW02.PC6ITMNB[PC0PWIXM]; /* Item seq #*/
  PCYREC.PCYFUNC = "SA"; /* Function*/
  PC0PS03(); /* Select unique item*/
  move VPOITM05 to PC0PW03 withV60Compat; /* Save item record*/
  PC0PS05(); /* Balance to ship*/
  move PC0PW03 to VPOITM05 withV60Compat; /* Restore item record*/
  if (PC5REC.PC5TRECV != 0 /* If received*/
   || PC5REC.PC5TSHIP != 0) /* or shipped*/
    converseLib.validationFailed(359); /* can't process*/
    PC0PW00.XXXPRCNM = "PC0P251"; /* Module identification*/
    set PC0PM002.PC0PMSEL[PC0PWIXM] cursor, bold;
  else
    VPOITM05.PC3PONBR = PC0PW01.PC0PWTPO; /* To PO number*/
    PCYREC.PCYFUNC = "S "; /* Function*/
    PC0PS03(); /* Select unique item*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If item found*/
      if (VPOITM05.PC6STAT != "OP") /* If status not open*/
        converseLib.validationFailed(360); /* can't merge to*/
        PC0PW00.XXXPRCNM = "PC0P251"; /* Module identification*/
        set PC0PM002.PC0PMSEL[PC0PWIXM] cursor, bold;
      else
        PC0PS05(); /* Balance to ship*/
        if (PC5REC.PC5TRECV != 0 /* If received*/
         || PC5REC.PC5TSHIP != 0) /* or shipped*/
          converseLib.validationFailed(250); /* can't merge to*/
          PC0PW00.XXXPRCNM = "PC0P251"; /* Module identification*/
          set PC0PM002.PC0PMSEL[PC0PWIXM] cursor, bold;
        end
      end
    end
  end

end // end PC0P251

// -->Process valid input request
Function PC0P260()
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PC0PW00.PC0PWSWF = "Y"; /* Format the map switch*/
    PC0PW00.XXXTSPAG = PC0PW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PC0PW00.PC0PWSWF = "Y"; /* Format the map switch*/
    PC0PW00.XXXTSPAG = PC0PW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Process the P.O. item transfers for this page*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* If PF9*/
   && PC0PW00.PC0PWCFG == "Y")    /* and confirm flag is yes*/

    XX0XS01(); /* Get date and time*/

    PC0PW00.PC0PWIXM = 1; /* Init map index*/
    while (PC0PW00.PC0PWIXM <= 14) /* For each line*/
      if (PC0PM002.PC0PMSEL[PC0PWIXM] == "S") /* If line selected*/
        PC0P261(); /* Transfer the PO item*/
        PC0PW02.PC0PWSEL[PC0PWIXM] = "V"; /* Mark as processed*/
      end
      PC0PW00.PC0PWIXM = PC0PW00.PC0PWIXM + 1; /* Increment index*/
    end

    /* ------------------------------------------------------------*/
     /* Update the status of the From PO header*/
    /* ------------------------------------------------------------*/
    set PC8REC empty;
    PC8REC.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    PC8REC.PO-REG-CD = PC0PW01.PO-REG-CD; /* po region*/
    PC8REC.PC3PONBR = PC0PW01.PC0PWFPO; /* From PO number*/
    XPPC010(); /* Update PO header*/

    /* ------------------------------------------------------------*/
     /* Update the status of the To PO header*/
    /* ------------------------------------------------------------*/
    set PC8REC empty;
    PC8REC.XGPCD = PC0PW01.XGPCD; /* GPC code*/
    PC8REC.PO-REG-CD = PC0PW01.PO-REG-CD; /* po region*/
    PC8REC.PC3PONBR = PC0PW01.PC0PWTPO; /* To PO number*/
    XPPC010(); /* Update PO header*/

    PC0PW00.PC0PWSWF = "Y"; /* Format map switch*/
    PC0PW00.PC0PWSWU = "Y"; /* Storage update is yes*/
    PC0PW00.PC0PWCFG = "N"; /* Confirm flag is no*/
    PCWREC.XXXMSGNO = 1; /* Update successful*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit update*/

  end

end // end PC0P260

// Transfer P.O. Item
Function PC0P261()
   /* ------------------------------------------------------------*/
   /* Get the item to transfer*/
   /* ------------------------------------------------------------*/

  VPOITM05.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0PW01.PC0PWFPO; /* PO number*/
  VPOITM05.PC6ITMNB = PC0PW02.PC6ITMNB[PC0PWIXM]; /* Item seq #*/
  PCYREC.PCYFUNC = "SA"; /* Function*/
  PC0PS03(); /* Select unique item*/
  move VPOITM05 to PC0PW03 withV60Compat; /* Save item record*/
  PC0PW00.PC0PWFCT = VPOITM05.FY1FCTYC; /* Save the old factory*/

   /* ------------------------------------------------------------*/
   /* See if an existing item can be merged to.*/
   /* ------------------------------------------------------------*/

  VPOITM05.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOITM05.PC3PONBR = PC0PW01.PC0PWTPO; /* To PO number*/
  PCYREC.PCYFUNC = "SE";
  PC0PS03(); /* Select unique VPOITM05*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If new item already exists*/
    /* ------------------------------------------------------------*/
     /* Merge old key item quantities with the new key item.*/
    /* ------------------------------------------------------------*/
    PC0P262();

  else /* New key row not found*/
    /* ------------------------------------------------------------*/
     /* Create new key item.*/
    /* ------------------------------------------------------------*/
    PC0P264();

  end

   /* ------------------------------------------------------------*/
   /* Check if the available inventory needs to be adjusted.*/
   /* ------------------------------------------------------------*/

  if (PC0PW01.XGPCD == "03") /* apparel transaction*/
    PC0P267(); /* adjust avail t-shirt inv.*/
  end

   /* ------------------------------------------------------------*/
   /* Cancel the old key item.*/
   /* ------------------------------------------------------------*/
  PC0PW01.PC0PW-TFY = VPOHDR02.FY1FCTYC; /* save to fcty*/
  PC0PW01.PC0PW-TPID = VPOHDR02.PC3POIDT; /* save to PO ID*/
  PC0P263();

end // end PC0P261

// Merge old qtys with new item
Function PC0P262()
   /* ------------------------------------------------------------*/
   /* Get the To PO header.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init PO header rec*/
  VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC0PW01.PC0PWTPO; /* PO number*/
  PC0PS01(); /* Obtain PO header*/

   /* ------------------------------------------------------------*/
   /* Get the old VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0PW03.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0PW03.PC6ITMNB; /* Item sequence number*/
  PC0PS06(); /* Obtain item size*/
  move VPOSIZ02 to PC0PW04 withV60Compat; /* Save old item size*/

   /* ------------------------------------------------------------*/
   /* Get the new VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC0PS06(); /* Obtain item size*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/

   /* ------------------------------------------------------------*/
   /* Load the audit record before values,*/
   /* add the size quantities of the old size to the new size,*/
   /* and load the audit record after values.*/
   /* ------------------------------------------------------------*/
  PC0PW00.XXX1 = 1; /* Initialize index*/
  while (PC0PW00.XXX1 <= 40) /* While index <= 10*/
    VPOASZ02.PCIBFRN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    VPOASZ02.PCKBFRPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    if (PC0PW04.PC7ORDEQ[XXX1] != 0 /* If old item qty exists*/
     && VPOSIZ02.PC7ORDEQ[XXX1] == 0) /* and new item qty does not*/
      VPOSIZ02.FY4FOBPR[XXX1] = PC0PW04.FY4FOBPR[XXX1];
    end
    VPOASZ02.PCKAFTPR[XXX1] = VPOSIZ02.FY4FOBPR[XXX1];
    VPOSIZ02.PC7ORDEQ[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1] +     PC0PW04.PC7ORDEQ[XXX1];
    VPOASZ02.PCIAFTN[XXX1] = VPOSIZ02.PC7ORDEQ[XXX1];
    PC0PW00.XXX1 = PC0PW00.XXX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  PC0PS07(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update the item - VPOITM05.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TORDE = VPOITM05.PC6TORDE + PC0PW03.PC6TORDE;
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOITM05.PC6TADD = VPOITM05.PC6TADD + PC0PW03.PC6TORDE;
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  VPOITM05.PC6MICHG = VPOITM05.PC6MICHG + PC0PW03.PC6MICHG;
                                   /* Sum merged items*/
  PC0PS08(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item audit - VPOAIT02.*/
   /* ------------------------------------------------------------*/
  PC0PS09(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  if (PC0PW01.XGPCD == "03")
    VPOAIT02.YOACD = "59"; /* Audit type = qty chg*/
  else
    VPOAIT02.YOACD = "16"; /* Audit type = qty chg*/
  end
  PC0PS10(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02.*/
   /* ------------------------------------------------------------*/
  PC0PS12(); /* Item size audit*/

end // end PC0P262

// Cancel old key item
Function PC0P263()
   /* ------------------------------------------------------------*/
   /* Get the From PO header.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init PO header rec*/
  VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC0PW01.PC0PWFPO; /* PO number*/
  PC0PS01(); /* Obtain PO header*/

  move PC0PW03 to VPOITM05 withV60Compat; /* Restore old item*/
   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Item sequence number*/
  PC0PS06(); /* Obtain item size*/

  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
   /* ------------------------------------------------------------*/
   /* Load the audit record before values.*/
   /* Zero out the on order quantities and audit after values.*/
   /* ------------------------------------------------------------*/
  PC0PW00.PC0PWIX1 = 1; /* Initialize index*/
  while (PC0PW00.PC0PWIX1 <= 40) /* While index <= 40*/

    VPOASZ02.PCIBFRN[PC0PWIX1] = VPOSIZ02.PC7ORDEQ[PC0PWIX1];
    VPOASZ02.PCKBFRPR[PC0PWIX1] = VPOSIZ02.FY4FOBPR[PC0PWIX1];
    VPOASZ02.PCKAFTPR[PC0PWIX1] = VPOSIZ02.FY4FOBPR[PC0PWIX1];
    VPOSIZ02.FY4FOBPR[PC0PWIX1] = 0;
    VPOSIZ02.PC7ORDEQ[PC0PWIX1] = 0;
    VPOASZ02.PCIAFTN[PC0PWIX1] = 0;
    VPOSIZ02.PC7FOBFL[PC0PWIX1] = "N";
    PC0PW00.PC0PWIX1 = PC0PW00.PC0PWIX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Update the item size - VPOSIZ02*/
   /* ------------------------------------------------------------*/
  PC0PS07(); /* Update item size*/

   /* ------------------------------------------------------------*/
   /* Update item - VPOITM05*/
   /* ------------------------------------------------------------*/
  VPOAIT02.PCIBFRN = VPOITM05.PC6TORDE; /* Before qty*/
  VPOITM05.PC6TCNCL = VPOITM05.PC6TCNCL + VPOITM05.PC6TORDE; /* Cancel qty*/
  VPOITM05.PC6TORDE = 0; /* On order qty*/
  VPOAIT02.PCIAFTN = 0; /* After qty*/
  VPOITM05.PC6MICHG = 0; /* Zero out any misc charges*/
  VPOITM05.PC6STAT = "CX"; /* Cancel status*/
  if (VPOITM05.XGPCD == "03") /* If apparel*/
    VPOITM05.XXXUSRID = COMMAREA.CAUSERID; /* User cancel for apparel*/
  end
  VPOITM05.PC6CXNBR = 1; /* Cancel version number*/
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status date*/
  PC0PS08(); /* Update item*/

   /* ------------------------------------------------------------*/
   /* Insert the item size audit - VPOASZ02*/
   /* ------------------------------------------------------------*/
  PC0PS09(); /* Get audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  PC0PS12(); /* Item size audit*/

   /* ------------------------------------------------------------*/
   /* Create item audit for cancel*/
   /* ------------------------------------------------------------*/
  if (PC0PW01.XGPCD == "03")
    VPOAIT02.YOACD = "61"; /* Audit type = cancel*/
  else
    VPOAIT02.YOACD = "18"; /* Audit type = cancel*/
  end
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN - VPOAIT02.PCIBFRN; /* Net change*/
  PC0PS10(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Create item audit for PO ID change*/
   /* ------------------------------------------------------------*/
  if (PC0PW01.XGPCD == "03")
    if (PC0PW01.PC0PW-TFY != PC0PW03.FY1FCTYC /* Different factories*/
     || PC0PW01.PC0PW-TPID != PC0PW03.PC3POIDT) /* Different PO IDs*/
      VPOAIT02.YOACD = "86"; /* Audit type = PO ID change*/
      VPOAIT02.PCIBFRN = PC0PW03.PC3POIDT; /* Before nbr*/
      VPOAIT02.PCIAFTN = PC0PW01.PC0PW-TPID; /* After nbr*/
      VPOAIT02.PCIBFRA = PC0PW03.FY1FCTYC; /* Before alpha*/
      VPOAIT02.PCIAFTA = PC0PW01.PC0PW-TFY; /* After alpha*/
      PC0PS10(); /* Item audit*/

      VPOAIT02.YOACD = "87"; /* Audit type = PO transfers*/
      VPOAIT02.PCIBFRN = PC0PW01.PC0PWFPO; /* Before nbr*/
      VPOAIT02.PCIAFTN = PC0PW01.PC0PWTPO; /* After nbr*/
      PC0PS10(); /* Item audit*/
    end
  end

end // end PC0P263

// Create new key item
Function PC0P264()
   /* ------------------------------------------------------------*/
   /* Get the To PO header.*/
   /* ------------------------------------------------------------*/
  set VPOHDR02 empty; /* Init To PO header*/
  VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC0PW01.PC0PWTPO; /* PO number*/
  PC0PS01(); /* Obtain PO header*/

   /* ------------------------------------------------------------*/
   /* Get the VPOSIZ02.*/
   /* ------------------------------------------------------------*/
  set VPOSIZ02 empty; /* Init size item rec*/
  VPOSIZ02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOSIZ02.PO-REG-CD = PC0PW03.PO-REG-CD; /* PO REGION CODE*/
  VPOSIZ02.PC3PONBR = PC0PW03.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = PC0PW03.PC6ITMNB; /* Item sequence number*/
  PC0PS06(); /* Obtain item size*/
  move VPOSIZ02 to PC0PW04 withV60Compat; /* Save the old record for later use*/

   /* ------------------------------------------------------------*/
   /* Get the next item sequence number*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "M2"; /* Function = count seq#*/
  PC0PS13(); /* Select count item seq*/
  VPOITM05.PC6ITMNB = PCYREC.PCYCOUNT + 1; /* Seq # = count + 1*/
  VPOSIZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO region*/
  VPOSIZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOSIZ02.PC6ITMNB = VPOITM05.PC6ITMNB; /* Sequence number*/

   /* ------------------------------------------------------------*/
   /* Load audit record before values and*/
   /* decrement any required quantities.*/
   /* ------------------------------------------------------------*/
  set VPOAIT02 empty; /* Init item audit rec*/
  set VPOASZ02 empty; /* Init size audit rec*/
  PC0PW00.PC0PWIX1 = 1; /* Initialize index*/
  while (PC0PW00.PC0PWIX1 <= 40) /* While index <= 40*/

    /* ------------------------------------------------------------*/
     /* Load the audit record before values.*/
    /* ------------------------------------------------------------*/
    VPOASZ02.PCIBFRN[PC0PWIX1] = 0;
    VPOASZ02.PCIAFTN[PC0PWIX1] = VPOSIZ02.PC7ORDEQ[PC0PWIX1];
    VPOASZ02.PCKBFRPR[PC0PWIX1] = VPOSIZ02.FY4FOBPR[PC0PWIX1];
    PC0PW00.PC0PWIX1 = PC0PW00.PC0PWIX1 + 1; /* Increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Load the after prices*/
   /* ------------------------------------------------------------*/
  PC0P268();

   /* ------------------------------------------------------------*/
   /* Create new PO item size*/
   /* ------------------------------------------------------------*/
  PC0PS14(); /* Insert item size*/

   /* ------------------------------------------------------------*/
   /* Create PO item size audit*/
   /* ------------------------------------------------------------*/
  PC0PS09(); /* Audit seq # max*/
  VPOAIT02.PCJSEQNO = PCYREC.PCYCOUNT + 1; /* New seq #*/
  PC0PS12(); /* Item size audit*/

   /* ------------------------------------------------------------*/
   /* Get the PO header*/
   /* ------------------------------------------------------------*/
  VPOHDR02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOHDR02.PO-REG-CD = PC0PW01.PO-REG-CD; /* PO REGION CODE*/
  VPOHDR02.PC3PONBR = PC0PW01.PC0PWTPO; /* PO number*/
  PC0PS01(); /* Get the PO header*/

   /* ------------------------------------------------------------*/
   /* Calculate the plan number*/
   /* ------------------------------------------------------------*/
  PC0PS15(); /* Calculate plan number*/

   /* ------------------------------------------------------------*/
   /* Insert po item*/
   /* ------------------------------------------------------------*/
  VPOITM05.PC4ORTYP = VPOHDR02.PC4ORTYP; /* PO type*/
  VPOITM05.PC3POIDT = VPOHDR02.PC3POIDT; /* PO ID date*/
  VPOITM05.PCFSECD = VPOHDR02.PCFSECD; /* PO season code*/
  VPOITM05.FY1FCTYC = VPOHDR02.FY1FCTYC; /* Factory*/
  VPOITM05.XCTCD = VPOHDR02.XCTCD; /* Country*/
  VPOITM05.PC6STADT = XX0XW01.XX0XWDAT; /* Status date*/
  VPOITM05.PC6PREFL = "N"; /* pc prebuild flag*/
  VPOITM05.XIB-IBANK-CD = " "; /* Bank Code*/
  VPOITM05.PC-LGL-PO-PRT-IND = " "; /* Print Indicator*/
  VPOITM05.XXXUSRID = " "; /* user id*/
  PC0PS19(); /* Insert item*/

   /* ------------------------------------------------------------*/
   /* Create PO item audit*/
   /* ------------------------------------------------------------*/
  if (PC0PW01.XGPCD == "03")
    VPOAIT02.YOACD = "60"; /* Audit type = size chg*/
  else
    VPOAIT02.YOACD = "17"; /* Audit type = size chg*/
  end
  VPOAIT02.PCIBFRN = 0; /* Before qty*/
  VPOAIT02.PCIAFTN = VPOITM05.PC6TORDE; /* After qty*/
  VPOAIT02.PCJNETQT = VPOAIT02.PCIAFTN; /* Net change*/
  PC0PS10(); /* Item audit*/

   /* ------------------------------------------------------------*/
   /* Copy any special instructions*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC3SIFL == "Y") /* If special instructions*/

    PC0PS20(); /* Select set and open the cursor*/
    PC0PS21(); /* Fetch pcgrec row*/
    while (PC0PW00.PC0PWDC2 == "N") /* Until end of set for SI*/
      PCBREC.PCASINBR = PCGREC.PCASINBR; /* To intruction numbr*/
      PCDREC.XGPCD = PC0PW01.XGPCD;
      PCBREC.XGPCD = PC0PW01.XGPCD;
      PC0PS24(); /* get next special instuction number*/
      PC0PS30(); /* select set and open cursor for text*/
      PC0PW00.PC0PWDC3 = "N"; /* set end of set to no*/
      PCGREC.PC3PONBR = PC0PW01.PC0PWTPO; /* To PO number*/
      PCGREC.PCASINBR = PCDREC.PCDSINBR; /* To intruction numbr*/
      PCGREC.PC6ITMNB = VPOITM05.PC6ITMNB; /* Sequence number*/
      PC0PS22(); /* Add pcgrec row*/
      while (PC0PW00.PC0PWDC3 == "N") /* until end of set for text*/
        PC0PS31(); /* fetch next text row,*/
        if (SQLCA.VAGen_SQLCODE == 0)
          PCBREC.PCASINBR = PCDREC.PCDSINBR; /* To intruction numbr*/
          PC0PS35(); /* add   next test row,*/
        end
      end
      PC0PS32(); /* close cursor for text*/
      PC0PS21(); /* Fetch pcgrec row*/
    end
    PC0PS23(); /* Close set of pcgrec rows*/

  end

   /* ------------------------------------------------------------*/
   /* Copy the ship to override address*/
   /* ------------------------------------------------------------*/
  if (VPOITM05.PC61TMSH == "Y") /* If ship to override address*/

    PC0P265(); /* Address already exist?*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      VPOITM05.PO-REG-CD = PC0PW03.PO-REG-CD; /**/
      VPOITM05.PC3PONBR = PC0PW03.PC3PONBR; /* Use old PO number*/
      PC0P265(); /* Get override address*/
      PC9REC.PC3PONBR = PC0PW01.PC0PWTPO; /* Use new PO number*/
      PC0P266(); /* Add ship to address*/
    end

  end

end // end PC0P264

// Get override address- VPOIAD01
Function PC0P265()
   /* ------------------------------------------------------------*/
   /* Load the key fields for table row access.*/
   /* ------------------------------------------------------------*/

  PC9REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC9REC.PC3PONBR = VPOITM05.PC3PONBR; /* P.O. number*/
  PC9REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style number*/
  PC9REC.SY2CLRID = VPOITM05.SY2CLRID; /* Identifying color*/
  PC9REC.XDMCD = VPOITM05.XDMCD; /* Dimension code*/
  PC9REC.XQACD = VPOITM05.XQACD; /* Quality code*/
  PC9REC.XOWCD = VPOITM05.XOWCD; /* Owner group code*/
  PC9REC.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference code*/
  PC9REC.XPGCD = VPOITM05.XPGCD; /* Packaging type code*/
  PC9REC.XUMCD = VPOITM05.XUMCD; /* Unit of measure code*/
  PC9REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer xref ID*/
  PC9REC.XWHCD = VPOITM05.XWHCD; /* Warehouse code*/

   /* ------------------------------------------------------------*/
   /* Get the override address data.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3290" ("S ", SQLCA, PC9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P265"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC0PW00.PC0PWKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P265

// Add override address- VPOIAD01
Function PC0P266()
   /* ------------------------------------------------------------*/
   /* Add the override address data.*/
   /* ------------------------------------------------------------*/
  PC9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  PC9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PC9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3290" ("A ", SQLCA, PC9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, save data & return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0P266"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW";
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOIAD01"; /* Table view name*/

  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = PC9REC.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = PC9REC.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = PC9REC.SY1STNBR; /* Key field 3*/
  PC0PW00.PC0PWKA4 = PC9REC.SY2CLRID; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0P266

// check for update to avail
Function PC0P267()
   /* ------------------------------------------------------------*/
   /* Get the blank style and color from the style color recd.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = "03";
  PG2REC.SY1STNBR = VPOITM05.SY1STNBR; /* style*/
  PG2REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  PG2REC.XDMCD = VPOITM05.XDMCD; /* dimension*/

  XSPG202(); /* retrieve style color recd*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(52); /* recd not found, error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back*/
    exit stack; /* display error*/
  end

   /* added next portion to create error msg if blank style "to" po*/
   /* is trying to be transfered          - dhales*/
  if (PG2REC.PG2SCRFL == "B" /* If a blank style*/
   || PG2REC.PG2SCRFL == "I" /* If a interim*/
   || PG2REC.PG2SCRFL == "U") /* If a unfinished.*/
    if (PC0PW00.PC4ORTYP == "TO"
     || PC0PW01.PC0PWTYP == "TO")
      converseLib.validationFailed(502);
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back*/
      exit stack; /* display error*/
    end
  end
   /* end of added code                   - dhales*/

  if (PG2REC.PG2SCRFL != "S" /* If not a screened style*/
   && PG2REC.PG2SCRFL != "I")

     /* Make sure to p.o. is not a Screener p.o.*/

    PC0PW00.PC0PWPID = PC0PM002.PC0PMTPX; /* Set up 'to' customer*/

    set VPRDCU03 empty; /* set up for read of prdcu*/
    VPRDCU03.XGPCD = VPOITM05.XGPCD;
    VPRDCU03.PC2CUXID = PC0PW00.FY1FCTYC; /* fcty to convert to iseg*/
    PC0PS02(); /* Select cust xref*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     && VPRDCU03.XXXSTAT == "A"  /* and still active*/
     && VPRDCU03.YPCCD == "S")   /* and the factory is a screener*/
      converseLib.validationFailed(425); /* P.O. cannot be screener p.o.*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back*/
      exit stack; /* display error*/
    else
      return; /* Return to previous processing*/
    end

  end

   /* -----------------------------------------------------*/
    /* test factory change*/
     /* pc0pw00.fy1fctyc = 'to' factory*/
     /* pc0pw00.pc0pwfct = 'from' factory*/
   /* -----------------------------------------------------*/

  PC0PW00.PC0PWPID = PC0PM002.PC0PMTPX;

   /* -----------------------------------------------------*/
     /* neither to nor from po is a dummy*/
       /* if factory is the same, return to previous proc*/
   /* -----------------------------------------------------*/
  if (PC0PW00.PC4ORTYP != "SD"
   && PC0PW00.PC4ORTYP != "CD"
   && PC0PW01.PC0PWTYP != "SD"
   && PC0PW01.PC0PWTYP != "CD")
    if (PC0PW00.FY1FCTYC == PC0PW00.PC0PWFCT) /* factory doesn't change*/
      return; /* don't need to adjust inventory*/
    else
      converseLib.validationFailed(412); /* factory must be same*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back*/
      exit stack; /* display error*/
    end
  end
   /* ------------------------------------------------------------*/
   /* both to and from PO's are dummys.*/
       /* if factory is the same, return to previous proc*/
          /* do not adjust avail inv*/
   /* ------------------------------------------------------------*/
  if (PC0PW00.PC4ORTYP == "SD" /* both to and from pos are dummy*/
   || PC0PW00.PC4ORTYP == "CD")
    if (PC0PW01.PC0PWTYP == "SD"
     || PC0PW01.PC0PWTYP == "CD")
      set VPRDCU03 empty; /* set up for read of prdcu*/
      VPRDCU03.XGPCD = VPOITM05.XGPCD;
      VPRDCU03.PC2CUXID = PC0PW00.FY1FCTYC; /* fcty to convert to iseg*/
      PC0PS41(); /* validate factory*/
      return; /* don't need to adjust inventory*/
    end
  end
   /* ------------------------------------------------------------*/
   /* to po is a dummy, from po is live*/
   /* ------------------------------------------------------------*/
  if (PC0PW00.PC4ORTYP == "SD"
   || PC0PW00.PC4ORTYP == "CD")
    if (PC0PW01.PC0PWTYP != "SD"
     && PC0PW01.PC0PWTYP != "CD")
      if (PC0PW00.FY1FCTYC == PC0PW00.PC0PWFCT) /* factory doesn't change*/
                                  /* process avail invntry*/
      else
        converseLib.validationFailed(412); /* factory must be same*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back*/
        exit stack; /* display error*/
      end
    end
  end
   /* ------------------------------------------------------------*/
    /* from po is a dummy, to po is live*/
   /* ------------------------------------------------------------*/
  if (PC0PW01.PC0PWTYP == "SD"
   || PC0PW01.PC0PWTYP == "CD")
    if (PC0PW00.PC4ORTYP != "SD"
     && PC0PW00.PC4ORTYP != "CD")
      if (PC0PW00.FY1FCTYC == PC0PW00.PC0PWFCT) /* factory doesn't change*/
                                  /* process avail invntry*/
      else
        converseLib.validationFailed(412); /* factory must be same*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back*/
        exit stack; /* display error*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Move values to available inventory record.*/
   /* ------------------------------------------------------------*/
  set AVLREC empty;
  AVLREC.SY1STNBR = PG2REC.SY1BSTNB; /* Style*/
  AVLREC.SY2CLRID = PG2REC.SY2BCLCD; /* Color*/
  AVLREC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  AVLREC.XQACD = VPOITM05.XQACD; /* Quality*/
  AVLREC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  AVLREC.XPGCD = VPOITM05.XPGCD; /* Package*/
  AVLREC.XWHCD = "  "; /* Warehouse*/
  AVLREC.XXXUSER = "PC0P"; /* user id*/
  AVLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  AVLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  TA1REC.TA1PGMNM = "PC0P267";
   /* ------------------------------------------------------------*/
   /* Move values to available inventory comment*/
   /* ------------------------------------------------------------*/
  PC0PW00.PC0PWAV1 = "PO "; /* po literal*/
  PC0PW00.PC0PWAV3 = ",STY "; /* style label*/
  PC0PW00.PC0PWAV4 = VPOITM05.SY1STNBR; /* style*/
  PC0PW00.PC0PWAV5 = " "; /* space*/
  PC0PW00.PC0PWAV6 = VPOITM05.SY2CLRID; /* Color*/

   /* ------------------------------------------*/
   /* If 'TO' po is not a screener dummy*/
   /* ------------------------------------------*/
  if (PC0PW00.PC4ORTYP != "SD"
   && PC0PW00.PC4ORTYP != "CD")
    PC0PW00.PC0PMULT = -1; /* decrement avail inventory*/
  else
    PC0PW00.PC0PMULT = +1; /* increment avail inventory*/
  end
   /* ------------------------------------------------------------*/
   /* Move quantities to available inventory and*/
   /* use the working saved data in the pc0pw04 record*/
   /* ------------------------------------------------------------*/
  PC0PW00.XXX1 = +1; /* move ordered qty to avl rec*/
  while (PC0PW00.XXX1 <= 40)
    AVLREC.AVLADJQT[XXX1] = PC0PW04.PC7ORDEQ[XXX1] * PC0PW00.PC0PMULT;
    PC0PW00.XXX1 = PC0PW00.XXX1 + 1; /* increment index*/
  end

   /* ------------------------------------------*/
   /* If 'TO' po is not a screener dummy*/
   /* ------------------------------------------*/
  if (PC0PW00.PC4ORTYP != "SD"
   && PC0PW00.PC4ORTYP != "CD")
    PC0PW00.PC0PWAV7 = ",DECR"; /* action taken*/
    PC0PW00.PC0PWAV2 = PC0PW01.PC0PWTPN; /* po number*/
    AVLREC.AV2CMNT = PC0PW00.PC0PWAVC; /* move to working storage*/
    set VPRDCU03 empty; /* set up for read of prdcu*/
    VPRDCU03.XGPCD = VPOITM05.XGPCD;
    VPRDCU03.PC2CUXID = PC0PW00.FY1FCTYC; /* fcty to convert to iseg*/
    PC0PS40(); /* adjust inventory*/
  end

   /* ------------------------------------------*/
   /* If 'FROM' po is not a screener dummy*/
   /* ------------------------------------------*/
  if (PC0PW01.PC0PWTYP != "SD"
   && PC0PW01.PC0PWTYP != "CD")
    PC0PW00.PC0PWAV7 = ",INCR"; /* action taken*/
    PC0PW00.PC0PWAV2 = PC0PW01.PC0PWFPN; /* po number*/
    AVLREC.AV2CMNT = PC0PW00.PC0PWAVC; /* move to working storage*/
    set VPRDCU03 empty; /* set up for read of prdcu*/
    VPRDCU03.XGPCD = VPOITM05.XGPCD;
    VPRDCU03.PC2CUXID = PC0PW00.PC0PWFCT; /* fcty to convert to iseg*/
    PC0PS40(); /* adjust inventory*/
  end

end // end PC0P267

// load after FOB price
Function PC0P268()
   /* ------------------------------------------------------------*/
   /* Load the after prices*/
   /* ------------------------------------------------------------*/
  if (VPOHDR02.FY1FCTYC == PC0PW03.FY1FCTYC /* Factory has not changed*/
   && VPOHDR02.PC3POIDT == PC0PW03.PC3POIDT) /* PO ID has not changed*/

    /* ===>   after price is same as before price*/
    PC0PW00.PC0PWIX1 = 1;
    while (PC0PW00.PC0PWIX1 <= 40) /* While index <= 40*/
      VPOASZ02.PCKAFTPR[PC0PWIX1] = VPOSIZ02.FY4FOBPR[PC0PWIX1];
      PC0PW00.PC0PWIX1 = PC0PW00.PC0PWIX1 + 1;
    end
  else
    /* ------------------------------------------------------------*/
     /* Load key fields for the fob price lookup*/
    /* ------------------------------------------------------------*/
    PCOREC.XGPCD = VPOHDR02.XGPCD;
    PCOREC.FY1FCTYC = VPOHDR02.FY1FCTYC;
    PCOREC.SY1STNBR = VPOITM05.SY1STNBR;
    PCOREC.SY2CLRID = VPOITM05.SY2CLRID;
    PCOREC.XDMCD = VPOITM05.XDMCD;
    PCOREC.XQACD = VPOITM05.XQACD;
    PCOREC.XUMCD = VPOITM05.XUMCD;
    PCOREC.XPGCD = VPOITM05.XPGCD;
    PCOREC.PC2INSEG = VPOITM05.PC2INSEG;
    PCOREC.XSECD = VPOHDR02.XSECD;
    PCOREC.PC3POIDT = VPOHDR02.PC3POIDT;
    PCOREC.PC3CRDT = VPOHDR02.PC3CRDT;
    PCOREC.PCFSEYR = VPOHDR02.PCFSEYR;

    XSPCS04(); /* get fob prices*/

      /* if FOB found, use FOB price in after price*/

    if (PCOREC.PCORECPF == "Y") /* fob price found*/
      PC0PW00.PC0PWIX1 = 1;
      while (PC0PW00.PC0PWIX1 <= 40) /* While index <= 40*/
        if (VPOSIZ02.PC7ORDEQ[PC0PWIX1] != 0) /* if qty ordrd*/
          VPOASZ02.PCKAFTPR[PC0PWIX1] = PCOREC.FY4FOBPR[PC0PWIX1];
          VPOSIZ02.FY4FOBPR[PC0PWIX1] = PCOREC.FY4FOBPR[PC0PWIX1];
        else
          VPOSIZ02.FY4FOBPR[PC0PWIX1] = 0;
          VPOASZ02.PCKAFTPR[PC0PWIX1] = 0;
        end
        VPOSIZ02.PC7FOBFL[PC0PWIX1] = "N"; /* set override flag*/
        PC0PW00.PC0PWIX1 = PC0PW00.PC0PWIX1 + 1;
      end

    else

        /* otherwise, use default FOB price from factory*/

      if (PCOREC.PCORECPF == "N") /* fob price not found*/
        VFCTY003.XGPCD = PC0PW01.XGPCD; /* set up factory key data*/
        VFCTY003.FY1FCTYC = VPOHDR02.FY1FCTYC;
        PC0PS50(); /* get the factory default price*/
        PC0PW00.PC0PWIX1 = 1;
        while (PC0PW00.PC0PWIX1 <= 40) /* While index <= 40*/
          if (VPOSIZ02.PC7ORDEQ[PC0PWIX1] != 0) /* if qty ordrd*/
            VPOASZ02.PCKAFTPR[PC0PWIX1] = VFCTY003.FY1DFPRC;
            VPOSIZ02.FY4FOBPR[PC0PWIX1] = VFCTY003.FY1DFPRC;
          else
            VPOSIZ02.FY4FOBPR[PC0PWIX1] = 0;
            VPOASZ02.PCKAFTPR[PC0PWIX1] = 0;
          end
          VPOSIZ02.PC7FOBFL[PC0PWIX1] = "N"; /* set override flag*/
          PC0PW00.PC0PWIX1 = PC0PW00.PC0PWIX1 + 1;
        end
      end
    end
  end

end // end PC0P268

// Get PO header  DPRODC.VPOHDR01
Function PC0PS01()
   /* ------------------------------------------------------------*/
   /* Select unique PO number xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PO NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR02"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOHDR02.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKA2 = VPOHDR02.PO-REG-CD; /* Key field 2*/
  PC0PW00.PC0PWKN3 = VPOHDR02.PC3PONBR; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS01

// Get customer - DPRODC.VPRDCU01
Function PC0PS02()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPRDCU03" ("S ", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PC0PW00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPRDCU03.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKA2 = VPRDCU03.PC2CUXID; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS02

// Select unique item -  VPOITM05
Function PC0PS03()
   /* ------------------------------------------------------------*/
   /* Select unique row VPOITM05.*/
   /* ------------------------------------------------------------*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS03"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS03

// Validate date
Function PC0PS04()
   /* ------------------------------------------------------------*/
   /* Use the called module TA0040 to validate & convert dates.*/
   /* ------------------------------------------------------------*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Date routine*/

   /* ------------------------------------------------------------*/
   /* If unsuccesful call, indicate a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    return;
  else
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA2REC.TA2GRGG; /* date sent to validate*/

    PC0PW00.XXXPRCNM = "PC0PS04"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "CALL TO TA0040 TO EDIT DATE  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNM = PC0PW00.XXXPRCNM; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = PC0PW00.PC0PWMAP; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/
  end

end // end PC0PS04

// Get balance to ship
Function PC0PS05()
   /* ------------------------------------------------------------*/
   /* Load the PC5REC with item values*/
   /* ------------------------------------------------------------*/
  PC5REC.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  PC5REC.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO number*/
  PC5REC.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  PC5REC.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  PC5REC.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  PC5REC.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  PC5REC.XQACD = VPOITM05.XQACD; /* Quality*/
  PC5REC.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  PC5REC.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  PC5REC.XPGCD = VPOITM05.XPGCD; /* Package*/
  PC5REC.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  PC5REC.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  PC5REC.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  PC5REC.YMTCD = VPOITM05.YMTCD; /* MODE OF TRANSPORTATION*/
  PC5REC.OP1PARTN = VPOITM05.OP1PARTN; /* Part char*/
  PC5REC.OP1CUOID = VPOITM05.OP1CUOID; /* Sales order*/
  PC5REC.OP1NORID = VPOITM05.OP1NORID; /* Nike order*/
  PC5REC.PC5ERFL = "N"; /* hard error flag*/

  XPPC030(); /* Get balance to ship quantities for*/
                                   /* the item*/

end // end PC0PS05

// Select unique  DPRODC.VPOSIZ01
Function PC0PS06()
   /* ------------------------------------------------------------*/
   /* Select unique VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS06"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0PS06

// Update size  - DPRODC.VPOSIZ01
Function PC0PS07()
   /* ------------------------------------------------------------*/
   /* Update the VPOSIZ02 row.*/
   /* ------------------------------------------------------------*/
  VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOSIZ02.ZFC-CRCY-CD = " "; /* currency code*/

  try
    call "VPOSIZ02" ("U ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    PCWREC.XXXMSGNO = 11; /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    PCWREC.XXXMSGNO = 10; /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database updates*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to show error message*/

end // end PC0PS07

// Update row      - VPOITM05
Function PC0PS08()
   /* ------------------------------------------------------------*/
   /* Update row for VPOITM05.*/

   /* ------------------------------------------------------------*/
  VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  PCYREC.PCYFUNC = "UA"; /* Function is update*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS08

// Select max - VPOAIT02
Function PC0PS09()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/

   /* ------------------------------------------------------------*/
   /* Select max on sequence number for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "M1"; /* Function is max for seq #*/
  try
    call "VPOAIT02" (PCYREC, SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      PCYREC.PCYCOUNT = VPOAIT02.PCJSEQNO; /* Sequence # max*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -305) /* No audit sequence # max*/
        PCYREC.PCYCOUNT = 0; /* Max = 0*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS09"; /* Process name*/
  TA1REC.TA1LOC = "SELECT MAX SEQUENCE #";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS09";
  exit stack;

end // end PC0PS09

// Insert item audit row VPOAIT02
Function PC0PS10()
   /* ------------------------------------------------------------*/
   /* Move values to item audit record.*/
   /* ------------------------------------------------------------*/
  VPOAIT02.XGPCD = VPOITM05.XGPCD; /* GPC code*/
  VPOAIT02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOAIT02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOAIT02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOAIT02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOAIT02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOAIT02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOAIT02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOAIT02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOAIT02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOAIT02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOAIT02.PC3POIDT = VPOITM05.PC3POIDT; /* PO ID*/
  VPOAIT02.PCFSECD = VPOITM05.PCFSECD; /* Season*/
  VPOAIT02.FY1FCTYC = VPOITM05.FY1FCTYC; /* Factory*/
  VPOAIT02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOAIT02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOAIT02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOAIT02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOAIT02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOAIT02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOAIT02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOAIT02.PC6XCTCD = VPOITM05.PC6XCTCD; /* dest ctry*/
  VPOAIT02.XXXPGUID = COMMAREA.CAUSERID; /* Userid*/
  VPOAIT02.PC4ORTYP = VPOITM05.PC4ORTYP; /* PO type*/
  VPOAIT02.OP1PARTN = VPOITM05.OP1PARTN;
  VPOAIT02.OP1NORID = VPOITM05.OP1NORID;
  VPOAIT02.OP1CUOID = VPOITM05.OP1CUOID;

  PC0PS11(); /* set o/a and c/m flags*/

  VPOAIT02.YACCD = " "; /* Audit comment code*/
  VPOAIT02.PCJGLOFL = "N"; /* PC_GLBL_COLR_FL*/

   /* ------------------------------------------------------------*/
   /* Calculate value of ammendment indicator based on*/
   /* indicator in PO header, buy action code, and cust division.*/
   /* ------------------------------------------------------------*/

  if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

    if (YOATBL.YOALCFL[sysVar.arrayIndex] == "Y")
  /* dramse 05/14/99 commented out because amendments should be gen.*/
  /* dramse 05/14/99 for all divisions*/
      /* AND VPOITM05.YSMXDV EQ '20';*/
      if (VPOHDR02.PC3NISFL == "Y")
        VPOAIT02.PCJAMEND = "1";
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "2";
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end
    else
      if (VPOHDR02.PC3NISFL == "Y")
        VPOAIT02.PCJAMEND = "5";
      else
        if (VPOHDR02.PC3NISFL == "N")
          VPOAIT02.PCJAMEND = "5";
        else
          VPOAIT02.PCJAMEND = "3";
        end
      end
    end

  else /* ===> code not in table*/

    PC0PM002.XXXPRCNM = "PC0PS10"; /* Module identification*/
    converseLib.validationFailed(139); /* Indicate missing or invalid*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> rollback all changes*/

    exit stack;

  end

  VPOAIT02.XDSCD = VPOITM05.XDSCD; /* Direct ship code*/
  VPOAIT02.PC6PLAN = VPOITM05.PC6PLAN; /* Plan number*/
  VPOAIT02.YSMXDV = VPOITM05.YSMXDV; /* Division*/
  VPOAIT02.PG1SC4CD = VPOITM05.PG1SC4CD; /* Scheduler code*/

  VPOAIT02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOAIT02.ZZHHMMSS = XX0XW01.XX0XWHMS; /* ===> ZZ_SETUP_HHMMSS*/
  VPOAIT02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOAIT02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOAIT02.ZZZCHGCT = 0; /* Change count*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOAIT02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOAIT02" ("A ", SQLCA, VPOAIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end


  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS10"; /* Process name*/
  TA1REC.TA1LOC = "ADD ITEM AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT02"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOAIT02.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOAIT02.PC3PONBR; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS10"; /* Module identification*/
  exit stack;

end // end PC0PS10

// load chg memo and oa memo flag
Function PC0PS11()
   /* ------------------------------------------------------------*/
   /* Determine if the Change memo flag is set and load the*/
   /* appropriate change memo flag accordingly*/
   /* Do the same for oa memo flag*/
   /* ------------------------------------------------------------*/


  if (VPOHDR02.PC3PRTIN == "P") /* ===> po is printed*/
    if (VPOAIT02.YOACD in YOATBL.YOACD) /* ===> Code is in table*/

      if (YOATBL.YOACMFL[sysVar.arrayIndex] == "Y") /* ===> change memo flag*/
        VPOAIT02.PCJMEMO = " ";
      else
        VPOAIT02.PCJMEMO = "N";
      end /* =====>*/
      if (YOATBL.YOAADJFL[sysVar.arrayIndex] == "Y") /* ===> o/a adj flag*/
        VPOAIT02.PCJOAPRT = " ";
      else
        VPOAIT02.PCJOAPRT = "N";
      end /* =====>*/

    else /* ===> code not in table*/

      PC0PM002.XXXPRCNM = "PC0PS11"; /* Module identification*/
      converseLib.validationFailed(139); /* Indicate missing or invalid*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> rollback all changes*/

      exit stack;

    end
  else
    VPOAIT02.PCJMEMO = "N";
    VPOAIT02.PCJOAPRT = "N";
  end

end // end PC0PS11

// Insert size audit row VPOASZ02
Function PC0PS12()
   /* ------------------------------------------------------------*/
   /* Move values to size audit record.*/
   /* ------------------------------------------------------------*/
  VPOASZ02.XGPCD = PC0PW01.XGPCD; /* GPC code*/
  VPOASZ02.PO-REG-CD = VPOITM05.PO-REG-CD; /* PO REGION CODE*/
  VPOASZ02.PC3PONBR = VPOITM05.PC3PONBR; /* PO number*/
  VPOASZ02.PCJSEQNO = VPOAIT02.PCJSEQNO; /* Item audit sequence number*/
  VPOASZ02.SY1STNBR = VPOITM05.SY1STNBR; /* Style*/
  VPOASZ02.SY2CLRID = VPOITM05.SY2CLRID; /* Color*/
  VPOASZ02.XDMCD = VPOITM05.XDMCD; /* Dimension*/
  VPOASZ02.XQACD = VPOITM05.XQACD; /* Quality*/
  VPOASZ02.XOWCD = VPOITM05.XOWCD; /* Owner group*/
  VPOASZ02.PC2INSEG = VPOITM05.PC2INSEG; /* Spec difference*/
  VPOASZ02.XPGCD = VPOITM05.XPGCD; /* Package*/
  VPOASZ02.XUMCD = VPOITM05.XUMCD; /* Unit of measure*/
  VPOASZ02.PC6ETSDT = VPOITM05.PC6ETSDT; /* ETS date*/
  VPOASZ02.PC6OETS = VPOITM05.PC6OETS; /* OETS date*/
  VPOASZ02.PC6RTADT = VPOITM05.PC6RTADT; /* RTA date*/
  VPOASZ02.YMTCD = VPOITM05.YMTCD; /* Mode code*/
  VPOASZ02.PC6CXNBR = VPOITM05.PC6CXNBR; /* Cancel version number*/
  VPOASZ02.XWHCD = VPOITM05.XWHCD; /* Warehouse*/
  VPOASZ02.PC2CUXID = VPOITM05.PC2CUXID; /* Customer*/
  VPOASZ02.OP1PARTN = VPOITM05.OP1PARTN; /* Sales order*/
  VPOASZ02.OP1CUOID = VPOITM05.OP1CUOID;
  VPOASZ02.OP1NORID = VPOITM05.OP1NORID;

  VPOASZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  VPOASZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VPOASZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VPOASZ02.ZZZCHGCT = 0; /* Change count*/
  VPOASZ02.ZFC-CRCY-CD = " "; /* currency code*/

   /* ------------------------------------------------------------*/
   /* Insert row for VPOASZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOASZ02" ("A ", SQLCA, VPOASZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Row found*/
    return;
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS12"; /* Process name*/
  TA1REC.TA1LOC = "ADD SIZE AUDIT ROW   ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOASZ02"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOASZ02.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOASZ02.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKN3 = VPOASZ02.PCJSEQNO; /* Key field 3*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS12"; /* Module identification*/

  exit stack;

end // end PC0PS12

// Select count    - VPOITM05
Function PC0PS13()
   /* ------------------------------------------------------------*/
   /* Select count for VPOITM05.*/

   /* ------------------------------------------------------------*/

  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Null return*/

      PCYREC.PCYCOUNT = 0; /* Zero to count*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS13"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS13

// Insert size -  DPRODC.VPOSIZ01
Function PC0PS14()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOSIZ02.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOSIZ02" ("S ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for VPOSIZ02.*/
    /* ------------------------------------------------------------*/
    VPOSIZ02.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    VPOSIZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VPOSIZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    VPOSIZ02.ZFC-CRCY-CD = " "; /* currency code*/

    try
      call "VPOSIZ02" ("A ", SQLCA, VPOSIZ02) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. SIZE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0OS20"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOSIZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOSIZ02.VPOSIZ02-KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS14

// Calculate the new plan number
Function PC0PS15()
   /* ------------------------------------------------------------*/
   /* Select set for this plan*/
   /* ------------------------------------------------------------*/
  PC0PS16(); /* Select set VPOITM05*/

   /* ------------------------------------------------------------*/
   /* Fetch first item for this plan*/
   /* ------------------------------------------------------------*/
  PC0PS17(); /* Fetch next VPOITM05*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If items exist for plan*/
    /* ------------------------------------------------------------*/
     /* Check that open items exist for this plan*/
    /* ------------------------------------------------------------*/
    while (PC0PW05.PC6STAT != "OP" /* While status not open*/
     && PC0PW00.PC0PWDC1 == "N") /* and more items exist*/
      /* ------------------------------------------------------------*/
       /* Fetch next item for this plan*/
      /* ------------------------------------------------------------*/
      PC0PS17(); /* Fetch next VPOITM05*/

    end

    if (PC0PW00.PC0PWDC2 == "Y") /* If end of set*/
      converseLib.validationFailed(263); /* All products for plan closed*/
      PC0PW00.XXXPRCNM = "PC0PS15"; /* Module identification*/
      set PC0PM002.PC0PMSEL[PC0PWIXM] cursor, bold;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      exit stack; /* Display message*/
    else
      VPOITM05.PC6PLAN = PC0PW05.PC6PLAN; /* Plan number*/
    end

  else

    PCYREC.PCYFUNC = "M1"; /* Select max plan number*/
    PC0PS13(); /* Select item max plan number*/
    VPOITM05.PC6PLAN = PCYREC.PCYCOUNT + 1; /* Increment plan number*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/
  PC0PS18(); /* Close cursor VPOITM05*/

end // end PC0PS15

// Select item cursor  - VPOITM05
Function PC0PS16()
  PC0PW00.PC0PWDC2 = "N"; /* End of VPOITM05 flag*/
   /* ------------------------------------------------------------*/
   /* PC0PW05 is used to maintain PC6REC intact*/
   /* ------------------------------------------------------------*/
  move VPOITM05 to PC0PW05 withV60Compat; /* Move item values*/

  if (PC0PW01.XGPCD == "03")
    PC0PW05.SY2CLRID = "*"; /* color*/
    PC0PW05.PC6RTADT = -1;
  else
    PC0PW05.PC6ETSDT = -1; /* ETS date*/
    PC0PW05.PC6OETS = -1;
  end

  PC0PW05.XDMCD = "*"; /* Dimension*/
  PC0PW05.XQACD = "*"; /* Quality*/
  PC0PW05.XOWCD = "*"; /* Owner group*/
  PC0PW05.PC2INSEG = "*"; /* Inseg*/
  PC0PW05.XPGCD = "*"; /* Package*/
  PC0PW05.XUMCD = "*"; /* Unit of measure*/
  PC0PW05.XWHCD = "*"; /* Warehouse*/
  PC0PW05.PC2CUXID = "*"; /* Customer*/
  PC0PW05.PC6PLAN = -1; /* Plan*/
  PC0PW05.XDSCD = "*"; /* Direct ship*/
  PC0PW05.YSMXDV = "*"; /* Division*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "S7"; /* Function select set 1*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0PW05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOITM05";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = PC0PW05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = PC0PW05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = PC0PW05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = PC0PW05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS16

// Fetch next item     - VPOITM05
Function PC0PS17()
   /* ------------------------------------------------------------*/
   /* Fetch next row for VPOITM05.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "N7"; /* Fetch function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0PW05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0PW00.PC0PWDC2 = "Y"; /* Indicate  end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS17"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = PC0PW05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = PC0PW05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = PC0PW05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = PC0PW05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS17

// Close item cursor   - VPOITM05
Function PC0PS18()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  PCYREC.PCYFUNC = "C7"; /* Close function*/

  try
    call "VPOITM05" (PCYREC, SQLCA, PC0PW05) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS18"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOITM05 TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS18"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS18

// Insert item     - VPOITM05
Function PC0PS19()
   /* ------------------------------------------------------------*/
   /* Select unique for VPOITM05.*/
   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "S "; /* Function = select unique*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If row not found then insert new row.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/

    /* ------------------------------------------------------------*/
     /* Insert row for VPOITM05.*/
    /* ------------------------------------------------------------*/

    VPOITM05.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    VPOITM05.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VPOITM05.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    PCYREC.PCYFUNC = "A "; /* Function = insert*/
    try
      call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
    end /* Insert row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT P.O. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS19"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS19

// Select Set pcgrec (S2)
Function PC0PS20()
   /* ------------------------------------------------------------*/
   /* Select requested p.o. product special instruction rows*/
   /* ------------------------------------------------------------*/

  PCGREC.XGPCD = VPOITM05.XGPCD;
  PCGREC.PC3PONBR = PC0PW01.PC0PWFPO;
  PCGREC.PC6ITMNB = PC0PW03.PC6ITMNB;

  PC0PW00.PC0PWDC2 = "N"; /* End of cursor flag is no*/
   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("S2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0P901"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0P901"; /* Process name*/

  exit stack;

end // end PC0PS20

// Fetch pcgrec row (N2)
Function PC0PS21()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("N2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n2*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0PW00.PC0PWDC2 = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS21"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS21"; /* Process name*/

  exit stack;

end // end PC0PS21

// Add pcgrec row
Function PC0PS22()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  PCGREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  PCGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PCGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3300" ("A ", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS22"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCGREC.PCGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PM001.XXXPRCNM = "PC0PS22"; /* Process name*/

  exit stack;

end // end PC0PS22

// Close selected pcgrec set (C2)
Function PC0PS23()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3300" ("C2", SQLCA, PCGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C2*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMNM = "PC0PS23"; /* Process name*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOISI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS23"; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack;

end // end PC0PS23

// Select next spec inst nbr
Function PC0PS24()

   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3350" ("G ", SQLCA, PCDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* rollback updates*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS24"; /* Process name*/
  TA1REC.TA1LOC = "SELECT NEXT INSTR. NBR ROW ";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSICTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCDREC.PCDGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS24"; /* Process name*/

  exit stack;

end // end PC0PS24

// Select Set pcbrec (S1)
Function PC0PS30()

   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("S1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table set S1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS30"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS30"; /* Process name*/

  exit stack;

end // end PC0PS30

// Fetch pcbrec row
Function PC0PS31()

   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("N1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Fetch next row from n1*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PC0PW00.PC0PWDC3 = "Y"; /* end of set found*/
      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS31"; /* Process name*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCBREC.PCBGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS31"; /* Process name*/

  exit stack;

end // end PC0PS31

// Close selected pcbrec set
Function PC0PS32()

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("C1", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set C1*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/

       /* NEXT SENTENCE*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "PC0PS32"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PC0PW00.XXXPRCNM = "PC0PS32"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    exit stack;

  end

end // end PC0PS32

// Add spec instr text row
Function PC0PS35()

   /* ------------------------------------------------------------*/
   /* This module adds a table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3330" ("A ", SQLCA, PCBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add table row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Expected return codes*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS35"; /* Process name*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1DBASE = "DPRODC. "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSITXT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS35"; /* Process name*/

  exit stack;

end // end PC0PS35

// Update DAVAIL, avail t-shirts
Function PC0PS40()

   /* ======>> convert the factory to the iseg*/
   /* ======>>   for reading avail inventory*/

  PC0PS41(); /* get prdcu rec*/

  if (PC0PW00.PC0PMULT >= 0)

  else
    XSAVS11();
    if (SQLCA.VAGen_SQLCODE == 100)
      PC0PW00.XXXPRCNM = "PC0PS40";
      converseLib.validationFailed(413); /* no avail inv recd to decrement*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all database changes*/

      exit stack;
    end
  end
  XSAVS10();

  if (AVLREC.AVLRTNCD == 0)
    return; /* Update successful*/
  end
  if (AVLREC.AVLRTNCD == 1)
    converseLib.validationFailed(10); /* indicate parms missing*/
  end
  if (AVLREC.AVLRTNCD == 2)
    converseLib.validationFailed(401); /* indicate not enough inventory*/
  end
  if (AVLREC.AVLRTNCD == 3)
    converseLib.validationFailed(11); /* Indicate not available*/
  end
  if (AVLREC.AVLRTNCD == 4
   || AVLREC.AVLRTNCD == 5)
    converseLib.validationFailed(10); /* Indicate system error*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
                                   /* Rollback all database changes*/

  PC0PW00.XXXPRCNM = "PC0PS40";

  exit stack;

end // end PC0PS40

// Update DAVAIL, avail t-shirts
Function PC0PS41()

   /* ======>> get the iseg for the factory*/
   /* ======>>   for reading avail inventory*/

  PC0PS02(); /* get prdcu rec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VPRDCU03.XXXSTAT != "A")
      PC0PW00.XXXPRCNM = "PC0PS41";
      converseLib.validationFailed(411); /* cust xref inactive*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback all database changes*/

      exit stack;
    else
      AVLREC.PC2INSEG = VPRDCU03.PC2INSEG; /* iseg*/
    end
  else
    PC0PW00.XXXPRCNM = "PC0PS41";
    converseLib.validationFailed(410); /* factory not on cust xref*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback all database changes*/

    exit stack;
  end
end // end PC0PS41

// get factory DFCTY.VFCTY003
Function PC0PS50()
   /* ------------------------------------------------------------*/
   /* Select a unique row.   DFCTY.VFCTY003*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear map*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PC0PS50"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VFCTY003.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKA2 = VFCTY003.FY1FCTYC; /* Key field 2*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PC0PW00.XXXPRCNM = "PC0PS50";
  exit stack;

end // end PC0PS50

// Select COUNT(*)  -  VPOITM05
Function PC0PS55()
   /* ------------------------------------------------------------*/
   /* Select count(*) from  VPOITM05.*/
   /* ------------------------------------------------------------*/
  try
    call "VPOITM05" (PCYREC, SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end /* count(*)*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback all database updates*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC0PW00.XXXPRCNM = "PC0PS55"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT COUNT(*)";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "PC0PS55"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM05"; /* Table view name*/
  PC0PW00.TA1TBLKE = " "; /* Initialize work key*/
  PC0PW00.PC0PWKA1 = VPOITM05.XGPCD; /* Key field 1*/
  PC0PW00.PC0PWKN2 = VPOITM05.PC3PONBR; /* Key field 2*/
  PC0PW00.PC0PWKA3 = VPOITM05.PC4ORTYP; /* Key field 3*/
  PC0PW00.PC0PWKA4 = VPOITM05.YSMXDV; /* Key field 4*/
  TA1REC.TA1TBLKE = PC0PW00.TA1TBLKE; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PC0PS55

//*** RECORD=PC0PW00 ****
// ---------------------------
// Application Working Storage
// ---------------------------
// ***********************
Record PC0PW00 type basicRecord
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XX0XWHMS XX0XWHMS [2] ; 
  10 YSMXDV YSMXDV ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 XQACD XQACD ; 
  10 PC4LCSFL PC4LCSFL ; 
  10 PC0PWMAP PC0PWMAP ; 
  10 PC0PMSEL PC0PMSEL ; 
  10 PC0PWDC1 PC0PWDC1 ; 
  10 PC0PWDC2 PC0PWDC2 ; 
  10 PC0PWDC3 PC0PWDC3 ; 
  10 PC0PWCFG PC0PWCFG ; 
  10 XXX1 XXX1 ; 
  10 PC0PWIX1 PC0PWIX1 ; 
  10 PC0PWIXM PC0PWIXM ; 
  10 PC0PWNUM PC0PWNUM ; 
    15 PC0PWNM1 PC0PWNM1 ; 
    15 PC0PWNM2 PC0PWNM2 ; 
  10 PC0PWSWR PC0PWSWR ; 
  10 PC0PWSWF PC0PWSWF ; 
  10 PC0PWSWU PC0PWSWU ; 
  10 PC0PWPOD PC0PWPOD ; 
    15 PC0PWSYR PC0PWSYR ; 
      20 PC0PWCC PC0PWCC ; 
      20 PC0PWYY PC0PWYY ; 
    15 PC0PWM1 PC0PWM1 ; 
    15 PC0PWM2 PC0PWM2 ; 
  10 PC0PWPID PC0PWPID ; 
    15 PC0PWMYR PC0PWMYR ; 
    15 PC0PWD1 PC0PWD1 ; 
    15 PC0PWMM1 PC0PWMM1 ; 
    15 PC0PWD2 PC0PWD2 ; 
    15 PC0PWMM2 PC0PWMM2 ; 
    15 PC0PWD3 PC0PWD3 ; 
    15 FY1FCTYC FY1FCTYC ; 
  10 PC0PWFCT PC0PWFCT ; 
  10 PC6PLAN PC6PLAN ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 PC0PW-TO-PO-TYP PC0PW-TO-PO-TYP ; 
  10 PC0PMULT PC0PMULT ; 
  10 PC0PWAVC PC0PWAVC ; 
    15 PC0PWAV1 PC0PWAV1 ; 
    15 PC0PWAV2 PC0PWAV2 ; 
    15 PC0PWAV3 PC0PWAV3 ; 
    15 PC0PWAV4 PC0PWAV4 ; 
    15 PC0PWAV5 PC0PWAV5 ; 
    15 PC0PWAV6 PC0PWAV6 ; 
    15 PC0PWAV7 PC0PWAV7 ; 
  10 TA1TBLKE TA1TBLKE ; 
    15 PC0PWKA1 PC0PWKA1 ; 
      20 PC0PWKN1 PC0PWKN1 ; 
      20 * char(1) ; 
    15 PC0PWKA2 PC0PWKA2 ; 
      20 PC0PWKN2 PC0PWKN2 ; 
      20 * char(1) ; 
    15 PC0PWKA3 PC0PWKA3 ; 
      20 PC0PWKN3 PC0PWKN3 ; 
      20 * char(1) ; 
    15 PC0PWKA4 PC0PWKA4 ; 
      20 PC0PWKN4 PC0PWKN4 ; 
      20 * char(1) ; 
  10 PC0PWSGP PC0PWSGP ; 
    15 PC0PWSNB PC0PWSNB ; 
    15 PC0PWDOT PC0PWDOT ; 
    15 PC0PWNNB PC0PWNNB ; 
end // end PC0PW00

//*** RECORD=PC0PW01 ****
// ******* MAP SELECTION FIELD STORAGE FOR PC0PM001 ***********
// 
// ***********************
Record PC0PW01 type basicRecord
  10 PC0PWFPN PC0PWFPN ; 
  10 PC0PWFPO PC0PWFPO ; 
  10 PC0PWFPX PC0PWFPX ; 
  10 PC0PWFPD PC0PWFPD ; 
    15 PC0PWFCC PC0PWFCC ; 
    15 PC0PWFYR PC0PWFYR ; 
    15 PC0PWFM1 PC0PWFM1 ; 
    15 PC0PWFM2 PC0PWFM2 ; 
  10 PC0PWFFY PC0PWFFY ; 
  10 PC0PWALL PC0PWALL ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC0PWTYP PC0PWTYP ; 
  10 FY1FCTSN FY1FCTSN ; 
  10 XGPCD XGPCD ; 
  10 PO-REG-CD PO-REG-CD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XWHCD XWHCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 YSMXDV YSMXDV ; 
  10 PC0PWTPN PC0PWTPN ; 
  10 PC0PWTPO PC0PWTPO ; 
  10 PC0PWTPX PC0PWTPX ; 
  10 PC0PWTPD PC0PWTPD ; 
    15 PC0PWTCC PC0PWTCC ; 
    15 PC0PWTYR PC0PWTYR ; 
    15 PC0PWTM1 PC0PWTM1 ; 
    15 PC0PWTM2 PC0PWTM2 ; 
  10 PC0PWTFY PC0PWTFY ; 
  10 PC0PW-TPID PC0PW-TPID ; 
  10 PC0PW-TFY PC0PW-TFY ; 
end // end PC0PW01

//*** RECORD=PC0PW02 ****
// ************* PRODUCTION ORDER MAP RECORD ******************
// **                   LIST SCREEN                          **
// 
//            MAP:      PC0PM.PC0PM002
// 
//    RECORD NAME:      PC0PW02
// 
//       This record is a working storage record to load and
//    extract data for the list screen to and from temporary
//    storage.
// 
// ***********************
Record PC0PW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PC0PWRC2 PC0PWRC2 [14] ; 
    10 PC6ITMNB PC6ITMNB ; 
    10 PC0PWSEL PC0PWSEL ; 
    10 PC0PWETF PC0PWETF ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XOWCD XOWCD ; 
    10 XWHCD XWHCD ; 
    10 PC0PMSON PC0PMSON ; 
    10 YMTCD YMTCD ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC0PWEST PC0PWEST ; 
    10 PC0PWETL PC0PWETL ; 
    10 YSMXDV YSMXDV ; 
    10 PC6STAT PC6STAT ; 
end // end PC0PW02

//*** RECORD=PC0PW03 ****
// ******** COPY OF PRODUCTION ORDER ITEM TABLE ************
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    RECORD NAME:      PC0PW03       (---> MIRRORS vpoitm05)
// 
// THIS RECORD IS USED TO HOLD THE OLD ITEM BEING CHANGED.
// 
// ***********************************************************
// *                                                         *
// * 09/01/99   PCF205  DRAMMO  Modified to mirror VPOITM04  *
// * 03/27/00   PCF10J  SBUNGO  Modified to mirror VPOITM05  *
// *                                                         *
// ***********************************************************
// ***********************
Record PC0PW03 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0PW03

//*** RECORD=PC0PW04 ****
// ******* COPY OF PRODUCTION ORDER ITEM SIZE **************
// 
// DB2 TABLE VIEW:      DPRODC.VPOSIZ02
// **********************************************************
// *   DATE     USER    DESCRIPTION                         *
// * 06/18/93  ksanfo  db2 structure change - vposiz02      *
// *                                                        *
// **********************************************************
// ***********************
Record PC0PW04 type basicRecord
  5 VPOSIZ02-GROUP VPOSIZ02-GROUP ; 
    10 VPOSIZ02-KEY VPOSIZ02-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 PC7ORIGQ PC7ORIGQ [40] ; 
    10 PC7ORDEQ PC7ORDEQ [40] ; 
    10 PC7FOBFL PC7FOBFL [40] ; 
    10 FY4FOBPR FY4FOBPR [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0PW04

//*** RECORD=PC0PW05 ****
// ******** COPY OF PRODUCTION ORDER ITEM TABLE ************
// 
// DB2 TABLE VIEW:      DPRODC.VPOITM05
// 
//    RECORD NAME:      PC0PW05       (---> MIRRORS vpoitm05)
// 
// THIS RECORD IS USED TO HOLD THE OLD ITEM BEING CHANGED.
// 
// ***********************************************************
// *                                                         *
// * 09/01/99   PCF205  DRAMMO  Modified to mirror VPOITM04  *
// * 03/27/00   PCF210J SBUNGO  Modified to mirror VPOITM05  *
// *                                                         *
// ***********************************************************
// 
// ***********************
Record PC0PW05 type basicRecord
  5 VPOITM05-GROUP VPOITM05-GROUP ; 
    10 VPOITM05-KEY VPOITM05-KEY ; 
      15 XGPCD XGPCD ; 
      15 PO-REG-CD PO-REG-CD ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC6ITMNB PC6ITMNB ; 
      15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
      15 PC3POIDT PC3POIDT ; 
      15 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XCTCD XCTCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 PC6PLAN PC6PLAN ; 
    10 XPLCD XPLCD ; 
    10 XPRCD XPRCD ; 
    10 XPCCD XPCCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XGACD XGACD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PC6CLVAR PC6CLVAR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 YSMXDV YSMXDV ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC61TMSH PC61TMSH ; 
    10 XDSCD XDSCD ; 
    10 PC6STAT PC6STAT ; 
    10 PC6STADT PC6STADT ; 
    10 XFRCD XFRCD ; 
    10 FB-LATE-BK-FL FB-LATE-BK-FL ; 
    10 FB-LATE-BK-FL-MDT FB-LATE-BK-FL-MDT ; 
    10 PC6AIRNB PC6AIRNB ; 
    10 PC6AIRDT PC6AIRDT ; 
    10 PC-AIR-FRGT-PMTIND PC-AIR-FRGT-PMTIND ; 
    10 PC-NIKE-AFRGT-PCT PC-NIKE-AFRGT-PCT ; 
    10 PC-FCTY-AFRGT-PCT PC-FCTY-AFRGT-PCT ; 
    10 PC6NILRF PC6NILRF ; 
    10 YOHCD YOHCD ; 
    10 PC3SIFL PC3SIFL ; 
    10 PC6SZAVL PC6SZAVL ; 
    10 PC6CONNO PC6CONNO ; 
    10 PC6PETS PC6PETS ; 
    10 PC6OETAL PC6OETAL ; 
    10 PC6ETALF PC6ETALF ; 
    10 PC6MICHG PC6MICHG ; 
    10 PC6TORIG PC6TORIG ; 
    10 PC6TORDE PC6TORDE ; 
    10 PC6TADD PC6TADD ; 
    10 PC6TCNCL PC6TCNCL ; 
    10 PC6PREFL PC6PREFL ; 
    10 XIB-IBANK-CD XIB-IBANK-CD ; 
    10 PC-REL-PLN-REF-NBR PC-REL-PLN-REF-NBR ; 
    10 PC-LGL-PO-PRT-IND PC-LGL-PO-PRT-IND ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PC0PW05

// selection field
DataItem PC0PMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales/Nike order number
DataItem PC0PMSON char(11)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// determine incr or decr AV
DataItem PC0PMULT decimal(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save to Fcty
DataItem PC0PW-TFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "TO" p.o. type
DataItem PC0PW-TO-PO-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save to PO ID
DataItem PC0PW-TPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select all ? flag
DataItem PC0PWALL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po label
DataItem PC0PWAV1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number
DataItem PC0PWAV2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style label
DataItem PC0PWAV3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem PC0PWAV4 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color label
DataItem PC0PWAV5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color number
DataItem PC0PWAV6 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action taken
DataItem PC0PWAV7 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit comment for avjrec
DataItem PC0PWAVC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID century
DataItem PC0PWCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Confirm flag
DataItem PC0PWCFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash 1
DataItem PC0PWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash 2
DataItem PC0PWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dash 3
DataItem PC0PWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC0PWDC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC0PWDC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor flag
DataItem PC0PWDC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Period
DataItem PC0PWDOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_EST_HDT
DataItem PC0PWEST char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// ETAL Override flag
DataItem PC0PWETF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_ETAL_OVRD_DT
DataItem PC0PWETL char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID century
DataItem PC0PWFCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved factory code
DataItem PC0PWFCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From factory
DataItem PC0PWFFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID buy month
DataItem PC0PWFM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID delivery month
DataItem PC0PWFM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID
DataItem PC0PWFPD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From PC_PO_NBR
DataItem PC0PWFPN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save From PC_PO_NBR
DataItem PC0PWFPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save formatted from PO ID
DataItem PC0PWFPX char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From PO ID year
DataItem PC0PWFYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index
DataItem PC0PWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map Index
DataItem PC0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st field of key char
DataItem PC0PWKA1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd field of key char
DataItem PC0PWKA2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3rd field of key char
DataItem PC0PWKA3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 4th field of key char
DataItem PC0PWKA4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st field of key num
DataItem PC0PWKN1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2nd field of key num
DataItem PC0PWKN2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3rd field of key num
DataItem PC0PWKN3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 4th field of key num
DataItem PC0PWKN4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID buy month
DataItem PC0PWM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery month
DataItem PC0PWM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map To Display
DataItem PC0PWMAP char(1)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// PO ID buy month
DataItem PC0PWMM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID delivery mnoth
DataItem PC0PWMM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID year
DataItem PC0PWMYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric byte 1 as char
DataItem PC0PWNM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric byte 2 as char
DataItem PC0PWNM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Nike order number
DataItem PC0PWNNB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric redefine as char
DataItem PC0PWNUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted for display
DataItem PC0PWPID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID reformatted
DataItem PC0PWPOD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level array
DataItem PC0PWRC2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem PC0PWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales/Nike order number
DataItem PC0PWSGP char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales order number
DataItem PC0PWSNB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map flag
DataItem PC0PWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem PC0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update flag
DataItem PC0PWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID season year
DataItem PC0PWSYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// To PO ID century
DataItem PC0PWTCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to factory
DataItem PC0PWTFY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID buy month
DataItem PC0PWTM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID delivery month
DataItem PC0PWTM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID reformatted
DataItem PC0PWTPD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// To PC_PO_NBR
DataItem PC0PWTPN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save To PC_PO_NBR
DataItem PC0PWTPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save formatted to PO ID
DataItem PC0PWTPX char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save PC_PO_OT_CD
DataItem PC0PWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To PO ID year
DataItem PC0PWTYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID year
DataItem PC0PWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

