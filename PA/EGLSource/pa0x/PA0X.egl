package pa0x;

import corpcom3.XPPA001;
import corpcom3.XPPA020;
import corpcom3.XPTA0P;
import corpcom4.XSPAS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import fb.common.FB9REC;
import pa.common.*;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
//*** PROGRAM=PA0X ****
// THIS APPLICATION IS PART OF THE FOOTWEAR ORDER ADJUSTMENT
// SYSTEM.  THE PURPOSE OF THIS APPLICATION IS TO PROVIDE THE
// USER A MEANS BY WHICH THEY MAY REQUEST AND SUBMIT REPORTS
// MAY BE REQUESTED AD-HOCK.  THE MAP IS PRESENTED TO THE USER
// THEY MAY REQUEST ONE REPORT PER SCREEN PRESENTATION.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 041390     SCOCHR   Created.
// 100490     SCOCHR   ADD TABLE 7 FOR FCTY REPRINT
// 10/16/90   MSMIT2   Add call to TA0230 to determine if the
//                     user is in the production or test
//                     region.  This logic allows the correct
//                     set of jcl to be submitted for:
//                     JOBNAME        PRODUCTION       TEST
//                     =======        ==========      =======
//                     PA2061          PA0XT01        PA0XT11
//                     PA2061          PA0XT02        PA0XT12
//                     PA2081          PA0XT03        PA0XT13
//                     PA3021          PA0XT04        PA0XT14
//                     PA3031          PA0XT05        PA0XT15
//                     PC1111 status   PA0XT06        PA0XT16
//                     PC1111 no stat  PA0XT07        PA0XT17
// 10/18/90  MSMIT2    PA0X does not allow the printer default
//                     printer information to be updated.  This
//                     logic has be changed.
// 01/08/91  MWALKE    E#PA-206 darken the reprint factory
//                     request option on map--left code in prog
// 03/15/91  MSMIT2    add request description to management
//                     approval document.
// 06/11/91  MSMIT2    CONVERT PA302D AND PA303D TO COBOL2.
//                     TEST JCL NOW LOOKS AT COB2 LIBRARIES.
// 07/25/91  MSMIT2    allow po update to include status
//                     reports or not.
// 09/04/91  MSMIT2    SPECIALIST 03 (AVA CLARK) IS NOT GETTING
//                     THE PA2021 REPORT.  ADD AVA AS VALID
//                     SPECIALIST IN PROD.PARMLIB(PA202110)'
// 09/10/91  MSMIT2    add comma to after file07.
// 09/18/91  MSMIT2    STOP NIL MANAGEMENT REPORT.
// 09/27/91  MSMIT2    TAKE OUT TARJCL FOR REMOTE PRINTERS
// 11/22/91  dhales    remove pa2021 - serv req pa250
// 01/23/92  MSMIT2    COMMENT OUT STATUS REPORT PA2041.
// 02/18/92  MSMIT2    SEND PRODUCTION FACTORY DOCUMENT TO
//                     BUNDL
// 07/28/92  dhales    commented out remaining stat rpt 2031
//                     need to wait before removing option
//                     from menu
// 09/04/92  MSMIT2    ADD MANAGEMENT FACTORY DOCUEMENT.
// 02/24/93  dhales    comment out the dump override - proc chg
// 06/02/93  MSMIT2    TAKE OUT REFERENCE TO U7SVC IN PA0XT03.
// 07/12/93  MSMIT2    XSPAS01 CHANGED.
// 08/09/93  MSMIT2    DATABASE CHANGES.
// 12/10/93  MSMIT2    FB322 - ADD PROGRAM FB129D TO PC1111
//                     JCL.
// 01/20/94  MSMIT2    PC9999 - ADD PROGRAM PC139D TO PC1111
//                     JCL.
// 03/17/94  MSMIT2    PCF228 - PC111D HAS BEEN CHANGED TO
//                     ALLOW A SINGLE O/A TO UPDATE PO.  SINCE
//                     THIS EXECUTION OF PC111D PROCESSES ALL
//                     O/AS, MUST SET UPDATE O/A PARM TO ZEROES
// 10/01/94  JALLE1    CHANGE PA0XT08, PA0XT18 TO SUBMIT
//                     IMPA2171 RATHER THAN PA2171.
// 10/22/94  JALLE1    FIX PA0XT08 JCL PROBLEMS.
// 01/30/95  MSMIT2    DON'T SEND MESSAGE BACK TO USER WHEN
//                     IMPA2171 SUBMITTED FROM PRODUCTION.
// 02/01/95  MSMIT2    MAKE SURE EUROPEAN O/AS BROUGHT INTO
//                     FACTORY DOC.  THIS MEANS THAT THE FILE
//                     CONTAINING THE EUROPEAN O/AS NEEDS TO
//                     BE RESET.
// 05/26/95  JCARL1    CHANGED TO USE IMDSXFER INSTEAD OF
//                     TA0591 PROC CALL IN TABLE PA0XT08.
// 09/29/95  MSMIT2    PPS: ADD PA1201 AND PA1121 TO OUTPUT
//                     FILES NEEDED BY THE PPS.
// 10/05/95  DBRUIH    ADDED VIETNAM TO AIRFREIGHT REPORTING
// 12/12/95  JCARL1    Added Europe to Airfreight Notification
// 03/18/96  JLIBER    Modified Europe file spec from:
//                        'PA.F2185.EURO.EXCEL'  to
//                        'PA.F2181.EURO.EXCEL'.
// 
// 05/02/97  WROBIN    ADDED PHIL TO AIRFREIGHT REPORTING
// 
// Num     Date     ID     Desc
// ------- -------- ------ ---------------------------------
// Y2KFIX  01/07/98 CSAWKI MODIFICATIONS MADE TO: PA0XM001,
// PA903   09/22/98 CGANAP REFORMAT PARAMETER RECS OA#'S TYPE
//                         CHANGE FROM BINARY TO CHARACTER
// PA9999  07/12/99 WROBIN Disable On demand af requests,
//                         modified map and pa0x990.
// PA9999  10/31/00 GREDDY Execute a new job PA2162 on demand
//                         based on PO-ID entered on screen.
// PA9999  11/03/00 GREDDY Fixed table pa0xt19 to ensure parm
//                         pickup.
// PA9999  02/19/01 GREDDY Create option to execute program
//                         PA2220 to create DA NA report.
// *********************
Program PA0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB9REC FB9REC; // record
  PA0XW01 PA0XW01; // record
  PA1REC PA1REC; // record
  PA5REC PA5REC; // record
  PAWREC PAWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PA0XT01; // table
  use PA0XT02; // table
  use PA0XT03; // table
  use PA0XT04 {deleteAfterUse = yes}; // table
  use PA0XT05 {deleteAfterUse = yes}; // table
  use PA0XT06 {deleteAfterUse = yes}; // table
  use PA0XT07 {deleteAfterUse = yes}; // table
  use PA0XT08 {deleteAfterUse = yes}; // table
  use PA0XT11 {deleteAfterUse = yes}; // table
  use PA0XT12 {deleteAfterUse = yes}; // table
  use PA0XT13 {deleteAfterUse = yes}; // table
  use PA0XT14 {deleteAfterUse = yes}; // table
  use PA0XT15 {deleteAfterUse = yes}; // table
  use PA0XT16 {deleteAfterUse = yes}; // table
  use PA0XT17 {deleteAfterUse = yes}; // table
  use PA0XT18 {deleteAfterUse = yes}; // table
  use PA0XT19 {deleteAfterUse = yes}; // table
  use PA0XT21 {deleteAfterUse = yes}; // table
  use PA0XM.PA0XM001,  // forms
      PA0XM.PA0XM002,
      PA0XM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the REPORT SUBMISSION PROCESS.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* Initialize POPUP MAP*/
    set PA0XM001 initial; /* initialise APPLICATION MAP*/
    set PA0XM002 initial; /* initialise APPLICATION MAP*/

    set PA1REC empty; /* RECORD USED TO ACCESS O/A HEADER DB.*/
    set SQLCA empty; /* DISPLAY MAP ONE*/
    set TA1REC empty; /* USED TO CALL ERROR ROUTINE*/
    set TA6REC empty; /* USED TO CALL JCL SUBMISSION*/
    set PA0XW01 empty; /* APPLICATION WORKING STORAGE*/

    PA0XW01.PA0XW-PA2171-SUBMITTED = "N"; /* INTIALIZE FLAG*/

    if (PAWREC.PAWOANBR > 0)
      PA0XM002.PA1OANBR = PAWREC.PAWOANBR; /* SET UP PASSED O/A*/
    end

    TA6REC.TA6SUBSW = "I";

    goto PA0X001; /* Converse Footwear Menu*/


    PA0X001: PA0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process.*/
     /* ------------------------------------------------------------*/

    goto PA0X001; /* Converse main process*/


  end // end main
end // end PA0X

// E-MAIL AIR FREIGHTS
Function PA0X-00101()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* Also determine which region the user is in so that the*/
   /* correct jcl is submitted.*/
   /* ------------------------------------------------------------*/

  if (PA0XW01.PA0XW-PA2171-SUBMITTED == "N")

    PA0XW01.PA0XW-PA2171-SUBMITTED = "Y";

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      PA0X-00102(); /* format production jcl*/
    else
      PA0X-00103(); /* format test jcl*/
    end

    return;

  end

   /* IF THE PA2171 JOB TO EMAIL THE AIR FREIGHT O/AS HAS ALREADY BEEN*/
   /* SUBMITTED, DON'T ALLOW IT TO BE SUBMITTED AGAIN DURING THE SAME*/
   /* EXECUTION OF PA0X.  TO SUBMIT PA2171 A SECOND TIME, THE USER MUST*/
   /* EXIT OUT OF PA0X AND COME BACK IN.  THIS IS TO PREVENT PA2171*/
   /* FROM ACCIDENTALLY BEING SUBMITTED TWICE.*/

  converseLib.validationFailed(334);
  set PA0XM001.PA0XMSEL[8] cursor, bold;


end // end PA0X-00101

// PROD JCL - E-MAIL AF
Function PA0X-00102()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L - E-MAIL AIR FREIGHTS*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT08.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT08.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT08.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[8] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "002"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[8] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X-00102

// TEST JCL - E-MAIL AF
Function PA0X-00103()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L - E-MAIL AIR FREIGHTS*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT18.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT18.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT18.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[8] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "034"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[8] = "C"; /* indicate cancel requested*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X-00103

// FORMAT PARM CARD FOR PC1111
Function PA0X-075()
   /* ------------------------------------------------------------*/
   /* FORMAT THE PARM CARD.*/
   /* ------------------------------------------------------------*/

   /* WHEN PC1111 IS SUBMITTED FROM PA0X, ALL O/AS WITH STATUS '20'*/
   /* SHOULD BE PROCESSED.  IN THIS CASE THE SINGLE O/A PARM IS SET*/
   /* TO ZEROES.*/

  PA0XW01.PA0XW-PC1111-DAY = "DAY";
  PA0XW01.PA0XW-PC1111-LOCK = " ";
  PA0XW01.PA0XW-PC1111-UPDATE = "UPDATE";
   /* PA903 : CHANGE THE FORMAT OF PA0X-PC1111-SINGLE-OA TO CHAR*/
  PA0XW01.PA0XW-PC1111-SINGLE-OA = "000000000";

  TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XW-PC1111-PARM;
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

end // end PA0X-075

// Main process to display a map
Function PA0X001()
   /* -----------------------------------------------------------*/
   /* THE FOLLOWING IS THE SEQUENCE WHICH REPORT REQUESTS WILL*/
   /* BE PROCESSED.*/
   /* -----------------------------------------------------------*/

  XPPA020(); /* GET CURRENT BUY MONTH*/

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PA0XW01.PA0XWSWX != "Y" /* EXIT not requested*/
   && COMMAREA.CAMSG == " ")  /* and process not cancelled*/

    /* ---------------------------------------------------*/
     /* Call subroutine TA0230 to find which environment*/
    /* the program is executing in, production or*/
    /* development.*/
    /* ---------------------------------------------------*/
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA3REC.TA3RTNCD == 0)          /* good return code*/
    else
      converseLib.validationFailed(8); /* error encountered with print request*/
      exit stack;
    end

    if (PA0XM001.PA0XMSEL[1] == "S" /* DISTRIBUTION DEFAULTS*/
     || TA6REC.TA6SUBSW == "I")    

      PA0X010(); /* Specify output destination*/

    end

    if (PA0XM001.PA0XMSEL[2] == "S") /* MANAGEMENT REPORT*/

      PA0X030(); /* Specify output destination*/

    end

    if (PA0XM001.PA0XMSEL[3] == "S") /* FACTORY REQUEST*/

      PA0X040();

    end

    if (PA0XM001.PA0XMSEL[4] == "S") /* O/A AUDIT REPORT*/

      PA0X050();

    end

    if (PA0XM001.PA0XMSEL[5] == "S") /* PRE-ADVICE REPORT*/

      PA0X060();

    end

    if (PA0XM001.PA0XMSEL[6] == "S") /* PC111D WITH STATUS REPORTS*/

      PA0X070();

    end

                                  /* IF PA0XM001.PA0XMSEL(7) EQ 'S';*/
                                   /* /* PC111D WITHOUT STATUS REPORTS*/
     /* ;*/
     /* PERFORM PA0X090;*/
     /* ;*/
   /* END;*/

    if (PA0XM001.PA0XMSEL[7] == "S") /* MANAGMENT VERSION OF FCTY DOC*/

      PA0X035();

    end

    if (PA0XM001.PA0XMSEL[8] == "S") /* E-MAIL AIR FREIGHTS*/

      PA0X-00101();

    end

    if (PA0XM001.PA0XMSEL[9] == "S") /* Run Qty change report*/
      if (PA0XM001.PA0XMPOI > 0)
        PA0X059();
      else
        converseLib.validationFailed(357);
        set PA0XM001.PA0XMPOI cursor, bold; /* PO-ID required*/
      end
    end
    if (PA0XM001.PA0XMSEL[10] == "S") /* Run Qty change report*/
      if (PA0XM001.PA0XMPOD > 0)
        PA0X059();
      else
        converseLib.validationFailed(357);
        set PA0XM001.PA0XMPOD cursor, bold; /* PO-ID required*/
      end
    end

  end

  PA0XW01.PA0XWSWX = "N"; /* Reset exit requested switch*/

  PA0X990(); /* REPORT REQUEST MENU*/
end // end PA0X001

// OVERRIDE DEFAULT DESTINATION
Function PA0X010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (TA6REC.TA6RTNCD == "0") /* Normal return*/

      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/

        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        PA0XM001.PA0XMSEL[1] = "*"; /* Indicate function completed*/
        set PA0XM001.PA0XMSEL[1] skip;

      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/

      PA0XM001.PA0XMSEL[1] = "C"; /* Indicate function cancelled*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PA0XM001.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/



end // end PA0X010

// PROCESS MANAGEMENT REPORT
Function PA0X030()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* Also determine which region the user is in so that the*/
   /* correct jcl is submitted.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X033(); /* format production jcl*/
  else
    PA0X034(); /* format test jcl*/
  end

end // end PA0X030

// PROCESS VALID REQUEST
Function PA0X033()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT01.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT01.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT01.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[2] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[2] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X033

// PROCESS VALID REQUEST
Function PA0X034()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT11.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT11.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT11.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[2] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "034"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[2] = "C"; /* indicate cancel requested*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X034

// PROCESS MANAGEMENT REPORT
Function PA0X035()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* Also determine which region the user is in so that the*/
   /* correct jcl is submitted.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X036(); /* format production jcl*/
  else
    PA0X037(); /* format test jcl*/
  end

end // end PA0X035

// PROCESS VALID REQUEST
Function PA0X036()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L - MANAGMENT VERSION OF FCTY DOC*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT02.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT02.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT02.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[7] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "033"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[7] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X036

// PROCESS VALID REQUEST
Function PA0X037()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L - MANAGMENT VERSION OF FACTORY DOC.*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT12.TARJCL[PA0XWIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = PA0XT12.TARTYPE[PA0XWIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT12.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[7] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "034"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[7] = "C"; /* indicate cancel requested*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X037

// PROCESS FCTY REQUEST REPORT
Function PA0X040()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* Also, determine which reion the user is in so that the*/
   /* correct JCL is submitted.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X043(); /* format production jcl*/
  else
    PA0X044(); /* format test jcl*/
  end


end // end PA0X040

// PROCESS VALID REQUEST
Function PA0X043()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT03.TARJCL[PA0XWIXT]; /* JCL*/
    if (PA0XT03.TARTYPE[PA0XWIXT] == "P")
      TA6REC.TARTYPE[TA6INDEX] = " ";
    else
      TA6REC.TARTYPE[TA6INDEX] = PA0XT03.TARTYPE[PA0XWIXT]; /* Type*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT03.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[3] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "043"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[3] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X043

// PROCESS VALID REQUEST
Function PA0X044()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = PA0XT13.TARJCL[PA0XWIXT]; /* JCL*/
    if (PA0XT13.TARTYPE[PA0XWIXT] == "P")
      TA6REC.TARTYPE[TA6INDEX] = " ";
    else
      TA6REC.TARTYPE[TA6INDEX] = PA0XT13.TARTYPE[PA0XWIXT]; /* Type*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT13.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[3] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "044"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[3] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X044

// PROCESS PRE-ADVICE REPORT
Function PA0X050()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0X051(); /* Format and display the map*/

  PA0X052(); /* Check attention identifier*/

  PA0X053(); /* Reset fields to normal intensity*/

  PA0X054(); /* Verify the data that was entered*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X055(); /* format production jcl*/
  else
    PA0X058(); /* format test jcl*/
  end


end // end PA0X050

// FORMAT AND DISPLAY THE MAP
Function PA0X051()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PA0XM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0XM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PA0XM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PA0XM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PA0XM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PA0XM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PAWREC.XXXMSGNO != 0) /* Message to display*/

      if (PAWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PAWREC.XXXMSGNO);
      end /* Message number*/
    else
      PA0XM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end


    set PA0XM002 alarm; /* Indicate sound alarm*/

  end

  PAWREC.XXXMSGNO = 0;
  COMMAREA.CAMSG = " ";
  PA0XM002.PA0XMTTL = "   O/A AUDIT REPORT     ";

  set PA0XM002.PA1OANBR cursor;
  set PA0XM002.PA0XMLIT[2] skip, invisible;
  set PA0XM002.PA0XMLIT[3] skip, invisible;
  set PA0XM002.FB8BUYDT skip, invisible;
  set PA0XM002.PA0XMSDT skip, invisible;
  converse PA0XM002 ;
  PA0XM002.XXXMODID = " ";
  PA0XM002.VAGen_EZEMSG = " ";
  set PA0XM002.PA0XMLIT[1] initialAttributes;
  set PA0XM002.PA0XMLIT[2] initialAttributes;
  set PA0XM002.PA0XMLIT[3] initialAttributes;
  set PA0XM002.PA1OANBR initialAttributes;
  set PA0XM002.FB8BUYDT initialAttributes;
  set PA0XM002.PA0XMSDT initialAttributes;
end // end PA0X051

// CHECK ATTENTION IDENTITIERS
Function PA0X052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PA0XM001.PA0XMSEL[4] = "C"; /* Indicate selection cancelled*/

    set PA0XM002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PA0XW01.PA0XWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PA0XM001.XXXMODID = "042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0X052

// RESET HIGHLIGHTED FIELDS
Function PA0X053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0XM002.PA1OANBR initialAttributes; /* Initialize OA NUMBER*/

end // end PA0X053

// VERFY ENTERED DATA
Function PA0X054()
   /* ------------------------------------------------------*/
    /* CHECK O/A NUMBER FOR EXISTANCE*/
   /* ------------------------------------------------------*/

  if (PA0XM002.PA1OANBR == 0)
    converseLib.validationFailed(40);
    exit stack;
  end

  set PA1REC empty;

  PA1REC.PA1OANBR = PA0XM002.PA1OANBR;

   /* -------------------------------------------------*/
    /* FETCH SINGLE O/A HEADER*/
   /* -------------------------------------------------*/


  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        PA0XM001.XXXMODID = "064";
        PA0XM002.XXXMODID = "064";
        converseLib.validationFailed(50);
        set PA0XM002.PA1OANBR cursor, bold;
        exit stack;
      end
    end

    PA0XM001.XXXMODID = "064";
    PA0XM002.XXXMODID = "064";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0X064 GET O/A HEADER        ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
    TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0X054

// PROCESS VALID REQUEST
Function PA0X055()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Subroutine work area*/

  PA0XW01.PA0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0XW01.PA0XWIXT > 0) /* Until end of table*/

    if (PA0XT04.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0XT04.TARTYPE[PA0XWIXT]; /* Type*/

      PA0X056(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT04.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT04.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT04.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      PA0XW01.PA0XWIXT = 0; /* Indicate end of table*/

    else

      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Increment table index*/

    end

  end


  PA0X057(); /* Submit the JCL*/

end // end PA0X055

// FORMAT JCL PARM CARD
Function PA0X056()

   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/

  PA0XW01.PA0XWCMT = "//*"; /* indicate a comment jcl card*/

  PA0XWOAJ = PA0XM002.PA1OANBR;
  TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

end // end PA0X056

// SUBMIT THE JCL
Function PA0X057()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[4] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "057"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[4] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/

end // end PA0X057

// PROCESS VALID REQUEST
Function PA0X058()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Subroutine work area*/

  PA0XW01.PA0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0XW01.PA0XWIXT > 0) /* Until end of table*/

    if (PA0XT14.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0XT14.TARTYPE[PA0XWIXT]; /* Type*/

      PA0X056(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT14.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT14.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT14.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      PA0XW01.PA0XWIXT = 0; /* Indicate end of table*/

    else

      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Increment table index*/

    end

  end


  PA0X057(); /* Submit the JCL*/

end // end PA0X058

// PROCESS OA OR DA,NA REPORT
Function PA0X059()
   /* ---------------------------------------------------------*/
   /* Validate the entered PO-ID and submit appropriate Job*/
   /* ---------------------------------------------------------*/

  PA0XW01.PA0XW-PA2160-FL = "N";
  PA0XW01.PA0XW-PA2220-FL = "N";
  PA0XW01.PA0XWPO1 = PA0XM001.PA0XMPOI;
  PA0XW01.PA0XWPO2 = PA0XM001.PA0XMPOD;

  if ((PA0XM001.PA0XMPOI > 0
   && PA0XM001.PA0XMSEL[9] == "S"))
    PA0XW01.PA0XW-PA2160-FL = "Y";
    PA0XW01.PA0XWPOI = PA0XM001.PA0XMPOI;
    PA0XS01();
    if (converseVar.validationMsgNum == 357)
      return;
    end
  end

  if ((PA0XM001.PA0XMPOD > 0
   && PA0XM001.PA0XMSEL[10] == "S"))
    PA0XW01.PA0XW-PA2220-FL = "Y";
    PA0XW01.PA0XWPOI = PA0XM001.PA0XMPOD;
    PA0XS01();
    if (converseVar.validationMsgNum == 357)
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* Also, determine which region the user is in so that the*/
   /* correct JCL is submitted.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X05901(); /* format production jcl*/
  else
    PA0X05902(); /* format test jcl*/
  end


end // end PA0X059

// PROCESS VALID REQUEST
Function PA0X05901()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

  PA0XW01.PA0XW-COND-CNT = 0;
  PA0XW01.PA0XW-PARM-CNT = 0;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (PA0XT19.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      PA0XW01.PA0XWTYP = "P"; /* TYPE*/
      PA0XW01.PA0XW-PARM-CNT = PA0XW01.PA0XW-PARM-CNT + 1;
      if (PA0XW01.PA0XW-PARM-CNT == 1)
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPO1; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT19.TARTYPE[PA0XWIXT]; /* Type*/
      end

      if (PA0XW01.PA0XW-PARM-CNT == 2)
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPO2; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT19.TARTYPE[PA0XWIXT]; /* Type*/
      end
      TA6REC.TARTYPE[TA6INDEX] = PA0XW01.PA0XWTYP;

    else
      if (PA0XT19.TARTYPE[PA0XWIXT] == "C")

        PA0XW01.PA0XW-COND-CNT = PA0XW01.PA0XW-COND-CNT + 1;
        PA0XW01.PA0XWTYP = "C"; /* TYPE*/
        if (PA0XW01.PA0XW-COND-CNT == 1)
          PA0XW01.PA0XWJCC = PA0XT19.TARJCL[PA0XWIXT]; /* JCL*/
          if (PA0XW01.PA0XW-PA2160-FL == "Y")
            PA0XW01.PA0XWCLG = "GT"; /* EXECUTE PA2160*/
          end
        end

        if (PA0XW01.PA0XW-COND-CNT == 2)
          PA0XW01.PA0XWJCC = PA0XT19.TARJCL[PA0XWIXT]; /* JCL*/
          if (PA0XW01.PA0XW-PA2220-FL == "Y")
            PA0XW01.PA0XWCLG = "GT"; /* EXECUTE PA2220*/
          end
        end
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWJCC;
        TA6REC.TARTYPE[TA6INDEX] = PA0XW01.PA0XWTYP;

      else
        TA6REC.TARJCL[TA6INDEX] = PA0XT19.TARJCL[PA0XWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT19.TARTYPE[PA0XWIXT]; /* Type*/
      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* -------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT19.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    if (PA0XM001.PA0XMPOI > 0)
      PA0XM001.PA0XMSEL[9] = "*"; /* Indicate function completed*/
    end

    if (PA0XM001.PA0XMPOD > 0)
      PA0XM001.PA0XMSEL[10] = "*"; /* Indicate function completed*/
    end

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "023"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    if (PA0XM001.PA0XMPOI > 0)
      PA0XM001.PA0XMSEL[9] = "C"; /* Indicate function completed*/
    end

    if (PA0XM001.PA0XMPOD > 0)
      PA0XM001.PA0XMSEL[10] = "C"; /* Indicate function completed*/
    end

  end

  exit stack; /* Exit to display map*/


end // end PA0X05901

// PROCESS VALID REQUEST
Function PA0X05902()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  PA0XW01.PA0XW-COND-CNT = 0;
  PA0XW01.PA0XW-PARM-CNT = 0;

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    if (PA0XT21.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      PA0XW01.PA0XWTYP = "P"; /* TYPE*/
      PA0XW01.PA0XW-PARM-CNT = PA0XW01.PA0XW-PARM-CNT + 1;
      if (PA0XW01.PA0XW-PARM-CNT == 1)
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPO1; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT21.TARTYPE[PA0XWIXT]; /* Type*/
      end

      if (PA0XW01.PA0XW-PARM-CNT == 2)
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPO2; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT21.TARTYPE[PA0XWIXT]; /* Type*/
      end
      TA6REC.TARTYPE[TA6INDEX] = PA0XW01.PA0XWTYP;

    else
      if (PA0XT21.TARTYPE[PA0XWIXT] == "C")

        PA0XW01.PA0XW-COND-CNT = PA0XW01.PA0XW-COND-CNT + 1;
        PA0XW01.PA0XWTYP = "C"; /* TYPE*/
        if (PA0XW01.PA0XW-COND-CNT == 1)
          PA0XW01.PA0XWJCC = PA0XT21.TARJCL[PA0XWIXT]; /* JCL*/
          if (PA0XW01.PA0XW-PA2160-FL == "Y")
            PA0XW01.PA0XWCLG = "GT"; /* EXECUTE PA2160*/
          end
        end

        if (PA0XW01.PA0XW-COND-CNT == 2)
          PA0XW01.PA0XWJCC = PA0XT21.TARJCL[PA0XWIXT]; /* JCL*/
          if (PA0XW01.PA0XW-PA2220-FL == "Y")
            PA0XW01.PA0XWCLG = "GT"; /* EXECUTE PA2220*/
          end
        end
        TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWJCC;
        TA6REC.TARTYPE[TA6INDEX] = PA0XW01.PA0XWTYP;

      else
        TA6REC.TARJCL[TA6INDEX] = PA0XT21.TARJCL[PA0XWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = PA0XT21.TARTYPE[PA0XWIXT]; /* Type*/

      end
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT21.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    if (PA0XM001.PA0XMPOI > 0)
      PA0XM001.PA0XMSEL[9] = "*"; /* Indicate function completed*/
    end

    if (PA0XM001.PA0XMPOD > 0)
      PA0XM001.PA0XMSEL[10] = "*"; /* Indicate function completed*/
    end

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "024"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    if (PA0XM001.PA0XMPOI > 0)
      PA0XM001.PA0XMSEL[9] = "C"; /* Indicate function completed*/
    end

    if (PA0XM001.PA0XMPOD > 0)
      PA0XM001.PA0XMSEL[10] = "C"; /* Indicate function completed*/
    end

  end

  exit stack; /* Exit to display map*/


end // end PA0X05902

// PROCESS PRE-ADVICE REPORT
Function PA0X060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0X061(); /* Format and display the map*/

  PA0X062(); /* Check attention identifier*/

  PA0X063(); /* Reset fields to normal intensity*/

  PA0X064(); /* Verify the data that was entered*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X065(); /* format production jcl*/
  else
    PA0X068(); /* format test jcl*/
  end


end // end PA0X060

// FORMAT AND DISPLAY THE MAP
Function PA0X061()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  PA0XM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0XM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  PA0XM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  PA0XM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  PA0XM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  PA0XM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PAWREC.XXXMSGNO != 0) /* Message to display*/

      if (PAWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PAWREC.XXXMSGNO);
      end /* Message number*/
    else
      PA0XM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end


    set PA0XM002 alarm; /* Indicate sound alarm*/

  end

  PAWREC.XXXMSGNO = 0;
  COMMAREA.CAMSG = " ";
  PA0XM002.PA0XMTTL = "   PRE-ADVICE REPORT    ";

  set PA0XM002.FB8BUYDT cursor;
  set PA0XM002.PA0XMLIT[1] skip, invisible;
  set PA0XM002.PA0XMLIT[3] skip, invisible;
  set PA0XM002.PA1OANBR skip, invisible;
  set PA0XM002.PA0XMSDT skip, invisible;
  converse PA0XM002 ;
  PA0XM002.XXXMODID = " ";
  PA0XM002.VAGen_EZEMSG = " ";
  set PA0XM002.PA0XMLIT[1] initialAttributes;
  set PA0XM002.PA0XMLIT[2] initialAttributes;
  set PA0XM002.PA0XMLIT[3] initialAttributes;
  set PA0XM002.PA1OANBR initialAttributes;
  set PA0XM002.FB8BUYDT initialAttributes;
  set PA0XM002.PA0XMSDT initialAttributes;
end // end PA0X061

// CHECK ATTENTION IDENTITIERS
Function PA0X062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PA0XM001.PA0XMSEL[5] = "C"; /* Indicate selection cancelled*/

    set PA0XM002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    PA0XW01.PA0XWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PA0XM001.XXXMODID = "042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0X062

// RESET HIGHLIGHTED FIELDS
Function PA0X063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0XM002.PA1OANBR initialAttributes; /* Initialize OA NUMBER*/

end // end PA0X063

// VERFY ENTERED DATA
Function PA0X064()
   /* ------------------------------------------------------*/
    /* CHECK O/A NUMBER FOR EXISTANCE*/
   /* ------------------------------------------------------*/

  if (PA0XM002.FB8BUYDT == 0)
    converseLib.validationFailed(22);
    set PA0XM002.FB8BUYDT cursor, bold;
    exit stack;
  end

end // end PA0X064

// PROCESS VALID REQUEST
Function PA0X065()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Subroutine work area*/

  PA0XW01.PA0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0XW01.PA0XWIXT > 0) /* Until end of table*/

    if (PA0XT05.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0XT05.TARTYPE[PA0XWIXT]; /* Type*/

      PA0X066(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT05.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT05.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT05.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      PA0XW01.PA0XWIXT = 0; /* Indicate end of table*/

    else

      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Increment table index*/

    end

  end


  PA0X067(); /* Submit the JCL*/

end // end PA0X065

// FORMAT JCL PARM CARD
Function PA0X066()

   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/

  PA0XW01.PA0XWCMT = "//*"; /* indicate a comment jcl card*/

  PA0XWOAJ = PA0XM002.FB8BUYDT;
  TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = PA0XW01.PA0XWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

end // end PA0X066

// SUBMIT THE JCL
Function PA0X067()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[5] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/
    set PA0XM002.PA0XMLIT[1] skip, invisible;
    set PA0XM002.PA1OANBR skip, invisible;
    set PA0XM002.PA0XMLIT[2] skip, invisible;
    set PA0XM002.FB8BUYDT skip, invisible;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "067"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[5] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/

end // end PA0X067

// PROCESS VALID REQUEST
Function PA0X068()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Subroutine work area*/

  PA0XW01.PA0XWIXT = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0XW01.PA0XWIXT > 0) /* Until end of table*/

    if (PA0XT15.TARTYPE[PA0XWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0XT15.TARTYPE[PA0XWIXT]; /* Type*/

      PA0X066(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT15.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT15.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT15.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      PA0XW01.PA0XWIXT = 0; /* Indicate end of table*/

    else

      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Increment table index*/

    end

  end


  PA0X067(); /* Submit the JCL*/

end // end PA0X068

// PROCESS P.O. UPDATE REQUEST
Function PA0X070()
   /* ------------------------------------------------------------*/
   /* Obtain and/or dispaly the output destination for the user.*/
   /* Also deterine which region the user is in so that the*/
   /* correct JCl is submitted.*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PA0X073(); /* format production jcl*/
  else
    PA0X074(); /* format test jcl*/
  end


end // end PA0X070

// PROCESS VALID REQUEST
Function PA0X073()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PA0XT06.TARTYPE[PA0XWIXT] == "P")
       /* FORMAT PARM CARD FOR PC1111*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT06.TARTYPE[PA0XWIXT];
      PA0X-075(); /* FORMAT PARM CARD*/
    else

       /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
       /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT06.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT06.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT06.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[6] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "073"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[6] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X073

// PROCESS VALID REQUEST
Function PA0X074()
   /* ------------------------------------------------------------*/
   /* T E S T   J C L*/
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  PA0XW01.PA0XWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PA0XT16.TARTYPE[PA0XWIXT] == "P")
       /* FORMAT PARM CARD*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT16.TARTYPE[PA0XWIXT];
      PA0X-075(); /* FORMAT PARM CARD*/
    else

       /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
       /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0XT16.TARJCL[PA0XWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0XT16.TARTYPE[PA0XWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0XT16.TARJCL[PA0XWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      PA0XW01.PA0XWIXT = PA0XW01.PA0XWIXT + 1; /* Input table index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PA0XM001.PA0XMSEL[6] = "*"; /* Indicate function completed*/

    set PA0XM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    PAWREC.XXXMODID = "073"; /* Module identification*/
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  if (TA6REC.TA6RTNCD == "1") /* print cancelled by user - pa2*/
    PA0XM001.PA0XMSEL[6] = "C"; /* indicate print cancelled*/
  end

  exit stack; /* Exit to display map*/


end // end PA0X074

// PRINT REQUEST MAP
Function PA0X990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[1] != "Y")
    set PA0XM001.PA0XMSEL[2] skip, invisible;
  end

  if (COMMAREA.CACLVL[2] != "Y")
    set PA0XM001.PA0XMSEL[3] skip, invisible;
  end

  if (COMMAREA.CACLVL[3] != "Y")
    set PA0XM001.PA0XMSEL[4] skip, invisible;
  end

  if (COMMAREA.CACLVL[4] != "Y")
    set PA0XM001.PA0XMSEL[5] skip, invisible;
  end

  if (COMMAREA.CACLVL[5] != "Y")
    set PA0XM001.PA0XMSEL[6] skip, invisible;
  end

  if (COMMAREA.CACLVL[6] != "Y")
    set PA0XM001.PA0XMSEL[7] skip, invisible;
  end

  set PA0XM001.PA0XMSEL[8] skip, invisible;

  PA0X991(); /* Format and display the map*/

  PA0X992(); /* Check attention identifier*/

  PA0X993(); /* Reset fields to normal intensity*/

  PA0X994(); /* Verify the data that was entered*/

  PA0X995(); /* Process valid input request*/


end // end PA0X990

// FORMAT AND DISPLAY MAP
Function PA0X991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  PA0XM001.FB8BUYDT = PAWREC.PAWBUYYM; /* CURRENT BUY DT*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PA0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PA0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PAWREC.XXXMSGNO != 0) /* Message to display*/

      if (PAWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PAWREC.XXXMSGNO);
      end /* Message number*/
    else
      PA0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PA0XM001.XXXMODID = PAWREC.XXXMODID; /* Module identification*/

    set PA0XM001 alarm; /* Indicate sound alarm*/

  end

  PAWREC.XXXMSGNO = 0;
  COMMAREA.CAMSG = " ";
  converse PA0XM001 ;
  PA0XM001.XXXMODID = " ";
  PA0XM001.VAGen_EZEMSG = " ";
end // end PA0X991

// CHECK ATTENTION IDENTIFIERS
Function PA0X992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PA0XM001 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PA0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = PA0XM001.CATOAP;

      XSPAS01(); /* Exit to another application*/

      set PA0XM001.CATOAP cursor, bold; /* Highlight*/

    else

      PAWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf5)
      COMMAREA.CATOAP = "FY0M";
    end

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PA0XM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* TO application*/
    end

    XSPAS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    PAWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end


  end


end // end PA0X992

// RESET HIGHLIGHTED FIELDS
Function PA0X993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PA0XW01.PA0XWIXM = 1; /* Initialize index*/

  while (PA0XW01.PA0XWIXM <= 7) /* Until all lines are reset*/

    set PA0XM001.PA0XMSEL[PA0XWIXM] initialAttributes; /* Reset select field*/

    PA0XW01.PA0XWIXM = PA0XW01.PA0XWIXM + 1; /* Increment line index*/

  end

  set PA0XM001.CATOAP initialAttributes; /* TO application*/
  set PA0XM001.CAITEM initialAttributes; /* Application data*/


end // end PA0X993

// VERIFY DATA WAS ENTERED
Function PA0X994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PAWREC.XXXMODID = "994"; /* Module identification*/
    set PA0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  PA0XW01.PA0XWIXM = PA0XW01.PA0XWIXL; /* Initialize line index*/

  while (PA0XW01.PA0XWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (PA0XM001.PA0XMSEL[PA0XWIXM] != "*" 
     && PA0XM001.PA0XMSEL[PA0XWIXM] != " " /* Line was selected*/
     && PA0XM001.PA0XMSEL[PA0XWIXM] != "S") /* and not with an "S"*/

      PAWREC.XXXMODID = "994"; /* Module identification*/
      set PA0XM001.PA0XMSEL[PA0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    PA0XW01.PA0XWIXM = PA0XW01.PA0XWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end PA0X994

// PROCESS VALID REQUEST
Function PA0X995()
   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (PA0XM001.PA0XMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end PA0X995

// INSERT PARM FOR PA0X050
Function PA0XS01()
   /* ------------------------------------------------------------*/
   /* Validate the value entered for PO-ID on the map.*/
   /* ------------------------------------------------------------*/

  if (PA0XW01.PA0XWPCC < 19) /* Validate century of PO-ID*/
    converseLib.validationFailed(357); /* Valid century required*/
    return;
  end

  if (PA0XW01.PA0XWPYY < 00) /* Validate Year of PO-ID*/
    converseLib.validationFailed(357); /* Valid year required*/
    return;
  end

  if (PA0XW01.PA0XWPM1 < 00 /* Validate Production month*/
   || PA0XW01.PA0XWPM1 > 12)
    converseLib.validationFailed(357); /* Valid Prod month reqd*/
    return;
  end

  if (PA0XW01.PA0XWPM2 < 00 /* Validate Production month*/
   || PA0XW01.PA0XWPM2 > 12)
    converseLib.validationFailed(357); /* Valid Buy month reqd*/
    return;
  end

end // end PA0XS01

Record PA0XW01 type basicRecord
  10 PA0XWSWX PA0XWSWX ; 
  10 PA0XWIXT PA0XWIXT ; 
  10 PA0XWIXM PA0XWIXM ; 
  10 PA0XWIXL PA0XWIXL ; 
  10 PA0XWPRR PA0XWPRR ; 
    15 PA0XWCMT PA0XWCMT ; 
    15 PA0XWPRM PA0XWPRM ; 
      20 PA0XWOAJ PA0XWOAJ ; 
      20 * char(17) ; 
  10 PA0XWJCC PA0XWJCC ; 
    15 PA0XWCN1 PA0XWCN1 ; 
    15 PA0XWCLG PA0XWCLG ; 
    15 PA0XWCN3 PA0XWCN3 ; 
    15 * char(57) ; 
  10 PA0XWPO1 PA0XWPO1 ; 
  10 PA0XWPO2 PA0XWPO2 ; 
  10 PA0XWPOI PA0XWPOI ; 
    15 PA0XWPCC PA0XWPCC ; 
    15 PA0XWPYY PA0XWPYY ; 
    15 PA0XWPM1 PA0XWPM1 ; 
    15 PA0XWPM2 PA0XWPM2 ; 
  10 PA0XWSSS PA0XWSSS ; 
    15 PA0XWSSM PA0XWSSM ; 
    15 PA0XWSSD PA0XWSSD ; 
    15 PA0XWSSY PA0XWSSY ; 
  10 PA0XWPSS PA0XWPSS ; 
    15 PA0XWPSC PA0XWPSC ; 
    15 PA0XWPSY PA0XWPSY ; 
    15 PA0XWPSM PA0XWPSM ; 
    15 PA0XWPSD PA0XWPSD ; 
  10 PA0XW-PC1111-PARM PA0XW-PC1111-PARM ; 
    15 PA0XW-PC1111-DAY PA0XW-PC1111-DAY ; 
    15 PA0XW-PC1111-F1 char(1) ; 
    15 PA0XW-PC1111-LOCK PA0XW-PC1111-LOCK ; 
    15 PA0XW-PC1111-F2 char(1) ; 
    15 PA0XW-PC1111-UPDATE PA0XW-PC1111-UPDATE ; 
    15 PA0XW-PC1111-F3 char(1) ; 
    15 PA0XW-PC1111-SINGLE-OA PA0XW-PC1111-SINGLE-OA ; 
  10 PA0XW-PA2171-SUBMITTED PA0XW-PA2171-SUBMITTED ; 
  10 PA0XW-PA2160-FL PA0XW-PA2160-FL ; 
  10 PA0XW-PA2220-FL PA0XW-PA2220-FL ; 
  10 PA0XW-PARM-CNT PA0XW-PARM-CNT ; 
  10 PA0XW-COND-CNT PA0XW-COND-CNT ; 
  10 PA0XWTYP PA0XWTYP ; 
end // end PA0XW01

// COUNT CONDITION STATEMENTS.
DataItem PA0XW-COND-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PROGRAM PA2160 INVOKED
DataItem PA0XW-PA2160-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XW-PA2171-SUBMITTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PROGRAM PA2220 INVOKED
DataItem PA0XW-PA2220-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// COUNT PARM STATEMENTS.
DataItem PA0XW-PARM-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0XW-PC1111-DAY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XW-PC1111-LOCK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XW-PC1111-PARM char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PA903: REFORMAT OA#-BIN TO CHA
DataItem PA0XW-PC1111-SINGLE-OA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XW-PC1111-UPDATE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LOGICAL OPERATOR
DataItem PA0XWCLG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment, value //*
DataItem PA0XWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XWCN1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0XWCN3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX 3
DataItem PA0XWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 2
DataItem PA0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 1
DataItem PA0XWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CONDITION STATEMENT
DataItem PA0XWJCC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PA_ORD_ADJ_NBR
DataItem PA0XWOAJ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO-ID-MO-RNG-CC
DataItem PA0XWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG-M1 PROD MONTH
DataItem PA0XWPM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG-M2 BUY MONTH
DataItem PA0XWPM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG
DataItem PA0XWPO1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG
DataItem PA0XWPO2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG
DataItem PA0XWPOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl parameter group level
DataItem PA0XWPRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem PA0XWPRR char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REFORMAT CENTURY
DataItem PA0XWPSC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DAY
DataItem PA0XWPSD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT MONTH
DataItem PA0XWPSM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT DATE
DataItem PA0XWPSS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REFORMAT YEAR
DataItem PA0XWPSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO-ID-MO-RNG-YY
DataItem PA0XWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SPLIT DAY
DataItem PA0XWSSD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SPLIT MONTH
DataItem PA0XWSSM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SPLIT STATUS DATE
DataItem PA0XWSSS num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SPLIT YEAR
DataItem PA0XWSSY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EXIT REQUESTED SWITCH
DataItem PA0XWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// STATEMENT TYPE
DataItem PA0XWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

