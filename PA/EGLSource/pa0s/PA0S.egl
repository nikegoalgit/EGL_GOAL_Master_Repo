package pa0s;
import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPPA001;
import corpcom3.XPPA210;
import corpcom3.XPTA0P;
import corpcom4.XSEXIT;
import corpcom4.XSPAS01;
import corpcom4.XSPG202;
import corpcom4.XSPG301;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XX1;
import corpcom7.XX2;
import corpcom7.XX3;
import corpcom7.XX4;
import corpcom7.ZZZSTM;
import fb.common.FB4REC;
import fb.common.FB4RGPCT;
import fb.common.FB9REC;
import pa.common.*;
import pg.common.PG2REC;
import pg.common.PG3REC;
import pt.common.PT5REC;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARREC;
import xx.common.*;
import xx.common.XWHCD;
import xx.common.ZZZCHGCT;
import xx.common.ZZZSDT;
import xx02.*;
import xx02.XDMCD;
import xx06.*;
import xx06.XWHTBL;
import xx07.*;
import xx07.YESTBL;
import xx07.YETTBL;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=PA0S ****
// THIS APPLICATION IS PART OF THE FOOTWEAR ORDER ADJUSTMENT
// SYSTEM.  THE PURPOSE OF THIS APPLICATION IS TO PROVIDE THE
// USER A MEANS BY WHICH THE RESULTS OF THE BATCH CALCULATION
// PROGRAM CAN BE VIEWDE AND ADJUSTED PRIOR TO THE SPLITTING
// BY FACTORY PERCENTAGES.  THE USER WILL BE PRESENTED WITH
// THE ABILITY TO SELECT ONE OF TWO SCREENS BY WHICH THEY WILL
// BE ABLE TO JUDGE THE RESULTS OF THE OF THE CALC.  SCREEN ONE
// CONTAINS THE THREE REGIONS AND THEIR QUANTITIES, AND SCREEN
// TWO CONTAINS A SUMMARY OF THE CALC OUTPUT AT THE CORPORATE
// LEVEL.  THE USER WILL NOT BE ABLE TO ADJUST ANYTHING ON
// SCREEN TWO, BUT CAN ADJUST DATA ON SCREEN ONE.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/01/90   SCOCHR   Created.
// 10/17/90   MSMIT2   Add call to TA0230 to determine if the
//                     user is in the production or test
//                     region.  This logic allows the correct
//                     JCL to be submitted.
// 03/19/91   MSMIT2   allow read only access with pf15/pf17
//                     when oa status = '15'.
// 04/11/91   MSMIT2   PA#227 - only allow adjustments to
//                     warehouse records that are valid for
//                     the style.
// 04/17/91   MSMIT2   PA#225 - allow read only for the adjust-
//                     ment to the calc for all status codes.
// 06/10/91   MSMIT2   DATABASE CHANGES: PACREC - XPPA210
// 10/10/91   DHALES   DATABASE CHANGES:        - pa0sw01
// 06/29/92   DHALES   fixed division by zero error  pa0s620
// 08/09/92   MSMIT2   fixed division by zero error  pa0s610
// 10/16/92   DFRANC   Fixed check of total adjustment entered,
//                     removed from PA0S700,710 added PA0S630.
// 11/30/92   DFRANC   Changed edit check of adjustments from 6
//                     to the units per case from the product
//                     table DPRODC.VSYCLR01.
// 12/09/92   MSMIT2   PA307 - ADD OPEN O/AS TO BOTTOM LINE.
// 12/22/93   MSMIT2   PA321 - ADD THE 'TOTAL ADJ' FIELD.
// 05/05/93   MSMIT2   PA326 - INCLUDE O/A'S THAT HAVE UPDATED
//                     PO TODAY (STATUS 75) IN THE BOTTOM LINE
//                     FIGURES.
// 05/20/93   PKHAN    PROBLEM FIXED: MAKE IT PICK UP AND
//                     PROCESS ALL SIZES
// 06/04/93   MSMIT2   MAKE FAST PATH OPTION WORK.
// 07/12/93   MSMIT2   XSPAS01 CHANGED.
// 07/13/93   MSMIT2   INCREASE LENGTH OF SIZE FIELDS.
// 08/09/93   MSMIT2   DATABASE CHANGES.
// 11/29/93   MSMIT2   PA0S120 SHOULD NOT USE PG2REC.XDVCD NE
//                     ' ' TO DETERMINE IF VALID SIZE, CHANGE
//                     TO LOOK AT SY-FRNG-GUT-SZ FOR 'F' OR 'G'
// 01/23/95   MSMIT2   MAKE EUROPEAN O/AS INQUIRY ONLY.
// 09/27/96   SKEOBO   ADD WAREHOUSE 70 PROCESSING.
// 05/16/97   WROBIN   CHANGE TO WARNING FOR QTY DIV ERRORS
// 08/03/98   MSEVAL   FIX THE BUG IN ERRONEOUS UPDATION OF
//                     PT_PERIOD_MO IN DPRODA.VBOTLN01 TABLE.
//                     RENAME PA0S500 PROC AS PA0S-500.
// ------- -------- ------ ----------------------------------
// Y2KFIX  01/09/98 CSAWKI MODIFICATIONS MADE TO: PA0SM001,
//                         PA0SM002, PA0SS02, PA0SS03, PA0SS08,
//                         PA0SS09, PA0SW01, PA0S100, PA0S-500,
//                         XSPAS06, XSPAS07, XSPAS08.
// ------- -------- ------ ----------------------------------
// Y2KFIX  02/10/98 CSAWKI MODIFICATIONS MADE: PT5REC TO
//                         MIRROR VFBASM04
// 
// 09/17/99   SKATHI   FIX THE Y2K BUG IN ERRONEOUS UPDATION OF
//                     PT_PERIOD_MO IN DPRODA.VBOTLN01 TABLE.
//                     IN PA0S-500.
// *********************
Program PA0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FB4REC FB4REC; // record
  FB9REC FB9REC; // record
  PA0SW00 PA0SW00; // record
  PA0SW01 PA0SW01; // record
  PA0SW02 PA0SW02; // record
  PA1REC PA1REC; // record
  PA4REC PA4REC; // record
  PA5REC PA5REC; // record
  PACREC PACREC; // record
  PAJREC PAJREC; // record
  PAKREC PAKREC; // record
  PAWREC PAWREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  PT5REC PT5REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarationss
  use PA0ST01; // table
  use PA0ST11 {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YESTBL; // table
  use YETTBL; // table
  use PA0SM.PA0SM001,  // forms
      PA0SM.PA0SM002,
      PA0SM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set PA0SW00 empty;
    set PA0SW01 empty; /* Initialize working storage*/
    set SQLCA empty; /* initialise sql commarea*/
    set TA1REC empty;
    PA0SWRPD = "N";
    PA0SW01.PA0SWMN = "1"; /* DISPLAY MAP ONE*/
    set PA0SM001 initial;
    set PA0SM002 initial;
    PAWREC.CAUSERA = COMMAREA.CAUSERA;

     /* SET THE MAXIMUM NUMBER OF COLUMNS FOR THE SCREEN*/
    PA0SW00.PA0SW-MAX-COLUMNS = 8;

    goto PA0S-001; /* Converse Footwear Menu*/


    PA0S-001: PA0S-001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process.*/
     /* ------------------------------------------------------------*/

    goto PA0S-001; /* Converse main process*/


  end // end main
end // end PA0S

// Main process to display a map
Function PA0S-001()
   /* *************************************************************/
    /* MAIN PROCESS FOR PA0S*/
    /* THIS APPLICATION WILL ALLOW THE USER TO ADJUST THE*/
    /* OUTPUT OF THE CALC PROGRAM*/
   /* ------------------------------------------------------------*/

   /* 12/19/94: DETERMINE THE VALID WAREHOUSE CODES FOR REGION.*/
   /* GET THE WAREHOUSE CODES FROM THE DCORP.VSUMCD01 TABLE.*/
   /* XXX_TBL_PFX = 'XWH', XXX_SYS_PFX = 'FB', XXX_SUM_ID = 1,*/
   /* XXX_SUM_CD = REGION*/
   /*  */
   /* MAKE SURE THAT THE YSMREC STATUS AND THE XWHTBL STATUS ARE ACTIVE*/
   /* FOR THE WAREHOUSE*/

  set YSMREC empty;

  YSMREC.YSMTBLPF = "XWH";
  YSMREC.YSMSYSPF = "FB";
  YSMREC.YSMSUMID = 1;
  YSMREC.YSMSRCVL = "****";

   /* IF EUROPEAN O/A, DEFAULT REGION TO '02'*/

  if (PAWREC.PAWOANBR > 199999
   && PAWREC.PAWOANBR < 300000)
    YSMREC.YSMSUMCD = "02";
  else
    YSMREC.YSMSUMCD = "01";
  end

  PA0SS-13-IO2640-S1(); /* SELECT DCORP.VSUMCD01*/

  PA0SS-14-IO2640-N1(); /* GET NEXT DCORP.VSUMCD01*/

  PA0SW01.XX4 = 1;
  while (SQLCA.VAGen_SQLCODE == 0)
    if (YSMREC.XXXSTAT == "A") /* ACTIVE WAREHOUSE*/
        /* MAKE SURE THE WAREHOUSE IS ACTIVE ON THE XWHTBL ALSO*/
      if (YSMREC.YSMSRCVL in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          PA0SW00.PA0SW-USA-WHSE-CD[XX4] = YSMREC.YSMSRCVL;
          PA0SW01.PA0SW-USA-WHSE-CNT = PA0SW01.XX4;
          PA0SW01.XX4 = PA0SW01.XX4 + 1;
        end
      end
    end
    PA0SS-14-IO2640-N1(); /* GET NEXT DCORP.VSUMCD01*/
  end

  PA0SS-15-IO2640-C1(); /* CLOSE DCORP.VSUMCD01*/

  if (PAWREC.XXXMSGNO == 72) /* read only message*/
    PA0SW01.PA0SWROS = "Y";
    PAWREC.XXXMSGNO = 0;
  else
    if (PAWREC.XXXMSGNO > 0)
      if (PAWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PAWREC.XXXMSGNO);
      end
      PAWREC.XXXMSGNO = 0;
    end
  end

  if (COMMAREA.CAFROMAP != "PA0P")
    PAWREC.XXXMSGNO = 83;
    COMMAREA.CATOAP = "PA0M";
    XSPAS01();
  end

  if (converseVar.eventKey is pa2) /* RESET WAS PRESSED*/
    PA0SW01.PA0SWMN = "1";
    set PA0SM001 initial;
    set PA0SM002 initial;
    set PA0SW01 empty;
  end

  if (PA0SW01.PA0SWRPD == "Y"
   || converseVar.validationMsgNum > 0
   || PAWREC.XXXMSGNO > 0)
     /* NEXT SENTENCE*/
  else
    XX0XS01(); /* GET CURRENT DATE*/
    PA0S100(); /* GET DATA TO DISPLAY*/
  end

  PA0S200(); /* DISPLAY MAP*/

  PA0S-300(); /* CHECK ATTENTION IDENTIFIERS*/

end // end PA0S-001

// CHECK ATTENTION IDENTIFIERS
Function PA0S-300()
   /* ***************************************************/

    /* CHECK ATTENTION IDENTIFIERS*/

   /* ***************************************************/

   /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/

  if (PA0SM001.PA1OANBR > 199999
   && PA0SM001.PA1OANBR < 300000)
    if (converseVar.eventKey is pf9)
      converseLib.validationFailed(339);
      PAWREC.XXXMSGNO = 339;
      return;
    end
  end

  if (converseVar.eventKey is pa2)
    exit stack;
  end

  if (PA0SM001.CATOAP > " ") /* FAST PATH WAS REQUESTED*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = PA0SM001.CATOAP; /* TO APPLICATION*/
      COMMAREA.CAITEM = PA0SM001.CAITEM; /* DATA*/
      PAWREC.PAWOANBR = PA0SM001.PA1OANBR;
      XSPAS01();
    else
      converseLib.validationFailed(5); /* KEY INVALID*/
      PAWREC.XXXMSGNO = 5;
    end

    set PA0SM001.CATOAP cursor, modified, bold;
    PAWREC.XXXMODID = "300"; /* MODULE ID*/
    exit stack;

  end

  if (converseVar.eventKey is pf1)
    XSPAS01(); /* COMMON EXIT ROUTINE*/
  end

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PA0P";
    COMMAREA.CAUSERA = PAWREC.CAUSERA;
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    XSEXIT();
    converseLib.validationFailed(6);
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPAS01();
  end

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "FY0M";
    XSPAS01();
  end

  if (converseVar.eventKey is pf7) /* SHOW MAP 1*/
    if (PA0SW01.PA0SWMN == 1)
      converseLib.validationFailed(2);
      exit stack;
    else
      PA0SW01.PA0SWMN = 1;
      exit stack;
    end
  end

  if (converseVar.eventKey is pf8) /* SHOW MAP 2*/
    if (PA0SW01.PA0SWMN == 2)
      converseLib.validationFailed(2);
      exit stack;
    else
      PA0SW01.PA0SWMN = 2;
      exit stack;
    end
  end

  if (converseVar.eventKey is pf9
   && PA0SW01.PA0SWROS != "Y" /* and not read only*/
   && PA0SWDTK == " ")       
    if (PA0SW01.PA0SWMN == 1)
      PA0S-310();
      PA0S320();

      PA0SWX3 = PA0SWX3 - PA0SW00.PA0SW-MAX-COLUMNS;
      PA0S610(); /* MOVE SIZE RELATED DATA TO MAP*/
      PA0S620(); /**/
      PA0S630(); /* CHECK TOTAL QUANTITIES ENTERED*/
      PA0S-500(); /* UPDATE/ADD RECORDS TO BOTTOM LINE TABLE*/
      /* -------------------------------------------------*/
       /* Call subroutine to find which enviroment*/
       /* the program is executing in, production or*/
       /* development.*/
      /* -------------------------------------------------*/
      set TA3REC empty;
      TA3REC.TA3OPTN = "ASSIGN ";
      try
        call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
      end

      if (sysVar.errorCode == "00000000" /* call successful*/
       && TA3REC.TA3RTNCD == 0)          /* good return code*/
      else
        converseLib.validationFailed(8); /* error encountered with print request*/
        exit stack;
      end

      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        PA0S700(); /* format production jcl*/
      else
        PA0S710(); /* format test jcl*/
      end

      PA0SWDTK = "Y";
      exit stack;
    end
  end


  if (converseVar.eventKey is pf10)
    if (PA0SWX3 <= PA0SW00.PA0SW-MAX-COLUMNS)
      converseLib.validationFailed(33);
      exit stack;
    end
    PA0S-310(); /* CHECK ENTERED DATA*/
    PA0S320(); /* UPDATE WORKING STORAGE FROM MAP*/
    PA0SWX3 = PA0SWX3 - PA0SM001.PA0SMSCR - PA0SW00.PA0SW-MAX-COLUMNS;
    PA0S610(); /* MOVE SIZE RELATED DATA TO MAP*/
    PA0S620(); /* COMPUTE BOTTOM LINE PCT*/
    PA0S630(); /* CHECK TOTAL QUANTITIES ENTERED*/
    return;
  end

  if (converseVar.eventKey is pf11)
    if (PA0SM001.SY4IDDSC[PA0SW-MAX-COLUMNS] == " ")
      converseLib.validationFailed(32);
      exit stack;
    end
    PA0S-310(); /* CHECK ENTERED DATA*/
    PA0S320(); /* UPDATE WORKING STORAGE FROM MAP*/
    PA0S610(); /* MOVE SIZE RELATED DATA TO MAP*/
    PA0S620(); /* COMPUTE BOTTOM LINE PCT*/
    PA0S630(); /* CHECK TOTAL QUANTITIES ENTERED*/
    return;
  end

  if (converseVar.eventKey is pf17) /* PERFORM WHSE SPLIT*/
    if (PA0SWACP == "Y") /* USER ACCEPTED RESULTS*/
      PA0S700(); /* START WHSE SPLIT BATCH JOB*/
      COMMAREA.CATOAP = "PA0P";
      XSPAS01();
      exit stack;
    end

  end

  if (converseVar.eventKey is enter)
    if (PA0SWRPD == "Y")
      PA0S-310(); /* CHECK ENTERED DATA*/
      PA0S320();
      PA0SWX3 = PA0SWX3 - PA0SW00.PA0SW-MAX-COLUMNS;
      PA0S610(); /* MOVE SIZE RELATED DATA TO MAP*/
      PA0S620();
      PA0S630(); /* CHECK TOTAL QUANTITIES ENTERED*/
    end
    return;
  end

  converseLib.validationFailed(04); /* INVALID KEY PRESSED*/
end // end PA0S-300

// CHECK ENTERED DATA FOR ERRORS
Function PA0S-310()
   /* *************************************************************/
    /* IT IS NOT KNOWN ALL OF THE EDITS AT THIS TIME BUT*/
    /* HERE IS WHAT I KNOW ABOUT*/
   /* *************************************************************/

   /* ---------------------------------------------------------*/
   /* Look up the units per case to be used in adjustment*/
   /* calculations.*/
   /* ---------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = "02"; /* Footwear GPC code*/
  PG2REC.SY1STNBR = PA0SM001.SY1STNBR; /* STYLE*/
  PG2REC.SY2CLRID = PA0SM001.SY2CLRID; /* COLOR*/
  PG2REC.XDMCD = PA0SM001.XDMCD; /* DIMENSION*/

  XSPG202(); /* Select Style/Color*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors found*/
    if (PG2REC.SY1UNPCS <= 0) /* Default 12 units/case*/
      PG2REC.SY1UNPCS = 12;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      converseLib.validationFailed(26); /* Style/Color not valid*/
      exit stack;
    end
  end

  sysVar.arrayIndex = PA0SW00.PA0SW-MAX-COLUMNS;

  while (sysVar.arrayIndex >= 1)

    set PA0SMBQ2[sysVar.arrayIndex] initialAttributes;
    set PA0SMBQ4[sysVar.arrayIndex] initialAttributes;
    set PA0SMBQ7[sysVar.arrayIndex] initialAttributes;


    if (PA0SMBQ7[sysVar.arrayIndex] < 0)
      set PA0SMBQ7[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(89);
      exit stack;
    else
      if (PA0SMBQ7[sysVar.arrayIndex] > 0)
        PA0SWDIV = PA0SMBQ7[sysVar.arrayIndex] / PG2REC.SY1UNPCS;
        PA0SWREM = PA0SWDIV * 100;
        if (PA0SWREM > 0)
          converseLib.validationFailed(157);
          set PA0SMBQ7[sysVar.arrayIndex] cursor, modified, bold;

        end
      end
    end

    if (PA0SMBQ4[sysVar.arrayIndex] < 0)
      set PA0SMBQ4[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(89);
      exit stack;
    else
      if (PA0SMBQ4[sysVar.arrayIndex] > 0)
        PA0SWDIV = PA0SMBQ4[sysVar.arrayIndex] / PG2REC.SY1UNPCS;
        PA0SWREM = PA0SWDIV * 100;
        if (PA0SWREM > 0)
          converseLib.validationFailed(157);
          set PA0SMBQ4[sysVar.arrayIndex] cursor, modified, bold;

        end
      end
    end

    if (PA0SMBQ2[sysVar.arrayIndex] < 0)
      set PA0SMBQ2[sysVar.arrayIndex] cursor, modified, bold;
      converseLib.validationFailed(89);
      exit stack;
    else
      if (PA0SMBQ2[sysVar.arrayIndex] > 0)
        PA0SWDIV = PA0SMBQ2[sysVar.arrayIndex] / PG2REC.SY1UNPCS;
        PA0SWREM = PA0SWDIV * 100;
        if (PA0SWREM > 0)
          converseLib.validationFailed(157);
          set PA0SMBQ2[sysVar.arrayIndex] cursor, modified, bold;

        end
      end
    end


    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end


  move PA0SWX3 to PA0SWX1 withV60Compat;
  PA0SWX1 = PA0SWX1 - PA0SW00.PA0SW-MAX-COLUMNS;

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= PA0SW00.PA0SW-MAX-COLUMNS)

    PA0SWX1 = PA0SWX1 + 1;
    PA0SWX2 = PG3REC.SY5SZID[PA0SWX1];

    if (PA0SWX2 > 0)

      PA0SWDIF = PA0SMBQ2[sysVar.arrayIndex] - PA0SWCL2[PA0SWX2];
      PA0SMTB2 = PA0SMTB2 + PA0SWDIF;

      PA0SWDIF = PA0SMBQ4[sysVar.arrayIndex] - PA0SWCL4[PA0SWX2];
      PA0SMTB4 = PA0SMTB4 + PA0SWDIF;

      PA0SWDIF = PA0SMBQ7[sysVar.arrayIndex] - PA0SWCL7[PA0SWX2];
      PA0SMTB7 = PA0SMTB7 + PA0SWDIF;

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  set PA0SMTB2 initialAttributes;
  set PA0SMTB2 skip;
  set PA0SMTB4 initialAttributes;
  set PA0SMTB4 skip;
  set PA0SMTB7 initialAttributes;
  set PA0SMTB7 skip;

  if (converseVar.eventKey is pf9
   && PA0SW01.PA0SWROS != "Y") /* and not read only*/

    if (PA0SMTB7 == 0
     || PA0SMTB7 >= FB9REC.FB9BTQTY)
       /* NEXT SENTENCE*/
    else
      set PA0SMTB7 bold;
      set PA0SMBQ7[1] cursor;
      converseLib.validationFailed(92);
    end

    if (PA0SMTB4 == 0
     || PA0SMTB4 >= FB9REC.FB9BTQTY)
       /* NEXT SENTENCE*/
    else
      set PA0SMTB4 bold;
      set PA0SMBQ4[1] cursor;
      converseLib.validationFailed(92);
    end

    if (PA0SMTB2 == 0
     || PA0SMTB2 >= FB9REC.FB9BTQTY)
       /* NEXT SENTENCE*/
    else
      set PA0SMTB2 bold;
      set PA0SMBQ2[1] cursor;
      converseLib.validationFailed(92);
    end
  end

  if (converseVar.validationMsgNum == 92)
    exit stack;
  end

   /* ----------------- END OF PA0S310 ------------------------------------*/
end // end PA0S-310

// UPDATE BOTTOMLINE/WORK RECORDS
Function PA0S-500()
   /* ****************************************************/
    /* THIS PROCESS WILL DELETE ANY EXISTING*/
    /* BOTTOM LINE RECORDS AND THEN ADD THE NEW*/
    /* BOTTOM LINE RECORDS CREATED BY USER*/
   /* ****************************************************/

  set PA5REC empty;

  PA5REC.PA1OANBR = PA1REC.PA1OANBR;

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
  PA0SW01.PA0SW-MCC = XX0XW19;
  /*  */
  /* *************************** Y2K IN END ******************************/
  /*  */

  PA0SS08();

   /* ----------------------------------------------------*/
   /* INSERT FIRST WAREHOUSE*/
   /* ----------------------------------------------------*/

  set PACREC empty;

  PACREC.PACGRP01 = PA0SW01.PACGRP01[1];
  if (PA0SW01.PA0SWFI2 == "Y")
    move PA0SWCL2 to PACREC.PACWRKQT[1] for all;
    move PA0SWDJ2 to PACREC.PACADJQT[1] for all;
    move PA0SWDD2 to PACREC.PACFLADJ[1] for all;
    PACREC.ZZZSDT = PA0SW01.ZZZSDT[1];
    PACREC.ZZZSTM = PA0SW01.ZZZSTM[1];
    PACREC.ZZZCHGCT = PA0SW01.ZZZCHGCT[1];
    PACREC.ZZZCHGDT = XX0XWDAT;
    PACREC.ZZZCHGTM = XX0XWTIM;

    PA0SS30(); /* UPDATE WORK RECORD*/

  end

  if (PA0SW00.PA0SW-REGION-WHSE[1] != " ")
    PA5REC.SY1STNBR = PA1REC.SY1STNBR;
    PA5REC.SY2CLRID = PA1REC.SY2CLRID;
    PA5REC.XDMCD = PA1REC.XDMCD;
    PA5REC.XQACD = "01";
    PA5REC.PC2INSEG = "000";
    PA5REC.XPGCD = "00";
    PA5REC.XUMCD = PG2REC.XUMCD;
  /*  */
  /* *************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* MOVE PA0SM001.PT3YYMM TO PA5REC.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END *****************************/
  /*  */

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
    PA0SW01.PA0SW-MYM = PA0SM001.PT3YYMM;
  /* IF PA0SW01.PA0SW-MMM GT 0 AND PA0SW01.PA0SW-MYY GT 0;*/

    if (PA0SW01.PA0SW-MYY < 60)
      PA0SW01.PA0SW-MCC = 20;
    else
      PA0SW01.PA0SW-MCC = 19;
    end
    if (PA0SW01.PA0SW-MMM > 0 && PA0SW01.PA0SW-MYY > 0)
      if (PA0SW01.PA0SW-MMM > 12)
        PA5REC.PT3YYMM = 0;
      else
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      end
    else
      if (PA0SW01.PA0SW-MMM > 0)
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      else
        PA5REC.PT3YYMM = 0;
      end
    end
  /* *************************** Y2K IN END *****************************/
  /*  */

    PA5REC.PA1BUYMO = PA1REC.PA1BUYMO;
    PA5REC.XWHCD = PA0SW00.PA0SW-REGION-WHSE[1];
     /* MOVE PA0SWRG2 TO PA5REC.FB4RGPCT;*/
    PA5REC.FB4RGPCT = PA0SW01.FB4RGPCT[1];
    move PA0SWBL2 to PA5REC.PA5BLQTY[1] for all;
    move PA0SWAD2 to PA5REC.PA5AJQTY[1] for all;
    PA5REC.ZZZSDT = XX0XWDAT;

    PA0SS09(); /* ADD BOTTOM LINE RECORD*/
  end

   /* ----------------------------------------------------*/
   /* INSERT SECOND WAREHOUSE*/
   /* ----------------------------------------------------*/

  set PACREC empty;

  PACREC.PACGRP01 = PA0SW01.PACGRP01[2];
  if (PA0SW01.PA0SWFI4 == "Y")
    move PA0SWCL4 to PACREC.PACWRKQT[1] for all;
    move PA0SWDJ4 to PACREC.PACADJQT[1] for all;
    move PA0SWDD4 to PACREC.PACFLADJ[1] for all;
    PACREC.ZZZSDT = PA0SW01.ZZZSDT[2];
    PACREC.ZZZSTM = PA0SW01.ZZZSTM[2];
    PACREC.ZZZCHGCT = PA0SW01.ZZZCHGCT[2];
    PACREC.ZZZCHGDT = XX0XWDAT;
    PACREC.ZZZCHGTM = XX0XWTIM;

    PA0SS30(); /* UPDATE WORK RECORD*/

  end

  if (PA0SW00.PA0SW-REGION-WHSE[2] != " ")
    PA5REC.SY1STNBR = PA1REC.SY1STNBR;
    PA5REC.SY2CLRID = PA1REC.SY2CLRID;
    PA5REC.XDMCD = PA1REC.XDMCD;
    PA5REC.XQACD = "01";
    PA5REC.PC2INSEG = "000";
    PA5REC.XPGCD = "00";
    PA5REC.XUMCD = PG2REC.XUMCD;

  /*  */
  /* *************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* MOVE PA0SM001.PT3YYMM TO PA5REC.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END *****************************/
  /*  */

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
    PA0SW01.PA0SW-MYM = PA0SM001.PT3YYMM;
  /* IF PA0SW01.PA0SW-MMM GT 0 AND PA0SW01.PA0SW-MYY GT 0;*/

    if (PA0SW01.PA0SW-MYY < 60)
      PA0SW01.PA0SW-MCC = 20;
    else
      PA0SW01.PA0SW-MCC = 19;
    end
    if (PA0SW01.PA0SW-MMM > 0 && PA0SW01.PA0SW-MYY > 0)
      if (PA0SW01.PA0SW-MMM > 12)
        PA5REC.PT3YYMM = 0;
      else
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      end
    else
      if (PA0SW01.PA0SW-MMM > 0)
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      else
        PA5REC.PT3YYMM = 0;
      end
    end
  /* *************************** Y2K IN END ******************************/
    PA5REC.PA1BUYMO = PA1REC.PA1BUYMO;
    PA5REC.XWHCD = PA0SW00.PA0SW-REGION-WHSE[2];
     /* MOVE PA0SWRG4 TO PA5REC.FB4RGPCT;*/
    PA5REC.FB4RGPCT = PA0SW01.FB4RGPCT[2];
    move PA0SWBL4 to PA5REC.PA5BLQTY[1] for all;
    move PA0SWAD4 to PA5REC.PA5AJQTY[1] for all;
    PA5REC.ZZZSDT = XX0XWDAT;

    PA0SS09(); /* ADD BOTTOM LINE RECORD*/
  end

  set PACREC empty;


   /* ----------------------------------------------------*/
   /* INSERT THIRD WAREHOUSE*/
   /* ----------------------------------------------------*/

  set PACREC empty;

  PACREC.PACGRP01 = PA0SW01.PACGRP01[3];
  if (PA0SW01.PA0SWFI7 == "Y")
    move PA0SWCL7 to PACREC.PACWRKQT[1] for all;
    move PA0SWDJ7 to PACREC.PACADJQT[1] for all;
    move PA0SWDD7 to PACREC.PACFLADJ[1] for all;
    PACREC.ZZZSDT = PA0SW01.ZZZSDT[3];
    PACREC.ZZZSTM = PA0SW01.ZZZSTM[3];
    PACREC.ZZZCHGCT = PA0SW01.ZZZCHGCT[3];
    PACREC.ZZZCHGDT = XX0XWDAT;
    PACREC.ZZZCHGTM = XX0XWTIM;

    PA0SS30(); /* UPDATE WORK RECORD*/

  end

  if (PA0SW00.PA0SW-REGION-WHSE[3] != " ")
    PA5REC.SY1STNBR = PA1REC.SY1STNBR;
    PA5REC.SY2CLRID = PA1REC.SY2CLRID;
    PA5REC.XDMCD = PA1REC.XDMCD;
    PA5REC.XQACD = "01";
    PA5REC.PC2INSEG = "000";
    PA5REC.XPGCD = "00";
    PA5REC.XUMCD = PG2REC.XUMCD;

  /*  */
  /* *************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* MOVE PA0SM001.PT3YYMM TO PA5REC.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END *****************************/
  /*  */

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
    PA0SW01.PA0SW-MYM = PA0SM001.PT3YYMM;
  /* IF PA0SW01.PA0SW-MMM GT 0 AND PA0SW01.PA0SW-MYY GT 0;*/

    if (PA0SW01.PA0SW-MYY < 60)
      PA0SW01.PA0SW-MCC = 20;
    else
      PA0SW01.PA0SW-MCC = 19;
    end
    if (PA0SW01.PA0SW-MMM > 0 && PA0SW01.PA0SW-MYY > 0)
      if (PA0SW01.PA0SW-MMM > 12)
        PA5REC.PT3YYMM = 0;
      else
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      end
    else
      if (PA0SW01.PA0SW-MMM > 0)
        PA5REC.PT3YYMM = PA0SW01.PA0SW-MCYM;
      else
        PA5REC.PT3YYMM = 0;
      end
    end
  /* *************************** Y2K IN END ******************************/
  /*  */

    PA5REC.PA1BUYMO = PA1REC.PA1BUYMO;
    PA5REC.XWHCD = PA0SW00.PA0SW-REGION-WHSE[3];
     /* MOVE PA0SWRG7 TO PA5REC.FB4RGPCT;*/
    PA5REC.FB4RGPCT = PA0SW01.FB4RGPCT[3];
    move PA0SWBL7 to PA5REC.PA5BLQTY[1] for all;
    move PA0SWAD7 to PA5REC.PA5AJQTY[1] for all;
    PA5REC.ZZZSDT = XX0XWDAT;

    PA0SS09(); /* ADD BOTTOM LINE RECORD*/

  end
end // end PA0S-500

// NEW B/L WITH OPEN O/AS
Function PA0S-61001()
   /* ******************************************************/
    /* DETERMINE THE NEW B/L WITH ADJUSTMENTS FROM THE*/
    /* OPEN O/AS.*/
   /* ******************************************************/

  move 0 to PA0SW01.PA0SW-BL-WITH-OAS1[1] for all;
  move 0 to PA0SW01.PA0SW-BL-WITH-OAS2[1] for all;
  move 0 to PA0SW01.PA0SW-BL-WITH-OAS3[1] for all;

  set PA0SW02 empty;

  PA0SW02.PA1OANBR = PA0SM001.PA1OANBR;
  PA0SW02.SY1STNBR = PA0SM001.SY1STNBR;
  PA0SW02.SY2CLRID = PA0SM001.SY2CLRID;
  PA0SW02.XDMCD = PA0SM001.XDMCD;

   /* XX2 KEEPS TRACK OF THE O/A NUMBERS USED TO ADD ADJUSMENTS TO*/
   /* THE CURRENT BOTTOM LINE.*/

  PA0SW01.XX2 = 1;

   /* PROCESS WAREHOUSES*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 3)
    set PA1REC empty;
    set PA5REC empty;
    PA0SW02.XWHCD = PA0SW00.PA0SW-REGION-WHSE[sysVar.arrayIndex];
    PA0S-61002();
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* GET THE ORIGINAL O/A HEADER RECORD.  THIS IS SO THAT THE HEADER*/
   /* INFORMATION CAN BE USED LATER.*/

  set PA1REC empty;

  PA1REC.PA1OANBR = PA0SM001.PA1OANBR;

  PA0SS01(); /* GET O/A HEADER*/

end // end PA0S-61001

// ACCUMULATE B/L SIZES
Function PA0S-61002()
   /* ******************************************************/
    /* ACCUMULATE THE B/L QUANTITIES BY SIZE.*/
   /* ******************************************************/

  PA0SW02.PA0SW-TASK = "S1";

  PA0SS-10-PA1050-S(); /* OPEN O/A TYPE '9' WORK RECORD CURSOR*/

  PA0SW02.PA0SW-TASK = "N1";

  PA0S-61003();

  PA0SW02.PA0SW-TASK = "C1";

  PA0SS-12-PA1050-C();

   /* ******************************************************/
    /* GET THE O/AS THAT HAVE UPDATED THE P.O. SYSTEM*/
    /* TODAY.*/
   /* ******************************************************/

  PA0SW02.PA0SW-TASK = "S2";
  PA0SW02.PA0SW-CURRENT-DATE = XX0XW01.XX0XWDAT;

  PA0SS-10-PA1050-S(); /* OPEN O/A TYPE '9' WORK RECORD CURSOR*/

  PA0SW02.PA0SW-TASK = "N2";

  PA0S-61003();

  PA0SW02.PA0SW-TASK = "C2";

  PA0SS-12-PA1050-C();
end // end PA0S-61002

// ACCUMULATE B/L SIZES
Function PA0S-61003()
   /* ******************************************************/
    /* ACCUMULATE THE B/L QUANTITIES BY SIZE.*/
   /* ******************************************************/

  PA0SS-11-PA1050-N(); /* FETCH FIRST RECORD*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (PA0SM001.PA1OANBR > 199999
     && PA0SM001.PA1OANBR < 300000)
      if (PA5REC.PA1OANBR > 199999
       && PA5REC.PA1OANBR < 300000)
        PA0S-61004();
      end
    else
      if (PA5REC.PA1OANBR > 199999
       && PA5REC.PA1OANBR < 300000)
           /* NEXT SENTENCE*/
      else
        PA0S-61004();
      end
    end

    PA0SS-11-PA1050-N(); /* FETCH NEXT RECORD*/

  end

end // end PA0S-61003

// ACCUMULATE B/L SIZES
Function PA0S-61004()
   /* ******************************************************/
    /* ACCUMULATE THE B/L QUANTITIES BY SIZE.*/
   /* ******************************************************/

   /* LOAD TO THE MAP THE O/A NUMBER THAT IS BEING ADDED TO THE*/
   /* CURRENT BOTTOM LINE.*/

  PA0SW01.PA0SW-USE-THIS-OA = "Y";
  PA0SW01.XX3 = 1;

  if (PA0SW01.XX2 <= 16)
    while (PA0SW01.XX3 < PA0SW01.XX2
     && PA0SW01.PA0SW-USE-THIS-OA == "Y")
      if (PA0SM001.PA0SM-BL-OA[XX3] == PA5REC.PA1OANBR)
        PA0SW01.PA0SW-USE-THIS-OA = "N";
      end
      PA0SW01.XX3 = PA0SW01.XX3 + 1;
    end
  else
    PA0SW01.PA0SW-USE-THIS-OA = "N";
  end

  if (PA0SW01.PA0SW-USE-THIS-OA == "Y")
    PA0SM001.PA0SM-BL-OA[XX2] = PA5REC.PA1OANBR;
    PA0SW01.XX2 = PA0SW01.XX2 + 1;
  end

  PA0SW01.XX1 = 1;

  while (PA0SW01.XX1 <= 40)

    if (PA5REC.XWHCD != " ")
      if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
        PA0SW-BL-WITH-OAS1[XX1] = PA0SW-BL-WITH-OAS1[XX1]                                  + PA5REC.PA5AJQTY[XX1];
      else
        if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
          PA0SW-BL-WITH-OAS2[XX1] = PA0SW-BL-WITH-OAS2[XX1]                                     + PA5REC.PA5AJQTY[XX1];
        else
          if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
            PA0SW-BL-WITH-OAS3[XX1] = PA0SW-BL-WITH-OAS3[XX1]                                        + PA5REC.PA5AJQTY[XX1];
          end
        end
      end
    end


    PA0SW01.XX1 = PA0SW01.XX1 + 1;

  end

end // end PA0S-61004

// WAREHOUSE CALCS
Function PA0S-62001()

   /* W A R E H O U S E  2*/

  if (PA0SMTN2 > 0)
    PA0SMTBP[1] = PA0SMTN2 * 100 / PA0SMTNC;
  else
     /* NEXT SENTENCE*/
  end

   /* W A R E H O U S E  4*/

  if (PA0SMTN4 > 0)
    PA0SMTBP[2] = PA0SMTN4 * 100 / PA0SMTNC;
  else
     /* NEXT SENTENCE*/
  end

   /* W A R E H O U S E  7*/

  if (PA0SMTN7 > 0)
    PA0SMTBP[3] = PA0SMTN7 * 100 / PA0SMTNC;
  else
     /* NEXT SENTENCE*/
  end

end // end PA0S-62001

// EDIT ENTERED DATA
Function PA0S100()
   /* ******************************************************/
    /* GET DATA TO DISPLAY*/
   /* ******************************************************/

  set PA1REC empty;

  PA0SM001.PA1OANBR = PAWOANBR; /* OA number*/
  PA1REC.PA1OANBR = PA0SM001.PA1OANBR;
  PA0SM001.PA0SMSCR = PA0SW00.PA0SW-MAX-COLUMNS;

  PA0SS01(); /* SELECT O/A HEADER UNIQUE*/

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(50);
    end

    return;

  end

  set PG2REC empty;

  PG2REC.SY1STNBR = PA1REC.SY1STNBR;
  PG2REC.SY2CLRID = PA1REC.SY2CLRID;
  PG2REC.XDMCD = PA1REC.XDMCD;
  PG2REC.XGPCD = "02";

  XSPG202();

  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26);
    end

    return;
  end

  PA0SW01.PA0SW-VALID-SYCLR-WHSE-CNT = 0;
  PA0SWIX1 = 1;
  while (PA0SWIX1 <= PA0SW01.PA0SW-USA-WHSE-CNT)
    PA0SWIX2 = 1;
    PA0SW01.PA0SW-MATCH = "N";
    while (PA0SWIX2 <= 6
     && PA0SW01.PA0SW-MATCH == "N")
      if (PA0SW00.PA0SW-USA-WHSE-CD[PA0SWIX1]
       == PG2REC.XWHCD[PA0SWIX2])
        PA0SW01.PA0SW-VALID-SYCLR-WHSE-CNT = PA0SW01.PA0SW-VALID-SYCLR-WHSE-CNT + 1;
        if (PA0SW01.PA0SW-VALID-SYCLR-WHSE-CNT > 3)
          converseLib.validationFailed(351);
          return;
        else
          PA0SW00.PA0SW-REGION-WHSE[PA0SW-VALID-SYCLR-WHSE-CNT] = PA0SW00.PA0SW-USA-WHSE-CD[PA0SWIX1];
          PA0SW01.PA0SW-MATCH = "Y";
        end
      end
      PA0SWIX2 = PA0SWIX2 + 1;
    end
    PA0SWIX1 = PA0SWIX1 + 1;
  end

  if (PA0SW01.PA0SW-VALID-SYCLR-WHSE-CNT == 0)
    converseLib.validationFailed(352);
    return;
  end

  set FB9REC empty;

  PA0SS50(); /* GET CURRENT BUY MIN QTY*/

  set PAJREC empty;
  set PAKREC empty;

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
  PA0SW01.PA0SWCC = XX0XW19;
  /*  */
  /* *************************** Y2K IN END ******************************/
  /*  */
  PA0SW01.PA0SWYY = XX0XWYY;
  PA0SW01.PA0SWMM = XX0XWMM;
  /*  */
  /* *************************** Y2K OUT BEGIN ***************************/
  /*  */
  /* MOVE PA0SW01.PA0SWYM TO PAJREC.PT3YYMM;*/
  /*  */
  /* *************************** Y2K OUT END *****************************/

  /*  */
  /* *************************** Y2K IN BEGIN ****************************/
  /*  */
  PAJREC.PT3YYMM = PA0SW01.PA0SWCYM;
  /*  */
  /* *************************** Y2K IN END ******************************/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 3)
    PAJREC.PAJ1W-REGION-WHSE[sysVar.arrayIndex] = PA0SW00.PA0SW-REGION-WHSE[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  XPPA210(); /* GET PAR VALID SIZES*/

  PAWREC.XXXMSGNO = 0;

  PA0S110(); /* GET REGION PCTS*/

  set PA5REC empty;

  PA5REC.PA1OANBR = PA1REC.PA1OANBR;

  PA0SS02(); /* OPEN CURSOR FOR O/A BOTTOM LINE*/

  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  PA0SS03(); /* FETCH O/A BOTTOM LINE*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PA0SM001.PT3YYMM = PA5REC.PT3YYMM;
    PA0SM002.PT3YYMM = PA5REC.PT3YYMM;
  else
    converseLib.validationFailed(90);
    exit stack;
  end

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PA5REC.XWHCD != " ")
      if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
        move PA5REC.PA5BLQTY to PA0SWBL2[1] for all;
        move PA5REC.PA5AJQTY to PA0SWAD2[1] for all;
        PA0SWGG2 = PA5REC.FB4RGPCT;
           /* save PA5REC info for DPRODA.VBOTLN01 update later*/
        PA0SW01.FB4RGPCT[1] = PA5REC.FB4RGPCT;
      else
        if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
          move PA5REC.PA5BLQTY to PA0SWBL4[1] for all;
          move PA5REC.PA5AJQTY to PA0SWAD4[1] for all;
          PA0SWGG4 = PA5REC.FB4RGPCT;
              /* save PA5REC info for DPRODA.VBOTLN01 update later*/
          PA0SW01.FB4RGPCT[2] = PA5REC.FB4RGPCT;
        else
          if (PA5REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
            move PA5REC.PA5BLQTY to PA0SWBL7[1] for all;
            move PA5REC.PA5AJQTY to PA0SWAD7[1] for all;
            PA0SWGG7 = PA5REC.FB4RGPCT;
                 /* save PA5REC info for DPRODA.VBOTLN01 update later*/
            PA0SW01.FB4RGPCT[3] = PA5REC.FB4RGPCT;
          end
        end
      end
    end

    PA0SS03(); /* FETCH BOTTOM LINE*/
  end

  PA0SS04(); /* CLOSE BOTTOM LINE CURSOR*/

   /* PA#225 - allow read only access*/
  if (PA0SW01.PA0SWROS == "Y")
    PA0S175(); /* get work type '8' for read only*/
  else
    PA0S170(); /* GET WORK QUANTITIES*/
  end

  PA0S180(); /* GET FACTORY RECORDS*/

  PA0S120(); /* SETUP PG3REC FOR SIZE TRANSLATION*/

  if (converseVar.validationMsgNum == 0)
    PA0S600(); /* SETUP DATA FOR SCREEN ONE/TWO*/
  end

  PA0SW01.PA0SWRPD = "Y";
end // end PA0S100

// GET STANDARD SIZE PERCENTS
Function PA0S110()
   /* *******************************************************/
   /* GET REGIONAL PERCENTS*/
   /* ------------------------------------------------------*/
    /* THIS WILL ONLY HAPPEN IF NO CURRENT BOTTOM LINE*/
    /* IN O/A BOTTOM LINE DATABASE*/

   /* *******************************************************/

  set FB4REC empty;

  FB4REC.SY1STNBR = PA1REC.SY1STNBR;
  FB4REC.SY2CLRID = PA1REC.SY2CLRID;
  FB4REC.XDMCD = PA1REC.XDMCD;
  FB4REC.FB4STDFL = "Y";
  FB4REC.XQACD = "01";
  FB4REC.PC2INSEG = "000";
  FB4REC.XPGCD = "00";
  FB4REC.XUMCD = "01";
  FB4REC.XGPCD = "02";
  FB4REC.FB4CRVNB = -1;
  FB4REC.FB1INSEQ = -1;
  FB4REC.XSACD = "000";

  PA0SS05(); /* OPEN SIZE REGION CURSOR*/

  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  PA0SS06(); /* FETCH SIZE REGION CURSOR*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* NEXT SENTENCE*/
  else
    return;
  end

  while (SQLCA.VAGen_SQLCODE == 0)

    if (FB4REC.XWHCD != " ")
      if (FB4REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
        move FB4REC.FB4SZPCT to PA0SW01.PA0SWPF2[1] for all;
        PA0SWRG2 = FB4REC.FB4RGPCT;
      else
        if (FB4REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
          move FB4REC.FB4SZPCT to PA0SW01.PA0SWPF4[1] for all;
          PA0SWRG4 = FB4REC.FB4RGPCT;
        else
          if (FB4REC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
            move FB4REC.FB4SZPCT to PA0SW01.PA0SWPF7[1] for all;
            PA0SWRG7 = FB4REC.FB4RGPCT;
          end
        end
      end
    end

    PA0SS06(); /* FETCH SIZE REGION RECORD*/
  end

  PA0SS07(); /* CLOSE SIZE RECION CURSOR*/

   /* ------------------------------------------------------------*/
   /* COMPUTE CORPORATE WEIGHTED %*/
   /* ------------------------------------------------------------*/

  move 0 to PA0SW01.PA0SWPFC[1] for all;

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (PA0SWPF2[sysVar.arrayIndex] > 0)
      PA0SWPCA = PA0SWPF2[sysVar.arrayIndex] / 100;
      PA0SWPCA = PA0SWPCA * PA0SWRG2;
      PA0SWPFC[sysVar.arrayIndex] = PA0SWPCA + PA0SWPFC[sysVar.arrayIndex];

    end

    if (PA0SWPF4[sysVar.arrayIndex] > 0)
      PA0SWPCA = PA0SWPF4[sysVar.arrayIndex] / 100;
      PA0SWPCA = PA0SWPCA * PA0SWRG4;
      PA0SWPFC[sysVar.arrayIndex] = PA0SWPCA + PA0SWPFC[sysVar.arrayIndex];

    end

    if (PA0SWPF7[sysVar.arrayIndex] > 0)
      PA0SWPCA = PA0SWPF7[sysVar.arrayIndex] / 100;
      PA0SWPCA = PA0SWPCA * PA0SWRG7;
      PA0SWPFC[sysVar.arrayIndex] = PA0SWPCA + PA0SWPFC[sysVar.arrayIndex];

    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

end // end PA0S110

// SET PGEREC FOR SIZE TRANSLATIO
Function PA0S120()
   /* *****************************************************/
    /* SETUP PG3REC FOR SIZE TRANSLATION*/
   /* ----------------------------------------------------*/

   /* ANY QUANTITY THAT IS GREATER THAN ZERO, THAT IS STORED*/
   /* FOR DISPLAY MUST BE TRANSLATED ALONG WITH ALL SIZES*/
   /* THAT WERE VALID FOR CURRENT PAR*/
   /* *****************************************************/

  set PG3REC empty;

  PG3REC.SY1STNBR = PA1REC.SY1STNBR;
  PG3REC.SY2CLRID = PA1REC.SY2CLRID;
  PG3REC.XDMCD = PA1REC.XDMCD;
  PG3REC.XGPCD = "02";
  PG3REC.XQACD = "**";
  PG3REC.PG3FUNCD = "IE";
  PG3REC.PG3DATFM = "C";
  PG3REC.PG3XDVCD = "99";

  PA0SWX1 = 0;
  PA0SWX2 = 1;

   /* MSMIT2: 11/29/93 - LOOK AT THE SY-FRNG-GUT-SZ FIELDS TO DETERMINE*/
   /* IF VALID SIZE (INSTEAD OF XDVCD).*/

  while (PA0SWX2 <= 40)

    if (PA0SW01.PA0SWBL2[PA0SWX2] > 0
     || PA0SW01.PA0SWBL4[PA0SWX2] > 0
     || PA0SW01.PA0SWBL7[PA0SWX2] > 0
     || PA0SW01.PA0SWCL2[PA0SWX2] > 0
     || PA0SW01.PA0SWCL4[PA0SWX2] > 0
     || PA0SW01.PA0SWCL7[PA0SWX2] > 0
     || PA0SW01.PA0SWPF2[PA0SWX2] > 0
     || PA0SW01.PA0SWPF4[PA0SWX2] > 0
     || PA0SW01.PA0SWPF7[PA0SWX2] > 0
     || PAJREC.PAJ1WVSZ[PA0SWX2] == "Y"
     || PG2REC.SY3FRGUT[PA0SWX2] == "F"
     || PG2REC.SY3FRGUT[PA0SWX2] == "G")
   /* OR PG2REC.XDVCD(PA0SWX2) NE '  ';*/
      PA0SWX1 = PA0SWX1 + 1;
      PG3REC.SY5SZID[PA0SWX1] = PA0SWX2;
    end

    PA0SWX2 = PA0SWX2 + 1;
  end

  XSPG301(); /* CALL SIZE TRANSLATION MODULE*/

  if (sysVar.errorCode != "00000000")
    converseLib.validationFailed(10);
    return;
  end

  if (PG3REC.PG3RETCD > 5)
    converseLib.validationFailed(11);
    return;
  end

end // end PA0S120

// GET WORK RECS
Function PA0S170()
   /* ---------------------------------------------------*/
    /* GET WORK RECORDS*/
   /* ---------------------------------------------------*/

  set PACREC empty; /* BOTH RECORDS USED*/

  PACREC.ZZZSDT = -1; /* DATE WE ARE WORKING WITH*/
  PACREC.ZZZSTM = -1; /* TIME WE ARE WORKING WITH*/
  PACREC.PA1OANBR = PA1REC.PA1OANBR; /* ADJUSTMENT NUMBER*/
  PACREC.PACGRPCD = "*"; /* PA_PROC_GRP*/
  PACREC.PACORDTY = "8"; /* PA_ORD_TYP_IND*/
  PACREC.PACSEVAL = "P"; /* PA_USER_PROC_IND*/
  PACREC.XDSCD = "*"; /* DIRECT SHIP CODE*/
  PACREC.PACADDRS = "*"; /* PA_ADJ_DRS_IND*/
  PACREC.FY1FCTYC = "*"; /* FY_FCTY_CD*/
  PACREC.PC3POIDT = -1; /* PO ID MONTH RANGE*/
  PACREC.PC3PONBR = -1; /* PO NUMBER*/
  PACREC.PC6ITMNB = -1; /* ITEM SEQUENCE NUMBER*/
  PACREC.PC6ETSDT = -1; /* ETS DATE*/
  PACREC.PC6RTADT = -1; /* REQUESTED ARRIVAL DATE*/
  PACREC.YMTCD = "*"; /* MODE OF TRANSPORTATION*/
  PACREC.PC2CUXID = "*"; /* CUSTOMER CROSS REFERENCE*/
  PACREC.XWHCD = "*"; /* WAREHOUSE CODE*/

  PA0SS20(); /* OPEN CURSOR ON WORK DATABASE*/

  PA0SS21(); /* FETCH WORK RECORDS*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PACREC.XWHCD != " ")
      if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
        PA0SW01.PA0SWFI2 = "Y";
        move PACREC.PACWRKQT to PA0SW01.PA0SWCL2[1] for all;
        PA0SW01.PACGRP01[1] = PACREC.PACGRP01;
        move PACREC.PACADJQT to PA0SW01.PA0SWDJ2[1] for all;
        move PACREC.PACFLADJ to PA0SW01.PA0SWDD2[1] for all;
        PA0SW01.ZZZSDT[1] = PACREC.ZZZSDT;
        PA0SW01.ZZZSTM[1] = PACREC.ZZZSTM;
        PA0SW01.ZZZCHGCT[1] = PACREC.ZZZCHGCT;
      else
        if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
          PA0SW01.PA0SWFI4 = "Y";
          move PACREC.PACWRKQT to PA0SW01.PA0SWCL4[1] for all;
          PA0SW01.PACGRP01[2] = PACREC.PACGRP01;
          move PACREC.PACADJQT to PA0SW01.PA0SWDJ4[1] for all;
          move PACREC.PACFLADJ to PA0SW01.PA0SWDD4[1] for all;
          PA0SW01.ZZZSDT[2] = PACREC.ZZZSDT;
          PA0SW01.ZZZSTM[2] = PACREC.ZZZSTM;
          PA0SW01.ZZZCHGCT[2] = PACREC.ZZZCHGCT;
        else
          if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
            PA0SW01.PA0SWFI7 = "Y";
            move PACREC.PACWRKQT to PA0SW01.PA0SWCL7[1] for all;
            PA0SW01.PACGRP01[3] = PACREC.PACGRP01;
            move PACREC.PACADJQT to PA0SW01.PA0SWDJ7[1] for all;
            move PACREC.PACFLADJ to PA0SW01.PA0SWDD7[1] for all;
            PA0SW01.ZZZSDT[3] = PACREC.ZZZSDT;
            PA0SW01.ZZZSTM[3] = PACREC.ZZZSTM;
            PA0SW01.ZZZCHGCT[3] = PACREC.ZZZCHGCT;
          end
        end
      end
    end

    PA0SS21(); /* PUT WORKRECORDS TO TEMP STORAGE*/
  end

  PA0SS22(); /* CLOSE WORK CURSOR*/

end // end PA0S170

// GET wrk type '8' for read only
Function PA0S175()
   /* ---------------------------------------------------*/
    /* PROCESS WORK RECORDS FOR READ ONLY ACCESS.  THIS*/
    /* PROC READS TYPE 6, 7, AND 8 RECORDS.  IT ALSO*/
    /* SUMS BY WAREHOUSE CODE.  LOOK AT RECORD TYPE 8*/
    /* FIRST.  KEEP TRACK OF THE WAREHOUSE CODES FOR THE*/
    /* 8 RECORDS (EX: PA0SW01.PA0SWFI2 = 'Y').  THIS IS*/
    /* BECAUSE, THE PROC ONLY PROCESSES TYEP 6 AND 7*/
    /* RECORDS THAT DO NOT HAVE A TYPE 8 RECORD.*/
   /* ---------------------------------------------------*/

   /* T Y P E  '8'*/

  PA0S176(); /* initialize work record information*/

  PACREC.PACORDTY = "8"; /* PA_ORD_TYP_IND*/

  PA0SS20(); /* Open cursor on work database*/

  PA0SS21(); /* Fetch work records*/

  while (SQLCA.VAGen_SQLCODE == 0)

    PA0S178(); /* type 8 sum by warehouse*/

    PA0SS21(); /* PUT WORK RECORDS TO TEMP STORAGE*/
  end

  PA0SS22(); /* CLOSE WORK CURSOR*/


   /* T Y P E  '6'*/

  PA0S176(); /* initialize work record information*/

  PACREC.PACORDTY = "6"; /* PA_ORD_TYP_IND*/

  PA0S179(); /* process type 6 recs*/

   /* T Y P E  '7'*/

  PA0S176(); /* initialize work record information*/

  PACREC.PACORDTY = "7"; /* PA_ORD_TYP_IND*/

  PA0S179(); /* process type 7 recs*/

end // end PA0S175

// init work rec for ready only
Function PA0S176()
   /* ---------------------------------------------------*/
    /* INITIALIZE WORK RECORDS FOR READ ONLY ACCESS.*/
   /* ---------------------------------------------------*/

  set PACREC empty; /* DPRODG.VPAWRK01*/

  PACREC.ZZZSDT = -1; /* DATE WE ARE WORKING WITH*/
  PACREC.ZZZSTM = -1; /* TIME WE ARE WORKING WITH*/
  PACREC.PA1OANBR = PA1REC.PA1OANBR; /* ADJUSTMENT NUMBER*/
  PACREC.PACGRPCD = "*"; /* PA_PROC_GRP*/
  PACREC.PACSEVAL = "*"; /* PA_USER_PROC_IND*/
  PACREC.XDSCD = "*"; /* DIRECT SHIP CODE*/
  PACREC.PACADDRS = "*"; /* PA_ADJ_DRS_IND*/
  PACREC.FY1FCTYC = "*"; /* FY_FCTY_CD*/
  PACREC.PC3POIDT = -1; /* PO ID MONTH RANGE*/
  PACREC.PC3PONBR = -1; /* PO NUMBER*/
  PACREC.PC6ITMNB = -1; /* ITEM SEQUENCE NUMBER*/
  PACREC.PC6ETSDT = -1; /* ETS DATE*/
  PACREC.PC6RTADT = -1; /* REQUESTED ARRIVAL DATE*/
  PACREC.YMTCD = "*"; /* MODE OF TRANSPORTATION*/
  PACREC.PC2CUXID = "*"; /* CUSTOMER CROSS REFERENCE*/
  PACREC.XWHCD = "*"; /* WILDCARD WAREHOUSE CODE*/

end // end PA0S176

// process work '6' and '7' recs
Function PA0S177()
   /* ---------------------------------------------------*/
    /* SUM BY WAREHOUSE CODE FOR WORK REC TYPES 6 AND 7.*/
   /* ---------------------------------------------------*/

  if (PACREC.XWHCD == " ")
    return;
  end

  if (PA0SW01.PA0SWFI2 != "Y"
   && PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
    PA0SW01.PA0SWFI2 = "Y";
    PA0SW01.PA0SWX6 = 1;

    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL2[PA0SWX6] = PA0SWCL2[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    return;
  end

  if (PA0SW01.PA0SWFI4 != "Y"
   && PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
    PA0SW01.PA0SWFI4 = "Y";
    PA0SW01.PA0SWX6 = 1;

    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL4[PA0SWX6] = PA0SWCL4[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    return;
  end

  if (PA0SW01.PA0SWFI7 != "Y"
   && PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
    PA0SW01.PA0SWFI7 = "Y";
    PA0SW01.PA0SWX6 = 1;

    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL7[PA0SWX6] = PA0SWCL7[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    return;
  end
end // end PA0S177

// type 8 sum by warehouse
Function PA0S178()
   /* ---------------------------------------------------*/
    /* type 8 sum by warehouse.*/
   /* ---------------------------------------------------*/

  if (PACREC.XWHCD == " ")
    return;
  end

  if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[1])
    PA0SW01.PA0SWFI2 = "Y";
    PA0SW01.PACGRP01[1] = PACREC.PACGRP01;
    PA0SW01.PA0SWX6 = 1;
    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL2[PA0SWX6] = PA0SWCL2[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWDJ2[PA0SWX6] = PA0SWDJ2[PA0SWX6] + PACREC.PACADJQT[PA0SWX6];
      PA0SWDD2[PA0SWX6] = PA0SWDD2[PA0SWX6] + PACREC.PACFLADJ[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    PA0SW01.ZZZSDT[1] = PACREC.ZZZSDT;
    PA0SW01.ZZZSTM[1] = PACREC.ZZZSTM;
    PA0SW01.ZZZCHGCT[1] = PACREC.ZZZCHGCT;
    return;
  end

  if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[2])
    PA0SW01.PA0SWFI4 = "Y";
    PA0SW01.PACGRP01[2] = PACREC.PACGRP01;
    PA0SW01.PA0SWX6 = 1;
    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL4[PA0SWX6] = PA0SWCL4[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWDJ4[PA0SWX6] = PA0SWDJ4[PA0SWX6] + PACREC.PACADJQT[PA0SWX6];
      PA0SWDD4[PA0SWX6] = PA0SWDD4[PA0SWX6] + PACREC.PACFLADJ[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    PA0SW01.ZZZSDT[2] = PACREC.ZZZSDT;
    PA0SW01.ZZZSTM[2] = PACREC.ZZZSTM;
    PA0SW01.ZZZCHGCT[2] = PACREC.ZZZCHGCT;
    return;
  end

  if (PACREC.XWHCD == PA0SW00.PA0SW-REGION-WHSE[3])
    PA0SW01.PA0SWFI7 = "Y";
    PA0SW01.PACGRP01[3] = PACREC.PACGRP01;
    PA0SW01.PA0SWX6 = 1;
    while (PA0SW01.PA0SWX6 <= 40)
      PA0SWCL7[PA0SWX6] = PA0SWCL7[PA0SWX6] + PACREC.PACWRKQT[PA0SWX6];
      PA0SWDJ7[PA0SWX6] = PA0SWDJ7[PA0SWX6] + PACREC.PACADJQT[PA0SWX6];
      PA0SWDD7[PA0SWX6] = PA0SWDD7[PA0SWX6] + PACREC.PACFLADJ[PA0SWX6];
      PA0SWX6 = PA0SWX6 + 1;
    end
    PA0SW01.ZZZSDT[3] = PACREC.ZZZSDT;
    PA0SW01.ZZZSTM[3] = PACREC.ZZZSTM;
    PA0SW01.ZZZCHGCT[3] = PACREC.ZZZCHGCT;
    return;
  end

end // end PA0S178

// process work records
Function PA0S179()
   /* ---------------------------------------------------*/
    /* PROCESS WORK RECORDS*/
   /* ---------------------------------------------------*/

  PA0SS20(); /* Open cursor on work database*/

  PA0SS21(); /* Fetch work records*/

  while (SQLCA.VAGen_SQLCODE == 0)

    PA0S177(); /* sum by warehouse code*/

    PA0SS21(); /* PUT WORK RECORDS TO TEMP STORAGE*/

  end

  PA0SS22(); /* CLOSE WORK CURSOR*/
end // end PA0S179

// BUILD FACTORY RECS
Function PA0S180()
   /* *****************************************************/
   /* BUILD FACTORY DATA ON MAP ONE AND TWO*/
   /* *****************************************************/

  set PA4REC empty; /* FACTORY RECORD*/
  sysVar.arrayIndex = 0;

  PA4REC.PA1OANBR = PAWREC.PAWOANBR;
  PA4REC.YESCD = "*";

  PA0SS23(); /* OPEN FACTORY CURSOR*/

  PA0SS24(); /* FETCH FACTORY CURSOR*/

  while (SQLCA.VAGen_SQLCODE == 0)

    PA0SS24(); /* FETCH FACTORY CURSOR*/

  end

  PA0SS25(); /* CLOSE FACTORY CURSOR*/

end // end PA0S180

// DISPLAY MAP
Function PA0S200()
   /* ******************************************************/
   /* DECIDE WHICH MAP TO DISPLAY*/
   /* ******************************************************/

  if (PA0SW01.PA0SWMN == 1)
    if (PA0SW01.PA0SWROS == "Y")
      set PA0SM001.CATOAP cursor;
      sysVar.arrayIndex = 1;
      while (sysVar.arrayIndex <= PA0SW00.PA0SW-MAX-COLUMNS)
        if (PA0SM001.SY4IDDSC[sysVar.arrayIndex] != " ")
          set PA0SMBQ2[sysVar.arrayIndex] skip;
          set PA0SMBQ4[sysVar.arrayIndex] skip;
          set PA0SMBQ7[sysVar.arrayIndex] skip;
        else
          set PA0SMBQ2[sysVar.arrayIndex] skip, invisible;
          set PA0SMBQ4[sysVar.arrayIndex] skip, invisible;
          set PA0SMBQ7[sysVar.arrayIndex] skip, invisible;
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    else
       /* END ; added else for PA#225*/

       /* for map1 - determine where the cursor needs to be*/
       /* based on the valid warehouse codes.  start from*/
       /* the bottom.*/

      if (PA0SW01.PA0SWFI7 == "Y")
        set PA0SM001.PA0SMBQ7[1] cursor;
      end
      if (PA0SW01.PA0SWFI4 == "Y")
        set PA0SM001.PA0SMBQ4[1] cursor;
      end
      if (PA0SW01.PA0SWFI2 == "Y")
        set PA0SM001.PA0SMBQ2[1] cursor;
      end
    end
    PA0S210(); /* DISPLAY MAP ONE*/
  else
    if (PA0SW01.PA0SWROS == "Y")
      set PA0SM001.CATOAP cursor;
    end
    PA0S220(); /* DISPLAY MAP TWO*/
  end

end // end PA0S200

// WAREHOUSE MAP
Function PA0S210()
   /* ***********************************************************/

  PA0SM001.XXXCURDT = VGVar.currentShortGregorianDate;

  if (PA0SW01.PA0SWFI2 != "Y") /* warehouse '02' not valid for style*/
    PA0SWX5 = 1; /* set index = 0*/
    set PA0SMTB2 skip, invisible; /* protect totals*/
    set PA0SMTN2 skip, invisible; /* protect totals*/
    set PA0SMTBP[1] skip, invisible; /* protect totals*/
    set PA0SMTSP[1] skip, invisible; /* protect totals*/
    while (PA0SWX5 <= PA0SW00.PA0SW-MAX-COLUMNS)
      set PA0SMBQ2[PA0SWX5] skip, invisible; /* protect/darken buy qty*/
      set PA0SMNB2[PA0SWX5] skip, invisible; /* protect/darken new bottom line*/
      set PA0SMBP2[PA0SWX5] skip, invisible; /* protect/darken bottom line %*/
      set PA0SMPS2[PA0SWX5] skip, invisible; /* protect/darken standard size %*/
      PA0SWX5 = PA0SWX5 + 1; /* ; increment index*/
    end
  end

  if (PA0SW01.PA0SWFI4 != "Y") /* warehouse '04' not valid for style*/
    PA0SWX5 = 1; /* set index = 0*/
    set PA0SMTB4 skip, invisible; /* protect totals*/
    set PA0SMTN4 skip, invisible; /* protect totals*/
    set PA0SMTBP[2] skip, invisible; /* protect totals*/
    set PA0SMTSP[2] skip, invisible; /* protect totals*/
    while (PA0SWX5 <= PA0SW00.PA0SW-MAX-COLUMNS)
      set PA0SMBQ4[PA0SWX5] skip, invisible; /* protect/darken buy qty*/
      set PA0SMNB4[PA0SWX5] skip, invisible; /* protect/darken new bottom line*/
      set PA0SMBP4[PA0SWX5] skip, invisible; /* protect/darken bottom line %*/
      set PA0SMPS4[PA0SWX5] skip, invisible; /* protect/darken standard size %*/
      PA0SWX5 = PA0SWX5 + 1; /* ; increment index*/
    end
  end

  if (PA0SW01.PA0SWFI7 != "Y") /* warehouse '07' not valid for style*/
    PA0SWX5 = 1; /* set index = 0*/
    set PA0SMTB7 skip, invisible; /* protect totals*/
    set PA0SMTN7 skip, invisible; /* protect totals*/
    set PA0SMTBP[3] skip, invisible; /* protect totals*/
    set PA0SMTSP[3] skip, invisible; /* protect totals*/
    while (PA0SWX5 <= PA0SW00.PA0SW-MAX-COLUMNS)
      set PA0SMBQ7[PA0SWX5] skip, invisible; /* protect/darken buy qty*/
      set PA0SMNB7[PA0SWX5] skip, invisible; /* protect/darken new bottom line*/
      set PA0SMBP7[PA0SWX5] skip, invisible; /* protect/darken bottom line %*/
      set PA0SMPS7[PA0SWX5] skip, invisible; /* protect/darken standard size %*/
      PA0SWX5 = PA0SWX5 + 1; /* ; increment index*/
    end
  end

  if (PAWREC.XXXMSGNO > 0)
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end
    PAWREC.XXXMSGNO = 0;
  else
    if (PA0SW01.PA0SWROS == "Y"
     && converseVar.validationMsgNum != 5) /* INVALID KEY*/
      converseLib.validationFailed(72); /* status allows read only message*/
    end
  end

  XX1 = 1;
  while (XX1 <= 3)
    if (PA0SW00.PA0SW-REGION-WHSE[XX1] == " ")
      set PA0SM001.PA0SM-BUY[XX1] skip, invisible;
      set PA0SM001.PA0SM-NEW-BL[XX1] skip, invisible;
      set PA0SM001.PA0SM-BL-PCT[XX1] skip, invisible;
      set PA0SM001.PA0SM-STD-SZ-PCT[XX1] skip, invisible;
    else
      if (PA0SW00.PA0SW-REGION-WHSE[XX1] in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          PA0SM001.PA0SM-WHSE-LBL[XX1] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        end
      end

        /* IF EUROPEAN O/A, ALLOW INQUIRY ONLY*/

      if (PA0SM001.PA1OANBR > 199999
       && PA0SM001.PA1OANBR < 300000)
        PA0SWX5 = 1; /* set index = 0*/
        while (PA0SWX5 <= PA0SW00.PA0SW-MAX-COLUMNS)
          if (XX1 == 1)
            set PA0SMBQ2[PA0SWX5] skip; /* protect buy qty*/
          else
            if (XX1 == 2)
              set PA0SMBQ4[PA0SWX5] skip; /* protect buy qty*/
            else
              set PA0SMBQ7[PA0SWX5] skip; /* protect buy qty*/
            end
          end
          PA0SWX5 = PA0SWX5 + 1; /* ; increment index*/
        end
      end
    end
    XX1 = XX1 + 1;
  end

  if (PA0SM001.PA1OANBR > 199999
   && PA0SM001.PA1OANBR < 300000)
    set PA0SM001.PA0SM-PF9-LABEL skip, invisible;
  end

  converse PA0SM001 ;
end // end PA0S210

// CORPORATE MAP
Function PA0S220()
   /* GET PA0S210*/
   /* ***********************************************************/

  PA0SM002.XXXCURDT = VGVar.currentShortGregorianDate;

  if (PAWREC.XXXMSGNO > 0)
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end
    PAWREC.XXXMSGNO = 0;
  else
    if (PA0SW01.PA0SWROS == "Y")
      converseLib.validationFailed(72); /* status allows read only message*/
    end
  end

  converse PA0SM002 ;
end // end PA0S220

// UPDATE WORKING STORAGE
Function PA0S320()
   /* ****************************************************/
   /* ALL THIS DOES IS FIND THE POINT IN WORKING STORAGE*/
   /* THAT CORRISPONDS TO THE FIRST SIZE ON THE MAP*/
   /* THEN ADJUSTS THE ADJUSTMENT QUANTITY ACCORDINGLY*/
   /* BASED ON THE NEW QUANTITY THE USER KEYED IN*/
   /* ****************************************************/

  move PA0SWX3 to PA0SWX1 withV60Compat;

  PA0SWX1 = PA0SWX1 - PA0SW00.PA0SW-MAX-COLUMNS;

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= PA0SW00.PA0SW-MAX-COLUMNS)

    PA0SWX1 = PA0SWX1 + 1;

    if (PG3REC.SY5SZID[PA0SWX1] > 0)
      PA0SWX2 = PG3REC.SY5SZID[PA0SWX1];
      PA0SWDIF = PA0SMBQ2[sysVar.arrayIndex] - PA0SW01.PA0SWCL2[PA0SWX2];
      PA0SWAD2[PA0SWX2] = PA0SWAD2[PA0SWX2] + PA0SWDIF;
      PA0SWCL2[PA0SWX2] = PA0SMBQ2[sysVar.arrayIndex];
      PA0SWDIF = PA0SMBQ4[sysVar.arrayIndex] - PA0SW01.PA0SWCL4[PA0SWX2];
      PA0SWAD4[PA0SWX2] = PA0SWAD4[PA0SWX2] + PA0SWDIF;
      PA0SWCL4[PA0SWX2] = PA0SMBQ4[sysVar.arrayIndex];
      PA0SWDIF = PA0SMBQ7[sysVar.arrayIndex] - PA0SW01.PA0SWCL7[PA0SWX2];
      PA0SWAD7[PA0SWX2] = PA0SWAD7[PA0SWX2] + PA0SWDIF;
      PA0SWCL7[PA0SWX2] = PA0SMBQ7[sysVar.arrayIndex];
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
end // end PA0S320

// MOVE NON SIZE DATA TO MAP'S
Function PA0S600()
   /* ***********************************************************/
    /* SETUP NON SIZE DATA TO MAP ONE*/
   /* ----------------------------------------------------------*/
   /* THEN EXECUTE THE PROCESS TO MOVE SIZE RELATED DATA*/
   /* ***********************************************************/


  PA0SM001.PA1OANBR = PA1REC.PA1OANBR;
  PA0SM002.PA1OANBR = PA1REC.PA1OANBR;
  PA0SM001.SY1STNBR = PA1REC.SY1STNBR;
  PA0SM002.SY1STNBR = PA1REC.SY1STNBR;
  PA0SM001.SY2CLRID = PA1REC.SY2CLRID;
  PA0SM002.SY2CLRID = PA1REC.SY2CLRID;
  PA0SM001.XDMCD = PA1REC.XDMCD;
  PA0SM002.XDMCD = PA1REC.XDMCD;
  PA0SM001.SY1SSTNM = PG2REC.SY1SSTNM;
  PA0SM002.SY1SSTNM = PG2REC.SY1SSTNM;
   /* MOVE PG2REC.SY2CLRAB TO PA0SM001.SY2CLRAB;*/
  PA0SM002.SY2CLRAB = PG2REC.SY2CLRAB;
  PA0SM001.YETCD = PA1REC.YETCD;
  PA0SM002.YETCD = PA1REC.YETCD;

  if (PA1REC.YETCD in YETTBL.YETCD)
    PA0SM001.YETABRV = YETTBL.YETABRV[sysVar.arrayIndex];
    PA0SM002.YETABRV = YETTBL.YETABRV[sysVar.arrayIndex];
  end

  PA0SM001.YESCD = PA1REC.YESCD;

  if (PA1REC.YESCD in YESTBL.YESCD)
    PA0SM001.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
    PA0SM002.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
  end

  PA0SM001.FB8BUYDT = PAWBUYYM;
  PA0SM002.FB8BUYDT = PAWBUYYM;


  PA0SM001.PA0SMSCR = PA0SW00.PA0SW-MAX-COLUMNS; /* SCROLL AMOUNT*/
  PA0SM002.PA0SMSCR = PA0SW00.PA0SW-MAX-COLUMNS; /* SCROLL AMOUNT*/

  PA0SWX3 = 0;
  PA0SWX4 = 0;

  PA0S610(); /* MOVE SIZE RELATED DATA*/

  PA0S620(); /* COMPUTE BOTTOM LINE PCT*/
end // end PA0S600

// MOVE SIZE RELATED DATA
Function PA0S610()
   /* ******************************************************/
    /* MOVE SIZE RELATED DATA*/
   /* ******************************************************/

  if (converseVar.eventKey is pf11)
    PA0SWX4 = PA0SM001.PA0SMSCR;
    PA0SWX4 = PA0SWX4 - PA0SW00.PA0SW-MAX-COLUMNS;
    PA0SWX3 = PA0SWX3 + PA0SWX4;
  end

  move " " to PA0SM001.SY4IDDSC[1] for all;
  move " " to PA0SM002.SY4IDDSC[1] for all;

  move 0 to PA0SMBQ2[1] for all;
  move 0 to PA0SMBQ4[1] for all;
  move 0 to PA0SMBQ7[1] for all;
  move 0 to PA0SMBQC[1] for all;

  move 0 to PA0SMNB2[1] for all;
  move 0 to PA0SMNB4[1] for all;
  move 0 to PA0SMNB7[1] for all;
  move 0 to PA0SMNBC[1] for all;

  move 0 to PA0SMPS2[1] for all;
  move 0 to PA0SMPS4[1] for all;
  move 0 to PA0SMPS7[1] for all;
  move 0 to PA0SMPSC[1] for all;

  PA0SM001.PA0SMTB2 = 0;
  PA0SM001.PA0SMTB4 = 0;
  PA0SM001.PA0SMTB7 = 0;
  PA0SM002.PA0SMTBC = 0;

  PA0SM001.PA0SMTN2 = 0;
  PA0SM001.PA0SMTN4 = 0;
  PA0SM001.PA0SMTN7 = 0;
  PA0SM002.PA0SMTNC = 0;

  move 0 to PA0SMBP2[1] for all;
  move 0 to PA0SMBP4[1] for all;
  move 0 to PA0SMBP7[1] for all;
  move 0 to PA0SMBPC[1] for all;

   /* THE CURRENT BOTTOM LINE SHOULD INCLUDE ADJUSTMENTS FROM THE*/
   /* OPEN O/AS.*/
  PA0S-61001();

   /* COMPUTE BOTTOM LINE PERCENT*/

  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

     /* IF PA0SWFI2 = 'Y'*/
    PA0SM001.PA0SMTB2 = PA0SW01.PA0SWCL2[sysVar.arrayIndex] + PA0SMTB2;
    PA0SM001.PA0SMTN2 = PA0SM001.PA0SMTN2                      + PA0SW01.PA0SWBL2[sysVar.arrayIndex]                      + PA0SW01.PA0SWAD2[sysVar.arrayIndex]                      + PA0SW01.PA0SW-BL-WITH-OAS1[sysVar.arrayIndex];
     /* END*/
     /* IF PA0SWFI4 = 'Y'*/
    PA0SM001.PA0SMTB4 = PA0SW01.PA0SWCL4[sysVar.arrayIndex] + PA0SMTB4;
    PA0SM001.PA0SMTN4 = PA0SM001.PA0SMTN4                      + PA0SW01.PA0SWBL4[sysVar.arrayIndex]                      + PA0SW01.PA0SWAD4[sysVar.arrayIndex]                      + PA0SW01.PA0SW-BL-WITH-OAS2[sysVar.arrayIndex];
     /* END*/
     /* IF PA0SWFI7 = 'Y'*/
    PA0SM001.PA0SMTB7 = PA0SW01.PA0SWCL7[sysVar.arrayIndex] + PA0SMTB7;
    PA0SM001.PA0SMTN7 = PA0SM001.PA0SMTN7                      + PA0SW01.PA0SWBL7[sysVar.arrayIndex]                      + PA0SW01.PA0SWAD7[sysVar.arrayIndex]                      + PA0SW01.PA0SW-BL-WITH-OAS3[sysVar.arrayIndex];
     /* END*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1;

  end

  PA0SMTNC = PA0SMTN2 + PA0SMTN4 + PA0SMTN7;

  PA0SMTBC = PA0SMTB2 + PA0SMTB4 + PA0SMTB7;
  PA0SM001.PA0SM-TOTAL-ADJ = PA0SMTBC;

  PA0SWX4 = 1;

  while (PA0SWX4 <= PA0SW00.PA0SW-MAX-COLUMNS)

    PA0SWX3 = PA0SWX3 + 1;
    if (PA0SWX3 > 40)
      PA0SWX3 = 40;
    else
      if (PA0SWX3 <= 0)
        PA0SWX3 = 1;
      end
    end

    if (PG3REC.SY4IDDSC[PA0SWX3] == " ")
      set PA0SM001.SY4IDDSC[PA0SWX4] skip, invisible;
      set PA0SM002.SY4IDDSC[PA0SWX4] skip, invisible;
      set PA0SMBQ2[PA0SWX4] skip, invisible;
      set PA0SMBQ4[PA0SWX4] skip, invisible;
      set PA0SMBQ7[PA0SWX4] skip, invisible;
      set PA0SMBQC[PA0SWX4] skip, invisible;
      set PA0SMNB2[PA0SWX4] skip, invisible;
      set PA0SMNB4[PA0SWX4] skip, invisible;
      set PA0SMNB7[PA0SWX4] skip, invisible;
      set PA0SMNBC[PA0SWX4] skip, invisible;
      set PA0SMBP2[PA0SWX4] skip, invisible;
      set PA0SMBP4[PA0SWX4] skip, invisible;
      set PA0SMBP7[PA0SWX4] skip, invisible;
      set PA0SMBPC[PA0SWX4] skip, invisible;
      set PA0SMPS2[PA0SWX4] skip, invisible;
      set PA0SMPS4[PA0SWX4] skip, invisible;
      set PA0SMPS7[PA0SWX4] skip, invisible;
      set PA0SMPSC[PA0SWX4] skip, invisible;
    else
      set PA0SM001.SY4IDDSC[PA0SWX4] initialAttributes;
      set PA0SM002.SY4IDDSC[PA0SWX4] initialAttributes;
      PA0SM001.SY4IDDSC[PA0SWX4] = PG3REC.SY4IDDSC[PA0SWX3];
      PA0SM002.SY4IDDSC[PA0SWX4] = PG3REC.SY4IDDSC[PA0SWX3];
      PA0SWX1 = PG3REC.SY5SZID[PA0SWX3];
      /* IF PA0SWFI7 = 'Y';*/
      set PA0SMBQ7[PA0SWX4] initialAttributes;
      set PA0SMNB7[PA0SWX4] initialAttributes;
      set PA0SMBP7[PA0SWX4] initialAttributes;
      set PA0SMPS7[PA0SWX4] initialAttributes;
      PA0SMBQ7[PA0SWX4] = PA0SWCL7[PA0SWX1];
      PA0SMNB7[PA0SWX4] = PA0SWBL7[PA0SWX1]                       + PA0SWAD7[PA0SWX1]                       + PA0SW-BL-WITH-OAS3[PA0SWX1];
      if (PA0SMNB7[PA0SWX4] == 0
       || PA0SMTN7 == 0)
        PA0SMBP7[PA0SWX4] = 0;
      else
        PA0SMBP7[PA0SWX4] = PA0SMNB7[PA0SWX4] * 100 / PA0SMTN7;
      end
      PA0SMPS7[PA0SWX4] = PA0SWPF7[PA0SWX1];
      /* END ;*/

      /* IF PA0SWFI4 = 'Y';*/
      set PA0SMBQ4[PA0SWX4] initialAttributes;
      set PA0SMNB4[PA0SWX4] initialAttributes;
      set PA0SMBP4[PA0SWX4] initialAttributes;
      set PA0SMPS4[PA0SWX4] initialAttributes;
      PA0SMBQ4[PA0SWX4] = PA0SWCL4[PA0SWX1];
      PA0SMNB4[PA0SWX4] = PA0SWBL4[PA0SWX1]                       + PA0SWAD4[PA0SWX1]                       + PA0SW-BL-WITH-OAS2[PA0SWX1];
      if (PA0SMNB4[PA0SWX4] == 0
       || PA0SMTN4 == 0)
        PA0SMBP4[PA0SWX4] = 0;
      else
        PA0SMBP4[PA0SWX4] = PA0SMNB4[PA0SWX4] * 100 / PA0SMTN4;
      end
      PA0SMPS4[PA0SWX4] = PA0SWPF4[PA0SWX1];
      /* ND ;*/

      /* IF PA0SWFI2 = 'Y';*/
      set PA0SMBQ2[1] cursor;
      set PA0SMBQ2[PA0SWX4] initialAttributes;
      set PA0SMNB2[PA0SWX4] initialAttributes;
      set PA0SMBP2[PA0SWX4] initialAttributes;
      set PA0SMPS2[PA0SWX4] initialAttributes;
      PA0SMBQ2[PA0SWX4] = PA0SWCL2[PA0SWX1];
      PA0SMNB2[PA0SWX4] = PA0SWBL2[PA0SWX1]                       + PA0SWAD2[PA0SWX1]                       + PA0SW-BL-WITH-OAS1[PA0SWX1];
      if (PA0SMNB2[PA0SWX4] == 0
       || PA0SMTN2 == 0)
        PA0SMBP2[PA0SWX4] = 0;
      else
        PA0SMBP2[PA0SWX4] = PA0SMNB2[PA0SWX4] * 100 / PA0SMTN2;
      end
      PA0SMPS2[PA0SWX4] = PA0SWPF2[PA0SWX1];
      /* ND ;*/

      set PA0SMBQC[PA0SWX4] initialAttributes;
      set PA0SMBPC[PA0SWX4] initialAttributes;
      set PA0SMNBC[PA0SWX4] initialAttributes;
      set PA0SMPSC[PA0SWX4] initialAttributes;
      PA0SMBQC[PA0SWX4] = PA0SMBQ2[PA0SWX4] + PA0SMBQ4[PA0SWX4];
      PA0SMBQC[PA0SWX4] = PA0SMBQC[PA0SWX4] + PA0SMBQ7[PA0SWX4];
      PA0SMNBC[PA0SWX4] = PA0SMNB2[PA0SWX4] + PA0SMNB4[PA0SWX4];
      PA0SMNBC[PA0SWX4] = PA0SMNBC[PA0SWX4] + PA0SMNB7[PA0SWX4];
      if (PA0SMNBC[PA0SWX4] == 0
       || PA0SMTNC == 0)
        /* NEXT SENTENCE*/
      else
        PA0SMBPC[PA0SWX4] = PA0SMNBC[PA0SWX4] * 100 / PA0SMTNC;
      end
      PA0SMPSC[PA0SWX4] = PA0SWPFC[PA0SWX1];
      if (PAJ1WVSZ[PA0SWX1] != "Y")
        set PA0SM001.SY4IDDSC[PA0SWX4] skip, bold;
      end
    end

    PA0SWX4 = PA0SWX4 + 1;
  end

end // end PA0S610

// COMPUTE BOTTOM LINE PERCENT
Function PA0S620()
   /* *******************************************************/
   /* 1. COMPUTE TOTAL ADJUSTMENT QTYS*/
   /* 2. COMPUTE TOTAL DIFF BETWEEN ADJUSTMENT AND B/L QTY*/
   /* 3. COMPUTE TRUE ADJUSTED B/L PERCENTAGE*/
   /* *******************************************************/

  if (PA0SMTNC == 0)
    PA0SMTBP[1] = 0;
    PA0SMTBP[2] = 0;
    PA0SMTBP[3] = 0;
  else
    PA0S-62001();
  end

  PA0SMTSP[1] = PA0SW01.PA0SWGG2;
  PA0SMTSP[2] = PA0SW01.PA0SWGG4;
  PA0SMTSP[3] = PA0SW01.PA0SWGG7;

  if (PA0SWTLS == "Y")
     /* NEXT SENTENCE*/
  else
    PA0SW01.PA0SWTOL = PA0SMTBC;
    PA0SWTLS = "Y";
  end
end // end PA0S620

// CHECK quantities entered
Function PA0S630()
   /* ----------------------------------------------------------------*/
   /* Check to see if quantities adjusted fall within range.*/
   /* ----------------------------------------------------------------*/

  PA0SW01.PA0SWDIF = 0;

  PA0SW01.PA0SWDIF = PA0SMTBC - PA0SW01.PA0SWTOL;

  if (PA0SW01.PA0SWDIF > FB9REC.FB9BTQTY) /* User adj more than 240 higher*/
    PAWREC.XXXMODID = "630";
    converseLib.validationFailed(102);
    exit stack;
  else
    PA0SW01.PA0SWLMT = FB9REC.FB9BTQTY * -1;
    if (PA0SW01.PA0SWDIF < PA0SW01.PA0SWLMT) /* user subtrctd > 240 pieces*/
      PAWREC.XXXMODID = "630";
      converseLib.validationFailed(103);
      exit stack;
    end
  end

   /* ----------------- END OF PA0S630 ------------------------------------*/
end // end PA0S630

// SUBMIT FACTORY SPLIT
Function PA0S700()
   /* ------------------------------------------------------------*/
   /* P R O D U C T I O N   J C L*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PA0SW01.PA0SWX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0SW01.PA0SWX1 > 0) /* Until end of table*/

    if (PA0ST01.TARTYPE[PA0SWX1] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0ST01.TARTYPE[PA0SWX1]; /* Type*/

      PA0SS40(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0ST01.TARJCL[PA0SWX1]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0ST01.TARTYPE[PA0SWX1]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0ST01.TARJCL[PA0SWX1] == "/*EOF") /* End of table*/

      PA0SW01.PA0SWX1 = 0; /* Indicate end of table*/

    else

      PA0SW01.PA0SWX1 = PA0SW01.PA0SWX1 + 1; /* Increment table index*/

    end

  end


  PA0SS41(); /* Submit the JCL*/


end // end PA0S700

// SUBMIT FACTORY SPLIT
Function PA0S710()
   /* ------------------------------------------------------------*/
   /* T E S T  J C L*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  PA0SW01.PA0SWX1 = 1; /* Initialize table index*/
  TA6REC.TA6INDEX = 1;
                                   /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (PA0SW01.PA0SWX1 > 0) /* Until end of table*/

    if (PA0ST11.TARTYPE[PA0SWX1] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format program parameters*/
      /* ------------------------------------------------------------*/

      TA6REC.TARTYPE[TA6INDEX] = PA0ST11.TARTYPE[PA0SWX1]; /* Type*/

      PA0SS40(); /* formats JCL*/

    else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PA0ST11.TARJCL[PA0SWX1]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PA0ST11.TARTYPE[PA0SWX1]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PA0ST11.TARJCL[PA0SWX1] == "/*EOF") /* End of table*/

      PA0SW01.PA0SWX1 = 0; /* Indicate end of table*/

    else

      PA0SW01.PA0SWX1 = PA0SW01.PA0SWX1 + 1; /* Increment table index*/

    end

  end


  PA0SS41(); /* Submit the JCL*/


end // end PA0S710

// OPEN CURSOR O/A BOTTOM LINES
Function PA0SS-10-PA1050-S()
   /* -----------------------------------------------------*/
   /* OPEN CURSOR ON THE O/A BOTTOM LINE RECORDS*/
   /* -----------------------------------------------------*/

  try
    call "PA1050" (PA0SW02, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS10 OPEN CURSOR O/A WORK  ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS-10-PA1050-S

// FETCH O/A BOTTOM LINES
Function PA0SS-11-PA1050-N()
   /* -----------------------------------------------------*/
   /* FETCH NEXT O/A BOTTOM LINE RECORD*/
   /* -----------------------------------------------------*/

  try
    call "PA1050" (PA0SW02, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS11 FETCH NEXT TYPE 9 WORK";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS-11-PA1050-N

// CLOSE BOTTOM LINE RECORDS
Function PA0SS-12-PA1050-C()
   /* -----------------------------------------------------*/
   /* CLOSE O/A BOTTOM LINE TABLE*/
   /* -----------------------------------------------------*/

  try
    call "PA1050" (PA0SW02, SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS12 CLOSE O/A TYPE 9 WORK ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS-12-PA1050-C

// select set dcorp.vsumcd01
Function PA0SS-13-IO2640-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DCORP.VSUMCD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0SS13"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end PA0SS-13-IO2640-S1

// fetch dcorp.vsumcd01 row
Function PA0SS-14-IO2640-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for Vsumcd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SUM DIV ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0SS14"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = YSMREC.YSMGRP; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end PA0SS-14-IO2640-N1

// close dcorp.vsumcd01
Function PA0SS-15-IO2640-C1()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  PAWREC.XXXMODID = "S17"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VSUMCD01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0SS15"; /* Program number*/
  TA1REC.TA1DBASE = "DCORP    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end PA0SS-15-IO2640-C1

// GET O/A HEADER UNIQUE
Function PA0SS01()
   /* -------------------------------------------------*/
   /* SELECT SET FOR O/A HEADERS*/
   /* -------------------------------------------------*/

  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS01 GET O/A HEADER        ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                        /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end PA0SS01

// OPEN BOTTOM LINE CURSOR
Function PA0SS02()
   /* -----------------------------------------------------*/
   /* OPEN CURSOR FOR BOTTOM LINE*/
   /* -----------------------------------------------------*/


  /*  */
  /* *************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO5090 'S1',SQLCA,PA5REC (NONCSP,NOMAPS,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VBOTLN02" ("S1", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* *************************** Y2K IN END *******************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS02 DELETE TYPE ONE WORK  ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS02

// FETCH BOTTOM LINE RECORDS
Function PA0SS03()
   /* -----------------------------------------------------*/
   /* FETCH BOTTOM LINE RECORD*/
   /* -----------------------------------------------------*/


  /*  */
  /* *************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO5090 'N1',SQLCA,PA5REC (NONCSP,NOMAPS,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VBOTLN02" ("N1", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* *************************** Y2K IN END *******************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS03 SELECT BOTTOM LINE    ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS03

// CLOSE BOTTOM LINE CURSOR
Function PA0SS04()
end // end PA0SS04

// OPEN STD PCT CURSOR
Function PA0SS05()
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("S4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PA0SM001.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S05"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/


end // end PA0SS05

// FETCH STD PCT RECORD
Function PA0SS06()
   /* ------------------------------------------------------------*/
   /* FETCH A ROW FROM SIZE/ REGION*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("N4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PA0SM001.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH RECORD        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S06"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/


end // end PA0SS06

// CLOSE STD PCT CURSOR
Function PA0SS07()
   /* ------------------------------------------------------------*/
   /* CLOSE SIZE/ REGION CURSOR*/
   /* ------------------------------------------------------------*/

  try
    call "IO3020" ("C4", SQLCA, FB4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PA0SM001.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE               ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S07"; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCURVE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FB4REC.FB4GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/


end // end PA0SS07

// DELETE BOTTOMLINE RECORDS
Function PA0SS08()
   /* GET PA0SS08*/
   /* -----------------------------------------------------*/
   /* FETCH BOTTOM LINE*/
   /* -----------------------------------------------------*/


  /*  */
  /* *************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO5090 'D ',SQLCA,PA5REC (NONCSP,NOMAPS,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END *******************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VBOTLN02" ("D ", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* *************************** Y2K IN END ********************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS08 DELETE O/A BOTTOMLINE ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS08

// ADD BOTTOMLINE RECORDS
Function PA0SS09()
   /* GET PA0SS09*/
   /* -----------------------------------------------------*/
   /* ADD BOTTOM LINE ROWS*/
   /* -----------------------------------------------------*/


  /*  */
  /* *************************** Y2K OUT BEGIN ****************************/
  /*  */
  /* CALL IO5090 'A ',SQLCA,PA5REC (NONCSP,NOMAPS,REPLY;*/
  /*  */
  /* *************************** Y2K OUT END ******************************/
  /*  */
  /*  */
  /* *************************** Y2K IN BEGIN *****************************/
  /*  */
  try
    call "VBOTLN02" ("A ", SQLCA, PA5REC) {isNoRefresh = yes, isExternal = yes};
  end
  /*  */
  /* *************************** Y2K IN END *******************************/
  /*  */

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
  end

  PAWREC.XXXMSGNO = 10;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PA0SS09  ADD   O/A BOTTOMLINE ";
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VBOTLN01"; /* Table view name*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

  exit stack;
end // end PA0SS09

// OPEN WORK CURSOR
Function PA0SS20()
   /* ----------------------------------------------------*/
   /* DECLARE WORK CURSOR*/
   /* ----------------------------------------------------*/


  try
    call "IO4950" ("S1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end

    PA0SM001.XXXMODID = "S20";
    PA0SM002.XXXMODID = "S20";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS21 GET WORK DATABASE     ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
    /* MOVE PACREC.PA1OANBR TO TA1REC.TA1TBLKE; Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS20

// FETCH WORK RECORD
Function PA0SS21()
   /* ----------------------------------------------------*/
    /* FETCH WORK RECORD*/
   /* ----------------------------------------------------*/


  try
    call "IO4950" ("N1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end

    PA0SM001.XXXMODID = "S23";
    PA0SM002.XXXMODID = "S23";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS21 GET WORK DATABASE     ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
    /* MOVE PACREC.PA1OANBR TO TA1REC.TA1TBLKE; Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS21

// CLOSE WORK CURSOR
Function PA0SS22()
   /* -------------------------------------------------*/
    /* CLOSE WORK DATABASE*/
   /* -------------------------------------------------*/

  try
    call "IO4950" ("C1", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    PA0SM001.XXXMODID = "S23";
    PA0SM002.XXXMODID = "S23";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS21 CLS WORK DATABASE     ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
    /* MOVE PACREC.PA1OANBR TO TA1REC.TA1TBLKE; Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS22

// OPEN FACTORY CURSOR
Function PA0SS23()
   /* -------------------------------------------------*/
    /* SELECT SET FOR O/A FACTORY RECORDS*/
   /* -------------------------------------------------*/


  try
    call "IO4810" ("S1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        PA0SM001.XXXMODID = "S23";
        PA0SM002.XXXMODID = "S23";
        converseLib.validationFailed(15);
        exit stack;
      end

      PA0SM001.XXXMODID = "S23";
      PA0SM002.XXXMODID = "S23";
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PA0SS23 GET O/A FACTORY RECS  ";
      TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
      TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
      SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
      exit stack;
    end
  end

end // end PA0SS23

// FETCH FACTORY RECORD
Function PA0SS24()
   /* -----------------------------------------------------*/
    /* FETCH FACTORY ROWS*/
   /* -----------------------------------------------------*/


  try
    call "IO4810" ("N1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PA4REC.YESCD == "98")
         /* NEXT SENTENCE*/
      else
        if (PA4REC.YESCD == "84")
           /* NEXT SENTENCE*/
        else
          if (PA4REC.YESCD == "18")
             /* NEXT SENTENCE*/
          else
            if (PA4REC.YESCD == "96")
               /* NEXT SENTENCE*/
            else

              sysVar.arrayIndex = sysVar.arrayIndex + 1;
              PA0SM001.FY1FCTYC[sysVar.arrayIndex] = PA4REC.FY1FCTYC;
              PA0SM002.FY1FCTYC[sysVar.arrayIndex] = PA4REC.FY1FCTYC;
              PA0SM001.PA4FPCT[sysVar.arrayIndex] = PA4REC.PA4FPCT;
              PA0SM002.PA4FPCT[sysVar.arrayIndex] = PA4REC.PA4FPCT;
            end
          end
        end
      end
    end
    return;

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    end

    PA0SM001.XXXMODID = "S10";
    PA0SM002.XXXMODID = "S10";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS24 GET FACTORY RECORD    ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
    TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

  if (sysVar.errorCode != "00000000") /* Call successful*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS24 GET GROUP CODE        ";
    TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VDNORD01"; /* Table view name*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS24

// CLOSE FACTORY CURSOR
Function PA0SS25()
   /* --------------------------------------------*/
    /* CLOSE FACTORY CURSOR*/
   /* --------------------------------------------*/


  try
    call "IO4810" ("C1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    PA0SM001.XXXMODID = "S25";
    PA0SM002.XXXMODID = "S25";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS25 GET GROUP CODE        ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
    TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS25

// UPDATE WORK RECORDS
Function PA0SS30()
   /* ----------------------------------------------------*/
    /* UPDATE WORK RECORD*/
   /* ----------------------------------------------------*/


  try
    call "IO4950" ("U ", SQLCA, PACREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    PA0SM001.XXXMODID = "S30";
    PA0SM002.XXXMODID = "S30";
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "PA0SS30 UPDATE WORK DATABASE  ";
    TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPAWRK01"; /* Table view name*/
    TA1REC.TA1TBLKE = PACREC.PACGRP01; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    exit stack;
  end

end // end PA0SS30

// FORMAT PARM CARD
Function PA0SS40()
   /* ------------------------------------------------------------*/
   /* format the parm card.  also format a comment card which*/
   /* looks like the parm card*/
   /* ------------------------------------------------------------*/

  PA0SW01.PA0SWCMT = "//*"; /* indicate a comment jcl card*/

  PA0SW01.PA0SWOAJ = PA0SM001.PA1OANBR;
  TA6REC.TARJCL[TA6INDEX] = PA0SW01.PA0SWPRM; /* jcl*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
  TA6REC.TARJCL[TA6INDEX] = PA0SW01.PA0SWPRR; /* JCL parm comment*/
  TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

end // end PA0SS40

// SUBMIT JCL
Function PA0SS41()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* RETURN MESSAGE*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(139);
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(10); /* Indicate user cancelled*/
    PA0SM001.XXXMODID = "S41"; /* module identification*/
    PA0SM002.XXXMODID = "S41"; /* module identification*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    PA0SM001.XXXMODID = "S41"; /* module identification*/
    PA0SM002.XXXMODID = "S41"; /* module identification*/

  end

  exit stack; /* Exit to display map*/


end // end PA0SS41

// GET MIN BUY QTY
Function PA0SS50()
   /* -------------------------------------------------*/
    /* SELECT UNIQUE DFBUY.VFMCTL01*/
   /* -------------------------------------------------*/


  try
    call "IO3650" ("S ", SQLCA, FB9REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PA0SS50 GET BUY MIN QTY       ";
      TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFMCTL01"; /* Table view name*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
      SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
    end
  end

  exit stack;
end // end PA0SS50

//*** RECORD=PA0SW00 ****
// CONTAINS NUMBER OF COLUMNS FOR SCREEN
// ***********************
Record PA0SW00 type basicRecord
  10 PA0SW-MAX-COLUMNS PA0SW-MAX-COLUMNS ; 
  10 PA0SW-REGION-WHSE PA0SW-REGION-WHSE [3] ; 
  10 PA0SW-USA-WHSE-CD PA0SW-USA-WHSE-CD [20] ; 
end // end PA0SW00

//*** RECORD=PA0SW01 ****
// database changes wdh
// ***********************
Record PA0SW01 type basicRecord
  10 PA0SWRPD PA0SWRPD ; 
  10 PA0SWDTK PA0SWDTK ; 
  10 PA0SWDIV PA0SWDIV ; 
  10 PA0SWREM PA0SWREM ; 
  10 PA0SWDIF PA0SWDIF ; 
  10 PA0SWMN PA0SWMN ; 
  10 PACGRP01 PACGRP01 [3] ; 
  10 PA0SWDJ2 PA0SWDJ2 [40] ; 
  10 PA0SWDJ4 PA0SWDJ4 [40] ; 
  10 PA0SWDJ7 PA0SWDJ7 [40] ; 
  10 PA0SWDD2 PA0SWDD2 [40] ; 
  10 PA0SWDD4 PA0SWDD4 [40] ; 
  10 PA0SWDD7 PA0SWDD7 [40] ; 
  10 PA0SWXD2 PA0SWXD2 [40] ; 
  10 PA0SWXD4 PA0SWXD4 [40] ; 
  10 PA0SWXD7 PA0SWXD7 [40] ; 
  10 ZZZSDT ZZZSDT [3] ; 
  10 ZZZSTM ZZZSTM [3] ; 
  10 ZZZCHGCT ZZZCHGCT [3] ; 
  10 PA0SWACP PA0SWACP ; 
  10 PA0SWCHG PA0SWCHG ; 
  10 PA0SWTAB PA0SWTAB ; 
  10 PA0SWPCA PA0SWPCA ; 
  10 PA0SWRG2 PA0SWRG2 ; 
  10 PA0SWGG2 PA0SWGG2 ; 
  10 PA0SWRG4 PA0SWRG4 ; 
  10 PA0SWGG4 PA0SWGG4 ; 
  10 PA0SWRG7 PA0SWRG7 ; 
  10 PA0SWGG7 PA0SWGG7 ; 
  10 PA0SWBL2 PA0SWBL2 [40] ; 
  10 PA0SWBL4 PA0SWBL4 [40] ; 
  10 PA0SWBL7 PA0SWBL7 [40] ; 
  10 PA0SWAD2 PA0SWAD2 [40] ; 
  10 PA0SWAD4 PA0SWAD4 [40] ; 
  10 PA0SWAD7 PA0SWAD7 [40] ; 
  10 PA0SWCL2 PA0SWCL2 [40] ; 
  10 PA0SWCL4 PA0SWCL4 [40] ; 
  10 PA0SWCL7 PA0SWCL7 [40] ; 
  10 PA0SWPF2 PA0SWPF2 [40] ; 
  10 PA0SWPF4 PA0SWPF4 [40] ; 
  10 PA0SWPF7 PA0SWPF7 [40] ; 
  10 PA0SWPFC PA0SWPFC [40] ; 
  10 PA0SWPCT PA0SWPCT ; 
  10 PA0SWCP2 PA0SWCP2 ; 
  10 PA0SWCP4 PA0SWCP4 ; 
  10 PA0SWCP7 PA0SWCP7 ; 
  10 PA0SWCYM PA0SWCYM ; 
    15 PA0SWCC PA0SWCC ; 
    15 PA0SWYY PA0SWYY ; 
    15 PA0SWMM PA0SWMM ; 
  10 PA0SWX1 PA0SWX1 ; 
  10 PA0SWX2 PA0SWX2 ; 
  10 PA0SWX3 PA0SWX3 ; 
  10 PA0SWX4 PA0SWX4 ; 
  10 PA0SWX5 PA0SWX5 ; 
  10 PA0SWX6 PA0SWX6 ; 
  10 PA0SWPRR PA0SWPRR ; 
    15 PA0SWCMT PA0SWCMT ; 
    15 PA0SWPRM PA0SWPRM ; 
      20 PA0SWOAJ PA0SWOAJ ; 
      20 * char(17) ; 
  10 PA0SWTOL PA0SWTOL ; 
  10 PA0SWLMT PA0SWLMT ; 
  10 PA0SWTLS PA0SWTLS ; 
  10 PA0SWFI2 PA0SWFI2 ; 
  10 PA0SWFI4 PA0SWFI4 ; 
  10 PA0SWFI7 PA0SWFI7 ; 
  10 PA0SWROS PA0SWROS ; 
  10 FB4RGPCT FB4RGPCT [3] ; 
  10 PA0SW-USE-THIS-OA PA0SW-USE-THIS-OA ; 
  10 PA0SW-BL-WITH-OAS1 PA0SW-BL-WITH-OAS1 [40] ; 
  10 PA0SW-BL-WITH-OAS2 PA0SW-BL-WITH-OAS2 [40] ; 
  10 PA0SW-BL-WITH-OAS3 PA0SW-BL-WITH-OAS3 [40] ; 
  10 PA0SW-USA-WHSE-CNT PA0SW-USA-WHSE-CNT ; 
  10 PA0SW-VALID-SYCLR-WHSE-CNT PA0SW-VALID-SYCLR-WHSE-CNT ; 
  10 PA0SW-MATCH PA0SW-MATCH ; 
  10 PA0SWIX1 PA0SWIX1 ; 
  10 PA0SWIX2 PA0SWIX2 ; 
  10 XX1 XX1 ; 
  10 XX2 XX2 ; 
  10 XX3 XX3 ; 
  10 XX4 XX4 ; 
  10 PA0SW-MCYM PA0SW-MCYM ; 
    15 PA0SW-MCC PA0SW-MCC ; 
    15 PA0SW-MYM PA0SW-MYM ; 
      20 PA0SW-MYY PA0SW-MYY ; 
      20 PA0SW-MMM PA0SW-MMM ; 
end // end PA0SW01

//*** RECORD=PA0SW02 ****
// ****************** ORDER ADJUSTMENT HEADER *****************
// THIS RECORD IS USED TO PASS PARMS TO PA1050.  THIS IOMOD
// JOINS THE DPRODA.VPAHDR01 AND THE DPRODA.VBOTLN01 TABLES.
// IT RETURNS THE BOTTOM LINE RECORDS FOR ALL OPEN O/AS BY
// WAREHOUSE.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/30/92   MSMIT2   New record.
// ***********************
Record PA0SW02 type basicRecord
  10 PA0SW-TASK PA0SW-TASK ; 
  10 PA1OANBR PA1OANBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XWHCD XWHCD ; 
  10 PA0SW-CURRENT-DATE PA0SW-CURRENT-DATE ; 
end // end PA0SW02

DataItem PA0SW-BL-WITH-OAS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0SW-BL-WITH-OAS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0SW-BL-WITH-OAS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0SW-CURRENT-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// whse match flag
DataItem PA0SW-MATCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAXIMUM NUMBER OF COLUMNS
DataItem PA0SW-MAX-COLUMNS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD CENTURY-Y2K
DataItem PA0SW-MCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD DATE FOR PT3YYMM-Y2K
DataItem PA0SW-MCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD MONTH-Y2K
DataItem PA0SW-MMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD YEAR/MONTH-Y2K
DataItem PA0SW-MYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD YEAR-Y2K
DataItem PA0SW-MYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// VALID WHSE CODES FOR REGION
DataItem PA0SW-REGION-WHSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO-PASS TASK
DataItem PA0SW-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// usa whse codes table
DataItem PA0SW-USA-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// usa whse count
DataItem PA0SW-USA-WHSE-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0SW-USE-THIS-OA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid whse count for sty/colr
DataItem PA0SW-VALID-SYCLR-WHSE-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ACCEPT FLAG
DataItem PA0SWACP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ADJUSTMENTS WHSE 02
DataItem PA0SWAD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ADJUSTMENTS WHSE 04
DataItem PA0SWAD4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ADJUSTMENTS WHSE 07
DataItem PA0SWAD7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOTTOMLINE WHSE 02
DataItem PA0SWBL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOTTOMLINE WHSE 04
DataItem PA0SWBL4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BOTTOMLINE WHSE 07
DataItem PA0SWBL7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD CENTURY
DataItem PA0SWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CHANGE FLAG
DataItem PA0SWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CALC OUTPUT QTY WHSE 02
DataItem PA0SWCL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC OUTPUT QTY WHSE 04
DataItem PA0SWCL4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CALC OUTPUT QTY WHSE 07
DataItem PA0SWCL7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comment, value //*
DataItem PA0SWCMT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CORPARATE SHARE WHSE 2
DataItem PA0SWCP2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corporate SHARE WHSE 4
DataItem PA0SWCP4 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CORPORATE SHARE WHSE 7
DataItem PA0SWCP7 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD DATE FOR XPPAX210
DataItem PA0SWCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 7
DataItem PA0SWDD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 7
DataItem PA0SWDD4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 7
DataItem PA0SWDD7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WHAT WAS AND WHAT IS DIFF
DataItem PA0SWDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// USED TO CHECK FOR / 6
DataItem PA0SWDIV num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 2
DataItem PA0SWDJ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 4
DataItem PA0SWDJ4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACADJQT WHSE 7
DataItem PA0SWDJ7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DONT TOUCH THAT KEY
DataItem PA0SWDTK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CALC WHSE OUTPUT SWITCH
DataItem PA0SWFI2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CALC WHSE OUTPUT SWITCH
DataItem PA0SWFI4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CALC WHSE OUTPUT SWITCH
DataItem PA0SWFI7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fb-reg-pctFOR WHSE 02
DataItem PA0SWGG2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB-REG-PCT FOR WHSE 04
DataItem PA0SWGG4 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB-REG-PCT FOR WHSE 07
DataItem PA0SWGG7 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index  1
DataItem PA0SWIX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index  2
DataItem PA0SWIX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total allowable qty adjustment
DataItem PA0SWLMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD MONTH
DataItem PA0SWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MAP NUMBER
DataItem PA0SWMN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PA_ORD_ADJ_NBR
DataItem PA0SWOAJ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PERCENT WORK AREA
DataItem PA0SWPCA num(8,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WORK PERCENTAGE
DataItem PA0SWPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WAREHOUSE SIZE PCT WHSE 2
DataItem PA0SWPF2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WAREHOUSE SIZE PCT WHSE 4
DataItem PA0SWPF4 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WAREHOUSE SIZE PCT WHSE 7
DataItem PA0SWPF7 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WAREHOUSE SIZE PCT CORP
DataItem PA0SWPFC decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl parameter group level
DataItem PA0SWPRM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl comment group level
DataItem PA0SWPRR char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMAINDER TO CHECK FOR EVEN
DataItem PA0SWREM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fb-reg-pctFOR WHSE 02
DataItem PA0SWRG2 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB-REG-PCT FOR WHSE 04
DataItem PA0SWRG4 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FB-REG-PCT FOR WHSE 07
DataItem PA0SWRG7 decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// read only flag
DataItem PA0SWROS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REQUEST TO PROCESS DATA
DataItem PA0SWRPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOTAL ADJUSTED BOTTOMLINE
DataItem PA0SWTAB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TOLLERANCE SWITCH
DataItem PA0SWTLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TOLLERANCE QUANTITY
DataItem PA0SWTOL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 1
DataItem PA0SWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 2
DataItem PA0SWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 3
DataItem PA0SWX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 4
DataItem PA0SWX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 5
DataItem PA0SWX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// INDEX 6
DataItem PA0SWX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACFLADJ WHSE 2
DataItem PA0SWXD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACFLADJ WHSE 4
DataItem PA0SWXD4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// HOLD PACFLADJ WHSE 7
DataItem PA0SWXD7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BUILD YEAR
DataItem PA0SWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

