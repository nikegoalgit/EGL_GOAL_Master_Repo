package pa0n;
import corpcom1.CACHGFL;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPPA001;
import corpcom3.XPPA020;
import corpcom4.XSPAS01;
import corpcom4.XSPAS04;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXINIT;
import corpcom7.XXXPGUID;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.XXXUSER;
import corpcom7.ZZHHMMSS;
import corpcom7.ZZZSTM;
import corpx1.XDMCD;
import corpx1.XDSCD;
import corpx1.XGPCD;
import corpx1.XWHTBL;
import corpx2.XNXCD;
import corpx2.XOWCD;
import corpx2.XPGCD;
import corpx2.XPRCD;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHABRV;
import corpx2.XWHCD;
import corpy2.YACCD;
import corpy2.YESABRV;
import corpy2.YESCD;
import corpy2.YESTBL;
import corpy2.YETABRV;
import corpy2.YETCD;
import corpy2.YETTBL;
import corpy2.YMTCD;
import corpy2.YOACD;
import corpy2.YSMXDV;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fb.common.FB9REC;
import fy.common.FY1FCTYC;
import ku.common.KUCCOID;
import ku.common.KUMSTRID;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pa.common.*;
import pa.common.PA1BUYMO;
import pa.common.PA1HLDFL;
import pa.common.PA1OANBR;
import pa.common.PA1REC;
import pa.common.PA1YETBY;
import pa.common.PA1YETDT;
import pa.common.PA2REC;
import pa.common.PA4REC;
import pa.common.PA7REC;
import pa.common.PA9COM;
import pa.common.PA9REC;
import pa.common.PAGREC;
import pa.common.PAWREC;
import pc.common.PC2CUXID;
import pc.common.PC2INSEG;
import pc.common.PC2REC;
import pc.common.PC3POIDT;
import pc.common.PC3PONBR;
import pc.common.PC4ORTYP;
import pc.common.PC6CXNBR;
import pc.common.PC6ETSDT;
import pc.common.PC6OETS;
import pc.common.PC6PLAN;
import pc.common.PC6RTADT;
import pc.common.PC6XCTCD;
import pc.common.PCFSECD;
import pc.common.PCIAFTA;
import pc.common.PCIAFTN;
import pc.common.PCIBFRA;
import pc.common.PCIBFRN;
import pc.common.PCJAMEND;
import pc.common.PCJGLOFL;
import pc.common.PCJMEMDT;
import pc.common.PCJMEMO;
import pc.common.PCJMEMTM;
import pc.common.PCJNETQT;
import pc.common.PCJOAMEM;
import pc.common.PCJOAPRT;
import pc.common.PCJSEQNO;
import pg.common.PG1SC4CD;
import pg.common.PG2REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;

//*** PROGRAM=PA0N ****
// This application allows a user to view all o/a historical
// data.
// 
// The user may exit to another application at any time VIA
// fastpath or PF key.
// 
// ------------------------------------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/12/90          NEW APPLICATION
// 
// 0000001  10/05/90          Update fields for database update
//                            on 10/07/90.
// 
// enh0006  10/19/90  dhales  Added the Combined O/A cross-
//                            reference table to determine
//                            which O/A's were combined.
//          11/19/90  dhales  corrected bug to clear o/a list
//                            when leaving appl.. associated to
//                            implementing enh0006.
// PA#195   12/17/90  MSMIT2  Show customer need date on the
//                            customer screen of PA0N.
// 0000002  02/12/91  MSMIT2  DATABASE CHANGES
// pa#196   05/24/91  MSMIT2  add hold and related o/a flag.
//                            also, add pf24 to transfer to
//                            pa0w.
// pa#196   07/03/91  MSMIT2  Make the related o/a fields and
//                            PF24:PA0W normal intensity.
// 000003   01/06/92  dhales  make on hold fields normal
//                            intensity.
// PA#270   05/04/92  MSMIT2  FOR DOMESTIC O/AS - DEFAULT
//                            TO THE HEADER SCREEN (PA0NM002).
// PA#278   05/15/92  dhales  add pfkey to take to pa0z
// 0000004  05/28/92  dhales  invalid msg indicating data
//                            had changed when it hadn't
// 0000005  10/15/92  DFRANC  Invalid oa number causing abend
//                            Added error handling, messages.
// 0000006  06/07/93  MSMIT2  ADD PF18 TO TRANSFER TO PA0Q.
// 0000007  06/25/93  MSMIT2  CHANGED XSPAS04.  ADD PF5 TO
//                            TRANSFER TO PA0A.
// 0000008  08/06/93  MSMIT2  DATABASE CHANGES - ADDED SETUP
//                            TIME TO THE MAP.
// PA9999   02/07/95  MSMIT2  ADD CODE TO ACCESS CORRECT DPRODC
//                            VPRDCU01 CUSTOMER.
// Y2KFIX   12/11/97  DKENNY  Y2K MODIFICATIONS MADE TO:
//                            PA0NM001, PA0NM002, PA0NM003 and
//                            PA0NM004.
// *********************
Program PA0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PA00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FB9REC FB9REC; // record
  PA0NW00 PA0NW00; // record
  PA0NW01 PA0NW01; // record
  PA0NW02 PA0NW02; // record
  PA0NW03 PA0NW03; // record
  PA0NW04 PA0NW04; // record
  PA0NW05 PA0NW05; // record
  PA1REC PA1REC; // record
  PA2REC PA2REC; // record
  PA4REC PA4REC; // record
  PA7REC PA7REC; // record
  PA9REC PA9REC; // record
  PAGREC PAGREC; // record
  PAWREC PAWREC; // record
  PC2REC PC2REC; // record
  PCJREC PCJREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YESTBL; // table
  use YETTBL; // table
  use XWHTBL; // table
  use PA0NM.PA0NM001,  // forms
      PA0NM.PA0NM002, 
      PA0NM.PA0NM003, 
      PA0NM.PA0NM004
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPA001: XPPA001();
     /* -------------------------------------------------------*/
      /* INITIALIZE WORKING STORAGE AND DISPLAY STORAGE*/
     /* -------------------------------------------------------*/

    set SQLCA empty;
    set PA0NW00 empty; /* working storage*/
    set PA0NW01 empty; /* m001 header display storage*/
    set PA0NW02 empty; /* m001 detail dipslay storage*/
    set PA0NW03 empty; /* PAD1 temporary storage*/
    set PA0NW04 empty; /* PAD1 temporary storage*/
    set PA0NW05 empty; /* PAD1 temporary storage*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* date/time subroutine parameters*/

    set PA0NM001 initial; /* clear map m001*/
    set PA0NM002 initial; /* clear map m002*/
    set PA0NM003 initial; /* clear map m003*/
    set PA0NM004 initial; /* clear map m004*/

     /* ------------------------------------------------------------*/
     /* set defaults*/
     /* ------------------------------------------------------------*/

    PA0NW00.XXXTSLEN = 926; /* temp storage length*/

    PA0NW00.PA0NWSWD = "1"; /* MAP SWITCH - MAY BE OVERRIDEN LATER*/
    PA0NW00.PA0NWSWR = "N"; /* request for data switch*/
    PA0NW00.PA0NWSWF = "Y"; /* format map switch*/

    PA0NW00.XGPCD = "02";
    PA0NW00.PA0NWFDS = "FACTORY: ";
    PA0NW00.PA0NWFQD = "FCTY QTY: ";
    PA0NW00.PA0NWFPD = "FCTY APP BY: ";
    PA0NW00.PA0NWDND = "DOC NBR: ";
    PA0NW00.PA0NWFCD = "FROM: ";
    PA0NW00.PA0NWTCD = "  TO: ";

    if (PAWREC.PAWOANBR != 0)
      PA0NW00.PA0NWSWR = "Y"; /* request for data valid*/
    end


    XPPA020: XPPA020();
    PA0N001: PA0N001();
    goto PA0N001;
  end // end main
end // end PA0N

// O/A HISTORICAL DATA
Function PA0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, if specified, display the forth map.*/
   /* 5) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* GET THE O/A HEADER RECORD TO SEE IF THE O/A IS FROM DOMESTIC.*/
   /* IF IT IS, DISPLAY THE HEADER MAP (PA0NM002).*/

  if (PAWREC.PAWOANBR != 0
   && converseVar.eventKey is enter
   && PA0NW00.PA0NWSWD == "1")

    PA0NS04();

    if (SQLCA.VAGen_SQLCODE != 0)
      PAWREC.XXXMSGNO = 15;
      PAWREC.XXXMODID = "001";
      return;
    end

    if (PA1REC.YSMXDV == "10")
      PA0NW00.PA0NWSWD = "2";
    end

  end

  if (PA0NW00.PA0NWSWD == "1" /* Map 1 requested*/
   || PA0NW00.PA0NWSWD == "2") /* MAP 2 REQUESTED*/

    PA0N100(); /* Display map 1*/

    PA0NW02.PA0NWSWF = "Y";

    if (PA0NW00.PA0NWSWD == "2")
      PA0N200();
    end

    return;

  end

  if (PA0NW00.PA0NWSWD == "3") /* Map 3 was requested*/

    PA0N300(); /* Display map 3*/

    return;

  end

  if (PA0NW00.PA0NWSWD == "4") /* Map 4 was requested*/

    PA0N400(); /* Display map 4*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "001"; /* Module identification*/
  PAWREC.XXXMSGNO = 10; /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
  TA1REC.TA1MAPNO = PA0NW00.PA0NWSWD; /* Map number*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "PA0M"; /* TO application*/

  XSPAS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end PA0N001

// HISTORICAL DATA
Function PA0N100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0N110(); /* Obtain the data to display*/

  if (PA0NW00.PA0NWSWD == "2") /* MAP 2*/
    return;
  end

  PA0N120(); /* Format and display the map*/

  PA0N130(); /* Check attention identifier*/

  PA0N140(); /* Reset fields to normal intensity*/

  PA0N150(); /* Verify the entered data*/

  PA0N160(); /* Process valid input request*/


end // end PA0N100

// Obtain the data to display
Function PA0N110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PA0NW00.PA0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  set PA0NW01 empty; /* purge w/s m001*/

  PA0NS01(); /* Purge temporary storage m002*/
  PA0NS02(); /* Purge temporary storage m003*/
  PA0NS03(); /* Purge temporary storage m004*/

  if (PAWREC.PA1OANBR == 0
   && PAWREC.PAWOANBR != 0)

    PA0NS04(); /* GET HEADER INFORMATION*/

    if (SQLCA.VAGen_SQLCODE != 0)
      PAWREC.XXXMSGNO = 15;
      PAWREC.XXXMODID = "110";
      return;
    end

  end

  PA0N111(); /* load dproda.Vpahdr01 data*/

   /* -------------------------------------------------*/
   /* obtain the o/a document numbers from the*/
   /* dprodc.vpoait01 table*/
   /* -------------------------------------------------*/

  PA0N112(); /* obtain dprodc.vpoait01 data*/

   /* -------------------------------------------------*/
   /* obtain the domestic customers/destination*/
   /* information from the dproda.vpaitm01 table*/
   /* -------------------------------------------------*/

  PA0N113(); /* obtain dproda.vpaitm01 data*/

   /* -------------------------------------------------*/
   /* obtain the header status audit information*/
   /* from the dproda.vpacmt01 table, and load*/
   /* pa0nm002 temporary storage.*/
   /* -------------------------------------------------*/

  PA0N114(); /* obtain dproda.vpacmt01 data*/

   /* -------------------------------------------------*/
   /* obtain the factory status audit information*/
   /* from the dproda.vfypa001 table, factory comments*/
   /* from the dproda.vpacmt01 table.  load pa0nm003*/
   /* temporary storage.*/
   /* -------------------------------------------------*/

  PA0N115(); /* obtain dproda.vfypa001 data*/

   /* -------------------------------------------------*/
   /* obtain the nil customer information from the*/
   /* dproda.vpacus01 table.  load pa0nm004 temporary*/
   /* storage.*/
   /* -------------------------------------------------*/

  PA0N116(); /* obtain dproda.vpacus01 data*/

   /* -------------------------------------------------*/
   /* obtain the combined o/a information from the*/
   /* dproda.vpaxrf01 table.  The xref table will*/
   /* be displayed only if data is found.*/
   /* -------------------------------------------------*/

  PA0N117(); /* obtain dproda.vpaxrf01 data*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PA0NW00.PA0NWSWR = "N"; /* Request for data switch*/


end // end PA0N110

// Obtain dproda.vpahdr01
Function PA0N111()

   /* ------------------------------------------------------------*/
   /* Load dproda.vpahdr01 data into working storage*/
   /* ------------------------------------------------------------*/

  PA0NW01.YESCD = PA1REC.YESCD;
  if (PA1REC.YESCD in YESTBL.YESCD)
    PA0NW01.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
  end
  PA0NW01.XXXPGUID = PA1REC.XXXPGUID;
  PA0NW01.ZZZSDT = PA1REC.ZZZSDT;
  PA0NW01.ZZZSTM = PA1REC.ZZZSTM;
  PA0NW01.PA1HLDFL = PA1REC.PA1HLDFL; /* hold flag*/

  PA0NW01.YETCD = PA1REC.YETCD;
  if (PA1REC.YETCD in YETTBL.YETCD)
    PA0NW01.YETABRV = YETTBL.YETABRV[sysVar.arrayIndex];
  end
  PA0NW01.PA1YETBY = PA1REC.PA1YETBY;
  PA0NW01.PA1YETDT = PA1REC.PA1YETDT;

  PA0NW01.PA1BUYMO = PA1REC.PA1BUYMO;
  PA0NW01.SY1STNBR = PA1REC.SY1STNBR;
  PA0NW01.SY2CLRID = PA1REC.SY2CLRID;
  PA0NW01.XDMCD = PA1REC.XDMCD;

  PA0NS23(); /* get style short description*/

  PA0NW01.SY1SSTNM = PG2REC.SY1SSTNM;

  PA0NW01.KUCCOID = PA1REC.KUCCOID;
  PA0NW01.KUMSTRID = PA1REC.KUMSTRID;
  PA0NW01.XNXCD = PA1REC.XNXCD;

  if (PA1REC.KUCCOID != 0
   || PA1REC.KUMSTRID != 0
   || PA1REC.XNXCD != 0)

    set PC2REC empty; /* init customer record*/

    PC2REC.KUCCOID = PA1REC.KUCCOID;
    PC2REC.KUMSTRID = PA1REC.KUMSTRID;
    PC2REC.XNXCD = PA1REC.XNXCD;

    if (PA1REC.PA1OANBR > 199999
     && PA1REC.PA1OANBR < 300000)
      PC2REC.PC-PRDCU-APAO-FL = "E"; /* EUROPEAN CUSTOMER ONLY*/
    else
      PC2REC.PC-PRDCU-APAO-FL = " "; /* MVSPROD CUSTOMER*/
    end

    PA0NS24(); /* get customer xref*/

    PA0NW01.PC2CUXID = PC2REC.PC2CUXID;
  else
    PA0NW01.PC2CUXID = " ";
  end


end // end PA0N111

// Obtain dprodc.vpoait01 data
Function PA0N112()

   /* -------------------------------------------------*/
   /* select set dprodc.vpoait01 to obtain the*/
   /* document numbers*/
   /* -------------------------------------------------*/

  PA0NS05(); /* select 's5' dprodc.vpoait01*/

  PA0NS06(); /* fetch  'n5' dprodc.vpoait01*/

  PA0NW00.PA0NWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0 /* load all document numbers*/
   && PA0NW00.PA0NWIDX <= 20)

    PA0NW01.PCJOAMEM[PA0NWIDX] = PCJREC.PCJOAMEM;

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;

    PA0NS06(); /* fetch  'n5' dprodc.vpoait01*/

  end

  PA0NS07(); /* close  'c5' dprodc.vpoait01*/


end // end PA0N112

// Obtain dproda.vpaitm01 data
Function PA0N113()

   /* -------------------------------------------------*/
   /* select set dprodc.vpaitm01 to obtain the*/
   /* domestic customers/destinations*/
   /* -------------------------------------------------*/

  PA0NS08(); /* select 's1' dprodc.vpaitm01*/

  PA0NS09(); /* fetch  'n1' dprodc.vpaitm01*/

  PA0NW00.PA0NWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0 /* load all document numbers*/
   && PA0NW00.PA0NWIDX <= 20)

    if (PA2REC.XWHCD != " ")
      PA0NW01.XWHCD[PA0NWIDX] = PA2REC.XWHCD;
      if (PA2REC.XWHCD in XWHTBL.XWHCD)
        PA0NW01.XWHABRV[PA0NWIDX] = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
    else
      PA0NW01.PA0NWXRF[PA0NWIDX] = PA2REC.PC2CUXID;
    end

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;

    PA0NS09(); /* fetch  'n1' dprodc.vpaitm01*/

  end

  PA0NS10(); /* close  'c1' dprodc.vpaitm01*/


end // end PA0N113

// Obtain dproda.vpacmt01 data
Function PA0N114()

   /* -------------------------------------------------*/
   /* select set dproda.vpacmt01 to obtain the*/
   /* header status audit data*/
   /* -------------------------------------------------*/

  set PA9REC empty;

  PA9REC.PA9COMTY = "H";
  PA9REC.FY1FCTYC = "*";
  PA9REC.YESCD = "00";

  PA0NS11(); /* select 's2' dproda.vpacmt01*/

  PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

  PA0NW00.PA0NWIDX = 2; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* load hdr audit data*/

    /* --------------------------------------------------*/
     /* load header status data*/
    /* --------------------------------------------------*/

    sysVar.arrayIndex = 0;

    if (PA9REC.PA9COM[1] != " ")
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    if (PA9REC.PA9COM[2] != " ")
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    if (PA9REC.PA9COM[3] != " ")
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + PA0NW00.PA0NWIDX;

    if (sysVar.arrayIndex > 12)
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS14();
    end

    PA0NW02.YESCD = PA9REC.YESCD;
    PA0NW02.XXXUSER = PA9REC.XXXUSER;

    PA0NW00.PA0NWWDT = PA9REC.ZZZSDT;
    PA0NW02.PA0NWSMM = PA0NW00.PA0NWSMM;
    PA0NW02.PA0NWDS1 = "-";
    PA0NW02.PA0NWSDD = PA0NW00.PA0NWSDD;
    PA0NW02.PA0NWDS2 = "-";
    PA0NW02.PA0NWSYY = PA0NW00.PA0NWSYY;

    if (PA9REC.YESCD in YESTBL.YESCD)
      PA0NW02.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
    end
    PA0NW00.PA0NWWTM = PA9REC.ZZZCHGTM;
    PA0NW02.PA0NWSHH = PA0NW00.PA0NWSHH;
    PA0NW02.PA0NWCON = ":";
    PA0NW02.PA0NWSMN = PA0NW00.PA0NWSMN;

    PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW02.PA0NWRT1;

    if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS14(); /* add temp storage  m002*/
    else
      PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
    end

    /* --------------------------------------------------*/
     /* load comment data*/
    /* --------------------------------------------------*/

    PA0NW00.PA0NWLIX = 1;
    while (PA0NW00.PA0NWLIX <= 3)

      if (PA9REC.PA9COM[PA0NWLIX] != " ")
        PA0NW02.PA9COM = PA9REC.PA9COM[PA0NWLIX];
        PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW02.PA0NWRT2;

        if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
          PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
          PA0NS14(); /* add temp storage  m002*/
        else
          PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
        end
      end

      PA0NW00.PA0NWLIX = PA0NW00.PA0NWLIX + 1;

    end

    if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS14(); /* add temp storage  m002*/
    end

    PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

  end

  PA0NS13(); /* close  'c2' dproda.vpacmt01*/

  set PA9REC empty;

  PA9REC.PA9COMTY = "H";
  PA9REC.FY1FCTYC = "*";
  PA9REC.YESCD = "*";

  PA0NS11(); /* select 's2' dproda.vpacmt01*/

  PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

  if (PA0NW00.PA0NWIDX > 10) /* max 12 pages*/
    PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
    PA0NS14(); /* add temp storage  m002*/
    PA0NW05.PA0NWDTL[1] = "HEADER STATUS AUDIT";
    PA0NW05.PA0NWDTL[2] = " ";
  else
    PA0NW05.PA0NWDTL[PA0NWIDX] = " ";
    PA0NWIDX = PA0NWIDX + 1;
    PA0NW05.PA0NWDTL[PA0NWIDX] = "HEADER STATUS AUDIT";
    PA0NWIDX = PA0NWIDX + 1;
    PA0NW05.PA0NWDTL[PA0NWIDX] = " ";
    if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS14(); /* add temp storage  m002*/
    else
      PA0NWIDX = PA0NWIDX + 1;
    end
  end

  while (SQLCA.VAGen_SQLCODE == 0) /* load hdr audit data*/

    /* --------------------------------------------------*/
     /* load header status data*/
    /* --------------------------------------------------*/

    if (PA9REC.YESCD == "00")
      /* NEXT SENTENCE*/
    else
      PA0NW02.YESCD = PA9REC.YESCD;
      PA0NW02.XXXUSER = PA9REC.XXXUSER;

      PA0NW00.PA0NWWDT = PA9REC.ZZZSDT;
      PA0NW02.PA0NWSMM = PA0NW00.PA0NWSMM;
      PA0NW02.PA0NWDS1 = "-";
      PA0NW02.PA0NWSDD = PA0NW00.PA0NWSDD;
      PA0NW02.PA0NWDS2 = "-";
      PA0NW02.PA0NWSYY = PA0NW00.PA0NWSYY;

      if (PA9REC.YESCD in YESTBL.YESCD)
        PA0NW02.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
      end
      PA0NW00.PA0NWWTM = PA9REC.ZZZCHGTM;
      PA0NW02.PA0NWSHH = PA0NW00.PA0NWSHH;
      PA0NW02.PA0NWCON = ":";
      PA0NW02.PA0NWSMN = PA0NW00.PA0NWSMN;

      PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW02.PA0NWRT1;

      if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
        PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
        PA0NS14(); /* add temp storage  m002*/
      else
        PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
      end

      /* --------------------------------------------------*/
       /* load comment data*/
      /* --------------------------------------------------*/

      PA0NW00.PA0NWLIX = 1;
      while (PA0NW00.PA0NWLIX <= 3)

        if (PA9REC.PA9COM[PA0NWLIX] != " ")
          PA0NW02.PA9COM = PA9REC.PA9COM[PA0NWLIX];
          PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW02.PA0NWRT2;

          if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
            PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
            PA0NS14(); /* add temp storage  m002*/
          else
            PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
          end
        end

        PA0NW00.PA0NWLIX = PA0NW00.PA0NWLIX + 1;

      end

      if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
        PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
        PA0NS14(); /* add temp storage  m002*/
      end

    end

    PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

  end

  PA0NS13(); /* close  'c2' dproda.vpacmt01*/

  if (PA0NW00.PA0NWIDX > 1) /* max 12 pages*/
    PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX - 1;
    PA0NS14(); /* add temp storage  m002*/
  end

  if (PA0NW02.TA5TSQIX > 0)
    PA0NW02.XXXTSPAG = 1;
  end


end // end PA0N114

// Obtain dproda.vfypa001 data
Function PA0N115()

   /* -------------------------------------------------*/
   /* select set dproda.vfypa001 to obtain the*/
   /* factory status audit data*/
   /* -------------------------------------------------*/

  PA0NS15(); /* select 's1' dproda.vfypa001*/

  PA0NS16(); /* fetch  'n1' dproda.vfypa001*/

  PA0NW00.PA0NWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* load all factory*/

    /* --------------------------------------------------*/
     /* load factory record type one*/
    /* --------------------------------------------------*/

    PA0NW03.PA0NWFDS = PA0NW00.PA0NWFDS;
    PA0NW03.FY1FCTYC = PA4REC.FY1FCTYC;
    PA0NW03.PA0NWFQD = PA0NW00.PA0NWFQD;
    if (PA4REC.PA4FCTQT < 0)
      PA0NW03.PA0NWFQT = PA4REC.PA4FCTQT * -1;
      PA0NW03.PA0NWFSG = "-";
    else
      PA0NW03.PA0NWFQT = PA4REC.PA4FCTQT + 0;
      PA0NW03.PA0NWFSG = " ";
    end
    PA0NW03.PA0NWFPD = PA0NW00.PA0NWFPD;
    PA0NW03.XXXINIT = PA4REC.XXXINIT;
    PA0NW03.PA0NWDND = PA0NW00.PA0NWDND;
    PA0NW03.PA0NWDNR = PA4REC.PA4FCTDC;

    PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW03.PA0NWRT1;

    if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS18(); /* add temp storage  m002*/
    else
      PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
    end

    /* -------------------------------------------------*/
     /* select set dproda.vpacmt01 to obtain the*/
     /* factory comment data*/
    /* -------------------------------------------------*/

    set PA9REC empty;

    PA9REC.PA9COMTY = "F";
    PA9REC.YESCD = "*";
    PA9REC.FY1FCTYC = PA4REC.FY1FCTYC;

    PA0NS11(); /* select 's2' dproda.vpacmt01*/

    PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

    while (SQLCA.VAGen_SQLCODE == 0) /* load fcty cmt data*/

      sysVar.arrayIndex = 0;

      if (PA9REC.PA9COM[1] != " ")
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end

      if (PA9REC.PA9COM[2] != " ")
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end

      if (PA9REC.PA9COM[3] != " ")
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end

      sysVar.arrayIndex = sysVar.arrayIndex + PA0NW00.PA0NWIDX;

      if (sysVar.arrayIndex > 12)
        PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
        PA0NS18();
      end

      /* --------------------------------------------------*/
       /* load header status data*/
      /* --------------------------------------------------*/

      PA0NW03.YESCD = PA9REC.YESCD;
      PA0NW03.XXXUSER = PA9REC.XXXUSER;

      PA0NW00.PA0NWWDT = PA9REC.ZZZSDT;
      PA0NW03.PA0NWSMM = PA0NW00.PA0NWSMM;
      PA0NW03.PA0NWDS1 = "-";
      PA0NW03.PA0NWSDD = PA0NW00.PA0NWSDD;
      PA0NW03.PA0NWDS2 = "-";
      PA0NW03.PA0NWSYY = PA0NW00.PA0NWSYY;

      if (PA9REC.YESCD in YESTBL.YESCD)
        PA0NW03.YESABRV = YESTBL.YESABRV[sysVar.arrayIndex];
      end
      PA0NW00.PA0NWWTM = PA9REC.ZZZCHGTM;
      PA0NW03.PA0NWSHH = PA0NW00.PA0NWSHH;
      PA0NW03.PA0NWCON = ":";
      PA0NW03.PA0NWSMN = PA0NW00.PA0NWSMN;

      PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW03.PA0NWRT2;

      if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
        PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
        PA0NS18(); /* add temp storage  m003*/
      else
        PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
      end

      /* --------------------------------------------------*/
       /* load comment data*/
      /* --------------------------------------------------*/

      PA0NW00.PA0NWLIX = 1;
      while (PA0NW00.PA0NWLIX <= 3)

        if (PA9REC.PA9COM[PA0NWLIX] != " ")
          PA0NW03.PA9COM = PA9REC.PA9COM[PA0NWLIX];
          PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW03.PA0NWRT3;

          if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
            PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
            PA0NS18(); /* add temp storage  m003*/
          else
            PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
          end
        end

        PA0NW00.PA0NWLIX = PA0NW00.PA0NWLIX + 1;

      end

      if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
        PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
        PA0NS18(); /* add temp storage  m003*/
      end

      PA0NS12(); /* fetch  'n2' dproda.vpacmt01*/

    end

    PA0NS13(); /* close  'c2' dproda.vpacmt01*/

    PA0NS16(); /* fetch  'n1' dproda.vfypa001*/

  end

  PA0NS17(); /* close  'c1' dproda.vfypa001*/

  if (PA0NW00.PA0NWIDX > 1) /* max 12 pages*/
    PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX - 1;
    PA0NS18(); /* add temp storage  m003*/
  end

  if (PA0NW03.TA5TSQIX > 0)
    PA0NW03.XXXTSPAG = 1;
  end


end // end PA0N115

// Obtain dproda.vpacus01 data
Function PA0N116()

   /* -------------------------------------------------*/
   /* select set dproda.vpacus01 to obtain the*/
   /* nil customer data*/
   /* -------------------------------------------------*/

  PA0NS19(); /* select 's1' dproda.vpacus01*/

  PA0NS20(); /* fetch  'n1' dproda.vpacus01*/

  PA0NW00.PA0NWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* load all nil factories*/

    /* --------------------------------------------------*/
     /* load the from customer*/
    /* --------------------------------------------------*/

     /* reformat and load customer need date*/
    PA0NW00.PA0NWNDT = PAGREC.OP1CUNDT;
    PA0NW00.PA0NWFDM = PA0NW00.PA0NWNDM;
    PA0NW00.PA0NWFDD = PA0NW00.PA0NWNDD;
    PA0NW00.PA0NWFDY = PA0NW00.PA0NWNDY;
    PA0NW04.PA0NWCND = PA0NW00.PA0NWFND;

    if (PAGREC.PAGCUQTY < 0)
      PA0NW04.PA0NWCDS = PA0NW00.PA0NWFCD;
    else
      PA0NW04.PA0NWCDS = PA0NW00.PA0NWTCD;
    end

    PA0NW04.PA0NWCNB = PAGREC.KUCCOID;
    PA0NW04.PA0NWCST = PAGREC.KUMSTRID;

    if (PAGREC.KUCCOID != 0
     || PAGREC.KUMSTRID != 0
     || PAGREC.XNXCD != 0)

      set PC2REC empty;

      PC2REC.KUCCOID = PAGREC.KUCCOID;
      PC2REC.KUMSTRID = PAGREC.KUMSTRID;
      PC2REC.XNXCD = PAGREC.XNXCD;

      if (PA1REC.PA1OANBR > 199999
       && PA1REC.PA1OANBR < 300000)
        PC2REC.PC-PRDCU-APAO-FL = "E"; /* EUROPEAN CUSTOMER ONLY*/
      else
        PC2REC.PC-PRDCU-APAO-FL = " "; /* MVSPROD CUSTOMER*/
      end

      PA0NS24(); /* get cust xref and desc*/

      PA0NW04.PC2CUXID = PC2REC.PC2CUXID;
      PA0NW04.PA0NWCNM = PC2REC.PC2NAME;
    else
      PA0NW04.PC2CUXID = " ";
      PA0NW04.PA0NWCNM = " ";
    end

    PA0NW04.FY1FCTYC = PAGREC.FY1FCTYC;
    if (PAGREC.PC6TORDE < 0)
      PA0NW04.PA0NWTQT = PAGREC.PC6TORDE * -1;
      PA0NW04.PA0NWTSG = "-";
    else
      PA0NW04.PA0NWTQT = PAGREC.PC6TORDE + 0;
      PA0NW04.PA0NWTSG = " ";
    end

    if (PAGREC.PAGCUQTY < 0)
      PA0NW04.PA0NWAQT = PAGREC.PAGCUQTY * -1;
      PA0NW04.PA0NWASG = "-";
    else
      PA0NW04.PA0NWAQT = PAGREC.PAGCUQTY + 0;
      PA0NW04.PA0NWASG = " ";
    end

    PA0NW04.PA0NWSTA = "      ";
   /* IF PAGREC.PAGCUIND EQ '1';*/
   /* MOVE 'PNDAPP' TO PA0NW04.PA0NWSTA;*/
   /* ELSE;*/
   /* IF PAGREC.PAGCUIND EQ '2';*/
   /* MOVE 'APPROV' TO PA0NW04.PA0NWSTA;*/
   /* ELSE;*/
   /* IF PAGREC.PAGCUIND EQ '3';*/
   /* MOVE 'CXL   ' TO PA0NW04.PA0NWSTA;*/
   /* END;*/
   /* END;*/
   /* END;*/

    PA0NW05.PA0NWDTL[PA0NWIDX] = PA0NW04.PA0NWRT1;

    if (PA0NW00.PA0NWIDX > 11) /* max 12 pages*/
      PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX;
      PA0NS22(); /* add temp storage  m004*/
    else
      PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
    end

    PA0NS20(); /* fetch  'n1' dproda.vpacus01*/

  end

  PA0NS21(); /* close  'c1' dproda.vpacus01*/

  if (PA0NW00.PA0NWIDX > 1) /* additional page*/
    PA0NW05.PA0NWNLD = PA0NW00.PA0NWIDX - 1;
    PA0NS22(); /* add temp storage  m004*/
  end

  if (PA0NW04.TA5TSQIX > 0)
    PA0NW04.XXXTSPAG = 1;
  end


end // end PA0N116

// Obtain dproda.vpaxrf01 data
Function PA0N117()

   /* -------------------------------------------------*/
   /* determine the related o/a flag value.*/
   /* -------------------------------------------------*/

  PA0NW01.PA0NWRFL = "N"; /* initialize the related o/a flag*/

  PA0NS32(); /* select 'sb' dproda.vpaxrf01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PA0NW01.PA0NWRFL = "Y";
  end

   /* -------------------------------------------------*/
   /* select set dproda.vpaxrf01 to obtain the*/
   /* combined o/a cross reference*/
   /* -------------------------------------------------*/

  PA0NS28(); /* select 's1' dproda.vpaxrf01*/

  PA0NS29(); /* fetch  'n1' dproda.vpaxrf01*/

  PA0NW00.PA0NWIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0 /* load up to four combined o/a's*/
   && PA0NW00.PA0NWIDX <= 4)

    /* --------------------------------------------------*/
     /* load the combined a/o from the o/a xref*/
    /* --------------------------------------------------*/

    PA0NW01.PA0NMPNB[PA0NWIDX] = PA7REC.PA7PRNBR;

    set PA1REC empty;
    PA1REC.PA1OANBR = PA7REC.PA7PRNBR;
    PA0NS30(); /* select dproda.vpahdr01*/

    PA0NW01.PA0NMYCD[PA0NWIDX] = PA1REC.YETCD; /* get yetcd*/

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;

    PA0NS29(); /* fetch  'n1' dproda.vpaxrf01*/

  end

  PA0NS31(); /* close  'c1' dproda.vpaxrf01*/


end // end PA0N117

// format and converse m001
Function PA0N120()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (PA0NW00.PA0NWSWF == "Y") /* map must be formatted*/
      PA0N121(); /* Format the data on the map*/
    end

  else
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* if dproda.vpahdr01 customer number is zero darken the*/
   /* literals cust and xref*/
   /* ------------------------------------------------------------*/

  if (PA0NM001.KUCCOID != 0
   || PA0NM001.KUMSTRID != 0
   || PA0NM001.XNXCD != 0)

    set PA0NM001.PA0NMCCD initialAttributes;
    set PA0NM001.PA0NMCXF initialAttributes;

  else
    set PA0NM001.PA0NMCCD invisible, skip;
    set PA0NM001.PA0NMCXF invisible, skip;
  end

   /* ------------------------------------------------------------*/
   /* if combined o/a cross reference not found; make the*/
   /* xref table dark*/
   /* ------------------------------------------------------------*/

  PA0NW00.PA0NWIDX = 1;

  while (PA0NW00.PA0NWIDX <= 4)

    if (PA0NM001.PA0NMPNB[PA0NWIDX] == 0)
      set PA0NM001.PA0NMSEL[PA0NWIDX] skip, invisible;
      set PA0NM001.PA0NMFRM[PA0NWIDX] skip, invisible;
      set PA0NM001.PA0NMPNB[PA0NWIDX] skip, invisible;
      set PA0NM001.PA0NMTYP[PA0NWIDX] skip, invisible;
      set PA0NM001.PA0NMYCD[PA0NWIDX] skip, invisible;
    end

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;

  end

  if (PA0NM001.PA0NMPNB[1] == 0)
    set PA0NM001.PA0NMCMB skip, invisible;
  end

   /* ------------------------------------------------------------*/
   /* Format date and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PA0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PA0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0) /* Message to display*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* error message number*/
    PA0NM001.XXXMODID = PAWREC.XXXMODID; /* Module identification*/
    set PA0NM001 alarm; /* Indicate sound alarm*/
  end

  converse PA0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = " "; /* Module identification*/
  PAWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = PA0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PA0NM001.CAITEM; /* Application data*/


end // end PA0N120

// Format the display data
Function PA0N121()

   /* ------------------------------------------------------------*/
   /* init map pa0nm001*/
   /* ------------------------------------------------------------*/

  set PA0NM001 initial; /* m001 input/ouput area*/

  PA0NW00.PA0NWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pa0nm001 using passed data*/
   /* ------------------------------------------------------------*/

  PA0NM001.PA1OANBR = PAWREC.PAWOANBR; /* o/a nbr*/
  PA0NM001.PAWBUYYM = PAWREC.PAWBUYYM; /* current by date*/

   /* ------------------------------------------------------------*/
   /* load header information*/
   /* ------------------------------------------------------------*/

  PA0NM001.YESCD = PA0NW01.YESCD; /* o/a status code*/
  PA0NM001.YESABRV = PA0NW01.YESABRV; /* o/a status desc*/
  PA0NM001.XXXPGUID = PA0NW01.XXXPGUID; /* o/a user id*/
  PA0NM001.ZZZSDT = PA0NW01.ZZZSDT; /* o/a set up date*/

  if (PA0NW01.ZZZSTM != 0)
    PA0NW00.PA0NW-TIME = PA0NW01.ZZZSTM;
    PA0NW00.PA0NW-HH = PA0NW00.PA0NW-HOUR;
    PA0NW00.PA0NW-COLON = ":";
    PA0NW00.PA0NW-MN = PA0NW00.PA0NW-MIN;
    PA0NM001.PA0NM-ZZ-SETUP-HHMM = PA0NW00.PA0NW-HHMM;
  else
    PA0NM001.PA0NM-ZZ-SETUP-HHMM = " ";
  end

  PA0NM001.YETCD = PA0NW01.YETCD; /* o/a type   code*/
  PA0NM001.YETABRV = PA0NW01.YETABRV; /* o/a type   desc*/
  PA0NM001.PA1YETBY = PA0NW01.PA1YETBY; /* o/a type   by*/
  PA0NM001.PA1YETDT = PA0NW01.PA1YETDT; /* o/a type   date*/
  PA0NM001.PA1HLDFL = PA0NW01.PA1HLDFL; /* hold flag*/
  PA0NM001.PA0NMRFL = PA0NW01.PA0NWRFL; /* hold flag*/

  PA0NM001.PA1BUYMO = PA0NW01.PA1BUYMO; /* buy month*/
  PA0NM001.SY1STNBR = PA0NW01.SY1STNBR; /* style number*/
  PA0NM001.SY2CLRID = PA0NW01.SY2CLRID; /* color id*/
  PA0NM001.XDMCD = PA0NW01.XDMCD; /* dimension code*/
  PA0NM001.SY1SSTNM = PA0NW01.SY1SSTNM; /* style desc*/
  PA0NM001.KUCCOID = PA0NW01.KUCCOID; /* customer number*/
  PA0NM001.KUMSTRID = PA0NW01.KUMSTRID; /* customer store id*/
  PA0NM001.XNXCD = PA0NW01.XNXCD;
  PA0NM001.PC2CUXID = PA0NW01.PC2CUXID; /* customer xref code*/

   /* ------------------------------------------------------------*/
   /* load combined o/a xref information found*/
   /* ------------------------------------------------------------*/

  PA0NW00.PA0NWIDX = 1;

  while (PA0NW00.PA0NWIDX <= 4) /* process o/a xref table*/

    PA0NM001.PA0NMSEL[PA0NWIDX] = PA0NW01.PA0NMSEL[PA0NWIDX];
    PA0NM001.PA0NMPNB[PA0NWIDX] = PA0NW01.PA0NMPNB[PA0NWIDX];
    PA0NM001.PA0NMYCD[PA0NWIDX] = PA0NW01.PA0NMYCD[PA0NWIDX];

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1; /* increment load index*/

  end
   /* ------------------------------------------------------------*/
   /* load document nbrs and domestic customers/destinations*/
   /* ------------------------------------------------------------*/

  PA0NW00.PA0NWIDX = 1;

  while (PA0NW00.PA0NWIDX <= 20) /* process temp storage*/

    PA0NM001.PCJOAMEM[PA0NWIDX] = PA0NW01.PCJOAMEM[PA0NWIDX];

    if (PA0NW01.XWHCD != " ")
      PA0NM001.XWHCD[PA0NWIDX] = PA0NW01.XWHCD[PA0NWIDX];
      PA0NM001.PA0NMDSC[PA0NWIDX] = PA0NW01.XWHABRV[PA0NWIDX];
    else
      PA0NM001.PA0NMDSC[PA0NWIDX] = PA0NW01.PA0NWXRF[PA0NWIDX];
    end

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1; /* increment load index*/

  end


end // end PA0N121

// check attention identifier
Function PA0N130()
   /* -----------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
    PA0NW00.PA0NWSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PA0NM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PA0NS01(); /* purge temp storage m002*/
      PA0NS02(); /* purge temp storage m003*/
      PA0NS03(); /* purge temp storage m004*/

      PAWREC.PAWOAIDX = 0; /* clear list prior to leaving pgm*/
      move 0 to PAWREC.PA1OANBR[1] for all;
      PAWREC.PAWDRVR = " ";

      XSPAS01(); /* Exit to another application*/

      PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
      PA0NW00.PA0NWSWR = "Y"; /* request for data*/

      set PA0NM001.CATOAP cursor, bold; /* Highlight*/

    else

      PAWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PA0NM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (PAWREC.PAWDRVR == "PA0N")
        PAWREC.PAWDRVR = " ";
      end

      PA0NS01(); /* purge temp storage m002*/
      PA0NS02(); /* purge temp storage m003*/
      PA0NS03(); /* purge temp storage m004*/

      PAWREC.PAWOAIDX = 0; /* clear list prior to leaving pgm*/
      move 0 to PAWREC.PA1OANBR[1] for all;
      PAWREC.PAWDRVR = " ";
    end

    XSPAS01(); /* Exit to another application*/

    PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
    PA0NW00.PA0NWSWR = "Y"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* PF5 NOT PRESSED*/
   && converseVar.eventKey not pf12  /* pf12 was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19  /* pf19 was not pressed*/
   && converseVar.eventKey not pf24) /* pf24 was not pressed*/

    PAWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0N130

// Reset highlighted fields
Function PA0N140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0NM001.PA1OANBR initialAttributes; /* o/a number*/

  set PA0NM001.CATOAP initialAttributes;
  set PA0NM001.CAITEM initialAttributes;

  set PA0NM001.PA0NMCMB initialAttributes;
  PA0NW00.PA0NWIDX = 1;

  while (PA0NW00.PA0NWIDX <= 4)
    set PA0NM001.PA0NMSEL[PA0NWIDX] initialAttributes;
    set PA0NM001.PA0NMFRM[PA0NWIDX] initialAttributes;
    set PA0NM001.PA0NMTYP[PA0NWIDX] initialAttributes;
    set PA0NM001.PA0NMPNB[PA0NWIDX] initialAttributes;
    set PA0NM001.PA0NMYCD[PA0NWIDX] initialAttributes;
    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
  end


end // end PA0N140

// Verify the data entered
Function PA0N150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PAWREC.XXXMODID = "150"; /* Module identification*/
    set PA0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify OA number that is entered.*/
   /* ------------------------------------------------------------*/

  if (PA0NM001.PA1OANBR > 0) /* An order adjust number was entered*/
    PA0N151(); /* Verify oa number exists on header*/
  else
    set PA0NM001.PA1OANBR cursor, bold;
    PAWREC.XXXMODID = "150"; /* An order adjustment nbr is required*/
    converseLib.validationFailed(40);
  end

   /* ------------------------------------------------------------*/
   /* request to go to PA0A (PF5)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* display PA0A - PF5*/
    if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
      converseLib.validationFailed(170);
      PAWREC.XXXMODID = "150";
    else
      PA0NM001.CATOAP = "PA0A";
      COMMAREA.CATOAP = "PA0A";
      COMMAREA.CAITEM = " ";
      XSPAS01();
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* display hdr stat(pf13)*/

    if (PA0NW02.TA5TSQIX == 0)
      converseLib.validationFailed(167); /* no hdr status data loaded*/
      PAWREC.XXXMODID = "150";
    else
      if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
        converseLib.validationFailed(170);
        PAWREC.XXXMODID = "150";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* display fcty stat(pf14)*/

    if (PA0NW03.TA5TSQIX == 0)
      converseLib.validationFailed(168); /* no fcty status data loaded*/
      PAWREC.XXXMODID = "150";
    else
      if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
        converseLib.validationFailed(170);
        PAWREC.XXXMODID = "150";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* display nil cust(pf15)*/

    if (PA0NW04.TA5TSQIX == 0)
      converseLib.validationFailed(169); /* no nil cust data loaded*/
      PAWREC.XXXMODID = "150";
    else
      if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
        converseLib.validationFailed(170);
        PAWREC.XXXMODID = "150";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display 'combined from' o/a (pf16)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* display from o/a (pf15)*/

    if (PA0NM001.PA0NMPNB[1] == 0)
      PAWREC.XXXMODID = "150";
      converseLib.validationFailed(4); /* indicate invalid*/
      exit stack; /* attention key and return*/
    end

    PA0NW00.PA0NWERR = "N";

    if (PA0NM001.PA0NMSEL[4] != " " /* determine whether entry error*/
     && PA0NM001.PA0NMSEL[4] != "S")
      set PA0NM001.PA0NMSEL[4] cursor, bold;
      PA0NW00.PA0NWERR = "Y";
    end

    if (PA0NM001.PA0NMSEL[3] != " "
     && PA0NM001.PA0NMSEL[3] != "S")
      set PA0NM001.PA0NMSEL[3] cursor, bold;
      PA0NW00.PA0NWERR = "Y";
    end

    if (PA0NM001.PA0NMSEL[2] != " "
     && PA0NM001.PA0NMSEL[2] != "S")
      set PA0NM001.PA0NMSEL[2] cursor, bold;
      PA0NW00.PA0NWERR = "Y";
    end

    if (PA0NM001.PA0NMSEL[1] != " "
     && PA0NM001.PA0NMSEL[1] != "S")
      set PA0NM001.PA0NMSEL[1] cursor, bold;
      PA0NW00.PA0NWERR = "Y";
    end

    if (PA0NW00.PA0NWERR == "Y")
      converseLib.validationFailed(13);
      PAWREC.XXXMODID = "150";
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* request to go to pa0q (pf18)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* display PA0Q - PF18*/
    if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
      converseLib.validationFailed(170);
      PAWREC.XXXMODID = "150";
    else
      PA0NM001.CATOAP = "PA0Q";
      COMMAREA.CATOAP = "PA0Q";
      COMMAREA.CAITEM = " ";
      XSPAS01();
    end
  end


   /* ------------------------------------------------------------*/
   /* request to go to pa0z (pf19)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19) /* display pa0z - pf19*/
    if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
      converseLib.validationFailed(170);
      PAWREC.XXXMODID = "150";
    else
      PA0NM001.CATOAP = "PA0Z";
      COMMAREA.CATOAP = "PA0Z";
      COMMAREA.CAITEM = " ";
      XSPAS01();
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display related o/a screen (pa0w) - pf24*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf24) /* display pa0w - pf24*/
    if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR)
      converseLib.validationFailed(170);
      PAWREC.XXXMODID = "150";
    else
      PA0NM001.CATOAP = "PA0W";
      COMMAREA.CATOAP = "PA0W";
      COMMAREA.CAITEM = " ";
      XSPAS01();
    end
  end


   /* ------------------------------------------------------------*/
   /* if o/a number change set switch to obtain data*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if (PA0NM001.PA1OANBR != PAWREC.PAWOANBR /* o/a nbr*/
     || PA0NM001.PA1OANBR == 0)             
      PA0NW00.PA0NWSWR = "Y"; /* request data request*/
    else
      if (PA0NM001.PA0NMSEL[1] != " " /* go on if enter and*/
       || PA0NM001.PA0NMSEL[2] != " " /* no data entry*/
       || PA0NM001.PA0NMSEL[3] != " " 
       || PA0NM001.PA0NMSEL[4] != " ")
        exit stack;
      end
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end PA0N150

// Select 's' DPRODA.VPAHDR01
Function PA0N151()
   /* ------------------------------------------------------------*/
   /* Select 's' DPRODA.VPAHDR01*/
   /* ------------------------------------------------------------*/

  set PA1REC empty; /* Initialize header record*/

  PA1REC.PA1OANBR = PA0NM001.PA1OANBR;

  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Check return codes.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Header record found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      set PA0NM001.PA1OANBR cursor, bold;
      converseLib.validationFailed(50);
      PAWREC.XXXMODID = "151";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PAWREC.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please notify programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

   /* ------------------END OF PA0N151 -----------------------------------*/
end // end PA0N151

// Process valid input request
Function PA0N160()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PA0NW00.PA0NWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the work fields*/
   /* ------------------------------------------------------------*/

  PAWREC.PAWOANBR = PA0NM001.PA1OANBR; /* o/a number*/

  if (converseVar.eventKey is enter
   && PA0NW00.PA0NWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* request display of next o/a (pf12)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* display next o/a (pf12)*/

    if (PAWREC.PAWDRVR == "PA0N")
      PAWREC.PAWOAIDX = PAWREC.PAWOAIDX + 1;

      if (PAWREC.PA1OANBR[PAWOAIDX] == 0)
        PAWREC.PAWDRVR = " ";
      else
        PAWREC.PAWOAIDX = PAWREC.PAWOAIDX - 1;
      end

    end

    XSPAS04(); /* get next 0/a*/
    PA0NW00.PA0NWSWR = "Y"; /* request data*/

    exit stack;

  end
   /* ------------------------------------------------------------*/
   /* request display of header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* hdr status data (pf13)*/

    PA0NW00.PA0NWSWD = "2"; /* map switch m002*/
    PA0NW02.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* fcty status data (pf14)*/

    PA0NW00.PA0NWSWD = "3"; /* map switch m003*/
    PA0NW03.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* fcty status data (pf15)*/

    PA0NW00.PA0NWSWD = "4"; /* map switch m004*/
    PA0NW04.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of o/a header(s) combined to make current*/
   /* o/a (pf16)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* get previously combined o/a (pf16)*/

    if (PAWREC.PAWDRVR == " ") /* did this come from menu?*/
      PAWREC.PAWDRVR = "PA0N"; /* return to the menu*/
    end

    sysVar.arrayIndex = 0;
    PA0NW00.PA0NWIDX = 1;

    while (PA0NW00.PA0NWIDX <= 4)

      if (PA0NM001.PA0NMSEL[PA0NWIDX] == "S") /* determine whether to*/
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* process new a/o list*/
        PAWREC.PA1OANBR[sysVar.arrayIndex] = PA0NM001.PA0NMPNB[PA0NWIDX];
      end

      PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;

    while (sysVar.arrayIndex <= 25) /* clear any remaining numbers*/
      PAWREC.PA1OANBR[sysVar.arrayIndex] = 0; /* from list brought into pgm*/
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
    PAWREC.PAWOAIDX = 0;

    XSPAS04(); /* get next 0/a*/
    PA0NW00.PA0NWSWR = "Y"; /* request data*/

    exit stack;

  end

end // end PA0N160

// HEADER STATUS AUDIT
Function PA0N200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0N210(); /* Format and display the map*/

  PA0N220(); /* Check attention identifier*/

  PA0N230(); /* Reset fields to normal intensity*/

  PA0N240(); /* Verify the entered data*/

  PA0N250(); /* Process valid input request*/


end // end PA0N200

// format and converse m002
Function PA0N210()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (PA0NW02.PA0NWSWF == "Y") /* map must be formatted*/
      PA0N211(); /* Format the data on the map*/
    end

  else
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PA0NW02.TA5TSQIX > 0)
    set PA0NM002.XXXLITPG skip;
    PA0NM002.XXXTSPAG = PA0NW02.XXXTSPAG; /* Current page*/
    set PA0NM002.XXXLITOF skip;
    PA0NM002.TA5TSQIX = PA0NW02.TA5TSQIX; /* max pages*/
  end

  if (PA0NW02.XXXTSPAG != 1)
    set PA0NM002.PA0NMLIT skip, invisible;
  else
    set PA0NM002.PA0NMLIT initialAttributes;
  end

  PA0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0NM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PA0NM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0) /* Message to display*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* error message number*/
    PA0NM002.XXXMODID = PAWREC.XXXMODID; /* Module identification*/
    set PA0NM002 alarm; /* Indicate sound alarm*/
  end

  converse PA0NM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = " "; /* Module identification*/
  PAWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = PA0NM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PA0NM002.CAITEM; /* Application data*/


end // end PA0N210

// Format the display data
Function PA0N211()

   /* ------------------------------------------------------------*/
   /* init map pa0nm002*/
   /* ------------------------------------------------------------*/

  set PA0NM002 initial; /* m002 input/ouput area*/

  PA0NW00.PA0NWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pa0nm002 using passed data*/
   /* ------------------------------------------------------------*/

  PA0NM002.PA1OANBR = PAWREC.PAWOANBR; /* o/a number*/
  PA0NM002.PAWBUYYM = PAWREC.PAWBUYYM; /* current by date*/

   /* ------------------------------------------------------------*/
   /* load header information*/
   /* ------------------------------------------------------------*/

  PA0NM002.YESCD = PA0NW01.YESCD; /* o/a status code*/
  PA0NM002.YESABRV = PA0NW01.YESABRV; /* o/a status desc*/
  PA0NM002.YETCD = PA0NW01.YETCD; /* o/a type   code*/
  PA0NM002.YETABRV = PA0NW01.YETABRV; /* o/a type   desc*/
  PA0NM002.PA1HLDFL = PA0NW01.PA1HLDFL; /* hold flag*/
  PA0NM002.PA0NMRFL = PA0NW01.PA0NWRFL; /* related o/a flag*/

  PA0NM002.PA1BUYMO = PA0NW01.PA1BUYMO; /* buy month*/
  PA0NM002.SY1STNBR = PA0NW01.SY1STNBR; /* style number*/
  PA0NM002.SY2CLRID = PA0NW01.SY2CLRID; /* color id*/
  PA0NM002.XDMCD = PA0NW01.XDMCD; /* dimension code*/
  PA0NM002.SY1SSTNM = PA0NW01.SY1SSTNM; /* style desc*/

  PA0NM002.PA0NM-ZZ-SETUP-DT = PA0NW01.ZZZSDT;

  if (PA0NW01.ZZZSTM != 0)
    PA0NW00.PA0NW-TIME = PA0NW01.ZZZSTM;
    PA0NW00.PA0NW-HH = PA0NW00.PA0NW-HOUR;
    PA0NW00.PA0NW-COLON = ":";
    PA0NW00.PA0NW-MN = PA0NW00.PA0NW-MIN;
    PA0NM002.PA0NM-ZZ-SETUP-HHMM = PA0NW00.PA0NW-HHMM;
  else
    PA0NM002.PA0NM-ZZ-SETUP-HHMM = " ";
  end

   /* ------------------------------------------------------------*/
   /* load header status data*/
   /* ------------------------------------------------------------*/

  PA0NS25(); /* read m002 temp storage*/

  PA0NW00.PA0NWIDX = 1;
  while (PA0NW00.PA0NWIDX <= PA0NW05.PA0NWNLD) /* process temp storage*/

    PA0NM002.PA0NMDTL[PA0NWIDX] = PA0NW05.PA0NWDTL[PA0NWIDX];

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1; /* increment load index*/

  end


end // end PA0N211

// check attention identifier
Function PA0N220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    PA0NW02.PA0NWSWF = "Y"; /* format screen m002*/
    PA0NW00.PA0NWSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PA0NM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PA0NS01(); /* purge temp storage m002*/
      PA0NS02(); /* purge temp storage m003*/
      PA0NS03(); /* purge temp storage m004*/

      PAWREC.PAWOAIDX = 0; /* clear any o/a list built*/
      move 0 to PAWREC.PA1OANBR[1] for all;
      PAWREC.PAWDRVR = " ";

      XSPAS01(); /* Exit to another application*/

      PA0NW00.PA0NWSWD = 1; /* return to m001*/
      PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
      PA0NW00.PA0NWSWF = "Y"; /* request for data*/

      PA0NM001.CATOAP = PA0NM002.CATOAP;
      set PA0NM001.CATOAP cursor, bold; /* Highlight*/

    else

      PAWREC.XXXMODID = "220"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PA0NM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      PA0NW00.PA0NWSWD = "1"; /* TO application*/
      PA0NW00.PA0NWSWF = "Y";
      exit stack;
    end

    XSPAS01(); /* Exit to another application*/

    PA0NW02.PA0NWSWF = "Y"; /* format screen m002*/
    PA0NW00.PA0NWSWR = "Y"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* TRANSFER TO PA0A*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf12  /**/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19  /* pf19 was not pressed*/
   && converseVar.eventKey not pf24) /* pf24 was not pressed*/

    PAWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0N220

// Reset highlighted fields
Function PA0N230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0NM002.CATOAP initialAttributes;
  set PA0NM002.CAITEM initialAttributes;


end // end PA0N230

// Verify the data entered
Function PA0N240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PAWREC.XXXMODID = "240"; /* Module identification*/
    set PA0NM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PA0NW02.XXXTSPAG < 2)       /* and no previous pages*/

    PAWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PA0NW02.XXXTSPAG >= PA0NW02.TA5TSQIX) /* and no more pages*/

    PAWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* request to display factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* display fcty stat(pf14)*/

    if (PA0NW03.TA5TSQIX == 0)
      converseLib.validationFailed(168); /* no fcty status data loaded*/
      PAWREC.XXXMODID = "240";
    end

  end

   /* ------------------------------------------------------------*/
   /* request to display nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* display nil cust (pf15)*/

    if (PA0NW04.TA5TSQIX == 0)
      converseLib.validationFailed(169); /* no nil cust data loaded*/
      PAWREC.XXXMODID = "240";
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end PA0N240

// Process valid input request
Function PA0N250()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PA0NW02.PA0NWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* request display of PA0A PF5*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5)
    PA0NM001.CATOAP = "PA0A";
    COMMAREA.CATOAP = "PA0A";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end


   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    PA0NW02.XXXTSPAG = PA0NW02.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    PA0NW02.XXXTSPAG = PA0NW02.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* REQUEST DISPLAY OF NEXT O/A (PF12)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12)

    if (PAWREC.PAWDRVR == "PA0N")

      PAWREC.PAWOAIDX = PAWREC.PAWOAIDX + 1;

      if (PAWREC.PA1OANBR[PAWOAIDX] == 0)
        PAWREC.PAWDRVR = " ";
      else
        PAWREC.PAWOAIDX = PAWREC.PAWOAIDX - 1;
      end

    end

    XSPAS04(); /* GET NEXT O/A*/
    PA0NW00.PA0NWSWR = "Y";

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* fcty status data (pf14)*/

    PA0NW00.PA0NWSWD = "3"; /* map switch m003*/
    PA0NW03.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* nil cust data (pf15)*/

    PA0NW00.PA0NWSWD = "4"; /* map switch m004*/
    PA0NW04.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of PA0Q pf18*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf18)
    PA0NM001.CATOAP = "PA0Q";
    COMMAREA.CATOAP = "PA0Q";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request display of PA0Z pf19*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf19)
    PA0NM001.CATOAP = "PA0Z";
    COMMAREA.CATOAP = "PA0Z";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request display of related o/as (pa0w) pf24*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf24)
    PA0NM001.CATOAP = "PA0W";
    COMMAREA.CATOAP = "PA0W";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

end // end PA0N250

// FACTORY STATUS AUDIT
Function PA0N300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0N310(); /* Format and display the map*/

  PA0N320(); /* Check attention identifier*/

  PA0N330(); /* Reset fields to normal intensity*/

  PA0N340(); /* Verify the entered data*/

  PA0N350(); /* Process valid input request*/


end // end PA0N300

// formate and converse m003
Function PA0N310()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (PA0NW03.PA0NWSWF == "Y") /* map must be formatted*/
      PA0N311(); /* Format the data on the map*/
    end

  else
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PA0NW03.TA5TSQIX > 0)
    set PA0NM003.XXXLITPG skip;
    PA0NM003.XXXTSPAG = PA0NW03.XXXTSPAG; /* Current page*/
    set PA0NM003.XXXLITOF skip;
    PA0NM003.TA5TSQIX = PA0NW03.TA5TSQIX; /* max pages*/
  end

  PA0NM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0NM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PA0NM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0) /* Message to display*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* error message number*/
    PA0NM003.XXXMODID = PAWREC.XXXMODID; /* Module identification*/
    set PA0NM003 alarm; /* Indicate sound alarm*/
  end

  converse PA0NM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = " "; /* Module identification*/
  PAWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = PA0NM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PA0NM003.CAITEM; /* Application data*/


end // end PA0N310

// Format the display data
Function PA0N311()

   /* ------------------------------------------------------------*/
   /* init map pa0nm003*/
   /* ------------------------------------------------------------*/

  set PA0NM003 initial; /* m003 input/ouput area*/

  PA0NW00.PA0NWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pa0nm003 using passed data*/
   /* ------------------------------------------------------------*/

  PA0NM003.PA1OANBR = PAWREC.PAWOANBR; /* o/a number*/
  PA0NM003.PAWBUYYM = PAWREC.PAWBUYYM; /* current by date*/

   /* ------------------------------------------------------------*/
   /* load factory information*/
   /* ------------------------------------------------------------*/

  PA0NM003.YESCD = PA0NW01.YESCD; /* o/a status code*/
  PA0NM003.YESABRV = PA0NW01.YESABRV; /* o/a status desc*/
  PA0NM003.YETCD = PA0NW01.YETCD; /* o/a type   code*/
  PA0NM003.YETABRV = PA0NW01.YETABRV; /* o/a type   desc*/
  PA0NM003.PA1HLDFL = PA0NW01.PA1HLDFL; /* hold flag*/
  PA0NM003.PA0NMRFL = PA0NW01.PA0NWRFL; /* related o/a flag*/

  PA0NM003.PA1BUYMO = PA0NW01.PA1BUYMO; /* buy month*/
  PA0NM003.SY1STNBR = PA0NW01.SY1STNBR; /* style number*/
  PA0NM003.SY2CLRID = PA0NW01.SY2CLRID; /* color id*/
  PA0NM003.XDMCD = PA0NW01.XDMCD; /* dimension code*/
  PA0NM003.SY1SSTNM = PA0NW01.SY1SSTNM; /* style desc*/

  PA0NM003.PA0NM-ZZ-SETUP-DT = PA0NW01.ZZZSDT;

  if (PA0NW01.ZZZSTM != 0)
    PA0NW00.PA0NW-TIME = PA0NW01.ZZZSTM;
    PA0NW00.PA0NW-HH = PA0NW00.PA0NW-HOUR;
    PA0NW00.PA0NW-COLON = ":";
    PA0NW00.PA0NW-MN = PA0NW00.PA0NW-MIN;
    PA0NM003.PA0NM-ZZ-SETUP-HHMM = PA0NW00.PA0NW-HHMM;
  else
    PA0NM003.PA0NM-ZZ-SETUP-HHMM = " ";
  end

   /* ------------------------------------------------------------*/
   /* load factory status data*/
   /* ------------------------------------------------------------*/

  PA0NS26(); /* read m003 temp storage*/

  PA0NW00.PA0NWIDX = 1;
  while (PA0NW00.PA0NWIDX <= PA0NW05.PA0NWNLD) /* process temp storage*/

    PA0NM003.PA0NMDTL[PA0NWIDX] = PA0NW05.PA0NWDTL[PA0NWIDX];

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1; /* increment load index*/

  end


end // end PA0N311

// check attention identifier
Function PA0N320()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    PA0NW03.PA0NWSWF = "Y"; /* format screen m003*/
    PA0NW00.PA0NWSWR = "N"; /* data request*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PA0NM003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PA0NS01(); /* purge temp storage m003*/
      PA0NS02(); /* purge temp storage m003*/
      PA0NS03(); /* purge temp storage m004*/

      PAWREC.PAWOAIDX = 0; /* clear any o/a list built*/
      move 0 to PAWREC.PA1OANBR[1] for all;
      PAWREC.PAWDRVR = " ";

      XSPAS01(); /* Exit to another application*/

      PA0NW00.PA0NWSWD = "1"; /* map switch*/
      PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
      PA0NW00.PA0NWSWR = "Y"; /* request data load*/

      PA0NM001.CATOAP = PA0NM003.CATOAP;
      set PA0NM001.CATOAP cursor, bold; /* Highlight*/

    else

      PAWREC.XXXMODID = "320"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PA0NM003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      PA0NW00.PA0NWSWD = "1"; /* TO application*/
      PA0NW00.PA0NWSWF = "Y";
      exit stack;
    end

    XSPAS01(); /* Exit to another application*/

    PA0NW03.PA0NWSWF = "Y"; /* format screen m003*/
    PA0NW00.PA0NWSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* PF5 NOT PRESSED*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19  /* pf19 was not pressed*/
   && converseVar.eventKey not pf24) /* pf24 was not pressed*/

    PAWREC.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0N320

// Reset highlighted fields
Function PA0N330()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0NM003.CATOAP initialAttributes;
  set PA0NM003.CAITEM initialAttributes;


end // end PA0N330

// Verify the data entered
Function PA0N340()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PAWREC.XXXMODID = "340"; /* Module identification*/
    set PA0NM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PA0NW03.XXXTSPAG < 2)       /* and no previous pages*/

    PAWREC.XXXMODID = "340"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PA0NW03.XXXTSPAG >= PA0NW03.TA5TSQIX) /* and no more pages*/

    PAWREC.XXXMODID = "340"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* request to display header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* display hdr stat(pf13)*/

    if (PA0NW02.TA5TSQIX == 0)
      converseLib.validationFailed(167); /* no hdr status data loaded*/
      PAWREC.XXXMODID = "340";
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* display nil cust (pf15)*/

    if (PA0NW04.TA5TSQIX == 0)
      converseLib.validationFailed(169); /* no nil cust data loaded*/
      PAWREC.XXXMODID = "340";
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end PA0N340

// Process valid input request
Function PA0N350()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PA0NW03.PA0NWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* request display of PA0A PF5*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PA0NM001.CATOAP = "PA0A";
    COMMAREA.CATOAP = "PA0A";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end


   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    PA0NW03.XXXTSPAG = PA0NW03.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    PA0NW03.XXXTSPAG = PA0NW03.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request display of header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* hdr status data (pf13)*/

    PA0NW00.PA0NWSWD = "2"; /* map switch m002*/
    PA0NW02.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of nil customer data (pf15)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* nil customer data (pf15)*/

    PA0NW00.PA0NWSWD = "4"; /* map switch m004*/
    PA0NW04.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end


   /* ------------------------------------------------------------*/
   /* request display of PA0Q PF18*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18)
    PA0NM001.CATOAP = "PA0Q";
    COMMAREA.CATOAP = "PA0Q";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request display of oa status (pa0z) pf19*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19)
    PA0NM001.CATOAP = "PA0Z";
    COMMAREA.CATOAP = "PA0Z";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request display of related o/as (pa0w) pf24*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf24)
    PA0NM001.CATOAP = "PA0W";
    COMMAREA.CATOAP = "PA0W";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

end // end PA0N350

// NIL CUSTOMER DATA
Function PA0N400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PA0N410(); /* Format and display the map*/

  PA0N420(); /* Check attention identifier*/

  PA0N430(); /* Reset fields to normal intensity*/

  PA0N440(); /* Verify the entered data*/

  PA0N450(); /* Process valid input request*/


end // end PA0N400

// format and converse m004
Function PA0N410()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (PA0NW04.PA0NWSWF == "Y") /* map must be formatted*/
      PA0N411(); /* Format the data on the map*/
    end

  else
    PAWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PA0NW04.TA5TSQIX > 0)
    set PA0NM004.XXXLITPG skip;
    PA0NM004.XXXTSPAG = PA0NW04.XXXTSPAG; /* Current page*/
    set PA0NM004.XXXLITOF skip;
    PA0NM004.TA5TSQIX = PA0NW04.TA5TSQIX; /* max pages*/
  end

  PA0NM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PA0NM004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PA0NM004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PAWREC.XXXMSGNO != 0) /* Message to display*/
    if (PAWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PAWREC.XXXMSGNO);
    end /* error message number*/
    PA0NM004.XXXMODID = PAWREC.XXXMODID; /* Module identification*/
    set PA0NM004 alarm; /* Indicate sound alarm*/
  end

  converse PA0NM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = " "; /* Module identification*/
  PAWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = PA0NM004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PA0NM004.CAITEM; /* Application data*/


end // end PA0N410

// Format the display data
Function PA0N411()

   /* ------------------------------------------------------------*/
   /* init map pa0nm004*/
   /* ------------------------------------------------------------*/

  set PA0NM004 initial; /* m004 input/ouput area*/

  PA0NW00.PA0NWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pa0nm004 using passed data*/
   /* ------------------------------------------------------------*/

  PA0NM004.PA1OANBR = PAWREC.PAWOANBR; /* o/a number*/
  PA0NM004.PAWBUYYM = PAWREC.PAWBUYYM; /* current by date*/

   /* ------------------------------------------------------------*/
   /* load nil customer information*/
   /* ------------------------------------------------------------*/

  PA0NM004.YESCD = PA0NW01.YESCD; /* o/a status code*/
  PA0NM004.YESABRV = PA0NW01.YESABRV; /* o/a status desc*/
  PA0NM004.YETCD = PA0NW01.YETCD; /* o/a type   code*/
  PA0NM004.YETABRV = PA0NW01.YETABRV; /* o/a type   desc*/
  PA0NM004.PA1HLDFL = PA0NW01.PA1HLDFL; /* hold flag*/
  PA0NM004.PA0NMRFL = PA0NW01.PA0NWRFL; /* related o/a flag*/

  PA0NM004.PA1BUYMO = PA0NW01.PA1BUYMO; /* buy month*/
  PA0NM004.SY1STNBR = PA0NW01.SY1STNBR; /* style number*/
  PA0NM004.SY2CLRID = PA0NW01.SY2CLRID; /* color id*/
  PA0NM004.XDMCD = PA0NW01.XDMCD; /* dimension code*/
  PA0NM004.SY1SSTNM = PA0NW01.SY1SSTNM; /* style desc*/

  PA0NM004.PA0NM-ZZ-SETUP-DT = PA0NW01.ZZZSDT;

  if (PA0NW01.ZZZSTM != 0)
    PA0NW00.PA0NW-TIME = PA0NW01.ZZZSTM;
    PA0NW00.PA0NW-HH = PA0NW00.PA0NW-HOUR;
    PA0NW00.PA0NW-COLON = ":";
    PA0NW00.PA0NW-MN = PA0NW00.PA0NW-MIN;
    PA0NM004.PA0NM-ZZ-SETUP-HHMM = PA0NW00.PA0NW-HHMM;
  else
    PA0NM004.PA0NM-ZZ-SETUP-HHMM = " ";
  end

   /* ------------------------------------------------------------*/
   /* load nil customer status data*/
   /* ------------------------------------------------------------*/

  PA0NS27(); /* read m004 temp storage*/

  PA0NW00.PA0NWIDX = 1;
  while (PA0NW00.PA0NWIDX <= PA0NW05.PA0NWNLD) /* process temp storage*/

    PA0NM004.PA0NMDTL[PA0NWIDX] = PA0NW05.PA0NWDTL[PA0NWIDX];

    PA0NW00.PA0NWIDX = PA0NW00.PA0NWIDX + 1; /* increment load index*/

  end


end // end PA0N411

// check attention identifier
Function PA0N420()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    PA0NW04.PA0NWSWF = "Y"; /* format screen m004*/
    PA0NW00.PA0NWSWR = "N"; /* data request*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PA0NM004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PA0NS01(); /* purge temp storage m004*/
      PA0NS02(); /* purge temp storage m004*/
      PA0NS03(); /* purge temp storage m004*/

      PAWREC.PAWOAIDX = 0; /* clear any o/a list built*/
      move 0 to PAWREC.PA1OANBR[1] for all;
      PAWREC.PAWDRVR = " ";

      XSPAS01(); /* Exit to another application*/

      PA0NW00.PA0NWSWD = "1"; /* map switch*/
      PA0NW00.PA0NWSWF = "Y"; /* format screen m001*/
      PA0NW00.PA0NWSWF = "Y"; /* data request*/

      PA0NM001.CATOAP = PA0NM004.CATOAP;
      set PA0NM001.CATOAP cursor, bold; /* Highlight*/

    else

      PAWREC.XXXMODID = "420"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PA0NM004"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      PA0NW00.PA0NWSWD = "1"; /* TO application*/
      PA0NW00.PA0NWSWF = "Y";
      exit stack;
    end

    XSPAS01(); /* Exit to another application*/

    PA0NW04.PA0NWSWF = "Y"; /* format screen m004*/
    PA0NW00.PA0NWSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* PF5 NOT PRESSED*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19  /* pf19 was not pressed*/
   && converseVar.eventKey not pf24) /* pf24 was not pressed*/

    PAWREC.XXXMODID = "420"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PA0N420

// Reset highlighted fields
Function PA0N430()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PA0NM004.CATOAP initialAttributes;
  set PA0NM004.CAITEM initialAttributes;


end // end PA0N430

// Verify the data entered
Function PA0N440()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PAWREC.XXXMODID = "440"; /* Module identification*/
    set PA0NM004.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PA0NW04.XXXTSPAG < 2)       /* and no previous pages*/

    PAWREC.XXXMODID = "440"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PA0NW04.XXXTSPAG >= PA0NW04.TA5TSQIX) /* and no more pages*/

    PAWREC.XXXMODID = "440"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* request to display header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* display hdr stat(pf13)*/

    if (PA0NW02.TA5TSQIX == 0)
      converseLib.validationFailed(167); /* no hdr status data loaded*/
      PAWREC.XXXMODID = "440";
    end
  end

   /* ------------------------------------------------------------*/
   /* request to display factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* display fcty stat(pf14)*/

    if (PA0NW03.TA5TSQIX == 0)
      converseLib.validationFailed(168); /* no fcty data loaded*/
      PAWREC.XXXMODID = "440";
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end PA0N440

// Process valid input request
Function PA0N450()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PA0NW04.PA0NWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* TRANSFER TO PA0A PF5*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PA0NM001.CATOAP = "PA0A";
    COMMAREA.CATOAP = "PA0A";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    PA0NW04.XXXTSPAG = PA0NW04.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    PA0NW04.XXXTSPAG = PA0NW04.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request display of header status audit data (pf13)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* hdr status data (pf13)*/

    PA0NW00.PA0NWSWD = "2"; /* map switch m002*/
    PA0NW02.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* request display of factory status audit data (pf14)*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* fcty status data (pf14)*/

    PA0NW00.PA0NWSWD = "3"; /* map switch m003*/
    PA0NW03.PA0NWSWF = "Y"; /* format map switch*/

    exit stack;

  end


   /* ------------------------------------------------------------*/
   /* TRANSFER TO PA0Q PF18*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18)
    PA0NM001.CATOAP = "PA0Q";
    COMMAREA.CATOAP = "PA0Q";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* TRANSFER TO PA0Z PF19*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf19)
    PA0NM001.CATOAP = "PA0Z";
    COMMAREA.CATOAP = "PA0Z";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

   /* ------------------------------------------------------------*/
   /* request display of related o/as (pa0w) pf24*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf24)
    PA0NM001.CATOAP = "PA0W";
    COMMAREA.CATOAP = "PA0W";
    COMMAREA.CAITEM = " ";
    XSPAS01();
  end

end // end PA0N450

// purge temporary storage m002
Function PA0NS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PA0NW02 empty; /* init work record*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN1"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE PAD1 TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS01

// purge temporary storage m003
Function PA0NS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PA0NW03 empty; /* init m003 work record*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN2"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE PAD2 TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS02

// purge temporary storage m004
Function PA0NS03()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PA0NW04 empty; /* init m004 work record*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN3"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE PAD3 TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS03

// select 's' dproda.vpahdr01
Function PA0NS04()

   /* ------------------------------------------------------------*/
   /* Select 's' dproda.vpahdr01*/
   /* ------------------------------------------------------------*/

  set PA1REC empty;

  PA1REC.PA1OANBR = PAWREC.PAWOANBR;

  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PAWREC.XXXMODID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS04

// select 's5' dprodc.vpoait01
Function PA0NS05()
   /* ------------------------------------------------------------*/
   /* select set on dprodc.vpoait01 table*/
   /* ------------------------------------------------------------*/

  set PCJREC empty; /* Initialize record*/

  PCJREC.PA1OANBR = PAWREC.PAWOANBR;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4080" ("S5", SQLCA, PCJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODC.VPOAIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS05"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCJREC.PCJKEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS05

// fetch 'n5' dprodc.vpoait01
Function PA0NS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpoait01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4080" ("N5", SQLCA, PCJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT PO AUDIT ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS06"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PCJREC.PCJKEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS06

// close 'c5' dprodc.vpoait01
Function PA0NS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4080" ("C5", SQLCA, PCJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S07"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPOAIT01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS07"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOAIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS07

// select 's1' dproda.vpaitm01
Function PA0NS08()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpaitm01 table*/
   /* ------------------------------------------------------------*/

  set PA2REC empty; /* Initialize record*/

  PA2REC.PA1OANBR = PAWREC.PAWOANBR;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4980" ("S1", SQLCA, PA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPAITM01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS08"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA2REC.PA2KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS08

// fetch 'n1' dproda.vpaitm01
Function PA0NS09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpaitm01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4980" ("N1", SQLCA, PA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OA ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS09"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA2REC.PA2KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS09

// close 'c1' dproda.vpaitm01
Function PA0NS10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4980" ("C1", SQLCA, PA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPAITM01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS10"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS10

// select 's2' dproda.vpacmt01
Function PA0NS11()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpacmt01 table*/
   /* ------------------------------------------------------------*/

  PA9REC.PA1OANBR = PAWREC.PAWOANBR;

  try
    call "IO4820" ("S2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPACMT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS11"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS11

// fetch 'n2' dproda.vpacmt01
Function PA0NS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpacmt01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4820" ("N2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT HDR STATUS ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS12"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA9REC.PA9KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS12

// close 'c2' dproda.vpacmt01
Function PA0NS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4820" ("C2", SQLCA, PA9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPACMT01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS13"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACMT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS13

// add temporary storage m002
Function PA0NS14()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5APPID = "PAN1"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PA0NW05 empty; /* M002 display storage*/

    PA0NW00.PA0NWIDX = 1; /* Display line index*/

    PA0NW02.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S14"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE M002";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS14

// select 's1' dproda.vfypa001
Function PA0NS15()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vfypa001 table*/
   /* ------------------------------------------------------------*/

  set PA4REC empty; /* Initialize record*/

  PA4REC.PA1OANBR = PAWREC.PAWOANBR;
  PA4REC.YESCD = "*";

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4810" ("S1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VFYPA001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS15"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS15

// fetch 'n1' dproda.vfypa001
Function PA0NS16()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vfypa001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4810" ("N1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT FCTY STATUS ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS16"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/
  TA1REC.TA1TBLKE = PA4REC.PA4KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS16

// close 'c1' dproda.vfypa001
Function PA0NS17()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4810" ("C1", SQLCA, PA4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S17"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VFYPA001 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS17"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPA001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS17

// add temporary storage m003
Function PA0NS18()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5APPID = "PAN2"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PA0NW03 empty; /* M003 display storage*/

    PA0NW00.PA0NWIDX = 1; /* Display line index*/

    PA0NW03.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S18"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE M003";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS18

// select 's1' dproda.vpacus01
Function PA0NS19()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpacus01 table*/
   /* ------------------------------------------------------------*/

  set PAGREC empty; /* Initialize record*/

  PAGREC.PA1OANBR = PAWREC.PAWOANBR;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5140" ("S1", SQLCA, PAGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPACUS01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS19"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PAGREC.PAGKEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS19

// fetch 'n1' dproda.vpacus01
Function PA0NS20()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for VPACUS01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5140" ("N1", SQLCA, PAGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OA CUSTOMER ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS20"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PAGREC.PAGKEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS20

// close 'c1' dproda.vpacus01
Function PA0NS21()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5140" ("C1", SQLCA, PAGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S21"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VPACUS01 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS21"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPACUS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS21

// add temporary storage m004
Function PA0NS22()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5APPID = "PAN3"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PA0NW04 empty; /* M002 display storage*/

    PA0NW00.PA0NWIDX = 1; /* Display line index*/

    PA0NW04.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE M004";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS22

// select DPRODG.VSYCLR01 row
Function PA0NS23()
   /* ------------------------------------------------------------*/
   /* obtain style number dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

  PG2REC.XGPCD = PA0NW00.XGPCD;
  PG2REC.SY1STNBR = PA1REC.SY1STNBR;
  PG2REC.SY2CLRID = PA1REC.SY2CLRID;
  PG2REC.XDMCD = PA1REC.XDMCD;

  try
    call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PAWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSYCLR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS23

// select 'sa' dprodc.vprdcu01
Function PA0NS24()
   /* ------------------------------------------------------------*/
   /* Select unique customer xref row from table.*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = PA0NW00.XGPCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PAWREC.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"SA\" DPRODC.VPRDCU01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS24

// read temporary storage m002
Function PA0NS25()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN1"; /* Application identification*/
  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PA0NW02.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S25"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS25

// read temporary storage m003
Function PA0NS26()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN2"; /* Application identification*/
  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PA0NW03.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S26"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS26

// read temporary storage m004
Function PA0NS27()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PAN3"; /* Application identification*/
  PA0NW05.XXXTSLEN = PA0NW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PA0NW04.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PA0NW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PAWREC.XXXMODID = "S27"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS27

// Select 'S1' dproda.vpaxrf01
Function PA0NS28()
   /* ------------------------------------------------------------*/
   /* select set on dproda.vpaxrf01 table*/
   /* ------------------------------------------------------------*/

  set PA7REC empty; /* Initialize record*/

  PA7REC.PA1OANBR = PAWREC.PAWOANBR;

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5120" ("S1", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S28"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "IO TO OPEN DPRODA.VPAXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS28"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS28

// Fetch 'N1' dproda.vpaxrf01
Function PA0NS29()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from select for vpaxrf01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5120" ("N1", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT OA XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS29"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* Formatted error key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS29

// Select dproda.vpahdr01
Function PA0NS30()

   /* ------------------------------------------------------------*/
   /* Select 's' dproda.vpahdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4830" ("S ", SQLCA, PA1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PAWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* 'resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* 'error - please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT \"S\" DPRODA.VPAHDR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PAWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PA1REC.PA1KEY; /* Key field*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS30

// Close 'C1' dproda.vpaxrf01
Function PA0NS31()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5120" ("C1", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PAWREC.XXXMODID = "S31"; /* Module identification*/
  converseLib.validationFailed(10); /* 'Error - Please nofity programming'*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE VFYPA001 TABLE ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "PA0NS31"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODA   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PA0NS31

// SELECT 'sb' dproda.vpaxrf01
Function PA0NS32()
   /* -------------------------------------------------*/
    /* SELECT DPRODA.VPAXRF01 row to determine the*/
    /* PA0nmrfl value.*/
   /* -------------------------------------------------*/

  PA7REC.PA7PRNBR = PAWREC.PAWOANBR; /* o/a number*/

  try
    call "IO5120" ("SB", SQLCA, PA7REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* related o/a*/
     || SQLCA.VAGen_SQLCODE == 100) /* no related o/as*/
      return;
    else
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PA0NS32 GET RELATED O/A INFO  ";
      TA1REC.TA1DBASE = "DPRODA  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPAXRF01"; /* Table view name*/
      TA1REC.TA1TBLKE = PA7REC.PA7KEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
      SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/
      return;
    end
    return;
  end
  return;

end // end PA0NS32

//*** RECORD=PA0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PA0NW00 type basicRecord
  10 XGPCD XGPCD ; 
  10 PA0NWSWR PA0NWSWR ; 
  10 PA0NWSWF PA0NWSWF ; 
  10 PA0NWSWD PA0NWSWD ; 
  10 PA0NWIDX PA0NWIDX ; 
  10 PA0NWLIX PA0NWLIX ; 
  10 PA0NWPIX PA0NWPIX ; 
  10 PA0NWFDS PA0NWFDS ; 
  10 PA0NWFQD PA0NWFQD ; 
  10 PA0NWFPD PA0NWFPD ; 
  10 PA0NWDND PA0NWDND ; 
  10 PA0NWFCD PA0NWFCD ; 
  10 PA0NWTCD PA0NWTCD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 PA0NWNUM PA0NWNUM ; 
  10 PA0NWWDT PA0NWWDT ; 
    15 PA0NWSCC PA0NWSCC ; 
    15 PA0NWSYY PA0NWSYY ; 
    15 PA0NWSMM PA0NWSMM ; 
    15 PA0NWSDD PA0NWSDD ; 
  10 PA0NWWTM PA0NWWTM ; 
    15 PA0NWSHH PA0NWSHH ; 
    15 PA0NWSMN PA0NWSMN ; 
  10 PA0NWERR PA0NWERR ; 
  10 PA0NWNDT PA0NWNDT ; 
    15 PA0NWNDC PA0NWNDC ; 
    15 PA0NWNDY PA0NWNDY ; 
    15 PA0NWNDM PA0NWNDM ; 
    15 PA0NWNDD PA0NWNDD ; 
  10 PA0NWFND PA0NWFND ; 
    15 PA0NWFDM PA0NWFDM ; 
    15 PA0NWFDD PA0NWFDD ; 
    15 PA0NWFDY PA0NWFDY ; 
  10 PA0NW-TIME PA0NW-TIME ; 
    15 PA0NW-HOUR PA0NW-HOUR ; 
    15 PA0NW-MIN PA0NW-MIN ; 
  10 PA0NW-HHMM PA0NW-HHMM ; 
    15 PA0NW-HH PA0NW-HH ; 
    15 PA0NW-COLON PA0NW-COLON ; 
    15 PA0NW-MN PA0NW-MN ; 
end // end PA0NW00

//*** RECORD=PA0NW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record PA0NW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 YESCD YESCD ; 
  10 YESABRV YESABRV ; 
  10 PA1HLDFL PA1HLDFL ; 
  10 PA0NWRFL PA0NWRFL ; 
  10 XXXPGUID XXXPGUID ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZSTM ZZZSTM ; 
  10 YETCD YETCD ; 
  10 YETABRV YETABRV ; 
  10 PA1YETBY PA1YETBY ; 
  10 PA1YETDT PA1YETDT ; 
  10 PA1BUYMO PA1BUYMO ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XDMCD XDMCD ; 
  10 PC2CUXID PC2CUXID ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 PCJOAMEM PCJOAMEM [20] ; 
  10 XWHCD XWHCD [20] ; 
  10 XWHABRV XWHABRV [20] ; 
  10 PA0NWXRF PA0NWXRF [20] ; 
  10 PA0NMSEL PA0NMSEL [4] ; 
  10 PA0NMPNB PA0NMPNB [4] ; 
  10 PA0NMYCD PA0NMYCD [4] ; 
end // end PA0NW01

//*** RECORD=PA0NW02 ****
// -------------------
// map 002 work record
// -------------------
// ***********************
Record PA0NW02 type basicRecord
  5 PA0NWGP2 PA0NWGP2 ; 
    10 PA0NWRT1 PA0NWRT1 ; 
      15 YESCD YESCD ; 
      15 * char(1) ; 
      15 YESABRV YESABRV ; 
      15 * char(3) ; 
      15 XXXUSER XXXUSER ; 
      15 * char(1) ; 
      15 PA0NWSMM PA0NWSMM ; 
      15 PA0NWDS1 PA0NWDS1 ; 
      15 PA0NWSDD PA0NWSDD ; 
      15 PA0NWDS2 PA0NWDS2 ; 
      15 PA0NWSYY PA0NWSYY ; 
      15 * char(1) ; 
      15 PA0NWSHH PA0NWSHH ; 
      15 PA0NWCON PA0NWCON ; 
      15 PA0NWSMN PA0NWSMN ; 
      15 * char(42) ; 
    10 PA0NWRT2 PA0NWRT2 ; 
      15 * char(12) ; 
      15 PA9COM PA9COM ; 
    10 PA0NWSWF PA0NWSWF ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end PA0NW02

//*** RECORD=PA0NW03 ****
// -------------------
// map 003 work record
// -------------------
// ***********************
Record PA0NW03 type basicRecord
  5 PA0NWGP3 PA0NWGP3 ; 
    10 PA0NWRT1 PA0NWRT1 ; 
      15 PA0NWFDS PA0NWFDS ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 * char(3) ; 
      15 PA0NWFQD PA0NWFQD ; 
      15 PA0NWFSG PA0NWFSG ; 
      15 PA0NWFQT PA0NWFQT ; 
      15 * char(3) ; 
      15 PA0NWFPD PA0NWFPD ; 
      15 XXXINIT XXXINIT ; 
      15 * char(3) ; 
      15 PA0NWDND PA0NWDND ; 
      15 PA0NWDNR PA0NWDNR ; 
      15 * char(5) ; 
    10 PA0NWRT2 PA0NWRT2 ; 
      15 YESCD YESCD ; 
      15 * char(1) ; 
      15 YESABRV YESABRV ; 
      15 * char(3) ; 
      15 XXXUSER XXXUSER ; 
      15 * char(1) ; 
      15 PA0NWSMM PA0NWSMM ; 
      15 PA0NWDS1 PA0NWDS1 ; 
      15 PA0NWSDD PA0NWSDD ; 
      15 PA0NWDS2 PA0NWDS2 ; 
      15 PA0NWSYY PA0NWSYY ; 
      15 * char(1) ; 
      15 PA0NWSHH PA0NWSHH ; 
      15 PA0NWCON PA0NWCON ; 
      15 PA0NWSMN PA0NWSMN ; 
      15 * char(42) ; 
    10 PA0NWRT3 PA0NWRT3 ; 
      15 * char(12) ; 
      15 PA9COM PA9COM ; 
    10 PA0NWSWF PA0NWSWF ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end PA0NW03

//*** RECORD=PA0NW04 ****
// -------------------
// map 004 work record
// -------------------
// ***********************
Record PA0NW04 type basicRecord
  5 PA0NWGP4 PA0NWGP4 ; 
    10 PA0NWRT1 PA0NWRT1 ; 
      15 PA0NWCDS PA0NWCDS ; 
      15 PA0NWCNB PA0NWCNB ; 
      15 * char(1) ; 
      15 PA0NWCST PA0NWCST ; 
      15 * char(1) ; 
      15 PC2CUXID PC2CUXID ; 
      15 * char(1) ; 
      15 PA0NWCNM PA0NWCNM ; 
      15 * char(1) ; 
      15 PA0NWCND PA0NWCND ; 
      15 * char(1) ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 * char(1) ; 
      15 PA0NWTSG PA0NWTSG ; 
      15 PA0NWTQT PA0NWTQT ; 
      15 * char(1) ; 
      15 PA0NWASG PA0NWASG ; 
      15 PA0NWAQT PA0NWAQT ; 
      15 * char(1) ; 
      15 PA0NWSTA PA0NWSTA ; 
    10 PA0NWSWF PA0NWSWF ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end PA0NW04

//*** RECORD=PA0NW05 ****
// -----------------------------
// temporary storage work record
// -----------------------------
// ***********************
Record PA0NW05 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(926) ; 
    10 PA0NWNLD PA0NWNLD ; 
    10 PA0NWDTL PA0NWDTL [12] ; 
end // end PA0NW05

//*** RECORD=PCJREC ****
// ******* PRODUCTION ORDER DEST ITEM PLAN AUDIT TABLE ********
// 
// DB2 TABLE VIEW:      DPRODC.VPOAIT01
// 
// COPYLIB MEMBER:      DCL00628
// 
// I/O MODULE:          IO4080
// 
// KEY TO DB2 TABLE:    XGPCD,              XGPCD,
//                      PC3PONBR,           PC3PONBR,
//                      PC6ITMNB            Product fields
//                                          dates
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/01/89   wdishm   New record.
// 02/15/90   JWOOD    RENAMED XSDCD TO PC2INSEG AS PER MCHRIS
// 04/20/90   MCHRIS   deleted pc_chng_memo_nbr
//                     changed pc_memo_nbr_prt_fl to
//                             pc_cmemo_prt_fl
//                     changed pc_cmemo_prt_hhmm to
//                             pc-cmemo-prt-hhmmss
// 06/10/91   chaert   added 3 fields op-cust-ord-id   op1cuoid
//                                    op-nike-ord-id   op1norid
//                                    op-ord-part-char op1partn
// **********************
Record PCJREC type basicRecord
  5 PCJGROUP PCJGROUP ; 
    10 PCJKEY PCJKEY ; 
      15 XGPCD XGPCD ; 
      15 PC3PONBR PC3PONBR ; 
    10 PCJSEQNO PCJSEQNO ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC6ETSDT PC6ETSDT ; 
    10 PC6OETS PC6OETS ; 
    10 PC6RTADT PC6RTADT ; 
    10 YMTCD YMTCD ; 
    10 PC6CXNBR PC6CXNBR ; 
    10 XWHCD XWHCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC6XCTCD PC6XCTCD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 YOACD YOACD ; 
    10 YACCD YACCD ; 
    10 PA1OANBR PA1OANBR ; 
    10 PCJOAMEM PCJOAMEM ; 
    10 PCJMEMO PCJMEMO ; 
    10 PCJMEMDT PCJMEMDT ; 
    10 PCJMEMTM PCJMEMTM ; 
    10 PCJNETQT PCJNETQT ; 
    10 XXXPGUID XXXPGUID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XPRCD XPRCD ; 
    10 PCIBFRA PCIBFRA ; 
    10 PCIAFTA PCIAFTA ; 
    10 PCIBFRN PCIBFRN ; 
    10 PCIAFTN PCIAFTN ; 
    10 PCJAMEND PCJAMEND ; 
    10 PCJOAPRT PCJOAPRT ; 
    10 PCJGLOFL PCJGLOFL ; 
    10 XDSCD XDSCD ; 
    10 PC6PLAN PC6PLAN ; 
    10 YSMXDV YSMXDV ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PCJREC

// prev ord adj nbr from pa7rec
DataItem PA0NMPNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// comb. o/a xref map select
DataItem PA0NMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// o/a xref yetcd
DataItem PA0NMYCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0NW-COLON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0NW-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0NW-HHMM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PA0NW-HOUR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0NW-MIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0NW-MN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0NW-TIME num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adjustment qty
DataItem PA0NWAQT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total adjust sign -/+
DataItem PA0NWASG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from/to customer literal
DataItem PA0NWCDS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem PA0NWCNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// customer need date
DataItem PA0NWCND num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer name
DataItem PA0NWCNM char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// :
DataItem PA0NWCON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem PA0NWCST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// document nbr literal
DataItem PA0NWDND char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// document nbr
DataItem PA0NWDNR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -
DataItem PA0NWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// -
DataItem PA0NWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail lines
DataItem PA0NWDTL char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select error flag
DataItem PA0NWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from customer literal
DataItem PA0NWFCD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted customer need day
DataItem PA0NWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted customer need month
DataItem PA0NWFDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory literal
DataItem PA0NWFDS char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted customer need year
DataItem PA0NWFDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted customer need date
DataItem PA0NWFND num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory app by literal
DataItem PA0NWFPD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory qty literal
DataItem PA0NWFQD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory qty
DataItem PA0NWFQT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// factory qty sign -/+
DataItem PA0NWFSG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for pa0nw02
DataItem PA0NWGP2 char(163)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// group level for pa0nw02
DataItem PA0NWGP3 char(240)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// group level for pa0nw04
DataItem PA0NWGP4 char(86)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// index
DataItem PA0NWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load index
DataItem PA0NWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer need century
DataItem PA0NWNDC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer need day
DataItem PA0NWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer need month
DataItem PA0NWNDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer need date
DataItem PA0NWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer need year
DataItem PA0NWNDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem PA0NWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field
DataItem PA0NWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem PA0NWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// related o/a flag
DataItem PA0NWRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type one
DataItem PA0NWRT1 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type two
DataItem PA0NWRT2 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type three
DataItem PA0NWRT3 char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work cc
DataItem PA0NWSCC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set day
DataItem PA0NWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set hour
DataItem PA0NWSHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set month
DataItem PA0NWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// set minute
DataItem PA0NWSMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PA0NWSTA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map switch
DataItem PA0NWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format map switch
DataItem PA0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem PA0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set year
DataItem PA0NWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to customer literal
DataItem PA0NWTCD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total order qty
DataItem PA0NWTQT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total order sign -/+
DataItem PA0NWTSG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date
DataItem PA0NWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work time
DataItem PA0NWWTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer xref
DataItem PA0NWXRF char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem PCJGROUP char(208)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem PCJKEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

